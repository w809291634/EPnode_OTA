###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:40
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mac\low_level\srf04\mac_tx.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mac\low_level\srf04\mac_tx.c"
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        XLAB -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\mac_tx.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\mac_tx.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mac\low_level\srf04\mac_tx.c
      1          /**************************************************************************************************
      2            Filename:       mac_tx.c
      3            Revised:        $Date: 2007-10-15 14:56:36 -0700 (Mon, 15 Oct 2007) $
      4            Revision:       $Revision: 15687 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          
     45          /* hal */
     46          #include "hal_types.h"
     47          #include "hal_defs.h"
     48          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe1
   \   unsigned char volatile __sfr RFST
   \                     RFST:
   \   000000                DS 1
     49          #include "hal_mac_cfg.h"
     50          
     51          /* high-level */
     52          #include "mac_spec.h"
     53          #include "mac_pib.h"
     54          
     55          /* exported low-level */
     56          #include "mac_low_level.h"
     57          
     58          /* low-level specific */
     59          #include "mac_tx.h"
     60          #include "mac_backoff_timer.h"
     61          #include "mac_rx.h"
     62          #include "mac_rx_onoff.h"
     63          #include "mac_radio.h"
     64          #include "mac_sleep.h"
     65          
     66          /* target specific */
     67          #include "mac_radio_defs.h"
     68          
     69          /* debug */
     70          #include "mac_assert.h"
     71          
     72          
     73          /* ------------------------------------------------------------------------------------------------
     74           *                                            Defines
     75           * ------------------------------------------------------------------------------------------------
     76           */
     77          #define MFR_LEN                   MAC_FCS_FIELD_LEN
     78          #define PREPENDED_BYTE_LEN        1
     79          
     80          
     81          /* ------------------------------------------------------------------------------------------------
     82           *                                         Global Constants
     83           * ------------------------------------------------------------------------------------------------
     84           */
     85          
     86          /*
     87           *  This is the time, in backoffs, required to set up a slotted transmit.
     88           *  It is exported to high level so that code can schedule enough time
     89           *  for slotted transmits.
     90           *
     91           *  A default is provided if a value is not specified.  If the default
     92           *  is not appropriate, a #define should be added within hal_mac_cfg.h.
     93           */
     94          #ifndef HAL_MAC_TX_SLOTTED_DELAY
     95          #define HAL_MAC_TX_SLOTTED_DELAY    3
     96          #endif

   \                                 In  segment XDATA_ROM_C, align 1
     97          uint8 const macTxSlottedDelay = HAL_MAC_TX_SLOTTED_DELAY;
   \                     macTxSlottedDelay:
   \   000000   03           DB 3
     98          
     99          
    100          /* ------------------------------------------------------------------------------------------------
    101           *                                         Global Variables
    102           * ------------------------------------------------------------------------------------------------
    103           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          uint8 macTxActive;
   \                     macTxActive:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          uint8 macTxType;
   \                     macTxType:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          uint8 macTxBe;
   \                     macTxBe:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          uint8 macTxCsmaBackoffDelay;
   \                     macTxCsmaBackoffDelay:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    108          
    109          
    110          /* ------------------------------------------------------------------------------------------------
    111           *                                         Local Variables
    112           * ------------------------------------------------------------------------------------------------
    113           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          static uint8 nb;
   \                     nb:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    115          static uint8 txSeqn;
   \                     txSeqn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          static uint8 txAckReq;
   \                     txAckReq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          static uint8 txRetransmitFlag;
   \                     txRetransmitFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    118          
    119          
    120          /* ------------------------------------------------------------------------------------------------
    121           *                                         Local Prototypes
    122           * ------------------------------------------------------------------------------------------------
    123           */
    124          static void txCsmaPrep(void);
    125          static void txGo(void);
    126          static void txCsmaGo(void);
    127          static void txComplete(uint8 status);
    128          
    129          
    130          /**************************************************************************************************
    131           * @fn          macTxInit
    132           *
    133           * @brief       Initialize variables for tx module.
    134           *
    135           * @param       none
    136           *
    137           * @return      none
    138           **************************************************************************************************
    139           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    140          MAC_INTERNAL_API void macTxInit(void)
   \                     macTxInit:
    141          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    142            macTxActive      = MAC_TX_ACTIVE_NO_ACTIVITY;
   \   000004   90....       MOV     DPTR,#macTxActive
   \   000007   7400         MOV     A,#0x0
   \   000009   F0           MOVX    @DPTR,A
    143            txRetransmitFlag = 0;
   \   00000A   90....       MOV     DPTR,#txRetransmitFlag
   \   00000D   7400         MOV     A,#0x0
   \   00000F   F0           MOVX    @DPTR,A
    144          }
   \   000010   D083         POP     DPH
   \   000012   D082         POP     DPL
   \   000014   02....       LJMP    ?BRET
    145          
    146          
    147          /**************************************************************************************************
    148           * @fn          macTxHaltCleanup
    149           *
    150           * @brief       -
    151           *
    152           * @param       none
    153           *
    154           * @return      none
    155           **************************************************************************************************
    156           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    157          MAC_INTERNAL_API void macTxHaltCleanup(void)
   \                     macTxHaltCleanup:
    158          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    159            MAC_RADIO_TX_RESET();
   \   000004                ; Setup parameters for call to function macCspTxReset
   \   000004   12....       LCALL   ??macCspTxReset?relay; Banked call to: macCspTxReset
    160            macTxInit();
   \   000007                ; Setup parameters for call to function macTxInit
   \   000007   12....       LCALL   ??macTxInit?relay    ; Banked call to: macTxInit
    161          }
   \   00000A   D083         POP     DPH
   \   00000C   D082         POP     DPL
   \   00000E   02....       LJMP    ?BRET
    162          
    163          
    164          /**************************************************************************************************
    165           * @fn          macTxFrame
    166           *
    167           * @brief       Transmit the frame pointed to by pMacDataTx with the specified type.
    168           *              NOTE! It is not legal to call this function from interrupt context.
    169           *
    170           * @param       txType - type of transmit
    171           *
    172           * @return      none
    173           **************************************************************************************************
    174           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    175          MAC_INTERNAL_API void macTxFrame(uint8 txType)
   \                     macTxFrame:
    176          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
    177            MAC_ASSERT(!macTxActive);            /* transmit on top of transmit */
   \   000007   90....       MOV     DPTR,#macTxActive
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6003         JZ      ??macTxFrame_0
   \   00000D                ; Setup parameters for call to function halAssertHandler
   \   00000D   12....       LCALL   ??halAssertHandler?relay; Banked call to: halAssertHandler
    178          
    179            /* mark transmit as active */
    180            macTxActive = MAC_TX_ACTIVE_INITIALIZE;
   \                     ??macTxFrame_0:
   \   000010   90....       MOV     DPTR,#macTxActive
   \   000013   7401         MOV     A,#0x1
   \   000015   F0           MOVX    @DPTR,A
    181          
    182            /*
    183             *  The MAC will not enter sleep mode if there is an active transmit.  However, if macSleep() is
    184             *  ever called from interrupt context, it possible to enter sleep state after a transmit is
    185             *  intiated but before macTxActive is set.  To recover from this, the transmit must be aborted
    186             *  and proper notificiation given to high-level.
    187             */
    188            if (macSleepState != MAC_SLEEP_STATE_AWAKE)
   \   000016   90....       MOV     DPTR,#macSleepState
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6008         JZ      ??macTxFrame_1
    189            {
    190              /* notify high-level that transmit had to be aborted */
    191              txComplete(MAC_TX_ABORTED);
   \   00001C                ; Setup parameters for call to function txComplete
   \   00001C   791D         MOV     R1,#0x1d
   \   00001E   12....       LCALL   ??txComplete?relay   ; Banked call to: txComplete
    192          
    193              /* exit from transmit logic */
    194              return;
   \   000021   02....       LJMP    ??macTxFrame_2 & 0xFFFF
    195            }
    196          
    197            /* save transmit type */
    198            macTxType = txType;
   \                     ??macTxFrame_1:
   \   000024   E5..         MOV     A,?V1
   \   000026   90....       MOV     DPTR,#macTxType
   \   000029   F0           MOVX    @DPTR,A
    199          
    200            /*-------------------------------------------------------------------------------
    201             *  Prepare for transmit.
    202             */
    203            if (macTxType == MAC_TX_TYPE_SLOTTED)
   \   00002A   90....       MOV     DPTR,#macTxType
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6402         XRL     A,#0x2
   \   000030   7005         JNZ     ??macTxFrame_3
    204            {
    205              MAC_RADIO_TX_PREP_SLOTTED();
   \   000032                ; Setup parameters for call to function macCspTxPrepSlotted
   \   000032   12....       LCALL   ??macCspTxPrepSlotted?relay; Banked call to: macCspTxPrepSlotted
   \   000035   8061         SJMP    ??macTxFrame_4
    206            }
    207            else
    208            {
    209              MAC_ASSERT((macTxType == MAC_TX_TYPE_SLOTTED_CSMA) || (macTxType == MAC_TX_TYPE_UNSLOTTED_CSMA));
   \                     ??macTxFrame_3:
   \   000037   90....       MOV     DPTR,#macTxType
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   600B         JZ      ??macTxFrame_5
   \   00003D   90....       MOV     DPTR,#macTxType
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6401         XRL     A,#0x1
   \   000043   6003         JZ      ??macTxFrame_5
   \   000045                ; Setup parameters for call to function halAssertHandler
   \   000045   12....       LCALL   ??halAssertHandler?relay; Banked call to: halAssertHandler
    210          
    211              nb = 0;
   \                     ??macTxFrame_5:
   \   000048   90....       MOV     DPTR,#nb
   \   00004B   7400         MOV     A,#0x0
   \   00004D   F0           MOVX    @DPTR,A
    212              macTxBe = (pMacDataTx->internal.txOptions & MAC_TXOPTION_ALT_BE) ? macPib.altBe : macPib.minBe;
   \   00004E   90....       MOV     DPTR,#pMacDataTx
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F8           MOV     R0,A
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   C8           XCH     A,R0
   \   000056   240E         ADD     A,#0xe
   \   000058   F582         MOV     DPL,A
   \   00005A   C8           XCH     A,R0
   \   00005B   3400         ADDC    A,#0x0
   \   00005D   F583         MOV     DPH,A
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   A2E6         MOV     C,0xE0 /* A   */.6
   \   000062   5006         JNC     ??macTxFrame_6
   \   000064   90....       MOV     DPTR,#macPib + 58
   \   000067   E0           MOVX    A,@DPTR
   \   000068   8004         SJMP    ??macTxFrame_7
   \                     ??macTxFrame_6:
   \   00006A   90....       MOV     DPTR,#macPib + 28
   \   00006D   E0           MOVX    A,@DPTR
   \                     ??macTxFrame_7:
   \   00006E   90....       MOV     DPTR,#macTxBe
   \   000071   F0           MOVX    @DPTR,A
    213          
    214              if ((macTxType == MAC_TX_TYPE_SLOTTED_CSMA) && (macPib.battLifeExt))
   \   000072   90....       MOV     DPTR,#macTxType
   \   000075   E0           MOVX    A,@DPTR
   \   000076   701D         JNZ     ??macTxFrame_8
   \   000078   90....       MOV     DPTR,#macPib + 3
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   6017         JZ      ??macTxFrame_8
    215              {
    216                macTxBe = MIN(2, macTxBe);
   \   00007E   90....       MOV     DPTR,#macTxBe
   \   000081   E0           MOVX    A,@DPTR
   \   000082   C3           CLR     C
   \   000083   9403         SUBB    A,#0x3
   \   000085   4004         JC      ??macTxFrame_9
   \   000087   7802         MOV     R0,#0x2
   \   000089   8005         SJMP    ??macTxFrame_10
   \                     ??macTxFrame_9:
   \   00008B   90....       MOV     DPTR,#macTxBe
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   F8           MOV     R0,A
   \                     ??macTxFrame_10:
   \   000090   E8           MOV     A,R0
   \   000091   90....       MOV     DPTR,#macTxBe
   \   000094   F0           MOVX    @DPTR,A
    217              }
    218          
    219              txCsmaPrep();
   \                     ??macTxFrame_8:
   \   000095                ; Setup parameters for call to function txCsmaPrep
   \   000095   12....       LCALL   ??txCsmaPrep?relay   ; Banked call to: txCsmaPrep
    220            }
    221          
    222            /*-------------------------------------------------------------------------------
    223             *  Load transmit FIFO unless this is a retransmit.  No need to write
    224             *  the FIFO again in that case.
    225             */
    226            if (!txRetransmitFlag)
   \                     ??macTxFrame_4:
   \   000098   90....       MOV     DPTR,#txRetransmitFlag
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   6003         JZ      $+5
   \   00009E   02....       LJMP    ??macTxFrame_11 & 0xFFFF
    227            {
    228              uint8 * p;
    229              uint8   lenMhrMsdu;
    230          
    231              MAC_ASSERT(pMacDataTx != NULL); /* must have data to transmit */
   \   0000A1   90....       MOV     DPTR,#pMacDataTx
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F8           MOV     R0,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F9           MOV     R1,A
   \   0000A9   E8           MOV     A,R0
   \   0000AA   49           ORL     A,R1
   \   0000AB   7003         JNZ     ??macTxFrame_12
   \   0000AD                ; Setup parameters for call to function halAssertHandler
   \   0000AD   12....       LCALL   ??halAssertHandler?relay; Banked call to: halAssertHandler
    232          
    233              /* save needed parameters */
    234              txAckReq = MAC_ACK_REQUEST(pMacDataTx->msdu.p);
   \                     ??macTxFrame_12:
   \   0000B0   90....       MOV     DPTR,#pMacDataTx
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F8           MOV     R0,A
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   F583         MOV     DPH,A
   \   0000B9   8882         MOV     DPL,R0
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F8           MOV     R0,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F583         MOV     DPH,A
   \   0000C3   8882         MOV     DPL,R0
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   5420         ANL     A,#0x20
   \   0000C8   90....       MOV     DPTR,#txAckReq
   \   0000CB   F0           MOVX    @DPTR,A
    235              txSeqn   = MAC_SEQ_NUMBER(pMacDataTx->msdu.p);
   \   0000CC   90....       MOV     DPTR,#pMacDataTx
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   F8           MOV     R0,A
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F583         MOV     DPH,A
   \   0000D5   8882         MOV     DPL,R0
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   F8           MOV     R0,A
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   F583         MOV     DPH,A
   \   0000DF   8882         MOV     DPL,R0
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   90....       MOV     DPTR,#txSeqn
   \   0000E7   F0           MOVX    @DPTR,A
    236          
    237              /* set length of frame (note: use of term msdu is a misnomer, here it's actually mhr + msdu) */
    238              lenMhrMsdu = pMacDataTx->msdu.len;
   \   0000E8   90....       MOV     DPTR,#pMacDataTx
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   F8           MOV     R0,A
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F583         MOV     DPH,A
   \   0000F1   8882         MOV     DPL,R0
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   F5..         MOV     ?V0,A
    239          
    240              /* calling code guarantees an unused prepended byte  */
    241              p = pMacDataTx->msdu.p - PREPENDED_BYTE_LEN;
   \   0000FA   90....       MOV     DPTR,#pMacDataTx
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   F8           MOV     R0,A
   \   0000FF   A3           INC     DPTR
   \   000100   E0           MOVX    A,@DPTR
   \   000101   F583         MOV     DPH,A
   \   000103   8882         MOV     DPL,R0
   \   000105   A3           INC     DPTR
   \   000106   A3           INC     DPTR
   \   000107   E0           MOVX    A,@DPTR
   \   000108   24FF         ADD     A,#-0x1
   \   00010A   F8           MOV     R0,A
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   34FF         ADDC    A,#-0x1
   \   00010F   F9           MOV     R1,A
   \   000110   E8           MOV     A,R0
   \   000111   FE           MOV     R6,A
   \   000112   E9           MOV     A,R1
   \   000113   FF           MOV     R7,A
    242          
    243              /* first byte of buffer is length of MPDU */
    244              *p = lenMhrMsdu + MFR_LEN;
   \   000114   7402         MOV     A,#0x2
   \   000116   25..         ADD     A,?V0
   \   000118   C0E0         PUSH    A
   \   00011A   8E82         MOV     DPL,R6
   \   00011C   8F83         MOV     DPH,R7
   \   00011E   D0E0         POP     A
   \   000120   F0           MOVX    @DPTR,A
    245          
    246              /*
    247               *  Flush the TX FIFO.  This is necessary in case the previous transmit was never
    248               *  actually sent (e.g. CSMA failed without strobing TXON).  If bytes are written to
    249               *  the FIFO but not transmitted, they remain in the FIFO to be transmitted whenever
    250               *  a strobe of TXON does happen.
    251               */
    252              MAC_RADIO_FLUSH_TX_FIFO();
   \   000121   75E1EE       MOV     0xe1,#-0x12
    253          
    254              /* write bytes to FIFO, prepended byte is included, MFR is not (it's generated by hardware) */
    255              MAC_RADIO_WRITE_TX_FIFO(p, PREPENDED_BYTE_LEN + lenMhrMsdu);
   \   000124                ; Setup parameters for call to function macMemWriteTxFifo
   \   000124   7401         MOV     A,#0x1
   \   000126   25..         ADD     A,?V0
   \   000128   F9           MOV     R1,A
   \   000129   EE           MOV     A,R6
   \   00012A   FA           MOV     R2,A
   \   00012B   EF           MOV     A,R7
   \   00012C   FB           MOV     R3,A
   \   00012D   12....       LCALL   ??macMemWriteTxFifo?relay; Banked call to: macMemWriteTxFifo
    256            }
    257          
    258            /*-------------------------------------------------------------------------------
    259             *  If not receiving, start the transmit.  If receive is active
    260             *  queue up the transmit.
    261             *
    262             *  Critical sections around the state change prevents any sort of race condition
    263             *  with  macTxStartQueuedFrame().  This guarantees function txGo() will only be
    264             *  called once.
    265             */
    266            {
    267              halIntState_t  s;
    268          
    269              HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macTxFrame_11:
   \   000130   A2AF         MOV     C,0xa8.7
   \   000132   E4           CLR     A
   \   000133   33           RLC     A
   \   000134   FE           MOV     R6,A
   \   000135   C2AF         CLR     0xa8.7
    270              if (!macRxActive && !macRxOutgoingAckFlag)
   \   000137   90....       MOV     DPTR,#macRxActive
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   7018         JNZ     ??macTxFrame_13
   \   00013D   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000140   E0           MOVX    A,@DPTR
   \   000141   7012         JNZ     ??macTxFrame_13
    271              {
    272                macTxActive = MAC_TX_ACTIVE_GO;
   \   000143   90....       MOV     DPTR,#macTxActive
   \   000146   7483         MOV     A,#-0x7d
   \   000148   F0           MOVX    @DPTR,A
    273                HAL_EXIT_CRITICAL_SECTION(s);
   \   000149   EE           MOV     A,R6
   \   00014A   FF           MOV     R7,A
   \   00014B   EE           MOV     A,R6
   \   00014C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00014E   92AF         MOV     0xa8.7,C
    274                txGo();
   \   000150                ; Setup parameters for call to function txGo
   \   000150   12....       LCALL   ??txGo?relay         ; Banked call to: txGo
   \   000153   800D         SJMP    ??macTxFrame_2
    275              }
    276              else
    277              {
    278                macTxActive = MAC_TX_ACTIVE_QUEUED;
   \                     ??macTxFrame_13:
   \   000155   90....       MOV     DPTR,#macTxActive
   \   000158   7402         MOV     A,#0x2
   \   00015A   F0           MOVX    @DPTR,A
    279                HAL_EXIT_CRITICAL_SECTION(s);
   \   00015B   EE           MOV     A,R6
   \   00015C   F8           MOV     R0,A
   \   00015D   EE           MOV     A,R6
   \   00015E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000160   92AF         MOV     0xa8.7,C
    280              }
    281            }
    282          }
   \                     ??macTxFrame_2:
   \   000162   7F02         MOV     R7,#0x2
   \   000164   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000167                REQUIRE RFST
   \   000167                REQUIRE _A_IEN0
    283          
    284          
    285          /*=================================================================================================
    286           * @fn          txCsmaPrep
    287           *
    288           * @brief       Prepare/initialize for a CSMA transmit.
    289           *
    290           * @param       none
    291           *
    292           * @return      none
    293           *=================================================================================================
    294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    295          static void txCsmaPrep(void)
   \                     txCsmaPrep:
    296          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    297            macTxCsmaBackoffDelay = macRadioRandomByte() & ((1 << macTxBe) - 1);
   \   000005                ; Setup parameters for call to function macRadioRandomByte
   \   000005   12....       LCALL   ??macRadioRandomByte?relay; Banked call to: macRadioRandomByte
   \   000008   E9           MOV     A,R1
   \   000009   F9           MOV     R1,A
   \   00000A   75..01       MOV     ?V0,#0x1
   \   00000D   75..00       MOV     ?V1,#0x0
   \   000010   90....       MOV     DPTR,#macTxBe
   \   000013   E0           MOVX    A,@DPTR
   \   000014   78..         MOV     R0,#?V0
   \   000016   12....       LCALL   ?S_SHL
   \   000019   E5..         MOV     A,?V0
   \   00001B   24FF         ADD     A,#-0x1
   \   00001D   59           ANL     A,R1
   \   00001E   90....       MOV     DPTR,#macTxCsmaBackoffDelay
   \   000021   F0           MOVX    @DPTR,A
    298          
    299            if (macTxType == MAC_TX_TYPE_SLOTTED_CSMA)
   \   000022   90....       MOV     DPTR,#macTxType
   \   000025   E0           MOVX    A,@DPTR
   \   000026   7005         JNZ     ??txCsmaPrep_0
    300            {
    301              MAC_RADIO_TX_PREP_CSMA_SLOTTED();
   \   000028                ; Setup parameters for call to function macCspTxPrepCsmaSlotted
   \   000028   12....       LCALL   ??macCspTxPrepCsmaSlotted?relay; Banked call to: macCspTxPrepCsmaSlotted
   \   00002B   8003         SJMP    ??txCsmaPrep_1
    302            }
    303            else
    304            {
    305              MAC_RADIO_TX_PREP_CSMA_UNSLOTTED();
   \                     ??txCsmaPrep_0:
   \   00002D                ; Setup parameters for call to function macCspTxPrepCsmaUnslotted
   \   00002D   12....       LCALL   ??macCspTxPrepCsmaUnslotted?relay; Banked call to: macCspTxPrepCsmaUnslotted
    306            }
    307          }
   \                     ??txCsmaPrep_1:
   \   000030   7F02         MOV     R7,#0x2
   \   000032   02....       LJMP    ?BANKED_LEAVE_XDATA
    308          
    309          
    310          /*=================================================================================================
    311           * @fn          txGo
    312           *
    313           * @brief       Start a transmit going.
    314           *
    315           * @param       none
    316           *
    317           * @return      none
    318           *=================================================================================================
    319           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    320          static void txGo(void)
   \                     txGo:
    321          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    322            /*
    323             *  If execution has reached this point, any transmitted ACK has long since completed.  It is
    324             *  possible though that there is still a pending callback.  If so, it is irrelevant and needs to
    325             *  be canceled at this point.
    326             */
    327            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   000004   9061A4       MOV     DPTR,#0x61a4
   \   000007   E0           MOVX    A,@DPTR
   \   000008   C2E0         CLR     0xE0 /* A   */.0
   \   00000A   F0           MOVX    @DPTR,A
    328            macRxOutgoingAckFlag = 0;
   \   00000B   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00000E   7400         MOV     A,#0x0
   \   000010   F0           MOVX    @DPTR,A
    329          
    330            /* based on type of transmit, call the correct "go" functionality */
    331            if (macTxType == MAC_TX_TYPE_SLOTTED)
   \   000011   90....       MOV     DPTR,#macTxType
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6402         XRL     A,#0x2
   \   000017   7005         JNZ     ??txGo_0
    332            {
    333              MAC_RADIO_TX_GO_SLOTTED();
   \   000019                ; Setup parameters for call to function macCspTxGoSlotted
   \   000019   12....       LCALL   ??macCspTxGoSlotted?relay; Banked call to: macCspTxGoSlotted
   \   00001C   8003         SJMP    ??txGo_1
    334            }
    335            else
    336            {
    337              txCsmaGo();
   \                     ??txGo_0:
   \   00001E                ; Setup parameters for call to function txCsmaGo
   \   00001E   12....       LCALL   ??txCsmaGo?relay     ; Banked call to: txCsmaGo
    338            }
    339          }
   \                     ??txGo_1:
   \   000021   D083         POP     DPH
   \   000023   D082         POP     DPL
   \   000025   02....       LJMP    ?BRET
    340          
    341          
    342          /*=================================================================================================
    343           * @fn          txCsmaGo
    344           *
    345           * @brief       Start a CSMA transmit going.
    346           *
    347           * @param       none
    348           *
    349           * @return      none
    350           *=================================================================================================
    351           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    352          static void txCsmaGo(void)
   \                     txCsmaGo:
    353          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    354            /* The CSMA needs to be performed at normal CCA threshold.
    355             * Turn off the CC2591 compression workaround. 
    356             */
    357            COMPRESSION_WORKAROUND_OFF();
    358          
    359            if (macTxType == MAC_TX_TYPE_SLOTTED_CSMA)
   \   000004   90....       MOV     DPTR,#macTxType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7019         JNZ     ??txCsmaGo_0
    360            {
    361              if (macTxCsmaBackoffDelay >= macDataTxTimeAvailable())
   \   00000A                ; Setup parameters for call to function macDataTxTimeAvailable
   \   00000A   12....       LCALL   ??macDataTxTimeAvailable?relay; Banked call to: macDataTxTimeAvailable
   \   00000D   E9           MOV     A,R1
   \   00000E   F8           MOV     R0,A
   \   00000F   90....       MOV     DPTR,#macTxCsmaBackoffDelay
   \   000012   E0           MOVX    A,@DPTR
   \   000013   C3           CLR     C
   \   000014   98           SUBB    A,R0
   \   000015   4007         JC      ??txCsmaGo_1
    362              {
    363                txComplete(MAC_NO_TIME);
   \   000017                ; Setup parameters for call to function txComplete
   \   000017   791C         MOV     R1,#0x1c
   \   000019   12....       LCALL   ??txComplete?relay   ; Banked call to: txComplete
    364                return;
   \   00001C   8008         SJMP    ??txCsmaGo_2
    365              }
    366              MAC_RADIO_TX_GO_SLOTTED_CSMA();
   \                     ??txCsmaGo_1:
   \   00001E                ; Setup parameters for call to function macCspTxGoCsma
   \   00001E   12....       LCALL   ??macCspTxGoCsma?relay; Banked call to: macCspTxGoCsma
   \   000021   8003         SJMP    ??txCsmaGo_2
    367            }
    368            else
    369            {
    370              MAC_RADIO_TX_GO_CSMA();
   \                     ??txCsmaGo_0:
   \   000023                ; Setup parameters for call to function macCspTxGoCsma
   \   000023   12....       LCALL   ??macCspTxGoCsma?relay; Banked call to: macCspTxGoCsma
    371            }
    372          }
   \                     ??txCsmaGo_2:
   \   000026   D083         POP     DPH
   \   000028   D082         POP     DPL
   \   00002A   02....       LJMP    ?BRET
    373          
    374          
    375          /**************************************************************************************************
    376           * @fn          macTxFrameRetransmit
    377           *
    378           * @brief       Retransmit the last frame.
    379           *
    380           * @param       none
    381           *
    382           * @return      none
    383           **************************************************************************************************
    384           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    385          MAC_INTERNAL_API void macTxFrameRetransmit(void)
   \                     macTxFrameRetransmit:
    386          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    387            txRetransmitFlag = 1;
   \   000004   90....       MOV     DPTR,#txRetransmitFlag
   \   000007   7401         MOV     A,#0x1
   \   000009   F0           MOVX    @DPTR,A
    388            macTxFrame(macTxType);
   \   00000A                ; Setup parameters for call to function macTxFrame
   \   00000A   90....       MOV     DPTR,#macTxType
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   12....       LCALL   ??macTxFrame?relay   ; Banked call to: macTxFrame
    389          }
   \   000012   D083         POP     DPH
   \   000014   D082         POP     DPL
   \   000016   02....       LJMP    ?BRET
    390          
    391          
    392          /**************************************************************************************************
    393           * @fn          macTxStartQueuedFrame
    394           *
    395           * @brief       See if there is a queued frame waiting to transmit.  If so, initiate
    396           *              the transmit now.
    397           *
    398           * @param       none
    399           *
    400           * @return      none
    401           **************************************************************************************************
    402           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    403          MAC_INTERNAL_API void macTxStartQueuedFrame(void)
   \                     macTxStartQueuedFrame:
    404          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    405            halIntState_t  s;
    406          
    407            MAC_ASSERT(!macRxActive && !macRxOutgoingAckFlag); /* queued frames should not transmit in middle of a receive */
   \   000005   90....       MOV     DPTR,#macRxActive
   \   000008   E0           MOVX    A,@DPTR
   \   000009   7006         JNZ     ??macTxStartQueuedFrame_0
   \   00000B   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   6003         JZ      ??macTxStartQueuedFrame_1
   \                     ??macTxStartQueuedFrame_0:
   \   000011                ; Setup parameters for call to function halAssertHandler
   \   000011   12....       LCALL   ??halAssertHandler?relay; Banked call to: halAssertHandler
    408          
    409            /*
    410             *  Critical sections around the state change prevents any sort of race condition
    411             *  with macTxFrame().  This guarantees function txGo() will only be be called once.
    412             */
    413            HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macTxStartQueuedFrame_1:
   \   000014   A2AF         MOV     C,0xa8.7
   \   000016   E4           CLR     A
   \   000017   33           RLC     A
   \   000018   FE           MOV     R6,A
   \   000019   C2AF         CLR     0xa8.7
    414            if (macTxActive == MAC_TX_ACTIVE_QUEUED)
   \   00001B   90....       MOV     DPTR,#macTxActive
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6402         XRL     A,#0x2
   \   000021   7012         JNZ     ??macTxStartQueuedFrame_2
    415            {
    416              macTxActive = MAC_TX_ACTIVE_GO;
   \   000023   90....       MOV     DPTR,#macTxActive
   \   000026   7483         MOV     A,#-0x7d
   \   000028   F0           MOVX    @DPTR,A
    417              HAL_EXIT_CRITICAL_SECTION(s);
   \   000029   EE           MOV     A,R6
   \   00002A   FF           MOV     R7,A
   \   00002B   EE           MOV     A,R6
   \   00002C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00002E   92AF         MOV     0xa8.7,C
    418              txGo();
   \   000030                ; Setup parameters for call to function txGo
   \   000030   12....       LCALL   ??txGo?relay         ; Banked call to: txGo
   \   000033   8007         SJMP    ??macTxStartQueuedFrame_3
    419            }
    420            else
    421            {
    422              HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macTxStartQueuedFrame_2:
   \   000035   EE           MOV     A,R6
   \   000036   F8           MOV     R0,A
   \   000037   EE           MOV     A,R6
   \   000038   A2E0         MOV     C,0xE0 /* A   */.0
   \   00003A   92AF         MOV     0xa8.7,C
    423            }
    424          }
   \                     ??macTxStartQueuedFrame_3:
   \   00003C   7F01         MOV     R7,#0x1
   \   00003E   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000041                REQUIRE _A_IEN0
    425          
    426          
    427          /**************************************************************************************************
    428           * @fn          macTxChannelBusyCallback
    429           *
    430           * @brief       This callback is executed if a CSMA transmit was attempted but the channel
    431           *              was busy.
    432           *
    433           * @param       none
    434           *
    435           * @return      none
    436           **************************************************************************************************
    437           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    438          MAC_INTERNAL_API void macTxChannelBusyCallback(void)
   \                     macTxChannelBusyCallback:
    439          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    440            MAC_ASSERT((macTxType == MAC_TX_TYPE_SLOTTED_CSMA) || (macTxType == MAC_TX_TYPE_UNSLOTTED_CSMA));
   \   000004   90....       MOV     DPTR,#macTxType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   600B         JZ      ??macTxChannelBusyCallback_0
   \   00000A   90....       MOV     DPTR,#macTxType
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6401         XRL     A,#0x1
   \   000010   6003         JZ      ??macTxChannelBusyCallback_0
   \   000012                ; Setup parameters for call to function halAssertHandler
   \   000012   12....       LCALL   ??halAssertHandler?relay; Banked call to: halAssertHandler
    441          
    442            /* turn off receiver if allowed */
    443            macTxActive = MAC_TX_ACTIVE_CHANNEL_BUSY;
   \                     ??macTxChannelBusyCallback_0:
   \   000015   90....       MOV     DPTR,#macTxActive
   \   000018   7404         MOV     A,#0x4
   \   00001A   F0           MOVX    @DPTR,A
    444            macRxOffRequest();
   \   00001B                ; Setup parameters for call to function macRxOffRequest
   \   00001B   12....       LCALL   ??macRxOffRequest?relay; Banked call to: macRxOffRequest
    445          
    446            /*  clear channel assement failed, follow through with CSMA algorithm */
    447            nb++;
   \   00001E   90....       MOV     DPTR,#nb
   \   000021   E0           MOVX    A,@DPTR
   \   000022   2401         ADD     A,#0x1
   \   000024   F0           MOVX    @DPTR,A
    448            if (nb > macPib.maxCsmaBackoffs)
   \   000025   90....       MOV     DPTR,#nb
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   90....       MOV     DPTR,#macPib + 27
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   C3           CLR     C
   \   00002F   98           SUBB    A,R0
   \   000030   5007         JNC     ??macTxChannelBusyCallback_1
    449            {
    450              txComplete(MAC_CHANNEL_ACCESS_FAILURE);
   \   000032                ; Setup parameters for call to function txComplete
   \   000032   79E1         MOV     R1,#-0x1f
   \   000034   12....       LCALL   ??txComplete?relay   ; Banked call to: txComplete
   \   000037   803D         SJMP    ??macTxChannelBusyCallback_2
    451            }
    452            else
    453            {
    454              macTxBe = MIN(macTxBe+1, macPib.maxBe);
   \                     ??macTxChannelBusyCallback_1:
   \   000039   90....       MOV     DPTR,#macTxBe
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F8           MOV     R0,A
   \   00003E   7900         MOV     R1,#0x0
   \   000040   E8           MOV     A,R0
   \   000041   2401         ADD     A,#0x1
   \   000043   FA           MOV     R2,A
   \   000044   E4           CLR     A
   \   000045   39           ADDC    A,R1
   \   000046   FB           MOV     R3,A
   \   000047   90....       MOV     DPTR,#macPib + 39
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   7900         MOV     R1,#0x0
   \   00004E   C3           CLR     C
   \   00004F   EA           MOV     A,R2
   \   000050   98           SUBB    A,R0
   \   000051   EB           MOV     A,R3
   \   000052   99           SUBB    A,R1
   \   000053   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000055   65D0         XRL     A,PSW
   \   000057   33           RLC     A
   \   000058   5008         JNC     ??macTxChannelBusyCallback_3
   \   00005A   90....       MOV     DPTR,#macTxBe
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   2401         ADD     A,#0x1
   \   000060   8004         SJMP    ??macTxChannelBusyCallback_4
   \                     ??macTxChannelBusyCallback_3:
   \   000062   90....       MOV     DPTR,#macPib + 39
   \   000065   E0           MOVX    A,@DPTR
   \                     ??macTxChannelBusyCallback_4:
   \   000066   90....       MOV     DPTR,#macTxBe
   \   000069   F0           MOVX    @DPTR,A
    455              txCsmaPrep();
   \   00006A                ; Setup parameters for call to function txCsmaPrep
   \   00006A   12....       LCALL   ??txCsmaPrep?relay   ; Banked call to: txCsmaPrep
    456              macTxActive = MAC_TX_ACTIVE_GO;
   \   00006D   90....       MOV     DPTR,#macTxActive
   \   000070   7483         MOV     A,#-0x7d
   \   000072   F0           MOVX    @DPTR,A
    457              txCsmaGo();
   \   000073                ; Setup parameters for call to function txCsmaGo
   \   000073   12....       LCALL   ??txCsmaGo?relay     ; Banked call to: txCsmaGo
    458            }
    459          }
   \                     ??macTxChannelBusyCallback_2:
   \   000076   D083         POP     DPH
   \   000078   D082         POP     DPL
   \   00007A   02....       LJMP    ?BRET
    460          
    461          
    462          /**************************************************************************************************
    463           * @fn          macTxDoneCallback
    464           *
    465           * @brief       This callback is executed when transmit completes.
    466           *
    467           * @param       none
    468           *
    469           * @return      none
    470           **************************************************************************************************
    471           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    472          MAC_INTERNAL_API void macTxDoneCallback(void)
   \                     macTxDoneCallback:
    473          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    474            halIntState_t  s;
    475          
    476            /*
    477             *  There is a small chance this function could be called twice for a single transmit.
    478             *  To prevent logic from executing twice, the state variable macTxActive is used as
    479             *  a gating mechanism to guarantee single time execution.
    480             */
    481            HAL_ENTER_CRITICAL_SECTION(s);
   \   000005   A2AF         MOV     C,0xa8.7
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   FE           MOV     R6,A
   \   00000A   C2AF         CLR     0xa8.7
    482            if (macTxActive == MAC_TX_ACTIVE_GO)
   \   00000C   90....       MOV     DPTR,#macTxActive
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6483         XRL     A,#0x83
   \   000012   702C         JNZ     ??macTxDoneCallback_0
    483            {
    484              /* see if ACK was requested */
    485              if (!txAckReq)
   \   000014   90....       MOV     DPTR,#txAckReq
   \   000017   E0           MOVX    A,@DPTR
   \   000018   7014         JNZ     ??macTxDoneCallback_1
    486              {
    487                macTxActive = MAC_TX_ACTIVE_DONE;
   \   00001A   90....       MOV     DPTR,#macTxActive
   \   00001D   7485         MOV     A,#-0x7b
   \   00001F   F0           MOVX    @DPTR,A
    488                HAL_EXIT_CRITICAL_SECTION(s);
   \   000020   EE           MOV     A,R6
   \   000021   FF           MOV     R7,A
   \   000022   EE           MOV     A,R6
   \   000023   A2E0         MOV     C,0xE0 /* A   */.0
   \   000025   92AF         MOV     0xa8.7,C
    489          
    490                /* ACK was not requested, transmit is complete */
    491                txComplete(MAC_SUCCESS);
   \   000027                ; Setup parameters for call to function txComplete
   \   000027   7900         MOV     R1,#0x0
   \   000029   12....       LCALL   ??txComplete?relay   ; Banked call to: txComplete
   \   00002C   8019         SJMP    ??macTxDoneCallback_2
    492              }
    493              else
    494              {
    495                /*
    496                 *  ACK was requested - must wait to receive it.  A timer is set
    497                 *  to expire after the timeout duration for waiting for an ACK.
    498                 *  If an ACK is received, the function macTxAckReceived() is called.
    499                 *  If an ACK is not received within the timeout period,
    500                 *  the function macTxAckNotReceivedCallback() is called.
    501                 */
    502                macTxActive = MAC_TX_ACTIVE_LISTEN_FOR_ACK;
   \                     ??macTxDoneCallback_1:
   \   00002E   90....       MOV     DPTR,#macTxActive
   \   000031   7486         MOV     A,#-0x7a
   \   000033   F0           MOVX    @DPTR,A
    503                MAC_RADIO_TX_REQUEST_ACK_TIMEOUT_CALLBACK();
   \   000034                ; Setup parameters for call to function macCspTxRequestAckTimeoutCallback
   \   000034   12....       LCALL   ??macCspTxRequestAckTimeoutCallback?relay; Banked call to: macCspTxRequestAckTimeoutCallback
    504                HAL_EXIT_CRITICAL_SECTION(s);
   \   000037   EE           MOV     A,R6
   \   000038   F8           MOV     R0,A
   \   000039   EE           MOV     A,R6
   \   00003A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00003C   92AF         MOV     0xa8.7,C
   \   00003E   8007         SJMP    ??macTxDoneCallback_2
    505              }
    506            }
    507            else
    508            {
    509              HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macTxDoneCallback_0:
   \   000040   EE           MOV     A,R6
   \   000041   F9           MOV     R1,A
   \   000042   EE           MOV     A,R6
   \   000043   A2E0         MOV     C,0xE0 /* A   */.0
   \   000045   92AF         MOV     0xa8.7,C
    510            }
    511          }
   \                     ??macTxDoneCallback_2:
   \   000047   7F01         MOV     R7,#0x1
   \   000049   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00004C                REQUIRE _A_IEN0
    512          
    513          
    514          /**************************************************************************************************
    515           * @fn          macTxAckReceivedCallback
    516           *
    517           * @brief       This function is called by the receive logic when an ACK is received and
    518           *              transmit logic is listening for an ACK.
    519           *
    520           * @param       seqn        - sequence number of received ACK
    521           * @param       pendingFlag - set if pending flag of ACK is set, cleared otherwise
    522           *
    523           * @return      none
    524           **************************************************************************************************
    525           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    526          MAC_INTERNAL_API void macTxAckReceivedCallback(uint8 seqn, uint8 pendingFlag)
   \                     macTxAckReceivedCallback:
    527          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   8A..         MOV     ?V0,R2
    528            halIntState_t  s;
    529          
    530            /* only process if listening for an ACK; critical section prevents race condition problems */
    531            HAL_ENTER_CRITICAL_SECTION(s);
   \   000009   A2AF         MOV     C,0xa8.7
   \   00000B   E4           CLR     A
   \   00000C   33           RLC     A
   \   00000D   FE           MOV     R6,A
   \   00000E   C2AF         CLR     0xa8.7
    532            if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \   000010   90....       MOV     DPTR,#macTxActive
   \   000013   E0           MOVX    A,@DPTR
   \   000014   6486         XRL     A,#0x86
   \   000016   7030         JNZ     ??macTxAckReceivedCallback_0
    533            {
    534              macTxActive = MAC_TX_ACTIVE_POST_ACK;
   \   000018   90....       MOV     DPTR,#macTxActive
   \   00001B   7487         MOV     A,#-0x79
   \   00001D   F0           MOVX    @DPTR,A
    535              MAC_RADIO_TX_CANCEL_ACK_TIMEOUT_CALLBACK();
   \   00001E                ; Setup parameters for call to function macCspTxCancelAckTimeoutCallback
   \   00001E   12....       LCALL   ??macCspTxCancelAckTimeoutCallback?relay; Banked call to: macCspTxCancelAckTimeoutCallback
    536              HAL_EXIT_CRITICAL_SECTION(s);
   \   000021   8E..         MOV     ?V1,R6
   \   000023   EE           MOV     A,R6
   \   000024   A2E0         MOV     C,0xE0 /* A   */.0
   \   000026   92AF         MOV     0xa8.7,C
    537          
    538              /* see if the sequence number of received ACK matches sequence number of packet just sent */
    539              if (seqn == txSeqn)
   \   000028   90....       MOV     DPTR,#txSeqn
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   6F           XRL     A,R7
   \   00002D   7012         JNZ     ??macTxAckReceivedCallback_1
    540              {
    541                /*
    542                 *  Sequence numbers match so transmit is successful.  Return appropriate
    543                 *  status based on the pending flag of the received ACK.
    544                 */
    545                if (pendingFlag)
   \   00002F   E5..         MOV     A,?V0
   \   000031   6007         JZ      ??macTxAckReceivedCallback_2
    546                {
    547                  txComplete(MAC_ACK_PENDING);
   \   000033                ; Setup parameters for call to function txComplete
   \   000033   791B         MOV     R1,#0x1b
   \   000035   12....       LCALL   ??txComplete?relay   ; Banked call to: txComplete
   \   000038   8015         SJMP    ??macTxAckReceivedCallback_3
    548                }
    549                else
    550                {
    551                  txComplete(MAC_SUCCESS);
   \                     ??macTxAckReceivedCallback_2:
   \   00003A                ; Setup parameters for call to function txComplete
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   12....       LCALL   ??txComplete?relay   ; Banked call to: txComplete
   \   00003F   800E         SJMP    ??macTxAckReceivedCallback_3
    552                }
    553              }
    554              else
    555              {
    556                /* sequence number did not match; per spec, transmit failed at this point */
    557                txComplete(MAC_NO_ACK);
   \                     ??macTxAckReceivedCallback_1:
   \   000041                ; Setup parameters for call to function txComplete
   \   000041   79E9         MOV     R1,#-0x17
   \   000043   12....       LCALL   ??txComplete?relay   ; Banked call to: txComplete
   \   000046   8007         SJMP    ??macTxAckReceivedCallback_3
    558              }
    559            }
    560            else
    561            {
    562              HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macTxAckReceivedCallback_0:
   \   000048   EE           MOV     A,R6
   \   000049   F8           MOV     R0,A
   \   00004A   EE           MOV     A,R6
   \   00004B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00004D   92AF         MOV     0xa8.7,C
    563            }
    564          }
   \                     ??macTxAckReceivedCallback_3:
   \   00004F   7F02         MOV     R7,#0x2
   \   000051   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000054                REQUIRE _A_IEN0
    565          
    566          
    567          /**************************************************************************************************
    568           * @fn          macTxAckNotReceivedCallback
    569           *
    570           * @brief       This function is called by the receive logic when transmit is listening
    571           *              for an ACK but something else is received.  It is also called if the
    572           *              listen-for-ACK timeout is reached.
    573           *
    574           * @brief
    575           *
    576           * @param       none
    577           *
    578           * @return      none
    579           **************************************************************************************************
    580           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    581          MAC_INTERNAL_API void macTxAckNotReceivedCallback(void)
   \                     macTxAckNotReceivedCallback:
    582          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    583            halIntState_t  s;
    584          
    585            /* only process if listening for an ACK; critical section prevents race condition problems */
    586            HAL_ENTER_CRITICAL_SECTION(s);
   \   000005   A2AF         MOV     C,0xa8.7
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   FE           MOV     R6,A
   \   00000A   C2AF         CLR     0xa8.7
    587            if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \   00000C   90....       MOV     DPTR,#macTxActive
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6486         XRL     A,#0x86
   \   000012   7017         JNZ     ??macTxAckNotReceivedCallback_0
    588            {
    589              macTxActive = MAC_TX_ACTIVE_POST_ACK;
   \   000014   90....       MOV     DPTR,#macTxActive
   \   000017   7487         MOV     A,#-0x79
   \   000019   F0           MOVX    @DPTR,A
    590              MAC_RADIO_TX_CANCEL_ACK_TIMEOUT_CALLBACK();
   \   00001A                ; Setup parameters for call to function macCspTxCancelAckTimeoutCallback
   \   00001A   12....       LCALL   ??macCspTxCancelAckTimeoutCallback?relay; Banked call to: macCspTxCancelAckTimeoutCallback
    591              HAL_EXIT_CRITICAL_SECTION(s);
   \   00001D   EE           MOV     A,R6
   \   00001E   FF           MOV     R7,A
   \   00001F   EE           MOV     A,R6
   \   000020   A2E0         MOV     C,0xE0 /* A   */.0
   \   000022   92AF         MOV     0xa8.7,C
    592          
    593              /* a non-ACK was received when expecting an ACK, per spec transmit is over at this point */
    594              txComplete(MAC_NO_ACK);
   \   000024                ; Setup parameters for call to function txComplete
   \   000024   79E9         MOV     R1,#-0x17
   \   000026   12....       LCALL   ??txComplete?relay   ; Banked call to: txComplete
   \   000029   8007         SJMP    ??macTxAckNotReceivedCallback_1
    595            }
    596            else
    597            {
    598              HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macTxAckNotReceivedCallback_0:
   \   00002B   EE           MOV     A,R6
   \   00002C   F8           MOV     R0,A
   \   00002D   EE           MOV     A,R6
   \   00002E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000030   92AF         MOV     0xa8.7,C
    599            }
    600          }
   \                     ??macTxAckNotReceivedCallback_1:
   \   000032   7F01         MOV     R7,#0x1
   \   000034   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000037                REQUIRE _A_IEN0
    601          
    602          
    603          /*=================================================================================================
    604           * @fn          txComplete
    605           *
    606           * @brief       Transmit has completed.  Perform needed maintenance and return status of
    607           *              the transmit via callback function.
    608           *
    609           * @param       status - status of the transmit that just went out
    610           *
    611           * @return      none
    612           *=================================================================================================
    613           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    614          static void txComplete(uint8 status)
   \                     txComplete:
    615          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    616            /* reset the retransmit flag */
    617            txRetransmitFlag = 0;
   \   000007   90....       MOV     DPTR,#txRetransmitFlag
   \   00000A   7400         MOV     A,#0x0
   \   00000C   F0           MOVX    @DPTR,A
    618          
    619            /* update tx state; turn off receiver if nothing is keeping it on */
    620            macTxActive = MAC_TX_ACTIVE_NO_ACTIVITY;
   \   00000D   90....       MOV     DPTR,#macTxActive
   \   000010   7400         MOV     A,#0x0
   \   000012   F0           MOVX    @DPTR,A
    621          
    622            /* turn off receive if allowed */
    623            macRxOffRequest();
   \   000013                ; Setup parameters for call to function macRxOffRequest
   \   000013   12....       LCALL   ??macRxOffRequest?relay; Banked call to: macRxOffRequest
    624          
    625            /* update transmit power in case there was a change */
    626            macRadioUpdateTxPower();
   \   000016                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000016   12....       LCALL   ??macRadioUpdateTxPower?relay; Banked call to: macRadioUpdateTxPower
    627          
    628            /*
    629             *  Channel cannot change during transmit so update it here.  (Channel *can* change during
    630             *  a receive.  The update function resets receive logic and any partially received
    631             *  frame is purged.)
    632             */
    633            macRadioUpdateChannel();
   \   000019                ; Setup parameters for call to function macRadioUpdateChannel
   \   000019   12....       LCALL   ??macRadioUpdateChannel?relay; Banked call to: macRadioUpdateChannel
    634          
    635            /* return status of transmit via callback function */
    636            macTxCompleteCallback(status);
   \   00001C                ; Setup parameters for call to function macTxCompleteCallback
   \   00001C   EE           MOV     A,R6
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   ??macTxCompleteCallback?relay; Banked call to: macTxCompleteCallback
    637          }
   \   000021   7F01         MOV     R7,#0x1
   \   000023   02....       LJMP    ?BANKED_LEAVE_XDATA
    638          
    639          
    640          /**************************************************************************************************
    641           * @fn          macTxTimestampCallback
    642           *
    643           * @brief       This callback function records the timestamp into the receive data structure.
    644           *              It should be called as soon as possible after there is a valid timestamp.
    645           *
    646           * @param       none
    647           *
    648           * @return      none
    649           **************************************************************************************************
    650           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    651          MAC_INTERNAL_API void macTxTimestampCallback(void)
   \                     macTxTimestampCallback:
    652          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    653            MAC_ASSERT(pMacDataTx != NULL); /* transmit structure must be there */
   \   000005   90....       MOV     DPTR,#pMacDataTx
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   49           ORL     A,R1
   \   00000F   7003         JNZ     ??macTxTimestampCallback_0
   \   000011                ; Setup parameters for call to function halAssertHandler
   \   000011   12....       LCALL   ??halAssertHandler?relay; Banked call to: halAssertHandler
    654          
    655            pMacDataTx->internal.timestamp  = macBackoffTimerCapture();
   \                     ??macTxTimestampCallback_0:
   \   000014                ; Setup parameters for call to function macBackoffTimerCapture
   \   000014   12....       LCALL   ??macBackoffTimerCapture?relay; Banked call to: macBackoffTimerCapture
   \   000017   8A..         MOV     ?V0,R2
   \   000019   8B..         MOV     ?V1,R3
   \   00001B   8C..         MOV     ?V2,R4
   \   00001D   8D..         MOV     ?V3,R5
   \   00001F   90....       MOV     DPTR,#pMacDataTx
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F8           MOV     R0,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F583         MOV     DPH,A
   \   000028   8882         MOV     DPL,R0
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   78..         MOV     R0,#?V0
   \   000031   12....       LCALL   ?L_MOV_TO_X
    656            pMacDataTx->internal.timestamp2 = MAC_RADIO_TIMER_CAPTURE();
   \   000034                ; Setup parameters for call to function macMcuTimerCapture
   \   000034   12....       LCALL   ??macMcuTimerCapture?relay; Banked call to: macMcuTimerCapture
   \   000037   8A..         MOV     ?V0,R2
   \   000039   8B..         MOV     ?V1,R3
   \   00003B   A8..         MOV     R0,?V0
   \   00003D   A9..         MOV     R1,?V1
   \   00003F   90....       MOV     DPTR,#pMacDataTx
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FA           MOV     R2,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   CA           XCH     A,R2
   \   000047   2409         ADD     A,#0x9
   \   000049   F582         MOV     DPL,A
   \   00004B   CA           XCH     A,R2
   \   00004C   3400         ADDC    A,#0x0
   \   00004E   F583         MOV     DPH,A
   \   000050   E8           MOV     A,R0
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   E9           MOV     A,R1
   \   000054   F0           MOVX    @DPTR,A
    657          }
   \   000055   7F04         MOV     R7,#0x4
   \   000057   02....       LJMP    ?BANKED_LEAVE_XDATA
    658          
    659          
    660          /**************************************************************************************************
    661           * @fn          macTxCollisionWithRxCallback
    662           *
    663           * @brief       Function called if transmit strobed on top of a receive.
    664           *
    665           * @param       none
    666           *
    667           * @return      none
    668           **************************************************************************************************
    669           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    670          MAC_INTERNAL_API void macTxCollisionWithRxCallback(void)
   \                     macTxCollisionWithRxCallback:
    671          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    672            macRxHaltCleanup();
   \   000004                ; Setup parameters for call to function macRxHaltCleanup
   \   000004   12....       LCALL   ??macRxHaltCleanup?relay; Banked call to: macRxHaltCleanup
    673          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxHaltCleanup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxHaltCleanup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxFrame?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxFrame

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??txCsmaPrep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    txCsmaPrep

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??txGo?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    txGo

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??txCsmaGo?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    txCsmaGo

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxFrameRetransmit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxFrameRetransmit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxStartQueuedFrame?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxStartQueuedFrame

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxChannelBusyCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxChannelBusyCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxDoneCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxDoneCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxAckReceivedCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxAckReceivedCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxAckNotReceivedCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxAckNotReceivedCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??txComplete?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    txComplete

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxTimestampCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxTimestampCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxCollisionWithRxCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxCollisionWithRxCallback
    674          
    675          
    676          
    677          /**************************************************************************************************
    678           *                                  Compile Time Integrity Checks
    679           **************************************************************************************************
    680           */
    681          #if (MAC_TX_ACTIVE_NO_ACTIVITY != 0x00)
    682          #error "ERROR! Zero is reserved value of macTxActive. Allows boolean operations, e.g !macTxActive."
    683          #endif
    684          
    685          /**************************************************************************************************
    686          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   macTxAckNotReceivedCallback
        0      9   -> macCspTxCancelAckTimeoutCallback
        0      9   -> txComplete
      0     10   macTxAckReceivedCallback
        0     10   -> macCspTxCancelAckTimeoutCallback
        0     10   -> txComplete
      2      0   macTxChannelBusyCallback
        2      0   -> halAssertHandler
        2      0   -> macRxOffRequest
        2      0   -> txComplete
        2      0   -> txCsmaGo
        2      0   -> txCsmaPrep
      2      0   macTxCollisionWithRxCallback
        2      0   -> macRxHaltCleanup
      0      9   macTxDoneCallback
        0      9   -> macCspTxRequestAckTimeoutCallback
        0      9   -> txComplete
      1     10   macTxFrame
        0     10   -> halAssertHandler
        0     10   -> macCspTxPrepSlotted
        0     10   -> macMemWriteTxFifo
        0     10   -> txComplete
        0     10   -> txCsmaPrep
        0     10   -> txGo
      2      0   macTxFrameRetransmit
        2      0   -> macTxFrame
      2      0   macTxHaltCleanup
        2      0   -> macCspTxReset
        2      0   -> macTxInit
      2      0   macTxInit
      0      9   macTxStartQueuedFrame
        0      9   -> halAssertHandler
        0      9   -> txGo
      0     12   macTxTimestampCallback
        0     12   -> halAssertHandler
        0     12   -> macBackoffTimerCapture
        0     12   -> macMcuTimerCapture
      0     19   txComplete
        0      9   -> macRadioUpdateChannel
        0      9   -> macRadioUpdateTxPower
        0      9   -> macRxOffRequest
        0      9   -> macTxCompleteCallback
      2      0   txCsmaGo
        2      0   -> macCspTxGoCsma
        2      0   -> macDataTxTimeAvailable
        2      0   -> txComplete
      0     20   txCsmaPrep
        0     10   -> macCspTxPrepCsmaSlotted
        0     10   -> macCspTxPrepCsmaUnslotted
        0     10   -> macRadioRandomByte
      2     10   txGo
        2      0   -> macCspTxGoSlotted
        2      0   -> txCsmaGo


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??macTxAckNotReceivedCallback?relay
       6  ??macTxAckReceivedCallback?relay
       6  ??macTxChannelBusyCallback?relay
       6  ??macTxCollisionWithRxCallback?relay
       6  ??macTxDoneCallback?relay
       6  ??macTxFrame?relay
       6  ??macTxFrameRetransmit?relay
       6  ??macTxHaltCleanup?relay
       6  ??macTxInit?relay
       6  ??macTxStartQueuedFrame?relay
       6  ??macTxTimestampCallback?relay
       6  ??txComplete?relay
       6  ??txCsmaGo?relay
       6  ??txCsmaPrep?relay
       6  ??txGo?relay
       1  RFST
       1  _A_IEN0
      55  macTxAckNotReceivedCallback
      84  macTxAckReceivedCallback
       1  macTxActive
       1  macTxBe
     125  macTxChannelBusyCallback
      14  macTxCollisionWithRxCallback
       1  macTxCsmaBackoffDelay
      76  macTxDoneCallback
     359  macTxFrame
      25  macTxFrameRetransmit
      17  macTxHaltCleanup
      23  macTxInit
       1  macTxSlottedDelay
      65  macTxStartQueuedFrame
      90  macTxTimestampCallback
       1  macTxType
       1  nb
       1  txAckReq
      38  txComplete
      45  txCsmaGo
      53  txCsmaPrep
      40  txGo
       1  txRetransmitFlag
       1  txSeqn

 
 1 109 bytes in segment BANKED_CODE
    90 bytes in segment BANK_RELAYS
     2 bytes in segment SFR_AN
     1 byte  in segment XDATA_ROM_C
     8 bytes in segment XDATA_Z
 
 1 199 bytes of CODE  memory
     1 byte  of CONST memory
     0 bytes of DATA  memory (+ 2 bytes shared)
     8 bytes of XDATA memory

Errors: none
Warnings: none
