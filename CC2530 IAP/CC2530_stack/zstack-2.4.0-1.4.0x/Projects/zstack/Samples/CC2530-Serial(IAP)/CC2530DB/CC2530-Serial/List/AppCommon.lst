###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:36
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\common\AppCommon.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\common\AppCommon.c"
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        XLAB -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\AppCommon.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\AppCommon.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\common\AppCommon.c
      1          /*********************************************************************************************
      2          * 文件： AppCommon.c
      3          * 作者： Xuzhy 2018.5.16
      4          * 说明：基于Sapi架构的应用层文件，参考：SimpleSwitch.c
      5          * 修改：fuyou 增加透传驱动部分
      6          * 注释：
      7          *********************************************************************************************/
      8          
      9          /*********************************************************************************************
     10          * 头文件
     11          *********************************************************************************************/
     12          #include "ZComDef.h"
     13          #include "OSAL.h"
     14          #include "sapi.h"
     15          #include "hal_key.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1
     16          #include "hal_led.h"
     17          #include "hal_adc.h"
     18          #include "SimpleApp.h"
     19          #include "mt.h"
     20          #include "ZDApp.h"
     21          
     22          #include <stdio.h>
     23          #include <stdlib.h>
     24          #include <string.h>
     25          #include "sensor.h"
     26          #include "osal_nv.h"
     27          #include "AddrMgr.h"
     28          #include "rtg.h"
     29          #include "nwk_util.h"
     30          #include "AppCommon.h"
     31          #include "zxbee.h"
     32          #include "at.h"
     33          #include "zxbee-inf.h"
     34          #include "OnBoard.h"
     35          /*********************************************************************************************
     36          * 宏定义
     37          *********************************************************************************************/
     38          // Application States
     39          #define APP_INIT                           0                    // Initial state
     40          #define APP_START                          1                    // Device has started/joined network
     41          
     42          // Application osal event identifiers
     43          #define __START_EVT                        0x0010
     44          #define __REPORT_EVT                       0x0020
     45          #define __AT_EVT                           0x0040
     46          
     47          #define REPORT_DELAY                      30
     48          
     49          #define NUM_IN_CMD_SWITCH                 2
     50          #define NUM_OUT_CMD_SWITCH                2
     51          /*********************************************************************************************
     52          * 全局变量
     53          *********************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     54          static uint8 mLinkStatus = 0;                                   // zigbee入网状态，0：未入网，1：人网
   \                     mLinkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     55          static uint16 panid;
   \                     panid:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     56          static uint8 logicalType;
   \                     logicalType:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     57          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     58          static uint32 chs[] = {0x00000800, 0x00001000, 0x00002000, 0x00004000, 0x00008000,
   \                     chs:
   \   000000                DS 64
   \   000040                REQUIRE `?<Initializer for chs>`
   \   000040                REQUIRE __INIT_XDATA_I
     59                  0x00010000, 0x00020000, 0x00040000,0x00080000,0x00100000,0x00200000,
     60                  0x00400000,0x00800000,0x01000000,0x02000000,0x04000000}; 
     61          

   \                                 In  segment XDATA_ROM_C, align 1
     62          const cId_t zb_InCmdList[NUM_IN_CMD_SWITCH] =
   \                     zb_InCmdList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     63          {
     64            ID_CMD_READ_REQ,
     65            ID_CMD_WRITE_REQ,
     66          };

   \                                 In  segment XDATA_ROM_C, align 1
     67          const cId_t zb_OutCmdList[NUM_OUT_CMD_SWITCH] =
   \                     zb_OutCmdList:
   \   000000   0180         DW 32769
   \   000002   0280         DW 32770
     68          {
     69            ID_CMD_READ_RES,
     70            ID_CMD_WRITE_RES,
     71          };
     72          // Define SimpleDescriptor for Switch device

   \                                 In  segment XDATA_ROM_C, align 1
     73          const SimpleDescriptionFormat_t zb_SimpleDesc =
   \                     zb_SimpleDesc:
   \   000000   02           DB 2
   \   000001   100F         DW 3856
   \   000003   0100         DW 1
   \   000005   01           DB 1
   \   000006   02           DB 2
   \   000007   ....         DW zb_InCmdList
   \   000009   02           DB 2
   \   00000A   ....         DW zb_OutCmdList
     74          {
     75            MY_ENDPOINT_ID,             //  Endpoint
     76            MY_PROFILE_ID,              //  Profile ID
     77            DEV_ID_SENSOR,              //  Device ID
     78            DEVICE_VERSION_SWITCH,      //  Device Version
     79            0,                          //  Reserved
     80            NUM_IN_CMD_SWITCH,          //  Number of Input Commands
     81            (cId_t *) zb_InCmdList,     //  Input Command List
     82            NUM_OUT_CMD_SWITCH,         //  Number of Output Commands
     83            (cId_t *) zb_OutCmdList     //  Output Command List
     84          };
     85          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     86          void myReset(void)
   \                     myReset:
     87          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     88            HAL_DISABLE_INTERRUPTS();
   \   000000   C2AF         CLR     0xa8.7
     89            WatchDogEnable( WDTISH );
   \   000002   75C9AB       MOV     0xc9,#-0x55
   \   000005   75C95B       MOV     0xc9,#0x5b
     90            while(1);
   \                     ??myReset_0:
   \   000008   80FE         SJMP    ??myReset_0
   \   00000A                REQUIRE _A_IEN0
   \   00000A                REQUIRE WDCTL
     91          }
     92          
     93          /*********************************************************************************************
     94          * 函数原型说明
     95          *********************************************************************************************/
     96          void zb_HanderMsg(osal_event_hdr_t *msg);
     97          void sensorLinkOn(void);
     98          static void my_report_proc(void);
     99          static char* read_nb(char *buf, int len);

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    100          static uint16 _tm_report_delay, _tm_report_cnt;
   \                     _tm_report_delay:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     _tm_report_cnt:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    101          void starReportTPN(uint16 t, uint16 n);
    102          /*********************************************************************************************
    103          * 名称：_get_at_event()
    104          * 功能：导出osal at事件标识
    105          * 参数：
    106          * 返回：
    107          * 修改：
    108          * 注释：
    109          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    110          uint8 _get_at_event(void)
   \                     _get_at_event:
    111          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    112            return __AT_EVT;
   \   000000   7940         MOV     R1,#0x40
   \   000002   02....       LJMP    ?BRET
    113          }
    114          /*********************************************************************************************
    115          * 名称：zb_HandleOsalEvent()
    116          * 功能：sapi事件处理函数，当一个任务事件发生了之后，调用这个函数
    117          * 参数：event - 产生的任务事件
    118          * 返回：
    119          * 修改：
    120          * 注释：
    121          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    122          void zb_HandleOsalEvent( uint16 event )
   \                     zb_HandleOsalEvent:
    123          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    124            if (event & ZB_ENTRY_EVENT) {
   \   00000E   EE           MOV     A,R6
   \   00000F   5400         ANL     A,#0x0
   \   000011   F8           MOV     R0,A
   \   000012   EF           MOV     A,R7
   \   000013   5410         ANL     A,#0x10
   \   000015   F9           MOV     R1,A
   \   000016   E8           MOV     A,R0
   \   000017   49           ORL     A,R1
   \   000018   7003         JNZ     $+5
   \   00001A   02....       LJMP    ??zb_HandleOsalEvent_0 & 0xFFFF
    125              uint8 startOptions;
    126              uint8 selType = NODE_TYPE;
   \   00001D   7401         MOV     A,#0x1
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   7402         MOV     A,#0x2
   \   000024   F0           MOVX    @DPTR,A
    127              
    128              at_init();
   \   000025                ; Setup parameters for call to function at_init
   \   000025   12....       LCALL   ??at_init?relay      ; Banked call to: at_init
    129          
    130              zb_ReadConfiguration( ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType );
   \   000028                ; Setup parameters for call to function zb_ReadConfiguration
   \   000028   7C..         MOV     R4,#logicalType & 0xff
   \   00002A   7D..         MOV     R5,#(logicalType >> 8) & 0xff
   \   00002C   7A01         MOV     R2,#0x1
   \   00002E   7987         MOV     R1,#-0x79
   \   000030   12....       LCALL   ??zb_ReadConfiguration?relay; Banked call to: zb_ReadConfiguration
   \   000033   E9           MOV     A,R1
    131              if ( logicalType !=ZG_DEVICETYPE_ENDDEVICE && logicalType !=ZG_DEVICETYPE_ROUTER ) {
   \   000034   90....       MOV     DPTR,#logicalType
   \   000037   E0           MOVX    A,@DPTR
   \   000038   6402         XRL     A,#0x2
   \   00003A   6018         JZ      ??zb_HandleOsalEvent_1
   \   00003C   90....       MOV     DPTR,#logicalType
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   6401         XRL     A,#0x1
   \   000042   6010         JZ      ??zb_HandleOsalEvent_1
    132                zb_WriteConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &selType);
   \   000044                ; Setup parameters for call to function zb_WriteConfiguration
   \   000044   7401         MOV     A,#0x1
   \   000046   12....       LCALL   ?XSTACK_DISP102_8
   \   000049   7A01         MOV     R2,#0x1
   \   00004B   7987         MOV     R1,#-0x79
   \   00004D   12....       LCALL   ??zb_WriteConfiguration?relay; Banked call to: zb_WriteConfiguration
   \   000050   E9           MOV     A,R1
    133                zb_SystemReset();
   \   000051                ; Setup parameters for call to function zb_SystemReset
   \   000051   12....       LCALL   ??zb_SystemReset?relay; Banked call to: zb_SystemReset
    134              }
    135          	
    136              // Do more configuration if necessary and then restart device with auto-start bit set
    137              // write endpoint to simple desc...dont pass it in start req..then reset
    138              zb_ReadConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
   \                     ??zb_HandleOsalEvent_1:
   \   000054                ; Setup parameters for call to function zb_ReadConfiguration
   \   000054   AC..         MOV     R4,?XSP + 0
   \   000056   AD..         MOV     R5,?XSP + 1
   \   000058   7A01         MOV     R2,#0x1
   \   00005A   7903         MOV     R1,#0x3
   \   00005C   12....       LCALL   ??zb_ReadConfiguration?relay; Banked call to: zb_ReadConfiguration
   \   00005F   E9           MOV     A,R1
    139              if (startOptions != ZCD_STARTOPT_AUTO_START) {
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   E0           MOVX    A,@DPTR
   \   000067   6404         XRL     A,#0x4
   \   000069   6018         JZ      ??zb_HandleOsalEvent_2
    140                startOptions = ZCD_STARTOPT_AUTO_START;
   \   00006B   85..82       MOV     DPL,?XSP + 0
   \   00006E   85..83       MOV     DPH,?XSP + 1
   \   000071   7404         MOV     A,#0x4
   \   000073   F0           MOVX    @DPTR,A
    141                zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
   \   000074                ; Setup parameters for call to function zb_WriteConfiguration
   \   000074   AC..         MOV     R4,?XSP + 0
   \   000076   AD..         MOV     R5,?XSP + 1
   \   000078   7A01         MOV     R2,#0x1
   \   00007A   7903         MOV     R1,#0x3
   \   00007C   12....       LCALL   ??zb_WriteConfiguration?relay; Banked call to: zb_WriteConfiguration
   \   00007F   E9           MOV     A,R1
    142                zb_SystemReset();
   \   000080                ; Setup parameters for call to function zb_SystemReset
   \   000080   12....       LCALL   ??zb_SystemReset?relay; Banked call to: zb_SystemReset
    143              } 
    144              osal_nv_read( ZCD_NV_PANID, 0, sizeof( panid ), &panid );    
   \                     ??zb_HandleOsalEvent_2:
   \   000083                ; Setup parameters for call to function osal_nv_read
   \   000083   75....       MOV     ?V0,#panid & 0xff
   \   000086   75....       MOV     ?V1,#(panid >> 8) & 0xff
   \   000089   78..         MOV     R0,#?V0
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008E   75..02       MOV     ?V0,#0x2
   \   000091   75..00       MOV     ?V1,#0x0
   \   000094   78..         MOV     R0,#?V0
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000099   7C00         MOV     R4,#0x0
   \   00009B   7D00         MOV     R5,#0x0
   \   00009D   7A83         MOV     R2,#-0x7d
   \   00009F   7B00         MOV     R3,#0x0
   \   0000A1   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   0000A4   7404         MOV     A,#0x4
   \   0000A6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A9   E9           MOV     A,R1
    145              HalLedSet( HAL_LED_2, HAL_LED_MODE_FLASH );			        //网络灯开始闪烁
   \   0000AA                ; Setup parameters for call to function HalLedSet
   \   0000AA   7A04         MOV     R2,#0x4
   \   0000AC   7902         MOV     R1,#0x2
   \   0000AE   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   \   0000B1   E9           MOV     A,R1
    146              
    147              ZXBeeInfInit();                                             // ZXBee通信协议初始化
   \   0000B2                ; Setup parameters for call to function ZXBeeInfInit
   \   0000B2   12....       LCALL   ??ZXBeeInfInit?relay ; Banked call to: ZXBeeInfInit
    148          #ifndef CC2530_Serial
    149                  sensorInit();                                               // 传感器初始化
    150          #endif
    151          #ifdef CC2530_Serial
    152               WatchDogEnable( WDTIMX );
   \   0000B5   75C9A8       MOV     0xc9,#-0x58
   \   0000B8   75C958       MOV     0xc9,#0x58
    153               
    154          #endif        
    155              osal_start_timerEx( sapi_TaskID, __START_EVT, 500);     
   \   0000BB                ; Setup parameters for call to function osal_start_timerEx
   \   0000BB   7CF4         MOV     R4,#-0xc
   \   0000BD   7D01         MOV     R5,#0x1
   \   0000BF   7A10         MOV     R2,#0x10
   \   0000C1   7B00         MOV     R3,#0x0
   \   0000C3   90....       MOV     DPTR,#sapi_TaskID
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   F9           MOV     R1,A
   \   0000C8   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   0000CB   E9           MOV     A,R1
    156            }
    157            
    158            
    159            static uint16 tick = 0;
    160            static uint16 at_tick = 0;
    161            
    162            if (event & __START_EVT) {
   \                     ??zb_HandleOsalEvent_0:
   \   0000CC   EE           MOV     A,R6
   \   0000CD   5410         ANL     A,#0x10
   \   0000CF   607C         JZ      ??zb_HandleOsalEvent_3
    163              
    164          #ifdef CC2530_Serial
    165              uint8 f = EA;
   \   0000D1   A2AF         MOV     C,0xa8.7
   \   0000D3   E4           CLR     A
   \   0000D4   33           RLC     A
   \   0000D5   F5..         MOV     ?V0,A
    166              EA = 0;
   \   0000D7   C2AF         CLR     0xa8.7
    167              WDCTL = WDCLP1;
   \   0000D9   75C9A0       MOV     0xc9,#-0x60
    168              WDCTL = WDCLP2;
   \   0000DC   75C950       MOV     0xc9,#0x50
    169              EA = f;
   \   0000DF   85....       MOV     ?V1,?V0
   \   0000E2   E5..         MOV     A,?V0
   \   0000E4   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000E6   92AF         MOV     0xa8.7,C
    170              
    171              if (mLinkStatus && ((int16)tick-(int16)at_tick) > 5*60*2){
   \   0000E8   90....       MOV     DPTR,#mLinkStatus
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   602C         JZ      ??zb_HandleOsalEvent_4
   \   0000EE   90....       MOV     DPTR,#??tick
   \   0000F1   C082         PUSH    DPL
   \   0000F3   C083         PUSH    DPH
   \   0000F5   90....       MOV     DPTR,#??at_tick
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   F8           MOV     R0,A
   \   0000FA   A3           INC     DPTR
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   F9           MOV     R1,A
   \   0000FD   D083         POP     DPH
   \   0000FF   D082         POP     DPL
   \   000101   E0           MOVX    A,@DPTR
   \   000102   C3           CLR     C
   \   000103   98           SUBB    A,R0
   \   000104   F8           MOV     R0,A
   \   000105   A3           INC     DPTR
   \   000106   E0           MOVX    A,@DPTR
   \   000107   99           SUBB    A,R1
   \   000108   F9           MOV     R1,A
   \   000109   C3           CLR     C
   \   00010A   E8           MOV     A,R0
   \   00010B   9459         SUBB    A,#0x59
   \   00010D   E9           MOV     A,R1
   \   00010E   9402         SUBB    A,#0x2
   \   000110   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000112   65D0         XRL     A,PSW
   \   000114   33           RLC     A
   \   000115   4003         JC      ??zb_HandleOsalEvent_4
    172                myReset();
   \   000117                ; Setup parameters for call to function myReset
   \   000117   12....       LCALL   ??myReset?relay      ; Banked call to: myReset
    173              }
    174          #endif    
    175              
    176              tick += 1;
   \                     ??zb_HandleOsalEvent_4:
   \   00011A   90....       MOV     DPTR,#??tick
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   2401         ADD     A,#0x1
   \   000120   F0           MOVX    @DPTR,A
   \   000121   A3           INC     DPTR
   \   000122   E0           MOVX    A,@DPTR
   \   000123   3400         ADDC    A,#0x0
   \   000125   F0           MOVX    @DPTR,A
    177              if (mLinkStatus == 0 && tick>110) {
   \   000126   90....       MOV     DPTR,#mLinkStatus
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   7010         JNZ     ??zb_HandleOsalEvent_5
   \   00012C   90....       MOV     DPTR,#??tick
   \   00012F   C3           CLR     C
   \   000130   E0           MOVX    A,@DPTR
   \   000131   946F         SUBB    A,#0x6f
   \   000133   A3           INC     DPTR
   \   000134   E0           MOVX    A,@DPTR
   \   000135   9400         SUBB    A,#0x0
   \   000137   4003         JC      ??zb_HandleOsalEvent_5
    178                //zb_SystemReset();
    179                myReset();
   \   000139                ; Setup parameters for call to function myReset
   \   000139   12....       LCALL   ??myReset?relay      ; Banked call to: myReset
    180              }
    181             
    182              osal_start_timerEx( sapi_TaskID, __START_EVT, 500); 
   \                     ??zb_HandleOsalEvent_5:
   \   00013C                ; Setup parameters for call to function osal_start_timerEx
   \   00013C   7CF4         MOV     R4,#-0xc
   \   00013E   7D01         MOV     R5,#0x1
   \   000140   7A10         MOV     R2,#0x10
   \   000142   7B00         MOV     R3,#0x0
   \   000144   90....       MOV     DPTR,#sapi_TaskID
   \   000147   E0           MOVX    A,@DPTR
   \   000148   F9           MOV     R1,A
   \   000149   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   00014C   E9           MOV     A,R1
    183            }
    184            if (event & __REPORT_EVT) {                                   // 触发上报网络参数事件
   \                     ??zb_HandleOsalEvent_3:
   \   00014D   EE           MOV     A,R6
   \   00014E   5420         ANL     A,#0x20
   \   000150   6045         JZ      ??zb_HandleOsalEvent_6
    185              if (_tm_report_cnt > 0) {
   \   000152   90....       MOV     DPTR,#_tm_report_cnt
   \   000155   E0           MOVX    A,@DPTR
   \   000156   F8           MOV     R0,A
   \   000157   A3           INC     DPTR
   \   000158   E0           MOVX    A,@DPTR
   \   000159   F9           MOV     R1,A
   \   00015A   E8           MOV     A,R0
   \   00015B   49           ORL     A,R1
   \   00015C   6039         JZ      ??zb_HandleOsalEvent_6
    186                my_report_proc();
   \   00015E                ; Setup parameters for call to function my_report_proc
   \   00015E   12....       LCALL   ??my_report_proc?relay; Banked call to: my_report_proc
    187                osal_start_timerEx( sapi_TaskID, __REPORT_EVT, _tm_report_delay * 1000);
   \   000161                ; Setup parameters for call to function osal_start_timerEx
   \   000161   90....       MOV     DPTR,#_tm_report_delay
   \   000164   E0           MOVX    A,@DPTR
   \   000165   FC           MOV     R4,A
   \   000166   A3           INC     DPTR
   \   000167   E0           MOVX    A,@DPTR
   \   000168   FD           MOV     R5,A
   \   000169   EC           MOV     A,R4
   \   00016A   75F0E8       MOV     B,#-0x18
   \   00016D   A4           MUL     AB
   \   00016E   CC           XCH     A,R4
   \   00016F   A8F0         MOV     R0,B
   \   000171   75F003       MOV     B,#0x3
   \   000174   A4           MUL     AB
   \   000175   28           ADD     A,R0
   \   000176   F8           MOV     R0,A
   \   000177   75F0E8       MOV     B,#-0x18
   \   00017A   ED           MOV     A,R5
   \   00017B   A4           MUL     AB
   \   00017C   28           ADD     A,R0
   \   00017D   FD           MOV     R5,A
   \   00017E   7A20         MOV     R2,#0x20
   \   000180   7B00         MOV     R3,#0x0
   \   000182   90....       MOV     DPTR,#sapi_TaskID
   \   000185   E0           MOVX    A,@DPTR
   \   000186   F9           MOV     R1,A
   \   000187   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   00018A   E9           MOV     A,R1
    188                _tm_report_cnt--;
   \   00018B   90....       MOV     DPTR,#_tm_report_cnt
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   24FF         ADD     A,#-0x1
   \   000191   F0           MOVX    @DPTR,A
   \   000192   A3           INC     DPTR
   \   000193   E0           MOVX    A,@DPTR
   \   000194   34FF         ADDC    A,#-0x1
   \   000196   F0           MOVX    @DPTR,A
    189              }
    190            }
    191            if (event & __AT_EVT) {                                       // 触发AT指令事件
   \                     ??zb_HandleOsalEvent_6:
   \   000197   EE           MOV     A,R6
   \   000198   5440         ANL     A,#0x40
   \   00019A   6013         JZ      ??zb_HandleOsalEvent_7
    192          #ifdef CC2530_Serial
    193              at_tick = tick;
   \   00019C   90....       MOV     DPTR,#??tick
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   F8           MOV     R0,A
   \   0001A1   A3           INC     DPTR
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   F9           MOV     R1,A
   \   0001A4   90....       MOV     DPTR,#??at_tick
   \   0001A7   E8           MOV     A,R0
   \   0001A8   F0           MOVX    @DPTR,A
   \   0001A9   A3           INC     DPTR
   \   0001AA   E9           MOV     A,R1
   \   0001AB   F0           MOVX    @DPTR,A
    194          #endif
    195              at_proc();
   \   0001AC                ; Setup parameters for call to function at_proc
   \   0001AC   12....       LCALL   ??at_proc?relay      ; Banked call to: at_proc
    196            }
    197            if (event & 0x000F) {                                         // 触发用户自定义事件
    198          #ifndef CC2530_Serial
    199                  MyEventProcess( event );
    200          #endif
    201            }
    202          }
   \                     ??zb_HandleOsalEvent_7:
   \   0001AF   7402         MOV     A,#0x2
   \   0001B1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001B4   7F02         MOV     R7,#0x2
   \   0001B6   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0001B9                REQUIRE WDCTL
   \   0001B9                REQUIRE _A_IEN0

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??tick:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??at_tick:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    203          /*********************************************************************************************
    204          * 名称：zb_HandleKeys()
    205          * 功能：处理节点产生的按键事件
    206          * 参数：shift：转移标志；keys : 按下的按键
    207          * 返回：
    208          * 修改：
    209          * 注释：
    210          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          void zb_HandleKeys( uint8 shift, uint8 keys )
   \                     zb_HandleKeys:
    212          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    213          }
   \   000000   02....       LJMP    ?BRET
    214          /*********************************************************************************************
    215          * 名称：zb_StartConfirm()
    216          * 功能：当zstack协议栈启动完成后，执行这个函数
    217          * 参数：status：启动完成后的状态
    218          * 返回：
    219          * 修改：
    220          * 注释：
    221          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    222          void zb_StartConfirm( uint8 status )
   \                     zb_StartConfirm:
    223          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    224            // If the device sucessfully started, change state to running
    225            if ( status == ZB_SUCCESS )                                   // 入网成功
   \   000007   EE           MOV     A,R6
   \   000008   7011         JNZ     ??zb_StartConfirm_0
    226            {
    227              HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
   \   00000A                ; Setup parameters for call to function HalLedSet
   \   00000A   7A01         MOV     R2,#0x1
   \   00000C   7902         MOV     R1,#0x2
   \   00000E   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   \   000011   E9           MOV     A,R1
    228              mLinkStatus = 1;
   \   000012   90....       MOV     DPTR,#mLinkStatus
   \   000015   7401         MOV     A,#0x1
   \   000017   F0           MOVX    @DPTR,A
    229          #ifndef CC2530_Serial
    230                  sensorLinkOn();                                             // 入网成功后调用
    231          #else
    232              AT_reportedLinkStatus();
   \   000018                ; Setup parameters for call to function AT_reportedLinkStatus
   \   000018   12....       LCALL   ??AT_reportedLinkStatus?relay; Banked call to: AT_reportedLinkStatus
    233          #endif
    234            }
    235            else
    236            {
    237            }
    238          }
   \                     ??zb_StartConfirm_0:
   \   00001B   7F01         MOV     R7,#0x1
   \   00001D   02....       LJMP    ?BANKED_LEAVE_XDATA
    239          /*********************************************************************************************
    240          * 名称：zb_SendDataConfirm()
    241          * 功能：发送数据确认
    242          * 参数：
    243          * 返回：
    244          * 修改：
    245          * 注释：
    246          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    247          void zb_SendDataConfirm( uint8 handle, uint8 status )
   \                     zb_SendDataConfirm:
    248          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
    249            void ZXBeeSendConfirm(uint8 h, uint8 st);
    250            ZXBeeSendConfirm(handle, status);
   \   000009                ; Setup parameters for call to function ZXBeeSendConfirm
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??ZXBeeSendConfirm?relay; Banked call to: ZXBeeSendConfirm
    251          }
   \   000010   7F01         MOV     R7,#0x1
   \   000012   02....       LJMP    ?BANKED_LEAVE_XDATA
    252          /*********************************************************************************************
    253          * 名称：zb_BindConfirm()
    254          * 功能：绑定确认
    255          * 参数：
    256          * 返回：
    257          * 修改：
    258          * 注释：
    259          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    260          void zb_BindConfirm( uint16 commandId, uint8 status )
   \                     zb_BindConfirm:
    261          {  
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    262          }
   \   000000   02....       LJMP    ?BRET
    263          /*********************************************************************************************
    264          * 名称：zb_AllowBindConfirm()
    265          * 功能：允许其他设备绑定
    266          * 参数：
    267          * 返回：
    268          * 修改：
    269          * 注释：
    270          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    271          void zb_AllowBindConfirm( uint16 source )
   \                     zb_AllowBindConfirm:
    272          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    273          }
   \   000000   02....       LJMP    ?BRET
    274          /*********************************************************************************************
    275          * 名称：zb_FindDeviceConfirm()
    276          * 功能：查找设备完成后确定函数
    277          * 参数：
    278          * 返回：
    279          * 修改：
    280          * 注释：
    281          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    282          void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
   \                     zb_FindDeviceConfirm:
    283          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    284          }
   \   000000   02....       LJMP    ?BRET
    285          /*********************************************************************************************
    286          * 名称：zb_HanderMsg()
    287          * 功能：MT串口处理函数
    288          * 参数：
    289          * 返回：
    290          * 修改：
    291          * 注释：
    292          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    293          void zb_HanderMsg(osal_event_hdr_t *msg)
   \                     zb_HanderMsg:
    294          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    295          }
   \   000000   02....       LJMP    ?BRET
    296          /*********************************************************************************************
    297          * 名称：zb_ReceiveDataIndication()
    298          * 功能：当zigbee接受到节点发送的数据后，调用这个函数
    299          * 参数：source：源地址；commandID：命令ID；len：收到数据的长度；pData：收到的数据
    300          * 返回：
    301          * 修改：
    302          * 注释：
    303          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    304          void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
   \                     zb_ReceiveDataIndication:
    305          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   8C..         MOV     ?V2,R4
   \   000017   8D..         MOV     ?V3,R5
   \   000019   7412         MOV     A,#0x12
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FE           MOV     R6,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FF           MOV     R7,A
   \   000023   7414         MOV     A,#0x14
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V1,A
    306            uint16 pAddr = NLME_GetCoordShortAddr();
   \   00002F                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00002F   12....       LCALL   ??NLME_GetCoordShortAddr?relay; Banked call to: NLME_GetCoordShortAddr
   \   000032   8A..         MOV     ?V4,R2
   \   000034   8B..         MOV     ?V5,R3
   \   000036   85....       MOV     ?V6,?V4
   \   000039   85....       MOV     ?V7,?V5
    307            
    308            /* 接收到数据处理 */
    309            HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
   \   00003C                ; Setup parameters for call to function HalLedSet
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7901         MOV     R1,#0x1
   \   000040   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   \   000043   E9           MOV     A,R1
    310            HalLedSet( HAL_LED_1, HAL_LED_MODE_BLINK );  
   \   000044                ; Setup parameters for call to function HalLedSet
   \   000044   7A02         MOV     R2,#0x2
   \   000046   7901         MOV     R1,#0x1
   \   000048   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   \   00004B   E9           MOV     A,R1
    311            
    312           
    313            // 处理接收到的无线数据包APP_DATA
    314            if (command == 0) { //如果command==0 说明是zxbee数据
   \   00004C   E5..         MOV     A,?V2
   \   00004E   45..         ORL     A,?V3
   \   000050   701C         JNZ     ??zb_ReceiveDataIndication_0
    315              if (logicalType != ZG_DEVICETYPE_COORDINATOR) { //通过at指令发送到串口
   \   000052   90....       MOV     DPTR,#logicalType
   \   000055   E0           MOVX    A,@DPTR
   \   000056   600B         JZ      ??zb_ReceiveDataIndication_1
    316                at_notify_data((char *)pData, len);
   \   000058                ; Setup parameters for call to function at_notify_data
   \   000058   EE           MOV     A,R6
   \   000059   FC           MOV     R4,A
   \   00005A   EF           MOV     A,R7
   \   00005B   FD           MOV     R5,A
   \   00005C   AA..         MOV     R2,?V0
   \   00005E   AB..         MOV     R3,?V1
   \   000060   12....       LCALL   ??at_notify_data?relay; Banked call to: at_notify_data
    317              }
    318              ZXBeeInfRecv((char*)pData, len);   //交给ZXBee接口处理接收数据
   \                     ??zb_ReceiveDataIndication_1:
   \   000063                ; Setup parameters for call to function ZXBeeInfRecv
   \   000063   EE           MOV     A,R6
   \   000064   FC           MOV     R4,A
   \   000065   EF           MOV     A,R7
   \   000066   FD           MOV     R5,A
   \   000067   AA..         MOV     R2,?V0
   \   000069   AB..         MOV     R3,?V1
   \   00006B   12....       LCALL   ??ZXBeeInfRecv?relay ; Banked call to: ZXBeeInfRecv
    319            }
    320          }
   \                     ??zb_ReceiveDataIndication_0:
   \   00006E   7402         MOV     A,#0x2
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
   \   000073   7F08         MOV     R7,#0x8
   \   000075   02....       LJMP    ?BANKED_LEAVE_XDATA
    321          /*********************************************************************************************
    322          * 名称：my_report_proc()
    323          * 功能：节点网络信息上报处理
    324          * 参数：
    325          * 返回：
    326          * 修改：
    327          * 注释：
    328          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    329          static void my_report_proc(void)
   \                     my_report_proc:
    330          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    331            unsigned char mac[Z_EXTADDR_LEN];
    332            static char wbuf[96];
    333            ZXBeeBegin();
   \   00000A                ; Setup parameters for call to function ZXBeeBegin
   \   00000A   12....       LCALL   ??ZXBeeBegin?relay   ; Banked call to: ZXBeeBegin
   \   00000D   E9           MOV     A,R1
    334          
    335            NLME_GetCoordExtAddr(mac);
   \   00000E                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   00000E   AA..         MOV     R2,?XSP + 0
   \   000010   AB..         MOV     R3,?XSP + 1
   \   000012   12....       LCALL   ??NLME_GetCoordExtAddr?relay; Banked call to: NLME_GetCoordExtAddr
    336            sprintf(wbuf, "%02X%02X", mac[1],mac[0]);
   \   000015                ; Setup parameters for call to function sprintf
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0,A
   \   00001E   75..00       MOV     ?V1,#0x0
   \   000021   78..         MOV     R0,#?V0
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   7403         MOV     A,#0x3
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0,A
   \   00002E   75..00       MOV     ?V1,#0x0
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7C..         MOV     R4,#`?<Constant "%02X%02X">` & 0xff
   \   000038   7D..         MOV     R5,#(`?<Constant "%02X%02X">` >> 8) & 0xff
   \   00003A   7A..         MOV     R2,#??wbuf & 0xff
   \   00003C   7B..         MOV     R3,#(??wbuf >> 8) & 0xff
   \   00003E   12....       LCALL   ??sprintf?relay      ; Banked call to: sprintf
   \   000041   7404         MOV     A,#0x4
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
    337          
    338            read_nb(wbuf+strlen(wbuf), -1);
   \   000046                ; Setup parameters for call to function strlen
   \   000046   7A..         MOV     R2,#??wbuf & 0xff
   \   000048   7B..         MOV     R3,#(??wbuf >> 8) & 0xff
   \   00004A   12....       LCALL   ??strlen?relay       ; Banked call to: strlen
   \   00004D   8A..         MOV     ?V0,R2
   \   00004F   8B..         MOV     ?V1,R3
   \   000051   A8..         MOV     R0,?V0
   \   000053   A9..         MOV     R1,?V1
   \   000055                ; Setup parameters for call to function read_nb
   \   000055   7CFF         MOV     R4,#-0x1
   \   000057   7DFF         MOV     R5,#-0x1
   \   000059   74..         MOV     A,#??wbuf & 0xff
   \   00005B   28           ADD     A,R0
   \   00005C   FA           MOV     R2,A
   \   00005D   74..         MOV     A,#(??wbuf >> 8) & 0xff
   \   00005F   39           ADDC    A,R1
   \   000060   FB           MOV     R3,A
   \   000061   12....       LCALL   ??read_nb?relay      ; Banked call to: read_nb
    339            ZXBeeAdd("PN", wbuf);
   \   000064                ; Setup parameters for call to function ZXBeeAdd
   \   000064   7C..         MOV     R4,#??wbuf & 0xff
   \   000066   7D..         MOV     R5,#(??wbuf >> 8) & 0xff
   \   000068   7A..         MOV     R2,#`?<Constant "PN">` & 0xff
   \   00006A   7B..         MOV     R3,#(`?<Constant "PN">` >> 8) & 0xff
   \   00006C   12....       LCALL   ??ZXBeeAdd?relay     ; Banked call to: ZXBeeAdd
   \   00006F   E9           MOV     A,R1
    340            
    341          #ifndef CC2530_Serial
    342              sprintf(wbuf, "%d%d%s", NODE_CATEGORY, logicalType, NODE_NAME);
    343              ZXBeeAdd("TYPE", wbuf);
    344          #else
    345              at_notify_data("AT+TYPE?\r\n",strlen("AT+TYPE?\r\n"));
   \   000070                ; Setup parameters for call to function at_notify_data
   \   000070   7C0A         MOV     R4,#0xa
   \   000072   7D00         MOV     R5,#0x0
   \   000074   7A..         MOV     R2,#`?<Constant "AT+TYPE?\\r\\n">` & 0xff
   \   000076   7B..         MOV     R3,#(`?<Constant "AT+TYPE?\\r\\n">` >> 8) & 0xff
   \   000078   12....       LCALL   ??at_notify_data?relay; Banked call to: at_notify_data
    346          #endif
    347            char *p = ZXBeeEnd();
   \   00007B                ; Setup parameters for call to function ZXBeeEnd
   \   00007B   12....       LCALL   ??ZXBeeEnd?relay     ; Banked call to: ZXBeeEnd
   \   00007E   8A..         MOV     ?V0,R2
   \   000080   8B..         MOV     ?V1,R3
   \   000082   AE..         MOV     R6,?V0
   \   000084   AF..         MOV     R7,?V1
    348            if (p != NULL) {
   \   000086   EE           MOV     A,R6
   \   000087   4F           ORL     A,R7
   \   000088   6016         JZ      ??my_report_proc_0
    349              ZXBeeInfSend(p, strlen(p));
   \   00008A                ; Setup parameters for call to function strlen
   \   00008A   EE           MOV     A,R6
   \   00008B   FA           MOV     R2,A
   \   00008C   EF           MOV     A,R7
   \   00008D   FB           MOV     R3,A
   \   00008E   12....       LCALL   ??strlen?relay       ; Banked call to: strlen
   \   000091   8A..         MOV     ?V0,R2
   \   000093   8B..         MOV     ?V1,R3
   \   000095   AC..         MOV     R4,?V0
   \   000097   AD..         MOV     R5,?V1
   \   000099                ; Setup parameters for call to function ZXBeeInfSend
   \   000099   EE           MOV     A,R6
   \   00009A   FA           MOV     R2,A
   \   00009B   EF           MOV     A,R7
   \   00009C   FB           MOV     R3,A
   \   00009D   12....       LCALL   ??ZXBeeInfSend?relay ; Banked call to: ZXBeeInfSend
    350            }
    351          }
   \                     ??my_report_proc_0:
   \   0000A0   7408         MOV     A,#0x8
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A5   7F02         MOV     R7,#0x2
   \   0000A7   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??wbuf:
   \   000000                DS 96
   \   000060                REQUIRE __INIT_XDATA_Z
    352          /*********************************************************************************************
    353          * 名称：read_nb()
    354          * 功能：查询邻居节点地址
    355          * 参数：
    356          * 返回：
    357          * 修改：
    358          * 注释：
    359          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    360          static char* read_nb(char *buf, int len)
   \                     read_nb:
    361          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EC           MOV     A,R4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   ED           MOV     A,R5
   \   000014   F0           MOVX    @DPTR,A
   \   000015   8A..         MOV     ?V6,R2
   \   000017   8B..         MOV     ?V7,R3
    362            int i;
    363            char *p;
    364            
    365            buf[0] = 0;
   \   000019   85..82       MOV     DPL,?V6
   \   00001C   85..83       MOV     DPH,?V7
   \   00001F   7400         MOV     A,#0x0
   \   000021   F0           MOVX    @DPTR,A
    366            p = buf;     
   \   000022   85....       MOV     ?V2,?V6
   \   000025   85....       MOV     ?V3,?V7
    367            for (i=0; i<MAX_NEIGHBOR_ENTRIES; i++) {
   \   000028   7E00         MOV     R6,#0x0
   \   00002A   7F00         MOV     R7,#0x0
   \                     ??read_nb_0:
   \   00002C   C3           CLR     C
   \   00002D   EE           MOV     A,R6
   \   00002E   9410         SUBB    A,#0x10
   \   000030   EF           MOV     A,R7
   \   000031   9400         SUBB    A,#0x0
   \   000033   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000035   65D0         XRL     A,PSW
   \   000037   33           RLC     A
   \   000038   4003         JC      $+5
   \   00003A   02....       LJMP    ??read_nb_1 & 0xFFFF
    368              neighborEntry_t *pnb = &neighborTable[i];
   \   00003D   EE           MOV     A,R6
   \   00003E   F8           MOV     R0,A
   \   00003F   EF           MOV     A,R7
   \   000040   F9           MOV     R1,A
   \   000041   E8           MOV     A,R0
   \   000042   75F017       MOV     B,#0x17
   \   000045   A4           MUL     AB
   \   000046   C8           XCH     A,R0
   \   000047   AAF0         MOV     R2,B
   \   000049   75F000       MOV     B,#0x0
   \   00004C   A4           MUL     AB
   \   00004D   2A           ADD     A,R2
   \   00004E   FA           MOV     R2,A
   \   00004F   75F017       MOV     B,#0x17
   \   000052   E9           MOV     A,R1
   \   000053   A4           MUL     AB
   \   000054   2A           ADD     A,R2
   \   000055   F9           MOV     R1,A
   \   000056   74..         MOV     A,#neighborTable & 0xff
   \   000058   28           ADD     A,R0
   \   000059   F5..         MOV     ?V0,A
   \   00005B   74..         MOV     A,#(neighborTable >> 8) & 0xff
   \   00005D   39           ADDC    A,R1
   \   00005E   F5..         MOV     ?V1,A
    369              if (pnb->panId == panid 
    370                  && memcmp(pnb->neighborExtAddr,"\x00\x00\x00\x00\x00\x00\x00\x00", 8)!=0 
    371                  && pnb->age <= NWK_ROUTE_AGE_LIMIT) {
   \   000060   85..82       MOV     DPL,?V0
   \   000063   85..83       MOV     DPH,?V1
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F8           MOV     R0,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F9           MOV     R1,A
   \   000075   90....       MOV     DPTR,#panid
   \   000078   E0           MOVX    A,@DPTR
   \   000079   68           XRL     A,R0
   \   00007A   7003         JNZ     ??read_nb_2
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   69           XRL     A,R1
   \                     ??read_nb_2:
   \   00007F   6003         JZ      $+5
   \   000081   02....       LJMP    ??read_nb_3 & 0xFFFF
   \   000084                ; Setup parameters for call to function memcmp
   \   000084   75..08       MOV     ?V4,#0x8
   \   000087   75..00       MOV     ?V5,#0x0
   \   00008A   78..         MOV     R0,#?V4
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008F   7C..         MOV     R4,#`?<Constant "\\000\\000\\000\\000\\000\\000\\000\\000">` & 0xff
   \   000091   7D..         MOV     R5,#(`?<Constant "\\000\\000\\000\\000\\000\\000\\000\\000">` >> 8) & 0xff
   \   000093   E5..         MOV     A,?V0
   \   000095   2402         ADD     A,#0x2
   \   000097   FA           MOV     R2,A
   \   000098   E4           CLR     A
   \   000099   35..         ADDC    A,?V1
   \   00009B   FB           MOV     R3,A
   \   00009C   12....       LCALL   ??memcmp?relay       ; Banked call to: memcmp
   \   00009F   7402         MOV     A,#0x2
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A4   8A..         MOV     ?V4,R2
   \   0000A6   8B..         MOV     ?V5,R3
   \   0000A8   E5..         MOV     A,?V4
   \   0000AA   45..         ORL     A,?V5
   \   0000AC   605F         JZ      ??read_nb_3
   \   0000AE   E5..         MOV     A,?V0
   \   0000B0   240C         ADD     A,#0xc
   \   0000B2   F582         MOV     DPL,A
   \   0000B4   E4           CLR     A
   \   0000B5   35..         ADDC    A,?V1
   \   0000B7   F583         MOV     DPH,A
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   C3           CLR     C
   \   0000BB   9404         SUBB    A,#0x4
   \   0000BD   504E         JNC     ??read_nb_3
    372                    sprintf(p, "%02X%02X", pnb->neighborExtAddr[1], pnb->neighborExtAddr[0]);
   \   0000BF                ; Setup parameters for call to function sprintf
   \   0000BF   85..82       MOV     DPL,?V0
   \   0000C2   85..83       MOV     DPH,?V1
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   F5..         MOV     ?V4,A
   \   0000CA   75..00       MOV     ?V5,#0x0
   \   0000CD   78..         MOV     R0,#?V4
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D2   85..82       MOV     DPL,?V0
   \   0000D5   85..83       MOV     DPH,?V1
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F5..         MOV     ?V4,A
   \   0000DE   75..00       MOV     ?V5,#0x0
   \   0000E1   78..         MOV     R0,#?V4
   \   0000E3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E6   7C..         MOV     R4,#`?<Constant "%02X%02X">` & 0xff
   \   0000E8   7D..         MOV     R5,#(`?<Constant "%02X%02X">` >> 8) & 0xff
   \   0000EA   AA..         MOV     R2,?V2
   \   0000EC   AB..         MOV     R3,?V3
   \   0000EE   12....       LCALL   ??sprintf?relay      ; Banked call to: sprintf
   \   0000F1   7404         MOV     A,#0x4
   \   0000F3   12....       LCALL   ?DEALLOC_XSTACK8
    373                    p = p + strlen(p);         
   \   0000F6                ; Setup parameters for call to function strlen
   \   0000F6   AA..         MOV     R2,?V2
   \   0000F8   AB..         MOV     R3,?V3
   \   0000FA   12....       LCALL   ??strlen?relay       ; Banked call to: strlen
   \   0000FD   8A..         MOV     ?V4,R2
   \   0000FF   8B..         MOV     ?V5,R3
   \   000101   E5..         MOV     A,?V2
   \   000103   25..         ADD     A,?V4
   \   000105   F5..         MOV     ?V2,A
   \   000107   E5..         MOV     A,?V3
   \   000109   35..         ADDC    A,?V5
   \   00010B   F5..         MOV     ?V3,A
    374              }
    375            }
   \                     ??read_nb_3:
   \   00010D   0E           INC     R6
   \   00010E   EE           MOV     A,R6
   \   00010F   7001         JNZ     ??read_nb_4
   \   000111   0F           INC     R7
   \                     ??read_nb_4:
   \   000112   02....       LJMP    ??read_nb_0 & 0xFFFF
    376            return buf;
   \                     ??read_nb_1:
   \   000115   AA..         MOV     R2,?V6
   \   000117   AB..         MOV     R3,?V7
   \   000119   7402         MOV     A,#0x2
   \   00011B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011E   7F08         MOV     R7,#0x8
   \   000120   02....       LJMP    ?BANKED_LEAVE_XDATA
    377          }
    378          /*********************************************************************************************
    379          * 名称：GetCurrentLogicalType()
    380          * 功能：获取当前节点类型
    381          * 参数：
    382          * 返回：
    383          * 修改：
    384          * 注释：
    385          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    386          uint8 GetCurrentLogicalType(void)
   \                     GetCurrentLogicalType:
    387          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    388            return logicalType;
   \   000004   90....       MOV     DPTR,#logicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   D083         POP     DPH
   \   00000B   D082         POP     DPL
   \   00000D   02....       LJMP    ?BRET
    389          }
    390          /*********************************************************************************************
    391          * 名称：GetLinkStatus()
    392          * 功能：获取节点入网状态
    393          * 参数：
    394          * 返回：
    395          * 修改：
    396          * 注释：
    397          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    398          uint8 GetLinkStatus(void)
   \                     GetLinkStatus:
    399          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    400            return mLinkStatus;
   \   000004   90....       MOV     DPTR,#mLinkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   D083         POP     DPH
   \   00000B   D082         POP     DPL
   \   00000D   02....       LJMP    ?BRET
    401          }
    402          /*********************************************************************************************
    403          * 名称：GetPanId()
    404          * 功能：获取节点PANID
    405          * 参数：
    406          * 返回：
    407          * 修改：
    408          * 注释：
    409          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    410          uint16 GetPanId(void)
   \                     GetPanId:
    411          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    412             uint16 tmp16;
    413             osal_nv_read( ZCD_NV_PANID, 0, sizeof( tmp16 ), &tmp16 );
   \   00000A                ; Setup parameters for call to function osal_nv_read
   \   00000A   A8..         MOV     R0,?XSP + 0
   \   00000C   A9..         MOV     R1,?XSP + 1
   \   00000E   88..         MOV     ?V0,R0
   \   000010   89..         MOV     ?V1,R1
   \   000012   78..         MOV     R0,#?V0
   \   000014   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000017   75..02       MOV     ?V0,#0x2
   \   00001A   75..00       MOV     ?V1,#0x0
   \   00001D   78..         MOV     R0,#?V0
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   7C00         MOV     R4,#0x0
   \   000024   7D00         MOV     R5,#0x0
   \   000026   7A83         MOV     R2,#-0x7d
   \   000028   7B00         MOV     R3,#0x0
   \   00002A   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   00002D   7404         MOV     A,#0x4
   \   00002F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000032   E9           MOV     A,R1
    414             return tmp16;
   \   000033   85..82       MOV     DPL,?XSP + 0
   \   000036   85..83       MOV     DPH,?XSP + 1
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   FA           MOV     R2,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   FB           MOV     R3,A
   \   00003E   7402         MOV     A,#0x2
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
   \   000043   7F02         MOV     R7,#0x2
   \   000045   02....       LJMP    ?BANKED_LEAVE_XDATA
    415          }
    416          /*********************************************************************************************
    417          * 名称：SetPanId()
    418          * 功能：设置节点PANID
    419          * 参数：
    420          * 返回：
    421          * 修改：
    422          * 注释：
    423          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    424          void SetPanId(uint16 id)
   \                     SetPanId:
    425          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
    426              uint8 startOptions = ZCD_STARTOPT_DEFAULT_NETWORK_STATE;
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   7402         MOV     A,#0x2
   \   00001C   F0           MOVX    @DPTR,A
    427              uint16 tmp16;
    428              tmp16 = GetPanId();
   \   00001D                ; Setup parameters for call to function GetPanId
   \   00001D   12....       LCALL   ??GetPanId?relay     ; Banked call to: GetPanId
   \   000020   8A..         MOV     ?V0,R2
   \   000022   8B..         MOV     ?V1,R3
   \   000024   AE..         MOV     R6,?V0
   \   000026   AF..         MOV     R7,?V1
    429              if (tmp16 != id) {
   \   000028   7401         MOV     A,#0x1
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6E           XRL     A,R6
   \   00002F   7003         JNZ     ??SetPanId_0
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   6F           XRL     A,R7
   \                     ??SetPanId_0:
   \   000034   6041         JZ      ??SetPanId_1
    430                  osal_nv_write(ZCD_NV_PANID, 0, osal_nv_item_len( ZCD_NV_PANID ), &id);
   \   000036                ; Setup parameters for call to function osal_nv_item_len
   \   000036   7A83         MOV     R2,#-0x7d
   \   000038   7B00         MOV     R3,#0x0
   \   00003A   12....       LCALL   ??osal_nv_item_len?relay; Banked call to: osal_nv_item_len
   \   00003D   8A..         MOV     ?V2,R2
   \   00003F   8B..         MOV     ?V3,R3
   \   000041   85....       MOV     ?V0,?V2
   \   000044   85....       MOV     ?V1,?V3
   \   000047                ; Setup parameters for call to function osal_nv_write
   \   000047   7401         MOV     A,#0x1
   \   000049   12....       LCALL   ?XSTACK_DISP100_8
   \   00004C   88..         MOV     ?V2,R0
   \   00004E   89..         MOV     ?V3,R1
   \   000050   78..         MOV     R0,#?V2
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   78..         MOV     R0,#?V0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   7C00         MOV     R4,#0x0
   \   00005C   7D00         MOV     R5,#0x0
   \   00005E   7A83         MOV     R2,#-0x7d
   \   000060   7B00         MOV     R3,#0x0
   \   000062   12....       LCALL   ??osal_nv_write?relay; Banked call to: osal_nv_write
   \   000065   7404         MOV     A,#0x4
   \   000067   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006A   E9           MOV     A,R1
    431                  zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions ); //标记网络状态发生改变
   \   00006B                ; Setup parameters for call to function zb_WriteConfiguration
   \   00006B   AC..         MOV     R4,?XSP + 0
   \   00006D   AD..         MOV     R5,?XSP + 1
   \   00006F   7A01         MOV     R2,#0x1
   \   000071   7903         MOV     R1,#0x3
   \   000073   12....       LCALL   ??zb_WriteConfiguration?relay; Banked call to: zb_WriteConfiguration
   \   000076   E9           MOV     A,R1
    432              }
    433          }
   \                     ??SetPanId_1:
   \   000077   7403         MOV     A,#0x3
   \   000079   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007C   7F04         MOV     R7,#0x4
   \   00007E   02....       LJMP    ?BANKED_LEAVE_XDATA
    434          /*********************************************************************************************
    435          * 名称：GetChannel()
    436          * 功能：获取节点信道
    437          * 参数：
    438          * 返回：
    439          * 修改：
    440          * 注释：
    441          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    442          uint8 GetChannel(void)
   \                     GetChannel:
    443          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    444            uint32 tmp32;
    445            uint8 i;
    446          		
    447            osal_nv_read( ZCD_NV_CHANLIST, 0, sizeof( tmp32 ), &tmp32 );
   \   00000A                ; Setup parameters for call to function osal_nv_read
   \   00000A   A8..         MOV     R0,?XSP + 0
   \   00000C   A9..         MOV     R1,?XSP + 1
   \   00000E   88..         MOV     ?V0,R0
   \   000010   89..         MOV     ?V1,R1
   \   000012   78..         MOV     R0,#?V0
   \   000014   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000017   75..04       MOV     ?V0,#0x4
   \   00001A   75..00       MOV     ?V1,#0x0
   \   00001D   78..         MOV     R0,#?V0
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   7C00         MOV     R4,#0x0
   \   000024   7D00         MOV     R5,#0x0
   \   000026   7A84         MOV     R2,#-0x7c
   \   000028   7B00         MOV     R3,#0x0
   \   00002A   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   00002D   7404         MOV     A,#0x4
   \   00002F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000032   E9           MOV     A,R1
    448               
    449            for (i=0; i<16; i++) {
   \   000033   7E00         MOV     R6,#0x0
   \                     ??GetChannel_0:
   \   000035   EE           MOV     A,R6
   \   000036   C3           CLR     C
   \   000037   9410         SUBB    A,#0x10
   \   000039   5038         JNC     ??GetChannel_1
    450              if (tmp32 == chs[i]) break;
   \   00003B   EE           MOV     A,R6
   \   00003C   F8           MOV     R0,A
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   E8           MOV     A,R0
   \   000040   75F004       MOV     B,#0x4
   \   000043   A4           MUL     AB
   \   000044   C8           XCH     A,R0
   \   000045   AAF0         MOV     R2,B
   \   000047   75F000       MOV     B,#0x0
   \   00004A   A4           MUL     AB
   \   00004B   2A           ADD     A,R2
   \   00004C   FA           MOV     R2,A
   \   00004D   75F004       MOV     B,#0x4
   \   000050   E9           MOV     A,R1
   \   000051   A4           MUL     AB
   \   000052   2A           ADD     A,R2
   \   000053   F9           MOV     R1,A
   \   000054   74..         MOV     A,#chs & 0xff
   \   000056   28           ADD     A,R0
   \   000057   F582         MOV     DPL,A
   \   000059   74..         MOV     A,#(chs >> 8) & 0xff
   \   00005B   39           ADDC    A,R1
   \   00005C   F583         MOV     DPH,A
   \   00005E   78..         MOV     R0,#?V0
   \   000060   12....       LCALL   ?L_MOV_X
   \   000063   85..82       MOV     DPL,?XSP + 0
   \   000066   85..83       MOV     DPH,?XSP + 1
   \   000069   78..         MOV     R0,#?V0
   \   00006B   12....       LCALL   ?L_EQ_X
   \   00006E   6003         JZ      ??GetChannel_1
    451            }
   \   000070   0E           INC     R6
   \   000071   80C2         SJMP    ??GetChannel_0
    452            i += 11;
   \                     ??GetChannel_1:
   \   000073   740B         MOV     A,#0xb
   \   000075   2E           ADD     A,R6
   \   000076   FE           MOV     R6,A
    453            return i;
   \   000077   EE           MOV     A,R6
   \   000078   F9           MOV     R1,A
   \   000079   7404         MOV     A,#0x4
   \   00007B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007E   7F04         MOV     R7,#0x4
   \   000080   02....       LJMP    ?BANKED_LEAVE_XDATA
    454          }
    455          /*********************************************************************************************
    456          * 名称：SetChannel()
    457          * 功能：设置节点信道
    458          * 参数：
    459          * 返回：
    460          * 修改：
    461          * 注释：
    462          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    463          void SetChannel(uint8 val)
   \                     SetChannel:
    464          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    465            uint8 startOptions = ZCD_STARTOPT_DEFAULT_NETWORK_STATE;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   7402         MOV     A,#0x2
   \   000014   F0           MOVX    @DPTR,A
    466            uint32 tmp32, t32;
    467            tmp32 = val - 11;
   \   000015   EE           MOV     A,R6
   \   000016   F8           MOV     R0,A
   \   000017   7900         MOV     R1,#0x0
   \   000019   E8           MOV     A,R0
   \   00001A   24F5         ADD     A,#-0xb
   \   00001C   F8           MOV     R0,A
   \   00001D   E9           MOV     A,R1
   \   00001E   34FF         ADDC    A,#-0x1
   \   000020   F9           MOV     R1,A
   \   000021   E9           MOV     A,R1
   \   000022   33           RLC     A
   \   000023   95E0         SUBB    A,0xE0 /* A   */
   \   000025   FA           MOV     R2,A
   \   000026   FB           MOV     R3,A
   \   000027   88..         MOV     ?V0,R0
   \   000029   89..         MOV     ?V1,R1
   \   00002B   8A..         MOV     ?V2,R2
   \   00002D   8B..         MOV     ?V3,R3
    468            osal_nv_read( ZCD_NV_CHANLIST, 0, sizeof( tmp32 ), &t32 );
   \   00002F                ; Setup parameters for call to function osal_nv_read
   \   00002F   7401         MOV     A,#0x1
   \   000031   12....       LCALL   ?XSTACK_DISP100_8
   \   000034   88..         MOV     ?V4,R0
   \   000036   89..         MOV     ?V5,R1
   \   000038   78..         MOV     R0,#?V4
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   75..04       MOV     ?V4,#0x4
   \   000040   75..00       MOV     ?V5,#0x0
   \   000043   78..         MOV     R0,#?V4
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000048   7C00         MOV     R4,#0x0
   \   00004A   7D00         MOV     R5,#0x0
   \   00004C   7A84         MOV     R2,#-0x7c
   \   00004E   7B00         MOV     R3,#0x0
   \   000050   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   000053   7404         MOV     A,#0x4
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
   \   000058   E9           MOV     A,R1
    469            if (tmp32 < 16) {
   \   000059   90....       MOV     DPTR,#__Constant_10
   \   00005C   78..         MOV     R0,#?V0
   \   00005E   12....       LCALL   ?UL_GE_X
   \   000061   5003         JNC     $+5
   \   000063   02....       LJMP    ??SetChannel_0 & 0xFFFF
    470              if (t32 != chs[tmp32]) {
   \   000066   A8..         MOV     R0,?V0
   \   000068   A9..         MOV     R1,?V1
   \   00006A   E8           MOV     A,R0
   \   00006B   75F004       MOV     B,#0x4
   \   00006E   A4           MUL     AB
   \   00006F   C8           XCH     A,R0
   \   000070   AAF0         MOV     R2,B
   \   000072   75F000       MOV     B,#0x0
   \   000075   A4           MUL     AB
   \   000076   2A           ADD     A,R2
   \   000077   FA           MOV     R2,A
   \   000078   75F004       MOV     B,#0x4
   \   00007B   E9           MOV     A,R1
   \   00007C   A4           MUL     AB
   \   00007D   2A           ADD     A,R2
   \   00007E   F9           MOV     R1,A
   \   00007F   74..         MOV     A,#chs & 0xff
   \   000081   28           ADD     A,R0
   \   000082   F582         MOV     DPL,A
   \   000084   74..         MOV     A,#(chs >> 8) & 0xff
   \   000086   39           ADDC    A,R1
   \   000087   F583         MOV     DPH,A
   \   000089   78..         MOV     R0,#?V4
   \   00008B   12....       LCALL   ?L_MOV_X
   \   00008E   7401         MOV     A,#0x1
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   78..         MOV     R0,#?V4
   \   000095   12....       LCALL   ?L_EQ_X
   \   000098   605D         JZ      ??SetChannel_0
    471                osal_nv_write(ZCD_NV_CHANLIST, 0, osal_nv_item_len( ZCD_NV_CHANLIST ), &chs[tmp32]);
   \   00009A                ; Setup parameters for call to function osal_nv_item_len
   \   00009A   7A84         MOV     R2,#-0x7c
   \   00009C   7B00         MOV     R3,#0x0
   \   00009E   12....       LCALL   ??osal_nv_item_len?relay; Banked call to: osal_nv_item_len
   \   0000A1   8A..         MOV     ?V4,R2
   \   0000A3   8B..         MOV     ?V5,R3
   \   0000A5   AA..         MOV     R2,?V4
   \   0000A7   AB..         MOV     R3,?V5
   \   0000A9                ; Setup parameters for call to function osal_nv_write
   \   0000A9   A8..         MOV     R0,?V0
   \   0000AB   A9..         MOV     R1,?V1
   \   0000AD   E8           MOV     A,R0
   \   0000AE   75F004       MOV     B,#0x4
   \   0000B1   A4           MUL     AB
   \   0000B2   C8           XCH     A,R0
   \   0000B3   ACF0         MOV     R4,B
   \   0000B5   75F000       MOV     B,#0x0
   \   0000B8   A4           MUL     AB
   \   0000B9   2C           ADD     A,R4
   \   0000BA   FC           MOV     R4,A
   \   0000BB   75F004       MOV     B,#0x4
   \   0000BE   E9           MOV     A,R1
   \   0000BF   A4           MUL     AB
   \   0000C0   2C           ADD     A,R4
   \   0000C1   F9           MOV     R1,A
   \   0000C2   74..         MOV     A,#chs & 0xff
   \   0000C4   28           ADD     A,R0
   \   0000C5   F5..         MOV     ?V4,A
   \   0000C7   74..         MOV     A,#(chs >> 8) & 0xff
   \   0000C9   39           ADDC    A,R1
   \   0000CA   F5..         MOV     ?V5,A
   \   0000CC   78..         MOV     R0,#?V4
   \   0000CE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D1   8A..         MOV     ?V4,R2
   \   0000D3   8B..         MOV     ?V5,R3
   \   0000D5   78..         MOV     R0,#?V4
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DA   7C00         MOV     R4,#0x0
   \   0000DC   7D00         MOV     R5,#0x0
   \   0000DE   7A84         MOV     R2,#-0x7c
   \   0000E0   7B00         MOV     R3,#0x0
   \   0000E2   12....       LCALL   ??osal_nv_write?relay; Banked call to: osal_nv_write
   \   0000E5   7404         MOV     A,#0x4
   \   0000E7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EA   E9           MOV     A,R1
    472                zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions ); //标记网络状态发生改变
   \   0000EB                ; Setup parameters for call to function zb_WriteConfiguration
   \   0000EB   AC..         MOV     R4,?XSP + 0
   \   0000ED   AD..         MOV     R5,?XSP + 1
   \   0000EF   7A01         MOV     R2,#0x1
   \   0000F1   7903         MOV     R1,#0x3
   \   0000F3   12....       LCALL   ??zb_WriteConfiguration?relay; Banked call to: zb_WriteConfiguration
   \   0000F6   E9           MOV     A,R1
    473              }
    474            }
    475          }
   \                     ??SetChannel_0:
   \   0000F7   7405         MOV     A,#0x5
   \   0000F9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FC   7F08         MOV     R7,#0x8
   \   0000FE   02....       LJMP    ?BANKED_LEAVE_XDATA
    476          /*********************************************************************************************
    477          * 名称：GetLogicalType()
    478          * 功能：获取节点类型
    479          * 参数：
    480          * 返回：
    481          * 修改：
    482          * 注释：
    483          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    484          uint8 GetLogicalType(void)
   \                     GetLogicalType:
    485          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    486            uint8 st;
    487            zb_ReadConfiguration( ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &st );
   \   000009                ; Setup parameters for call to function zb_ReadConfiguration
   \   000009   AC..         MOV     R4,?XSP + 0
   \   00000B   AD..         MOV     R5,?XSP + 1
   \   00000D   7A01         MOV     R2,#0x1
   \   00000F   7987         MOV     R1,#-0x79
   \   000011   12....       LCALL   ??zb_ReadConfiguration?relay; Banked call to: zb_ReadConfiguration
   \   000014   E9           MOV     A,R1
    488            return st;
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   7401         MOV     A,#0x1
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000022   D083         POP     DPH
   \   000024   D082         POP     DPL
   \   000026   02....       LJMP    ?BRET
    489          }
    490          /*********************************************************************************************
    491          * 名称：SetLogicalType()
    492          * 功能：设置节点类型
    493          * 参数：
    494          * 返回：
    495          * 修改：
    496          * 注释：
    497          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    498          void SetLogicalType(uint8 t)
   \                     SetLogicalType:
    499          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
    500            uint8 st;
    501            uint8 startOptions = ZCD_STARTOPT_DEFAULT_NETWORK_STATE;
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   7402         MOV     A,#0x2
   \   00001D   F0           MOVX    @DPTR,A
    502            if (logicalType == ZG_DEVICETYPE_ROUTER || logicalType == ZG_DEVICETYPE_ENDDEVICE) {
   \   00001E   90....       MOV     DPTR,#logicalType
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6401         XRL     A,#0x1
   \   000024   6008         JZ      ??SetLogicalType_0
   \   000026   90....       MOV     DPTR,#logicalType
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6402         XRL     A,#0x2
   \   00002C   703E         JNZ     ??SetLogicalType_1
    503              st = GetLogicalType();
   \                     ??SetLogicalType_0:
   \   00002E                ; Setup parameters for call to function GetLogicalType
   \   00002E   12....       LCALL   ??GetLogicalType?relay; Banked call to: GetLogicalType
   \   000031   E9           MOV     A,R1
   \   000032   FE           MOV     R6,A
    504              if (t != st && (t==ZG_DEVICETYPE_ROUTER || t == ZG_DEVICETYPE_ENDDEVICE)) {
   \   000033   85..82       MOV     DPL,?XSP + 0
   \   000036   85..83       MOV     DPH,?XSP + 1
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6E           XRL     A,R6
   \   00003B   602F         JZ      ??SetLogicalType_1
   \   00003D   85..82       MOV     DPL,?XSP + 0
   \   000040   85..83       MOV     DPH,?XSP + 1
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6401         XRL     A,#0x1
   \   000046   600B         JZ      ??SetLogicalType_2
   \   000048   85..82       MOV     DPL,?XSP + 0
   \   00004B   85..83       MOV     DPH,?XSP + 1
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   6402         XRL     A,#0x2
   \   000051   7019         JNZ     ??SetLogicalType_1
    505                zb_WriteConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &t);
   \                     ??SetLogicalType_2:
   \   000053                ; Setup parameters for call to function zb_WriteConfiguration
   \   000053   AC..         MOV     R4,?XSP + 0
   \   000055   AD..         MOV     R5,?XSP + 1
   \   000057   7A01         MOV     R2,#0x1
   \   000059   7987         MOV     R1,#-0x79
   \   00005B   12....       LCALL   ??zb_WriteConfiguration?relay; Banked call to: zb_WriteConfiguration
   \   00005E   E9           MOV     A,R1
    506                zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions ); //标记网络状态发生改变
   \   00005F                ; Setup parameters for call to function zb_WriteConfiguration
   \   00005F   7401         MOV     A,#0x1
   \   000061   12....       LCALL   ?XSTACK_DISP102_8
   \   000064   7A01         MOV     R2,#0x1
   \   000066   7903         MOV     R1,#0x3
   \   000068   12....       LCALL   ??zb_WriteConfiguration?relay; Banked call to: zb_WriteConfiguration
   \   00006B   E9           MOV     A,R1
    507              } 
    508            }
    509          }
   \                     ??SetLogicalType_1:
   \   00006C   7402         MOV     A,#0x2
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000071   7F01         MOV     R7,#0x1
   \   000073   02....       LJMP    ?BANKED_LEAVE_XDATA
    510          /*********************************************************************************************
    511          * 名称：starReportTPN()
    512          * 功能：设置节点网络参数循环上报时间参数
    513          * 参数：
    514          * 返回：
    515          * 修改：
    516          * 注释：
    517          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    518          void starReportTPN(uint16 t, uint16 n)
   \                     starReportTPN:
    519          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
    520            _tm_report_delay = t;
   \   00000D   90....       MOV     DPTR,#_tm_report_delay
   \   000010   E5..         MOV     A,?V2
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   E5..         MOV     A,?V3
   \   000016   F0           MOVX    @DPTR,A
    521            _tm_report_cnt = n;
   \   000017   90....       MOV     DPTR,#_tm_report_cnt
   \   00001A   E5..         MOV     A,?V0
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   E5..         MOV     A,?V1
   \   000020   F0           MOVX    @DPTR,A
    522            if (_tm_report_cnt != 0) {
   \   000021   90....       MOV     DPTR,#_tm_report_cnt
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F8           MOV     R0,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   E8           MOV     A,R0
   \   00002A   49           ORL     A,R1
   \   00002B   605C         JZ      ??starReportTPN_0
    523              osal_start_timerEx( sapi_TaskID, __REPORT_EVT, (osal_rand()%_tm_report_delay) * (osal_rand()%1000));
   \   00002D                ; Setup parameters for call to function osal_rand
   \   00002D   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   000030   8A..         MOV     ?V4,R2
   \   000032   8B..         MOV     ?V5,R3
   \   000034   AE..         MOV     R6,?V4
   \   000036   AF..         MOV     R7,?V5
   \   000038                ; Setup parameters for call to function osal_rand
   \   000038   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   00003B   8A..         MOV     ?V4,R2
   \   00003D   8B..         MOV     ?V5,R3
   \   00003F   85....       MOV     ?V6,?V4
   \   000042   85....       MOV     ?V7,?V5
   \   000045                ; Setup parameters for call to function osal_start_timerEx
   \   000045   EE           MOV     A,R6
   \   000046   F8           MOV     R0,A
   \   000047   EF           MOV     A,R7
   \   000048   F9           MOV     R1,A
   \   000049   90....       MOV     DPTR,#_tm_report_delay
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   FA           MOV     R2,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   FB           MOV     R3,A
   \   000051   12....       LCALL   ?US_DIV_MOD
   \   000054   EA           MOV     A,R2
   \   000055   FC           MOV     R4,A
   \   000056   EB           MOV     A,R3
   \   000057   FD           MOV     R5,A
   \   000058   A8..         MOV     R0,?V6
   \   00005A   A9..         MOV     R1,?V7
   \   00005C   7AE8         MOV     R2,#-0x18
   \   00005E   7B03         MOV     R3,#0x3
   \   000060   12....       LCALL   ?US_DIV_MOD
   \   000063   8A..         MOV     ?V4,R2
   \   000065   8B..         MOV     ?V5,R3
   \   000067   EC           MOV     A,R4
   \   000068   85..F0       MOV     B,?V4
   \   00006B   A4           MUL     AB
   \   00006C   CC           XCH     A,R4
   \   00006D   A8F0         MOV     R0,B
   \   00006F   85..F0       MOV     B,?V5
   \   000072   A4           MUL     AB
   \   000073   28           ADD     A,R0
   \   000074   F8           MOV     R0,A
   \   000075   85..F0       MOV     B,?V4
   \   000078   ED           MOV     A,R5
   \   000079   A4           MUL     AB
   \   00007A   28           ADD     A,R0
   \   00007B   FD           MOV     R5,A
   \   00007C   7A20         MOV     R2,#0x20
   \   00007E   7B00         MOV     R3,#0x0
   \   000080   90....       MOV     DPTR,#sapi_TaskID
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F9           MOV     R1,A
   \   000085   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   000088   E9           MOV     A,R1
    524            }
    525          }
   \                     ??starReportTPN_0:
   \   000089   7F08         MOV     R7,#0x8
   \   00008B   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for chs>`:
   \   000000   00080000     DD 2048
   \   000004   00100000     DD 4096
   \   000008   00200000     DD 8192
   \   00000C   00400000     DD 16384
   \   000010   00800000     DD 32768
   \   000014   00000100     DD 65536
   \   000018   00000200     DD 131072
   \   00001C   00000400     DD 262144
   \   000020   00000800     DD 524288
   \   000024   00001000     DD 1048576
   \   000028   00002000     DD 2097152
   \   00002C   00004000     DD 4194304
   \   000030   00008000     DD 8388608
   \   000034   00000001     DD 16777216
   \   000038   00000002     DD 33554432
   \   00003C   00000004     DD 67108864

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??myReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    myReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_get_at_event?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _get_at_event

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_HandleOsalEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleOsalEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_StartConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_SendDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SendDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_BindConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_AllowBindConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_FindDeviceConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_HanderMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HanderMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_ReceiveDataIndication?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReceiveDataIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??my_report_proc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    my_report_proc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??read_nb?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    read_nb

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetCurrentLogicalType?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetCurrentLogicalType

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetLinkStatus?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetLinkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetPanId?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetPanId

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SetPanId?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SetPanId

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetChannel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetChannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SetChannel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SetChannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetLogicalType?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetLogicalType

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SetLogicalType?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SetLogicalType

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??starReportTPN?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    starReportTPN

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%02X%02X">`:
   \   000000   25303258     DB "%02X%02X"
   \            25303258
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "PN">`:
   \   000000   504E00       DB "PN"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+TYPE?\\r\\n">`:
   \   000000   41542B54     DB "AT+TYPE?\015\012"
   \            5950453F
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\000\\000\\000\\000\\000\\000\\000\\000">`:
   \   000000   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000008   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_10:
   \   000000   10000000     DD 16

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     20   GetChannel
        0     20   -> osal_nv_read
      2      0   GetCurrentLogicalType
      2      0   GetLinkStatus
      2     12   GetLogicalType
        2      1   -> zb_ReadConfiguration
      0     31   GetPanId
        0     16   -> osal_nv_read
      0     25   SetChannel
        0     21   -> osal_nv_item_len
        0     25   -> osal_nv_read
        0     25   -> osal_nv_write
        0     21   -> zb_WriteConfiguration
      1     11   SetLogicalType
        0     11   -> GetLogicalType
        0     11   -> zb_WriteConfiguration
      0     19   SetPanId
        0     15   -> GetPanId
        0     15   -> osal_nv_item_len
        0     19   -> osal_nv_write
        0     15   -> zb_WriteConfiguration
      0      0   _get_at_event
      0     12   myReset
      0     34   my_report_proc
        0     18   -> NLME_GetCoordExtAddr
        0     18   -> ZXBeeAdd
        0     18   -> ZXBeeBegin
        0     18   -> ZXBeeEnd
        0     18   -> ZXBeeInfSend
        0     18   -> at_notify_data
        0     18   -> read_nb
        0     22   -> sprintf
        0     18   -> strlen
      0     40   read_nb
        0     20   -> memcmp
        0     22   -> sprintf
        0     18   -> strlen
      0     16   starReportTPN
        0     16   -> osal_rand
        0     16   -> osal_start_timerEx
      0      0   zb_AllowBindConfirm
      0      0   zb_BindConfirm
      0      0   zb_FindDeviceConfirm
      0      0   zb_HanderMsg
      0      0   zb_HandleKeys
      2     16   zb_HandleOsalEvent
        0     12   -> HalLedSet
        0     12   -> ZXBeeInfInit
        0     12   -> at_init
        0     12   -> at_proc
        0     12   -> myReset
        0     12   -> my_report_proc
        0     16   -> osal_nv_read
        0     12   -> osal_start_timerEx
        0     12   -> zb_ReadConfiguration
        0     12   -> zb_SystemReset
        0     12   -> zb_WriteConfiguration
      0     22   zb_ReceiveDataIndication
        0     18   -> HalLedSet
        0     18   -> NLME_GetCoordShortAddr
        0     18   -> ZXBeeInfRecv
        0     18   -> at_notify_data
      0      9   zb_SendDataConfirm
        0      9   -> ZXBeeSendConfirm
      0      9   zb_StartConfirm
        0      9   -> AT_reportedLinkStatus
        0      9   -> HalLedSet


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       9  ?<Constant "%02X%02X">
      11  ?<Constant "AT+TYPE?\r\n">
       3  ?<Constant "PN">
       9  ?<Constant "\000\000\000\000\000\000\000\000">
      64  ?<Initializer for chs>
       6  ??GetChannel?relay
       6  ??GetCurrentLogicalType?relay
       6  ??GetLinkStatus?relay
       6  ??GetLogicalType?relay
       6  ??GetPanId?relay
       6  ??SetChannel?relay
       6  ??SetLogicalType?relay
       6  ??SetPanId?relay
       6  ??_get_at_event?relay
       6  ??myReset?relay
       6  ??my_report_proc?relay
       6  ??read_nb?relay
       6  ??starReportTPN?relay
       6  ??zb_AllowBindConfirm?relay
       6  ??zb_BindConfirm?relay
       6  ??zb_FindDeviceConfirm?relay
       6  ??zb_HanderMsg?relay
       6  ??zb_HandleKeys?relay
       6  ??zb_HandleOsalEvent?relay
       6  ??zb_ReceiveDataIndication?relay
       6  ??zb_SendDataConfirm?relay
       6  ??zb_StartConfirm?relay
     131  GetChannel
      16  GetCurrentLogicalType
      16  GetLinkStatus
      41  GetLogicalType
      72  GetPanId
     257  SetChannel
     118  SetLogicalType
     129  SetPanId
       1  WDCTL
       1  _A_IEN0
       4  __Constant_10
       5  _get_at_event
       2  _tm_report_cnt
       2  _tm_report_delay
       2  at_tick
      64  chs
       1  logicalType
       1  mLinkStatus
      10  myReset
     170  my_report_proc
       2  panid
     291  read_nb
     142  starReportTPN
       2  tick
      96  wbuf
       3  zb_AllowBindConfirm
       3  zb_BindConfirm
       3  zb_FindDeviceConfirm
       3  zb_HanderMsg
       3  zb_HandleKeys
     441  zb_HandleOsalEvent
       4  zb_InCmdList
       4  zb_OutCmdList
     120  zb_ReceiveDataIndication
      21  zb_SendDataConfirm
      12  zb_SimpleDesc
      32  zb_StartConfirm

 
 2 027 bytes in segment BANKED_CODE
   132 bytes in segment BANK_RELAYS
     2 bytes in segment SFR_AN
    64 bytes in segment XDATA_I
    64 bytes in segment XDATA_ID
    56 bytes in segment XDATA_ROM_C
   108 bytes in segment XDATA_Z
 
 2 223 bytes of CODE  memory
    52 bytes of CONST memory (+ 4 bytes shared)
     0 bytes of DATA  memory (+ 2 bytes shared)
   172 bytes of XDATA memory

Errors: none
Warnings: none
