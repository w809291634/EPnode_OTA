###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:44
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\stack\zdo\ZDConfig.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\stack\zdo\ZDConfig.c"
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        XLAB -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\ZDConfig.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\ZDConfig.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\stack\zdo\ZDConfig.c
      1          /**************************************************************************************************
      2            Filename:       ZDConfig.c
      3            Revised:        $Date: 2008-02-12 16:32:50 -0800 (Tue, 12 Feb 2008) $
      4            Revision:       $Revision: 16393 $
      5          
      6          
      7            Description:    This file contains the configuration attributes for the Zigbee Device Object.
      8                            These are references to Configuration items that MUST be defined in ZDApp.c.
      9                            The names mustn't change.
     10          
     11          
     12            Copyright 2004-2007 Texas Instruments Incorporated. All rights reserved.
     13          
     14            IMPORTANT: Your use of this Software is limited to those specific rights
     15            granted under the terms of a software license agreement between the user
     16            who downloaded the software, his/her employer (which must be your employer)
     17            and Texas Instruments Incorporated (the "License").  You may not use this
     18            Software unless you agree to abide by the terms of the License. The License
     19            limits your use, and you acknowledge, that the Software may not be modified,
     20            copied or distributed unless embedded on a Texas Instruments microcontroller
     21            or used solely and exclusively in conjunction with a Texas Instruments radio
     22            frequency transceiver, which is integrated into your product.  Other than for
     23            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     24            works of, modify, distribute, perform, display or sell this Software and/or
     25            its documentation for any purpose.
     26          
     27            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     28            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
     29            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     30            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     31            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     32            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     33            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     34            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     35            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     36            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     37            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     38          
     39            Should you have any questions regarding your right to use this Software,
     40            contact Texas Instruments Incorporated at www.TI.com. 
     41          **************************************************************************************************/
     42          
     43          /*********************************************************************
     44           * INCLUDES
     45           */
     46          #include "ZComdef.h"
     47          #include "AF.h"
     48          #include "ZDObject.h"
     49          #include "ZDConfig.h"
     50          
     51           /*********************************************************************
     52           * MACROS
     53           */
     54          
     55          /*********************************************************************
     56           * CONSTANTS
     57           */
     58          
     59          /*********************************************************************
     60           * TYPEDEFS
     61           */
     62          
     63          /*********************************************************************
     64           * GLOBAL VARIABLES
     65           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     66          NodeDescriptorFormat_t ZDO_Config_Node_Descriptor;
   \                     ZDO_Config_Node_Descriptor:
   \   000000                DS 13
   \   00000D                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     67          NodePowerDescriptorFormat_t ZDO_Config_Power_Descriptor;
   \                     ZDO_Config_Power_Descriptor:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     68          
     69          /*********************************************************************
     70           * EXTERNAL VARIABLES
     71           */
     72          
     73          /*********************************************************************
     74           * EXTERNAL FUNCTIONS
     75           */
     76          
     77          /*********************************************************************
     78           * LOCAL FUNCTIONS
     79           */
     80          
     81          /*********************************************************************
     82           * LOCAL VARIABLES
     83           */
     84          
     85          /*********************************************************************
     86           * @fn      ZDConfig_InitDescriptors()
     87           *
     88           * @brief   Setup the ZDO descriptors 
     89           *             Node, Power
     90           *
     91           * @param   none
     92           *
     93           * @return  none
     94           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     95          void ZDConfig_InitDescriptors( void )
   \                     ZDConfig_InitDescriptors:
     96          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     97            ZDConfig_UpdateNodeDescriptor();
   \   000004                ; Setup parameters for call to function ZDConfig_UpdateNodeDescriptor
   \   000004   12....       LCALL   ??ZDConfig_UpdateNodeDescriptor?relay; Banked call to: ZDConfig_UpdateNodeDescriptor
     98            ZDConfig_UpdatePowerDescriptor();
   \   000007                ; Setup parameters for call to function ZDConfig_UpdatePowerDescriptor
   \   000007   12....       LCALL   ??ZDConfig_UpdatePowerDescriptor?relay; Banked call to: ZDConfig_UpdatePowerDescriptor
     99          }
   \   00000A   D083         POP     DPH
   \   00000C   D082         POP     DPL
   \   00000E   02....       LJMP    ?BRET
    100          
    101          /*********************************************************************
    102           * @fn      ZDConfig_UpdateNodeDescriptor()
    103           *
    104           * @brief   Update the ZDO Node Descriptor 
    105           *
    106           * @param   none
    107           *
    108           * @return  none
    109           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    110          void ZDConfig_UpdateNodeDescriptor( void )
   \                     ZDConfig_UpdateNodeDescriptor:
    111          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    112            // Build the Node Descriptor
    113            if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7009         JNZ     ??ZDConfig_UpdateNodeDescriptor_0
    114              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   00000A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   54F8         ANL     A,#0xf8
   \   000010   F0           MOVX    @DPTR,A
   \   000011   8030         SJMP    ??ZDConfig_UpdateNodeDescriptor_1
    115            else if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDConfig_UpdateNodeDescriptor_0:
   \   000013   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6008         JZ      ??ZDConfig_UpdateNodeDescriptor_2
   \   000019   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   700E         JNZ     ??ZDConfig_UpdateNodeDescriptor_3
    116              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \                     ??ZDConfig_UpdateNodeDescriptor_2:
   \   000021   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000024   E0           MOVX    A,@DPTR
   \   000025   54F8         ANL     A,#0xf8
   \   000027   4401         ORL     A,#0x1
   \   000029   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   8014         SJMP    ??ZDConfig_UpdateNodeDescriptor_1
    117            else if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDConfig_UpdateNodeDescriptor_3:
   \   00002F   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000032   E0           MOVX    A,@DPTR
   \   000033   6402         XRL     A,#0x2
   \   000035   700C         JNZ     ??ZDConfig_UpdateNodeDescriptor_1
    118              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000037   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   54F8         ANL     A,#0xf8
   \   00003D   4402         ORL     A,#0x2
   \   00003F   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000042   F0           MOVX    @DPTR,A
    119            
    120            ZDO_Config_Node_Descriptor.ComplexDescAvail = FALSE;      // set elsewhere
   \                     ??ZDConfig_UpdateNodeDescriptor_1:
   \   000043   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000046   E0           MOVX    A,@DPTR
   \   000047   C2E3         CLR     0xE0 /* A   */.3
   \   000049   F0           MOVX    @DPTR,A
    121            ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;         // set elsewhere
   \   00004A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   C2E4         CLR     0xE0 /* A   */.4
   \   000050   F0           MOVX    @DPTR,A
    122            ZDO_Config_Node_Descriptor.Reserved = 0;                  // Reserved
   \   000051   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000054   E0           MOVX    A,@DPTR
   \   000055   541F         ANL     A,#0x1f
   \   000057   F0           MOVX    @DPTR,A
    123            ZDO_Config_Node_Descriptor.APSFlags = 0;                  // NO APS flags
   \   000058   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 1
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   54F8         ANL     A,#0xf8
   \   00005E   F0           MOVX    @DPTR,A
    124            ZDO_Config_Node_Descriptor.FrequencyBand = NODEFREQ_2400; // Frequency Band
   \   00005F   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 1
   \   000062   E0           MOVX    A,@DPTR
   \   000063   5407         ANL     A,#0x7
   \   000065   4440         ORL     A,#0x40
   \   000067   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 1
   \   00006A   F0           MOVX    @DPTR,A
    125            
    126            // MAC Capabilities
    127            if ( ZSTACK_ROUTER_BUILD )
   \   00006B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   6008         JZ      ??ZDConfig_UpdateNodeDescriptor_4
   \   000071   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000074   E0           MOVX    A,@DPTR
   \   000075   6401         XRL     A,#0x1
   \   000077   7015         JNZ     ??ZDConfig_UpdateNodeDescriptor_5
    128            {
    129              ZDO_Config_Node_Descriptor.CapabilityFlags 
    130                        = (CAPINFO_DEVICETYPE_FFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE);
   \                     ??ZDConfig_UpdateNodeDescriptor_4:
   \   000079   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00007C   740E         MOV     A,#0xe
   \   00007E   F0           MOVX    @DPTR,A
    131              
    132              if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   \   00007F   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000082   E0           MOVX    A,@DPTR
   \   000083   7017         JNZ     ??ZDConfig_UpdateNodeDescriptor_6
    133                ZDO_Config_Node_Descriptor.CapabilityFlags |= CAPINFO_ALTPANCOORD;
   \   000085   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000088   E0           MOVX    A,@DPTR
   \   000089   D2E0         SETB    0xE0 /* A   */.0
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   800E         SJMP    ??ZDConfig_UpdateNodeDescriptor_6
    134            }
    135            else if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDConfig_UpdateNodeDescriptor_5:
   \   00008E   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000091   E0           MOVX    A,@DPTR
   \   000092   6402         XRL     A,#0x2
   \   000094   7006         JNZ     ??ZDConfig_UpdateNodeDescriptor_6
    136            {
    137              ZDO_Config_Node_Descriptor.CapabilityFlags = (CAPINFO_DEVICETYPE_RFD
    138            #if ( RFD_RCVC_ALWAYS_ON == TRUE)
    139                      | CAPINFO_RCVR_ON_IDLE
    140            #endif
    141                  );
   \   000096   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000099   7408         MOV     A,#0x8
   \   00009B   F0           MOVX    @DPTR,A
    142            }
    143            
    144            // Manufacturer Code - *YOU FILL IN*
    145            ZDO_Config_Node_Descriptor.ManufacturerCode[0] = 0;
   \                     ??ZDConfig_UpdateNodeDescriptor_6:
   \   00009C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 3
   \   00009F   7400         MOV     A,#0x0
   \   0000A1   F0           MOVX    @DPTR,A
    146            ZDO_Config_Node_Descriptor.ManufacturerCode[1] = 0;
   \   0000A2   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 4
   \   0000A5   7400         MOV     A,#0x0
   \   0000A7   F0           MOVX    @DPTR,A
    147            
    148            // Maximum Buffer Size
    149            ZDO_Config_Node_Descriptor.MaxBufferSize = MAX_BUFFER_SIZE;
   \   0000A8   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 5
   \   0000AB   7450         MOV     A,#0x50
   \   0000AD   F0           MOVX    @DPTR,A
    150          
    151            // Maximum Incoming Transfer Size Field
    152            ZDO_Config_Node_Descriptor.MaxInTransferSize[0] = LO_UINT16( MAX_TRANSFER_SIZE );
   \   0000AE   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 6
   \   0000B1   74A0         MOV     A,#-0x60
   \   0000B3   F0           MOVX    @DPTR,A
    153            ZDO_Config_Node_Descriptor.MaxInTransferSize[1] = HI_UINT16( MAX_TRANSFER_SIZE );
   \   0000B4   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 7
   \   0000B7   7400         MOV     A,#0x0
   \   0000B9   F0           MOVX    @DPTR,A
    154            
    155            // Maximum Outgoing Transfer Size Field
    156            ZDO_Config_Node_Descriptor.MaxOutTransferSize[0] = LO_UINT16( MAX_TRANSFER_SIZE );
   \   0000BA   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 10
   \   0000BD   74A0         MOV     A,#-0x60
   \   0000BF   F0           MOVX    @DPTR,A
    157            ZDO_Config_Node_Descriptor.MaxOutTransferSize[1] = HI_UINT16( MAX_TRANSFER_SIZE );
   \   0000C0   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 11
   \   0000C3   7400         MOV     A,#0x0
   \   0000C5   F0           MOVX    @DPTR,A
    158            
    159            // Server Mask
    160            ZDO_Config_Node_Descriptor.ServerMask = 0;
   \   0000C6   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   0000C9   7400         MOV     A,#0x0
   \   0000CB   F0           MOVX    @DPTR,A
   \   0000CC   A3           INC     DPTR
   \   0000CD   7400         MOV     A,#0x0
   \   0000CF   F0           MOVX    @DPTR,A
    161            
    162            // Descriptor Capability Field - extended active endpoint list and 
    163            // extended simple descriptor are not supported.
    164            ZDO_Config_Node_Descriptor.DescriptorCapability = 0;
   \   0000D0   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 12
   \   0000D3   7400         MOV     A,#0x0
   \   0000D5   F0           MOVX    @DPTR,A
    165          }
   \   0000D6   D083         POP     DPH
   \   0000D8   D082         POP     DPL
   \   0000DA   02....       LJMP    ?BRET
    166          
    167          /*********************************************************************
    168           * @fn      ZDConfig_UpdatePowerDescriptor()
    169           *
    170           * @brief   Update the ZDO Power Descriptor 
    171           *
    172           * @param   none
    173           *
    174           * @return  none
    175           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    176          void ZDConfig_UpdatePowerDescriptor( void )
   \                     ZDConfig_UpdatePowerDescriptor:
    177          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    178            // Build the Power Descriptor  
    179            if ( ZSTACK_ROUTER_BUILD )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6008         JZ      ??ZDConfig_UpdatePowerDescriptor_0
   \   00000A   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6401         XRL     A,#0x1
   \   000010   7063         JNZ     ??ZDConfig_UpdatePowerDescriptor_1
    180            {
    181              ZDO_Config_Power_Descriptor.PowerMode = NODECURPWR_RCVR_ALWAYS_ON;
   \                     ??ZDConfig_UpdatePowerDescriptor_0:
   \   000012   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   000015   E0           MOVX    A,@DPTR
   \   000016   54F0         ANL     A,#0xf0
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   54FF         ANL     A,#0xff
   \   00001D   F0           MOVX    @DPTR,A
    182              ZDO_Config_Power_Descriptor.AvailablePowerSources = NODEAVAILPWR_MAINS;
   \   00001E   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   000021   E0           MOVX    A,@DPTR
   \   000022   540F         ANL     A,#0xf
   \   000024   F8           MOV     R0,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   54FF         ANL     A,#0xff
   \   000029   F9           MOV     R1,A
   \   00002A   E8           MOV     A,R0
   \   00002B   4410         ORL     A,#0x10
   \   00002D   F8           MOV     R0,A
   \   00002E   E9           MOV     A,R1
   \   00002F   4400         ORL     A,#0x0
   \   000031   F9           MOV     R1,A
   \   000032   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   000035   E8           MOV     A,R0
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   E9           MOV     A,R1
   \   000039   F0           MOVX    @DPTR,A
    183              ZDO_Config_Power_Descriptor.CurrentPowerSource = NODEAVAILPWR_MAINS;
   \   00003A   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   54FF         ANL     A,#0xff
   \   000040   F8           MOV     R0,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   54F0         ANL     A,#0xf0
   \   000045   F9           MOV     R1,A
   \   000046   E8           MOV     A,R0
   \   000047   4400         ORL     A,#0x0
   \   000049   F8           MOV     R0,A
   \   00004A   E9           MOV     A,R1
   \   00004B   4401         ORL     A,#0x1
   \   00004D   F9           MOV     R1,A
   \   00004E   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   000051   E8           MOV     A,R0
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   E9           MOV     A,R1
   \   000055   F0           MOVX    @DPTR,A
    184              ZDO_Config_Power_Descriptor.CurrentPowerSourceLevel = NODEPOWER_LEVEL_100;
   \   000056   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   54FF         ANL     A,#0xff
   \   00005C   F8           MOV     R0,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   540F         ANL     A,#0xf
   \   000061   F9           MOV     R1,A
   \   000062   E8           MOV     A,R0
   \   000063   4400         ORL     A,#0x0
   \   000065   F8           MOV     R0,A
   \   000066   E9           MOV     A,R1
   \   000067   44C0         ORL     A,#0xc0
   \   000069   F9           MOV     R1,A
   \   00006A   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   00006D   E8           MOV     A,R0
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   E9           MOV     A,R1
   \   000071   F0           MOVX    @DPTR,A
   \   000072   02....       LJMP    ??ZDConfig_UpdatePowerDescriptor_2 & 0xFFFF
    185            }
    186            else if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDConfig_UpdatePowerDescriptor_1:
   \   000075   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000078   E0           MOVX    A,@DPTR
   \   000079   6402         XRL     A,#0x2
   \   00007B   6003         JZ      $+5
   \   00007D   02....       LJMP    ??ZDConfig_UpdatePowerDescriptor_2 & 0xFFFF
    187            {
    188              if ( zgPollRate )
   \   000080   90....       MOV     DPTR,#zgPollRate
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F8           MOV     R0,A
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F9           MOV     R1,A
   \   000088   E8           MOV     A,R0
   \   000089   49           ORL     A,R1
   \   00008A   601E         JZ      ??ZDConfig_UpdatePowerDescriptor_3
    189                ZDO_Config_Power_Descriptor.PowerMode = NODECURPWR_RCVR_AUTO;
   \   00008C   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   54F0         ANL     A,#0xf0
   \   000092   F8           MOV     R0,A
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   54FF         ANL     A,#0xff
   \   000097   F9           MOV     R1,A
   \   000098   E8           MOV     A,R0
   \   000099   4401         ORL     A,#0x1
   \   00009B   F8           MOV     R0,A
   \   00009C   E9           MOV     A,R1
   \   00009D   4400         ORL     A,#0x0
   \   00009F   F9           MOV     R1,A
   \   0000A0   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   0000A3   E8           MOV     A,R0
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E9           MOV     A,R1
   \   0000A7   F0           MOVX    @DPTR,A
   \   0000A8   801C         SJMP    ??ZDConfig_UpdatePowerDescriptor_4
    190              else
    191                ZDO_Config_Power_Descriptor.PowerMode = NODECURPWR_RCVR_STIM;
   \                     ??ZDConfig_UpdatePowerDescriptor_3:
   \   0000AA   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   54F0         ANL     A,#0xf0
   \   0000B0   F8           MOV     R0,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   54FF         ANL     A,#0xff
   \   0000B5   F9           MOV     R1,A
   \   0000B6   E8           MOV     A,R0
   \   0000B7   4402         ORL     A,#0x2
   \   0000B9   F8           MOV     R0,A
   \   0000BA   E9           MOV     A,R1
   \   0000BB   4400         ORL     A,#0x0
   \   0000BD   F9           MOV     R1,A
   \   0000BE   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   0000C1   E8           MOV     A,R0
   \   0000C2   F0           MOVX    @DPTR,A
   \   0000C3   A3           INC     DPTR
   \   0000C4   E9           MOV     A,R1
   \   0000C5   F0           MOVX    @DPTR,A
    192                
    193              ZDO_Config_Power_Descriptor.AvailablePowerSources = NODEAVAILPWR_RECHARGE;
   \                     ??ZDConfig_UpdatePowerDescriptor_4:
   \   0000C6   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   540F         ANL     A,#0xf
   \   0000CC   F8           MOV     R0,A
   \   0000CD   A3           INC     DPTR
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   54FF         ANL     A,#0xff
   \   0000D1   F9           MOV     R1,A
   \   0000D2   E8           MOV     A,R0
   \   0000D3   4420         ORL     A,#0x20
   \   0000D5   F8           MOV     R0,A
   \   0000D6   E9           MOV     A,R1
   \   0000D7   4400         ORL     A,#0x0
   \   0000D9   F9           MOV     R1,A
   \   0000DA   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   0000DD   E8           MOV     A,R0
   \   0000DE   F0           MOVX    @DPTR,A
   \   0000DF   A3           INC     DPTR
   \   0000E0   E9           MOV     A,R1
   \   0000E1   F0           MOVX    @DPTR,A
    194              ZDO_Config_Power_Descriptor.CurrentPowerSource = NODEAVAILPWR_RECHARGE;
   \   0000E2   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   54FF         ANL     A,#0xff
   \   0000E8   F8           MOV     R0,A
   \   0000E9   A3           INC     DPTR
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   54F0         ANL     A,#0xf0
   \   0000ED   F9           MOV     R1,A
   \   0000EE   E8           MOV     A,R0
   \   0000EF   4400         ORL     A,#0x0
   \   0000F1   F8           MOV     R0,A
   \   0000F2   E9           MOV     A,R1
   \   0000F3   4402         ORL     A,#0x2
   \   0000F5   F9           MOV     R1,A
   \   0000F6   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   0000F9   E8           MOV     A,R0
   \   0000FA   F0           MOVX    @DPTR,A
   \   0000FB   A3           INC     DPTR
   \   0000FC   E9           MOV     A,R1
   \   0000FD   F0           MOVX    @DPTR,A
    195              ZDO_Config_Power_Descriptor.CurrentPowerSourceLevel = NODEPOWER_LEVEL_66;
   \   0000FE   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   000101   E0           MOVX    A,@DPTR
   \   000102   54FF         ANL     A,#0xff
   \   000104   F8           MOV     R0,A
   \   000105   A3           INC     DPTR
   \   000106   E0           MOVX    A,@DPTR
   \   000107   540F         ANL     A,#0xf
   \   000109   F9           MOV     R1,A
   \   00010A   E8           MOV     A,R0
   \   00010B   4400         ORL     A,#0x0
   \   00010D   F8           MOV     R0,A
   \   00010E   E9           MOV     A,R1
   \   00010F   4480         ORL     A,#0x80
   \   000111   F9           MOV     R1,A
   \   000112   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   000115   E8           MOV     A,R0
   \   000116   F0           MOVX    @DPTR,A
   \   000117   A3           INC     DPTR
   \   000118   E9           MOV     A,R1
   \   000119   F0           MOVX    @DPTR,A
    196            }
    197          }
   \                     ??ZDConfig_UpdatePowerDescriptor_2:
   \   00011A   D083         POP     DPH
   \   00011C   D082         POP     DPL
   \   00011E   02....       LJMP    ?BRET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDConfig_InitDescriptors?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDConfig_InitDescriptors

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDConfig_UpdateNodeDescriptor?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDConfig_UpdateNodeDescriptor

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDConfig_UpdatePowerDescriptor?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDConfig_UpdatePowerDescriptor
    198          
    199          /*********************************************************************
    200          *********************************************************************/
    201          
    202          

   Maximum stack usage in bytes:

   ISTACK Function
   ------ --------
      2   ZDConfig_InitDescriptors
        2   -> ZDConfig_UpdateNodeDescriptor
        2   -> ZDConfig_UpdatePowerDescriptor
      2   ZDConfig_UpdateNodeDescriptor
      2   ZDConfig_UpdatePowerDescriptor


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??ZDConfig_InitDescriptors?relay
       6  ??ZDConfig_UpdateNodeDescriptor?relay
       6  ??ZDConfig_UpdatePowerDescriptor?relay
      17  ZDConfig_InitDescriptors
     221  ZDConfig_UpdateNodeDescriptor
     289  ZDConfig_UpdatePowerDescriptor
      13  ZDO_Config_Node_Descriptor
       2  ZDO_Config_Power_Descriptor

 
 527 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
  15 bytes in segment XDATA_Z
 
 545 bytes of CODE  memory
  15 bytes of XDATA memory

Errors: none
Warnings: none
