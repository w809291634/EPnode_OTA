###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:38
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mac\low_level\srf04\mac_autopend.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mac\low_level\srf04\mac_autopend.c"
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        XLAB -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\mac_autopend.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\mac_autopend.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mac\low_level\srf04\mac_autopend.c
      1          /**************************************************************************************************
      2            Filename:       mac_autopend.c
      3            Revised:        $Date: 2009-08-28 09:29:33 -0700 (Fri, 28 Aug 2009) $
      4            Revision:       $Revision: 20674 $
      5          
      6            Description:    This file implements the TIMAC Autopend feature.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* low-level */
     41          #include "mac_api.h"
     42          #include "mac_radio_defs.h"
     43          
     44          /* osal */
     45          #include "OSAL.h"
     46          #include "saddr.h"
     47          #include "ZComDef.h"
     48          
     49          #include "mac_autopend.h"
     50          
     51          /* ------------------------------------------------------------------------------------------------
     52           *                                           Defines
     53           * ------------------------------------------------------------------------------------------------
     54           */
     55          #define MAC_SRCMATCH_INVALID_INDEX           0xFF
     56          
     57          #define MAC_SRCMATCH_SHORT_ENTRY_SIZE        4
     58          #define MAC_SRCMATCH_EXT_ENTRY_SIZE          Z_EXTADDR_LEN
     59          
     60          #define MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES   24
     61          #define MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES     12
     62          
     63          #define MAC_SRCMATCH_ENABLE_BITMAP_LEN       3
     64                    
     65          /* ------------------------------------------------------------------------------------------------
     66           *                                      Global Variables
     67           * ------------------------------------------------------------------------------------------------
     68           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     69          bool macSrcMatchIsEnabled = FALSE; 
   \                     macSrcMatchIsEnabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     70          
     71          /* ------------------------------------------------------------------------------------------------
     72           *                                         Local Variables
     73           * ------------------------------------------------------------------------------------------------
     74           */
     75          
     76          /* 
     77           The following local Varables are only set in MAC_SrcMatchEnable()  
     78           They are read only to the rest of the module.
     79           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     80          uint8 macSrcMatchMaxNumEntries = 0;   
   \                     macSrcMatchMaxNumEntries:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
     81          uint8 macSrcMatchAddrMode = SADDR_MODE_SHORT;  
   \                     macSrcMatchAddrMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for macSrcMatchAddrMode>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     82          bool macSrcMatchIsAckAllPending = FALSE;
   \                     macSrcMatchIsAckAllPending:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     83          
     84          /* ------------------------------------------------------------------------------------------------
     85           *                                         Local Functions
     86           * ------------------------------------------------------------------------------------------------
     87           */
     88          static uint8 macSrcMatchFindEmptyEntry( void );
     89          static uint8 macSrcMatchCheckSrcAddr ( sAddr_t *addr, uint16 panID  );
     90          static void macSrcMatchSetPendEnBit( uint8 index );
     91          static void macSrcMatchSetEnableBit( uint8 index, bool option );
     92          static bool macSrcMatchCheckEnableBit( uint8 index );
     93          static uint24 macSrcMatchGetEnableBit( void );
     94          static uint24 macSrcMatchGetPendEnBit( void );
     95          
     96          /*********************************************************************
     97           * @fn          MAC_SrcMatchEnable
     98           *
     99           * @brief      Enabled AUTOPEND and source address matching. If number of source
    100           *             address table entries asked for is more than the hardware
    101           *             supports. It will allocate maximum number of entries and return 
    102           *             MAC_INVALID_PARAMETER. This function shall be not be called from 
    103           *             ISR. It is not thread safe.
    104           *
    105           * @param      addressType - address type that the application uses
    106           *                           SADDR_MODE_SHORT or SADDR_MODE_EXT
    107           * @param      num - number of source address table entries to be used
    108           *
    109           * @return     MAC_SUCCESS or MAC_INVALID_PARAMETER
    110           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    111          uint8 MAC_SrcMatchEnable ( uint8 addrType, uint8 num  )
   \                     MAC_SrcMatchEnable:
    112          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FB           MOV     R3,A
    113            uint8 rtn;
    114            uint8 maxNum;
    115              
    116            /* Verify the address type */
    117            if( addrType != SADDR_MODE_SHORT && addrType != SADDR_MODE_EXT )
   \   000006   7402         MOV     A,#0x2
   \   000008   6B           XRL     A,R3
   \   000009   6009         JZ      ??MAC_SrcMatchEnable_0
   \   00000B   7403         MOV     A,#0x3
   \   00000D   6B           XRL     A,R3
   \   00000E   6004         JZ      ??MAC_SrcMatchEnable_0
    118            {
    119              return MAC_INVALID_PARAMETER;
   \   000010   79E8         MOV     R1,#-0x18
   \   000012   804D         SJMP    ??MAC_SrcMatchEnable_1
    120            }
    121            
    122            maxNum = ( addrType == SADDR_MODE_SHORT ) ? 
    123                     MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES : MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES;
   \                     ??MAC_SrcMatchEnable_0:
   \   000014   7402         MOV     A,#0x2
   \   000016   6B           XRL     A,R3
   \   000017   7004         JNZ     ??MAC_SrcMatchEnable_2
   \   000019   7418         MOV     A,#0x18
   \   00001B   8002         SJMP    ??MAC_SrcMatchEnable_3
   \                     ??MAC_SrcMatchEnable_2:
   \   00001D   740C         MOV     A,#0xc
   \                     ??MAC_SrcMatchEnable_3:
   \   00001F   FC           MOV     R4,A
    124                     
    125            if( num > maxNum )
   \   000020   EC           MOV     A,R4
   \   000021   C3           CLR     C
   \   000022   9A           SUBB    A,R2
   \   000023   5006         JNC     ??MAC_SrcMatchEnable_4
    126            {
    127              rtn = MAC_INVALID_PARAMETER;
   \   000025   78E8         MOV     R0,#-0x18
    128              num = maxNum;
   \   000027   EC           MOV     A,R4
   \   000028   FA           MOV     R2,A
   \   000029   8002         SJMP    ??MAC_SrcMatchEnable_5
    129            }
    130            else
    131            {
    132              rtn = MAC_SUCCESS;
   \                     ??MAC_SrcMatchEnable_4:
   \   00002B   7800         MOV     R0,#0x0
    133            }
    134              
    135            /* Turn on Frame Filter (TIMAC enables frame filter by default), TBD */
    136            MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
   \                     ??MAC_SrcMatchEnable_5:
   \   00002D   906180       MOV     DPTR,#0x6180
   \   000030   7400         MOV     A,#0x0
   \   000032   F0           MOVX    @DPTR,A
   \   000033   906180       MOV     DPTR,#0x6180
   \   000036   E0           MOVX    A,@DPTR
   \   000037   4405         ORL     A,#0x5
   \   000039   F0           MOVX    @DPTR,A
    137            
    138            /* Turn on Auto ACK (TIMAC turn on Auto ACK by default), TBD */
    139            MAC_RADIO_TURN_ON_AUTO_ACK();
   \   00003A   906189       MOV     DPTR,#0x6189
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   D2E5         SETB    0xE0 /* A   */.5
   \   000040   F0           MOVX    @DPTR,A
    140            
    141            /* Turn on Autopend: set SRCMATCH.AUTOPEND and SRCMATCH.SRC_MATCH_EN */
    142            MAC_RADIO_TURN_ON_SRC_MATCH();
   \   000041   906182       MOV     DPTR,#0x6182
   \   000044   E0           MOVX    A,@DPTR
   \   000045   D2E0         SETB    0xE0 /* A   */.0
   \   000047   F0           MOVX    @DPTR,A
    143           
    144            /* Set SRCMATCH.AUTOPEND */
    145            MAC_RADIO_TURN_ON_AUTOPEND();
   \   000048   906182       MOV     DPTR,#0x6182
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   D2E1         SETB    0xE0 /* A   */.1
   \   00004E   F0           MOVX    @DPTR,A
    146            
    147            /* Configure all the globals */
    148            macSrcMatchIsEnabled = TRUE;
   \   00004F   90....       MOV     DPTR,#macSrcMatchIsEnabled
   \   000052   7401         MOV     A,#0x1
   \   000054   F0           MOVX    @DPTR,A
    149            macSrcMatchMaxNumEntries = num;
   \   000055   EA           MOV     A,R2
   \   000056   90....       MOV     DPTR,#macSrcMatchMaxNumEntries
   \   000059   F0           MOVX    @DPTR,A
    150            macSrcMatchAddrMode = addrType;           
   \   00005A   EB           MOV     A,R3
   \   00005B   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   00005E   F0           MOVX    @DPTR,A
    151          
    152            return rtn;
   \   00005F   E8           MOV     A,R0
   \   000060   F9           MOV     R1,A
   \                     ??MAC_SrcMatchEnable_1:
   \   000061   D083         POP     DPH
   \   000063   D082         POP     DPL
   \   000065   02....       LJMP    ?BRET
    153          }
    154          
    155          /*********************************************************************
    156           * @fn          MAC_SrcMatchAddEntry
    157           *
    158           * @brief       Add a short or extended address to source address table. This 
    159           *              function shall be not be called from ISR. It is not thread safe.
    160           *
    161           * @param       addr - a pointer to sAddr_t which contains addrMode 
    162           *                     and a union of a short 16-bit MAC address or an extended 
    163           *                     64-bit MAC address to be added to the source address table. 
    164           * @param       panID - the device PAN ID. It is only used when the addr is 
    165           *                      using short address 
    166          
    167           * @return      MAC_SUCCESS or MAC_NO_RESOURCES (source address table full) 
    168           *              or MAC_DUPLICATED_ENTRY (the entry added is duplicated),
    169           *              or MAC_INVALID_PARAMETER if the input parameters are invalid.
    170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    171          uint8 MAC_SrcMatchAddEntry ( sAddr_t *addr, uint16 panID )
   \                     MAC_SrcMatchAddEntry:
    172          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    173            uint8 index;
    174            uint8 entry[MAC_SRCMATCH_SHORT_ENTRY_SIZE];
    175            
    176            /* Check if the input parameters are valid */
    177            if ( addr == NULL || addr->addrMode != macSrcMatchAddrMode )
   \   000012   E5..         MOV     A,?V0
   \   000014   45..         ORL     A,?V1
   \   000016   6017         JZ      ??MAC_SrcMatchAddEntry_0
   \   000018   85..82       MOV     DPL,?V0
   \   00001B   85..83       MOV     DPH,?V1
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   68           XRL     A,R0
   \   00002D   6005         JZ      ??MAC_SrcMatchAddEntry_1
    178            {
    179              return MAC_INVALID_PARAMETER;  
   \                     ??MAC_SrcMatchAddEntry_0:
   \   00002F   79E8         MOV     R1,#-0x18
   \   000031   02....       LJMP    ??MAC_SrcMatchAddEntry_2 & 0xFFFF
    180            }
    181            
    182            /* Check if the entry already exists. Do not add duplicated entry */
    183            if ( macSrcMatchCheckSrcAddr( addr, panID ) != MAC_SRCMATCH_INVALID_INDEX )
   \                     ??MAC_SrcMatchAddEntry_1:
   \   000034                ; Setup parameters for call to function macSrcMatchCheckSrcAddr
   \   000034   EE           MOV     A,R6
   \   000035   FC           MOV     R4,A
   \   000036   EF           MOV     A,R7
   \   000037   FD           MOV     R5,A
   \   000038   AA..         MOV     R2,?V0
   \   00003A   AB..         MOV     R3,?V1
   \   00003C   12....       LCALL   ??macSrcMatchCheckSrcAddr?relay; Banked call to: macSrcMatchCheckSrcAddr
   \   00003F   E9           MOV     A,R1
   \   000040   64FF         XRL     A,#0xff
   \   000042   6005         JZ      ??MAC_SrcMatchAddEntry_3
    184            {
    185              return MAC_DUPLICATED_ENTRY; 
   \   000044   791E         MOV     R1,#0x1e
   \   000046   02....       LJMP    ??MAC_SrcMatchAddEntry_2 & 0xFFFF
    186            }
    187            
    188            /* If not duplicated, write to the radio RAM and enable the control bit */
    189            
    190            /* Find the first empty entry */
    191            index = macSrcMatchFindEmptyEntry();
   \                     ??MAC_SrcMatchAddEntry_3:
   \   000049                ; Setup parameters for call to function macSrcMatchFindEmptyEntry
   \   000049   12....       LCALL   ??macSrcMatchFindEmptyEntry?relay; Banked call to: macSrcMatchFindEmptyEntry
   \   00004C   E9           MOV     A,R1
   \   00004D   F5..         MOV     ?V2,A
    192            if ( index == macSrcMatchMaxNumEntries )
   \   00004F   90....       MOV     DPTR,#macSrcMatchMaxNumEntries
   \   000052   E0           MOVX    A,@DPTR
   \   000053   65..         XRL     A,?V2
   \   000055   7005         JNZ     ??MAC_SrcMatchAddEntry_4
    193            {
    194              return MAC_NO_RESOURCES;   /* Table is full */
   \   000057   791A         MOV     R1,#0x1a
   \   000059   02....       LJMP    ??MAC_SrcMatchAddEntry_2 & 0xFFFF
    195            }
    196            
    197            if ( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \                     ??MAC_SrcMatchAddEntry_4:
   \   00005C   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   6402         XRL     A,#0x2
   \   000062   7079         JNZ     ??MAC_SrcMatchAddEntry_5
    198            {
    199              /* Write the PanID and short address */
    200              entry[0] = LO_UINT16( panID );  /* Little Endian for the radio RAM */
   \   000064   EE           MOV     A,R6
   \   000065   C0E0         PUSH    A
   \   000067   85..82       MOV     DPL,?XSP + 0
   \   00006A   85..83       MOV     DPH,?XSP + 1
   \   00006D   D0E0         POP     A
   \   00006F   F0           MOVX    @DPTR,A
    201              entry[1] = HI_UINT16( panID );
   \   000070   EE           MOV     A,R6
   \   000071   F8           MOV     R0,A
   \   000072   EF           MOV     A,R7
   \   000073   F9           MOV     R1,A
   \   000074   E4           CLR     A
   \   000075   C9           XCH     A,R1
   \   000076   F8           MOV     R0,A
   \   000077   E8           MOV     A,R0
   \   000078   C0E0         PUSH    A
   \   00007A   7401         MOV     A,#0x1
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   D0E0         POP     A
   \   000081   F0           MOVX    @DPTR,A
    202              entry[2] = LO_UINT16( addr->addr.shortAddr );
   \   000082   85..82       MOV     DPL,?V0
   \   000085   85..83       MOV     DPH,?V1
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F8           MOV     R0,A
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F9           MOV     R1,A
   \   00008D   E8           MOV     A,R0
   \   00008E   C0E0         PUSH    A
   \   000090   7402         MOV     A,#0x2
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   D0E0         POP     A
   \   000097   F0           MOVX    @DPTR,A
    203              entry[3] = HI_UINT16( addr->addr.shortAddr );
   \   000098   85..82       MOV     DPL,?V0
   \   00009B   85..83       MOV     DPH,?V1
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   F8           MOV     R0,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   F9           MOV     R1,A
   \   0000A3   E4           CLR     A
   \   0000A4   C9           XCH     A,R1
   \   0000A5   F8           MOV     R0,A
   \   0000A6   E8           MOV     A,R0
   \   0000A7   C0E0         PUSH    A
   \   0000A9   7403         MOV     A,#0x3
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   D0E0         POP     A
   \   0000B0   F0           MOVX    @DPTR,A
    204              MAC_RADIO_SRC_MATCH_TABLE_WRITE( ( index * MAC_SRCMATCH_SHORT_ENTRY_SIZE ), 
    205                             entry, MAC_SRCMATCH_SHORT_ENTRY_SIZE );
   \   0000B1                ; Setup parameters for call to function macMemWriteRam
   \   0000B1   7904         MOV     R1,#0x4
   \   0000B3   AC..         MOV     R4,?XSP + 0
   \   0000B5   AD..         MOV     R5,?XSP + 1
   \   0000B7   AA..         MOV     R2,?V2
   \   0000B9   7B00         MOV     R3,#0x0
   \   0000BB   EA           MOV     A,R2
   \   0000BC   75F004       MOV     B,#0x4
   \   0000BF   A4           MUL     AB
   \   0000C0   CA           XCH     A,R2
   \   0000C1   A8F0         MOV     R0,B
   \   0000C3   75F000       MOV     B,#0x0
   \   0000C6   A4           MUL     AB
   \   0000C7   28           ADD     A,R0
   \   0000C8   F8           MOV     R0,A
   \   0000C9   75F004       MOV     B,#0x4
   \   0000CC   EB           MOV     A,R3
   \   0000CD   A4           MUL     AB
   \   0000CE   28           ADD     A,R0
   \   0000CF   FB           MOV     R3,A
   \   0000D0   7400         MOV     A,#0x0
   \   0000D2   2A           ADD     A,R2
   \   0000D3   FA           MOV     R2,A
   \   0000D4   7461         MOV     A,#0x61
   \   0000D6   3B           ADDC    A,R3
   \   0000D7   FB           MOV     R3,A
   \   0000D8   12....       LCALL   ??macMemWriteRam?relay; Banked call to: macMemWriteRam
   \   0000DB   802A         SJMP    ??MAC_SrcMatchAddEntry_6
    206            }
    207            else
    208            {
    209              /* Write the extended address */
    210              MAC_RADIO_SRC_MATCH_TABLE_WRITE( ( index * MAC_SRCMATCH_EXT_ENTRY_SIZE ), 
    211                             addr->addr.extAddr, MAC_SRCMATCH_EXT_ENTRY_SIZE ); 
   \                     ??MAC_SrcMatchAddEntry_5:
   \   0000DD                ; Setup parameters for call to function macMemWriteRam
   \   0000DD   7908         MOV     R1,#0x8
   \   0000DF   AC..         MOV     R4,?V0
   \   0000E1   AD..         MOV     R5,?V1
   \   0000E3   AA..         MOV     R2,?V2
   \   0000E5   7B00         MOV     R3,#0x0
   \   0000E7   EA           MOV     A,R2
   \   0000E8   75F008       MOV     B,#0x8
   \   0000EB   A4           MUL     AB
   \   0000EC   CA           XCH     A,R2
   \   0000ED   A8F0         MOV     R0,B
   \   0000EF   75F000       MOV     B,#0x0
   \   0000F2   A4           MUL     AB
   \   0000F3   28           ADD     A,R0
   \   0000F4   F8           MOV     R0,A
   \   0000F5   75F008       MOV     B,#0x8
   \   0000F8   EB           MOV     A,R3
   \   0000F9   A4           MUL     AB
   \   0000FA   28           ADD     A,R0
   \   0000FB   FB           MOV     R3,A
   \   0000FC   7400         MOV     A,#0x0
   \   0000FE   2A           ADD     A,R2
   \   0000FF   FA           MOV     R2,A
   \   000100   7461         MOV     A,#0x61
   \   000102   3B           ADDC    A,R3
   \   000103   FB           MOV     R3,A
   \   000104   12....       LCALL   ??macMemWriteRam?relay; Banked call to: macMemWriteRam
    212            }
    213            
    214            /* Set the Autopend enable bits */
    215            macSrcMatchSetPendEnBit( index );
   \                     ??MAC_SrcMatchAddEntry_6:
   \   000107                ; Setup parameters for call to function macSrcMatchSetPendEnBit
   \   000107   A9..         MOV     R1,?V2
   \   000109   12....       LCALL   ??macSrcMatchSetPendEnBit?relay; Banked call to: macSrcMatchSetPendEnBit
    216            
    217            /* Set the Src Match enable bits */
    218            macSrcMatchSetEnableBit( index, TRUE );
   \   00010C                ; Setup parameters for call to function macSrcMatchSetEnableBit
   \   00010C   7A01         MOV     R2,#0x1
   \   00010E   A9..         MOV     R1,?V2
   \   000110   12....       LCALL   ??macSrcMatchSetEnableBit?relay; Banked call to: macSrcMatchSetEnableBit
    219            
    220            return MAC_SUCCESS;
   \   000113   7900         MOV     R1,#0x0
   \                     ??MAC_SrcMatchAddEntry_2:
   \   000115   7404         MOV     A,#0x4
   \   000117   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011A   7F03         MOV     R7,#0x3
   \   00011C   02....       LJMP    ?BANKED_LEAVE_XDATA
    221          }
    222          
    223          /*********************************************************************
    224           * @fn         MAC_SrcMatchDeleteEntry
    225           *
    226           * @brief      Delete a short or extended address from source address table. 
    227           *             This function shall be not be called from ISR. It is not thread safe.
    228           *
    229           * @param      addr - a pointer to sAddr_t which contains addrMode 
    230           *                    and a union of a short 16-bit MAC address or an extended 
    231           *                    64-bit MAC address to be deleted from the source address table. 
    232           * @param      panID - the device PAN ID. It is only used when the addr is 
    233           *                     using short address  
    234           *
    235           * @return     MAC_SUCCESS or MAC_INVALID_PARAMETER (address to be deleted 
    236           *                  cannot be found in the source address table).
    237           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    238          uint8 MAC_SrcMatchDeleteEntry ( sAddr_t *addr, uint16 panID  )
   \                     MAC_SrcMatchDeleteEntry:
    239          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
    240            uint8 index;
    241            
    242            if ( addr == NULL || addr->addrMode != macSrcMatchAddrMode )
   \   00000D   EE           MOV     A,R6
   \   00000E   4F           ORL     A,R7
   \   00000F   6015         JZ      ??MAC_SrcMatchDeleteEntry_0
   \   000011   8E82         MOV     DPL,R6
   \   000013   8F83         MOV     DPH,R7
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F8           MOV     R0,A
   \   00001F   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   000022   E0           MOVX    A,@DPTR
   \   000023   68           XRL     A,R0
   \   000024   6004         JZ      ??MAC_SrcMatchDeleteEntry_1
    243            {
    244              return MAC_INVALID_PARAMETER;  
   \                     ??MAC_SrcMatchDeleteEntry_0:
   \   000026   79E8         MOV     R1,#-0x18
   \   000028   8021         SJMP    ??MAC_SrcMatchDeleteEntry_2
    245            }
    246            
    247            /* Look up the source address table and find the entry. */
    248            index = macSrcMatchCheckSrcAddr( addr, panID );
   \                     ??MAC_SrcMatchDeleteEntry_1:
   \   00002A                ; Setup parameters for call to function macSrcMatchCheckSrcAddr
   \   00002A   AC..         MOV     R4,?V0
   \   00002C   AD..         MOV     R5,?V1
   \   00002E   EE           MOV     A,R6
   \   00002F   FA           MOV     R2,A
   \   000030   EF           MOV     A,R7
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   ??macSrcMatchCheckSrcAddr?relay; Banked call to: macSrcMatchCheckSrcAddr
   \   000035   E9           MOV     A,R1
   \   000036   F5..         MOV     ?V2,A
    249          
    250            if( index == MAC_SRCMATCH_INVALID_INDEX )
   \   000038   74FF         MOV     A,#-0x1
   \   00003A   65..         XRL     A,?V2
   \   00003C   7004         JNZ     ??MAC_SrcMatchDeleteEntry_3
    251            {
    252              return MAC_INVALID_PARAMETER; 
   \   00003E   79E8         MOV     R1,#-0x18
   \   000040   8009         SJMP    ??MAC_SrcMatchDeleteEntry_2
    253            }
    254            
    255            /* Clear Src Match enable bits */
    256            macSrcMatchSetEnableBit( index, FALSE );
   \                     ??MAC_SrcMatchDeleteEntry_3:
   \   000042                ; Setup parameters for call to function macSrcMatchSetEnableBit
   \   000042   7A00         MOV     R2,#0x0
   \   000044   A9..         MOV     R1,?V2
   \   000046   12....       LCALL   ??macSrcMatchSetEnableBit?relay; Banked call to: macSrcMatchSetEnableBit
    257          
    258            return MAC_SUCCESS;
   \   000049   7900         MOV     R1,#0x0
   \                     ??MAC_SrcMatchDeleteEntry_2:
   \   00004B   7F03         MOV     R7,#0x3
   \   00004D   02....       LJMP    ?BANKED_LEAVE_XDATA
    259          }
    260                            
    261          /*********************************************************************
    262           * @fn          MAC_SrcMatchAckAllPending
    263           *
    264           * @brief       Enabled/disable acknowledging all packets with pending bit set
    265           *              The application normally enables it when adding new entries to 
    266           *              the source address table fails due to the table is full, or 
    267           *              disables it when more entries are deleted and the table has
    268           *              empty slots.
    269           *
    270           * @param       option - TRUE (acknowledging all packets with pending field set)
    271           *                       FALSE (acknowledging all packets with pending field cleared) 
    272           *
    273           * @return      none
    274           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    275          void MAC_SrcMatchAckAllPending ( uint8 option  ) 
   \                     MAC_SrcMatchAckAllPending:
    276          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    277            if( option == TRUE )
   \   000004   7401         MOV     A,#0x1
   \   000006   69           XRL     A,R1
   \   000007   700F         JNZ     ??MAC_SrcMatchAckAllPending_0
    278            {
    279              macSrcMatchIsAckAllPending = TRUE;
   \   000009   90....       MOV     DPTR,#macSrcMatchIsAckAllPending
   \   00000C   7401         MOV     A,#0x1
   \   00000E   F0           MOVX    @DPTR,A
    280              
    281              /* Set the PENDING_OR register */
    282              MAC_RADIO_TURN_ON_PENDING_OR();
   \   00000F   90618A       MOV     DPTR,#0x618a
   \   000012   E0           MOVX    A,@DPTR
   \   000013   D2E2         SETB    0xE0 /* A   */.2
   \   000015   F0           MOVX    @DPTR,A
   \   000016   800D         SJMP    ??MAC_SrcMatchAckAllPending_1
    283            }
    284            else
    285            {
    286              macSrcMatchIsAckAllPending = FALSE;
   \                     ??MAC_SrcMatchAckAllPending_0:
   \   000018   90....       MOV     DPTR,#macSrcMatchIsAckAllPending
   \   00001B   7400         MOV     A,#0x0
   \   00001D   F0           MOVX    @DPTR,A
    287              
    288              /* Clear the PENDING_OR register */
    289              MAC_RADIO_TURN_OFF_PENDING_OR();
   \   00001E   90618A       MOV     DPTR,#0x618a
   \   000021   E0           MOVX    A,@DPTR
   \   000022   C2E2         CLR     0xE0 /* A   */.2
   \   000024   F0           MOVX    @DPTR,A
    290            }
    291          }
   \                     ??MAC_SrcMatchAckAllPending_1:
   \   000025   D083         POP     DPH
   \   000027   D082         POP     DPL
   \   000029   02....       LJMP    ?BRET
    292          
    293          /*********************************************************************
    294           * @fn          MAC_SrcMatchCheckAllPending
    295           *
    296           * @brief       Check if acknowledging all packets with pending bit set
    297           *              is enabled. 
    298           *
    299           * @param       none 
    300           *
    301           * @return      MAC_AUTOACK_PENDING_ALL_ON or MAC_AUTOACK_PENDING_ALL_OFF
    302           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    303          uint8 MAC_SrcMatchCheckAllPending ( void )
   \                     MAC_SrcMatchCheckAllPending:
    304          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    305            if( macSrcMatchIsAckAllPending == TRUE )
   \   000004   90....       MOV     DPTR,#macSrcMatchIsAckAllPending
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   7004         JNZ     ??MAC_SrcMatchCheckAllPending_0
    306            {
    307              return MAC_AUTOACK_PENDING_ALL_ON; 
   \   00000C   79FE         MOV     R1,#-0x2
   \   00000E   8002         SJMP    ??MAC_SrcMatchCheckAllPending_1
    308            }
    309            
    310            return MAC_AUTOACK_PENDING_ALL_OFF;
   \                     ??MAC_SrcMatchCheckAllPending_0:
   \   000010   79FF         MOV     R1,#-0x1
   \                     ??MAC_SrcMatchCheckAllPending_1:
   \   000012   D083         POP     DPH
   \   000014   D082         POP     DPL
   \   000016   02....       LJMP    ?BRET
    311          }
    312          
    313          /*********************************************************************
    314           * @fn          MAC_SrcMatchCheckResult
    315           *
    316           * @brief       Check the result of source matching
    317           *
    318           * @param       index - index of the entry in the source address table
    319           *
    320           * @return      TRUE or FALSE
    321           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    322          MAC_INTERNAL_API bool MAC_SrcMatchCheckResult( void )
   \                     MAC_SrcMatchCheckResult:
    323          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    324            uint8 resIndex;
    325            
    326            if ( macSrcMatchIsAckAllPending )
   \   000004   90....       MOV     DPTR,#macSrcMatchIsAckAllPending
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6004         JZ      ??MAC_SrcMatchCheckResult_0
    327            {
    328              return (TRUE);
   \   00000A   7901         MOV     R1,#0x1
   \   00000C   8009         SJMP    ??MAC_SrcMatchCheckResult_1
    329            }
    330            
    331            MAC_RADIO_SRC_MATCH_RESINDEX( resIndex );
   \                     ??MAC_SrcMatchCheckResult_0:
   \   00000E   906163       MOV     DPTR,#0x6163
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
    332            
    333            return ( resIndex & AUTOPEND_RES );
   \   000013   7440         MOV     A,#0x40
   \   000015   58           ANL     A,R0
   \   000016   F9           MOV     R1,A
   \                     ??MAC_SrcMatchCheckResult_1:
   \   000017   D083         POP     DPH
   \   000019   D082         POP     DPL
   \   00001B   02....       LJMP    ?BRET
    334          }
    335          
    336          /*********************************************************************
    337           * @fn          macSrcMatchFindEmptyEntry
    338           *
    339           * @brief       return index of the first empty entry found
    340           *
    341           * @param       none
    342           *
    343           * @return      uint8 - return index of the first empty entry found
    344           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    345          static uint8 macSrcMatchFindEmptyEntry( void )
   \                     macSrcMatchFindEmptyEntry:
    346          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    347            uint8  index;
    348            uint24 enable;
    349               
    350            enable = MAC_RADIO_SRC_MATCH_GET_EN();
   \   000005                ; Setup parameters for call to function macSrcMatchGetEnableBit
   \   000005   12....       LCALL   ??macSrcMatchGetEnableBit?relay; Banked call to: macSrcMatchGetEnableBit
   \   000008   8A..         MOV     ?V0,R2
   \   00000A   8B..         MOV     ?V1,R3
   \   00000C   8C..         MOV     ?V2,R4
   \   00000E   8D..         MOV     ?V3,R5
   \   000010   85....       MOV     ?V4,?V0
   \   000013   85....       MOV     ?V5,?V1
   \   000016   85....       MOV     ?V6,?V2
   \   000019   85....       MOV     ?V7,?V3
    351                  
    352            if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \   00001C   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6402         XRL     A,#0x2
   \   000022   7037         JNZ     ??macSrcMatchFindEmptyEntry_0
    353            {
    354              for( index = 0; index < macSrcMatchMaxNumEntries; index++ )
   \   000024   7E00         MOV     R6,#0x0
   \                     ??macSrcMatchFindEmptyEntry_1:
   \   000026   90....       MOV     DPTR,#macSrcMatchMaxNumEntries
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   EE           MOV     A,R6
   \   00002C   C3           CLR     C
   \   00002D   98           SUBB    A,R0
   \   00002E   5066         JNC     ??macSrcMatchFindEmptyEntry_2
    355              {  
    356                if( ( enable & ( (uint24)0x01 << index ) ) == 0 )
   \   000030   85....       MOV     ?V0,?V4
   \   000033   85....       MOV     ?V1,?V5
   \   000036   85....       MOV     ?V2,?V6
   \   000039   85....       MOV     ?V3,?V7
   \   00003C   EE           MOV     A,R6
   \   00003D   78..         MOV     R0,#?V0
   \   00003F   12....       LCALL   ?UL_SHR
   \   000042   90....       MOV     DPTR,#__Constant_1
   \   000045   78..         MOV     R0,#?V0
   \   000047   12....       LCALL   ?L_AND_X
   \   00004A   E5..         MOV     A,?V0
   \   00004C   45..         ORL     A,?V1
   \   00004E   45..         ORL     A,?V2
   \   000050   45..         ORL     A,?V3
   \   000052   7004         JNZ     ??macSrcMatchFindEmptyEntry_3
    357                {
    358                  return index;
   \   000054   EE           MOV     A,R6
   \   000055   F9           MOV     R1,A
   \   000056   8040         SJMP    ??macSrcMatchFindEmptyEntry_4
    359                }
    360              }
   \                     ??macSrcMatchFindEmptyEntry_3:
   \   000058   0E           INC     R6
   \   000059   80CB         SJMP    ??macSrcMatchFindEmptyEntry_1
    361            }
    362            else
    363            {
    364              for( index = 0; index < macSrcMatchMaxNumEntries; index++ )
   \                     ??macSrcMatchFindEmptyEntry_0:
   \   00005B   7E00         MOV     R6,#0x0
   \                     ??macSrcMatchFindEmptyEntry_5:
   \   00005D   90....       MOV     DPTR,#macSrcMatchMaxNumEntries
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F8           MOV     R0,A
   \   000062   EE           MOV     A,R6
   \   000063   C3           CLR     C
   \   000064   98           SUBB    A,R0
   \   000065   502F         JNC     ??macSrcMatchFindEmptyEntry_2
    365              {  
    366                if( ( enable & ( (uint24)0x01 << ( index * 2 ) ) ) == 0 )
   \   000067   85....       MOV     ?V0,?V4
   \   00006A   85....       MOV     ?V1,?V5
   \   00006D   85....       MOV     ?V2,?V6
   \   000070   85....       MOV     ?V3,?V7
   \   000073   75F002       MOV     B,#0x2
   \   000076   EE           MOV     A,R6
   \   000077   A4           MUL     AB
   \   000078   78..         MOV     R0,#?V0
   \   00007A   12....       LCALL   ?UL_SHR
   \   00007D   90....       MOV     DPTR,#__Constant_1
   \   000080   78..         MOV     R0,#?V0
   \   000082   12....       LCALL   ?L_AND_X
   \   000085   E5..         MOV     A,?V0
   \   000087   45..         ORL     A,?V1
   \   000089   45..         ORL     A,?V2
   \   00008B   45..         ORL     A,?V3
   \   00008D   7004         JNZ     ??macSrcMatchFindEmptyEntry_6
    367                {
    368                  return index;
   \   00008F   EE           MOV     A,R6
   \   000090   F9           MOV     R1,A
   \   000091   8005         SJMP    ??macSrcMatchFindEmptyEntry_4
    369                }
    370              }
   \                     ??macSrcMatchFindEmptyEntry_6:
   \   000093   0E           INC     R6
   \   000094   80C7         SJMP    ??macSrcMatchFindEmptyEntry_5
    371            }
    372            
    373            /* 
    374             The value of index shall be macSrcMatchMaxNumEntries when it executes
    375             here. The table is full.
    376            */
    377            return index;
   \                     ??macSrcMatchFindEmptyEntry_2:
   \   000096   EE           MOV     A,R6
   \   000097   F9           MOV     R1,A
   \                     ??macSrcMatchFindEmptyEntry_4:
   \   000098   7F08         MOV     R7,#0x8
   \   00009A   02....       LJMP    ?BANKED_LEAVE_XDATA
    378          }
    379          
    380          /*********************************************************************
    381           * @fn         macSrcMatchCheckSrcAddr
    382           *
    383           * @brief      Check if a short or extended address is in the source address table.
    384           *             This function shall not be called from ISR. It is not thread safe.
    385           *
    386           * @param      addr - a pointer to sAddr_t which contains addrMode 
    387           *                    and a union of a short 16-bit MAC address or an extended 
    388           *                    64-bit MAC address to be checked in the source address table. 
    389           * @param      panID - the device PAN ID. It is only used when the addr is 
    390           *                     using short address 
    391          
    392           * @return     uint8 - index of the entry in the table. Return 
    393           *                     MAC_SRCMATCH_INVALID_INDEX (0xFF) if address not found.
    394           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    395          static uint8 macSrcMatchCheckSrcAddr ( sAddr_t *addr, uint16 panID  )
   \                     macSrcMatchCheckSrcAddr:
    396          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   EC           MOV     A,R4
   \   000016   FE           MOV     R6,A
   \   000017   ED           MOV     A,R5
   \   000018   FF           MOV     R7,A
    397            uint8 index;     
    398            uint8 *pAddr;
    399            uint8 entrySize;
    400            uint8 entry[MAC_SRCMATCH_SHORT_ENTRY_SIZE];  
    401            uint8 ramEntry[MAC_SRCMATCH_EXT_ENTRY_SIZE];
    402                
    403            /*
    404             Currently, shadow memory is not supported to optimize SPI traffic.
    405            */
    406            
    407            if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \   000019   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6402         XRL     A,#0x2
   \   00001F   7070         JNZ     ??macSrcMatchCheckSrcAddr_0
    408            {
    409              entry[0] = LO_UINT16( panID );  /* Little Endian for the radio RAM */
   \   000021   EE           MOV     A,R6
   \   000022   C0E0         PUSH    A
   \   000024   7402         MOV     A,#0x2
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   D0E0         POP     A
   \   00002B   F0           MOVX    @DPTR,A
    410              entry[1] = HI_UINT16( panID );
   \   00002C   EE           MOV     A,R6
   \   00002D   F8           MOV     R0,A
   \   00002E   EF           MOV     A,R7
   \   00002F   F9           MOV     R1,A
   \   000030   E4           CLR     A
   \   000031   C9           XCH     A,R1
   \   000032   F8           MOV     R0,A
   \   000033   E8           MOV     A,R0
   \   000034   C0E0         PUSH    A
   \   000036   7403         MOV     A,#0x3
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   D0E0         POP     A
   \   00003D   F0           MOVX    @DPTR,A
    411              entry[2] = LO_UINT16( addr->addr.shortAddr );
   \   00003E   85..82       MOV     DPL,?XSP + 0
   \   000041   85..83       MOV     DPH,?XSP + 1
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F8           MOV     R0,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F583         MOV     DPH,A
   \   00004A   8882         MOV     DPL,R0
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F8           MOV     R0,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F9           MOV     R1,A
   \   000051   E8           MOV     A,R0
   \   000052   C0E0         PUSH    A
   \   000054   7404         MOV     A,#0x4
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   D0E0         POP     A
   \   00005B   F0           MOVX    @DPTR,A
    412              entry[3] = HI_UINT16( addr->addr.shortAddr );
   \   00005C   85..82       MOV     DPL,?XSP + 0
   \   00005F   85..83       MOV     DPH,?XSP + 1
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F8           MOV     R0,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F583         MOV     DPH,A
   \   000068   8882         MOV     DPL,R0
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F8           MOV     R0,A
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F9           MOV     R1,A
   \   00006F   E4           CLR     A
   \   000070   C9           XCH     A,R1
   \   000071   F8           MOV     R0,A
   \   000072   E8           MOV     A,R0
   \   000073   C0E0         PUSH    A
   \   000075   7405         MOV     A,#0x5
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   D0E0         POP     A
   \   00007C   F0           MOVX    @DPTR,A
    413              pAddr = entry;
   \   00007D   7402         MOV     A,#0x2
   \   00007F   12....       LCALL   ?XSTACK_DISP100_8
   \   000082   88..         MOV     ?V0,R0
   \   000084   89..         MOV     ?V1,R1
   \   000086   85....       MOV     ?V6,?V0
   \   000089   85....       MOV     ?V7,?V1
    414              entrySize = MAC_SRCMATCH_SHORT_ENTRY_SIZE;
   \   00008C   75..04       MOV     ?V3,#0x4
   \   00008F   8012         SJMP    ??macSrcMatchCheckSrcAddr_1
    415            }
    416            else
    417            {
    418              pAddr = addr->addr.extAddr;
   \                     ??macSrcMatchCheckSrcAddr_0:
   \   000091   85..82       MOV     DPL,?XSP + 0
   \   000094   85..83       MOV     DPH,?XSP + 1
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F8           MOV     R0,A
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   F9           MOV     R1,A
   \   00009C   88..         MOV     ?V6,R0
   \   00009E   89..         MOV     ?V7,R1
    419              entrySize = MAC_SRCMATCH_EXT_ENTRY_SIZE;
   \   0000A0   75..08       MOV     ?V3,#0x8
    420            }
    421            
    422            for( index = 0; index < macSrcMatchMaxNumEntries; index++ )
   \                     ??macSrcMatchCheckSrcAddr_1:
   \   0000A3   75..00       MOV     ?V4,#0x0
   \                     ??macSrcMatchCheckSrcAddr_2:
   \   0000A6   90....       MOV     DPTR,#macSrcMatchMaxNumEntries
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   F8           MOV     R0,A
   \   0000AB   E5..         MOV     A,?V4
   \   0000AD   C3           CLR     C
   \   0000AE   98           SUBB    A,R0
   \   0000AF   506F         JNC     ??macSrcMatchCheckSrcAddr_3
    423            {
    424              /* Check if the entry is enabled */
    425              if( macSrcMatchCheckEnableBit( index ) == FALSE )
   \   0000B1                ; Setup parameters for call to function macSrcMatchCheckEnableBit
   \   0000B1   A9..         MOV     R1,?V4
   \   0000B3   12....       LCALL   ??macSrcMatchCheckEnableBit?relay; Banked call to: macSrcMatchCheckEnableBit
   \   0000B6   E9           MOV     A,R1
   \   0000B7   6063         JZ      ??macSrcMatchCheckSrcAddr_4
    426              {
    427                continue; 
    428              }
    429                
    430              /* Compare the short address and pan ID */
    431              MAC_RADIO_SRC_MATCH_TABLE_READ( ( index * entrySize ), ramEntry, entrySize );
   \   0000B9                ; Setup parameters for call to function macMemReadRam
   \   0000B9   A9..         MOV     R1,?V3
   \   0000BB   7406         MOV     A,#0x6
   \   0000BD   12....       LCALL   ?XSTACK_DISP102_8
   \   0000C0   AA..         MOV     R2,?V4
   \   0000C2   7B00         MOV     R3,#0x0
   \   0000C4   85....       MOV     ?V0,?V3
   \   0000C7   75..00       MOV     ?V1,#0x0
   \   0000CA   EA           MOV     A,R2
   \   0000CB   85..F0       MOV     B,?V0
   \   0000CE   A4           MUL     AB
   \   0000CF   CA           XCH     A,R2
   \   0000D0   A8F0         MOV     R0,B
   \   0000D2   85..F0       MOV     B,?V1
   \   0000D5   A4           MUL     AB
   \   0000D6   28           ADD     A,R0
   \   0000D7   F8           MOV     R0,A
   \   0000D8   85..F0       MOV     B,?V0
   \   0000DB   EB           MOV     A,R3
   \   0000DC   A4           MUL     AB
   \   0000DD   28           ADD     A,R0
   \   0000DE   FB           MOV     R3,A
   \   0000DF   7400         MOV     A,#0x0
   \   0000E1   2A           ADD     A,R2
   \   0000E2   FA           MOV     R2,A
   \   0000E3   7461         MOV     A,#0x61
   \   0000E5   3B           ADDC    A,R3
   \   0000E6   FB           MOV     R3,A
   \   0000E7   12....       LCALL   ??macMemReadRam?relay; Banked call to: macMemReadRam
    432               
    433              if( osal_memcmp( pAddr, ramEntry, entrySize ) == TRUE )
   \   0000EA                ; Setup parameters for call to function osal_memcmp
   \   0000EA   7406         MOV     A,#0x6
   \   0000EC   12....       LCALL   ?XSTACK_DISP100_8
   \   0000EF   88..         MOV     ?V0,R0
   \   0000F1   89..         MOV     ?V1,R1
   \   0000F3   75..00       MOV     ?V2,#0x0
   \   0000F6   78..         MOV     R0,#?V0
   \   0000F8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000FB   AC..         MOV     R4,?V3
   \   0000FD   7D00         MOV     R5,#0x0
   \   0000FF   85..82       MOV     DPL,?V6
   \   000102   85..83       MOV     DPH,?V7
   \   000105   A982         MOV     R1,DPL
   \   000107   AA83         MOV     R2,DPH
   \   000109   7B00         MOV     R3,#0x0
   \   00010B   12....       LCALL   ??osal_memcmp?relay  ; Banked call to: osal_memcmp
   \   00010E   7403         MOV     A,#0x3
   \   000110   12....       LCALL   ?DEALLOC_XSTACK8
   \   000113   E9           MOV     A,R1
   \   000114   6401         XRL     A,#0x1
   \   000116   7004         JNZ     ??macSrcMatchCheckSrcAddr_4
    434              {
    435                /* Match found */
    436                return index;
   \   000118   A9..         MOV     R1,?V4
   \   00011A   8006         SJMP    ??macSrcMatchCheckSrcAddr_5
    437              }
    438            }
   \                     ??macSrcMatchCheckSrcAddr_4:
   \   00011C   05..         INC     ?V4
   \   00011E   8086         SJMP    ??macSrcMatchCheckSrcAddr_2
    439            
    440            return MAC_SRCMATCH_INVALID_INDEX;
   \                     ??macSrcMatchCheckSrcAddr_3:
   \   000120   79FF         MOV     R1,#-0x1
   \                     ??macSrcMatchCheckSrcAddr_5:
   \   000122   740E         MOV     A,#0xe
   \   000124   12....       LCALL   ?DEALLOC_XSTACK8
   \   000127   7F08         MOV     R7,#0x8
   \   000129   02....       LJMP    ?BANKED_LEAVE_XDATA
    441          }
    442          
    443          /*********************************************************************
    444           * @fn          macSrcMatchSetPendEnBit
    445           *
    446           * @brief       Set the enable bit in the source address table
    447           *
    448           * @param       index - index of the entry in the source address table
    449           *
    450           * @return      none
    451           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    452          static void macSrcMatchSetPendEnBit( uint8 index )
   \                     macSrcMatchSetPendEnBit:
    453          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    454            uint24 enable;
    455            uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
    456                 
    457            enable = MAC_RADIO_SRC_MATCH_GET_PENDEN(); 
   \   00000C                ; Setup parameters for call to function macSrcMatchGetPendEnBit
   \   00000C   12....       LCALL   ??macSrcMatchGetPendEnBit?relay; Banked call to: macSrcMatchGetPendEnBit
   \   00000F   8A..         MOV     ?V0,R2
   \   000011   8B..         MOV     ?V1,R3
   \   000013   8C..         MOV     ?V2,R4
   \   000015   8D..         MOV     ?V3,R5
   \   000017   85....       MOV     ?V4,?V0
   \   00001A   85....       MOV     ?V5,?V1
   \   00001D   85....       MOV     ?V6,?V2
   \   000020   85....       MOV     ?V7,?V3
    458                
    459            if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \   000023   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6402         XRL     A,#0x2
   \   000029   703A         JNZ     ??macSrcMatchSetPendEnBit_0
    460            {
    461              enable |= ( (uint24)0x01 << index );
   \   00002B   75..01       MOV     ?V0,#0x1
   \   00002E   75..00       MOV     ?V1,#0x0
   \   000031   75..00       MOV     ?V2,#0x0
   \   000034   75..00       MOV     ?V3,#0x0
   \   000037   EE           MOV     A,R6
   \   000038   78..         MOV     R0,#?V0
   \   00003A   12....       LCALL   ?L_SHL
   \   00003D   78..         MOV     R0,#?V4
   \   00003F   79..         MOV     R1,#?V0
   \   000041   12....       LCALL   ?L_IOR
    462              osal_buffer_uint24( buf, enable );
   \   000044                ; Setup parameters for call to function osal_buffer_uint24
   \   000044   78..         MOV     R0,#?V4
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000049   7404         MOV     A,#0x4
   \   00004B   12....       LCALL   ?XSTACK_DISP101_8
   \   00004E   12....       LCALL   ??osal_buffer_uint24?relay; Banked call to: osal_buffer_uint24
   \   000051   7404         MOV     A,#0x4
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
    463              MAC_RADIO_SRC_MATCH_SET_SHORTPENDEN( buf );
   \   000056                ; Setup parameters for call to function macMemWriteRam
   \   000056   7903         MOV     R1,#0x3
   \   000058   AC..         MOV     R4,?XSP + 0
   \   00005A   AD..         MOV     R5,?XSP + 1
   \   00005C   7A67         MOV     R2,#0x67
   \   00005E   7B61         MOV     R3,#0x61
   \   000060   12....       LCALL   ??macMemWriteRam?relay; Banked call to: macMemWriteRam
   \   000063   803C         SJMP    ??macSrcMatchSetPendEnBit_1
    464            }
    465            else
    466            {
    467              enable |= ( (uint24)0x01 << ( index * 2 ) );
   \                     ??macSrcMatchSetPendEnBit_0:
   \   000065   75..01       MOV     ?V0,#0x1
   \   000068   75..00       MOV     ?V1,#0x0
   \   00006B   75..00       MOV     ?V2,#0x0
   \   00006E   75..00       MOV     ?V3,#0x0
   \   000071   75F002       MOV     B,#0x2
   \   000074   EE           MOV     A,R6
   \   000075   A4           MUL     AB
   \   000076   78..         MOV     R0,#?V0
   \   000078   12....       LCALL   ?L_SHL
   \   00007B   78..         MOV     R0,#?V4
   \   00007D   79..         MOV     R1,#?V0
   \   00007F   12....       LCALL   ?L_IOR
    468              osal_buffer_uint24( buf, enable );
   \   000082                ; Setup parameters for call to function osal_buffer_uint24
   \   000082   78..         MOV     R0,#?V4
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000087   7404         MOV     A,#0x4
   \   000089   12....       LCALL   ?XSTACK_DISP101_8
   \   00008C   12....       LCALL   ??osal_buffer_uint24?relay; Banked call to: osal_buffer_uint24
   \   00008F   7404         MOV     A,#0x4
   \   000091   12....       LCALL   ?DEALLOC_XSTACK8
    469              MAC_RADIO_SRC_MATCH_SET_EXTPENDEN( buf );
   \   000094                ; Setup parameters for call to function macMemWriteRam
   \   000094   7903         MOV     R1,#0x3
   \   000096   AC..         MOV     R4,?XSP + 0
   \   000098   AD..         MOV     R5,?XSP + 1
   \   00009A   7A64         MOV     R2,#0x64
   \   00009C   7B61         MOV     R3,#0x61
   \   00009E   12....       LCALL   ??macMemWriteRam?relay; Banked call to: macMemWriteRam
    470            }
    471          }
   \                     ??macSrcMatchSetPendEnBit_1:
   \   0000A1   7403         MOV     A,#0x3
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A6   7F08         MOV     R7,#0x8
   \   0000A8   02....       LJMP    ?BANKED_LEAVE_XDATA
    472          
    473          /*********************************************************************
    474           * @fn          macSrcMatchSetEnableBit
    475           *
    476           * @brief       Set or clear the enable bit in the SRCMATCH EN register
    477           *
    478           * @param       index - index of the entry in the source address table
    479           * @param       option - true (set the enable bit), or false (clear the enable bit)
    480           *
    481           * @return      none
    482           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    483          static void macSrcMatchSetEnableBit( uint8 index, bool option )
   \                     macSrcMatchSetEnableBit:
    484          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    485            uint24 enable;  
    486            
    487            enable = MAC_RADIO_SRC_MATCH_GET_EN(); 
   \   000009                ; Setup parameters for call to function macSrcMatchGetEnableBit
   \   000009   12....       LCALL   ??macSrcMatchGetEnableBit?relay; Banked call to: macSrcMatchGetEnableBit
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   8C..         MOV     ?V2,R4
   \   000012   8D..         MOV     ?V3,R5
   \   000014   85....       MOV     ?V4,?V0
   \   000017   85....       MOV     ?V5,?V1
   \   00001A   85....       MOV     ?V6,?V2
   \   00001D   85....       MOV     ?V7,?V3
    488                
    489            if( option == TRUE )
   \   000020   7401         MOV     A,#0x1
   \   000022   6F           XRL     A,R7
   \   000023   7065         JNZ     ??macSrcMatchSetEnableBit_0
    490            {
    491              if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \   000025   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6402         XRL     A,#0x2
   \   00002B   702D         JNZ     ??macSrcMatchSetEnableBit_1
    492              {
    493                enable |= ( (uint24)0x01 << index );
   \   00002D   75..01       MOV     ?V0,#0x1
   \   000030   75..00       MOV     ?V1,#0x0
   \   000033   75..00       MOV     ?V2,#0x0
   \   000036   75..00       MOV     ?V3,#0x0
   \   000039   EE           MOV     A,R6
   \   00003A   78..         MOV     R0,#?V0
   \   00003C   12....       LCALL   ?L_SHL
   \   00003F   78..         MOV     R0,#?V4
   \   000041   79..         MOV     R1,#?V0
   \   000043   12....       LCALL   ?L_IOR
    494                MAC_RADIO_SRC_MATCH_SET_SHORTEN( enable );
   \   000046                ; Setup parameters for call to function osal_buffer_uint24
   \   000046   78..         MOV     R0,#?V4
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00004B   7A83         MOV     R2,#-0x7d
   \   00004D   7B61         MOV     R3,#0x61
   \   00004F   12....       LCALL   ??osal_buffer_uint24?relay; Banked call to: osal_buffer_uint24
   \   000052   7404         MOV     A,#0x4
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057   02....       LJMP    ??macSrcMatchSetEnableBit_2 & 0xFFFF
    495              }
    496              else
    497              {
    498                enable |= ( (uint24)0x01 << ( index * 2 ) );
   \                     ??macSrcMatchSetEnableBit_1:
   \   00005A   75..01       MOV     ?V0,#0x1
   \   00005D   75..00       MOV     ?V1,#0x0
   \   000060   75..00       MOV     ?V2,#0x0
   \   000063   75..00       MOV     ?V3,#0x0
   \   000066   75F002       MOV     B,#0x2
   \   000069   EE           MOV     A,R6
   \   00006A   A4           MUL     AB
   \   00006B   78..         MOV     R0,#?V0
   \   00006D   12....       LCALL   ?L_SHL
   \   000070   78..         MOV     R0,#?V4
   \   000072   79..         MOV     R1,#?V0
   \   000074   12....       LCALL   ?L_IOR
    499                MAC_RADIO_SRC_MATCH_SET_EXTEN( enable );
   \   000077                ; Setup parameters for call to function osal_buffer_uint24
   \   000077   78..         MOV     R0,#?V4
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00007C   7A86         MOV     R2,#-0x7a
   \   00007E   7B61         MOV     R3,#0x61
   \   000080   12....       LCALL   ??osal_buffer_uint24?relay; Banked call to: osal_buffer_uint24
   \   000083   7404         MOV     A,#0x4
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
   \   000088   806C         SJMP    ??macSrcMatchSetEnableBit_2
    500              }
    501            }
    502            else
    503            {
    504              if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \                     ??macSrcMatchSetEnableBit_0:
   \   00008A   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   6402         XRL     A,#0x2
   \   000090   7031         JNZ     ??macSrcMatchSetEnableBit_3
    505              {
    506                enable &= ~( (uint24)0x01 << index );
   \   000092   75..01       MOV     ?V0,#0x1
   \   000095   75..00       MOV     ?V1,#0x0
   \   000098   75..00       MOV     ?V2,#0x0
   \   00009B   75..00       MOV     ?V3,#0x0
   \   00009E   EE           MOV     A,R6
   \   00009F   78..         MOV     R0,#?V0
   \   0000A1   12....       LCALL   ?L_SHL
   \   0000A4   78..         MOV     R0,#?V0
   \   0000A6   12....       LCALL   ?L_NOT
   \   0000A9   78..         MOV     R0,#?V4
   \   0000AB   79..         MOV     R1,#?V0
   \   0000AD   12....       LCALL   ?L_AND
    507                MAC_RADIO_SRC_MATCH_SET_SHORTEN( enable );
   \   0000B0                ; Setup parameters for call to function osal_buffer_uint24
   \   0000B0   78..         MOV     R0,#?V4
   \   0000B2   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000B5   7A83         MOV     R2,#-0x7d
   \   0000B7   7B61         MOV     R3,#0x61
   \   0000B9   12....       LCALL   ??osal_buffer_uint24?relay; Banked call to: osal_buffer_uint24
   \   0000BC   7404         MOV     A,#0x4
   \   0000BE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C1   8033         SJMP    ??macSrcMatchSetEnableBit_2
    508              }
    509              else
    510              {
    511                enable &= ~( (uint24)0x01 << ( index * 2 ) );
   \                     ??macSrcMatchSetEnableBit_3:
   \   0000C3   75..01       MOV     ?V0,#0x1
   \   0000C6   75..00       MOV     ?V1,#0x0
   \   0000C9   75..00       MOV     ?V2,#0x0
   \   0000CC   75..00       MOV     ?V3,#0x0
   \   0000CF   75F002       MOV     B,#0x2
   \   0000D2   EE           MOV     A,R6
   \   0000D3   A4           MUL     AB
   \   0000D4   78..         MOV     R0,#?V0
   \   0000D6   12....       LCALL   ?L_SHL
   \   0000D9   78..         MOV     R0,#?V0
   \   0000DB   12....       LCALL   ?L_NOT
   \   0000DE   78..         MOV     R0,#?V4
   \   0000E0   79..         MOV     R1,#?V0
   \   0000E2   12....       LCALL   ?L_AND
    512                MAC_RADIO_SRC_MATCH_SET_EXTEN( enable );
   \   0000E5                ; Setup parameters for call to function osal_buffer_uint24
   \   0000E5   78..         MOV     R0,#?V4
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000EA   7A86         MOV     R2,#-0x7a
   \   0000EC   7B61         MOV     R3,#0x61
   \   0000EE   12....       LCALL   ??osal_buffer_uint24?relay; Banked call to: osal_buffer_uint24
   \   0000F1   7404         MOV     A,#0x4
   \   0000F3   12....       LCALL   ?DEALLOC_XSTACK8
    513              }
    514            }
    515          }
   \                     ??macSrcMatchSetEnableBit_2:
   \   0000F6   7F08         MOV     R7,#0x8
   \   0000F8   02....       LJMP    ?BANKED_LEAVE_XDATA
    516          
    517          /*********************************************************************
    518           * @fn          macSrcMatchCheckEnableBit
    519           *
    520           * @brief       Check the enable bit in the source address table
    521           *
    522           * @param       index - index of the entry in the source address table
    523           *
    524           * @return      TRUE or FALSE
    525           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    526          static bool macSrcMatchCheckEnableBit( uint8 index )
   \                     macSrcMatchCheckEnableBit:
    527          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    528            uint24 enable;
    529            
    530            if( macSrcMatchAddrMode == SADDR_MODE_EXT )
   \   000007   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6403         XRL     A,#0x3
   \   00000D   7006         JNZ     ??macSrcMatchCheckEnableBit_0
    531            {
    532              index *= 2;
   \   00000F   75F002       MOV     B,#0x2
   \   000012   EE           MOV     A,R6
   \   000013   A4           MUL     AB
   \   000014   FE           MOV     R6,A
    533            }
    534            
    535            enable = MAC_RADIO_SRC_MATCH_GET_EN();
   \                     ??macSrcMatchCheckEnableBit_0:
   \   000015                ; Setup parameters for call to function macSrcMatchGetEnableBit
   \   000015   12....       LCALL   ??macSrcMatchGetEnableBit?relay; Banked call to: macSrcMatchGetEnableBit
   \   000018   8A..         MOV     ?V0,R2
   \   00001A   8B..         MOV     ?V1,R3
   \   00001C   8C..         MOV     ?V2,R4
   \   00001E   8D..         MOV     ?V3,R5
   \   000020   85....       MOV     ?V4,?V0
   \   000023   85....       MOV     ?V5,?V1
   \   000026   85....       MOV     ?V6,?V2
   \   000029   85....       MOV     ?V7,?V3
    536               
    537            if( enable & ( (uint24)0x01 << index ) )
   \   00002C   85....       MOV     ?V0,?V4
   \   00002F   85....       MOV     ?V1,?V5
   \   000032   85....       MOV     ?V2,?V6
   \   000035   85....       MOV     ?V3,?V7
   \   000038   EE           MOV     A,R6
   \   000039   78..         MOV     R0,#?V0
   \   00003B   12....       LCALL   ?UL_SHR
   \   00003E   90....       MOV     DPTR,#__Constant_1
   \   000041   78..         MOV     R0,#?V0
   \   000043   12....       LCALL   ?L_AND_X
   \   000046   E5..         MOV     A,?V0
   \   000048   45..         ORL     A,?V1
   \   00004A   45..         ORL     A,?V2
   \   00004C   45..         ORL     A,?V3
   \   00004E   6004         JZ      ??macSrcMatchCheckEnableBit_1
    538            {
    539              return TRUE;
   \   000050   7901         MOV     R1,#0x1
   \   000052   8002         SJMP    ??macSrcMatchCheckEnableBit_2
    540            }
    541          
    542            return FALSE; 
   \                     ??macSrcMatchCheckEnableBit_1:
   \   000054   7900         MOV     R1,#0x0
   \                     ??macSrcMatchCheckEnableBit_2:
   \   000056   7F08         MOV     R7,#0x8
   \   000058   02....       LJMP    ?BANKED_LEAVE_XDATA
    543          }
    544           
    545          /*********************************************************************
    546           * @fn          macSrcMatchGetEnableBit
    547           *
    548           * @brief       Return the SRCMATCH enable bitmap
    549           *
    550           * @param       none
    551           *
    552           * @return      uint24 - 24 bits bitmap
    553           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    554          static uint24 macSrcMatchGetEnableBit( void )
   \                     macSrcMatchGetEnableBit:
    555          { 
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    556            uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
    557            
    558            if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \   000009   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   700F         JNZ     ??macSrcMatchGetEnableBit_0
    559            {
    560              MAC_RADIO_GET_SRC_SHORTEN( buf );
   \   000011                ; Setup parameters for call to function macMemReadRam
   \   000011   7903         MOV     R1,#0x3
   \   000013   AC..         MOV     R4,?XSP + 0
   \   000015   AD..         MOV     R5,?XSP + 1
   \   000017   7A83         MOV     R2,#-0x7d
   \   000019   7B61         MOV     R3,#0x61
   \   00001B   12....       LCALL   ??macMemReadRam?relay; Banked call to: macMemReadRam
   \   00001E   800D         SJMP    ??macSrcMatchGetEnableBit_1
    561            }
    562            else
    563            {
    564              MAC_RADIO_GET_SRC_EXTEN( buf );
   \                     ??macSrcMatchGetEnableBit_0:
   \   000020                ; Setup parameters for call to function macMemReadRam
   \   000020   7903         MOV     R1,#0x3
   \   000022   AC..         MOV     R4,?XSP + 0
   \   000024   AD..         MOV     R5,?XSP + 1
   \   000026   7A86         MOV     R2,#-0x7a
   \   000028   7B61         MOV     R3,#0x61
   \   00002A   12....       LCALL   ??macMemReadRam?relay; Banked call to: macMemReadRam
    565            }
    566            
    567            return osal_build_uint32( buf, MAC_SRCMATCH_ENABLE_BITMAP_LEN );
   \                     ??macSrcMatchGetEnableBit_1:
   \   00002D                ; Setup parameters for call to function osal_build_uint32
   \   00002D   7903         MOV     R1,#0x3
   \   00002F   AA..         MOV     R2,?XSP + 0
   \   000031   AB..         MOV     R3,?XSP + 1
   \   000033   12....       LCALL   ??osal_build_uint32?relay; Banked call to: osal_build_uint32
   \   000036   7403         MOV     A,#0x3
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003B   D083         POP     DPH
   \   00003D   D082         POP     DPL
   \   00003F   02....       LJMP    ?BRET
    568          }
    569          
    570          /*********************************************************************
    571           * @fn          macSrcMatchGetPendEnBit
    572           *
    573           * @brief       Return the SRCMATCH Pend enable bitmap
    574           *
    575           * @param       none
    576           *
    577           * @return      uint24 - 24 bits bitmap
    578           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    579          static uint24 macSrcMatchGetPendEnBit( void )
   \                     macSrcMatchGetPendEnBit:
    580          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    581            uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
    582          
    583            if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \   000009   90....       MOV     DPTR,#macSrcMatchAddrMode
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   700F         JNZ     ??macSrcMatchGetPendEnBit_0
    584            {
    585              MAC_RADIO_GET_SRC_SHORTPENDEN( buf );
   \   000011                ; Setup parameters for call to function macMemReadRam
   \   000011   7903         MOV     R1,#0x3
   \   000013   AC..         MOV     R4,?XSP + 0
   \   000015   AD..         MOV     R5,?XSP + 1
   \   000017   7A67         MOV     R2,#0x67
   \   000019   7B61         MOV     R3,#0x61
   \   00001B   12....       LCALL   ??macMemReadRam?relay; Banked call to: macMemReadRam
   \   00001E   800D         SJMP    ??macSrcMatchGetPendEnBit_1
    586            }
    587            else
    588            {
    589              MAC_RADIO_GET_SRC_EXTENPEND( buf );
   \                     ??macSrcMatchGetPendEnBit_0:
   \   000020                ; Setup parameters for call to function macMemReadRam
   \   000020   7903         MOV     R1,#0x3
   \   000022   AC..         MOV     R4,?XSP + 0
   \   000024   AD..         MOV     R5,?XSP + 1
   \   000026   7A64         MOV     R2,#0x64
   \   000028   7B61         MOV     R3,#0x61
   \   00002A   12....       LCALL   ??macMemReadRam?relay; Banked call to: macMemReadRam
    590            }
    591            
    592            return osal_build_uint32( buf, MAC_SRCMATCH_ENABLE_BITMAP_LEN );
   \                     ??macSrcMatchGetPendEnBit_1:
   \   00002D                ; Setup parameters for call to function osal_build_uint32
   \   00002D   7903         MOV     R1,#0x3
   \   00002F   AA..         MOV     R2,?XSP + 0
   \   000031   AB..         MOV     R3,?XSP + 1
   \   000033   12....       LCALL   ??osal_build_uint32?relay; Banked call to: osal_build_uint32
   \   000036   7403         MOV     A,#0x3
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003B   D083         POP     DPH
   \   00003D   D082         POP     DPL
   \   00003F   02....       LJMP    ?BRET
    593          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for macSrcMatchAddrMode>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_SrcMatchEnable?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchEnable

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_SrcMatchAddEntry?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchAddEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_SrcMatchDeleteEntry?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchDeleteEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_SrcMatchAckAllPending?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchAckAllPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_SrcMatchCheckAllPending?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchCheckAllPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_SrcMatchCheckResult?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchCheckResult

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macSrcMatchFindEmptyEntry?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macSrcMatchFindEmptyEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macSrcMatchCheckSrcAddr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macSrcMatchCheckSrcAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macSrcMatchSetPendEnBit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macSrcMatchSetPendEnBit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macSrcMatchSetEnableBit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macSrcMatchSetEnableBit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macSrcMatchCheckEnableBit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macSrcMatchCheckEnableBit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macSrcMatchGetEnableBit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macSrcMatchGetEnableBit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macSrcMatchGetPendEnBit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macSrcMatchGetPendEnBit
    594          
    595          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   MAC_SrcMatchAckAllPending
      1     15   MAC_SrcMatchAddEntry
        0     15   -> macMemWriteRam
        0     15   -> macSrcMatchCheckSrcAddr
        0     15   -> macSrcMatchFindEmptyEntry
        0     15   -> macSrcMatchSetEnableBit
        0     15   -> macSrcMatchSetPendEnBit
      2      0   MAC_SrcMatchCheckAllPending
      2      0   MAC_SrcMatchCheckResult
      0     11   MAC_SrcMatchDeleteEntry
        0     11   -> macSrcMatchCheckSrcAddr
        0     11   -> macSrcMatchSetEnableBit
      2      0   MAC_SrcMatchEnable
      0     46   macSrcMatchCheckEnableBit
        0     16   -> macSrcMatchGetEnableBit
      1     48   macSrcMatchCheckSrcAddr
        0     30   -> macMemReadRam
        0     30   -> macSrcMatchCheckEnableBit
        0     33   -> osal_memcmp
      0     31   macSrcMatchFindEmptyEntry
        0     16   -> macSrcMatchGetEnableBit
      2     19   macSrcMatchGetEnableBit
        2      3   -> macMemReadRam
        2      3   -> osal_build_uint32
      2     22   macSrcMatchGetPendEnBit
        2      3   -> macMemReadRam
        2      3   -> osal_build_uint32
      0     35   macSrcMatchSetEnableBit
        0     16   -> macSrcMatchGetEnableBit
        0     20   -> osal_buffer_uint24
      0     38   macSrcMatchSetPendEnBit
        0     19   -> macMemWriteRam
        0     19   -> macSrcMatchGetPendEnBit
        0     23   -> osal_buffer_uint24


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for macSrcMatchAddrMode>
       6  ??MAC_SrcMatchAckAllPending?relay
       6  ??MAC_SrcMatchAddEntry?relay
       6  ??MAC_SrcMatchCheckAllPending?relay
       6  ??MAC_SrcMatchCheckResult?relay
       6  ??MAC_SrcMatchDeleteEntry?relay
       6  ??MAC_SrcMatchEnable?relay
       6  ??macSrcMatchCheckEnableBit?relay
       6  ??macSrcMatchCheckSrcAddr?relay
       6  ??macSrcMatchFindEmptyEntry?relay
       6  ??macSrcMatchGetEnableBit?relay
       6  ??macSrcMatchGetPendEnBit?relay
       6  ??macSrcMatchSetEnableBit?relay
       6  ??macSrcMatchSetPendEnBit?relay
      44  MAC_SrcMatchAckAllPending
     287  MAC_SrcMatchAddEntry
      25  MAC_SrcMatchCheckAllPending
      30  MAC_SrcMatchCheckResult
      80  MAC_SrcMatchDeleteEntry
     104  MAC_SrcMatchEnable
       4  __Constant_1
       1  macSrcMatchAddrMode
      91  macSrcMatchCheckEnableBit
     300  macSrcMatchCheckSrcAddr
     157  macSrcMatchFindEmptyEntry
      66  macSrcMatchGetEnableBit
      66  macSrcMatchGetPendEnBit
       1  macSrcMatchIsAckAllPending
       1  macSrcMatchIsEnabled
       1  macSrcMatchMaxNumEntries
     251  macSrcMatchSetEnableBit
     171  macSrcMatchSetPendEnBit

 
 1 672 bytes in segment BANKED_CODE
    78 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     4 bytes in segment XDATA_ROM_C
     3 bytes in segment XDATA_Z
 
 1 751 bytes of CODE  memory
     0 bytes of CONST memory (+ 4 bytes shared)
     4 bytes of XDATA memory

Errors: none
Warnings: none
