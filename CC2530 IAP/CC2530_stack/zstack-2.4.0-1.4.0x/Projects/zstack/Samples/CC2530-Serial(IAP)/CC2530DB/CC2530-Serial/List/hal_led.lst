###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:37
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\hal\target\CC2530EB\hal_led.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\hal\target\CC2530EB\hal_led.c"
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        XLAB -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\hal_led.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\hal_led.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\hal\target\CC2530EB\hal_led.c
      1          /**************************************************************************************************
      2            Filename:       hal_led.c
      3            Revised:        $Date: 2009-03-13 05:45:44 -0700 (Fri, 13 Mar 2009) $
      4            Revision:       $Revision: 19408 $
      5          
      6            Description:    This file contains the interface to the HAL LED Service.
      7          
      8          
      9            Copyright 2006-2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           *                                             INCLUDES
     42           ***************************************************************************************************/
     43          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1
     44          #include "hal_defs.h"
     45          #include "hal_types.h"
     46          #include "hal_drivers.h"
     47          #include "hal_led.h"
     48          #include "osal.h"
     49          #include "hal_board.h"
     50          
     51          /***************************************************************************************************
     52           *                                             CONSTANTS
     53           ***************************************************************************************************/
     54          
     55          /***************************************************************************************************
     56           *                                              MACROS
     57           ***************************************************************************************************/
     58          
     59          /***************************************************************************************************
     60           *                                              TYPEDEFS
     61           ***************************************************************************************************/
     62          /* LED control structure */
     63          typedef struct {
     64            uint8 mode;       /* Operation mode */
     65            uint8 todo;       /* Blink cycles left */
     66            uint8 onPct;      /* On cycle percentage */
     67            uint16 time;      /* On/off cycle time (msec) */
     68            uint32 next;      /* Time for next change */
     69          } HalLedControl_t;
     70          
     71          typedef struct
     72          {
     73            HalLedControl_t HalLedControlTable[HAL_LED_DEFAULT_MAX_LEDS];
     74            uint8           sleepActive;
     75          } HalLedStatus_t;
     76          
     77          
     78          /***************************************************************************************************
     79           *                                           GLOBAL VARIABLES
     80           ***************************************************************************************************/
     81          
     82          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     83          static uint8 HalLedState;              // LED state at last set/clr/blink update
   \                     HalLedState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     84          
     85          #if HAL_LED == TRUE

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     86          static uint8 HalSleepLedState;         // LED state at last set/clr/blink update
   \                     HalSleepLedState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     87          static uint8 preBlinkState;            // Original State before going to blink mode
   \                     preBlinkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     88                                                 // bit 0, 1, 2, 3 represent led 0, 1, 2, 3
     89          #endif
     90          
     91          #ifdef BLINK_LEDS

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92            static HalLedStatus_t HalLedStatusControl;
   \                     HalLedStatusControl:
   \   000000                DS 37
   \   000025                REQUIRE __INIT_XDATA_Z
     93          #endif
     94          
     95          /***************************************************************************************************
     96           *                                            LOCAL FUNCTION
     97           ***************************************************************************************************/
     98          #if (HAL_LED == TRUE)
     99          void HalLedUpdate (void);
    100          void HalLedOnOff (uint8 leds, uint8 mode);
    101          #endif /* HAL_LED */
    102          
    103          /***************************************************************************************************
    104           *                                            FUNCTIONS - API
    105           ***************************************************************************************************/
    106          
    107          /***************************************************************************************************
    108           * @fn      HalLedInit
    109           *
    110           * @brief   Initialize LED Service
    111           *
    112           * @param   init - pointer to void that contains the initialized value
    113           *
    114           * @return  None
    115           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    116          void HalLedInit (void)
   \                     HalLedInit:
    117          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    118          #if (HAL_LED == TRUE)
    119            /* Initialize all LEDs to OFF */
    120            HalLedSet (HAL_LED_ALL, HAL_LED_MODE_OFF);
   \   000004                ; Setup parameters for call to function HalLedSet
   \   000004   7A00         MOV     R2,#0x0
   \   000006   790F         MOV     R1,#0xf
   \   000008   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   \   00000B   E9           MOV     A,R1
    121          #endif /* HAL_LED */
    122          #ifdef BLINK_LEDS
    123            /* Initialize sleepActive to FALSE */
    124            HalLedStatusControl.sleepActive = FALSE;
   \   00000C   90....       MOV     DPTR,#HalLedStatusControl + 36
   \   00000F   7400         MOV     A,#0x0
   \   000011   F0           MOVX    @DPTR,A
    125          #endif
    126          }
   \   000012   D083         POP     DPH
   \   000014   D082         POP     DPL
   \   000016   02....       LJMP    ?BRET
    127          
    128          /***************************************************************************************************
    129           * @fn      HalLedSet
    130           *
    131           * @brief   Tun ON/OFF/TOGGLE given LEDs
    132           *
    133           * @param   led - bit mask value of leds to be turned ON/OFF/TOGGLE
    134           *          mode - BLINK, FLASH, TOGGLE, ON, OFF
    135           * @return  None
    136           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    137          uint8 HalLedSet (uint8 leds, uint8 mode)
   \                     HalLedSet:
    138          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    139          
    140          #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
    141            uint8 led;
    142            HalLedControl_t *sts;
    143          
    144            switch (mode)
   \   000009   EF           MOV     A,R7
   \   00000A   602E         JZ      ??HalLedSet_0
   \   00000C   14           DEC     A
   \   00000D   602B         JZ      ??HalLedSet_0
   \   00000F   14           DEC     A
   \   000010   600A         JZ      ??HalLedSet_1
   \   000012   24FE         ADD     A,#-0x2
   \   000014   6015         JZ      ??HalLedSet_2
   \   000016   24FC         ADD     A,#-0x4
   \   000018   6020         JZ      ??HalLedSet_0
   \   00001A   806F         SJMP    ??HalLedSet_3
    145            {
    146              case HAL_LED_MODE_BLINK:
    147                /* Default blink, 1 time, D% duty cycle */
    148                HalLedBlink (leds, 1, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME);
   \                     ??HalLedSet_1:
   \   00001C                ; Setup parameters for call to function HalLedBlink
   \   00001C   7CE8         MOV     R4,#-0x18
   \   00001E   7D03         MOV     R5,#0x3
   \   000020   7B05         MOV     R3,#0x5
   \   000022   7A01         MOV     R2,#0x1
   \   000024   A9..         MOV     R1,?V0
   \   000026   12....       LCALL   ??HalLedBlink?relay  ; Banked call to: HalLedBlink
    149                break;
   \   000029   8060         SJMP    ??HalLedSet_3
    150          
    151              case HAL_LED_MODE_FLASH:
    152                /* Default flash, N times, D% duty cycle */
    153                HalLedBlink (leds, HAL_LED_DEFAULT_FLASH_COUNT, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME);
   \                     ??HalLedSet_2:
   \   00002B                ; Setup parameters for call to function HalLedBlink
   \   00002B   7CE8         MOV     R4,#-0x18
   \   00002D   7D03         MOV     R5,#0x3
   \   00002F   7B05         MOV     R3,#0x5
   \   000031   7A32         MOV     R2,#0x32
   \   000033   A9..         MOV     R1,?V0
   \   000035   12....       LCALL   ??HalLedBlink?relay  ; Banked call to: HalLedBlink
    154                break;
   \   000038   8051         SJMP    ??HalLedSet_3
    155          
    156              case HAL_LED_MODE_ON:
    157              case HAL_LED_MODE_OFF:
    158              case HAL_LED_MODE_TOGGLE:
    159          
    160                led = HAL_LED_1;
   \                     ??HalLedSet_0:
   \   00003A   7E01         MOV     R6,#0x1
    161                leds &= HAL_LED_ALL;
   \   00003C   53..0F       ANL     ?V0,#0xf
    162                sts = HalLedStatusControl.HalLedControlTable;
   \   00003F   75....       MOV     ?V2,#HalLedStatusControl & 0xff
   \   000042   75....       MOV     ?V3,#(HalLedStatusControl >> 8) & 0xff
    163          
    164                while (leds)
   \                     ??HalLedSet_4:
   \   000045   E5..         MOV     A,?V0
   \   000047   6042         JZ      ??HalLedSet_3
    165                {
    166                  if (leds & led)
   \   000049   E5..         MOV     A,?V0
   \   00004B   5E           ANL     A,R6
   \   00004C   602D         JZ      ??HalLedSet_5
    167                  {
    168                    if (mode != HAL_LED_MODE_TOGGLE)
   \   00004E   7408         MOV     A,#0x8
   \   000050   6F           XRL     A,R7
   \   000051   600E         JZ      ??HalLedSet_6
    169                    {
    170                      sts->mode = mode;  /* ON or OFF */
   \   000053   EF           MOV     A,R7
   \   000054   C0E0         PUSH    A
   \   000056   85..82       MOV     DPL,?V2
   \   000059   85..83       MOV     DPH,?V3
   \   00005C   D0E0         POP     A
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   800A         SJMP    ??HalLedSet_7
    171                    }
    172                    else
    173                    {
    174                      sts->mode ^= HAL_LED_MODE_ON;  /* Toggle */
   \                     ??HalLedSet_6:
   \   000061   85..82       MOV     DPL,?V2
   \   000064   85..83       MOV     DPH,?V3
   \   000067   E0           MOVX    A,@DPTR
   \   000068   6401         XRL     A,#0x1
   \   00006A   F0           MOVX    @DPTR,A
    175                    }
    176                    HalLedOnOff (led, sts->mode);
   \                     ??HalLedSet_7:
   \   00006B                ; Setup parameters for call to function HalLedOnOff
   \   00006B   85..82       MOV     DPL,?V2
   \   00006E   85..83       MOV     DPH,?V3
   \   000071   E0           MOVX    A,@DPTR
   \   000072   FA           MOV     R2,A
   \   000073   EE           MOV     A,R6
   \   000074   F9           MOV     R1,A
   \   000075   12....       LCALL   ??HalLedOnOff?relay  ; Banked call to: HalLedOnOff
    177                    leds ^= led;
   \   000078   EE           MOV     A,R6
   \   000079   62..         XRL     ?V0,A
    178                  }
    179                  led <<= 1;
   \                     ??HalLedSet_5:
   \   00007B   EE           MOV     A,R6
   \   00007C   C3           CLR     C
   \   00007D   33           RLC     A
   \   00007E   FE           MOV     R6,A
    180                  sts++;
   \   00007F   E5..         MOV     A,?V2
   \   000081   2409         ADD     A,#0x9
   \   000083   F5..         MOV     ?V2,A
   \   000085   50BE         JNC     ??HalLedSet_4
   \   000087   05..         INC     ?V3
   \   000089   80BA         SJMP    ??HalLedSet_4
    181                }
    182                break;
    183          
    184              default:
    185                break;
    186            }
    187          
    188          #elif (HAL_LED == TRUE)
    189            LedOnOff(leds, mode);
    190          #else
    191            // HAL LED is disabled, suppress unused argument warnings
    192            (void) leds;
    193            (void) mode;
    194          #endif /* BLINK_LEDS && HAL_LED   */
    195          
    196            return ( HalLedState );
   \                     ??HalLedSet_3:
   \   00008B   90....       MOV     DPTR,#HalLedState
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   F9           MOV     R1,A
   \   000090   7F04         MOV     R7,#0x4
   \   000092   02....       LJMP    ?BANKED_LEAVE_XDATA
    197          
    198          }
    199          
    200          /***************************************************************************************************
    201           * @fn      HalLedBlink
    202           *
    203           * @brief   Blink the leds
    204           *
    205           * @param   leds       - bit mask value of leds to be blinked
    206           *          numBlinks  - number of blinks
    207           *          percent    - the percentage in each period where the led
    208           *                       will be on
    209           *          period     - length of each cycle in milliseconds
    210           *
    211           * @return  None
    212           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    213          void HalLedBlink (uint8 leds, uint8 numBlinks, uint8 percent, uint16 period)
   \                     HalLedBlink:
    214          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V3,R2
   \   000009   8B..         MOV     ?V2,R3
   \   00000B   8C..         MOV     ?V4,R4
   \   00000D   8D..         MOV     ?V5,R5
    215          #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
    216            uint8 led;
    217            HalLedControl_t *sts;
    218          
    219            if (leds && percent && period)
   \   00000F   E5..         MOV     A,?V0
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??HalLedBlink_0 & 0xFFFF
   \   000016   E5..         MOV     A,?V2
   \   000018   7003         JNZ     $+5
   \   00001A   02....       LJMP    ??HalLedBlink_0 & 0xFFFF
   \   00001D   E5..         MOV     A,?V4
   \   00001F   45..         ORL     A,?V5
   \   000021   7003         JNZ     $+5
   \   000023   02....       LJMP    ??HalLedBlink_0 & 0xFFFF
    220            {
    221              if (percent < 100)
   \   000026   E5..         MOV     A,?V2
   \   000028   C3           CLR     C
   \   000029   9464         SUBB    A,#0x64
   \   00002B   4003         JC      $+5
   \   00002D   02....       LJMP    ??HalLedBlink_1 & 0xFFFF
    222              {
    223                led = HAL_LED_1;
   \   000030   75..01       MOV     ?V1,#0x1
    224                leds &= HAL_LED_ALL;
   \   000033   53..0F       ANL     ?V0,#0xf
    225                sts = HalLedStatusControl.HalLedControlTable;
   \   000036   7E..         MOV     R6,#HalLedStatusControl & 0xff
   \   000038   7F..         MOV     R7,#(HalLedStatusControl >> 8) & 0xff
    226          
    227                while (leds)
   \                     ??HalLedBlink_2:
   \   00003A   E5..         MOV     A,?V0
   \   00003C   7003         JNZ     $+5
   \   00003E   02....       LJMP    ??HalLedBlink_3 & 0xFFFF
    228                {
    229                  if (leds & led)
   \   000041   E5..         MOV     A,?V0
   \   000043   55..         ANL     A,?V1
   \   000045   606A         JZ      ??HalLedBlink_4
    230                  {
    231                    /* Store the current state of the led before going to blinking */
    232                    preBlinkState |= (led & HalLedState);
   \   000047   90....       MOV     DPTR,#HalLedState
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   55..         ANL     A,?V1
   \   00004D   F8           MOV     R0,A
   \   00004E   90....       MOV     DPTR,#preBlinkState
   \   000051   E0           MOVX    A,@DPTR
   \   000052   48           ORL     A,R0
   \   000053   F0           MOVX    @DPTR,A
    233          
    234                    sts->mode  = HAL_LED_MODE_OFF;                    /* Stop previous blink */
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   7400         MOV     A,#0x0
   \   00005A   F0           MOVX    @DPTR,A
    235                    sts->time  = period;                              /* Time for one on/off cycle */
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   E5..         MOV     A,?V4
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   E5..         MOV     A,?V5
   \   000068   F0           MOVX    @DPTR,A
    236                    sts->onPct = percent;                             /* % of cycle LED is on */
   \   000069   E5..         MOV     A,?V2
   \   00006B   C0E0         PUSH    A
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   D0E0         POP     A
   \   000075   F0           MOVX    @DPTR,A
    237                    sts->todo  = numBlinks;                           /* Number of blink cycles */
   \   000076   E5..         MOV     A,?V3
   \   000078   C0E0         PUSH    A
   \   00007A   8E82         MOV     DPL,R6
   \   00007C   8F83         MOV     DPH,R7
   \   00007E   A3           INC     DPTR
   \   00007F   D0E0         POP     A
   \   000081   F0           MOVX    @DPTR,A
    238                    if (!numBlinks) sts->mode |= HAL_LED_MODE_FLASH;  /* Continuous */
   \   000082   E5..         MOV     A,?V3
   \   000084   7008         JNZ     ??HalLedBlink_5
   \   000086   8E82         MOV     DPL,R6
   \   000088   8F83         MOV     DPH,R7
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   D2E2         SETB    0xE0 /* A   */.2
   \   00008D   F0           MOVX    @DPTR,A
    239                    sts->next = osal_GetSystemClock();                /* Start now */
   \                     ??HalLedBlink_5:
   \   00008E                ; Setup parameters for call to function osal_GetSystemClock
   \   00008E   12....       LCALL   ??osal_GetSystemClock?relay; Banked call to: osal_GetSystemClock
   \   000091   EA           MOV     A,R2
   \   000092   F8           MOV     R0,A
   \   000093   EB           MOV     A,R3
   \   000094   F9           MOV     R1,A
   \   000095   EC           MOV     A,R4
   \   000096   FA           MOV     R2,A
   \   000097   ED           MOV     A,R5
   \   000098   FB           MOV     R3,A
   \   000099   8E82         MOV     DPL,R6
   \   00009B   8F83         MOV     DPH,R7
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   12....       LCALL   ?XSTORE_R0123
    240                    sts->mode |= HAL_LED_MODE_BLINK;                  /* Enable blinking */
   \   0000A5   8E82         MOV     DPL,R6
   \   0000A7   8F83         MOV     DPH,R7
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   D2E1         SETB    0xE0 /* A   */.1
   \   0000AC   F0           MOVX    @DPTR,A
    241                    leds ^= led;
   \   0000AD   E5..         MOV     A,?V1
   \   0000AF   62..         XRL     ?V0,A
    242                  }
    243                  led <<= 1;
   \                     ??HalLedBlink_4:
   \   0000B1   E5..         MOV     A,?V1
   \   0000B3   C3           CLR     C
   \   0000B4   33           RLC     A
   \   0000B5   F5..         MOV     ?V1,A
    244                  sts++;
   \   0000B7   EE           MOV     A,R6
   \   0000B8   2409         ADD     A,#0x9
   \   0000BA   FE           MOV     R6,A
   \   0000BB   4003         JC      $+5
   \   0000BD   02....       LJMP    ??HalLedBlink_2 & 0xFFFF
   \   0000C0   0F           INC     R7
   \   0000C1   02....       LJMP    ??HalLedBlink_2 & 0xFFFF
    245                }
    246                osal_set_event (Hal_TaskID, HAL_LED_BLINK_EVENT);
   \                     ??HalLedBlink_3:
   \   0000C4                ; Setup parameters for call to function osal_set_event
   \   0000C4   7A02         MOV     R2,#0x2
   \   0000C6   7B00         MOV     R3,#0x0
   \   0000C8   90....       MOV     DPTR,#Hal_TaskID
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   F9           MOV     R1,A
   \   0000CD   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   0000D0   E9           MOV     A,R1
   \   0000D1   8012         SJMP    ??HalLedBlink_6
    247              }
    248              else
    249              {
    250                HalLedSet (leds, HAL_LED_MODE_ON);                    /* >= 100%, turn on */
   \                     ??HalLedBlink_1:
   \   0000D3                ; Setup parameters for call to function HalLedSet
   \   0000D3   7A01         MOV     R2,#0x1
   \   0000D5   A9..         MOV     R1,?V0
   \   0000D7   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   \   0000DA   E9           MOV     A,R1
   \   0000DB   8008         SJMP    ??HalLedBlink_6
    251              }
    252            }
    253            else
    254            {
    255              HalLedSet (leds, HAL_LED_MODE_OFF);                     /* No on time, turn off */
   \                     ??HalLedBlink_0:
   \   0000DD                ; Setup parameters for call to function HalLedSet
   \   0000DD   7A00         MOV     R2,#0x0
   \   0000DF   A9..         MOV     R1,?V0
   \   0000E1   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   \   0000E4   E9           MOV     A,R1
    256            }
    257          #elif (HAL_LED == TRUE)
    258            percent = (leds & HalLedState) ? HAL_LED_MODE_OFF : HAL_LED_MODE_ON;
    259            HalLedOnOff (leds, percent);                              /* Toggle */
    260          #else
    261            // HAL LED is disabled, suppress unused argument warnings
    262            (void) leds;
    263            (void) numBlinks;
    264            (void) percent;
    265            (void) period;
    266          #endif /* BLINK_LEDS && HAL_LED */
    267          }
   \                     ??HalLedBlink_6:
   \   0000E5   7F06         MOV     R7,#0x6
   \   0000E7   02....       LJMP    ?BANKED_LEAVE_XDATA
    268          
    269          #if (HAL_LED == TRUE)
    270          /***************************************************************************************************
    271           * @fn      HalLedUpdate
    272           *
    273           * @brief   Update leds to work with blink
    274           *
    275           * @param   none
    276           *
    277           * @return  none
    278           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    279          void HalLedUpdate (void)
   \                     HalLedUpdate:
    280          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    281            uint8 led;
    282            uint8 pct;
    283            uint8 leds;
    284            HalLedControl_t *sts;
    285            uint32 time;
    286            uint16 next;
    287            uint16 wait;
    288          
    289            next = 0;
   \   00000A   7405         MOV     A,#0x5
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   7400         MOV     A,#0x0
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   7400         MOV     A,#0x0
   \   000015   F0           MOVX    @DPTR,A
    290            led  = HAL_LED_1;
   \   000016   85..82       MOV     DPL,?XSP + 0
   \   000019   85..83       MOV     DPH,?XSP + 1
   \   00001C   7401         MOV     A,#0x1
   \   00001E   F0           MOVX    @DPTR,A
    291            leds = HAL_LED_ALL;
   \   00001F   7401         MOV     A,#0x1
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   740F         MOV     A,#0xf
   \   000026   F0           MOVX    @DPTR,A
    292            sts = HalLedStatusControl.HalLedControlTable;
   \   000027   7E..         MOV     R6,#HalLedStatusControl & 0xff
   \   000029   7F..         MOV     R7,#(HalLedStatusControl >> 8) & 0xff
    293          
    294            /* Check if sleep is active or not */
    295            if (!HalLedStatusControl.sleepActive)
   \   00002B   90....       MOV     DPTR,#HalLedStatusControl + 36
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6003         JZ      $+5
   \   000031   02....       LJMP    ??HalLedUpdate_0 & 0xFFFF
    296            {
    297              while (leds)
   \                     ??HalLedUpdate_1:
   \   000034   7401         MOV     A,#0x1
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   7003         JNZ     $+5
   \   00003C   02....       LJMP    ??HalLedUpdate_2 & 0xFFFF
    298              {
    299                if (leds & led)
   \   00003F   85..82       MOV     DPL,?XSP + 0
   \   000042   85..83       MOV     DPH,?XSP + 1
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F8           MOV     R0,A
   \   000047   7401         MOV     A,#0x1
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   58           ANL     A,R0
   \   00004E   7003         JNZ     $+5
   \   000050   02....       LJMP    ??HalLedUpdate_3 & 0xFFFF
    300                {
    301                  if (sts->mode & HAL_LED_MODE_BLINK)
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   E0           MOVX    A,@DPTR
   \   000058   A2E1         MOV     C,0xE0 /* A   */.1
   \   00005A   4003         JC      $+5
   \   00005C   02....       LJMP    ??HalLedUpdate_4 & 0xFFFF
    302                  {
    303                    time = osal_GetSystemClock();
   \   00005F                ; Setup parameters for call to function osal_GetSystemClock
   \   00005F   12....       LCALL   ??osal_GetSystemClock?relay; Banked call to: osal_GetSystemClock
   \   000062   EA           MOV     A,R2
   \   000063   F8           MOV     R0,A
   \   000064   EB           MOV     A,R3
   \   000065   F9           MOV     R1,A
   \   000066   EC           MOV     A,R4
   \   000067   FA           MOV     R2,A
   \   000068   ED           MOV     A,R5
   \   000069   FB           MOV     R3,A
   \   00006A   7407         MOV     A,#0x7
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   12....       LCALL   ?XSTORE_R0123
    304                    if (time >= sts->next)
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   78..         MOV     R0,#?V0
   \   00007D   12....       LCALL   ?L_MOV_X
   \   000080   7407         MOV     A,#0x7
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   78..         MOV     R0,#?V0
   \   000087   12....       LCALL   ?UL_GT_X
   \   00008A   5003         JNC     $+5
   \   00008C   02....       LJMP    ??HalLedUpdate_5 & 0xFFFF
    305                    {
    306                      if (sts->mode & HAL_LED_MODE_ON)
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   E0           MOVX    A,@DPTR
   \   000094   A2E0         MOV     C,0xE0 /* A   */.0
   \   000096   504F         JNC     ??HalLedUpdate_6
    307                      {
    308                        pct = 100 - sts->onPct;               /* Percentage of cycle for off */
   \   000098   8E82         MOV     DPL,R6
   \   00009A   8F83         MOV     DPH,R7
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   F8           MOV     R0,A
   \   0000A0   7464         MOV     A,#0x64
   \   0000A2   C3           CLR     C
   \   0000A3   98           SUBB    A,R0
   \   0000A4   C0E0         PUSH    A
   \   0000A6   7404         MOV     A,#0x4
   \   0000A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AB   D0E0         POP     A
   \   0000AD   F0           MOVX    @DPTR,A
    309                        sts->mode &= ~HAL_LED_MODE_ON;        /* Say it's not on */
   \   0000AE   8E82         MOV     DPL,R6
   \   0000B0   8F83         MOV     DPH,R7
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   C2E0         CLR     0xE0 /* A   */.0
   \   0000B5   F0           MOVX    @DPTR,A
    310                        HalLedOnOff (led, HAL_LED_MODE_OFF);  /* Turn it off */
   \   0000B6                ; Setup parameters for call to function HalLedOnOff
   \   0000B6   7A00         MOV     R2,#0x0
   \   0000B8   85..82       MOV     DPL,?XSP + 0
   \   0000BB   85..83       MOV     DPH,?XSP + 1
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   F9           MOV     R1,A
   \   0000C0   12....       LCALL   ??HalLedOnOff?relay  ; Banked call to: HalLedOnOff
    311          
    312                        if (!(sts->mode & HAL_LED_MODE_FLASH))
   \   0000C3   8E82         MOV     DPL,R6
   \   0000C5   8F83         MOV     DPH,R7
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   A2E2         MOV     C,0xE0 /* A   */.2
   \   0000CA   4041         JC      ??HalLedUpdate_7
    313                        {
    314                          sts->todo--;                        /* Not continuous, reduce count */
   \   0000CC   8E82         MOV     DPL,R6
   \   0000CE   8F83         MOV     DPH,R7
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   24FF         ADD     A,#-0x1
   \   0000D4   F0           MOVX    @DPTR,A
    315                          if (!sts->todo)
   \   0000D5   8E82         MOV     DPL,R6
   \   0000D7   8F83         MOV     DPH,R7
   \   0000D9   A3           INC     DPTR
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   7030         JNZ     ??HalLedUpdate_7
    316                          {
    317                            sts->mode ^= HAL_LED_MODE_BLINK;  /* No more blinks */
   \   0000DD   8E82         MOV     DPL,R6
   \   0000DF   8F83         MOV     DPH,R7
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   6402         XRL     A,#0x2
   \   0000E4   F0           MOVX    @DPTR,A
   \   0000E5   8026         SJMP    ??HalLedUpdate_7
    318                          }
    319                        }
    320                      }
    321                      else
    322                      {
    323                        pct = sts->onPct;                     /* Percentage of cycle for on */
   \                     ??HalLedUpdate_6:
   \   0000E7   8E82         MOV     DPL,R6
   \   0000E9   8F83         MOV     DPH,R7
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   C0E0         PUSH    A
   \   0000F0   7404         MOV     A,#0x4
   \   0000F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F5   D0E0         POP     A
   \   0000F7   F0           MOVX    @DPTR,A
    324                        sts->mode |= HAL_LED_MODE_ON;         /* Say it's on */
   \   0000F8   8E82         MOV     DPL,R6
   \   0000FA   8F83         MOV     DPH,R7
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   D2E0         SETB    0xE0 /* A   */.0
   \   0000FF   F0           MOVX    @DPTR,A
    325                        HalLedOnOff (led, HAL_LED_MODE_ON);   /* Turn it on */
   \   000100                ; Setup parameters for call to function HalLedOnOff
   \   000100   7A01         MOV     R2,#0x1
   \   000102   85..82       MOV     DPL,?XSP + 0
   \   000105   85..83       MOV     DPH,?XSP + 1
   \   000108   E0           MOVX    A,@DPTR
   \   000109   F9           MOV     R1,A
   \   00010A   12....       LCALL   ??HalLedOnOff?relay  ; Banked call to: HalLedOnOff
    326                      }
    327          
    328                      if (sts->mode & HAL_LED_MODE_BLINK)
   \                     ??HalLedUpdate_7:
   \   00010D   8E82         MOV     DPL,R6
   \   00010F   8F83         MOV     DPH,R7
   \   000111   E0           MOVX    A,@DPTR
   \   000112   A2E1         MOV     C,0xE0 /* A   */.1
   \   000114   5077         JNC     ??HalLedUpdate_8
    329                      {
    330                        wait = (((uint32)pct * (uint32)sts->time) / 100);
   \   000116   7404         MOV     A,#0x4
   \   000118   12....       LCALL   ?XSTACK_DISP0_8
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   F5..         MOV     ?V0,A
   \   00011E   E4           CLR     A
   \   00011F   F5..         MOV     ?V1,A
   \   000121   F5..         MOV     ?V2,A
   \   000123   F5..         MOV     ?V3,A
   \   000125   8E82         MOV     DPL,R6
   \   000127   8F83         MOV     DPH,R7
   \   000129   A3           INC     DPTR
   \   00012A   A3           INC     DPTR
   \   00012B   A3           INC     DPTR
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   F5..         MOV     ?V4,A
   \   00012F   A3           INC     DPTR
   \   000130   E0           MOVX    A,@DPTR
   \   000131   F5..         MOV     ?V5,A
   \   000133   E4           CLR     A
   \   000134   F5..         MOV     ?V6,A
   \   000136   F5..         MOV     ?V7,A
   \   000138   78..         MOV     R0,#?V0
   \   00013A   79..         MOV     R1,#?V4
   \   00013C   12....       LCALL   ?L_MUL
   \   00013F   90....       MOV     DPTR,#__Constant_64
   \   000142   78..         MOV     R0,#?V4
   \   000144   12....       LCALL   ?L_MOV_X
   \   000147   78..         MOV     R0,#?V0
   \   000149   79..         MOV     R1,#?V4
   \   00014B   12....       LCALL   ?UL_DIV_MOD
   \   00014E   7402         MOV     A,#0x2
   \   000150   12....       LCALL   ?XSTACK_DISP0_8
   \   000153   E5..         MOV     A,?V0
   \   000155   F0           MOVX    @DPTR,A
   \   000156   A3           INC     DPTR
   \   000157   E5..         MOV     A,?V1
   \   000159   F0           MOVX    @DPTR,A
    331                        sts->next = time + wait;
   \   00015A   7407         MOV     A,#0x7
   \   00015C   12....       LCALL   ?XSTACK_DISP0_8
   \   00015F   C082         PUSH    DPL
   \   000161   C083         PUSH    DPH
   \   000163   7402         MOV     A,#0x2
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   E0           MOVX    A,@DPTR
   \   000169   F5..         MOV     ?V0,A
   \   00016B   A3           INC     DPTR
   \   00016C   E0           MOVX    A,@DPTR
   \   00016D   F5..         MOV     ?V1,A
   \   00016F   E4           CLR     A
   \   000170   F5..         MOV     ?V2,A
   \   000172   F5..         MOV     ?V3,A
   \   000174   D083         POP     DPH
   \   000176   D082         POP     DPL
   \   000178   78..         MOV     R0,#?V0
   \   00017A   12....       LCALL   ?L_ADD_X
   \   00017D   8E82         MOV     DPL,R6
   \   00017F   8F83         MOV     DPH,R7
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   A3           INC     DPTR
   \   000184   A3           INC     DPTR
   \   000185   A3           INC     DPTR
   \   000186   78..         MOV     R0,#?V0
   \   000188   12....       LCALL   ?L_MOV_TO_X
   \   00018B   806C         SJMP    ??HalLedUpdate_9
    332                      }
    333                      else
    334                      {
    335                        /* no more blink, no more wait */
    336                        wait = 0;
   \                     ??HalLedUpdate_8:
   \   00018D   7402         MOV     A,#0x2
   \   00018F   12....       LCALL   ?XSTACK_DISP0_8
   \   000192   7400         MOV     A,#0x0
   \   000194   F0           MOVX    @DPTR,A
   \   000195   A3           INC     DPTR
   \   000196   7400         MOV     A,#0x0
   \   000198   F0           MOVX    @DPTR,A
    337                        /* After blinking, set the LED back to the state before it blinks */
    338                        HalLedSet (led, ((preBlinkState & led)!=0)?HAL_LED_MODE_ON:HAL_LED_MODE_OFF);
   \   000199   85..82       MOV     DPL,?XSP + 0
   \   00019C   85..83       MOV     DPH,?XSP + 1
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   F8           MOV     R0,A
   \   0001A1   90....       MOV     DPTR,#preBlinkState
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   58           ANL     A,R0
   \   0001A6   6004         JZ      ??HalLedUpdate_10
   \   0001A8   7A01         MOV     R2,#0x1
   \   0001AA   8002         SJMP    ??HalLedUpdate_11
   \                     ??HalLedUpdate_10:
   \   0001AC   7A00         MOV     R2,#0x0
   \                     ??HalLedUpdate_11:
   \   0001AE                ; Setup parameters for call to function HalLedSet
   \   0001AE   85..82       MOV     DPL,?XSP + 0
   \   0001B1   85..83       MOV     DPH,?XSP + 1
   \   0001B4   E0           MOVX    A,@DPTR
   \   0001B5   F9           MOV     R1,A
   \   0001B6   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   \   0001B9   E9           MOV     A,R1
    339                        /* Clear the saved bit */
    340                        preBlinkState &= (led ^ 0xFF);
   \   0001BA   85..82       MOV     DPL,?XSP + 0
   \   0001BD   85..83       MOV     DPH,?XSP + 1
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   64FF         XRL     A,#0xff
   \   0001C3   F8           MOV     R0,A
   \   0001C4   90....       MOV     DPTR,#preBlinkState
   \   0001C7   E0           MOVX    A,@DPTR
   \   0001C8   58           ANL     A,R0
   \   0001C9   F0           MOVX    @DPTR,A
   \   0001CA   802D         SJMP    ??HalLedUpdate_9
    341                      }
    342                    }
    343                    else
    344                    {
    345                      wait = sts->next - time;  /* Time left */
   \                     ??HalLedUpdate_5:
   \   0001CC   8E82         MOV     DPL,R6
   \   0001CE   8F83         MOV     DPH,R7
   \   0001D0   A3           INC     DPTR
   \   0001D1   A3           INC     DPTR
   \   0001D2   A3           INC     DPTR
   \   0001D3   A3           INC     DPTR
   \   0001D4   A3           INC     DPTR
   \   0001D5   78..         MOV     R0,#?V4
   \   0001D7   12....       LCALL   ?L_MOV_X
   \   0001DA   7407         MOV     A,#0x7
   \   0001DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DF   78..         MOV     R0,#?V0
   \   0001E1   12....       LCALL   ?L_MOV_X
   \   0001E4   E5..         MOV     A,?V4
   \   0001E6   C3           CLR     C
   \   0001E7   95..         SUBB    A,?V0
   \   0001E9   F8           MOV     R0,A
   \   0001EA   E5..         MOV     A,?V5
   \   0001EC   95..         SUBB    A,?V1
   \   0001EE   F9           MOV     R1,A
   \   0001EF   7402         MOV     A,#0x2
   \   0001F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F4   E8           MOV     A,R0
   \   0001F5   F0           MOVX    @DPTR,A
   \   0001F6   A3           INC     DPTR
   \   0001F7   E9           MOV     A,R1
   \   0001F8   F0           MOVX    @DPTR,A
    346                    }
    347          
    348                    if (!next || ( wait && (wait < next) ))
   \                     ??HalLedUpdate_9:
   \   0001F9   7405         MOV     A,#0x5
   \   0001FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FE   E0           MOVX    A,@DPTR
   \   0001FF   F8           MOV     R0,A
   \   000200   A3           INC     DPTR
   \   000201   E0           MOVX    A,@DPTR
   \   000202   F9           MOV     R1,A
   \   000203   E8           MOV     A,R0
   \   000204   49           ORL     A,R1
   \   000205   602D         JZ      ??HalLedUpdate_12
   \   000207   7402         MOV     A,#0x2
   \   000209   12....       LCALL   ?XSTACK_DISP0_8
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   F8           MOV     R0,A
   \   00020E   A3           INC     DPTR
   \   00020F   E0           MOVX    A,@DPTR
   \   000210   F9           MOV     R1,A
   \   000211   E8           MOV     A,R0
   \   000212   49           ORL     A,R1
   \   000213   6033         JZ      ??HalLedUpdate_4
   \   000215   7402         MOV     A,#0x2
   \   000217   12....       LCALL   ?XSTACK_DISP0_8
   \   00021A   C082         PUSH    DPL
   \   00021C   C083         PUSH    DPH
   \   00021E   7405         MOV     A,#0x5
   \   000220   12....       LCALL   ?XSTACK_DISP0_8
   \   000223   E0           MOVX    A,@DPTR
   \   000224   F8           MOV     R0,A
   \   000225   A3           INC     DPTR
   \   000226   E0           MOVX    A,@DPTR
   \   000227   F9           MOV     R1,A
   \   000228   D083         POP     DPH
   \   00022A   D082         POP     DPL
   \   00022C   C3           CLR     C
   \   00022D   E0           MOVX    A,@DPTR
   \   00022E   98           SUBB    A,R0
   \   00022F   A3           INC     DPTR
   \   000230   E0           MOVX    A,@DPTR
   \   000231   99           SUBB    A,R1
   \   000232   5014         JNC     ??HalLedUpdate_4
    349                    {
    350                      next = wait;
   \                     ??HalLedUpdate_12:
   \   000234   7402         MOV     A,#0x2
   \   000236   12....       LCALL   ?XSTACK_DISP0_8
   \   000239   E0           MOVX    A,@DPTR
   \   00023A   F8           MOV     R0,A
   \   00023B   A3           INC     DPTR
   \   00023C   E0           MOVX    A,@DPTR
   \   00023D   F9           MOV     R1,A
   \   00023E   7405         MOV     A,#0x5
   \   000240   12....       LCALL   ?XSTACK_DISP0_8
   \   000243   E8           MOV     A,R0
   \   000244   F0           MOVX    @DPTR,A
   \   000245   A3           INC     DPTR
   \   000246   E9           MOV     A,R1
   \   000247   F0           MOVX    @DPTR,A
    351                    }
    352                  }
    353                  leds ^= led;
   \                     ??HalLedUpdate_4:
   \   000248   85..82       MOV     DPL,?XSP + 0
   \   00024B   85..83       MOV     DPH,?XSP + 1
   \   00024E   E0           MOVX    A,@DPTR
   \   00024F   F8           MOV     R0,A
   \   000250   7401         MOV     A,#0x1
   \   000252   12....       LCALL   ?XSTACK_DISP0_8
   \   000255   E0           MOVX    A,@DPTR
   \   000256   68           XRL     A,R0
   \   000257   F0           MOVX    @DPTR,A
    354                }
    355                led <<= 1;
   \                     ??HalLedUpdate_3:
   \   000258   85..82       MOV     DPL,?XSP + 0
   \   00025B   85..83       MOV     DPH,?XSP + 1
   \   00025E   E0           MOVX    A,@DPTR
   \   00025F   C3           CLR     C
   \   000260   33           RLC     A
   \   000261   C0E0         PUSH    A
   \   000263   85..82       MOV     DPL,?XSP + 0
   \   000266   85..83       MOV     DPH,?XSP + 1
   \   000269   D0E0         POP     A
   \   00026B   F0           MOVX    @DPTR,A
    356                sts++;
   \   00026C   EE           MOV     A,R6
   \   00026D   2409         ADD     A,#0x9
   \   00026F   FE           MOV     R6,A
   \   000270   5001         JNC     ??HalLedUpdate_13
   \   000272   0F           INC     R7
   \                     ??HalLedUpdate_13:
   \   000273   02....       LJMP    ??HalLedUpdate_1 & 0xFFFF
    357              }
    358          
    359              if (next)
   \                     ??HalLedUpdate_2:
   \   000276   7405         MOV     A,#0x5
   \   000278   12....       LCALL   ?XSTACK_DISP0_8
   \   00027B   E0           MOVX    A,@DPTR
   \   00027C   F8           MOV     R0,A
   \   00027D   A3           INC     DPTR
   \   00027E   E0           MOVX    A,@DPTR
   \   00027F   F9           MOV     R1,A
   \   000280   E8           MOV     A,R0
   \   000281   49           ORL     A,R1
   \   000282   6017         JZ      ??HalLedUpdate_0
    360              {
    361                osal_start_timerEx(Hal_TaskID, HAL_LED_BLINK_EVENT, next);   /* Schedule event */
   \   000284                ; Setup parameters for call to function osal_start_timerEx
   \   000284   7405         MOV     A,#0x5
   \   000286   12....       LCALL   ?XSTACK_DISP0_8
   \   000289   E0           MOVX    A,@DPTR
   \   00028A   FC           MOV     R4,A
   \   00028B   A3           INC     DPTR
   \   00028C   E0           MOVX    A,@DPTR
   \   00028D   FD           MOV     R5,A
   \   00028E   7A02         MOV     R2,#0x2
   \   000290   7B00         MOV     R3,#0x0
   \   000292   90....       MOV     DPTR,#Hal_TaskID
   \   000295   E0           MOVX    A,@DPTR
   \   000296   F9           MOV     R1,A
   \   000297   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   00029A   E9           MOV     A,R1
    362              }
    363            }
    364          }
   \                     ??HalLedUpdate_0:
   \   00029B   740B         MOV     A,#0xb
   \   00029D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002A0   7F08         MOV     R7,#0x8
   \   0002A2   02....       LJMP    ?BANKED_LEAVE_XDATA
    365          
    366          /***************************************************************************************************
    367           * @fn      HalLedOnOff
    368           *
    369           * @brief   Turns specified LED ON or OFF
    370           *
    371           * @param   leds - LED bit mask
    372           *          mode - LED_ON,LED_OFF,
    373           *
    374           * @return  none
    375           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    376          void HalLedOnOff (uint8 leds, uint8 mode)
   \                     HalLedOnOff:
    377          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    378            if (leds & HAL_LED_1)
   \   000004   E9           MOV     A,R1
   \   000005   A2E0         MOV     C,0xE0 /* A   */.0
   \   000007   500B         JNC     ??HalLedOnOff_0
    379            {
    380              if (mode == HAL_LED_MODE_ON)
   \   000009   7401         MOV     A,#0x1
   \   00000B   6A           XRL     A,R2
   \   00000C   7004         JNZ     ??HalLedOnOff_1
    381              {
    382                HAL_TURN_ON_LED1();
   \   00000E   C290         CLR     0x90.0
   \   000010   8002         SJMP    ??HalLedOnOff_0
    383              }
    384              else
    385              {
    386                HAL_TURN_OFF_LED1();
   \                     ??HalLedOnOff_1:
   \   000012   D290         SETB    0x90.0
    387              }
    388            }
    389          
    390            if (leds & HAL_LED_2)
   \                     ??HalLedOnOff_0:
   \   000014   E9           MOV     A,R1
   \   000015   A2E1         MOV     C,0xE0 /* A   */.1
   \   000017   500B         JNC     ??HalLedOnOff_2
    391            {
    392              if (mode == HAL_LED_MODE_ON)
   \   000019   7401         MOV     A,#0x1
   \   00001B   6A           XRL     A,R2
   \   00001C   7004         JNZ     ??HalLedOnOff_3
    393              {
    394                HAL_TURN_ON_LED2();
   \   00001E   C291         CLR     0x90.1
   \   000020   8002         SJMP    ??HalLedOnOff_2
    395              }
    396              else
    397              {
    398                HAL_TURN_OFF_LED2();
   \                     ??HalLedOnOff_3:
   \   000022   D291         SETB    0x90.1
    399              }
    400            }
    401          
    402            if (leds & HAL_LED_3)
   \                     ??HalLedOnOff_2:
   \   000024   E9           MOV     A,R1
   \   000025   A2E2         MOV     C,0xE0 /* A   */.2
   \   000027   500B         JNC     ??HalLedOnOff_4
    403            {
    404          #ifndef GreenHouse
    405              if (mode == HAL_LED_MODE_ON)
   \   000029   7401         MOV     A,#0x1
   \   00002B   6A           XRL     A,R2
   \   00002C   7004         JNZ     ??HalLedOnOff_5
    406              {
    407                HAL_TURN_ON_LED3();
   \   00002E   C292         CLR     0x90.2
   \   000030   8002         SJMP    ??HalLedOnOff_4
    408              }
    409              else
    410              {
    411                HAL_TURN_OFF_LED3();
   \                     ??HalLedOnOff_5:
   \   000032   D292         SETB    0x90.2
    412              }
    413          #endif
    414            }
    415          
    416            if (leds & HAL_LED_4)
   \                     ??HalLedOnOff_4:
   \   000034   E9           MOV     A,R1
   \   000035   A2E3         MOV     C,0xE0 /* A   */.3
   \   000037   500B         JNC     ??HalLedOnOff_6
    417            {
    418              if (mode == HAL_LED_MODE_ON)
   \   000039   7401         MOV     A,#0x1
   \   00003B   6A           XRL     A,R2
   \   00003C   7004         JNZ     ??HalLedOnOff_7
    419              {
    420                HAL_TURN_ON_LED4();
   \   00003E   C2A0         CLR     0xa0.0
   \   000040   8002         SJMP    ??HalLedOnOff_6
    421              }
    422              else
    423              {
    424                HAL_TURN_OFF_LED4();
   \                     ??HalLedOnOff_7:
   \   000042   D2A0         SETB    0xa0.0
    425              }
    426            }
    427          
    428            /* Remember current state */
    429            if (mode)
   \                     ??HalLedOnOff_6:
   \   000044   EA           MOV     A,R2
   \   000045   6008         JZ      ??HalLedOnOff_8
    430            {
    431              HalLedState |= leds;
   \   000047   90....       MOV     DPTR,#HalLedState
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   49           ORL     A,R1
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   800A         SJMP    ??HalLedOnOff_9
    432            }
    433            else
    434            {
    435              HalLedState &= (leds ^ 0xFF);
   \                     ??HalLedOnOff_8:
   \   00004F   74FF         MOV     A,#-0x1
   \   000051   69           XRL     A,R1
   \   000052   F8           MOV     R0,A
   \   000053   90....       MOV     DPTR,#HalLedState
   \   000056   E0           MOVX    A,@DPTR
   \   000057   58           ANL     A,R0
   \   000058   F0           MOVX    @DPTR,A
    436            }
    437          }
   \                     ??HalLedOnOff_9:
   \   000059   D083         POP     DPH
   \   00005B   D082         POP     DPL
   \   00005D   02....       LJMP    ?BRET
   \   000060                REQUIRE _A_P1
   \   000060                REQUIRE _A_P2
    438          #endif /* HAL_LED */
    439          
    440          /***************************************************************************************************
    441           * @fn      HalGetLedState
    442           *
    443           * @brief   Dim LED2 - Dim (set level) of LED2
    444           *
    445           * @param   none
    446           *
    447           * @return  led state
    448           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    449          uint8 HalLedGetState ()
   \                     HalLedGetState:
    450          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    451          #if (HAL_LED == TRUE)
    452            return HalLedState;
   \   000004   90....       MOV     DPTR,#HalLedState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   D083         POP     DPH
   \   00000B   D082         POP     DPL
   \   00000D   02....       LJMP    ?BRET
    453          #else
    454            return 0;
    455          #endif
    456          }
    457          
    458          /***************************************************************************************************
    459           * @fn      HalLedEnterSleep
    460           *
    461           * @brief   Store current LEDs state before sleep
    462           *
    463           * @param   none
    464           *
    465           * @return  none
    466           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    467          void HalLedEnterSleep( void )
   \                     HalLedEnterSleep:
    468          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    469          #ifdef BLINK_LEDS
    470            /* Sleep ON */
    471            HalLedStatusControl.sleepActive = TRUE;
   \   000004   90....       MOV     DPTR,#HalLedStatusControl + 36
   \   000007   7401         MOV     A,#0x1
   \   000009   F0           MOVX    @DPTR,A
    472          #endif /* BLINK_LEDS */
    473          
    474          #if (HAL_LED == TRUE)
    475            /* Save the state of each led */
    476            HalSleepLedState = 0;
   \   00000A   90....       MOV     DPTR,#HalSleepLedState
   \   00000D   7400         MOV     A,#0x0
   \   00000F   F0           MOVX    @DPTR,A
    477            HalSleepLedState |= HAL_STATE_LED1();
   \   000010   D2F0         SETB    B.0
   \   000012   A290         MOV     C,0x90.0
   \   000014   30F001       JNB     B.0,??HalLedEnterSleep_0
   \   000017   B3           CPL     C
   \                     ??HalLedEnterSleep_0:
   \   000018   E4           CLR     A
   \   000019   33           RLC     A
   \   00001A   F8           MOV     R0,A
   \   00001B   90....       MOV     DPTR,#HalSleepLedState
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   48           ORL     A,R0
   \   000020   F0           MOVX    @DPTR,A
    478            HalSleepLedState |= HAL_STATE_LED2() << 1;
   \   000021   D2F0         SETB    B.0
   \   000023   A291         MOV     C,0x90.1
   \   000025   30F001       JNB     B.0,??HalLedEnterSleep_1
   \   000028   B3           CPL     C
   \                     ??HalLedEnterSleep_1:
   \   000029   E4           CLR     A
   \   00002A   33           RLC     A
   \   00002B   C3           CLR     C
   \   00002C   33           RLC     A
   \   00002D   F8           MOV     R0,A
   \   00002E   90....       MOV     DPTR,#HalSleepLedState
   \   000031   E0           MOVX    A,@DPTR
   \   000032   48           ORL     A,R0
   \   000033   F0           MOVX    @DPTR,A
    479            HalSleepLedState |= HAL_STATE_LED3() << 2;
   \   000034   D2F0         SETB    B.0
   \   000036   A292         MOV     C,0x90.2
   \   000038   30F001       JNB     B.0,??HalLedEnterSleep_2
   \   00003B   B3           CPL     C
   \                     ??HalLedEnterSleep_2:
   \   00003C   E4           CLR     A
   \   00003D   33           RLC     A
   \   00003E   33           RLC     A
   \   00003F   33           RLC     A
   \   000040   54FC         ANL     A,#0xfc
   \   000042   F8           MOV     R0,A
   \   000043   90....       MOV     DPTR,#HalSleepLedState
   \   000046   E0           MOVX    A,@DPTR
   \   000047   48           ORL     A,R0
   \   000048   F0           MOVX    @DPTR,A
    480            HalSleepLedState |= HAL_STATE_LED4() << 3;
   \   000049   D2F0         SETB    B.0
   \   00004B   A2A0         MOV     C,0xa0.0
   \   00004D   30F001       JNB     B.0,??HalLedEnterSleep_3
   \   000050   B3           CPL     C
   \                     ??HalLedEnterSleep_3:
   \   000051   E4           CLR     A
   \   000052   33           RLC     A
   \   000053   33           RLC     A
   \   000054   33           RLC     A
   \   000055   33           RLC     A
   \   000056   54F8         ANL     A,#0xf8
   \   000058   F8           MOV     R0,A
   \   000059   90....       MOV     DPTR,#HalSleepLedState
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   48           ORL     A,R0
   \   00005E   F0           MOVX    @DPTR,A
    481          
    482            /* TURN OFF all LEDs to save power */
    483            HalLedOnOff (HAL_LED_ALL, HAL_LED_MODE_OFF);
   \   00005F                ; Setup parameters for call to function HalLedOnOff
   \   00005F   7A00         MOV     R2,#0x0
   \   000061   790F         MOV     R1,#0xf
   \   000063   12....       LCALL   ??HalLedOnOff?relay  ; Banked call to: HalLedOnOff
    484          #endif /* HAL_LED */
    485          
    486          }
   \   000066   D083         POP     DPH
   \   000068   D082         POP     DPL
   \   00006A   02....       LJMP    ?BRET
   \   00006D                REQUIRE _A_P1
   \   00006D                REQUIRE _A_P2
    487          
    488          /***************************************************************************************************
    489           * @fn      HalLedExitSleep
    490           *
    491           * @brief   Restore current LEDs state after sleep
    492           *
    493           * @param   none
    494           *
    495           * @return  none
    496           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    497          void HalLedExitSleep( void )
   \                     HalLedExitSleep:
    498          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    499          #if (HAL_LED == TRUE)
    500            /* Load back the saved state */
    501            HalLedOnOff(HalSleepLedState, HAL_LED_MODE_ON);
   \   000004                ; Setup parameters for call to function HalLedOnOff
   \   000004   7A01         MOV     R2,#0x1
   \   000006   90....       MOV     DPTR,#HalSleepLedState
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   ??HalLedOnOff?relay  ; Banked call to: HalLedOnOff
    502          
    503            /* Restart - This takes care BLINKING LEDS */
    504            HalLedUpdate();
   \   00000E                ; Setup parameters for call to function HalLedUpdate
   \   00000E   12....       LCALL   ??HalLedUpdate?relay ; Banked call to: HalLedUpdate
    505          #endif /* HAL_LED */
    506          
    507          #ifdef BLINK_LEDS
    508            /* Sleep OFF */
    509            HalLedStatusControl.sleepActive = FALSE;
   \   000011   90....       MOV     DPTR,#HalLedStatusControl + 36
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
    510          #endif /* BLINK_LEDS */
    511          }
   \   000017   D083         POP     DPH
   \   000019   D082         POP     DPL
   \   00001B   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedBlink?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedBlink

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedOnOff?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedOnOff

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedGetState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedGetState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedEnterSleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedEnterSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedExitSleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedExitSleep
    512          
    513          /***************************************************************************************************
    514          ***************************************************************************************************/
    515          
    516          
    517          
    518          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     26   HalLedBlink
        0     14   -> HalLedSet
        0     14   -> osal_GetSystemClock
        0     14   -> osal_set_event
      2      0   HalLedEnterSleep
        2      0   -> HalLedOnOff
      2      0   HalLedExitSleep
        2      0   -> HalLedOnOff
        2      0   -> HalLedUpdate
      2      0   HalLedGetState
      2      0   HalLedInit
        2      0   -> HalLedSet
      2     27   HalLedOnOff
      1     39   HalLedSet
        0     12   -> HalLedBlink
        0     12   -> HalLedOnOff
      2     27   HalLedUpdate
        0     27   -> HalLedOnOff
        0     27   -> HalLedSet
        0     27   -> osal_GetSystemClock
        0     27   -> osal_start_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??HalLedBlink?relay
       6  ??HalLedEnterSleep?relay
       6  ??HalLedExitSleep?relay
       6  ??HalLedGetState?relay
       6  ??HalLedInit?relay
       6  ??HalLedOnOff?relay
       6  ??HalLedSet?relay
       6  ??HalLedUpdate?relay
     234  HalLedBlink
     109  HalLedEnterSleep
      30  HalLedExitSleep
      16  HalLedGetState
      25  HalLedInit
      96  HalLedOnOff
     149  HalLedSet
       1  HalLedState
      37  HalLedStatusControl
     677  HalLedUpdate
       1  HalSleepLedState
       1  _A_P1
       1  _A_P2
       4  __Constant_64
       1  preBlinkState

 
 1 336 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     2 bytes in segment SFR_AN
     4 bytes in segment XDATA_ROM_C
    40 bytes in segment XDATA_Z
 
 1 384 bytes of CODE  memory
     0 bytes of CONST memory (+ 4 bytes shared)
     0 bytes of DATA  memory (+ 2 bytes shared)
    40 bytes of XDATA memory

Errors: none
Warnings: none
