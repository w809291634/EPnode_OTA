###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:37
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\hal\target\CC2530EB\hal_sleep.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\hal\target\CC2530EB\hal_sleep.c"
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        XLAB -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\hal_sleep.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\hal_sleep.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\hal\target\CC2530EB\hal_sleep.c
      1          /**************************************************************************************************
      2            Filename:       hal_sleep.c
      3            Revised:        $Date: 2010-10-21 11:11:55 -0700 (Thu, 21 Oct 2010) $
      4            Revision:       $Revision: 24165 $
      5          
      6            Description:    This module contains the HAL power management procedures for the CC2530.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          #include "hal_types.h"
     45          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x87
   \   unsigned char volatile __sfr PCON
   \                     PCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x96
   \   unsigned char volatile __sfr ST1
   \                     ST1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x97
   \   unsigned char volatile __sfr ST2
   \                     ST2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xad
   \   unsigned char volatile __sfr STLOAD
   \                     STLOAD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1
     46          #include "hal_board.h"
     47          #include "hal_sleep.h"
     48          #include "hal_led.h"
     49          #include "hal_key.h"
     50          #include "mac_api.h"
     51          #include "OSAL.h"
     52          #include "OSAL_Timers.h"
     53          #include "OSAL_Tasks.h"
     54          #include "OSAL_PwrMgr.h"
     55          #include "OnBoard.h"
     56          #include "hal_drivers.h"
     57          #include "hal_assert.h"
     58          #include "mac_mcu.h"
     59          
     60          #ifndef ZG_BUILD_ENDDEVICE_TYPE
     61          # define ZG_BUILD_ENDDEVICE_TYPE FALSE
     62          #endif
     63          
     64          #if ZG_BUILD_ENDDEVICE_TYPE && defined (NWK_AUTO_POLL)
     65          #include "nwk_globals.h"
     66          #include "ZGlobals.h"
     67          #endif
     68          
     69          /* ------------------------------------------------------------------------------------------------
     70           *                                           Macros
     71           * ------------------------------------------------------------------------------------------------
     72           */
     73          
     74          /* POWER CONSERVATION DEFINITIONS
     75           * Sleep mode H/W definitions (enabled with POWER_SAVING compile option)
     76           */
     77          #define CC2530_PM0            0  /* PM0, Clock oscillators on, voltage regulator on */
     78          #define CC2530_PM1            1  /* PM1, 32.768 kHz oscillators on, voltage regulator on */
     79          #define CC2530_PM2            2  /* PM2, 32.768 kHz oscillators on, voltage regulator off */
     80          #define CC2530_PM3            3  /* PM3, All clock oscillators off, voltage regulator off */
     81          
     82          /* HAL power management mode is set according to the power management state. The default
     83           * setting is HAL_SLEEP_OFF. The actual value is tailored to different HW platform. Both
     84           * HAL_SLEEP_TIMER and HAL_SLEEP_DEEP selections will:
     85           *   1. turn off the system clock, and
     86           *   2. halt the MCU.
     87           * HAL_SLEEP_TIMER can be woken up by sleep timer interrupt, I/O interrupt and reset.
     88           * HAL_SLEEP_DEEP can be woken up by I/O interrupt and reset.
     89           */
     90          #define HAL_SLEEP_OFF         CC2530_PM0
     91          #define HAL_SLEEP_TIMER       CC2530_PM2
     92          #define HAL_SLEEP_DEEP        CC2530_PM3
     93          
     94          /* MAX_SLEEP_TIME calculation:
     95           *   Sleep timer maximum duration = 0xFFFF7F / 32768 Hz = 511.996 seconds
     96           *   Round it to 510 seconds or 510000 ms
     97           */
     98          #define MAX_SLEEP_TIME                   510000             /* maximum time to sleep allowed by ST */
     99          
    100          
    101          /* minimum time to sleep, this macro is to:
    102           * 1. avoid thrashing in-and-out of sleep with short OSAL timer (~2ms)
    103           * 2. define minimum safe sleep period
    104           */
    105          #if !defined (PM_MIN_SLEEP_TIME)
    106          #define PM_MIN_SLEEP_TIME                14                 /* default to minimum safe sleep time minimum CAP */
    107          #endif
    108          
    109          /* The PCON instruction must be 4-byte aligned. The following code may cause excessive power
    110           * consumption if not aligned. See linker file ".xcl" for actual placement.
    111           */
    112          #pragma location = "SLEEP_CODE"
    113          void halSetSleepMode(void);
    114          
    115          /* This value is used to adjust the sleep timer compare value such that the sleep timer
    116           * compare takes into account the amount of processing time spent in function halSleep().
    117           * The first value is determined by measuring the number of sleep timer ticks it from
    118           * the beginning of the function to entering sleep mode or more precisely, when
    119           * MAC_PwrNextTimeout() is called.  The second value is determined by measuring the number
    120           * of sleep timer ticks from exit of sleep mode to the call to MAC_PwrOnReq() where the
    121           * MAC timer is restarted.
    122           */
    123          #define HAL_SLEEP_ADJ_TICKS   (11 + 12)
    124          
    125          /* Minimum idle time, this macro is to prevent negative wakeup time.
    126           * See halSleepSetTimer().
    127           */
    128          #define PM_MIN_IDLE_TIME      ((HAL_SLEEP_ADJ_TICKS * 64 / 671) + 1)
    129          
    130          #ifndef HAL_SLEEP_DEBUG_POWER_MODE
    131          /* set CC2530 power mode; always use PM2 */
    132          #define HAL_SLEEP_PREP_POWER_MODE(mode)     st( SLEEPCMD &= ~PMODE; /* clear mode bits */    \
    133                                                          SLEEPCMD |= mode;   /* set mode bits   */    \
    134                                                          while (!(STLOAD & LDRDY));                   \
    135                                                          halSleepPconValue = PCON_IDLE;               \
    136                                                        )
    137          #define HAL_SLEEP_PREP_IDLE_MODE()          st( SLEEPCMD &= ~PMODE; /* clear mode bits */    \
    138                                                          halSleepPconValue = PCON_IDLE;               \
    139                                                        )
    140          #define HAL_SLEEP_SET_POWER_MODE()          halSetSleepMode()
    141          #else
    142          /* Debug: don't set power mode, just block until sleep timer interrupt */
    143          #define HAL_SLEEP_PREP_POWER_MODE(mode)
    144          #define HAL_SLEEP_PREP_IDLE_MODE(mode)
    145          #define HAL_SLEEP_SET_POWER_MODE()          st( while(halSleepInt == FALSE); \
    146                                                          halSleepInt = FALSE;         \
    147                                                          HAL_DISABLE_INTERRUPTS();    \
    148                                                        )
    149          #endif
    150          
    151          /* sleep and external interrupt port masks */
    152          #define STIE_BV                             BV(5)
    153          #define P0IE_BV                             BV(5)
    154          #define P1IE_BV                             BV(4)
    155          #define P2IE_BV                             BV(1)
    156          
    157          /* sleep timer interrupt control */
    158          #define HAL_SLEEP_TIMER_ENABLE_INT()        st(IEN0 |= STIE_BV;)     /* enable sleep timer interrupt */
    159          #define HAL_SLEEP_TIMER_DISABLE_INT()       st(IEN0 &= ~STIE_BV;)    /* disable sleep timer interrupt */
    160          #define HAL_SLEEP_TIMER_CLEAR_INT()         st(STIF = 0;)            /* clear sleep interrupt flag */
    161          
    162          /* backup interrupt enable registers before sleep */
    163          #define HAL_SLEEP_IE_BACKUP_AND_DISABLE(ien0, ien1, ien2) st(ien0  = IEN0;    /* backup IEN0 register */ \
    164                                                                       ien1  = IEN1;    /* backup IEN1 register */ \
    165                                                                       ien2  = IEN2;    /* backup IEN2 register */ \
    166                                                                       IEN0 &= STIE_BV; /* disable IEN0 except STIE */ \
    167                                                                       IEN1 &= P0IE_BV; /* disable IEN1 except P0IE */ \
    168                                                                       IEN2 &= (P1IE_BV|P2IE_BV);) /* disable IEN2 except P1IE, P2IE */
    169          
    170          /* restore interrupt enable registers before sleep */
    171          #define HAL_SLEEP_IE_RESTORE(ien0, ien1, ien2) st(IEN0 = ien0;   /* restore IEN0 register */ \
    172                                                            IEN1 = ien1;   /* restore IEN1 register */ \
    173                                                            IEN2 = ien2;)  /* restore IEN2 register */
    174          
    175          /* convert msec to 320 usec units with round */
    176          #define HAL_SLEEP_MS_TO_320US(ms)           (((((uint32) (ms)) * 100) + 31) / 32)
    177          
    178          /* for optimized indexing of uint32's */
    179          #if HAL_MCU_LITTLE_ENDIAN()
    180          #define UINT32_NDX0   0
    181          #define UINT32_NDX1   1
    182          #define UINT32_NDX2   2
    183          #define UINT32_NDX3   3
    184          #else
    185          #define UINT32_NDX0   3
    186          #define UINT32_NDX1   2
    187          #define UINT32_NDX2   1
    188          #define UINT32_NDX3   0
    189          #endif
    190          
    191          /* ------------------------------------------------------------------------------------------------
    192           *                                        Global Variables
    193           * ------------------------------------------------------------------------------------------------
    194           */
    195          /* PCON register value to program when setting power mode */

   \                                 In  segment DATA_I, align 1, keep-with-next
    196          volatile __data uint8 halSleepPconValue = PCON_IDLE;
   \                     halSleepPconValue:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for halSleepPconValue>`
   \   000001                REQUIRE __INIT_DATA_I
    197          
    198          /* ------------------------------------------------------------------------------------------------
    199           *                                        Local Variables
    200           * ------------------------------------------------------------------------------------------------
    201           */
    202          
    203          /* HAL power management mode is set according to the power management state.
    204           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    205          static uint8 halPwrMgtMode = HAL_SLEEP_OFF;
   \                     halPwrMgtMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    206          
    207          #ifdef HAL_SLEEP_DEBUG_POWER_MODE
    208          static bool halSleepInt = FALSE;
    209          #endif
    210          
    211          /* ------------------------------------------------------------------------------------------------
    212           *                                      Function Prototypes
    213           * ------------------------------------------------------------------------------------------------
    214           */
    215          
    216          void halSleepSetTimer(uint32 timeout);
    217          void halSleepEnterIdleMode(uint32 timeout);
    218          
    219          /**************************************************************************************************
    220           * @fn          halSleep
    221           *
    222           * @brief       This function put the CC2530 to sleep. The PCON instruction must be 4-byte aligned.
    223           *              The following code may cause excessive power consumption if not aligned. See linker
    224           *              file ".xcl" for actual placement.
    225           *
    226           * input parameters
    227           *
    228           * @param       None.
    229           *
    230           * output parameters
    231           *
    232           * None.
    233           *
    234           * @return      None.
    235           **************************************************************************************************
    236           */

   \                                 In  segment SLEEP_CODE, align 1, keep-with-next
    237          void halSetSleepMode(void)
   \                     halSetSleepMode:
    238          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    239            PCON = halSleepPconValue;
   \   000000   85..87       MOV     0x87,halSleepPconValue
    240            asm("NOP");
   \   000003   00           NOP
    241          }
   \   000004   02....       LJMP    ?BRET
   \   000007                REQUIRE PCON
    242          
    243          /**************************************************************************************************
    244           * @fn          halSleep
    245           *
    246           * @brief       This function is called from the OSAL task loop using and existing OSAL
    247           *              interface.  It sets the low power mode of the MAC and the CC2530.
    248           *
    249           * input parameters
    250           *
    251           * @param       osal_timeout - Next OSAL timer timeout.
    252           *
    253           * output parameters
    254           *
    255           * None.
    256           *
    257           * @return      None.
    258           **************************************************************************************************
    259           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    260          void halSleep( uint16 osal_timeout )
   \                     halSleep:
    261          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7408         MOV     A,#0x8
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
    262            uint32        timeout;
    263            uint32        macTimeout = 0;
   \   000014   7C00         MOV     R4,#0x0
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7E00         MOV     R6,#0x0
   \   00001A   7F00         MOV     R7,#0x0
   \   00001C   7404         MOV     A,#0x4
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   EC           MOV     A,R4
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   ED           MOV     A,R5
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   EE           MOV     A,R6
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   EF           MOV     A,R7
   \   00002B   F0           MOVX    @DPTR,A
    264          
    265            /* get next OSAL timer expiration converted to 320 usec units */
    266            timeout = HAL_SLEEP_MS_TO_320US(osal_timeout);
   \   00002C   7408         MOV     A,#0x8
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V0,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5..         MOV     ?V1,A
   \   000038   E4           CLR     A
   \   000039   F5..         MOV     ?V2,A
   \   00003B   F5..         MOV     ?V3,A
   \   00003D   90....       MOV     DPTR,#__Constant_64
   \   000040   78..         MOV     R0,#?V4
   \   000042   12....       LCALL   ?L_MOV_X
   \   000045   78..         MOV     R0,#?V0
   \   000047   79..         MOV     R1,#?V4
   \   000049   12....       LCALL   ?L_MUL
   \   00004C   90....       MOV     DPTR,#__Constant_1f
   \   00004F   78..         MOV     R0,#?V0
   \   000051   12....       LCALL   ?L_ADD_X
   \   000054   7405         MOV     A,#0x5
   \   000056   78..         MOV     R0,#?V0
   \   000058   12....       LCALL   ?UL_SHR
   \   00005B   85..82       MOV     DPL,?XSP + 0
   \   00005E   85..83       MOV     DPH,?XSP + 1
   \   000061   78..         MOV     R0,#?V0
   \   000063   12....       LCALL   ?L_MOV_TO_X
    267            if (timeout == 0)
   \   000066   85..82       MOV     DPL,?XSP + 0
   \   000069   85..83       MOV     DPH,?XSP + 1
   \   00006C   12....       LCALL   ?XLOAD_R0123
   \   00006F   E8           MOV     A,R0
   \   000070   49           ORL     A,R1
   \   000071   4A           ORL     A,R2
   \   000072   4B           ORL     A,R3
   \   000073   700E         JNZ     ??halSleep_0
    268            {
    269              timeout = MAC_PwrNextTimeout();
   \   000075                ; Setup parameters for call to function MAC_PwrNextTimeout
   \   000075   12....       LCALL   ??MAC_PwrNextTimeout?relay; Banked call to: MAC_PwrNextTimeout
   \   000078   85..82       MOV     DPL,?XSP + 0
   \   00007B   85..83       MOV     DPH,?XSP + 1
   \   00007E   12....       LCALL   ?XSTORE_R2345
   \   000081   8041         SJMP    ??halSleep_1
    270            }
    271            else
    272            {
    273              /* get next MAC timer expiration */
    274              macTimeout = MAC_PwrNextTimeout();
   \                     ??halSleep_0:
   \   000083                ; Setup parameters for call to function MAC_PwrNextTimeout
   \   000083   12....       LCALL   ??MAC_PwrNextTimeout?relay; Banked call to: MAC_PwrNextTimeout
   \   000086   7404         MOV     A,#0x4
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   12....       LCALL   ?XSTORE_R2345
    275          
    276              /* get lesser of two timeouts */
    277              if ((macTimeout != 0) && (macTimeout < timeout))
   \   00008E   7404         MOV     A,#0x4
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   12....       LCALL   ?XLOAD_R0123
   \   000096   E8           MOV     A,R0
   \   000097   49           ORL     A,R1
   \   000098   4A           ORL     A,R2
   \   000099   4B           ORL     A,R3
   \   00009A   6028         JZ      ??halSleep_1
   \   00009C   85..82       MOV     DPL,?XSP + 0
   \   00009F   85..83       MOV     DPH,?XSP + 1
   \   0000A2   78..         MOV     R0,#?V0
   \   0000A4   12....       LCALL   ?L_MOV_X
   \   0000A7   7404         MOV     A,#0x4
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   78..         MOV     R0,#?V0
   \   0000AE   12....       LCALL   ?UL_GT_X
   \   0000B1   5011         JNC     ??halSleep_1
    278              {
    279                timeout = macTimeout;
   \   0000B3   7404         MOV     A,#0x4
   \   0000B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B8   12....       LCALL   ?XLOAD_R0123
   \   0000BB   85..82       MOV     DPL,?XSP + 0
   \   0000BE   85..83       MOV     DPH,?XSP + 1
   \   0000C1   12....       LCALL   ?XSTORE_R0123
    280              }
    281            }
    282          
    283            /* HAL_SLEEP_PM2 is entered only if the timeout is zero and
    284             * the device is a stimulated device.
    285             */
    286            halPwrMgtMode = (timeout == 0) ? HAL_SLEEP_DEEP : HAL_SLEEP_TIMER;
   \                     ??halSleep_1:
   \   0000C4   85..82       MOV     DPL,?XSP + 0
   \   0000C7   85..83       MOV     DPH,?XSP + 1
   \   0000CA   12....       LCALL   ?XLOAD_R0123
   \   0000CD   E8           MOV     A,R0
   \   0000CE   49           ORL     A,R1
   \   0000CF   4A           ORL     A,R2
   \   0000D0   4B           ORL     A,R3
   \   0000D1   7004         JNZ     ??halSleep_2
   \   0000D3   7403         MOV     A,#0x3
   \   0000D5   8002         SJMP    ??halSleep_3
   \                     ??halSleep_2:
   \   0000D7   7402         MOV     A,#0x2
   \                     ??halSleep_3:
   \   0000D9   90....       MOV     DPTR,#halPwrMgtMode
   \   0000DC   F0           MOVX    @DPTR,A
    287          
    288            /* DEEP sleep can only be entered when zgPollRate == 0.
    289             * This is to eliminate any possibility of entering PM3 between
    290             * two network timers.
    291             */
    292          #if ZG_BUILD_ENDDEVICE_TYPE && defined (NWK_AUTO_POLL)
    293            if ((timeout > HAL_SLEEP_MS_TO_320US(PM_MIN_SLEEP_TIME)) ||
    294                (timeout == 0 && zgPollRate == 0))
    295          #else
    296            if ((timeout > HAL_SLEEP_MS_TO_320US(PM_MIN_SLEEP_TIME)) ||
    297                (timeout == 0))
   \   0000DD   90....       MOV     DPTR,#__Constant_2d
   \   0000E0   78..         MOV     R0,#?V0
   \   0000E2   12....       LCALL   ?L_MOV_X
   \   0000E5   85..82       MOV     DPL,?XSP + 0
   \   0000E8   85..83       MOV     DPH,?XSP + 1
   \   0000EB   78..         MOV     R0,#?V0
   \   0000ED   12....       LCALL   ?UL_GT_X
   \   0000F0   5012         JNC     ??halSleep_4
   \   0000F2   85..82       MOV     DPL,?XSP + 0
   \   0000F5   85..83       MOV     DPH,?XSP + 1
   \   0000F8   12....       LCALL   ?XLOAD_R0123
   \   0000FB   E8           MOV     A,R0
   \   0000FC   49           ORL     A,R1
   \   0000FD   4A           ORL     A,R2
   \   0000FE   4B           ORL     A,R3
   \   0000FF   6003         JZ      $+5
   \   000101   02....       LJMP    ??halSleep_5 & 0xFFFF
    298          #endif
    299            {
    300              halIntState_t ien0, ien1, ien2;
    301          
    302              HAL_ASSERT(HAL_INTERRUPTS_ARE_ENABLED());
   \                     ??halSleep_4:
   \   000104   A2AF         MOV     C,0xa8.7
   \   000106   4003         JC      ??halSleep_6
   \   000108                ; Setup parameters for call to function halAssertHandler
   \   000108   12....       LCALL   ??halAssertHandler?relay; Banked call to: halAssertHandler
    303              HAL_DISABLE_INTERRUPTS();
   \                     ??halSleep_6:
   \   00010B   C2AF         CLR     0xa8.7
    304          
    305              /* always use "deep sleep" to turn off radio VREG on CC2530 */
    306              if (halSleepPconValue != 0 && MAC_PwrOffReq(MAC_PWR_SLEEP_DEEP) == MAC_SUCCESS)
   \   00010D   E5..         MOV     A,halSleepPconValue
   \   00010F   7003         JNZ     $+5
   \   000111   02....       LJMP    ??halSleep_7 & 0xFFFF
   \   000114                ; Setup parameters for call to function MAC_PwrOffReq
   \   000114   7902         MOV     R1,#0x2
   \   000116   12....       LCALL   ??MAC_PwrOffReq?relay; Banked call to: MAC_PwrOffReq
   \   000119   E9           MOV     A,R1
   \   00011A   6003         JZ      $+5
   \   00011C   02....       LJMP    ??halSleep_7 & 0xFFFF
    307              {
    308                /* The PCON value is not zero. There is no interrupt overriding the 
    309                 * sleep decision. Also, the radio granted the sleep request.
    310                 */
    311          
    312          #if ((defined HAL_KEY) && (HAL_KEY == TRUE))
    313                /* get peripherals ready for sleep */
    314                HalKeyEnterSleep();
   \   00011F                ; Setup parameters for call to function HalKeyEnterSleep
   \   00011F   12....       LCALL   ??HalKeyEnterSleep?relay; Banked call to: HalKeyEnterSleep
    315          #endif
    316          
    317          #ifdef HAL_SLEEP_DEBUG_LED
    318                HAL_TURN_OFF_LED3();
    319          #else
    320                /* use this to turn LEDs off during sleep */
    321                HalLedEnterSleep();
   \   000122                ; Setup parameters for call to function HalLedEnterSleep
   \   000122   12....       LCALL   ??HalLedEnterSleep?relay; Banked call to: HalLedEnterSleep
    322          #endif
    323          
    324                /* enable sleep timer interrupt */
    325                if (timeout != 0)
   \   000125   85..82       MOV     DPL,?XSP + 0
   \   000128   85..83       MOV     DPH,?XSP + 1
   \   00012B   12....       LCALL   ?XLOAD_R0123
   \   00012E   E8           MOV     A,R0
   \   00012F   49           ORL     A,R1
   \   000130   4A           ORL     A,R2
   \   000131   4B           ORL     A,R3
   \   000132   6043         JZ      ??halSleep_8
    326                {
    327                  if (timeout > HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME ))
   \   000134   90....       MOV     DPTR,#__Constant_185197
   \   000137   78..         MOV     R0,#?V0
   \   000139   12....       LCALL   ?L_MOV_X
   \   00013C   85..82       MOV     DPL,?XSP + 0
   \   00013F   85..83       MOV     DPH,?XSP + 1
   \   000142   78..         MOV     R0,#?V0
   \   000144   12....       LCALL   ?UL_GT_X
   \   000147   401E         JC      ??halSleep_9
    328                  {
    329                    timeout -= HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME );
   \   000149   90....       MOV     DPTR,#__Constant_ffe7ae6a
   \   00014C   78..         MOV     R0,#?V0
   \   00014E   12....       LCALL   ?L_MOV_X
   \   000151   85..82       MOV     DPL,?XSP + 0
   \   000154   85..83       MOV     DPH,?XSP + 1
   \   000157   78..         MOV     R0,#?V0
   \   000159   12....       LCALL   ?L_ADD_TO_X
    330                    halSleepSetTimer(HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME ));
   \   00015C                ; Setup parameters for call to function halSleepSetTimer
   \   00015C   90....       MOV     DPTR,#__Constant_185196
   \   00015F   12....       LCALL   ?XLOAD_R2345
   \   000162   12....       LCALL   ??halSleepSetTimer?relay; Banked call to: halSleepSetTimer
   \   000165   800C         SJMP    ??halSleep_10
    331                  }
    332                  else
    333                  {
    334                    /* set sleep timer */
    335                    halSleepSetTimer(timeout);
   \                     ??halSleep_9:
   \   000167                ; Setup parameters for call to function halSleepSetTimer
   \   000167   85..82       MOV     DPL,?XSP + 0
   \   00016A   85..83       MOV     DPH,?XSP + 1
   \   00016D   12....       LCALL   ?XLOAD_R2345
   \   000170   12....       LCALL   ??halSleepSetTimer?relay; Banked call to: halSleepSetTimer
    336                  }
    337          
    338                  /* set up sleep timer interrupt */
    339                  HAL_SLEEP_TIMER_CLEAR_INT();
   \                     ??halSleep_10:
   \   000173   C2C7         CLR     0xc0.7
    340                  HAL_SLEEP_TIMER_ENABLE_INT();
   \   000175   D2AD         SETB    0xa8.5
    341                }
    342          
    343          #ifdef HAL_SLEEP_DEBUG_LED
    344                if (halPwrMgtMode == CC2530_PM1)
    345                {
    346                  HAL_TURN_ON_LED1();
    347                }
    348                else
    349                {
    350                  HAL_TURN_OFF_LED1();
    351                }
    352          #endif
    353          
    354                /* Prep CC2530 power mode */
    355                HAL_SLEEP_PREP_POWER_MODE(halPwrMgtMode);
   \                     ??halSleep_8:
   \   000177   53BEFC       ANL     0xbe,#0xfc
   \   00017A   90....       MOV     DPTR,#halPwrMgtMode
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   42BE         ORL     0xbe,A
   \                     ??halSleep_11:
   \   000180   E5AD         MOV     A,0xad
   \   000182   A2E0         MOV     C,0xE0 /* A   */.0
   \   000184   50FA         JNC     ??halSleep_11
   \   000186   75..01       MOV     halSleepPconValue,#0x1
    356          
    357                /* save interrupt enable registers and disable all interrupts */
    358                HAL_SLEEP_IE_BACKUP_AND_DISABLE(ien0, ien1, ien2);
   \   000189   85A8..       MOV     ?V4,0xa8+0x0
   \   00018C   AFB8         MOV     R7,0xb8+0x0
   \   00018E   AE9A         MOV     R6,0x9a+0x0
   \   000190   53A820       ANL     0xa8,#0x20
   \   000193   53B820       ANL     0xb8,#0x20
   \   000196   539A12       ANL     0x9a,#0x12
    359                HAL_ENABLE_INTERRUPTS();
   \   000199   D2AF         SETB    0xa8.7
    360          
    361                /* set CC2530 power mode, interrupt is disabled after this function
    362                 * Note that an ISR (that could wake up from power mode) which runs
    363                 * between the previous instruction enabling interrupts and before
    364                 * power mode is set would switch the halSleepPconValue so that
    365                 * power mode shall not be entered in such a case. 
    366                 */
    367                HAL_SLEEP_SET_POWER_MODE();
   \   00019B                ; Setup parameters for call to function halSetSleepMode
   \   00019B   12....       LCALL   ??halSetSleepMode?relay; Banked call to: halSetSleepMode
    368          
    369                /* Disable interrupt immediately */
    370                HAL_DISABLE_INTERRUPTS();
   \   00019E   C2AF         CLR     0xa8.7
    371          
    372                /* restore interrupt enable registers */
    373                HAL_SLEEP_IE_RESTORE(ien0, ien1, ien2);
   \   0001A0   85..A8       MOV     0xa8,?V4
   \   0001A3   8FB8         MOV     0xb8,R7
   \   0001A5   8E9A         MOV     0x9a,R6
    374          
    375                /* disable sleep timer interrupt */
    376                HAL_SLEEP_TIMER_DISABLE_INT();
   \   0001A7   C2AD         CLR     0xa8.5
    377          
    378          #ifdef HAL_SLEEP_DEBUG_LED
    379                HAL_TURN_ON_LED3();
    380          #else
    381                /* use this to turn LEDs back on after sleep */
    382                HalLedExitSleep();
   \   0001A9                ; Setup parameters for call to function HalLedExitSleep
   \   0001A9   12....       LCALL   ??HalLedExitSleep?relay; Banked call to: HalLedExitSleep
    383          #endif
    384          
    385          #if ((defined HAL_KEY) && (HAL_KEY == TRUE))
    386                /* handle peripherals */
    387                (void)HalKeyExitSleep();
   \   0001AC                ; Setup parameters for call to function HalKeyExitSleep
   \   0001AC   12....       LCALL   ??HalKeyExitSleep?relay; Banked call to: HalKeyExitSleep
   \   0001AF   E9           MOV     A,R1
   \   0001B0   F5..         MOV     ?V0,A
    388          #endif
    389          
    390                /* power on the MAC; blocks until completion */
    391                MAC_PwrOnReq();
   \   0001B2                ; Setup parameters for call to function MAC_PwrOnReq
   \   0001B2   12....       LCALL   ??MAC_PwrOnReq?relay ; Banked call to: MAC_PwrOnReq
    392          
    393                HAL_ENABLE_INTERRUPTS();
   \   0001B5   D2AF         SETB    0xa8.7
    394          
    395                /* For CC2530, T2 interrupt won’t be generated when the current count is greater than
    396                 * the comparator. The interrupt is only generated when the current count is equal to
    397                 * the comparator. When the CC2530 is waking up from sleep, there is a small window
    398                 * that the count may be grater than the comparator, therefore, missing the interrupt.
    399                 * This workaround will call the T2 ISR when the current T2 count is greater than the
    400                 * comparator. The problem only occurs when POWER_SAVING is turned on, i.e. the 32KHz
    401                 * drives the chip in sleep and SYNC start is used.
    402                 */
    403                macMcuTimer2OverflowWorkaround();
   \   0001B7                ; Setup parameters for call to function macMcuTimer2OverflowWorkaround
   \   0001B7   12....       LCALL   ??macMcuTimer2OverflowWorkaround?relay; Banked call to: macMcuTimer2OverflowWorkaround
   \   0001BA   8039         SJMP    ??halSleep_12
    404              }
    405              else
    406              {
    407                /* Sleep request is not granted. Check PCON value to see why the sleep is not granted. */
    408                if (halSleepPconValue == 0)
   \                     ??halSleep_7:
   \   0001BC   E5..         MOV     A,halSleepPconValue
   \   0001BE   7004         JNZ     ??halSleep_13
    409                {
    410                  /* An interrupt may have changed the sleep decision. Do not sleep at all. Turn on 
    411                   * the interrupt, exit normally, and the next sleep will be allowed.
    412                   */
    413                  HAL_ENABLE_INTERRUPTS();
   \   0001C0   D2AF         SETB    0xa8.7
   \   0001C2   8031         SJMP    ??halSleep_12
    414                }
    415                else
    416                {
    417                  /* PCON value is okay but Radio cannot enter power mode hence just put CPU to idle mode.
    418                   * Interrupt will be enabled in halSleepEnterIdleMode().
    419                   */
    420                  halSleepEnterIdleMode(timeout);
   \                     ??halSleep_13:
   \   0001C4                ; Setup parameters for call to function halSleepEnterIdleMode
   \   0001C4   85..82       MOV     DPL,?XSP + 0
   \   0001C7   85..83       MOV     DPH,?XSP + 1
   \   0001CA   12....       LCALL   ?XLOAD_R2345
   \   0001CD   12....       LCALL   ??halSleepEnterIdleMode?relay; Banked call to: halSleepEnterIdleMode
   \   0001D0   8023         SJMP    ??halSleep_12
    421                }
    422              }
    423            }
    424            else if (timeout > PM_MIN_IDLE_TIME)
   \                     ??halSleep_5:
   \   0001D2   90....       MOV     DPTR,#__Constant_4
   \   0001D5   78..         MOV     R0,#?V0
   \   0001D7   12....       LCALL   ?L_MOV_X
   \   0001DA   85..82       MOV     DPL,?XSP + 0
   \   0001DD   85..83       MOV     DPH,?XSP + 1
   \   0001E0   78..         MOV     R0,#?V0
   \   0001E2   12....       LCALL   ?UL_GT_X
   \   0001E5   400E         JC      ??halSleep_12
    425            {
    426              /* Timeout is too close to enter power mode. Try idle mode. */
    427              HAL_DISABLE_INTERRUPTS();
   \   0001E7   C2AF         CLR     0xa8.7
    428          
    429              /* Interrupt will be enabled in halSleepEnterIdleMode(). */
    430              halSleepEnterIdleMode(timeout);
   \   0001E9                ; Setup parameters for call to function halSleepEnterIdleMode
   \   0001E9   85..82       MOV     DPL,?XSP + 0
   \   0001EC   85..83       MOV     DPH,?XSP + 1
   \   0001EF   12....       LCALL   ?XLOAD_R2345
   \   0001F2   12....       LCALL   ??halSleepEnterIdleMode?relay; Banked call to: halSleepEnterIdleMode
    431            }
    432          }
   \                     ??halSleep_12:
   \   0001F5   740A         MOV     A,#0xa
   \   0001F7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001FA   7F08         MOV     R7,#0x8
   \   0001FC   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0001FF                REQUIRE _A_IEN0
   \   0001FF                REQUIRE _A_IRCON
   \   0001FF                REQUIRE SLEEPCMD
   \   0001FF                REQUIRE STLOAD
   \   0001FF                REQUIRE _A_IEN1
   \   0001FF                REQUIRE IEN2
    433          
    434          /**************************************************************************************************
    435           * @fn          halSleepSetTimer
    436           *
    437           * @brief       This function sets the CC2530 sleep timer compare value.  First it reads and
    438           *              stores the value of the sleep timer; this value is used later to update OSAL
    439           *              timers.  Then the timeout value is converted from 320 usec units to 32 kHz
    440           *              period units and the compare value is set to the timeout.
    441           *
    442           * input parameters
    443           *
    444           * @param       timeout - Timeout value in 320 usec units.  The sleep timer compare is set to
    445           *                        this value.
    446           *
    447           * output parameters
    448           *
    449           * None.
    450           *
    451           * @return      None.
    452           **************************************************************************************************
    453           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    454          void halSleepSetTimer(uint32 timeout)
   \                     halSleepSetTimer:
    455          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7404         MOV     A,#0x4
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   EC           MOV     A,R4
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   ED           MOV     A,R5
   \   000019   F0           MOVX    @DPTR,A
    456            uint32 ticks;
    457          
    458            /* read the sleep timer; ST0 must be read first */
    459            ((uint8 *) &ticks)[UINT32_NDX0] = ST0;
   \   00001A   E595         MOV     A,0x95
   \   00001C   C0E0         PUSH    A
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   D0E0         POP     A
   \   000026   F0           MOVX    @DPTR,A
    460            ((uint8 *) &ticks)[UINT32_NDX1] = ST1;
   \   000027   E596         MOV     A,0x96
   \   000029   C0E0         PUSH    A
   \   00002B   7401         MOV     A,#0x1
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   D0E0         POP     A
   \   000032   F0           MOVX    @DPTR,A
    461            ((uint8 *) &ticks)[UINT32_NDX2] = ST2;
   \   000033   E597         MOV     A,0x97
   \   000035   C0E0         PUSH    A
   \   000037   7402         MOV     A,#0x2
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   D0E0         POP     A
   \   00003E   F0           MOVX    @DPTR,A
    462            ((uint8 *) &ticks)[UINT32_NDX3] = 0;
   \   00003F   7403         MOV     A,#0x3
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   7400         MOV     A,#0x0
   \   000046   F0           MOVX    @DPTR,A
    463          
    464            /* Compute sleep timer compare value.  The ratio of 32 kHz ticks to 320 usec ticks
    465             * is 32768/3125 = 10.48576.  This is nearly 671/64 = 10.484375.
    466             */
    467            ticks += (timeout * 671) / 64;
   \   000047   7404         MOV     A,#0x4
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   78..         MOV     R0,#?V0
   \   00004E   12....       LCALL   ?L_MOV_X
   \   000051   90....       MOV     DPTR,#__Constant_29f
   \   000054   78..         MOV     R0,#?V4
   \   000056   12....       LCALL   ?L_MOV_X
   \   000059   78..         MOV     R0,#?V0
   \   00005B   79..         MOV     R1,#?V4
   \   00005D   12....       LCALL   ?L_MUL
   \   000060   7406         MOV     A,#0x6
   \   000062   78..         MOV     R0,#?V0
   \   000064   12....       LCALL   ?UL_SHR
   \   000067   85..82       MOV     DPL,?XSP + 0
   \   00006A   85..83       MOV     DPH,?XSP + 1
   \   00006D   78..         MOV     R0,#?V0
   \   00006F   12....       LCALL   ?L_ADD_TO_X
    468          
    469            /* subtract the processing time spent in function halSleep() */
    470            ticks -= HAL_SLEEP_ADJ_TICKS;
   \   000072   90....       MOV     DPTR,#__Constant_ffffffe9
   \   000075   78..         MOV     R0,#?V0
   \   000077   12....       LCALL   ?L_MOV_X
   \   00007A   85..82       MOV     DPL,?XSP + 0
   \   00007D   85..83       MOV     DPH,?XSP + 1
   \   000080   78..         MOV     R0,#?V0
   \   000082   12....       LCALL   ?L_ADD_TO_X
    471          
    472            /* set sleep timer compare; ST0 must be written last */
    473            ST2 = ((uint8 *) &ticks)[UINT32_NDX2];
   \   000085   7402         MOV     A,#0x2
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F597         MOV     0x97,A
    474            ST1 = ((uint8 *) &ticks)[UINT32_NDX1];
   \   00008D   7401         MOV     A,#0x1
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   E0           MOVX    A,@DPTR
   \   000093   F596         MOV     0x96,A
    475            ST0 = ((uint8 *) &ticks)[UINT32_NDX0];
   \   000095   85..82       MOV     DPL,?XSP + 0
   \   000098   85..83       MOV     DPH,?XSP + 1
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F595         MOV     0x95,A
    476          }
   \   00009E   7408         MOV     A,#0x8
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A3   7F08         MOV     R7,#0x8
   \   0000A5   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000A8                REQUIRE ST0
   \   0000A8                REQUIRE ST1
   \   0000A8                REQUIRE ST2
    477          
    478          /**************************************************************************************************
    479           * @fn          halSleepEnterIdleMode
    480           *
    481           * @brief       This function puts the device into idle mode.
    482           *              Note that interrupts must have been disabled before this function call.
    483           *
    484           * input parameters
    485           *
    486           * @param       timeout - Timeout value in 320 usec units.  The sleep timer compare is set to
    487           *                        this value.
    488           *
    489           * output parameters
    490           *
    491           * None.
    492           *
    493           * @return      None.
    494           **************************************************************************************************
    495           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    496          void halSleepEnterIdleMode(uint32 timeout)
   \                     halSleepEnterIdleMode:
    497          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
    498            /* enable sleep timer interrupt */
    499            if (timeout != 0)
   \   00000D   E5..         MOV     A,?V0
   \   00000F   45..         ORL     A,?V1
   \   000011   45..         ORL     A,?V2
   \   000013   45..         ORL     A,?V3
   \   000015   6029         JZ      ??halSleepEnterIdleMode_0
    500            {
    501              if (timeout > HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME ))
   \   000017   90....       MOV     DPTR,#__Constant_185197
   \   00001A   78..         MOV     R0,#?V0
   \   00001C   12....       LCALL   ?UL_GE_X
   \   00001F   5010         JNC     ??halSleepEnterIdleMode_1
    502              {
    503                timeout = HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME );
   \   000021   7896         MOV     R0,#-0x6a
   \   000023   7951         MOV     R1,#0x51
   \   000025   7A18         MOV     R2,#0x18
   \   000027   7B00         MOV     R3,#0x0
   \   000029   88..         MOV     ?V0,R0
   \   00002B   89..         MOV     ?V1,R1
   \   00002D   8A..         MOV     ?V2,R2
   \   00002F   8B..         MOV     ?V3,R3
    504              }
    505              /* set sleep timer */
    506              halSleepSetTimer(timeout);
   \                     ??halSleepEnterIdleMode_1:
   \   000031                ; Setup parameters for call to function halSleepSetTimer
   \   000031   AA..         MOV     R2,?V0
   \   000033   AB..         MOV     R3,?V1
   \   000035   AC..         MOV     R4,?V2
   \   000037   AD..         MOV     R5,?V3
   \   000039   12....       LCALL   ??halSleepSetTimer?relay; Banked call to: halSleepSetTimer
    507              
    508              /* set up sleep timer interrupt */
    509              HAL_SLEEP_TIMER_CLEAR_INT();
   \   00003C   C2C7         CLR     0xc0.7
    510              HAL_SLEEP_TIMER_ENABLE_INT();
   \   00003E   D2AD         SETB    0xa8.5
    511            }
    512            HAL_SLEEP_PREP_IDLE_MODE();
   \                     ??halSleepEnterIdleMode_0:
   \   000040   53BEFC       ANL     0xbe,#0xfc
   \   000043   75..01       MOV     halSleepPconValue,#0x1
    513            HAL_ENABLE_INTERRUPTS();
   \   000046   D2AF         SETB    0xa8.7
    514            HAL_SLEEP_SET_POWER_MODE();
   \   000048                ; Setup parameters for call to function halSetSleepMode
   \   000048   12....       LCALL   ??halSetSleepMode?relay; Banked call to: halSetSleepMode
    515          }
   \   00004B   7F04         MOV     R7,#0x4
   \   00004D   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000050                REQUIRE _A_IRCON
   \   000050                REQUIRE _A_IEN0
   \   000050                REQUIRE SLEEPCMD
    516          
    517          /**************************************************************************************************
    518           * @fn          TimerElapsed
    519           *
    520           * @brief       Determine the number of OSAL timer ticks elapsed during sleep.
    521           *              Deprecated for CC2530 and CC2430 SoC.
    522           *
    523           * input parameters
    524           *
    525           * @param       None.
    526           *
    527           * output parameters
    528           *
    529           * None.
    530           *
    531           * @return      Number of timer ticks elapsed during sleep.
    532           **************************************************************************************************
    533           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    534          uint32 TimerElapsed( void )
   \                     TimerElapsed:
    535          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    536            /* Stubs */
    537            return (0);
   \   000000   7A00         MOV     R2,#0x0
   \   000002   7B00         MOV     R3,#0x0
   \   000004   7C00         MOV     R4,#0x0
   \   000006   7D00         MOV     R5,#0x0
   \   000008   02....       LJMP    ?BRET
    538          }
    539          
    540          /**************************************************************************************************
    541           * @fn          halRestoreSleepLevel
    542           *
    543           * @brief       Restore the deepest timer sleep level.
    544           *
    545           * input parameters
    546           *
    547           * @param       None
    548           *
    549           * output parameters
    550           *
    551           *              None.
    552           *
    553           * @return      None.
    554           **************************************************************************************************
    555           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    556          void halRestoreSleepLevel( void )
   \                     halRestoreSleepLevel:
    557          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    558            /* Stubs */
    559          }
   \   000000   02....       LJMP    ?BRET
    560          
    561          /**************************************************************************************************
    562           * @fn          halSleepTimerIsr
    563           *
    564           * @brief       Sleep timer ISR.
    565           *
    566           * input parameters
    567           *
    568           * None.
    569           *
    570           * output parameters
    571           *
    572           * None.
    573           *
    574           * @return      None.
    575           **************************************************************************************************
    576           */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    577          HAL_ISR_FUNCTION(halSleepTimerIsr, ST_VECTOR)
   \                     halSleepTimerIsr:
    578          {
   \   000000   C0E0         PUSH    A
   \   000002   C0D0         PUSH    PSW
   \   000004   E8           MOV     A,R0
   \   000005   C0E0         PUSH    A
   \   000007   E9           MOV     A,R1
   \   000008   C0E0         PUSH    A
   \   00000A                ; Saved register size: 4
   \   00000A                ; Auto size: 0
    579            HAL_ENTER_ISR();
   \   00000A   A2AF         MOV     C,0xa8.7
   \   00000C   E4           CLR     A
   \   00000D   33           RLC     A
   \   00000E   F8           MOV     R0,A
   \   00000F   D2AF         SETB    0xa8.7
    580            HAL_SLEEP_TIMER_CLEAR_INT();
   \   000011   C2C7         CLR     0xc0.7
    581          
    582          #ifdef HAL_SLEEP_DEBUG_POWER_MODE
    583            halSleepInt = TRUE;
    584          #endif
    585            
    586            CLEAR_SLEEP_MODE();
    587            HAL_EXIT_ISR();
   \   000013   E8           MOV     A,R0
   \   000014   F9           MOV     R1,A
   \   000015   E8           MOV     A,R0
   \   000016   A2E0         MOV     C,0xE0 /* A   */.0
   \   000018   92AF         MOV     0xa8.7,C
    588          }
   \   00001A   D0E0         POP     A
   \   00001C   F9           MOV     R1,A
   \   00001D   D0E0         POP     A
   \   00001F   F8           MOV     R0,A
   \   000020   D0D0         POP     PSW
   \   000022   D0E0         POP     A
   \   000024   32           RETI
   \   000025                REQUIRE _A_IEN0
   \   000025                REQUIRE _A_IRCON

   \                                 In  segment INTVEC, offset 0x2b, root
   \                     `??halSleepTimerIsr??INTVEC 43`:
   \   00002B   02....       LJMP       (halSleepTimerIsr)

   \                                 In  segment DATA_ID, align 1, keep-with-next
   \                     `?<Initializer for halSleepPconValue>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f:
   \   000000   1F000000     DD 31

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2d:
   \   000000   2D000000     DD 45

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_185197:
   \   000000   97511800     DD 1593751

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffe7ae6a:
   \   000000   6AAEE7FF     DD 4293373546

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_185196:
   \   000000   96511800     DD 1593750

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4:
   \   000000   04000000     DD 4

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_29f:
   \   000000   9F020000     DD 671

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffffffe9:
   \   000000   E9FFFFFF     DD 4294967273

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halSetSleepMode?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSetSleepMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halSleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halSleepSetTimer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSleepSetTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halSleepEnterIdleMode?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSleepEnterIdleMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TimerElapsed?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TimerElapsed

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halRestoreSleepLevel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halRestoreSleepLevel
    589          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   TimerElapsed
      0      0   halRestoreSleepLevel
      0     26   halSetSleepMode
      0     26   halSleep
        0     26   -> HalKeyEnterSleep
        0     26   -> HalKeyExitSleep
        0     26   -> HalLedEnterSleep
        0     26   -> HalLedExitSleep
        0     26   -> MAC_PwrNextTimeout
        0     26   -> MAC_PwrOffReq
        0     26   -> MAC_PwrOnReq
        0     26   -> halAssertHandler
        0     26   -> halSetSleepMode
        0     26   -> halSleepEnterIdleMode
        0     26   -> halSleepSetTimer
        0     26   -> macMcuTimer2OverflowWorkaround
      0     38   halSleepEnterIdleMode
        0     12   -> halSetSleepMode
        0     12   -> halSleepSetTimer
      1     50   halSleepSetTimer
      4      0   halSleepTimerIsr


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for halSleepPconValue>
       6  ??TimerElapsed?relay
       6  ??halRestoreSleepLevel?relay
       6  ??halSetSleepMode?relay
       6  ??halSleep?relay
       6  ??halSleepEnterIdleMode?relay
       6  ??halSleepSetTimer?relay
       3  ??halSleepTimerIsr??INTVEC 43
       1  IEN2
       1  PCON
       1  SLEEPCMD
       1  ST0
       1  ST1
       1  ST2
       1  STLOAD
      11  TimerElapsed
       1  _A_IEN0
       1  _A_IEN1
       1  _A_IRCON
       4  __Constant_185196
       4  __Constant_185197
       4  __Constant_1f
       4  __Constant_29f
       4  __Constant_2d
       4  __Constant_4
       4  __Constant_64
       4  __Constant_ffe7ae6a
       4  __Constant_ffffffe9
       1  halPwrMgtMode
       3  halRestoreSleepLevel
       7  halSetSleepMode
     511  halSleep
      80  halSleepEnterIdleMode
       1  halSleepPconValue
     168  halSleepSetTimer
      37  halSleepTimerIsr

 
 773 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
   1 byte  in segment DATA_I
   1 byte  in segment DATA_ID
   3 bytes in segment INTVEC
  37 bytes in segment NEAR_CODE
  10 bytes in segment SFR_AN
   7 bytes in segment SLEEP_CODE
  36 bytes in segment XDATA_ROM_C
   1 byte  in segment XDATA_Z
 
 854 bytes of CODE  memory (+  3 bytes shared)
   0 bytes of CONST memory (+ 36 bytes shared)
   1 byte  of DATA  memory (+ 10 bytes shared)
   1 byte  of XDATA memory

Errors: none
Warnings: none
