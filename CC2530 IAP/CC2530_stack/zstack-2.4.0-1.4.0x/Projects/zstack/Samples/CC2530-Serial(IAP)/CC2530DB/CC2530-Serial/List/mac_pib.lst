###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:39
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mac\high_level\mac_pib.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mac\high_level\mac_pib.c"
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        XLAB -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\mac_pib.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\mac_pib.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mac\high_level\mac_pib.c
      1          /**************************************************************************************************
      2            Filename:       mac_pib.c
      3            Revised:        $Date: 2010-07-15 09:13:13 -0700 (Thu, 15 Jul 2010) $
      4            Revision:       $Revision: 23019 $
      5          
      6            Description:    This module contains procedures for the MAC PIB.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     45          #include "hal_board.h"
     46          #include "mac_api.h"
     47          #include "mac_spec.h"
     48          #include "mac_low_level.h"
     49          #include "mac_radio_defs.h"
     50          #include "mac_main.h"
     51          #include "mac_pib.h"
     52          #include "OSAL.h"
     53          #include <stddef.h>
     54          
     55          /* ------------------------------------------------------------------------------------------------
     56           *                                           Constants
     57           * ------------------------------------------------------------------------------------------------
     58           */
     59          
     60          /* Attribute index constants, based on attribute ID values from spec */
     61          #define MAC_ATTR_SET1_START       0x40
     62          #define MAC_ATTR_SET1_END         0x5D
     63          #define MAC_ATTR_SET1_OFFSET      0
     64          #define MAC_ATTR_SET2_START       0xE0
     65          #define MAC_ATTR_SET2_END         0xE5
     66          #define MAC_ATTR_SET2_OFFSET      (MAC_ATTR_SET1_END - MAC_ATTR_SET1_START + MAC_ATTR_SET1_OFFSET + 1)
     67          
     68          /* frame response values */
     69          #define MAC_MAX_FRAME_RESPONSE_MIN  143
     70          #define MAC_MAX_FRAME_RESPONSE_MAX  25776
     71          
     72          /* ------------------------------------------------------------------------------------------------
     73           *                                           Typedefs
     74           * ------------------------------------------------------------------------------------------------
     75           */
     76          
     77          /* PIB access and min/max table type */
     78          typedef struct
     79          {
     80            uint8     offset;
     81            uint8     len;
     82            uint8     min;
     83            uint8     max;
     84          } macPibTbl_t;
     85          
     86          /* ------------------------------------------------------------------------------------------------
     87           *                                           Local Variables
     88           * ------------------------------------------------------------------------------------------------
     89           */
     90          
     91          /* PIB default values */

   \                                 In  segment CODE_C, align 1
     92          static CODE const macPib_t macPibDefaults =
   \                     macPibDefaults:
   \   000000   36           DB 54
   \   000001   00           DB 0
   \   000002   01           DB 1
   \   000003   00           DB 0
   \   000004   06           DB 6
   \   000005   0000         DW 0H
   \   000007   00           DB 0
   \   000008   0F           DB 15
   \   000009   00000000     DD 0
   \   00000D   00           DB 0
   \   00000E   0000         DW 0
   \   000010   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
   \   000016   03           DB 3
   \   000017   FFFF         DW 65535
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   04           DB 4
   \   00001C   03           DB 3
   \   00001D   FFFF         DW 65535
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   FFFF         DW 65535
   \   000023   0F           DB 15
   \   000024   F401         DW 500
   \   000026   00           DB 0
   \   000027   05           DB 5
   \   000028   C404         DW 1220
   \   00002A   03           DB 3
   \   00002B   20           DB 32
   \   00002C   00           DB 0
   \   00002D   01           DB 1
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   0B           DB 11
   \   000031   0000         DW 0
   \   000033   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
   \   000039   03           DB 3
   \   00003A   01           DB 1
   \   00003B   0F           DB 15
     93          {
     94            54,                                         /* ackWaitDuration */
     95            FALSE,                                      /* associationPermit */
     96            TRUE,                                       /* autoRequest */
     97            FALSE,                                      /* battLifeExt */
     98            6,                                          /* battLifeExtPeriods */
     99          
    100            NULL,                                       /* *pMacBeaconPayload */
    101            0,                                          /* beaconPayloadLength */
    102            MAC_BO_NON_BEACON,                          /* beaconOrder */
    103            0,                                          /* beaconTxTime */
    104            0,                                          /* bsn */
    105          
    106            {0, SADDR_MODE_EXT},                        /* coordExtendedAddress */
    107            MAC_SHORT_ADDR_NONE,                        /* coordShortAddress */
    108            0,                                          /* dsn */
    109            FALSE,                                      /* gtsPermit */
    110            4,                                          /* maxCsmaBackoffs */
    111          
    112            3,                                          /* minBe */
    113            0xFFFF,                                     /* panId */
    114            FALSE,                                      /* promiscuousMode */
    115            FALSE,                                      /* rxOnWhenIdle */
    116            MAC_SHORT_ADDR_NONE,                        /* shortAddress */
    117          
    118            MAC_SO_NONE,                                /* superframeOrder */
    119            0x01F4,                                     /* transactionPersistenceTime */
    120            FALSE,                                      /* assocciatedPanCoord */
    121            5,                                          /* maxBe */
    122            1220,                                       /* maxFrameTotalWaitTime */
    123          
    124            3,                                          /* maxFrameRetries */
    125            32,                                         /* ResponseWaitTime */
    126            0,                                          /* syncSymbolOffset */
    127            TRUE,                                       /* timeStampSupported */
    128            FALSE,                                      /* securityEnabled */
    129          
    130            /* Proprietary */
    131          #if defined (HAL_PA_LNA)
    132            19,                                         /* phyTransmitPower for CC2591 */
    133          #elif defined (HAL_PA_LNA_CC2590)
    134            11,                                         /* phyTransmitPower for CC2590 */
    135          #else
    136            0,                                          /* phyTransmitPower without frontend */
    137          #endif
    138            MAC_CHAN_11,                                /* logicalChannel */
    139            {0, SADDR_MODE_EXT},                        /* extendedAddress */
    140            1,                                          /* altBe */
    141            MAC_BO_NON_BEACON,                          /* deviceBeaconOrder */
    142          };
    143          
    144          /* PIB access and min/max table.  min/max of 0/0 means not checked; if min/max are
    145           * equal, element is read-only
    146           */

   \                                 In  segment CODE_C, align 1
    147          static CODE const macPibTbl_t macPibTbl[] =
   \                     macPibTbl:
   \   000000   00           DB 0
   \   000001   01           DB 1
   \   000002   36           DB 54
   \   000003   36           DB 54
   \   000004   01           DB 1
   \   000005   01           DB 1
   \   000006   00           DB 0
   \   000007   01           DB 1
   \   000008   02           DB 2
   \   000009   01           DB 1
   \   00000A   00           DB 0
   \   00000B   01           DB 1
   \   00000C   03           DB 3
   \   00000D   01           DB 1
   \   00000E   00           DB 0
   \   00000F   01           DB 1
   \   000010   04           DB 4
   \   000011   01           DB 1
   \   000012   06           DB 6
   \   000013   06           DB 6
   \   000014   05           DB 5
   \   000015   02           DB 2
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   07           DB 7
   \   000019   01           DB 1
   \   00001A   00           DB 0
   \   00001B   34           DB 52
   \   00001C   08           DB 8
   \   00001D   01           DB 1
   \   00001E   00           DB 0
   \   00001F   0F           DB 15
   \   000020   09           DB 9
   \   000021   04           DB 4
   \   000022   01           DB 1
   \   000023   01           DB 1
   \   000024   0D           DB 13
   \   000025   01           DB 1
   \   000026   00           DB 0
   \   000027   FF           DB 255
   \   000028   0E           DB 14
   \   000029   08           DB 8
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   17           DB 23
   \   00002D   02           DB 2
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   19           DB 25
   \   000031   01           DB 1
   \   000032   00           DB 0
   \   000033   FF           DB 255
   \   000034   1A           DB 26
   \   000035   01           DB 1
   \   000036   00           DB 0
   \   000037   01           DB 1
   \   000038   1B           DB 27
   \   000039   01           DB 1
   \   00003A   00           DB 0
   \   00003B   FE           DB 254
   \   00003C   1C           DB 28
   \   00003D   01           DB 1
   \   00003E   00           DB 0
   \   00003F   08           DB 8
   \   000040   1D           DB 29
   \   000041   02           DB 2
   \   000042   00           DB 0
   \   000043   00           DB 0
   \   000044   1F           DB 31
   \   000045   01           DB 1
   \   000046   00           DB 0
   \   000047   01           DB 1
   \   000048   20           DB 32
   \   000049   01           DB 1
   \   00004A   00           DB 0
   \   00004B   01           DB 1
   \   00004C   21           DB 33
   \   00004D   02           DB 2
   \   00004E   00           DB 0
   \   00004F   00           DB 0
   \   000050   23           DB 35
   \   000051   01           DB 1
   \   000052   00           DB 0
   \   000053   0F           DB 15
   \   000054   24           DB 36
   \   000055   02           DB 2
   \   000056   00           DB 0
   \   000057   00           DB 0
   \   000058   26           DB 38
   \   000059   01           DB 1
   \   00005A   00           DB 0
   \   00005B   01           DB 1
   \   00005C   27           DB 39
   \   00005D   01           DB 1
   \   00005E   00           DB 0
   \   00005F   08           DB 8
   \   000060   28           DB 40
   \   000061   02           DB 2
   \   000062   00           DB 0
   \   000063   FF           DB 255
   \   000064   2A           DB 42
   \   000065   01           DB 1
   \   000066   00           DB 0
   \   000067   07           DB 7
   \   000068   2B           DB 43
   \   000069   01           DB 1
   \   00006A   02           DB 2
   \   00006B   40           DB 64
   \   00006C   2C           DB 44
   \   00006D   01           DB 1
   \   00006E   00           DB 0
   \   00006F   00           DB 0
   \   000070   2D           DB 45
   \   000071   01           DB 1
   \   000072   00           DB 0
   \   000073   01           DB 1
   \   000074   2E           DB 46
   \   000075   01           DB 1
   \   000076   00           DB 0
   \   000077   01           DB 1
   \   000078   2F           DB 47
   \   000079   01           DB 1
   \   00007A   00           DB 0
   \   00007B   FF           DB 255
   \   00007C   30           DB 48
   \   00007D   01           DB 1
   \   00007E   0B           DB 11
   \   00007F   1C           DB 28
   \   000080   31           DB 49
   \   000081   08           DB 8
   \   000082   00           DB 0
   \   000083   00           DB 0
   \   000084   3A           DB 58
   \   000085   01           DB 1
   \   000086   00           DB 0
   \   000087   08           DB 8
   \   000088   3B           DB 59
   \   000089   01           DB 1
   \   00008A   00           DB 0
   \   00008B   0F           DB 15
   \   00008C   2F           DB 47
   \   00008D   01           DB 1
   \   00008E   00           DB 0
   \   00008F   00           DB 0
    148          {
    149            {offsetof(macPib_t, ackWaitDuration), sizeof(uint8), 54, 54},                      /* MAC_ACK_WAIT_DURATION */
    150            {offsetof(macPib_t, associationPermit), sizeof(bool), FALSE, TRUE},                /* MAC_ASSOCIATION_PERMIT */
    151            {offsetof(macPib_t, autoRequest), sizeof(bool), FALSE, TRUE},                      /* MAC_AUTO_REQUEST */
    152            {offsetof(macPib_t, battLifeExt), sizeof(bool), FALSE, TRUE},                      /* MAC_BATT_LIFE_EXT */
    153            {offsetof(macPib_t, battLifeExtPeriods), sizeof(uint8), 6, 6},                     /* MAC_BATT_LIFE_EXT_PERIODS */
    154          
    155            {offsetof(macPib_t, pBeaconPayload), sizeof(uint8 *), 0, 0},                       /* MAC_BEACON_PAYLOAD */
    156            {offsetof(macPib_t, beaconPayloadLength), sizeof(uint8), 0, 52},                   /* MAC_BEACON_PAYLOAD_LENGTH */
    157            {offsetof(macPib_t, beaconOrder), sizeof(uint8), 0, 15},                           /* MAC_BEACON_ORDER */
    158            {offsetof(macPib_t, beaconTxTime), sizeof(uint32), 1, 1},                          /* MAC_BEACON_TX_TIME */
    159            {offsetof(macPib_t, bsn), sizeof(uint8), 0x00, 0xFF},                              /* MAC_BSN */
    160          
    161            {offsetof(macPib_t, coordExtendedAddress.addr.extAddr), sizeof(sAddrExt_t), 0, 0}, /* MAC_COORD_EXTENDED_ADDRESS */
    162            {offsetof(macPib_t, coordShortAddress), sizeof(uint16), 0, 0},                     /* MAC_COORD_SHORT_ADDRESS */
    163            {offsetof(macPib_t, dsn), sizeof(uint8), 0x00, 0xFF},                              /* MAC_DSN */
    164            {offsetof(macPib_t, gtsPermit), sizeof(bool), FALSE, TRUE},                        /* MAC_GTS_PERMIT */
    165          
    166            /* Range of maxCsmaBackoffs is between 0 and 5 in IEEE 802.15.4.
    167             * Such restriction is removed here to allow 802.15.4 non-compliant experimental
    168             * applications.
    169             * To be compliant with 802.15.4, application or upper layer must not set this
    170             * PIB attribute out of range of 802.15.4.
    171             * The range is still restricted to 254 since value 255 would cause backoff
    172             * counter to overflow, wrap around and loop infinitely. */
    173            {offsetof(macPib_t, maxCsmaBackoffs), sizeof(uint8), 0, 254},                      /* MAC_MAX_CSMA_BACKOFFS */
    174          
    175            {offsetof(macPib_t, minBe), sizeof(uint8), 0, 8},                                  /* MAC_MIN_BE */
    176            {offsetof(macPib_t, panId), sizeof(uint16), 0, 0},                                 /* MAC_PAN_ID */
    177            {offsetof(macPib_t, promiscuousMode), sizeof(bool), FALSE, TRUE},                  /* MAC_PROMISCUOUS_MODE */
    178            {offsetof(macPib_t, rxOnWhenIdle), sizeof(bool), FALSE, TRUE},                     /* MAC_RX_ON_WHEN_IDLE */
    179            {offsetof(macPib_t, shortAddress), sizeof(uint16), 0, 0},                          /* MAC_SHORT_ADDRESS */
    180          
    181            {offsetof(macPib_t, superframeOrder), sizeof(uint8), 0, 15},                       /* MAC_SUPERFRAME_ORDER */
    182            {offsetof(macPib_t, transactionPersistenceTime), sizeof(uint16), 0, 0},            /* MAC_TRANSACTION_PERSISTENCE_TIME */
    183            {offsetof(macPib_t, associatedPanCoord), sizeof(bool), FALSE, TRUE},               /* MAC_ASSOCIATED_PAN_COORD */
    184          
    185            /* Range of maxBe is between 3 and 8 in IEEE 802.15.4.
    186             * Such restriction is removed here to allow 802.15.4 non-compliant experimental
    187             * applications.
    188             * To be compliant with 802.15.4, application or upper layer must not set this
    189             * PIB attribute out of range of 802.15.4. */
    190            {offsetof(macPib_t, maxBe), sizeof(uint8), 0, 8},                                  /* MAC_MAX_BE */
    191            {offsetof(macPib_t, maxFrameTotalWaitTime), sizeof(uint16), 0x00, 0xFF},           /* MAC_MAX_FRAME_RESPONSE_TIME */
    192          
    193            {offsetof(macPib_t, maxFrameRetries), sizeof(uint8), 0, 7},                        /* MAC_MAX_FRAME_RETRIES */
    194            {offsetof(macPib_t, responseWaitTime), sizeof(uint8), 2, 64},                      /* MAC_RESPONSE_WAIT_TIME */
    195            {offsetof(macPib_t, syncSymbolOffset), sizeof(uint8), 0, 0},                       /* MAC_SYNC_SYMBOL_OFFSET */
    196            {offsetof(macPib_t, timeStampSupported), sizeof(bool), FALSE, TRUE},               /* MAC_TIMESTAMP_SUPPORTED */
    197            {offsetof(macPib_t, securityEnabled), sizeof(bool), FALSE, TRUE},                  /* MAC_SECURITY_ENABLED */
    198          
    199            /* Proprietary PIBs */
    200            {offsetof(macPib_t, phyTransmitPower), sizeof(uint8), 0, 0xFF},                    /* MAC_PHY_TRANSMIT_POWER */
    201            {offsetof(macPib_t, logicalChannel), sizeof(uint8), MAC_CHAN_11, MAC_CHAN_28},     /* MAC_LOGICAL_CHANNEL */
    202            {offsetof(macPib_t, extendedAddress.addr.extAddr), sizeof(sAddrExt_t), 0, 0},      /* MAC_EXTENDED_ADDRESS */
    203            {offsetof(macPib_t, altBe), sizeof(uint8), 0, 8},                                  /* MAC_ALT_BE */
    204            {offsetof(macPib_t, deviceBeaconOrder), sizeof(uint8), 0, 15},                     /* MAC_DEVICE_BEACON_ORDER */
    205            {offsetof(macPib_t, phyTransmitPower), sizeof(uint8), 0, 0},                       /* MAC_PHY_TRANSMIT_POWER_SIGNED */
    206          };
    207          
    208          /* Invalid PIB table index used for error code */
    209          #define MAC_PIB_INVALID     ((uint8) (sizeof(macPibTbl) / sizeof(macPibTbl[0])))
    210          
    211          /* ------------------------------------------------------------------------------------------------
    212           *                                           Global Variables
    213           * ------------------------------------------------------------------------------------------------
    214           */
    215          
    216          /* MAC PIB */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    217          macPib_t macPib;
   \                     macPib:
   \   000000                DS 60
   \   00003C                REQUIRE __INIT_XDATA_Z
    218          
    219          
    220          /**************************************************************************************************
    221           * @fn          macPibReset
    222           *
    223           * @brief       This function initializes the PIB.
    224           *
    225           * input parameters
    226           *
    227           * @param       None.
    228           *
    229           * output parameters
    230           *
    231           * None.
    232           *
    233           * @return      None.
    234           **************************************************************************************************
    235           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    236          MAC_INTERNAL_API void macPibReset(void)
   \                     macPibReset:
    237          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    238            /* copy PIB defaults */
    239            macPib = macPibDefaults;
   \   000004   90....       MOV     DPTR,#macPibDefaults
   \   000007   7C..         MOV     R4,#macPib & 0xff
   \   000009   7D..         MOV     R5,#(macPib >> 8) & 0xff
   \   00000B   743C         MOV     A,#0x3c
   \   00000D   12....       LCALL   ?MOVE_LONG8_XDATA_CODE
    240          
    241            /* initialize random sequence numbers */
    242            macPib.dsn = macRadioRandomByte();
   \   000010                ; Setup parameters for call to function macRadioRandomByte
   \   000010   12....       LCALL   ??macRadioRandomByte?relay; Banked call to: macRadioRandomByte
   \   000013   E9           MOV     A,R1
   \   000014   90....       MOV     DPTR,#macPib + 25
   \   000017   F0           MOVX    @DPTR,A
    243            macPib.bsn = macRadioRandomByte();
   \   000018                ; Setup parameters for call to function macRadioRandomByte
   \   000018   12....       LCALL   ??macRadioRandomByte?relay; Banked call to: macRadioRandomByte
   \   00001B   E9           MOV     A,R1
   \   00001C   90....       MOV     DPTR,#macPib + 13
   \   00001F   F0           MOVX    @DPTR,A
    244          }
   \   000020   D083         POP     DPH
   \   000022   D082         POP     DPL
   \   000024   02....       LJMP    ?BRET
    245          
    246          /**************************************************************************************************
    247           * @fn          macPibIndex
    248           *
    249           * @brief       This function takes an PIB attribute and returns the index in to
    250           *              macPibTbl for the attribute.
    251           *
    252           * input parameters
    253           *
    254           * @param       pibAttribute - PIB attribute to look up.
    255           *
    256           * output parameters
    257           *
    258           * None.
    259           *
    260           * @return      Index in to macPibTbl for the attribute or MAC_PIB_INVALID.
    261           **************************************************************************************************
    262           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    263          static uint8 macPibIndex(uint8 pibAttribute)
   \                     macPibIndex:
    264          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV     A,R1
   \   000001   F8           MOV     R0,A
    265            if ((pibAttribute >= MAC_ATTR_SET1_START) && (pibAttribute <= MAC_ATTR_SET1_END))
   \   000002   E8           MOV     A,R0
   \   000003   C3           CLR     C
   \   000004   9440         SUBB    A,#0x40
   \   000006   400C         JC      ??macPibIndex_0
   \   000008   E8           MOV     A,R0
   \   000009   C3           CLR     C
   \   00000A   945E         SUBB    A,#0x5e
   \   00000C   5006         JNC     ??macPibIndex_0
    266            {
    267              return (pibAttribute - MAC_ATTR_SET1_START + MAC_ATTR_SET1_OFFSET);
   \   00000E   74C0         MOV     A,#-0x40
   \   000010   28           ADD     A,R0
   \   000011   F9           MOV     R1,A
   \   000012   8014         SJMP    ??macPibIndex_1
    268            }
    269            else if ((pibAttribute >= MAC_ATTR_SET2_START) && (pibAttribute <= MAC_ATTR_SET2_END))
   \                     ??macPibIndex_0:
   \   000014   E8           MOV     A,R0
   \   000015   C3           CLR     C
   \   000016   94E0         SUBB    A,#-0x20
   \   000018   400C         JC      ??macPibIndex_2
   \   00001A   E8           MOV     A,R0
   \   00001B   C3           CLR     C
   \   00001C   94E6         SUBB    A,#-0x1a
   \   00001E   5006         JNC     ??macPibIndex_2
    270            {
    271              return (pibAttribute - MAC_ATTR_SET2_START + MAC_ATTR_SET2_OFFSET);
   \   000020   743E         MOV     A,#0x3e
   \   000022   28           ADD     A,R0
   \   000023   F9           MOV     R1,A
   \   000024   8002         SJMP    ??macPibIndex_1
    272            }
    273            else
    274            {
    275              return MAC_PIB_INVALID;
   \                     ??macPibIndex_2:
   \   000026   7924         MOV     R1,#0x24
   \                     ??macPibIndex_1:
   \   000028   02....       LJMP    ?BRET
    276            }
    277          }
    278          
    279          
    280          /**************************************************************************************************
    281           * @fn          MAC_MlmeGetReq
    282           *
    283           * @brief       This direct execute function retrieves an attribute value
    284           *              from the MAC PIB.
    285           *
    286           * input parameters
    287           *
    288           * @param       pibAttribute - The attribute identifier.
    289           * @param       pValue - pointer to the attribute value.
    290           *
    291           * output parameters
    292           *
    293           * @param       pValue - pointer to the attribute value.
    294           *
    295           * @return      The status of the request, as follows:
    296           *              MAC_SUCCESS Operation successful.
    297           *              MAC_UNSUPPORTED_ATTRIBUTE Attribute not found.
    298           *
    299           **************************************************************************************************
    300           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    301          uint8 MAC_MlmeGetReq(uint8 pibAttribute, void *pValue)
   \                     MAC_MlmeGetReq:
    302          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   \   000007   8A..         MOV     ?V4,R2
   \   000009   8B..         MOV     ?V5,R3
    303            uint8         i;
    304            halIntState_t intState;
    305          
    306            if ((i = macPibIndex(pibAttribute)) == MAC_PIB_INVALID)
   \   00000B                ; Setup parameters for call to function macPibIndex
   \   00000B   A9..         MOV     R1,?V3
   \   00000D   12....       LCALL   ??macPibIndex?relay  ; Banked call to: macPibIndex
   \   000010   E9           MOV     A,R1
   \   000011   F8           MOV     R0,A
   \   000012   E8           MOV     A,R0
   \   000013   FF           MOV     R7,A
   \   000014   7424         MOV     A,#0x24
   \   000016   68           XRL     A,R0
   \   000017   7004         JNZ     ??MAC_MlmeGetReq_0
    307            {
    308              return MAC_UNSUPPORTED_ATTRIBUTE;
   \   000019   79F4         MOV     R1,#-0xc
   \   00001B   807E         SJMP    ??MAC_MlmeGetReq_1
    309            }
    310          
    311            HAL_ENTER_CRITICAL_SECTION(intState);
   \                     ??MAC_MlmeGetReq_0:
   \   00001D   A2AF         MOV     C,0xa8.7
   \   00001F   E4           CLR     A
   \   000020   33           RLC     A
   \   000021   FE           MOV     R6,A
   \   000022   C2AF         CLR     0xa8.7
    312            osal_memcpy(pValue, (uint8 *) &macPib + macPibTbl[i].offset, macPibTbl[i].len);
   \   000024                ; Setup parameters for call to function osal_memcpy
   \   000024   EF           MOV     A,R7
   \   000025   F8           MOV     R0,A
   \   000026   7900         MOV     R1,#0x0
   \   000028   E8           MOV     A,R0
   \   000029   75F004       MOV     B,#0x4
   \   00002C   A4           MUL     AB
   \   00002D   C8           XCH     A,R0
   \   00002E   AAF0         MOV     R2,B
   \   000030   75F000       MOV     B,#0x0
   \   000033   A4           MUL     AB
   \   000034   2A           ADD     A,R2
   \   000035   FA           MOV     R2,A
   \   000036   75F004       MOV     B,#0x4
   \   000039   E9           MOV     A,R1
   \   00003A   A4           MUL     AB
   \   00003B   2A           ADD     A,R2
   \   00003C   F9           MOV     R1,A
   \   00003D   74..         MOV     A,#macPibTbl & 0xff
   \   00003F   28           ADD     A,R0
   \   000040   F582         MOV     DPL,A
   \   000042   74..         MOV     A,#(macPibTbl >> 8) & 0xff
   \   000044   39           ADDC    A,R1
   \   000045   F583         MOV     DPH,A
   \   000047   E4           CLR     A
   \   000048   93           MOVC    A,@A+DPTR
   \   000049   F8           MOV     R0,A
   \   00004A   7900         MOV     R1,#0x0
   \   00004C   74..         MOV     A,#macPib & 0xff
   \   00004E   28           ADD     A,R0
   \   00004F   F5..         MOV     ?V0,A
   \   000051   74..         MOV     A,#(macPib >> 8) & 0xff
   \   000053   39           ADDC    A,R1
   \   000054   F5..         MOV     ?V1,A
   \   000056   75..00       MOV     ?V2,#0x0
   \   000059   78..         MOV     R0,#?V0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005E   EF           MOV     A,R7
   \   00005F   F8           MOV     R0,A
   \   000060   7900         MOV     R1,#0x0
   \   000062   E8           MOV     A,R0
   \   000063   75F004       MOV     B,#0x4
   \   000066   A4           MUL     AB
   \   000067   C8           XCH     A,R0
   \   000068   AAF0         MOV     R2,B
   \   00006A   75F000       MOV     B,#0x0
   \   00006D   A4           MUL     AB
   \   00006E   2A           ADD     A,R2
   \   00006F   FA           MOV     R2,A
   \   000070   75F004       MOV     B,#0x4
   \   000073   E9           MOV     A,R1
   \   000074   A4           MUL     AB
   \   000075   2A           ADD     A,R2
   \   000076   F9           MOV     R1,A
   \   000077   74..         MOV     A,#(macPibTbl + 1) & 0xff
   \   000079   28           ADD     A,R0
   \   00007A   F582         MOV     DPL,A
   \   00007C   74..         MOV     A,#((macPibTbl + 1) >> 8) & 0xff
   \   00007E   39           ADDC    A,R1
   \   00007F   F583         MOV     DPH,A
   \   000081   E4           CLR     A
   \   000082   93           MOVC    A,@A+DPTR
   \   000083   FC           MOV     R4,A
   \   000084   7D00         MOV     R5,#0x0
   \   000086   AA..         MOV     R2,?V4
   \   000088   AB..         MOV     R3,?V5
   \   00008A   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00008D   7403         MOV     A,#0x3
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
    313            HAL_EXIT_CRITICAL_SECTION(intState);
   \   000092   EE           MOV     A,R6
   \   000093   F8           MOV     R0,A
   \   000094   EE           MOV     A,R6
   \   000095   A2E0         MOV     C,0xE0 /* A   */.0
   \   000097   92AF         MOV     0xa8.7,C
    314            return MAC_SUCCESS;
   \   000099   7900         MOV     R1,#0x0
   \                     ??MAC_MlmeGetReq_1:
   \   00009B   7F06         MOV     R7,#0x6
   \   00009D   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000A0                REQUIRE _A_IEN0
    315          }
    316          
    317          /**************************************************************************************************
    318           * @fn          MAC_MlmeSetReq
    319           *
    320           * @brief       This direct execute function sets an attribute value
    321           *              in the MAC PIB.
    322           *
    323           * input parameters
    324           *
    325           * @param       pibAttribute - The attribute identifier.
    326           * @param       pValue - pointer to the attribute value.
    327           *
    328           * output parameters
    329           *
    330           * None.
    331           *
    332           * @return      The status of the request, as follows:
    333           *              MAC_SUCCESS Operation successful.
    334           *              MAC_UNSUPPORTED_ATTRIBUTE Attribute not found.
    335           *
    336           **************************************************************************************************
    337           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    338          uint8 MAC_MlmeSetReq(uint8 pibAttribute, void *pValue)
   \                     MAC_MlmeSetReq:
    339          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   8A..         MOV     ?V4,R2
   \   000009   8B..         MOV     ?V5,R3
    340            uint8         i;
    341            halIntState_t intState;
    342          
    343            if (pibAttribute == MAC_BEACON_PAYLOAD)
   \   00000B   7445         MOV     A,#0x45
   \   00000D   6E           XRL     A,R6
   \   00000E   700F         JNZ     ??MAC_MlmeSetReq_0
    344            {
    345              macPib.pBeaconPayload = pValue;
   \   000010   90....       MOV     DPTR,#macPib + 5
   \   000013   E5..         MOV     A,?V4
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   E5..         MOV     A,?V5
   \   000019   F0           MOVX    @DPTR,A
    346              return MAC_SUCCESS;
   \   00001A   7900         MOV     R1,#0x0
   \   00001C   02....       LJMP    ??MAC_MlmeSetReq_1 & 0xFFFF
    347            }
    348          
    349            /* look up attribute in PIB table */
    350            if ((i = macPibIndex(pibAttribute)) == MAC_PIB_INVALID)
   \                     ??MAC_MlmeSetReq_0:
   \   00001F                ; Setup parameters for call to function macPibIndex
   \   00001F   EE           MOV     A,R6
   \   000020   F9           MOV     R1,A
   \   000021   12....       LCALL   ??macPibIndex?relay  ; Banked call to: macPibIndex
   \   000024   E9           MOV     A,R1
   \   000025   F8           MOV     R0,A
   \   000026   E8           MOV     A,R0
   \   000027   FF           MOV     R7,A
   \   000028   7424         MOV     A,#0x24
   \   00002A   68           XRL     A,R0
   \   00002B   7005         JNZ     ??MAC_MlmeSetReq_2
    351            {
    352              return MAC_UNSUPPORTED_ATTRIBUTE;
   \   00002D   79F4         MOV     R1,#-0xc
   \   00002F   02....       LJMP    ??MAC_MlmeSetReq_1 & 0xFFFF
    353            }
    354          
    355            /* do range check; no range check if min and max are zero */
    356            if ((macPibTbl[i].min != 0) || (macPibTbl[i].max != 0))
   \                     ??MAC_MlmeSetReq_2:
   \   000032   EF           MOV     A,R7
   \   000033   F8           MOV     R0,A
   \   000034   7900         MOV     R1,#0x0
   \   000036   E8           MOV     A,R0
   \   000037   75F004       MOV     B,#0x4
   \   00003A   A4           MUL     AB
   \   00003B   C8           XCH     A,R0
   \   00003C   AAF0         MOV     R2,B
   \   00003E   75F000       MOV     B,#0x0
   \   000041   A4           MUL     AB
   \   000042   2A           ADD     A,R2
   \   000043   FA           MOV     R2,A
   \   000044   75F004       MOV     B,#0x4
   \   000047   E9           MOV     A,R1
   \   000048   A4           MUL     AB
   \   000049   2A           ADD     A,R2
   \   00004A   F9           MOV     R1,A
   \   00004B   74..         MOV     A,#(macPibTbl + 2) & 0xff
   \   00004D   28           ADD     A,R0
   \   00004E   F582         MOV     DPL,A
   \   000050   74..         MOV     A,#((macPibTbl + 2) >> 8) & 0xff
   \   000052   39           ADDC    A,R1
   \   000053   F583         MOV     DPH,A
   \   000055   E4           CLR     A
   \   000056   93           MOVC    A,@A+DPTR
   \   000057   702A         JNZ     ??MAC_MlmeSetReq_3
   \   000059   EF           MOV     A,R7
   \   00005A   F8           MOV     R0,A
   \   00005B   7900         MOV     R1,#0x0
   \   00005D   E8           MOV     A,R0
   \   00005E   75F004       MOV     B,#0x4
   \   000061   A4           MUL     AB
   \   000062   C8           XCH     A,R0
   \   000063   AAF0         MOV     R2,B
   \   000065   75F000       MOV     B,#0x0
   \   000068   A4           MUL     AB
   \   000069   2A           ADD     A,R2
   \   00006A   FA           MOV     R2,A
   \   00006B   75F004       MOV     B,#0x4
   \   00006E   E9           MOV     A,R1
   \   00006F   A4           MUL     AB
   \   000070   2A           ADD     A,R2
   \   000071   F9           MOV     R1,A
   \   000072   74..         MOV     A,#(macPibTbl + 3) & 0xff
   \   000074   28           ADD     A,R0
   \   000075   F582         MOV     DPL,A
   \   000077   74..         MOV     A,#((macPibTbl + 3) >> 8) & 0xff
   \   000079   39           ADDC    A,R1
   \   00007A   F583         MOV     DPH,A
   \   00007C   E4           CLR     A
   \   00007D   93           MOVC    A,@A+DPTR
   \   00007E   7003         JNZ     $+5
   \   000080   02....       LJMP    ??MAC_MlmeSetReq_4 & 0xFFFF
    357            {
    358              /* if min == max, this is a read-only attribute */
    359              if (macPibTbl[i].min == macPibTbl[i].max)
   \                     ??MAC_MlmeSetReq_3:
   \   000083   EF           MOV     A,R7
   \   000084   F8           MOV     R0,A
   \   000085   7900         MOV     R1,#0x0
   \   000087   E8           MOV     A,R0
   \   000088   75F004       MOV     B,#0x4
   \   00008B   A4           MUL     AB
   \   00008C   C8           XCH     A,R0
   \   00008D   AAF0         MOV     R2,B
   \   00008F   75F000       MOV     B,#0x0
   \   000092   A4           MUL     AB
   \   000093   2A           ADD     A,R2
   \   000094   FA           MOV     R2,A
   \   000095   75F004       MOV     B,#0x4
   \   000098   E9           MOV     A,R1
   \   000099   A4           MUL     AB
   \   00009A   2A           ADD     A,R2
   \   00009B   F9           MOV     R1,A
   \   00009C   74..         MOV     A,#(macPibTbl + 2) & 0xff
   \   00009E   28           ADD     A,R0
   \   00009F   F582         MOV     DPL,A
   \   0000A1   74..         MOV     A,#((macPibTbl + 2) >> 8) & 0xff
   \   0000A3   39           ADDC    A,R1
   \   0000A4   F583         MOV     DPH,A
   \   0000A6   E4           CLR     A
   \   0000A7   93           MOVC    A,@A+DPTR
   \   0000A8   FB           MOV     R3,A
   \   0000A9   EF           MOV     A,R7
   \   0000AA   F8           MOV     R0,A
   \   0000AB   7900         MOV     R1,#0x0
   \   0000AD   E8           MOV     A,R0
   \   0000AE   75F004       MOV     B,#0x4
   \   0000B1   A4           MUL     AB
   \   0000B2   C8           XCH     A,R0
   \   0000B3   AAF0         MOV     R2,B
   \   0000B5   75F000       MOV     B,#0x0
   \   0000B8   A4           MUL     AB
   \   0000B9   2A           ADD     A,R2
   \   0000BA   FA           MOV     R2,A
   \   0000BB   75F004       MOV     B,#0x4
   \   0000BE   E9           MOV     A,R1
   \   0000BF   A4           MUL     AB
   \   0000C0   2A           ADD     A,R2
   \   0000C1   F9           MOV     R1,A
   \   0000C2   74..         MOV     A,#(macPibTbl + 3) & 0xff
   \   0000C4   28           ADD     A,R0
   \   0000C5   F582         MOV     DPL,A
   \   0000C7   74..         MOV     A,#((macPibTbl + 3) >> 8) & 0xff
   \   0000C9   39           ADDC    A,R1
   \   0000CA   F583         MOV     DPH,A
   \   0000CC   E4           CLR     A
   \   0000CD   93           MOVC    A,@A+DPTR
   \   0000CE   6B           XRL     A,R3
   \   0000CF   7005         JNZ     ??MAC_MlmeSetReq_5
    360              {
    361                return MAC_READ_ONLY;
   \   0000D1   79FB         MOV     R1,#-0x5
   \   0000D3   02....       LJMP    ??MAC_MlmeSetReq_1 & 0xFFFF
    362              }
    363          
    364              /* check for special cases */
    365              if (pibAttribute == MAC_MAX_FRAME_TOTAL_WAIT_TIME)
   \                     ??MAC_MlmeSetReq_5:
   \   0000D6   7458         MOV     A,#0x58
   \   0000D8   6E           XRL     A,R6
   \   0000D9   7025         JNZ     ??MAC_MlmeSetReq_6
    366              {
    367                if ((*((uint16 *) pValue) < MAC_MAX_FRAME_RESPONSE_MIN) ||
    368                    (*((uint16 *) pValue) > MAC_MAX_FRAME_RESPONSE_MAX))
   \   0000DB   85..82       MOV     DPL,?V4
   \   0000DE   85..83       MOV     DPH,?V5
   \   0000E1   C3           CLR     C
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   948F         SUBB    A,#-0x71
   \   0000E5   A3           INC     DPTR
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   9400         SUBB    A,#0x0
   \   0000E9   4010         JC      ??MAC_MlmeSetReq_7
   \   0000EB   85..82       MOV     DPL,?V4
   \   0000EE   85..83       MOV     DPH,?V5
   \   0000F1   C3           CLR     C
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   94B1         SUBB    A,#-0x4f
   \   0000F5   A3           INC     DPTR
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   9464         SUBB    A,#0x64
   \   0000F9   4005         JC      ??MAC_MlmeSetReq_6
    369                {
    370                  return MAC_INVALID_PARAMETER;
   \                     ??MAC_MlmeSetReq_7:
   \   0000FB   79E8         MOV     R1,#-0x18
   \   0000FD   02....       LJMP    ??MAC_MlmeSetReq_1 & 0xFFFF
    371                }
    372              }
    373          
    374              /* range check for general case */
    375              if ((*((uint8 *) pValue) < macPibTbl[i].min) || (*((uint8 *) pValue) > macPibTbl[i].max))
   \                     ??MAC_MlmeSetReq_6:
   \   000100   EF           MOV     A,R7
   \   000101   F8           MOV     R0,A
   \   000102   7900         MOV     R1,#0x0
   \   000104   E8           MOV     A,R0
   \   000105   75F004       MOV     B,#0x4
   \   000108   A4           MUL     AB
   \   000109   C8           XCH     A,R0
   \   00010A   AAF0         MOV     R2,B
   \   00010C   75F000       MOV     B,#0x0
   \   00010F   A4           MUL     AB
   \   000110   2A           ADD     A,R2
   \   000111   FA           MOV     R2,A
   \   000112   75F004       MOV     B,#0x4
   \   000115   E9           MOV     A,R1
   \   000116   A4           MUL     AB
   \   000117   2A           ADD     A,R2
   \   000118   F9           MOV     R1,A
   \   000119   74..         MOV     A,#(macPibTbl + 2) & 0xff
   \   00011B   28           ADD     A,R0
   \   00011C   F582         MOV     DPL,A
   \   00011E   74..         MOV     A,#((macPibTbl + 2) >> 8) & 0xff
   \   000120   39           ADDC    A,R1
   \   000121   F583         MOV     DPH,A
   \   000123   E4           CLR     A
   \   000124   93           MOVC    A,@A+DPTR
   \   000125   F8           MOV     R0,A
   \   000126   85..82       MOV     DPL,?V4
   \   000129   85..83       MOV     DPH,?V5
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   C3           CLR     C
   \   00012E   98           SUBB    A,R0
   \   00012F   4031         JC      ??MAC_MlmeSetReq_8
   \   000131   85..82       MOV     DPL,?V4
   \   000134   85..83       MOV     DPH,?V5
   \   000137   E0           MOVX    A,@DPTR
   \   000138   FB           MOV     R3,A
   \   000139   EF           MOV     A,R7
   \   00013A   F8           MOV     R0,A
   \   00013B   7900         MOV     R1,#0x0
   \   00013D   E8           MOV     A,R0
   \   00013E   75F004       MOV     B,#0x4
   \   000141   A4           MUL     AB
   \   000142   C8           XCH     A,R0
   \   000143   AAF0         MOV     R2,B
   \   000145   75F000       MOV     B,#0x0
   \   000148   A4           MUL     AB
   \   000149   2A           ADD     A,R2
   \   00014A   FA           MOV     R2,A
   \   00014B   75F004       MOV     B,#0x4
   \   00014E   E9           MOV     A,R1
   \   00014F   A4           MUL     AB
   \   000150   2A           ADD     A,R2
   \   000151   F9           MOV     R1,A
   \   000152   74..         MOV     A,#(macPibTbl + 3) & 0xff
   \   000154   28           ADD     A,R0
   \   000155   F582         MOV     DPL,A
   \   000157   74..         MOV     A,#((macPibTbl + 3) >> 8) & 0xff
   \   000159   39           ADDC    A,R1
   \   00015A   F583         MOV     DPH,A
   \   00015C   E4           CLR     A
   \   00015D   93           MOVC    A,@A+DPTR
   \   00015E   C3           CLR     C
   \   00015F   9B           SUBB    A,R3
   \   000160   5005         JNC     ??MAC_MlmeSetReq_4
    376              {
    377                return MAC_INVALID_PARAMETER;
   \                     ??MAC_MlmeSetReq_8:
   \   000162   79E8         MOV     R1,#-0x18
   \   000164   02....       LJMP    ??MAC_MlmeSetReq_1 & 0xFFFF
    378              }
    379          
    380            }
    381          
    382            /* set value in PIB */
    383            HAL_ENTER_CRITICAL_SECTION(intState);
   \                     ??MAC_MlmeSetReq_4:
   \   000167   A2AF         MOV     C,0xa8.7
   \   000169   E4           CLR     A
   \   00016A   33           RLC     A
   \   00016B   F5..         MOV     ?V3,A
   \   00016D   C2AF         CLR     0xa8.7
    384            osal_memcpy((uint8 *) &macPib + macPibTbl[i].offset, pValue, macPibTbl[i].len);
   \   00016F                ; Setup parameters for call to function osal_memcpy
   \   00016F   85....       MOV     ?V0,?V4
   \   000172   85....       MOV     ?V1,?V5
   \   000175   75..00       MOV     ?V2,#0x0
   \   000178   78..         MOV     R0,#?V0
   \   00017A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00017D   EF           MOV     A,R7
   \   00017E   F8           MOV     R0,A
   \   00017F   7900         MOV     R1,#0x0
   \   000181   E8           MOV     A,R0
   \   000182   75F004       MOV     B,#0x4
   \   000185   A4           MUL     AB
   \   000186   C8           XCH     A,R0
   \   000187   AAF0         MOV     R2,B
   \   000189   75F000       MOV     B,#0x0
   \   00018C   A4           MUL     AB
   \   00018D   2A           ADD     A,R2
   \   00018E   FA           MOV     R2,A
   \   00018F   75F004       MOV     B,#0x4
   \   000192   E9           MOV     A,R1
   \   000193   A4           MUL     AB
   \   000194   2A           ADD     A,R2
   \   000195   F9           MOV     R1,A
   \   000196   74..         MOV     A,#(macPibTbl + 1) & 0xff
   \   000198   28           ADD     A,R0
   \   000199   F582         MOV     DPL,A
   \   00019B   74..         MOV     A,#((macPibTbl + 1) >> 8) & 0xff
   \   00019D   39           ADDC    A,R1
   \   00019E   F583         MOV     DPH,A
   \   0001A0   E4           CLR     A
   \   0001A1   93           MOVC    A,@A+DPTR
   \   0001A2   FC           MOV     R4,A
   \   0001A3   7D00         MOV     R5,#0x0
   \   0001A5   EF           MOV     A,R7
   \   0001A6   F8           MOV     R0,A
   \   0001A7   7900         MOV     R1,#0x0
   \   0001A9   E8           MOV     A,R0
   \   0001AA   75F004       MOV     B,#0x4
   \   0001AD   A4           MUL     AB
   \   0001AE   C8           XCH     A,R0
   \   0001AF   AAF0         MOV     R2,B
   \   0001B1   75F000       MOV     B,#0x0
   \   0001B4   A4           MUL     AB
   \   0001B5   2A           ADD     A,R2
   \   0001B6   FA           MOV     R2,A
   \   0001B7   75F004       MOV     B,#0x4
   \   0001BA   E9           MOV     A,R1
   \   0001BB   A4           MUL     AB
   \   0001BC   2A           ADD     A,R2
   \   0001BD   F9           MOV     R1,A
   \   0001BE   74..         MOV     A,#macPibTbl & 0xff
   \   0001C0   28           ADD     A,R0
   \   0001C1   F582         MOV     DPL,A
   \   0001C3   74..         MOV     A,#(macPibTbl >> 8) & 0xff
   \   0001C5   39           ADDC    A,R1
   \   0001C6   F583         MOV     DPH,A
   \   0001C8   E4           CLR     A
   \   0001C9   93           MOVC    A,@A+DPTR
   \   0001CA   F8           MOV     R0,A
   \   0001CB   7900         MOV     R1,#0x0
   \   0001CD   74..         MOV     A,#macPib & 0xff
   \   0001CF   28           ADD     A,R0
   \   0001D0   FA           MOV     R2,A
   \   0001D1   74..         MOV     A,#(macPib >> 8) & 0xff
   \   0001D3   39           ADDC    A,R1
   \   0001D4   FB           MOV     R3,A
   \   0001D5   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0001D8   7403         MOV     A,#0x3
   \   0001DA   12....       LCALL   ?DEALLOC_XSTACK8
    385            HAL_EXIT_CRITICAL_SECTION(intState);
   \   0001DD   85....       MOV     ?V0,?V3
   \   0001E0   E5..         MOV     A,?V3
   \   0001E2   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001E4   92AF         MOV     0xa8.7,C
    386          
    387            /* handle special cases */
    388            switch (pibAttribute)
   \   0001E6   EE           MOV     A,R6
   \   0001E7   24B0         ADD     A,#-0x50
   \   0001E9   6017         JZ      ??MAC_MlmeSetReq_9
   \   0001EB   24FE         ADD     A,#-0x2
   \   0001ED   602D         JZ      ??MAC_MlmeSetReq_10
   \   0001EF   14           DEC     A
   \   0001F0   601D         JZ      ??MAC_MlmeSetReq_11
   \   0001F2   2473         ADD     A,#0x73
   \   0001F4   604D         JZ      ??MAC_MlmeSetReq_12
   \   0001F6   14           DEC     A
   \   0001F7   6037         JZ      ??MAC_MlmeSetReq_13
   \   0001F9   14           DEC     A
   \   0001FA   603E         JZ      ??MAC_MlmeSetReq_14
   \   0001FC   24FD         ADD     A,#-0x3
   \   0001FE   604D         JZ      ??MAC_MlmeSetReq_15
   \   000200   8053         SJMP    ??MAC_MlmeSetReq_16
    389            {
    390              case MAC_PAN_ID:
    391                /* set pan id in radio */
    392                macRadioSetPanID(macPib.panId);
   \                     ??MAC_MlmeSetReq_9:
   \   000202                ; Setup parameters for call to function macRadioSetPanID
   \   000202   90....       MOV     DPTR,#macPib + 29
   \   000205   E0           MOVX    A,@DPTR
   \   000206   FA           MOV     R2,A
   \   000207   A3           INC     DPTR
   \   000208   E0           MOVX    A,@DPTR
   \   000209   FB           MOV     R3,A
   \   00020A   12....       LCALL   ??macRadioSetPanID?relay; Banked call to: macRadioSetPanID
    393                break;
   \   00020D   8046         SJMP    ??MAC_MlmeSetReq_16
    394          
    395              case MAC_SHORT_ADDRESS:
    396                /* set short address in radio */
    397                macRadioSetShortAddr(macPib.shortAddress);
   \                     ??MAC_MlmeSetReq_11:
   \   00020F                ; Setup parameters for call to function macRadioSetShortAddr
   \   00020F   90....       MOV     DPTR,#macPib + 33
   \   000212   E0           MOVX    A,@DPTR
   \   000213   FA           MOV     R2,A
   \   000214   A3           INC     DPTR
   \   000215   E0           MOVX    A,@DPTR
   \   000216   FB           MOV     R3,A
   \   000217   12....       LCALL   ??macRadioSetShortAddr?relay; Banked call to: macRadioSetShortAddr
    398                break;
   \   00021A   8039         SJMP    ??MAC_MlmeSetReq_16
    399          
    400              case MAC_RX_ON_WHEN_IDLE:
    401                /* turn rx on or off */
    402                if (macPib.rxOnWhenIdle)
   \                     ??MAC_MlmeSetReq_10:
   \   00021C   90....       MOV     DPTR,#macPib + 32
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   6007         JZ      ??MAC_MlmeSetReq_17
    403                {
    404                  macRxEnable(MAC_RX_WHEN_IDLE);
   \   000222                ; Setup parameters for call to function macRxEnable
   \   000222   7902         MOV     R1,#0x2
   \   000224   12....       LCALL   ??macRxEnable?relay  ; Banked call to: macRxEnable
   \   000227   802C         SJMP    ??MAC_MlmeSetReq_16
    405                }
    406                else
    407                {
    408                  macRxDisable(MAC_RX_WHEN_IDLE);
   \                     ??MAC_MlmeSetReq_17:
   \   000229                ; Setup parameters for call to function macRxDisable
   \   000229   7902         MOV     R1,#0x2
   \   00022B   12....       LCALL   ??macRxDisable?relay ; Banked call to: macRxDisable
    409                }
    410                break;
   \   00022E   8025         SJMP    ??MAC_MlmeSetReq_16
    411          
    412              case MAC_LOGICAL_CHANNEL:
    413                macRadioSetChannel(macPib.logicalChannel);
   \                     ??MAC_MlmeSetReq_13:
   \   000230                ; Setup parameters for call to function macRadioSetChannel
   \   000230   90....       MOV     DPTR,#macPib + 48
   \   000233   E0           MOVX    A,@DPTR
   \   000234   F9           MOV     R1,A
   \   000235   12....       LCALL   ??macRadioSetChannel?relay; Banked call to: macRadioSetChannel
    414                break;
   \   000238   801B         SJMP    ??MAC_MlmeSetReq_16
    415          
    416              case MAC_EXTENDED_ADDRESS:
    417                /* set ext address in radio */
    418                macRadioSetIEEEAddr(macPib.extendedAddress.addr.extAddr);
   \                     ??MAC_MlmeSetReq_14:
   \   00023A                ; Setup parameters for call to function macRadioSetIEEEAddr
   \   00023A   7A..         MOV     R2,#(macPib + 49) & 0xff
   \   00023C   7B..         MOV     R3,#((macPib + 49) >> 8) & 0xff
   \   00023E   12....       LCALL   ??macRadioSetIEEEAddr?relay; Banked call to: macRadioSetIEEEAddr
    419                break;
   \   000241   8012         SJMP    ??MAC_MlmeSetReq_16
    420          
    421          #ifndef MAC_OBSOLETE_PHY_TRANSMIT_POWER
    422              /* Define MAC_OBSOLETE_PHY_TRANSMIT_POWER to save some code */
    423          
    424              case MAC_PHY_TRANSMIT_POWER:
    425                /* Legacy transmit power attribute */
    426          #if !defined HAL_MAC_USE_REGISTER_POWER_VALUES && \
    427            !defined HAL_PA_LNA && !defined HAL_PA_LNA_CC2590
    428                /* Legacy transmit power attribute value for CC2530 alone,
    429                 * or runtime selection support build means a negative absolute value.
    430                 * However, when used as register power values or
    431                 * with HAL_PA_LNAxxx definition (without runtime selection)
    432                 * the attribute value is not a negative absolute value. */
    433                macPib.phyTransmitPower = (uint8)(-(int8)macPib.phyTransmitPower);
   \                     ??MAC_MlmeSetReq_12:
   \   000243   90....       MOV     DPTR,#macPib + 47
   \   000246   E0           MOVX    A,@DPTR
   \   000247   F4           CPL     A
   \   000248   04           INC     A
   \   000249   90....       MOV     DPTR,#macPib + 47
   \   00024C   F0           MOVX    @DPTR,A
    434          #endif /* !defined HAL_MAC_USE_REGISTER_POWER_VALUES && ... */
    435                /* pass through to next case -- do not break*/
    436          
    437          #endif /* MAC_OBSOLETE_PHY_TRANSMIT_POWER */
    438          
    439              case MAC_PHY_TRANSMIT_POWER_SIGNED:
    440                /* Set the transmit power */
    441                macRadioSetTxPower(macPib.phyTransmitPower);
   \                     ??MAC_MlmeSetReq_15:
   \   00024D                ; Setup parameters for call to function macRadioSetTxPower
   \   00024D   90....       MOV     DPTR,#macPib + 47
   \   000250   E0           MOVX    A,@DPTR
   \   000251   F9           MOV     R1,A
   \   000252   12....       LCALL   ??macRadioSetTxPower?relay; Banked call to: macRadioSetTxPower
    442                break;
    443          
    444              default:
    445                break;
    446            }
    447          
    448            return MAC_SUCCESS;
   \                     ??MAC_MlmeSetReq_16:
   \   000255   7900         MOV     R1,#0x0
   \                     ??MAC_MlmeSetReq_1:
   \   000257   7F06         MOV     R7,#0x6
   \   000259   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00025C                REQUIRE _A_IEN0
    449          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macPibReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macPibReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macPibIndex?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macPibIndex

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_MlmeGetReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_MlmeGetReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_MlmeSetReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_MlmeSetReq
    450          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     17   MAC_MlmeGetReq
        0     14   -> macPibIndex
        0     17   -> osal_memcpy
      0     17   MAC_MlmeSetReq
        0     14   -> macPibIndex
        0     14   -> macRadioSetChannel
        0     14   -> macRadioSetIEEEAddr
        0     14   -> macRadioSetPanID
        0     14   -> macRadioSetShortAddr
        0     14   -> macRadioSetTxPower
        0     14   -> macRxDisable
        0     14   -> macRxEnable
        0     17   -> osal_memcpy
      0     14   macPibIndex
      2      0   macPibReset
        2      0   -> macRadioRandomByte


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??MAC_MlmeGetReq?relay
       6  ??MAC_MlmeSetReq?relay
       6  ??macPibIndex?relay
       6  ??macPibReset?relay
     160  MAC_MlmeGetReq
     604  MAC_MlmeSetReq
       1  _A_IEN0
      60  macPib
      60  macPibDefaults
      43  macPibIndex
      39  macPibReset
     144  macPibTbl

 
 846 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
 204 bytes in segment CODE_C
   1 byte  in segment SFR_AN
  60 bytes in segment XDATA_Z
 
 1 074 bytes of CODE  memory
     0 bytes of DATA  memory (+ 1 byte shared)
    60 bytes of XDATA memory

Errors: none
Warnings: none
