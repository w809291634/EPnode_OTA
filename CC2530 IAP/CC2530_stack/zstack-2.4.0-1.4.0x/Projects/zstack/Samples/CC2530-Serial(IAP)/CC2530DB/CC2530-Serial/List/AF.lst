###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:36
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\stack\af\AF.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\stack\af\AF.c" -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D XLAB
#        -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\AF.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\AF.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2010-10-13 10:54:13 -0700 (Wed, 13 Oct 2010) $
      4            Revision:       $Revision: 24112 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          #include "rtg.h"
     52          
     53          #if defined ( MT_AF_CB_FUNC )
     54            #include "MT_AF.h"
     55          #endif
     56          
     57          #if defined ( INTER_PAN )
     58            #include "stub_aps.h"
     59          #endif
     60          
     61          /*********************************************************************
     62           * MACROS
     63           */
     64          
     65          /*********************************************************************
     66           * @fn      afSend
     67           *
     68           * @brief   Helper macro for V1 API to invoke V2 API.
     69           *
     70           * input parameters
     71           *
     72           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     73           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     74           * @param   cID - A valid cluster ID as specified by the Profile.
     75           * @param   len - Number of bytes of data pointed to by next param.
     76           * @param  *buf - A pointer to the data bytes to send.
     77           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     78           * @param  *transID - A pointer to a byte which can be modified and which will
     79           *                    be used as the transaction sequence number of the msg.
     80           *
     81           * output parameters
     82           *
     83           * @param  *transID - Incremented by one if the return value is success.
     84           *
     85           * @return  afStatus_t - See previous definition of afStatus_... types.
     86           */
     87          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     88                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     89                                    (cID), (len), (buf), (transID), (options), (radius) )
     90          
     91          /*********************************************************************
     92           * CONSTANTS
     93           */
     94          
     95          /*********************************************************************
     96           * TYPEDEFS
     97           */
     98          
     99          /*********************************************************************
    100           * GLOBAL VARIABLES
    101           */
    102          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    104          
    105          /*********************************************************************
    106           * EXTERNAL VARIABLES
    107           */
    108          
    109          /*********************************************************************
    110           * EXTERNAL FUNCTIONS
    111           */
    112          
    113          /*********************************************************************
    114           * LOCAL VARIABLES
    115           */
    116          
    117          /*********************************************************************
    118           * LOCAL FUNCTIONS
    119           */
    120          
    121          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    122                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    123                          byte SecurityUse, uint32 timestamp );
    124          
    125          static epList_t *afFindEndPointDescList( byte EndPoint );
    126          
    127          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    128          
    129          /*********************************************************************
    130           * NETWORK LAYER CALLBACKS
    131           */
    132          
    133          /*********************************************************************
    134           * PUBLIC FUNCTIONS
    135           */
    136          
    137          /*********************************************************************
    138           * @fn      afInit
    139           *
    140           * @brief   Initialization function for the AF.
    141           *
    142           * @param   none
    143           *
    144           * @return  none
    145           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    146          void afInit( void )
   \                     afInit:
    147          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    148            // Start with no endpoint defined
    149            epList = NULL;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   7400         MOV     A,#0x0
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   7400         MOV     A,#0x0
   \   00000D   F0           MOVX    @DPTR,A
    150          }
   \   00000E   D083         POP     DPH
   \   000010   D082         POP     DPL
   \   000012   02....       LJMP    ?BRET
    151          
    152          /*********************************************************************
    153           * @fn      afRegisterExtended
    154           *
    155           * @brief   Register an Application's EndPoint description.
    156           *
    157           * @param   epDesc - pointer to the Application's endpoint descriptor.
    158           * @param   descFn - pointer to descriptor callback function
    159           *
    160           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    161           *
    162           * @return  Pointer to epList_t on success, NULL otherwise.
    163           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    164          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn )
   \                     afRegisterExtended:
    165          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
    166            epList_t *ep;
    167            epList_t *epSearch;
    168          
    169            ep = osal_mem_alloc( sizeof ( epList_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A07         MOV     R2,#0x7
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV     ?V4,R2
   \   000016   8B..         MOV     ?V5,R3
   \   000018   AE..         MOV     R6,?V4
   \   00001A   AF..         MOV     R7,?V5
    170            if ( ep )
   \   00001C   EE           MOV     A,R6
   \   00001D   4F           ORL     A,R7
   \   00001E   7003         JNZ     $+5
   \   000020   02....       LJMP    ??afRegisterExtended_0 & 0xFFFF
    171            {
    172              // Fill in the new list entry
    173              ep->epDesc = epDesc;
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   E5..         MOV     A,?V6
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   E5..         MOV     A,?V7
   \   00002D   F0           MOVX    @DPTR,A
    174          
    175              // Default to allow Match Descriptor.
    176              ep->flags = eEP_AllowMatch;
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   7401         MOV     A,#0x1
   \   000036   F0           MOVX    @DPTR,A
    177              ep->pfnDescCB = descFn;
   \   000037   8E82         MOV     DPL,R6
   \   000039   8F83         MOV     DPH,R7
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   E5..         MOV     A,?V2
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   E5..         MOV     A,?V3
   \   000044   F0           MOVX    @DPTR,A
    178              ep->nextDesc = NULL;
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   7400         MOV     A,#0x0
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   7400         MOV     A,#0x0
   \   000054   F0           MOVX    @DPTR,A
    179          
    180              // Does a list exist?
    181              if ( epList == NULL )
   \   000055   90....       MOV     DPTR,#epList
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F8           MOV     R0,A
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F9           MOV     R1,A
   \   00005D   E8           MOV     A,R0
   \   00005E   49           ORL     A,R1
   \   00005F   700A         JNZ     ??afRegisterExtended_1
    182                epList = ep;  // Make this the first entry
   \   000061   90....       MOV     DPTR,#epList
   \   000064   EE           MOV     A,R6
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   EF           MOV     A,R7
   \   000068   F0           MOVX    @DPTR,A
   \   000069   8044         SJMP    ??afRegisterExtended_0
    183              else
    184              {
    185                // Look for the end of the list
    186                epSearch = epList;
   \                     ??afRegisterExtended_1:
   \   00006B   90....       MOV     DPTR,#epList
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F8           MOV     R0,A
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F9           MOV     R1,A
   \   000073   88..         MOV     ?V0,R0
   \   000075   89..         MOV     ?V1,R1
    187                while( epSearch->nextDesc != NULL )
   \                     ??afRegisterExtended_2:
   \   000077   85..82       MOV     DPL,?V0
   \   00007A   85..83       MOV     DPH,?V1
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F8           MOV     R0,A
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   F9           MOV     R1,A
   \   000087   E8           MOV     A,R0
   \   000088   49           ORL     A,R1
   \   000089   6014         JZ      ??afRegisterExtended_3
    188                  epSearch = epSearch->nextDesc;
   \   00008B   85..82       MOV     DPL,?V0
   \   00008E   85..83       MOV     DPH,?V1
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   F5..         MOV     ?V0,A
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   F5..         MOV     ?V1,A
   \   00009D   80D8         SJMP    ??afRegisterExtended_2
    189          
    190                // Add new entry to end of list
    191                epSearch->nextDesc = ep;
   \                     ??afRegisterExtended_3:
   \   00009F   85..82       MOV     DPL,?V0
   \   0000A2   85..83       MOV     DPH,?V1
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   EE           MOV     A,R6
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   EF           MOV     A,R7
   \   0000AE   F0           MOVX    @DPTR,A
    192              }
    193            }
    194          
    195            return ep;
   \                     ??afRegisterExtended_0:
   \   0000AF   EE           MOV     A,R6
   \   0000B0   FA           MOV     R2,A
   \   0000B1   EF           MOV     A,R7
   \   0000B2   FB           MOV     R3,A
   \   0000B3   7F08         MOV     R7,#0x8
   \   0000B5   02....       LJMP    ?BANKED_LEAVE_XDATA
    196          }
    197          
    198          /*********************************************************************
    199           * @fn      afRegister
    200           *
    201           * @brief   Register an Application's EndPoint description.
    202           *
    203           * @param   epDesc - pointer to the Application's endpoint descriptor.
    204           *
    205           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    206           *
    207           * @return  afStatus_SUCCESS - Registered
    208           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    209           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    210           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    212          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    213            epList_t *ep;
    214            
    215            // Look for duplicate endpoint
    216            if ( afFindEndPointDescList( epDesc->endPoint ) )
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   12....       LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
   \   000012   8A..         MOV     ?V2,R2
   \   000014   8B..         MOV     ?V3,R3
   \   000016   E5..         MOV     A,?V2
   \   000018   45..         ORL     A,?V3
   \   00001A   6004         JZ      ??afRegister_0
    217              return ( afStatus_INVALID_PARAMETER );
   \   00001C   7902         MOV     R1,#0x2
   \   00001E   8021         SJMP    ??afRegister_1
    218            
    219            ep = afRegisterExtended( epDesc, NULL );
   \                     ??afRegister_0:
   \   000020                ; Setup parameters for call to function afRegisterExtended
   \   000020   7C00         MOV     R4,#0x0
   \   000022   7D00         MOV     R5,#0x0
   \   000024   EE           MOV     A,R6
   \   000025   FA           MOV     R2,A
   \   000026   EF           MOV     A,R7
   \   000027   FB           MOV     R3,A
   \   000028   12....       LCALL   ??afRegisterExtended?relay; Banked call to: afRegisterExtended
   \   00002B   8A..         MOV     ?V2,R2
   \   00002D   8B..         MOV     ?V3,R3
   \   00002F   85....       MOV     ?V0,?V2
   \   000032   85....       MOV     ?V1,?V3
    220          
    221            return ((ep == NULL) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \   000035   E5..         MOV     A,?V0
   \   000037   45..         ORL     A,?V1
   \   000039   7004         JNZ     ??afRegister_2
   \   00003B   7910         MOV     R1,#0x10
   \   00003D   8002         SJMP    ??afRegister_1
   \                     ??afRegister_2:
   \   00003F   7900         MOV     R1,#0x0
   \                     ??afRegister_1:
   \   000041   7F04         MOV     R7,#0x4
   \   000043   02....       LJMP    ?BANKED_LEAVE_XDATA
    222          }
    223          
    224          
    225          /*********************************************************************
    226           * @fn          afDataConfirm
    227           *
    228           * @brief       This function will generate the Data Confirm back to
    229           *              the application.
    230           *
    231           * @param       endPoint - confirm end point
    232           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    233           * @param       status - status of APSDE_DATA_REQUEST
    234           *
    235           * @return      none
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    238          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V4,R2
   \   000009   8B..         MOV     ?V1,R3
    239            endPointDesc_t *epDesc;
    240            afDataConfirm_t *msgPtr;
    241          
    242            // Find the endpoint description
    243            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   A9..         MOV     R1,?V0
   \   00000D   12....       LCALL   ??afFindEndPointDesc?relay; Banked call to: afFindEndPointDesc
   \   000010   8A..         MOV     ?V2,R2
   \   000012   8B..         MOV     ?V3,R3
   \   000014   85....       MOV     ?V6,?V2
   \   000017   85....       MOV     ?V7,?V3
    244            if ( epDesc == NULL )
   \   00001A   E5..         MOV     A,?V6
   \   00001C   45..         ORL     A,?V7
   \   00001E   605A         JZ      ??afDataConfirm_0
    245              return;
    246          
    247            // Determine the incoming command type
    248            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   000020                ; Setup parameters for call to function osal_msg_allocate
   \   000020   7A04         MOV     R2,#0x4
   \   000022   7B00         MOV     R3,#0x0
   \   000024   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
   \   000027   8A..         MOV     ?V2,R2
   \   000029   8B..         MOV     ?V3,R3
   \   00002B   AE..         MOV     R6,?V2
   \   00002D   AF..         MOV     R7,?V3
    249            if ( msgPtr )
   \   00002F   EE           MOV     A,R6
   \   000030   4F           ORL     A,R7
   \   000031   6047         JZ      ??afDataConfirm_0
    250            {
    251              // Build the Data Confirm message
    252              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   74FD         MOV     A,#-0x3
   \   000039   F0           MOVX    @DPTR,A
    253              msgPtr->hdr.status = status;
   \   00003A   E5..         MOV     A,?V1
   \   00003C   C0E0         PUSH    A
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   A3           INC     DPTR
   \   000043   D0E0         POP     A
   \   000045   F0           MOVX    @DPTR,A
    254              msgPtr->endpoint = endPoint;
   \   000046   E5..         MOV     A,?V0
   \   000048   C0E0         PUSH    A
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   D0E0         POP     A
   \   000052   F0           MOVX    @DPTR,A
    255              msgPtr->transID = transID;
   \   000053   E5..         MOV     A,?V4
   \   000055   C0E0         PUSH    A
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   D0E0         POP     A
   \   000060   F0           MOVX    @DPTR,A
    256          
    257          #if defined ( MT_AF_CB_FUNC )
    258              /* If MT has subscribed for this callback, don't send as a message. */
    259              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    260              {
    261                /* Send callback if it's subscribed */
    262                MT_AfDataConfirm ((void *)msgPtr);
    263                /* Release the memory. */
    264                osal_msg_deallocate( (void *)msgPtr );
    265              }
    266              else
    267          #endif
    268              {
    269                /* send message through task message */
    270                osal_msg_send( *(epDesc->task_id), (byte *)msgPtr );
   \   000061                ; Setup parameters for call to function osal_msg_send
   \   000061   EE           MOV     A,R6
   \   000062   FA           MOV     R2,A
   \   000063   EF           MOV     A,R7
   \   000064   FB           MOV     R3,A
   \   000065   85..82       MOV     DPL,?V6
   \   000068   85..83       MOV     DPH,?V7
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F8           MOV     R0,A
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F583         MOV     DPH,A
   \   000072   8882         MOV     DPL,R0
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F9           MOV     R1,A
   \   000076   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
   \   000079   E9           MOV     A,R1
    271              }
    272            }
    273          }
   \                     ??afDataConfirm_0:
   \   00007A   7F08         MOV     R7,#0x8
   \   00007C   02....       LJMP    ?BANKED_LEAVE_XDATA
    274          
    275          /*********************************************************************
    276           * @fn          afIncomingData
    277           *
    278           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    279           *
    280           * @param       aff  - pointer to APS frame format
    281           * @param       SrcAddress  - Source address
    282           * @param       sig - incoming message's link quality
    283           * @param       SecurityUse - Security enable/disable
    284           *
    285           * @return      none
    286           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    288                               NLDE_Signal_t *sig, byte SecurityUse, uint32 timestamp )
    289          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   7409         MOV     A,#0x9
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   E9           MOV     A,R1
   \   00001F   C0E0         PUSH    A
   \   000021   7408         MOV     A,#0x8
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   D0E0         POP     A
   \   000028   F0           MOVX    @DPTR,A
   \   000029   741F         MOV     A,#0x1f
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?L_MOV_X
    290            endPointDesc_t *epDesc = NULL;
   \   000033   7E00         MOV     R6,#0x0
   \   000035   7F00         MOV     R7,#0x0
    291            epList_t *pList = epList;
   \   000037   90....       MOV     DPTR,#epList
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V6,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F5..         MOV     ?V7,A
    292          #if !defined ( APS_NO_GROUPS )    
    293            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   74FE         MOV     A,#-0x2
   \   000049   F0           MOVX    @DPTR,A
    294          #endif  
    295          
    296            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \   00004A   7401         MOV     A,#0x1
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F8           MOV     R0,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F583         MOV     DPH,A
   \   000055   8882         MOV     DPL,R0
   \   000057   E0           MOVX    A,@DPTR
   \   000058   540C         ANL     A,#0xc
   \   00005A   640C         XRL     A,#0xc
   \   00005C   7064         JNZ     ??afIncomingData_0
    297            {
    298          #if !defined ( APS_NO_GROUPS )    
    299              // Find the first endpoint for this group
    300              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   00005E                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   00005E   79FE         MOV     R1,#-0x2
   \   000060   7401         MOV     A,#0x1
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F8           MOV     R0,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F583         MOV     DPH,A
   \   00006B   8882         MOV     DPL,R0
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   FA           MOV     R2,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   FB           MOV     R3,A
   \   000076   12....       LCALL   ??aps_FindGroupForEndpoint?relay; Banked call to: aps_FindGroupForEndpoint
   \   000079   E9           MOV     A,R1
   \   00007A   C0E0         PUSH    A
   \   00007C   85..82       MOV     DPL,?XSP + 0
   \   00007F   85..83       MOV     DPH,?XSP + 1
   \   000082   D0E0         POP     A
   \   000084   F0           MOVX    @DPTR,A
    301              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \   000085   85..82       MOV     DPL,?XSP + 0
   \   000088   85..83       MOV     DPH,?XSP + 1
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   64FE         XRL     A,#0xfe
   \   00008E   7003         JNZ     $+5
   \   000090   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    302                return;   // No endpoint found
    303          
    304              epDesc = afFindEndPointDesc( grpEp );
   \   000093                ; Setup parameters for call to function afFindEndPointDesc
   \   000093   85..82       MOV     DPL,?XSP + 0
   \   000096   85..83       MOV     DPH,?XSP + 1
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   F9           MOV     R1,A
   \   00009B   12....       LCALL   ??afFindEndPointDesc?relay; Banked call to: afFindEndPointDesc
   \   00009E   8A..         MOV     ?V4,R2
   \   0000A0   8B..         MOV     ?V5,R3
   \   0000A2   AE..         MOV     R6,?V4
   \   0000A4   AF..         MOV     R7,?V5
    305              if ( epDesc == NULL )
   \   0000A6   EE           MOV     A,R6
   \   0000A7   4F           ORL     A,R7
   \   0000A8   7003         JNZ     $+5
   \   0000AA   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    306                return;   // Endpoint descriptor not found
    307          
    308              pList = afFindEndPointDescList( epDesc->endPoint );
   \   0000AD                ; Setup parameters for call to function afFindEndPointDescList
   \   0000AD   8E82         MOV     DPL,R6
   \   0000AF   8F83         MOV     DPH,R7
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F9           MOV     R1,A
   \   0000B3   12....       LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
   \   0000B6   8A..         MOV     ?V4,R2
   \   0000B8   8B..         MOV     ?V5,R3
   \   0000BA   85....       MOV     ?V6,?V4
   \   0000BD   85....       MOV     ?V7,?V5
   \   0000C0   8062         SJMP    ??afIncomingData_2
    309          #else
    310              return; // Not supported
    311          #endif    
    312            }
    313            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   0000C2   7401         MOV     A,#0x1
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   F8           MOV     R0,A
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   F583         MOV     DPH,A
   \   0000CD   8882         MOV     DPL,R0
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   64FF         XRL     A,#0xff
   \   0000D4   7017         JNZ     ??afIncomingData_3
    314            {
    315              // Set the list
    316              if ( pList != NULL )
   \   0000D6   E5..         MOV     A,?V6
   \   0000D8   45..         ORL     A,?V7
   \   0000DA   6048         JZ      ??afIncomingData_2
    317              {
    318                epDesc = pList->epDesc;
   \   0000DC   85..82       MOV     DPL,?V6
   \   0000DF   85..83       MOV     DPH,?V7
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   F8           MOV     R0,A
   \   0000E4   A3           INC     DPTR
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   F9           MOV     R1,A
   \   0000E7   E8           MOV     A,R0
   \   0000E8   FE           MOV     R6,A
   \   0000E9   E9           MOV     A,R1
   \   0000EA   FF           MOV     R7,A
   \   0000EB   8037         SJMP    ??afIncomingData_2
    319              }
    320            }
    321            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_3:
   \   0000ED                ; Setup parameters for call to function afFindEndPointDesc
   \   0000ED   7401         MOV     A,#0x1
   \   0000EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   F8           MOV     R0,A
   \   0000F4   A3           INC     DPTR
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   F583         MOV     DPH,A
   \   0000F8   8882         MOV     DPL,R0
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   F9           MOV     R1,A
   \   0000FE   12....       LCALL   ??afFindEndPointDesc?relay; Banked call to: afFindEndPointDesc
   \   000101   8A..         MOV     ?V4,R2
   \   000103   8B..         MOV     ?V5,R3
   \   000105   A8..         MOV     R0,?V4
   \   000107   A9..         MOV     R1,?V5
   \   000109   E8           MOV     A,R0
   \   00010A   FE           MOV     R6,A
   \   00010B   E9           MOV     A,R1
   \   00010C   FF           MOV     R7,A
   \   00010D   E8           MOV     A,R0
   \   00010E   49           ORL     A,R1
   \   00010F   6013         JZ      ??afIncomingData_2
    322            {
    323              pList = afFindEndPointDescList( epDesc->endPoint );
   \   000111                ; Setup parameters for call to function afFindEndPointDescList
   \   000111   8E82         MOV     DPL,R6
   \   000113   8F83         MOV     DPH,R7
   \   000115   E0           MOVX    A,@DPTR
   \   000116   F9           MOV     R1,A
   \   000117   12....       LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
   \   00011A   8A..         MOV     ?V4,R2
   \   00011C   8B..         MOV     ?V5,R3
   \   00011E   85....       MOV     ?V6,?V4
   \   000121   85....       MOV     ?V7,?V5
    324            }
    325          
    326            while ( epDesc )
   \                     ??afIncomingData_2:
   \   000124   EE           MOV     A,R6
   \   000125   4F           ORL     A,R7
   \   000126   7003         JNZ     $+5
   \   000128   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    327            {
    328              uint16 epProfileID = 0xFFFF;  // Invalid Profile ID
   \   00012B   7406         MOV     A,#0x6
   \   00012D   12....       LCALL   ?XSTACK_DISP0_8
   \   000130   74FF         MOV     A,#-0x1
   \   000132   F0           MOVX    @DPTR,A
   \   000133   A3           INC     DPTR
   \   000134   74FF         MOV     A,#-0x1
   \   000136   F0           MOVX    @DPTR,A
    329              
    330              if ( pList->pfnDescCB )
   \   000137   85..82       MOV     DPL,?V6
   \   00013A   85..83       MOV     DPH,?V7
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   E0           MOVX    A,@DPTR
   \   000141   F8           MOV     R0,A
   \   000142   A3           INC     DPTR
   \   000143   E0           MOVX    A,@DPTR
   \   000144   F9           MOV     R1,A
   \   000145   E8           MOV     A,R0
   \   000146   49           ORL     A,R1
   \   000147   605F         JZ      ??afIncomingData_4
    331              {
    332                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    333                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
   \   000149                ; Setup parameters for indirect call
   \   000149   8E82         MOV     DPL,R6
   \   00014B   8F83         MOV     DPH,R7
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   FA           MOV     R2,A
   \   00014F   7902         MOV     R1,#0x2
   \   000151   85..82       MOV     DPL,?V6
   \   000154   85..83       MOV     DPH,?V7
   \   000157   A3           INC     DPTR
   \   000158   A3           INC     DPTR
   \   000159   A3           INC     DPTR
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   F8           MOV     R0,A
   \   00015C   A3           INC     DPTR
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   F583         MOV     DPH,A
   \   000160   8882         MOV     DPL,R0
   \   000162   12....       LCALL   ?CALL_IND
   \   000165   7404         MOV     A,#0x4
   \   000167   12....       LCALL   ?XSTACK_DISP0_8
   \   00016A   EA           MOV     A,R2
   \   00016B   F0           MOVX    @DPTR,A
   \   00016C   A3           INC     DPTR
   \   00016D   EB           MOV     A,R3
   \   00016E   F0           MOVX    @DPTR,A
    334                if ( pID )
   \   00016F   7404         MOV     A,#0x4
   \   000171   12....       LCALL   ?XSTACK_DISP0_8
   \   000174   E0           MOVX    A,@DPTR
   \   000175   F8           MOV     R0,A
   \   000176   A3           INC     DPTR
   \   000177   E0           MOVX    A,@DPTR
   \   000178   F9           MOV     R1,A
   \   000179   E8           MOV     A,R0
   \   00017A   49           ORL     A,R1
   \   00017B   605A         JZ      ??afIncomingData_5
    335                {
    336                  epProfileID = *pID;
   \   00017D   7404         MOV     A,#0x4
   \   00017F   12....       LCALL   ?XSTACK_DISP0_8
   \   000182   E0           MOVX    A,@DPTR
   \   000183   F8           MOV     R0,A
   \   000184   A3           INC     DPTR
   \   000185   E0           MOVX    A,@DPTR
   \   000186   F583         MOV     DPH,A
   \   000188   8882         MOV     DPL,R0
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   F8           MOV     R0,A
   \   00018C   A3           INC     DPTR
   \   00018D   E0           MOVX    A,@DPTR
   \   00018E   F9           MOV     R1,A
   \   00018F   7406         MOV     A,#0x6
   \   000191   12....       LCALL   ?XSTACK_DISP0_8
   \   000194   E8           MOV     A,R0
   \   000195   F0           MOVX    @DPTR,A
   \   000196   A3           INC     DPTR
   \   000197   E9           MOV     A,R1
   \   000198   F0           MOVX    @DPTR,A
    337                  osal_mem_free( pID );
   \   000199                ; Setup parameters for call to function osal_mem_free
   \   000199   7404         MOV     A,#0x4
   \   00019B   12....       LCALL   ?XSTACK_DISP0_8
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   FA           MOV     R2,A
   \   0001A0   A3           INC     DPTR
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   FB           MOV     R3,A
   \   0001A3   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0001A6   802F         SJMP    ??afIncomingData_5
    338                }
    339              }
    340              else if ( epDesc->simpleDesc )
   \                     ??afIncomingData_4:
   \   0001A8   8E82         MOV     DPL,R6
   \   0001AA   8F83         MOV     DPH,R7
   \   0001AC   A3           INC     DPTR
   \   0001AD   A3           INC     DPTR
   \   0001AE   A3           INC     DPTR
   \   0001AF   E0           MOVX    A,@DPTR
   \   0001B0   F8           MOV     R0,A
   \   0001B1   A3           INC     DPTR
   \   0001B2   E0           MOVX    A,@DPTR
   \   0001B3   F9           MOV     R1,A
   \   0001B4   E8           MOV     A,R0
   \   0001B5   49           ORL     A,R1
   \   0001B6   601F         JZ      ??afIncomingData_5
    341              {
    342                epProfileID = epDesc->simpleDesc->AppProfId;
   \   0001B8   8E82         MOV     DPL,R6
   \   0001BA   8F83         MOV     DPH,R7
   \   0001BC   A3           INC     DPTR
   \   0001BD   A3           INC     DPTR
   \   0001BE   A3           INC     DPTR
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   F8           MOV     R0,A
   \   0001C1   A3           INC     DPTR
   \   0001C2   E0           MOVX    A,@DPTR
   \   0001C3   F583         MOV     DPH,A
   \   0001C5   8882         MOV     DPL,R0
   \   0001C7   A3           INC     DPTR
   \   0001C8   E0           MOVX    A,@DPTR
   \   0001C9   F8           MOV     R0,A
   \   0001CA   A3           INC     DPTR
   \   0001CB   E0           MOVX    A,@DPTR
   \   0001CC   F9           MOV     R1,A
   \   0001CD   7406         MOV     A,#0x6
   \   0001CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D2   E8           MOV     A,R0
   \   0001D3   F0           MOVX    @DPTR,A
   \   0001D4   A3           INC     DPTR
   \   0001D5   E9           MOV     A,R1
   \   0001D6   F0           MOVX    @DPTR,A
    343              }
    344          
    345              if ( (aff->ProfileID == epProfileID) ||
    346                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) )
   \                     ??afIncomingData_5:
   \   0001D7   7401         MOV     A,#0x1
   \   0001D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DC   E0           MOVX    A,@DPTR
   \   0001DD   F8           MOV     R0,A
   \   0001DE   A3           INC     DPTR
   \   0001DF   E0           MOVX    A,@DPTR
   \   0001E0   C8           XCH     A,R0
   \   0001E1   2408         ADD     A,#0x8
   \   0001E3   F582         MOV     DPL,A
   \   0001E5   C8           XCH     A,R0
   \   0001E6   3400         ADDC    A,#0x0
   \   0001E8   F583         MOV     DPH,A
   \   0001EA   E0           MOVX    A,@DPTR
   \   0001EB   F8           MOV     R0,A
   \   0001EC   A3           INC     DPTR
   \   0001ED   E0           MOVX    A,@DPTR
   \   0001EE   F9           MOV     R1,A
   \   0001EF   7406         MOV     A,#0x6
   \   0001F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   68           XRL     A,R0
   \   0001F6   7003         JNZ     ??afIncomingData_6
   \   0001F8   A3           INC     DPTR
   \   0001F9   E0           MOVX    A,@DPTR
   \   0001FA   69           XRL     A,R1
   \                     ??afIncomingData_6:
   \   0001FB   6029         JZ      ??afIncomingData_7
   \   0001FD   8E82         MOV     DPL,R6
   \   0001FF   8F83         MOV     DPH,R7
   \   000201   E0           MOVX    A,@DPTR
   \   000202   6003         JZ      $+5
   \   000204   02....       LJMP    ??afIncomingData_8 & 0xFFFF
   \   000207   7401         MOV     A,#0x1
   \   000209   12....       LCALL   ?XSTACK_DISP0_8
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   F8           MOV     R0,A
   \   00020E   A3           INC     DPTR
   \   00020F   E0           MOVX    A,@DPTR
   \   000210   C8           XCH     A,R0
   \   000211   2408         ADD     A,#0x8
   \   000213   F582         MOV     DPL,A
   \   000215   C8           XCH     A,R0
   \   000216   3400         ADDC    A,#0x0
   \   000218   F583         MOV     DPH,A
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   F8           MOV     R0,A
   \   00021C   A3           INC     DPTR
   \   00021D   E0           MOVX    A,@DPTR
   \   00021E   F9           MOV     R1,A
   \   00021F   E8           MOV     A,R0
   \   000220   49           ORL     A,R1
   \   000221   6003         JZ      $+5
   \   000223   02....       LJMP    ??afIncomingData_8 & 0xFFFF
    347              {
    348                {
    349                  // Save original endpoint
    350                  uint8 endpoint = aff->DstEndPoint;
   \                     ??afIncomingData_7:
   \   000226   7401         MOV     A,#0x1
   \   000228   12....       LCALL   ?XSTACK_DISP0_8
   \   00022B   E0           MOVX    A,@DPTR
   \   00022C   F8           MOV     R0,A
   \   00022D   A3           INC     DPTR
   \   00022E   E0           MOVX    A,@DPTR
   \   00022F   F583         MOV     DPH,A
   \   000231   8882         MOV     DPL,R0
   \   000233   A3           INC     DPTR
   \   000234   A3           INC     DPTR
   \   000235   E0           MOVX    A,@DPTR
   \   000236   C0E0         PUSH    A
   \   000238   7403         MOV     A,#0x3
   \   00023A   12....       LCALL   ?XSTACK_DISP0_8
   \   00023D   D0E0         POP     A
   \   00023F   F0           MOVX    @DPTR,A
    351                  
    352                  // overwrite with descriptor's endpoint
    353                  aff->DstEndPoint = epDesc->endPoint;   
   \   000240   8E82         MOV     DPL,R6
   \   000242   8F83         MOV     DPH,R7
   \   000244   E0           MOVX    A,@DPTR
   \   000245   C0E0         PUSH    A
   \   000247   7401         MOV     A,#0x1
   \   000249   12....       LCALL   ?XSTACK_DISP0_8
   \   00024C   E0           MOVX    A,@DPTR
   \   00024D   F8           MOV     R0,A
   \   00024E   A3           INC     DPTR
   \   00024F   E0           MOVX    A,@DPTR
   \   000250   F583         MOV     DPH,A
   \   000252   8882         MOV     DPL,R0
   \   000254   A3           INC     DPTR
   \   000255   A3           INC     DPTR
   \   000256   D0E0         POP     A
   \   000258   F0           MOVX    @DPTR,A
    354                  
    355                  afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig, SecurityUse, timestamp );
   \   000259                ; Setup parameters for call to function afBuildMSGIncoming
   \   000259   78..         MOV     R0,#?V0
   \   00025B   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00025E   7421         MOV     A,#0x21
   \   000260   12....       LCALL   ?XSTACK_DISP0_8
   \   000263   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000266   7421         MOV     A,#0x21
   \   000268   12....       LCALL   ?XSTACK_DISP0_8
   \   00026B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00026E   7411         MOV     A,#0x11
   \   000270   12....       LCALL   ?XSTACK_DISP0_8
   \   000273   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000276   7412         MOV     A,#0x12
   \   000278   12....       LCALL   ?XSTACK_DISP0_8
   \   00027B   E0           MOVX    A,@DPTR
   \   00027C   F9           MOV     R1,A
   \   00027D   EE           MOV     A,R6
   \   00027E   FC           MOV     R4,A
   \   00027F   EF           MOV     A,R7
   \   000280   FD           MOV     R5,A
   \   000281   740B         MOV     A,#0xb
   \   000283   12....       LCALL   ?XSTACK_DISP0_8
   \   000286   E0           MOVX    A,@DPTR
   \   000287   FA           MOV     R2,A
   \   000288   A3           INC     DPTR
   \   000289   E0           MOVX    A,@DPTR
   \   00028A   FB           MOV     R3,A
   \   00028B   12....       LCALL   ??afBuildMSGIncoming?relay; Banked call to: afBuildMSGIncoming
   \   00028E   740A         MOV     A,#0xa
   \   000290   12....       LCALL   ?DEALLOC_XSTACK8
    356                  
    357                  // Restore with original endpoint
    358                  aff->DstEndPoint = endpoint;
   \   000293   7403         MOV     A,#0x3
   \   000295   12....       LCALL   ?XSTACK_DISP0_8
   \   000298   E0           MOVX    A,@DPTR
   \   000299   C0E0         PUSH    A
   \   00029B   7401         MOV     A,#0x1
   \   00029D   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A0   E0           MOVX    A,@DPTR
   \   0002A1   F8           MOV     R0,A
   \   0002A2   A3           INC     DPTR
   \   0002A3   E0           MOVX    A,@DPTR
   \   0002A4   F583         MOV     DPH,A
   \   0002A6   8882         MOV     DPL,R0
   \   0002A8   A3           INC     DPTR
   \   0002A9   A3           INC     DPTR
   \   0002AA   D0E0         POP     A
   \   0002AC   F0           MOVX    @DPTR,A
    359                }
    360              }
    361          
    362              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \                     ??afIncomingData_8:
   \   0002AD   7401         MOV     A,#0x1
   \   0002AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B2   E0           MOVX    A,@DPTR
   \   0002B3   F8           MOV     R0,A
   \   0002B4   A3           INC     DPTR
   \   0002B5   E0           MOVX    A,@DPTR
   \   0002B6   F583         MOV     DPH,A
   \   0002B8   8882         MOV     DPL,R0
   \   0002BA   E0           MOVX    A,@DPTR
   \   0002BB   540C         ANL     A,#0xc
   \   0002BD   640C         XRL     A,#0xc
   \   0002BF   7065         JNZ     ??afIncomingData_9
    363              {
    364          #if !defined ( APS_NO_GROUPS )      
    365                // Find the next endpoint for this group
    366                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
   \   0002C1                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   0002C1   85..82       MOV     DPL,?XSP + 0
   \   0002C4   85..83       MOV     DPH,?XSP + 1
   \   0002C7   E0           MOVX    A,@DPTR
   \   0002C8   F9           MOV     R1,A
   \   0002C9   7401         MOV     A,#0x1
   \   0002CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0002CE   E0           MOVX    A,@DPTR
   \   0002CF   F8           MOV     R0,A
   \   0002D0   A3           INC     DPTR
   \   0002D1   E0           MOVX    A,@DPTR
   \   0002D2   F583         MOV     DPH,A
   \   0002D4   8882         MOV     DPL,R0
   \   0002D6   A3           INC     DPTR
   \   0002D7   A3           INC     DPTR
   \   0002D8   A3           INC     DPTR
   \   0002D9   A3           INC     DPTR
   \   0002DA   E0           MOVX    A,@DPTR
   \   0002DB   FA           MOV     R2,A
   \   0002DC   A3           INC     DPTR
   \   0002DD   E0           MOVX    A,@DPTR
   \   0002DE   FB           MOV     R3,A
   \   0002DF   12....       LCALL   ??aps_FindGroupForEndpoint?relay; Banked call to: aps_FindGroupForEndpoint
   \   0002E2   E9           MOV     A,R1
   \   0002E3   C0E0         PUSH    A
   \   0002E5   85..82       MOV     DPL,?XSP + 0
   \   0002E8   85..83       MOV     DPH,?XSP + 1
   \   0002EB   D0E0         POP     A
   \   0002ED   F0           MOVX    @DPTR,A
    367                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \   0002EE   85..82       MOV     DPL,?XSP + 0
   \   0002F1   85..83       MOV     DPH,?XSP + 1
   \   0002F4   E0           MOVX    A,@DPTR
   \   0002F5   64FE         XRL     A,#0xfe
   \   0002F7   6079         JZ      ??afIncomingData_1
    368                  return;   // No endpoint found
    369          
    370                epDesc = afFindEndPointDesc( grpEp );
   \   0002F9                ; Setup parameters for call to function afFindEndPointDesc
   \   0002F9   85..82       MOV     DPL,?XSP + 0
   \   0002FC   85..83       MOV     DPH,?XSP + 1
   \   0002FF   E0           MOVX    A,@DPTR
   \   000300   F9           MOV     R1,A
   \   000301   12....       LCALL   ??afFindEndPointDesc?relay; Banked call to: afFindEndPointDesc
   \   000304   8A..         MOV     ?V4,R2
   \   000306   8B..         MOV     ?V5,R3
   \   000308   AE..         MOV     R6,?V4
   \   00030A   AF..         MOV     R7,?V5
    371                if ( epDesc == NULL )
   \   00030C   EE           MOV     A,R6
   \   00030D   4F           ORL     A,R7
   \   00030E   6062         JZ      ??afIncomingData_1
    372                  return;   // Endpoint descriptor not found
    373          
    374                pList = afFindEndPointDescList( epDesc->endPoint );
   \   000310                ; Setup parameters for call to function afFindEndPointDescList
   \   000310   8E82         MOV     DPL,R6
   \   000312   8F83         MOV     DPH,R7
   \   000314   E0           MOVX    A,@DPTR
   \   000315   F9           MOV     R1,A
   \   000316   12....       LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
   \   000319   8A..         MOV     ?V4,R2
   \   00031B   8B..         MOV     ?V5,R3
   \   00031D   85....       MOV     ?V6,?V4
   \   000320   85....       MOV     ?V7,?V5
   \   000323   02....       LJMP    ??afIncomingData_2 & 0xFFFF
    375          #else
    376                return;
    377          #endif      
    378              }
    379              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_9:
   \   000326   7401         MOV     A,#0x1
   \   000328   12....       LCALL   ?XSTACK_DISP0_8
   \   00032B   E0           MOVX    A,@DPTR
   \   00032C   F8           MOV     R0,A
   \   00032D   A3           INC     DPTR
   \   00032E   E0           MOVX    A,@DPTR
   \   00032F   F583         MOV     DPH,A
   \   000331   8882         MOV     DPL,R0
   \   000333   A3           INC     DPTR
   \   000334   A3           INC     DPTR
   \   000335   E0           MOVX    A,@DPTR
   \   000336   64FF         XRL     A,#0xff
   \   000338   7031         JNZ     ??afIncomingData_10
    380              {
    381                pList = pList->nextDesc;
   \   00033A   85..82       MOV     DPL,?V6
   \   00033D   85..83       MOV     DPH,?V7
   \   000340   A3           INC     DPTR
   \   000341   A3           INC     DPTR
   \   000342   A3           INC     DPTR
   \   000343   A3           INC     DPTR
   \   000344   A3           INC     DPTR
   \   000345   E0           MOVX    A,@DPTR
   \   000346   F5..         MOV     ?V6,A
   \   000348   A3           INC     DPTR
   \   000349   E0           MOVX    A,@DPTR
   \   00034A   F5..         MOV     ?V7,A
    382                if ( pList )
   \   00034C   E5..         MOV     A,?V6
   \   00034E   45..         ORL     A,?V7
   \   000350   6012         JZ      ??afIncomingData_11
    383                  epDesc = pList->epDesc;
   \   000352   85..82       MOV     DPL,?V6
   \   000355   85..83       MOV     DPH,?V7
   \   000358   E0           MOVX    A,@DPTR
   \   000359   F8           MOV     R0,A
   \   00035A   A3           INC     DPTR
   \   00035B   E0           MOVX    A,@DPTR
   \   00035C   F9           MOV     R1,A
   \   00035D   E8           MOV     A,R0
   \   00035E   FE           MOV     R6,A
   \   00035F   E9           MOV     A,R1
   \   000360   FF           MOV     R7,A
   \   000361   02....       LJMP    ??afIncomingData_2 & 0xFFFF
    384                else
    385                  epDesc = NULL;
   \                     ??afIncomingData_11:
   \   000364   7E00         MOV     R6,#0x0
   \   000366   7F00         MOV     R7,#0x0
   \   000368   02....       LJMP    ??afIncomingData_2 & 0xFFFF
    386              }
    387              else
    388                epDesc = NULL;
   \                     ??afIncomingData_10:
   \   00036B   7E00         MOV     R6,#0x0
   \   00036D   7F00         MOV     R7,#0x0
   \   00036F   02....       LJMP    ??afIncomingData_2 & 0xFFFF
    389            }
    390          }
   \                     ??afIncomingData_1:
   \   000372   740B         MOV     A,#0xb
   \   000374   12....       LCALL   ?DEALLOC_XSTACK8
   \   000377   7F08         MOV     R7,#0x8
   \   000379   02....       LJMP    ?BANKED_LEAVE_XDATA
    391          
    392          /*********************************************************************
    393           * @fn          afBuildMSGIncoming
    394           *
    395           * @brief       Build the message for the app
    396           *
    397           * @param
    398           *
    399           * @return      pointer to next in data buffer
    400           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    401          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    402                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig, 
    403                           byte SecurityUse, uint32 timestamp )
    404          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7403         MOV     A,#0x3
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
   \   000014   E9           MOV     A,R1
   \   000015   C0E0         PUSH    A
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   D0E0         POP     A
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   8A..         MOV     ?V4,R2
   \   000022   8B..         MOV     ?V5,R3
   \   000024   7419         MOV     A,#0x19
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V6,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V7,A
    405            afIncomingMSGPacket_t *MSGpkt;
    406            const byte len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
   \   000030   E5..         MOV     A,?V4
   \   000032   2410         ADD     A,#0x10
   \   000034   F582         MOV     DPL,A
   \   000036   E4           CLR     A
   \   000037   35..         ADDC    A,?V5
   \   000039   F583         MOV     DPH,A
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   2423         ADD     A,#0x23
   \   00003E   F5..         MOV     ?V3,A
    407            byte *asdu = aff->asdu;
   \   000040   E5..         MOV     A,?V4
   \   000042   240E         ADD     A,#0xe
   \   000044   F582         MOV     DPL,A
   \   000046   E4           CLR     A
   \   000047   35..         ADDC    A,?V5
   \   000049   F583         MOV     DPH,A
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F8           MOV     R0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   7401         MOV     A,#0x1
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   E8           MOV     A,R0
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   E9           MOV     A,R1
   \   000059   F0           MOVX    @DPTR,A
    408            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \   00005A                ; Setup parameters for call to function osal_msg_allocate
   \   00005A   AA..         MOV     R2,?V3
   \   00005C   7B00         MOV     R3,#0x0
   \   00005E   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
   \   000061   8A..         MOV     ?V0,R2
   \   000063   8B..         MOV     ?V1,R3
   \   000065   AE..         MOV     R6,?V0
   \   000067   AF..         MOV     R7,?V1
    409          
    410            if ( MSGpkt == NULL )
   \   000069   EE           MOV     A,R6
   \   00006A   4F           ORL     A,R7
   \   00006B   7003         JNZ     $+5
   \   00006D   02....       LJMP    ??afBuildMSGIncoming_0 & 0xFFFF
    411            {
    412              return;
    413            }
    414          
    415            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   000070   8E82         MOV     DPL,R6
   \   000072   8F83         MOV     DPH,R7
   \   000074   741A         MOV     A,#0x1a
   \   000076   F0           MOVX    @DPTR,A
    416            MSGpkt->groupId = aff->GroupID;
   \   000077   85..82       MOV     DPL,?V4
   \   00007A   85..83       MOV     DPH,?V5
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F8           MOV     R0,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F9           MOV     R1,A
   \   000086   8E82         MOV     DPL,R6
   \   000088   8F83         MOV     DPH,R7
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   E8           MOV     A,R0
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   E9           MOV     A,R1
   \   000090   F0           MOVX    @DPTR,A
    417            MSGpkt->clusterId = aff->ClusterID;
   \   000091   85..82       MOV     DPL,?V4
   \   000094   85..83       MOV     DPH,?V5
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   F8           MOV     R0,A
   \   00009F   A3           INC     DPTR
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F9           MOV     R1,A
   \   0000A2   8E82         MOV     DPL,R6
   \   0000A4   8F83         MOV     DPH,R7
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   E8           MOV     A,R0
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   E9           MOV     A,R1
   \   0000AE   F0           MOVX    @DPTR,A
    418            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \   0000AF                ; Setup parameters for call to function afCopyAddress
   \   0000AF   7415         MOV     A,#0x15
   \   0000B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   FC           MOV     R4,A
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   FD           MOV     R5,A
   \   0000B9   EE           MOV     A,R6
   \   0000BA   2406         ADD     A,#0x6
   \   0000BC   FA           MOV     R2,A
   \   0000BD   E4           CLR     A
   \   0000BE   3F           ADDC    A,R7
   \   0000BF   FB           MOV     R3,A
   \   0000C0   12....       LCALL   ??afCopyAddress?relay; Banked call to: afCopyAddress
    419            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   0000C3   85..82       MOV     DPL,?V4
   \   0000C6   85..83       MOV     DPH,?V5
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   C0E0         PUSH    A
   \   0000CF   EE           MOV     A,R6
   \   0000D0   240F         ADD     A,#0xf
   \   0000D2   F582         MOV     DPL,A
   \   0000D4   E4           CLR     A
   \   0000D5   3F           ADDC    A,R7
   \   0000D6   F583         MOV     DPH,A
   \   0000D8   D0E0         POP     A
   \   0000DA   F0           MOVX    @DPTR,A
    420            MSGpkt->endPoint = epDesc->endPoint;
   \   0000DB   7403         MOV     A,#0x3
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   F8           MOV     R0,A
   \   0000E2   A3           INC     DPTR
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   F583         MOV     DPH,A
   \   0000E6   8882         MOV     DPL,R0
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   C0E0         PUSH    A
   \   0000EB   EE           MOV     A,R6
   \   0000EC   2414         ADD     A,#0x14
   \   0000EE   F582         MOV     DPL,A
   \   0000F0   E4           CLR     A
   \   0000F1   3F           ADDC    A,R7
   \   0000F2   F583         MOV     DPH,A
   \   0000F4   D0E0         POP     A
   \   0000F6   F0           MOVX    @DPTR,A
    421            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   0000F7   E5..         MOV     A,?V4
   \   0000F9   240C         ADD     A,#0xc
   \   0000FB   F582         MOV     DPL,A
   \   0000FD   E4           CLR     A
   \   0000FE   35..         ADDC    A,?V5
   \   000100   F583         MOV     DPH,A
   \   000102   E0           MOVX    A,@DPTR
   \   000103   C0E0         PUSH    A
   \   000105   EE           MOV     A,R6
   \   000106   2415         ADD     A,#0x15
   \   000108   F582         MOV     DPL,A
   \   00010A   E4           CLR     A
   \   00010B   3F           ADDC    A,R7
   \   00010C   F583         MOV     DPH,A
   \   00010E   D0E0         POP     A
   \   000110   F0           MOVX    @DPTR,A
    422            MSGpkt->LinkQuality = sig->LinkQuality;
   \   000111   85..82       MOV     DPL,?V6
   \   000114   85..83       MOV     DPH,?V7
   \   000117   E0           MOVX    A,@DPTR
   \   000118   C0E0         PUSH    A
   \   00011A   EE           MOV     A,R6
   \   00011B   2416         ADD     A,#0x16
   \   00011D   F582         MOV     DPL,A
   \   00011F   E4           CLR     A
   \   000120   3F           ADDC    A,R7
   \   000121   F583         MOV     DPH,A
   \   000123   D0E0         POP     A
   \   000125   F0           MOVX    @DPTR,A
    423            MSGpkt->correlation = sig->correlation;
   \   000126   85..82       MOV     DPL,?V6
   \   000129   85..83       MOV     DPH,?V7
   \   00012C   A3           INC     DPTR
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   C0E0         PUSH    A
   \   000130   EE           MOV     A,R6
   \   000131   2417         ADD     A,#0x17
   \   000133   F582         MOV     DPL,A
   \   000135   E4           CLR     A
   \   000136   3F           ADDC    A,R7
   \   000137   F583         MOV     DPH,A
   \   000139   D0E0         POP     A
   \   00013B   F0           MOVX    @DPTR,A
    424            MSGpkt->rssi = sig->rssi;
   \   00013C   85..82       MOV     DPL,?V6
   \   00013F   85..83       MOV     DPH,?V7
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   E0           MOVX    A,@DPTR
   \   000145   C0E0         PUSH    A
   \   000147   EE           MOV     A,R6
   \   000148   2418         ADD     A,#0x18
   \   00014A   F582         MOV     DPL,A
   \   00014C   E4           CLR     A
   \   00014D   3F           ADDC    A,R7
   \   00014E   F583         MOV     DPH,A
   \   000150   D0E0         POP     A
   \   000152   F0           MOVX    @DPTR,A
    425            MSGpkt->SecurityUse = SecurityUse;
   \   000153   85..82       MOV     DPL,?XSP + 0
   \   000156   85..83       MOV     DPH,?XSP + 1
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   C0E0         PUSH    A
   \   00015C   EE           MOV     A,R6
   \   00015D   2419         ADD     A,#0x19
   \   00015F   F582         MOV     DPL,A
   \   000161   E4           CLR     A
   \   000162   3F           ADDC    A,R7
   \   000163   F583         MOV     DPH,A
   \   000165   D0E0         POP     A
   \   000167   F0           MOVX    @DPTR,A
    426            MSGpkt->timestamp = timestamp;
   \   000168   741B         MOV     A,#0x1b
   \   00016A   12....       LCALL   ?XSTACK_DISP0_8
   \   00016D   12....       LCALL   ?XLOAD_R0123
   \   000170   EE           MOV     A,R6
   \   000171   241A         ADD     A,#0x1a
   \   000173   F582         MOV     DPL,A
   \   000175   E4           CLR     A
   \   000176   3F           ADDC    A,R7
   \   000177   F583         MOV     DPH,A
   \   000179   12....       LCALL   ?XSTORE_R0123
    427            MSGpkt->macDestAddr = aff->macDestAddr;
   \   00017C   85..82       MOV     DPL,?V4
   \   00017F   85..83       MOV     DPH,?V5
   \   000182   A3           INC     DPTR
   \   000183   A3           INC     DPTR
   \   000184   A3           INC     DPTR
   \   000185   A3           INC     DPTR
   \   000186   A3           INC     DPTR
   \   000187   A3           INC     DPTR
   \   000188   A3           INC     DPTR
   \   000189   A3           INC     DPTR
   \   00018A   A3           INC     DPTR
   \   00018B   A3           INC     DPTR
   \   00018C   E0           MOVX    A,@DPTR
   \   00018D   F8           MOV     R0,A
   \   00018E   A3           INC     DPTR
   \   00018F   E0           MOVX    A,@DPTR
   \   000190   F9           MOV     R1,A
   \   000191   EE           MOV     A,R6
   \   000192   2412         ADD     A,#0x12
   \   000194   F582         MOV     DPL,A
   \   000196   E4           CLR     A
   \   000197   3F           ADDC    A,R7
   \   000198   F583         MOV     DPH,A
   \   00019A   E8           MOV     A,R0
   \   00019B   F0           MOVX    @DPTR,A
   \   00019C   A3           INC     DPTR
   \   00019D   E9           MOV     A,R1
   \   00019E   F0           MOVX    @DPTR,A
    428            MSGpkt->srcAddr.panId = SrcPanId;
   \   00019F   7417         MOV     A,#0x17
   \   0001A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   F8           MOV     R0,A
   \   0001A6   A3           INC     DPTR
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   F9           MOV     R1,A
   \   0001A9   EE           MOV     A,R6
   \   0001AA   2410         ADD     A,#0x10
   \   0001AC   F582         MOV     DPL,A
   \   0001AE   E4           CLR     A
   \   0001AF   3F           ADDC    A,R7
   \   0001B0   F583         MOV     DPH,A
   \   0001B2   E8           MOV     A,R0
   \   0001B3   F0           MOVX    @DPTR,A
   \   0001B4   A3           INC     DPTR
   \   0001B5   E9           MOV     A,R1
   \   0001B6   F0           MOVX    @DPTR,A
    429            MSGpkt->cmd.TransSeqNumber = 0;
   \   0001B7   EE           MOV     A,R6
   \   0001B8   241E         ADD     A,#0x1e
   \   0001BA   F582         MOV     DPL,A
   \   0001BC   E4           CLR     A
   \   0001BD   3F           ADDC    A,R7
   \   0001BE   F583         MOV     DPH,A
   \   0001C0   7400         MOV     A,#0x0
   \   0001C2   F0           MOVX    @DPTR,A
    430            MSGpkt->cmd.DataLength = aff->asduLength;
   \   0001C3   E5..         MOV     A,?V4
   \   0001C5   2410         ADD     A,#0x10
   \   0001C7   F582         MOV     DPL,A
   \   0001C9   E4           CLR     A
   \   0001CA   35..         ADDC    A,?V5
   \   0001CC   F583         MOV     DPH,A
   \   0001CE   E0           MOVX    A,@DPTR
   \   0001CF   F8           MOV     R0,A
   \   0001D0   7900         MOV     R1,#0x0
   \   0001D2   EE           MOV     A,R6
   \   0001D3   241F         ADD     A,#0x1f
   \   0001D5   F582         MOV     DPL,A
   \   0001D7   E4           CLR     A
   \   0001D8   3F           ADDC    A,R7
   \   0001D9   F583         MOV     DPH,A
   \   0001DB   E8           MOV     A,R0
   \   0001DC   F0           MOVX    @DPTR,A
   \   0001DD   A3           INC     DPTR
   \   0001DE   E9           MOV     A,R1
   \   0001DF   F0           MOVX    @DPTR,A
    431          
    432            if ( MSGpkt->cmd.DataLength )
   \   0001E0   EE           MOV     A,R6
   \   0001E1   241F         ADD     A,#0x1f
   \   0001E3   F582         MOV     DPL,A
   \   0001E5   E4           CLR     A
   \   0001E6   3F           ADDC    A,R7
   \   0001E7   F583         MOV     DPH,A
   \   0001E9   E0           MOVX    A,@DPTR
   \   0001EA   F8           MOV     R0,A
   \   0001EB   A3           INC     DPTR
   \   0001EC   E0           MOVX    A,@DPTR
   \   0001ED   F9           MOV     R1,A
   \   0001EE   E8           MOV     A,R0
   \   0001EF   49           ORL     A,R1
   \   0001F0   604F         JZ      ??afBuildMSGIncoming_1
    433            {
    434              MSGpkt->cmd.Data = (byte *)(MSGpkt + 1);
   \   0001F2   EE           MOV     A,R6
   \   0001F3   2423         ADD     A,#0x23
   \   0001F5   F8           MOV     R0,A
   \   0001F6   E4           CLR     A
   \   0001F7   3F           ADDC    A,R7
   \   0001F8   F9           MOV     R1,A
   \   0001F9   EE           MOV     A,R6
   \   0001FA   2421         ADD     A,#0x21
   \   0001FC   F582         MOV     DPL,A
   \   0001FE   E4           CLR     A
   \   0001FF   3F           ADDC    A,R7
   \   000200   F583         MOV     DPH,A
   \   000202   E8           MOV     A,R0
   \   000203   F0           MOVX    @DPTR,A
   \   000204   A3           INC     DPTR
   \   000205   E9           MOV     A,R1
   \   000206   F0           MOVX    @DPTR,A
    435              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \   000207                ; Setup parameters for call to function osal_memcpy
   \   000207   7401         MOV     A,#0x1
   \   000209   12....       LCALL   ?XSTACK_DISP0_8
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   F5..         MOV     ?V0,A
   \   00020F   A3           INC     DPTR
   \   000210   E0           MOVX    A,@DPTR
   \   000211   F5..         MOV     ?V1,A
   \   000213   75..00       MOV     ?V2,#0x0
   \   000216   78..         MOV     R0,#?V0
   \   000218   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00021B   EE           MOV     A,R6
   \   00021C   241F         ADD     A,#0x1f
   \   00021E   F582         MOV     DPL,A
   \   000220   E4           CLR     A
   \   000221   3F           ADDC    A,R7
   \   000222   F583         MOV     DPH,A
   \   000224   E0           MOVX    A,@DPTR
   \   000225   FC           MOV     R4,A
   \   000226   A3           INC     DPTR
   \   000227   E0           MOVX    A,@DPTR
   \   000228   FD           MOV     R5,A
   \   000229   EE           MOV     A,R6
   \   00022A   2421         ADD     A,#0x21
   \   00022C   F582         MOV     DPL,A
   \   00022E   E4           CLR     A
   \   00022F   3F           ADDC    A,R7
   \   000230   F583         MOV     DPH,A
   \   000232   E0           MOVX    A,@DPTR
   \   000233   FA           MOV     R2,A
   \   000234   A3           INC     DPTR
   \   000235   E0           MOVX    A,@DPTR
   \   000236   FB           MOV     R3,A
   \   000237   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00023A   7403         MOV     A,#0x3
   \   00023C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00023F   8010         SJMP    ??afBuildMSGIncoming_2
    436            }
    437            else
    438            {
    439              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_1:
   \   000241   EE           MOV     A,R6
   \   000242   2421         ADD     A,#0x21
   \   000244   F582         MOV     DPL,A
   \   000246   E4           CLR     A
   \   000247   3F           ADDC    A,R7
   \   000248   F583         MOV     DPH,A
   \   00024A   7400         MOV     A,#0x0
   \   00024C   F0           MOVX    @DPTR,A
   \   00024D   A3           INC     DPTR
   \   00024E   7400         MOV     A,#0x0
   \   000250   F0           MOVX    @DPTR,A
    440            }
    441          
    442          #if defined ( MT_AF_CB_FUNC )
    443            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    444            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    445            {
    446              MT_AfIncomingMsg( (void *)MSGpkt );
    447              // Release the memory.
    448              osal_msg_deallocate( (void *)MSGpkt );
    449            }
    450            else
    451          #endif
    452            {
    453              // Send message through task message.
    454              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_2:
   \   000251                ; Setup parameters for call to function osal_msg_send
   \   000251   EE           MOV     A,R6
   \   000252   FA           MOV     R2,A
   \   000253   EF           MOV     A,R7
   \   000254   FB           MOV     R3,A
   \   000255   7403         MOV     A,#0x3
   \   000257   12....       LCALL   ?XSTACK_DISP0_8
   \   00025A   E0           MOVX    A,@DPTR
   \   00025B   F8           MOV     R0,A
   \   00025C   A3           INC     DPTR
   \   00025D   E0           MOVX    A,@DPTR
   \   00025E   F583         MOV     DPH,A
   \   000260   8882         MOV     DPL,R0
   \   000262   A3           INC     DPTR
   \   000263   E0           MOVX    A,@DPTR
   \   000264   F8           MOV     R0,A
   \   000265   A3           INC     DPTR
   \   000266   E0           MOVX    A,@DPTR
   \   000267   F583         MOV     DPH,A
   \   000269   8882         MOV     DPL,R0
   \   00026B   E0           MOVX    A,@DPTR
   \   00026C   F9           MOV     R1,A
   \   00026D   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
   \   000270   E9           MOV     A,R1
    455            }
    456          }
   \                     ??afBuildMSGIncoming_0:
   \   000271   7405         MOV     A,#0x5
   \   000273   12....       LCALL   ?DEALLOC_XSTACK8
   \   000276   7F08         MOV     R7,#0x8
   \   000278   02....       LJMP    ?BANKED_LEAVE_XDATA
    457          
    458          /*********************************************************************
    459           * @fn      AF_DataRequest
    460           *
    461           * @brief   Common functionality for invoking APSDE_DataReq() for both
    462           *          SendMulti and MSG-Send.
    463           *
    464           * input parameters
    465           *
    466           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    467           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    468           * @param   cID - A valid cluster ID as specified by the Profile.
    469           * @param   len - Number of bytes of data pointed to by next param.
    470           * @param  *buf - A pointer to the data bytes to send.
    471           * @param  *transID - A pointer to a byte which can be modified and which will
    472           *                    be used as the transaction sequence number of the msg.
    473           * @param   options - Valid bit mask of Tx options.
    474           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    475           *
    476           * output parameters
    477           *
    478           * @param  *transID - Incremented by one if the return value is success.
    479           *
    480           * @return  afStatus_t - See previous definition of afStatus_... types.
    481           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    482          uint8 AF_DataRequestDiscoverRoute = TRUE;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    483          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    484                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    485                                     uint8 options, uint8 radius )
    486          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
   \   000012   89..         MOV     ?V1,R1
    487            pDescCB pfnDescCB;
    488            ZStatus_t stat;
    489            APSDE_DataReq_t req;
    490            afDataReqMTU_t mtu;
    491          
    492            // Verify source end point
    493            if ( srcEP == NULL )
   \   000014   E5..         MOV     A,?V2
   \   000016   45..         ORL     A,?V3
   \   000018   7005         JNZ     ??AF_DataRequest_0
    494            {
    495              return afStatus_INVALID_PARAMETER;
   \   00001A   7902         MOV     R1,#0x2
   \   00001C   02....       LJMP    ??AF_DataRequest_1 & 0xFFFF
    496            }
    497          
    498          #if !defined( REFLECTOR )
    499            if ( dstAddr->addrMode == afAddrNotPresent )
    500            {
    501              return afStatus_INVALID_PARAMETER;
    502            }
    503          #endif
    504            
    505            // Check if route is available before sending data 
    506            if ( options & AF_LIMIT_CONCENTRATOR  )
   \                     ??AF_DataRequest_0:
   \   00001F   E5..         MOV     A,?V1
   \   000021   A2E3         MOV     C,0xE0 /* A   */.3
   \   000023   5046         JNC     ??AF_DataRequest_2
    507            {
    508              if ( dstAddr->addrMode != afAddr16Bit )
   \   000025   8E82         MOV     DPL,R6
   \   000027   8F83         MOV     DPH,R7
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   6402         XRL     A,#0x2
   \   000034   6005         JZ      ??AF_DataRequest_3
    509              {
    510                return ( afStatus_INVALID_PARAMETER );
   \   000036   7902         MOV     R1,#0x2
   \   000038   02....       LJMP    ??AF_DataRequest_1 & 0xFFFF
    511              }
    512               
    513              // First, make sure the destination is not its self, then check for an existing route.
    514              if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
    515                  && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
   \                     ??AF_DataRequest_3:
   \   00003B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00003B   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   00003E   8A..         MOV     ?V4,R2
   \   000040   8B..         MOV     ?V5,R3
   \   000042   A8..         MOV     R0,?V4
   \   000044   A9..         MOV     R1,?V5
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   68           XRL     A,R0
   \   00004C   7003         JNZ     ??AF_DataRequest_4
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   69           XRL     A,R1
   \                     ??AF_DataRequest_4:
   \   000051   6018         JZ      ??AF_DataRequest_2
   \   000053                ; Setup parameters for call to function RTG_CheckRtStatus
   \   000053   7C03         MOV     R4,#0x3
   \   000055   7901         MOV     R1,#0x1
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FA           MOV     R2,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FB           MOV     R3,A
   \   000060   12....       LCALL   ??RTG_CheckRtStatus?relay; Banked call to: RTG_CheckRtStatus
   \   000063   E9           MOV     A,R1
   \   000064   6005         JZ      ??AF_DataRequest_2
    516              {
    517                // A valid route to a concentrator wasn't found
    518                return ( afStatus_NO_ROUTE );
   \   000066   79CD         MOV     R1,#-0x33
   \   000068   02....       LJMP    ??AF_DataRequest_1 & 0xFFFF
    519              }
    520            } 
    521            
    522            // Validate broadcasting
    523            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    524                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_2:
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   6402         XRL     A,#0x2
   \   00007A   6011         JZ      ??AF_DataRequest_5
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   640F         XRL     A,#0xf
   \   00008B   7036         JNZ     ??AF_DataRequest_6
    525            {
    526              // Check for valid broadcast values
    527              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_5:
   \   00008D                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   E0           MOVX    A,@DPTR
   \   000092   FA           MOV     R2,A
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   FB           MOV     R3,A
   \   000096   12....       LCALL   ??NLME_IsAddressBroadcast?relay; Banked call to: NLME_IsAddressBroadcast
   \   000099   E9           MOV     A,R1
   \   00009A   6011         JZ      ??AF_DataRequest_7
    528              {
    529                // Force mode to broadcast
    530                dstAddr->addrMode = afAddrBroadcast;
   \   00009C   8E82         MOV     DPL,R6
   \   00009E   8F83         MOV     DPH,R7
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   740F         MOV     A,#0xf
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   804C         SJMP    ??AF_DataRequest_8
    531              }
    532              else
    533              {
    534                // Address is not a valid broadcast type
    535                if ( dstAddr->addrMode == afAddrBroadcast )
   \                     ??AF_DataRequest_7:
   \   0000AD   8E82         MOV     DPL,R6
   \   0000AF   8F83         MOV     DPH,R7
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   640F         XRL     A,#0xf
   \   0000BC   703B         JNZ     ??AF_DataRequest_8
    536                {
    537                  return afStatus_INVALID_PARAMETER;
   \   0000BE   7902         MOV     R1,#0x2
   \   0000C0   02....       LJMP    ??AF_DataRequest_1 & 0xFFFF
    538                }
    539              }
    540            }
    541            else if ( dstAddr->addrMode != afAddr64Bit &&
    542                      dstAddr->addrMode != afAddrGroup &&
    543                      dstAddr->addrMode != afAddrNotPresent )
   \                     ??AF_DataRequest_6:
   \   0000C3   8E82         MOV     DPL,R6
   \   0000C5   8F83         MOV     DPH,R7
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   6403         XRL     A,#0x3
   \   0000D2   6025         JZ      ??AF_DataRequest_8
   \   0000D4   8E82         MOV     DPL,R6
   \   0000D6   8F83         MOV     DPH,R7
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   6401         XRL     A,#0x1
   \   0000E3   6014         JZ      ??AF_DataRequest_8
   \   0000E5   8E82         MOV     DPL,R6
   \   0000E7   8F83         MOV     DPH,R7
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   6005         JZ      ??AF_DataRequest_8
    544            {
    545              return afStatus_INVALID_PARAMETER;
   \   0000F4   7902         MOV     R1,#0x2
   \   0000F6   02....       LJMP    ??AF_DataRequest_1 & 0xFFFF
    546            }
    547            
    548            // Set destination address
    549            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_8:
   \   0000F9   8E82         MOV     DPL,R6
   \   0000FB   8F83         MOV     DPH,R7
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   A3           INC     DPTR
   \   000103   A3           INC     DPTR
   \   000104   A3           INC     DPTR
   \   000105   E0           MOVX    A,@DPTR
   \   000106   C0E0         PUSH    A
   \   000108   740C         MOV     A,#0xc
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   D0E0         POP     A
   \   00010F   F0           MOVX    @DPTR,A
    550            if ( dstAddr->addrMode == afAddr64Bit )
   \   000110   8E82         MOV     DPL,R6
   \   000112   8F83         MOV     DPH,R7
   \   000114   A3           INC     DPTR
   \   000115   A3           INC     DPTR
   \   000116   A3           INC     DPTR
   \   000117   A3           INC     DPTR
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   6403         XRL     A,#0x3
   \   00011F   700E         JNZ     ??AF_DataRequest_9
    551              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   000121                ; Setup parameters for call to function sAddrExtCpy
   \   000121   EE           MOV     A,R6
   \   000122   FC           MOV     R4,A
   \   000123   EF           MOV     A,R7
   \   000124   FD           MOV     R5,A
   \   000125   7404         MOV     A,#0x4
   \   000127   12....       LCALL   ?XSTACK_DISP101_8
   \   00012A   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   00012D   8013         SJMP    ??AF_DataRequest_10
    552            else
    553              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_9:
   \   00012F   8E82         MOV     DPL,R6
   \   000131   8F83         MOV     DPH,R7
   \   000133   E0           MOVX    A,@DPTR
   \   000134   F8           MOV     R0,A
   \   000135   A3           INC     DPTR
   \   000136   E0           MOVX    A,@DPTR
   \   000137   F9           MOV     R1,A
   \   000138   7404         MOV     A,#0x4
   \   00013A   12....       LCALL   ?XSTACK_DISP0_8
   \   00013D   E8           MOV     A,R0
   \   00013E   F0           MOVX    @DPTR,A
   \   00013F   A3           INC     DPTR
   \   000140   E9           MOV     A,R1
   \   000141   F0           MOVX    @DPTR,A
    554            
    555            req.profileID = ZDO_PROFILE_ID;
   \                     ??AF_DataRequest_10:
   \   000142   7413         MOV     A,#0x13
   \   000144   12....       LCALL   ?XSTACK_DISP0_8
   \   000147   7400         MOV     A,#0x0
   \   000149   F0           MOVX    @DPTR,A
   \   00014A   A3           INC     DPTR
   \   00014B   7400         MOV     A,#0x0
   \   00014D   F0           MOVX    @DPTR,A
    556          
    557            if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   00014E                ; Setup parameters for call to function afGetDescCB
   \   00014E   AA..         MOV     R2,?V2
   \   000150   AB..         MOV     R3,?V3
   \   000152   12....       LCALL   ??afGetDescCB?relay  ; Banked call to: afGetDescCB
   \   000155   8A..         MOV     ?V4,R2
   \   000157   8B..         MOV     ?V5,R3
   \   000159   A8..         MOV     R0,?V4
   \   00015B   A9..         MOV     R1,?V5
   \   00015D   7402         MOV     A,#0x2
   \   00015F   12....       LCALL   ?XSTACK_DISP0_8
   \   000162   E8           MOV     A,R0
   \   000163   F0           MOVX    @DPTR,A
   \   000164   A3           INC     DPTR
   \   000165   E9           MOV     A,R1
   \   000166   F0           MOVX    @DPTR,A
   \   000167   E8           MOV     A,R0
   \   000168   49           ORL     A,R1
   \   000169   6048         JZ      ??AF_DataRequest_11
    558            {
    559              uint16 *pID = (uint16 *)(pfnDescCB(
    560                                           AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   00016B                ; Setup parameters for indirect call
   \   00016B   85..82       MOV     DPL,?V2
   \   00016E   85..83       MOV     DPH,?V3
   \   000171   E0           MOVX    A,@DPTR
   \   000172   FA           MOV     R2,A
   \   000173   7902         MOV     R1,#0x2
   \   000175   7402         MOV     A,#0x2
   \   000177   12....       LCALL   ?XSTACK_DISP0_8
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   F8           MOV     R0,A
   \   00017C   A3           INC     DPTR
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   F583         MOV     DPH,A
   \   000180   8882         MOV     DPL,R0
   \   000182   12....       LCALL   ?CALL_IND
   \   000185   8A..         MOV     ?V4,R2
   \   000187   8B..         MOV     ?V5,R3
   \   000189   85....       MOV     ?V6,?V4
   \   00018C   85....       MOV     ?V7,?V5
    561              if ( pID )
   \   00018F   E5..         MOV     A,?V6
   \   000191   45..         ORL     A,?V7
   \   000193   6051         JZ      ??AF_DataRequest_12
    562              {
    563                req.profileID = *pID;
   \   000195   85..82       MOV     DPL,?V6
   \   000198   85..83       MOV     DPH,?V7
   \   00019B   E0           MOVX    A,@DPTR
   \   00019C   F8           MOV     R0,A
   \   00019D   A3           INC     DPTR
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   F9           MOV     R1,A
   \   0001A0   7413         MOV     A,#0x13
   \   0001A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A5   E8           MOV     A,R0
   \   0001A6   F0           MOVX    @DPTR,A
   \   0001A7   A3           INC     DPTR
   \   0001A8   E9           MOV     A,R1
   \   0001A9   F0           MOVX    @DPTR,A
    564                osal_mem_free( pID );
   \   0001AA                ; Setup parameters for call to function osal_mem_free
   \   0001AA   AA..         MOV     R2,?V6
   \   0001AC   AB..         MOV     R3,?V7
   \   0001AE   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0001B1   8033         SJMP    ??AF_DataRequest_12
    565              }
    566            }
    567            else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_11:
   \   0001B3   85..82       MOV     DPL,?V2
   \   0001B6   85..83       MOV     DPH,?V3
   \   0001B9   A3           INC     DPTR
   \   0001BA   A3           INC     DPTR
   \   0001BB   A3           INC     DPTR
   \   0001BC   E0           MOVX    A,@DPTR
   \   0001BD   F8           MOV     R0,A
   \   0001BE   A3           INC     DPTR
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   F9           MOV     R1,A
   \   0001C1   E8           MOV     A,R0
   \   0001C2   49           ORL     A,R1
   \   0001C3   6021         JZ      ??AF_DataRequest_12
    568            {
    569              req.profileID = srcEP->simpleDesc->AppProfId;
   \   0001C5   85..82       MOV     DPL,?V2
   \   0001C8   85..83       MOV     DPH,?V3
   \   0001CB   A3           INC     DPTR
   \   0001CC   A3           INC     DPTR
   \   0001CD   A3           INC     DPTR
   \   0001CE   E0           MOVX    A,@DPTR
   \   0001CF   F8           MOV     R0,A
   \   0001D0   A3           INC     DPTR
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   F583         MOV     DPH,A
   \   0001D4   8882         MOV     DPL,R0
   \   0001D6   A3           INC     DPTR
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   F8           MOV     R0,A
   \   0001D9   A3           INC     DPTR
   \   0001DA   E0           MOVX    A,@DPTR
   \   0001DB   F9           MOV     R1,A
   \   0001DC   7413         MOV     A,#0x13
   \   0001DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E1   E8           MOV     A,R0
   \   0001E2   F0           MOVX    @DPTR,A
   \   0001E3   A3           INC     DPTR
   \   0001E4   E9           MOV     A,R1
   \   0001E5   F0           MOVX    @DPTR,A
    570            }
    571          
    572            req.txOptions = 0;
   \                     ??AF_DataRequest_12:
   \   0001E6   7419         MOV     A,#0x19
   \   0001E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EB   7400         MOV     A,#0x0
   \   0001ED   F0           MOVX    @DPTR,A
   \   0001EE   A3           INC     DPTR
   \   0001EF   7400         MOV     A,#0x0
   \   0001F1   F0           MOVX    @DPTR,A
    573          
    574            if ( ( options & AF_ACK_REQUEST              ) &&
    575                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    576                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   0001F2   E5..         MOV     A,?V1
   \   0001F4   A2E4         MOV     C,0xE0 /* A   */.4
   \   0001F6   5022         JNC     ??AF_DataRequest_13
   \   0001F8   740C         MOV     A,#0xc
   \   0001FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FD   E0           MOVX    A,@DPTR
   \   0001FE   640F         XRL     A,#0xf
   \   000200   6018         JZ      ??AF_DataRequest_13
   \   000202   740C         MOV     A,#0xc
   \   000204   12....       LCALL   ?XSTACK_DISP0_8
   \   000207   E0           MOVX    A,@DPTR
   \   000208   6401         XRL     A,#0x1
   \   00020A   600E         JZ      ??AF_DataRequest_13
    577            {
    578              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   00020C   7419         MOV     A,#0x19
   \   00020E   12....       LCALL   ?XSTACK_DISP0_8
   \   000211   E0           MOVX    A,@DPTR
   \   000212   4404         ORL     A,#0x4
   \   000214   F0           MOVX    @DPTR,A
   \   000215   A3           INC     DPTR
   \   000216   E0           MOVX    A,@DPTR
   \   000217   4400         ORL     A,#0x0
   \   000219   F0           MOVX    @DPTR,A
    579            }
    580          
    581            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_13:
   \   00021A   E5..         MOV     A,?V1
   \   00021C   A2E7         MOV     C,0xE0 /* A   */.7
   \   00021E   500E         JNC     ??AF_DataRequest_14
    582            {
    583              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   000220   7419         MOV     A,#0x19
   \   000222   12....       LCALL   ?XSTACK_DISP0_8
   \   000225   E0           MOVX    A,@DPTR
   \   000226   4410         ORL     A,#0x10
   \   000228   F0           MOVX    @DPTR,A
   \   000229   A3           INC     DPTR
   \   00022A   E0           MOVX    A,@DPTR
   \   00022B   4400         ORL     A,#0x0
   \   00022D   F0           MOVX    @DPTR,A
    584            }
    585          
    586            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_14:
   \   00022E   E5..         MOV     A,?V1
   \   000230   A2E6         MOV     C,0xE0 /* A   */.6
   \   000232   5018         JNC     ??AF_DataRequest_15
    587            {
    588              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   000234   7419         MOV     A,#0x19
   \   000236   12....       LCALL   ?XSTACK_DISP0_8
   \   000239   E0           MOVX    A,@DPTR
   \   00023A   4401         ORL     A,#0x1
   \   00023C   F0           MOVX    @DPTR,A
   \   00023D   A3           INC     DPTR
   \   00023E   E0           MOVX    A,@DPTR
   \   00023F   4400         ORL     A,#0x0
   \   000241   F0           MOVX    @DPTR,A
    589              mtu.aps.secure = TRUE;
   \   000242   7401         MOV     A,#0x1
   \   000244   12....       LCALL   ?XSTACK_DISP0_8
   \   000247   7401         MOV     A,#0x1
   \   000249   F0           MOVX    @DPTR,A
   \   00024A   8008         SJMP    ??AF_DataRequest_16
    590            }
    591            else
    592            {
    593              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_15:
   \   00024C   7401         MOV     A,#0x1
   \   00024E   12....       LCALL   ?XSTACK_DISP0_8
   \   000251   7400         MOV     A,#0x0
   \   000253   F0           MOVX    @DPTR,A
    594            }
    595          
    596            if ( options & AF_PREPROCESS )
   \                     ??AF_DataRequest_16:
   \   000254   E5..         MOV     A,?V1
   \   000256   A2E2         MOV     C,0xE0 /* A   */.2
   \   000258   500E         JNC     ??AF_DataRequest_17
    597            {
    598              req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
   \   00025A   7419         MOV     A,#0x19
   \   00025C   12....       LCALL   ?XSTACK_DISP0_8
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   4440         ORL     A,#0x40
   \   000262   F0           MOVX    @DPTR,A
   \   000263   A3           INC     DPTR
   \   000264   E0           MOVX    A,@DPTR
   \   000265   4400         ORL     A,#0x0
   \   000267   F0           MOVX    @DPTR,A
    599            }
    600          
    601            mtu.kvp = FALSE;
   \                     ??AF_DataRequest_17:
   \   000268   85..82       MOV     DPL,?XSP + 0
   \   00026B   85..83       MOV     DPH,?XSP + 1
   \   00026E   7400         MOV     A,#0x0
   \   000270   F0           MOVX    @DPTR,A
    602          
    603            req.transID       = *transID;
   \   000271   7436         MOV     A,#0x36
   \   000273   12....       LCALL   ?XSTACK_DISP0_8
   \   000276   E0           MOVX    A,@DPTR
   \   000277   F8           MOV     R0,A
   \   000278   A3           INC     DPTR
   \   000279   E0           MOVX    A,@DPTR
   \   00027A   F583         MOV     DPH,A
   \   00027C   8882         MOV     DPL,R0
   \   00027E   E0           MOVX    A,@DPTR
   \   00027F   C0E0         PUSH    A
   \   000281   741B         MOV     A,#0x1b
   \   000283   12....       LCALL   ?XSTACK_DISP0_8
   \   000286   D0E0         POP     A
   \   000288   F0           MOVX    @DPTR,A
    604            req.srcEP         = srcEP->endPoint;
   \   000289   85..82       MOV     DPL,?V2
   \   00028C   85..83       MOV     DPH,?V3
   \   00028F   E0           MOVX    A,@DPTR
   \   000290   C0E0         PUSH    A
   \   000292   740D         MOV     A,#0xd
   \   000294   12....       LCALL   ?XSTACK_DISP0_8
   \   000297   D0E0         POP     A
   \   000299   F0           MOVX    @DPTR,A
    605            req.dstEP         = dstAddr->endPoint;
   \   00029A   8E82         MOV     DPL,R6
   \   00029C   8F83         MOV     DPH,R7
   \   00029E   A3           INC     DPTR
   \   00029F   A3           INC     DPTR
   \   0002A0   A3           INC     DPTR
   \   0002A1   A3           INC     DPTR
   \   0002A2   A3           INC     DPTR
   \   0002A3   A3           INC     DPTR
   \   0002A4   A3           INC     DPTR
   \   0002A5   A3           INC     DPTR
   \   0002A6   A3           INC     DPTR
   \   0002A7   E0           MOVX    A,@DPTR
   \   0002A8   C0E0         PUSH    A
   \   0002AA   740E         MOV     A,#0xe
   \   0002AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AF   D0E0         POP     A
   \   0002B1   F0           MOVX    @DPTR,A
    606            req.clusterID     = cID;
   \   0002B2   7430         MOV     A,#0x30
   \   0002B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B7   E0           MOVX    A,@DPTR
   \   0002B8   F8           MOV     R0,A
   \   0002B9   A3           INC     DPTR
   \   0002BA   E0           MOVX    A,@DPTR
   \   0002BB   F9           MOV     R1,A
   \   0002BC   7411         MOV     A,#0x11
   \   0002BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C1   E8           MOV     A,R0
   \   0002C2   F0           MOVX    @DPTR,A
   \   0002C3   A3           INC     DPTR
   \   0002C4   E9           MOV     A,R1
   \   0002C5   F0           MOVX    @DPTR,A
    607            req.asduLen       = len;
   \   0002C6   7432         MOV     A,#0x32
   \   0002C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002CB   E0           MOVX    A,@DPTR
   \   0002CC   F8           MOV     R0,A
   \   0002CD   A3           INC     DPTR
   \   0002CE   E0           MOVX    A,@DPTR
   \   0002CF   F9           MOV     R1,A
   \   0002D0   7415         MOV     A,#0x15
   \   0002D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D5   E8           MOV     A,R0
   \   0002D6   F0           MOVX    @DPTR,A
   \   0002D7   A3           INC     DPTR
   \   0002D8   E9           MOV     A,R1
   \   0002D9   F0           MOVX    @DPTR,A
    608            req.asdu          = buf;
   \   0002DA   7434         MOV     A,#0x34
   \   0002DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002DF   E0           MOVX    A,@DPTR
   \   0002E0   F8           MOV     R0,A
   \   0002E1   A3           INC     DPTR
   \   0002E2   E0           MOVX    A,@DPTR
   \   0002E3   F9           MOV     R1,A
   \   0002E4   7417         MOV     A,#0x17
   \   0002E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E9   E8           MOV     A,R0
   \   0002EA   F0           MOVX    @DPTR,A
   \   0002EB   A3           INC     DPTR
   \   0002EC   E9           MOV     A,R1
   \   0002ED   F0           MOVX    @DPTR,A
    609            req.discoverRoute = AF_DataRequestDiscoverRoute;//(uint8)((options & AF_DISCV_ROUTE) ? 1 : 0);
   \   0002EE   90....       MOV     DPTR,#AF_DataRequestDiscoverRoute
   \   0002F1   E0           MOVX    A,@DPTR
   \   0002F2   C0E0         PUSH    A
   \   0002F4   741C         MOV     A,#0x1c
   \   0002F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F9   D0E0         POP     A
   \   0002FB   F0           MOVX    @DPTR,A
    610            req.radiusCounter = radius;
   \   0002FC   7438         MOV     A,#0x38
   \   0002FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000301   E0           MOVX    A,@DPTR
   \   000302   C0E0         PUSH    A
   \   000304   741D         MOV     A,#0x1d
   \   000306   12....       LCALL   ?XSTACK_DISP0_8
   \   000309   D0E0         POP     A
   \   00030B   F0           MOVX    @DPTR,A
    611          #if defined ( INTER_PAN )
    612            req.dstPanId      = dstAddr->panId;
    613          
    614            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    615            {
    616              if ( len > INTERP_DataReqMTU() )
    617              {
    618                stat = afStatus_INVALID_PARAMETER;
    619              }
    620              else
    621              {
    622                stat = INTERP_DataReq( &req );
    623              }
    624            }
    625            else
    626          #endif // INTER_PAN
    627            {
    628              if (len > afDataReqMTU( &mtu ) )
   \   00030C                ; Setup parameters for call to function afDataReqMTU
   \   00030C   AA..         MOV     R2,?XSP + 0
   \   00030E   AB..         MOV     R3,?XSP + 1
   \   000310   12....       LCALL   ??afDataReqMTU?relay ; Banked call to: afDataReqMTU
   \   000313   E9           MOV     A,R1
   \   000314   F8           MOV     R0,A
   \   000315   7900         MOV     R1,#0x0
   \   000317   7432         MOV     A,#0x32
   \   000319   12....       LCALL   ?XSTACK_DISP0_8
   \   00031C   E0           MOVX    A,@DPTR
   \   00031D   FA           MOV     R2,A
   \   00031E   A3           INC     DPTR
   \   00031F   E0           MOVX    A,@DPTR
   \   000320   FB           MOV     R3,A
   \   000321   C3           CLR     C
   \   000322   E8           MOV     A,R0
   \   000323   9A           SUBB    A,R2
   \   000324   E9           MOV     A,R1
   \   000325   9B           SUBB    A,R3
   \   000326   5029         JNC     ??AF_DataRequest_18
    629              {
    630                if (apsfSendFragmented)
   \   000328   90....       MOV     DPTR,#apsfSendFragmented
   \   00032B   E0           MOVX    A,@DPTR
   \   00032C   F8           MOV     R0,A
   \   00032D   A3           INC     DPTR
   \   00032E   E0           MOVX    A,@DPTR
   \   00032F   F9           MOV     R1,A
   \   000330   E8           MOV     A,R0
   \   000331   49           ORL     A,R1
   \   000332   6018         JZ      ??AF_DataRequest_19
    631                {
    632                  stat = (*apsfSendFragmented)( &req );
   \   000334                ; Setup parameters for indirect call
   \   000334   7404         MOV     A,#0x4
   \   000336   12....       LCALL   ?XSTACK_DISP101_8
   \   000339   90....       MOV     DPTR,#apsfSendFragmented
   \   00033C   E0           MOVX    A,@DPTR
   \   00033D   F8           MOV     R0,A
   \   00033E   A3           INC     DPTR
   \   00033F   E0           MOVX    A,@DPTR
   \   000340   F583         MOV     DPH,A
   \   000342   8882         MOV     DPL,R0
   \   000344   12....       LCALL   ?CALL_IND
   \   000347   E9           MOV     A,R1
   \   000348   F5..         MOV     ?V0,A
   \   00034A   8010         SJMP    ??AF_DataRequest_20
    633                }
    634                else
    635                {
    636                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_19:
   \   00034C   75..02       MOV     ?V0,#0x2
   \   00034F   800B         SJMP    ??AF_DataRequest_20
    637                }
    638              }
    639              else
    640              {
    641                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_18:
   \   000351                ; Setup parameters for call to function APSDE_DataReq
   \   000351   7404         MOV     A,#0x4
   \   000353   12....       LCALL   ?XSTACK_DISP101_8
   \   000356   12....       LCALL   ??APSDE_DataReq?relay; Banked call to: APSDE_DataReq
   \   000359   E9           MOV     A,R1
   \   00035A   F5..         MOV     ?V0,A
    642              }
    643            }
    644          
    645            /*
    646             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    647             * get added to the NWK databufs. So it will not go OTA and it will not get
    648             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    649             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    650             * message with the first in line TransSeqNumber, even on a multi message.
    651             * Also note that a reflected msg will not have its confirmation generated
    652             * here.
    653             */
    654            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    655                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_20:
   \   00035C   740C         MOV     A,#0xc
   \   00035E   12....       LCALL   ?XSTACK_DISP0_8
   \   000361   E0           MOVX    A,@DPTR
   \   000362   6402         XRL     A,#0x2
   \   000364   7035         JNZ     ??AF_DataRequest_21
   \   000366                ; Setup parameters for call to function NLME_GetShortAddr
   \   000366   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   000369   8A..         MOV     ?V4,R2
   \   00036B   8B..         MOV     ?V5,R3
   \   00036D   A8..         MOV     R0,?V4
   \   00036F   A9..         MOV     R1,?V5
   \   000371   7404         MOV     A,#0x4
   \   000373   12....       LCALL   ?XSTACK_DISP0_8
   \   000376   E0           MOVX    A,@DPTR
   \   000377   68           XRL     A,R0
   \   000378   7003         JNZ     ??AF_DataRequest_22
   \   00037A   A3           INC     DPTR
   \   00037B   E0           MOVX    A,@DPTR
   \   00037C   69           XRL     A,R1
   \                     ??AF_DataRequest_22:
   \   00037D   701C         JNZ     ??AF_DataRequest_21
    656            {
    657              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   00037F                ; Setup parameters for call to function afDataConfirm
   \   00037F   AB..         MOV     R3,?V0
   \   000381   7436         MOV     A,#0x36
   \   000383   12....       LCALL   ?XSTACK_DISP0_8
   \   000386   E0           MOVX    A,@DPTR
   \   000387   F8           MOV     R0,A
   \   000388   A3           INC     DPTR
   \   000389   E0           MOVX    A,@DPTR
   \   00038A   F583         MOV     DPH,A
   \   00038C   8882         MOV     DPL,R0
   \   00038E   E0           MOVX    A,@DPTR
   \   00038F   FA           MOV     R2,A
   \   000390   85..82       MOV     DPL,?V2
   \   000393   85..83       MOV     DPH,?V3
   \   000396   E0           MOVX    A,@DPTR
   \   000397   F9           MOV     R1,A
   \   000398   12....       LCALL   ??afDataConfirm?relay; Banked call to: afDataConfirm
    658            }
    659          
    660            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_21:
   \   00039B   E5..         MOV     A,?V0
   \   00039D   7011         JNZ     ??AF_DataRequest_23
    661            {
    662              (*transID)++;
   \   00039F   7436         MOV     A,#0x36
   \   0003A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0003A4   E0           MOVX    A,@DPTR
   \   0003A5   F8           MOV     R0,A
   \   0003A6   A3           INC     DPTR
   \   0003A7   E0           MOVX    A,@DPTR
   \   0003A8   F583         MOV     DPH,A
   \   0003AA   8882         MOV     DPL,R0
   \   0003AC   E0           MOVX    A,@DPTR
   \   0003AD   2401         ADD     A,#0x1
   \   0003AF   F0           MOVX    @DPTR,A
    663            }
    664          
    665            return (afStatus_t)stat;
   \                     ??AF_DataRequest_23:
   \   0003B0   A9..         MOV     R1,?V0
   \                     ??AF_DataRequest_1:
   \   0003B2   7420         MOV     A,#0x20
   \   0003B4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003B7   7F08         MOV     R7,#0x8
   \   0003B9   02....       LJMP    ?BANKED_LEAVE_XDATA
    666          }
    667          
    668          #if defined ( ZIGBEE_SOURCE_ROUTING )
    669          /*********************************************************************
    670           * @fn      AF_DataRequestSrcRtg
    671           *
    672           * @brief   Common functionality for invoking APSDE_DataReq() for both
    673           *          SendMulti and MSG-Send.
    674           *
    675           * input parameters
    676           *
    677           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    678           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    679           * @param   cID - A valid cluster ID as specified by the Profile.
    680           * @param   len - Number of bytes of data pointed to by next param.
    681           * @param  *buf - A pointer to the data bytes to send.
    682           * @param  *transID - A pointer to a byte which can be modified and which will
    683           *                    be used as the transaction sequence number of the msg.
    684           * @param   options - Valid bit mask of Tx options.
    685           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    686           * @param   relayCnt - Number of devices in the relay list
    687           * @param   pRelayList - Pointer to the relay list
    688           *
    689           * output parameters
    690           *
    691           * @param  *transID - Incremented by one if the return value is success.
    692           *
    693           * @return  afStatus_t - See previous definition of afStatus_... types.
    694           */
    695          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    696          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequestSrcRtg:
    697                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    698                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    699          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   7402         MOV     A,#0x2
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   EC           MOV     A,R4
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   ED           MOV     A,R5
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   89..         MOV     ?V6,R1
   \   000021   7413         MOV     A,#0x13
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V2,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V3,A
   \   00002D   7415         MOV     A,#0x15
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F5..         MOV     ?V0,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V1,A
   \   000039   741B         MOV     A,#0x1b
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F5..         MOV     ?V4,A
   \   000041   741C         MOV     A,#0x1c
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   E0           MOVX    A,@DPTR
   \   000047   FF           MOV     R7,A
    700            uint8 status;
    701            
    702            /* Add the source route to the source routing table */
    703            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt, 
    704                                                   pRelayList );
   \   000048                ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
   \   000048   741D         MOV     A,#0x1d
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FC           MOV     R4,A
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   FD           MOV     R5,A
   \   000052   EF           MOV     A,R7
   \   000053   F9           MOV     R1,A
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F8           MOV     R0,A
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F583         MOV     DPH,A
   \   000060   8882         MOV     DPL,R0
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FA           MOV     R2,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   FB           MOV     R3,A
   \   000067   12....       LCALL   ??RTG_AddSrcRtgEntry_Guaranteed?relay; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
   \   00006A   E9           MOV     A,R1
   \   00006B   FE           MOV     R6,A
    705          
    706            if( status == RTG_SUCCESS)
   \   00006C   EE           MOV     A,R6
   \   00006D   7045         JNZ     ??AF_DataRequestSrcRtg_0
    707            {
    708              /* Call AF_DataRequest to send the data */
    709              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
   \   00006F                ; Setup parameters for call to function AF_DataRequest
   \   00006F   E5..         MOV     A,?V4
   \   000071   F5..         MOV     ?V5,A
   \   000073   78..         MOV     R0,#?V5
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000078   741A         MOV     A,#0x1a
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000080   741A         MOV     A,#0x1a
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000088   78..         MOV     R0,#?V0
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008D   78..         MOV     R0,#?V2
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000092   A9..         MOV     R1,?V6
   \   000094   740B         MOV     A,#0xb
   \   000096   12....       LCALL   ?XSTACK_DISP0_8
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   FC           MOV     R4,A
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   FD           MOV     R5,A
   \   00009E   7409         MOV     A,#0x9
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   FA           MOV     R2,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   FB           MOV     R3,A
   \   0000A8   12....       LCALL   ??AF_DataRequest?relay; Banked call to: AF_DataRequest
   \   0000AB   7409         MOV     A,#0x9
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B0   E9           MOV     A,R1
   \   0000B1   FE           MOV     R6,A
   \   0000B2   800B         SJMP    ??AF_DataRequestSrcRtg_1
    710            }
    711            else if( status == RTG_INVALID_PATH )
   \                     ??AF_DataRequestSrcRtg_0:
   \   0000B4   7405         MOV     A,#0x5
   \   0000B6   6E           XRL     A,R6
   \   0000B7   7004         JNZ     ??AF_DataRequestSrcRtg_2
    712            {
    713              /* The source route relay count is exceeding the network limit */
    714              status = afStatus_INVALID_PARAMETER;
   \   0000B9   7E02         MOV     R6,#0x2
   \   0000BB   8002         SJMP    ??AF_DataRequestSrcRtg_1
    715            }
    716            else
    717            {
    718              /* The guaranteed adding entry fails due to memory failure */
    719              status = afStatus_MEM_FAIL;
   \                     ??AF_DataRequestSrcRtg_2:
   \   0000BD   7E10         MOV     R6,#0x10
    720            }
    721            return status;
   \                     ??AF_DataRequestSrcRtg_1:
   \   0000BF   EE           MOV     A,R6
   \   0000C0   F9           MOV     R1,A
   \   0000C1   7404         MOV     A,#0x4
   \   0000C3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C6   7F07         MOV     R7,#0x7
   \   0000C8   02....       LJMP    ?BANKED_LEAVE_XDATA
    722          }
    723          
    724          #endif
    725          
    726          /*********************************************************************
    727           * @fn      afFindEndPointDescList
    728           *
    729           * @brief   Find the endpoint description entry from the endpoint
    730           *          number.
    731           *
    732           * @param   EndPoint - Application Endpoint to look for
    733           *
    734           * @return  the address to the endpoint/interface description entry
    735           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    736          static epList_t *afFindEndPointDescList( byte EndPoint )
   \                     afFindEndPointDescList:
    737          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    738            epList_t *epSearch;
    739          
    740            // Start at the beginning
    741            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FA           MOV     R2,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FB           MOV     R3,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FC           MOV     R4,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FD           MOV     R5,A
    742          
    743            // Look through the list until the end
    744            while ( epSearch )
   \                     ??afFindEndPointDescList_0:
   \   000010   EC           MOV     A,R4
   \   000011   4D           ORL     A,R5
   \   000012   6026         JZ      ??afFindEndPointDescList_1
    745            {
    746              // Is there a match?
    747              if ( epSearch->epDesc->endPoint == EndPoint )
   \   000014   8C82         MOV     DPL,R4
   \   000016   8D83         MOV     DPH,R5
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F583         MOV     DPH,A
   \   00001E   8882         MOV     DPL,R0
   \   000020   E0           MOVX    A,@DPTR
   \   000021   69           XRL     A,R1
   \   000022   7006         JNZ     ??afFindEndPointDescList_2
    748              {
    749                return ( epSearch );
   \   000024   EC           MOV     A,R4
   \   000025   FA           MOV     R2,A
   \   000026   ED           MOV     A,R5
   \   000027   FB           MOV     R3,A
   \   000028   8014         SJMP    ??afFindEndPointDescList_3
    750              }
    751              else
    752                epSearch = epSearch->nextDesc;  // Next entry
   \                     ??afFindEndPointDescList_2:
   \   00002A   8C82         MOV     DPL,R4
   \   00002C   8D83         MOV     DPH,R5
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FC           MOV     R4,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   FD           MOV     R5,A
   \   000038   80D6         SJMP    ??afFindEndPointDescList_0
    753            }
    754          
    755            return ( (epList_t *)NULL );
   \                     ??afFindEndPointDescList_1:
   \   00003A   7A00         MOV     R2,#0x0
   \   00003C   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDescList_3:
   \   00003E   D083         POP     DPH
   \   000040   D082         POP     DPL
   \   000042   02....       LJMP    ?BRET
    756          }
    757          
    758          /*********************************************************************
    759           * @fn      afFindEndPointDesc
    760           *
    761           * @brief   Find the endpoint description entry from the endpoint
    762           *          number.
    763           *
    764           * @param   EndPoint - Application Endpoint to look for
    765           *
    766           * @return  the address to the endpoint/interface description entry
    767           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    768          endPointDesc_t *afFindEndPointDesc( byte EndPoint )
   \                     afFindEndPointDesc:
    769          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    770            epList_t *epSearch;
    771          
    772            // Look for the endpoint
    773            epSearch = afFindEndPointDescList( EndPoint );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   A9..         MOV     R1,?V0
   \   000009   12....       LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
   \   00000C   8A..         MOV     ?V2,R2
   \   00000E   8B..         MOV     ?V3,R3
   \   000010   AE..         MOV     R6,?V2
   \   000012   AF..         MOV     R7,?V3
    774          
    775            if ( epSearch )
   \   000014   EE           MOV     A,R6
   \   000015   4F           ORL     A,R7
   \   000016   600B         JZ      ??afFindEndPointDesc_0
    776              return ( epSearch->epDesc );
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FA           MOV     R2,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FB           MOV     R3,A
   \   000021   8004         SJMP    ??afFindEndPointDesc_1
    777            else
    778              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_0:
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDesc_1:
   \   000027   7F04         MOV     R7,#0x4
   \   000029   02....       LJMP    ?BANKED_LEAVE_XDATA
    779          }
    780          
    781          /*********************************************************************
    782           * @fn      afFindSimpleDesc
    783           *
    784           * @brief   Find the Simple Descriptor from the endpoint number.
    785           *
    786           * @param   EP - Application Endpoint to look for.
    787           *
    788           * @return  Non-zero to indicate that the descriptor memory must be freed.
    789           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    790          byte afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, byte EP )
   \                     afFindSimpleDesc:
    791          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   89..         MOV     ?V3,R1
    792            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   A9..         MOV     R1,?V3
   \   00000D   12....       LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
   \   000010   8A..         MOV     ?V4,R2
   \   000012   8B..         MOV     ?V5,R3
   \   000014   AE..         MOV     R6,?V4
   \   000016   AF..         MOV     R7,?V5
    793            byte rtrn = FALSE;
   \   000018   75..00       MOV     ?V2,#0x0
    794          
    795            if ( epItem )
   \   00001B   EE           MOV     A,R6
   \   00001C   4F           ORL     A,R7
   \   00001D   6057         JZ      ??afFindSimpleDesc_0
    796            {
    797              if ( epItem->pfnDescCB )
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   E8           MOV     A,R0
   \   00002C   49           ORL     A,R1
   \   00002D   6026         JZ      ??afFindSimpleDesc_1
    798              {
    799                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   00002F                ; Setup parameters for indirect call
   \   00002F   AA..         MOV     R2,?V3
   \   000031   7901         MOV     R1,#0x1
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F8           MOV     R0,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F583         MOV     DPH,A
   \   000040   8882         MOV     DPL,R0
   \   000042   12....       LCALL   ?CALL_IND
   \   000045   85..82       MOV     DPL,?V0
   \   000048   85..83       MOV     DPH,?V1
   \   00004B   EA           MOV     A,R2
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   EB           MOV     A,R3
   \   00004F   F0           MOVX    @DPTR,A
    800                rtrn = TRUE;
   \   000050   75..01       MOV     ?V2,#0x1
   \   000053   802E         SJMP    ??afFindSimpleDesc_2
    801              }
    802              else
    803              {
    804                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_1:
   \   000055   8E82         MOV     DPL,R6
   \   000057   8F83         MOV     DPH,R7
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F8           MOV     R0,A
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F583         MOV     DPH,A
   \   00005F   8882         MOV     DPL,R0
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F8           MOV     R0,A
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F9           MOV     R1,A
   \   000069   85..82       MOV     DPL,?V0
   \   00006C   85..83       MOV     DPH,?V1
   \   00006F   E8           MOV     A,R0
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   E9           MOV     A,R1
   \   000073   F0           MOVX    @DPTR,A
   \   000074   800D         SJMP    ??afFindSimpleDesc_2
    805              }
    806            }
    807            else
    808            {
    809              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_0:
   \   000076   85..82       MOV     DPL,?V0
   \   000079   85..83       MOV     DPH,?V1
   \   00007C   7400         MOV     A,#0x0
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   \   000080   7400         MOV     A,#0x0
   \   000082   F0           MOVX    @DPTR,A
    810            }
    811          
    812            return rtrn;
   \                     ??afFindSimpleDesc_2:
   \   000083   A9..         MOV     R1,?V2
   \   000085   7F06         MOV     R7,#0x6
   \   000087   02....       LJMP    ?BANKED_LEAVE_XDATA
    813          }
    814          
    815          /*********************************************************************
    816           * @fn      afGetDescCB
    817           *
    818           * @brief   Get the Descriptor callback function.
    819           *
    820           * @param   epDesc - pointer to the endpoint descriptor
    821           *
    822           * @return  function pointer or NULL
    823           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    824          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
   \                     afGetDescCB:
    825          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV     A,R2
   \   000005   F8           MOV     R0,A
   \   000006   EB           MOV     A,R3
   \   000007   F9           MOV     R1,A
    826            epList_t *epSearch;
    827          
    828            // Start at the beginning
    829            epSearch = epList;
   \   000008   90....       MOV     DPTR,#epList
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   FA           MOV     R2,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FB           MOV     R3,A
   \   000010   EA           MOV     A,R2
   \   000011   FC           MOV     R4,A
   \   000012   EB           MOV     A,R3
   \   000013   FD           MOV     R5,A
    830          
    831            // Look through the list until the end
    832            while ( epSearch )
   \                     ??afGetDescCB_0:
   \   000014   EC           MOV     A,R4
   \   000015   4D           ORL     A,R5
   \   000016   6033         JZ      ??afGetDescCB_1
    833            {
    834              // Is there a match?
    835              if ( epSearch->epDesc == epDesc )
   \   000018   8C82         MOV     DPL,R4
   \   00001A   8D83         MOV     DPH,R5
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FA           MOV     R2,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FB           MOV     R3,A
   \   000021   E8           MOV     A,R0
   \   000022   6A           XRL     A,R2
   \   000023   7002         JNZ     ??afGetDescCB_2
   \   000025   E9           MOV     A,R1
   \   000026   6B           XRL     A,R3
   \                     ??afGetDescCB_2:
   \   000027   700E         JNZ     ??afGetDescCB_3
    836              {
    837                return ( epSearch->pfnDescCB );
   \   000029   8C82         MOV     DPL,R4
   \   00002B   8D83         MOV     DPH,R5
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   FA           MOV     R2,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FB           MOV     R3,A
   \   000035   8018         SJMP    ??afGetDescCB_4
    838              }
    839              else
    840                epSearch = epSearch->nextDesc;  // Next entry
   \                     ??afGetDescCB_3:
   \   000037   8C82         MOV     DPL,R4
   \   000039   8D83         MOV     DPH,R5
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FA           MOV     R2,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   FB           MOV     R3,A
   \   000045   EA           MOV     A,R2
   \   000046   FC           MOV     R4,A
   \   000047   EB           MOV     A,R3
   \   000048   FD           MOV     R5,A
   \   000049   80C9         SJMP    ??afGetDescCB_0
    841            }
    842          
    843            return ( (pDescCB)NULL );
   \                     ??afGetDescCB_1:
   \   00004B   7A00         MOV     R2,#0x0
   \   00004D   7B00         MOV     R3,#0x0
   \                     ??afGetDescCB_4:
   \   00004F   D083         POP     DPH
   \   000051   D082         POP     DPL
   \   000053   02....       LJMP    ?BRET
    844          }
    845          
    846          /*********************************************************************
    847           * @fn      afDataReqMTU
    848           *
    849           * @brief   Get the Data Request MTU(Max Transport Unit).
    850           *
    851           * @param   fields - afDataReqMTU_t
    852           *
    853           * @return  uint8(MTU)
    854           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    855          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    856          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    857            uint8 len;
    858            uint8 hdr;
    859          
    860            if ( fields->kvp == TRUE )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6401         XRL     A,#0x1
   \   000010   7005         JNZ     ??afDataReqMTU_0
    861            {
    862              hdr = AF_HDR_KVP_MAX_LEN;
   \   000012   75..08       MOV     ?V0,#0x8
   \   000015   8003         SJMP    ??afDataReqMTU_1
    863            }
    864            else
    865            {
    866              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000017   75..00       MOV     ?V0,#0x0
    867            }
    868          
    869            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
   \                     ??afDataReqMTU_1:
   \   00001A                ; Setup parameters for call to function APSDE_DataReqMTU
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   A3           INC     DPTR
   \   00001F   AA82         MOV     R2,DPL
   \   000021   AB83         MOV     R3,DPH
   \   000023   12....       LCALL   ??APSDE_DataReqMTU?relay; Banked call to: APSDE_DataReqMTU
   \   000026   E9           MOV     A,R1
   \   000027   C3           CLR     C
   \   000028   95..         SUBB    A,?V0
   \   00002A   F5..         MOV     ?V1,A
    870          
    871            return len;
   \   00002C   A9..         MOV     R1,?V1
   \   00002E   7F02         MOV     R7,#0x2
   \   000030   02....       LJMP    ?BANKED_LEAVE_XDATA
    872          }
    873          
    874          /*********************************************************************
    875           * @fn      afGetMatch
    876           *
    877           * @brief   Set the allow response flag.
    878           *
    879           * @param   ep - Application Endpoint to look for
    880           * @param   action - true - allow response, false - no response
    881           *
    882           * @return  TRUE allow responses, FALSE no response
    883           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    884          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
    885          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    886            epList_t *epSearch;
    887          
    888            // Look for the endpoint
    889            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   A9..         MOV     R1,?V0
   \   000009   12....       LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
   \   00000C   8A..         MOV     ?V2,R2
   \   00000E   8B..         MOV     ?V3,R3
   \   000010   AE..         MOV     R6,?V2
   \   000012   AF..         MOV     R7,?V3
    890          
    891            if ( epSearch )
   \   000014   EE           MOV     A,R6
   \   000015   4F           ORL     A,R7
   \   000016   6013         JZ      ??afGetMatch_0
    892            {
    893              if ( epSearch->flags & eEP_AllowMatch )
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000021   5004         JNC     ??afGetMatch_1
    894                return ( TRUE );
   \   000023   7901         MOV     R1,#0x1
   \   000025   8006         SJMP    ??afGetMatch_2
    895              else
    896                return ( FALSE );
   \                     ??afGetMatch_1:
   \   000027   7900         MOV     R1,#0x0
   \   000029   8002         SJMP    ??afGetMatch_2
    897            }
    898            else
    899              return ( FALSE );
   \                     ??afGetMatch_0:
   \   00002B   7900         MOV     R1,#0x0
   \                     ??afGetMatch_2:
   \   00002D   7F04         MOV     R7,#0x4
   \   00002F   02....       LJMP    ?BANKED_LEAVE_XDATA
    900          }
    901          
    902          /*********************************************************************
    903           * @fn      afSetMatch
    904           *
    905           * @brief   Set the allow response flag.
    906           *
    907           * @param   ep - Application Endpoint to look for
    908           * @param   action - true - allow response, false - no response
    909           *
    910           * @return  TRUE if success, FALSE if endpoint not found
    911           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    912          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
    913          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V1,R2
    914            epList_t *epSearch;
    915          
    916            // Look for the endpoint
    917            epSearch = afFindEndPointDescList( ep );
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   A9..         MOV     R1,?V0
   \   00000B   12....       LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
   \   00000E   8A..         MOV     ?V2,R2
   \   000010   8B..         MOV     ?V3,R3
   \   000012   AE..         MOV     R6,?V2
   \   000014   AF..         MOV     R7,?V3
    918          
    919            if ( epSearch )
   \   000016   EE           MOV     A,R6
   \   000017   4F           ORL     A,R7
   \   000018   601E         JZ      ??afSetMatch_0
    920            {
    921              if ( action )
   \   00001A   E5..         MOV     A,?V1
   \   00001C   600C         JZ      ??afSetMatch_1
    922              {
    923                epSearch->flags |= eEP_AllowMatch;
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   D2E0         SETB    0xE0 /* A   */.0
   \   000027   F0           MOVX    @DPTR,A
   \   000028   800A         SJMP    ??afSetMatch_2
    924              }
    925              else
    926              {
    927                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_1:
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   C2E0         CLR     0xE0 /* A   */.0
   \   000033   F0           MOVX    @DPTR,A
    928              }
    929              return ( TRUE );
   \                     ??afSetMatch_2:
   \   000034   7901         MOV     R1,#0x1
   \   000036   8002         SJMP    ??afSetMatch_3
    930            }
    931            else
    932              return ( FALSE );
   \                     ??afSetMatch_0:
   \   000038   7900         MOV     R1,#0x0
   \                     ??afSetMatch_3:
   \   00003A   7F04         MOV     R7,#0x4
   \   00003C   02....       LJMP    ?BANKED_LEAVE_XDATA
    933          }
    934          
    935          /*********************************************************************
    936           * @fn      afNumEndPoints
    937           *
    938           * @brief   Returns the number of endpoints defined (including 0)
    939           *
    940           * @param   none
    941           *
    942           * @return  number of endpoints
    943           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    944          byte afNumEndPoints( void )
   \                     afNumEndPoints:
    945          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    946            epList_t *epSearch;
    947            byte endpoints;
    948          
    949            // Start at the beginning
    950            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FC           MOV     R4,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FD           MOV     R5,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FA           MOV     R2,A
   \   00000E   ED           MOV     A,R5
   \   00000F   FB           MOV     R3,A
    951            endpoints = 0;
   \   000010   7900         MOV     R1,#0x0
    952          
    953            while ( epSearch )
   \                     ??afNumEndPoints_0:
   \   000012   EA           MOV     A,R2
   \   000013   4B           ORL     A,R3
   \   000014   6011         JZ      ??afNumEndPoints_1
    954            {
    955              endpoints++;
   \   000016   09           INC     R1
    956              epSearch = epSearch->nextDesc;
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FA           MOV     R2,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FB           MOV     R3,A
   \   000025   80EB         SJMP    ??afNumEndPoints_0
    957            }
    958          
    959            return ( endpoints );
   \                     ??afNumEndPoints_1:
   \   000027   D083         POP     DPH
   \   000029   D082         POP     DPL
   \   00002B   02....       LJMP    ?BRET
    960          }
    961          
    962          /*********************************************************************
    963           * @fn      afEndPoints
    964           *
    965           * @brief   Fills in the passed in buffer with the endpoint (numbers).
    966           *          Use afNumEndPoints to find out how big a buffer to supply.
    967           *
    968           * @param   epBuf - pointer to mem used
    969           *
    970           * @return  void
    971           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    972          void afEndPoints( byte *epBuf, byte skipZDO )
   \                     afEndPoints:
    973          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    974            epList_t *epSearch;
    975            byte endPoint;
    976          
    977            // Start at the beginning
    978            epSearch = epList;
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FC           MOV     R4,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FD           MOV     R5,A
   \   00000F   EC           MOV     A,R4
   \   000010   F8           MOV     R0,A
   \   000011   ED           MOV     A,R5
   \   000012   F9           MOV     R1,A
    979          
    980            while ( epSearch )
   \                     ??afEndPoints_0:
   \   000013   E8           MOV     A,R0
   \   000014   49           ORL     A,R1
   \   000015   6037         JZ      ??afEndPoints_1
    981            {
    982              endPoint = epSearch->epDesc->endPoint;
   \   000017   8882         MOV     DPL,R0
   \   000019   8983         MOV     DPH,R1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FC           MOV     R4,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F583         MOV     DPH,A
   \   000021   8C82         MOV     DPL,R4
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FF           MOV     R7,A
    983          
    984              if ( !skipZDO || endPoint != 0 )
   \   000025   EE           MOV     A,R6
   \   000026   6003         JZ      ??afEndPoints_2
   \   000028   EF           MOV     A,R7
   \   000029   6013         JZ      ??afEndPoints_3
    985                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   00002B   EF           MOV     A,R7
   \   00002C   C0E0         PUSH    A
   \   00002E   8A82         MOV     DPL,R2
   \   000030   8B83         MOV     DPH,R3
   \   000032   D0E0         POP     A
   \   000034   F0           MOVX    @DPTR,A
   \   000035   8A82         MOV     DPL,R2
   \   000037   8B83         MOV     DPH,R3
   \   000039   A3           INC     DPTR
   \   00003A   AA82         MOV     R2,DPL
   \   00003C   AB83         MOV     R3,DPH
    986          
    987              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   00003E   8882         MOV     DPL,R0
   \   000040   8983         MOV     DPH,R1
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F8           MOV     R0,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F9           MOV     R1,A
   \   00004C   80C5         SJMP    ??afEndPoints_0
    988            }
    989          }
   \                     ??afEndPoints_1:
   \   00004E   7F01         MOV     R7,#0x1
   \   000050   02....       LJMP    ?BANKED_LEAVE_XDATA
    990          
    991          /*********************************************************************
    992           * @fn      afCopyAddress
    993           *
    994           * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
    995           *          from the zAddrType_t parameter. 
    996           *
    997           * @param   epBuf - pointer to mem used
    998           *
    999           * @return  void
   1000           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1001          void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
   1002          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1003            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   C0E0         PUSH    A
   \   00001C   85..82       MOV     DPL,?V0
   \   00001F   85..83       MOV     DPH,?V1
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   D0E0         POP     A
   \   00002C   F0           MOVX    @DPTR,A
   1004            if ( zAddr->addrMode == Addr64Bit )
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6403         XRL     A,#0x3
   \   00003C   7017         JNZ     ??afCopyAddress_0
   1005            {
   1006              (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   00003E                ; Setup parameters for call to function sAddrExtCpy
   \   00003E   EE           MOV     A,R6
   \   00003F   FC           MOV     R4,A
   \   000040   EF           MOV     A,R7
   \   000041   FD           MOV     R5,A
   \   000042   AA..         MOV     R2,?V0
   \   000044   AB..         MOV     R3,?V1
   \   000046   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   000049   8A..         MOV     ?V2,R2
   \   00004B   8B..         MOV     ?V3,R3
   \   00004D   85..82       MOV     DPL,?V2
   \   000050   85..83       MOV     DPH,?V3
   \   000053   8014         SJMP    ??afCopyAddress_1
   1007            }
   1008            else
   1009            {
   1010              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   000055   8E82         MOV     DPL,R6
   \   000057   8F83         MOV     DPH,R7
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F8           MOV     R0,A
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F9           MOV     R1,A
   \   00005E   85..82       MOV     DPL,?V0
   \   000061   85..83       MOV     DPH,?V1
   \   000064   E8           MOV     A,R0
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   E9           MOV     A,R1
   \   000068   F0           MOVX    @DPTR,A
   1011            }
   1012          
   1013            // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
   1014            afAddr->panId = 0;
   \                     ??afCopyAddress_1:
   \   000069   85..82       MOV     DPL,?V0
   \   00006C   85..83       MOV     DPH,?V1
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   7400         MOV     A,#0x0
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   7400         MOV     A,#0x0
   \   00007F   F0           MOVX    @DPTR,A
   1015          }
   \   000080   7F04         MOV     R7,#0x4
   \   000082   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afRegisterExtended?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afRegister?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afIncomingData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afBuildMSGIncoming?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AF_DataRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AF_DataRequestSrcRtg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindEndPointDescList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDescList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindEndPointDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindSimpleDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afGetDescCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetDescCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afDataReqMTU?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afGetMatch?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afSetMatch?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afNumEndPoints?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afEndPoints?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afCopyAddress?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress
   1016          
   1017          /*********************************************************************
   1018          *********************************************************************/
   1019          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     76   AF_DataRequest
        0     48   -> APSDE_DataReq
        0     48   -> NLME_GetShortAddr
        0     48   -> NLME_IsAddressBroadcast
        0     48   -> RTG_CheckRtStatus
        0     48   -> afDataConfirm
        0     48   -> afDataReqMTU
        0     48   -> afGetDescCB
        0     48   -> osal_mem_free
        0     48   -> sAddrExtCpy
      0     40   AF_DataRequestSrcRtg
        0     28   -> AF_DataRequest
        0     19   -> RTG_AddSrcRtgEntry_Guaranteed
      1     61   afBuildMSGIncoming
        0     21   -> afCopyAddress
        0     24   -> osal_memcpy
        0     21   -> osal_msg_allocate
        0     21   -> osal_msg_send
      1     33   afCopyAddress
        0     12   -> sAddrExtCpy
      1     64   afDataConfirm
        0     16   -> afFindEndPointDesc
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      0     58   afDataReqMTU
        0     10   -> APSDE_DataReqMTU
      1      9   afEndPoints
      0     39   afFindEndPointDesc
        0     12   -> afFindEndPointDescList
      2     27   afFindEndPointDescList
      0     14   afFindSimpleDesc
        0     14   -> afFindEndPointDescList
      2     48   afGetDescCB
      0     12   afGetMatch
        0     12   -> afFindEndPointDescList
      1     45   afIncomingData
        0     37   -> afBuildMSGIncoming
        0     27   -> afFindEndPointDesc
        0     27   -> afFindEndPointDescList
        0     27   -> aps_FindGroupForEndpoint
        0     27   -> osal_mem_free
      2      0   afInit
      2      0   afNumEndPoints
      0     12   afRegister
        0     12   -> afFindEndPointDescList
        0     12   -> afRegisterExtended
      0     28   afRegisterExtended
        0     16   -> osal_mem_alloc
      0     12   afSetMatch
        0     12   -> afFindEndPointDescList


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for AF_DataRequestDiscoverRoute>
       6  ??AF_DataRequest?relay
       6  ??AF_DataRequestSrcRtg?relay
       6  ??afBuildMSGIncoming?relay
       6  ??afCopyAddress?relay
       6  ??afDataConfirm?relay
       6  ??afDataReqMTU?relay
       6  ??afEndPoints?relay
       6  ??afFindEndPointDesc?relay
       6  ??afFindEndPointDescList?relay
       6  ??afFindSimpleDesc?relay
       6  ??afGetDescCB?relay
       6  ??afGetMatch?relay
       6  ??afIncomingData?relay
       6  ??afInit?relay
       6  ??afNumEndPoints?relay
       6  ??afRegister?relay
       6  ??afRegisterExtended?relay
       6  ??afSetMatch?relay
     956  AF_DataRequest
       1  AF_DataRequestDiscoverRoute
     203  AF_DataRequestSrcRtg
     635  afBuildMSGIncoming
     133  afCopyAddress
     127  afDataConfirm
      51  afDataReqMTU
      83  afEndPoints
      44  afFindEndPointDesc
      69  afFindEndPointDescList
     138  afFindSimpleDesc
      86  afGetDescCB
      50  afGetMatch
     892  afIncomingData
      21  afInit
      46  afNumEndPoints
      70  afRegister
     184  afRegisterExtended
      63  afSetMatch
       2  epList

 
 3 851 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
 3 960 bytes of CODE  memory
     3 bytes of XDATA memory

Errors: none
Warnings: none
