###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:42
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\ZMain\TI2530DB\OnBoard.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\ZMain\TI2530DB\OnBoard.c"
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        XLAB -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\OnBoard.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\OnBoard.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\ZMain\TI2530DB\OnBoard.c
      1          /**************************************************************************************************
      2            Filename:       OnBoard.c
      3            Revised:        $Date: 2010-08-02 13:44:14 -0700 (Mon, 02 Aug 2010) $
      4            Revision:       $Revision: 23273 $
      5          
      6            Description:    This file contains the UI and control for the
      7                            peripherals on the EVAL development board
      8            Notes:          This file targets the Chipcon CC2530/31
      9          
     10          
     11            Copyright 2005-2010 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License").  You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product.  Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45          
     46          #include "ZComDef.h"
     47          #include "ZGlobals.h"
     48          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1
     49          #include "OSAL.h"
     50          #include "MT.h"
     51          #include "MT_SYS.h"
     52          #include "DebugTrace.h"
     53          
     54          /* Hal */
     55          #include "hal_lcd.h"
     56          #include "hal_mcu.h"
     57          #include "hal_timer.h"
     58          #include "hal_key.h"
     59          #include "hal_led.h"
     60          
     61          /* Allow access macRandomByte() */
     62          #include "mac_radio_defs.h"
     63          
     64          /*********************************************************************
     65           * CONSTANTS
     66           */
     67          
     68          // Task ID not initialized
     69          #define NO_TASK_ID 0xFF
     70          
     71          // Minimum length RAM "pattern" for Stack check
     72          #define MIN_RAM_INIT 12
     73          
     74          /*********************************************************************
     75           * GLOBAL VARIABLES
     76           */
     77          
     78          #if defined MAKE_CRC_SHDW
     79          #pragma location="CRC_SHDW"

   \                                 In  segment CRC_SHDW, align 1
     80          const CODE uint16 _crcShdw = 0xFFFF;
   \                     _crcShdw:
   \   000000   FFFF         DW 65535
     81          #pragma required=_crcShdw
     82          
     83          #else  // if !defined MAKE_CRC_SHDW
     84          
     85          #pragma location="LOCK_BITS_ADDRESS_SPACE"
     86          __no_init uint8 _lockBits[16];
     87          #pragma required=_lockBits
     88          
     89          #if defined ZCL_KEY_ESTABLISH
     90          #include "zcl_cert_data.c"
     91          #else
     92          #pragma location="IEEE_ADDRESS_SPACE"
     93          __no_init uint8 _nvIEEE[Z_EXTADDR_LEN];
     94          #pragma required=_nvIEEE
     95          #endif
     96          
     97          #pragma location="RESERVED_ADDRESS_SPACE"
     98          __no_init uint8 _reserved[1932];
     99          #pragma required=_reserved
    100          #endif
    101          
    102          // 64-bit Extended Address of this device

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          uint8 aExtendedAddress[8];
   \                     aExtendedAddress:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
   \   000008                REQUIRE _crcShdw
    104          
    105          /*********************************************************************
    106           * LOCAL VARIABLES
    107           */
    108          
    109          // Registered keys task ID, initialized to NOT USED.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    110          static uint8 registeredKeysTaskID = NO_TASK_ID;
   \                     registeredKeysTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for registeredKeysTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
    111          
    112          /*********************************************************************
    113           * LOCAL FUNCTIONS
    114           */
    115          
    116          static void ChkReset( void );
    117          
    118          /*********************************************************************
    119           * @fn      InitBoard()
    120           * @brief   Initialize the CC2420DB Board Peripherals
    121           * @param   level: COLD,WARM,READY
    122           * @return  None
    123           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    124          void InitBoard( uint8 level )
   \                     InitBoard:
    125          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    126            if ( level == OB_COLD )
   \   000007   EE           MOV     A,R6
   \   000008   7011         JNZ     ??InitBoard_0
    127            {
    128              // IAR does not zero-out this byte below the XSTACK.
    129              *(uint8 *)0x0 = 0;
   \   00000A   900000       MOV     DPTR,#0x0
   \   00000D   7400         MOV     A,#0x0
   \   00000F   F0           MOVX    @DPTR,A
    130              // Interrupts off
    131              osal_int_disable( INTS_ALL );
   \   000010                ; Setup parameters for call to function osal_int_disable
   \   000010   79FF         MOV     R1,#-0x1
   \   000012   12....       LCALL   ??osal_int_disable?relay; Banked call to: osal_int_disable
   \   000015   E9           MOV     A,R1
    132              // Check for Brown-Out reset
    133              ChkReset();
   \   000016                ; Setup parameters for call to function ChkReset
   \   000016   12....       LCALL   ??ChkReset?relay     ; Banked call to: ChkReset
   \   000019   8009         SJMP    ??InitBoard_1
    134            }
    135            else  // !OB_COLD
    136            {
    137              /* Initialize Key stuff */
    138              HalKeyConfig(HAL_KEY_INTERRUPT_DISABLE, OnBoard_KeyCallback);
   \                     ??InitBoard_0:
   \   00001B                ; Setup parameters for call to function HalKeyConfig
   \   00001B   7A..         MOV     R2,#??OnBoard_KeyCallback?relay & 0xff
   \   00001D   7B..         MOV     R3,#(??OnBoard_KeyCallback?relay >> 8) & 0xff
   \   00001F   7900         MOV     R1,#0x0
   \   000021   12....       LCALL   ??HalKeyConfig?relay ; Banked call to: HalKeyConfig
    139            }
    140          }
   \                     ??InitBoard_1:
   \   000024   7F01         MOV     R7,#0x1
   \   000026   02....       LJMP    ?BANKED_LEAVE_XDATA
    141          
    142          /*********************************************************************
    143           * @fn      ChkReset()
    144           * @brief   Check reset bits - if reset cause is unknown, assume a
    145           *          brown-out (low power), assume batteries are not reliable,
    146           *          hang in a loop and sequence through the LEDs.
    147           * @param   None
    148           * @return  None
    149           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    150          void ChkReset( void )
   \                     ChkReset:
    151          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    152            uint8 rib;
    153          
    154            // Isolate reset indicator bits
    155            rib = SLEEPSTA & LRESET;
   \   000005   E59D         MOV     A,0x9d
   \   000007   5418         ANL     A,#0x18
   \   000009   FE           MOV     R6,A
    156          
    157            if ( rib == RESETPO )
   \   00000A   EE           MOV     A,R6
   \   00000B   600D         JZ      ??ChkReset_0
    158            {
    159              // Put code here to handle Power-On reset
    160            }
    161            else if ( rib == RESETEX )
   \   00000D   7408         MOV     A,#0x8
   \   00000F   6E           XRL     A,R6
   \   000010   6008         JZ      ??ChkReset_0
    162            {
    163              // Put code here to handle External reset
    164            }
    165            else if ( rib == RESETWD )
   \   000012   7410         MOV     A,#0x10
   \   000014   6E           XRL     A,R6
   \   000015   6003         JZ      ??ChkReset_0
    166            {
    167              // Put code here to handle WatchDog reset
    168            }
    169            else  // Unknown reason - not expected.
    170            {
    171              HAL_ASSERT(0);
   \   000017                ; Setup parameters for call to function halAssertHandler
   \   000017   12....       LCALL   ??halAssertHandler?relay; Banked call to: halAssertHandler
    172            }
    173          }
   \                     ??ChkReset_0:
   \   00001A   7F01         MOV     R7,#0x1
   \   00001C   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00001F                REQUIRE SLEEPSTA
    174          
    175          /*********************************************************************
    176           *                        "Keyboard" Support
    177           *********************************************************************/
    178          
    179          /*********************************************************************
    180           * Keyboard Register function
    181           *
    182           * The keyboard handler is setup to send all keyboard changes to
    183           * one task (if a task is registered).
    184           *
    185           * If a task registers, it will get all the keys. You can change this
    186           * to register for individual keys.
    187           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    188          uint8 RegisterForKeys( uint8 task_id )
   \                     RegisterForKeys:
    189          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
    190            // Allow only the first task
    191            if ( registeredKeysTaskID == NO_TASK_ID )
   \   000006   90....       MOV     DPTR,#registeredKeysTaskID
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   64FF         XRL     A,#0xff
   \   00000C   7009         JNZ     ??RegisterForKeys_0
    192            {
    193              registeredKeysTaskID = task_id;
   \   00000E   E8           MOV     A,R0
   \   00000F   90....       MOV     DPTR,#registeredKeysTaskID
   \   000012   F0           MOVX    @DPTR,A
    194              return ( true );
   \   000013   7901         MOV     R1,#0x1
   \   000015   8002         SJMP    ??RegisterForKeys_1
    195            }
    196            else
    197              return ( false );
   \                     ??RegisterForKeys_0:
   \   000017   7900         MOV     R1,#0x0
   \                     ??RegisterForKeys_1:
   \   000019   D083         POP     DPH
   \   00001B   D082         POP     DPL
   \   00001D   02....       LJMP    ?BRET
    198          }
    199          
    200          /*********************************************************************
    201           * @fn      OnBoard_SendKeys
    202           *
    203           * @brief   Send "Key Pressed" message to application.
    204           *
    205           * @param   keys  - keys that were pressed
    206           *          state - shifted
    207           *
    208           * @return  status
    209           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    210          uint8 OnBoard_SendKeys( uint8 keys, uint8 state )
   \                     OnBoard_SendKeys:
    211          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V1,R2
    212            keyChange_t *msgPtr;
    213          
    214            if ( registeredKeysTaskID != NO_TASK_ID )
   \   000009   90....       MOV     DPTR,#registeredKeysTaskID
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   64FF         XRL     A,#0xff
   \   00000F   6046         JZ      ??OnBoard_SendKeys_0
    215            {
    216              // Send the address to the task
    217              msgPtr = (keyChange_t *)osal_msg_allocate( sizeof(keyChange_t) );
   \   000011                ; Setup parameters for call to function osal_msg_allocate
   \   000011   7A04         MOV     R2,#0x4
   \   000013   7B00         MOV     R3,#0x0
   \   000015   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
   \   000018   8A..         MOV     ?V2,R2
   \   00001A   8B..         MOV     ?V3,R3
   \   00001C   AE..         MOV     R6,?V2
   \   00001E   AF..         MOV     R7,?V3
    218              if ( msgPtr )
   \   000020   EE           MOV     A,R6
   \   000021   4F           ORL     A,R7
   \   000022   602F         JZ      ??OnBoard_SendKeys_1
    219              {
    220                msgPtr->hdr.event = KEY_CHANGE;
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   74C0         MOV     A,#-0x40
   \   00002A   F0           MOVX    @DPTR,A
    221                msgPtr->state = state;
   \   00002B   E5..         MOV     A,?V1
   \   00002D   C0E0         PUSH    A
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   D0E0         POP     A
   \   000037   F0           MOVX    @DPTR,A
    222                msgPtr->keys = keys;
   \   000038   E5..         MOV     A,?V0
   \   00003A   C0E0         PUSH    A
   \   00003C   8E82         MOV     DPL,R6
   \   00003E   8F83         MOV     DPH,R7
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   D0E0         POP     A
   \   000045   F0           MOVX    @DPTR,A
    223          
    224                osal_msg_send( registeredKeysTaskID, (uint8 *)msgPtr );
   \   000046                ; Setup parameters for call to function osal_msg_send
   \   000046   EE           MOV     A,R6
   \   000047   FA           MOV     R2,A
   \   000048   EF           MOV     A,R7
   \   000049   FB           MOV     R3,A
   \   00004A   90....       MOV     DPTR,#registeredKeysTaskID
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F9           MOV     R1,A
   \   00004F   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
   \   000052   E9           MOV     A,R1
    225              }
    226              return ( ZSuccess );
   \                     ??OnBoard_SendKeys_1:
   \   000053   7900         MOV     R1,#0x0
   \   000055   8002         SJMP    ??OnBoard_SendKeys_2
    227            }
    228            else
    229              return ( ZFailure );
   \                     ??OnBoard_SendKeys_0:
   \   000057   7901         MOV     R1,#0x1
   \                     ??OnBoard_SendKeys_2:
   \   000059   7F04         MOV     R7,#0x4
   \   00005B   02....       LJMP    ?BANKED_LEAVE_XDATA
    230          }
    231          
    232          /*********************************************************************
    233           * @fn      OnBoard_KeyCallback
    234           *
    235           * @brief   Callback service for keys
    236           *
    237           * @param   keys  - keys that were pressed
    238           *          state - shifted
    239           *
    240           * @return  void
    241           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    242          void OnBoard_KeyCallback ( uint8 keys, uint8 state )
   \                     OnBoard_KeyCallback:
    243          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   8A..         MOV     ?V0,R2
    244            uint8 shift;
    245            (void)state;
    246          
    247            shift = (keys & HAL_KEY_SW_6) ? true : false;
   \   000009   EF           MOV     A,R7
   \   00000A   A2E5         MOV     C,0xE0 /* A   */.5
   \   00000C   5004         JNC     ??OnBoard_KeyCallback_0
   \   00000E   D2F0         SETB    B.0
   \   000010   8002         SJMP    ??OnBoard_KeyCallback_1
   \                     ??OnBoard_KeyCallback_0:
   \   000012   C2F0         CLR     B.0
   \                     ??OnBoard_KeyCallback_1:
   \   000014   A2F0         MOV     C,B.0
   \   000016   E4           CLR     A
   \   000017   33           RLC     A
   \   000018   FE           MOV     R6,A
    248          
    249            if ( OnBoard_SendKeys( keys, shift ) != ZSuccess )
   \   000019                ; Setup parameters for call to function OnBoard_SendKeys
   \   000019   EE           MOV     A,R6
   \   00001A   FA           MOV     R2,A
   \   00001B   EF           MOV     A,R7
   \   00001C   F9           MOV     R1,A
   \   00001D   12....       LCALL   ??OnBoard_SendKeys?relay; Banked call to: OnBoard_SendKeys
   \   000020   E9           MOV     A,R1
    250            {
    251              // Process SW1 here
    252              if ( keys & HAL_KEY_SW_1 )  // Switch 1
    253              {
    254              }
    255              // Process SW2 here
    256              if ( keys & HAL_KEY_SW_2 )  // Switch 2
    257              {
    258              }
    259              // Process SW3 here
    260              if ( keys & HAL_KEY_SW_3 )  // Switch 3
    261              {
    262              }
    263              // Process SW4 here
    264              if ( keys & HAL_KEY_SW_4 )  // Switch 4
    265              {
    266              }
    267              // Process SW5 here
    268              if ( keys & HAL_KEY_SW_5 )  // Switch 5
    269              {
    270              }
    271              // Process SW6 here
    272              if ( keys & HAL_KEY_SW_6 )  // Switch 6
    273              {
    274              }
    275            }
    276          }
   \   000021   7F01         MOV     R7,#0x1
   \   000023   02....       LJMP    ?BANKED_LEAVE_XDATA
    277          
    278          /*********************************************************************
    279           * @fn      OnBoard_stack_used
    280           *
    281           * @brief   Runs through the stack looking for touched memory.
    282           *
    283           * @param   none
    284           *
    285           * @return  Maximum number of bytes used by the stack.
    286           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          uint16 OnBoard_stack_used(void)
   \                     OnBoard_stack_used:
    288          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    289            uint8 const *ptr;
    290            uint8 cnt = 0;
   \   000004   7800         MOV     R0,#0x0
    291          
    292            for (ptr = CSTACK_END; ptr > CSTACK_BEG; ptr--)
   \   000006   7582..       MOV     DPL,#(SFE(XSTACK) + 255) & 0xff
   \   000009   7583..       MOV     DPH,#((SFE(XSTACK) - 1) >> 8) & 0xff
   \                     ??OnBoard_stack_used_0:
   \   00000C   C3           CLR     C
   \   00000D   74..         MOV     A,#SFB(XSTACK) & 0xff
   \   00000F   9582         SUBB    A,DPL
   \   000011   74..         MOV     A,#(SFB(XSTACK) >> 8) & 0xff
   \   000013   9583         SUBB    A,DPH
   \   000015   502D         JNC     ??OnBoard_stack_used_1
    293            {
    294              if (STACK_INIT_VALUE == *ptr)
   \   000017   E0           MOVX    A,@DPTR
   \   000018   64CD         XRL     A,#0xcd
   \   00001A   7018         JNZ     ??OnBoard_stack_used_2
    295              {
    296                if (++cnt >= MIN_RAM_INIT)
   \   00001C   7401         MOV     A,#0x1
   \   00001E   28           ADD     A,R0
   \   00001F   F9           MOV     R1,A
   \   000020   E9           MOV     A,R1
   \   000021   F8           MOV     R0,A
   \   000022   E9           MOV     A,R1
   \   000023   C3           CLR     C
   \   000024   940C         SUBB    A,#0xc
   \   000026   400E         JC      ??OnBoard_stack_used_3
    297                {
    298                  ptr += MIN_RAM_INIT;
   \   000028   E582         MOV     A,DPL
   \   00002A   240C         ADD     A,#0xc
   \   00002C   F582         MOV     DPL,A
   \   00002E   5014         JNC     ??OnBoard_stack_used_1
   \   000030   0583         INC     DPH
    299                  break;
   \   000032   8010         SJMP    ??OnBoard_stack_used_1
    300                }
    301              }
    302              else
    303              {
    304                cnt = 0;
   \                     ??OnBoard_stack_used_2:
   \   000034   7800         MOV     R0,#0x0
    305              }
    306            }
   \                     ??OnBoard_stack_used_3:
   \   000036   E582         MOV     A,DPL
   \   000038   24FF         ADD     A,#-0x1
   \   00003A   F582         MOV     DPL,A
   \   00003C   E583         MOV     A,DPH
   \   00003E   34FF         ADDC    A,#-0x1
   \   000040   F583         MOV     DPH,A
   \   000042   80C8         SJMP    ??OnBoard_stack_used_0
    307          
    308            return (uint16)(CSTACK_END - ptr + 1);
   \                     ??OnBoard_stack_used_1:
   \   000044   74..         MOV     A,#(SFE(XSTACK) + 255) & 0xff
   \   000046   C3           CLR     C
   \   000047   9582         SUBB    A,DPL
   \   000049   FA           MOV     R2,A
   \   00004A   74..         MOV     A,#((SFE(XSTACK) - 1) >> 8) & 0xff
   \   00004C   9583         SUBB    A,DPH
   \   00004E   FB           MOV     R3,A
   \   00004F   EA           MOV     A,R2
   \   000050   2401         ADD     A,#0x1
   \   000052   FA           MOV     R2,A
   \   000053   5001         JNC     ??OnBoard_stack_used_4
   \   000055   0B           INC     R3
   \                     ??OnBoard_stack_used_4:
   \   000056   D083         POP     DPH
   \   000058   D082         POP     DPL
   \   00005A   02....       LJMP    ?BRET
    309          }
    310          
    311          /*********************************************************************
    312           * @fn      _itoa
    313           *
    314           * @brief   convert a 16bit number to ASCII
    315           *
    316           * @param   num -
    317           *          buf -
    318           *          radix -
    319           *
    320           * @return  void
    321           *
    322           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    323          void _itoa(uint16 num, uint8 *buf, uint8 radix)
   \                     _itoa:
    324          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V4,R4
   \   000010   8D..         MOV     ?V5,R5
   \   000012   89..         MOV     ?V6,R1
    325            char c,i;
    326            uint8 *p, rst[5];
    327          
    328            p = rst;
   \   000014   A8..         MOV     R0,?XSP + 0
   \   000016   A9..         MOV     R1,?XSP + 1
   \   000018   88..         MOV     ?V2,R0
   \   00001A   89..         MOV     ?V3,R1
   \   00001C   AC..         MOV     R4,?V2
   \   00001E   AD..         MOV     R5,?V3
    329            for ( i=0; i<5; i++,p++ )
   \   000020   75..00       MOV     ?V1,#0x0
   \                     ??_itoa_0:
   \   000023   E5..         MOV     A,?V1
   \   000025   C3           CLR     C
   \   000026   9405         SUBB    A,#0x5
   \   000028   504F         JNC     ??_itoa_1
    330            {
    331              c = num % radix;  // Isolate a digit
   \   00002A   EE           MOV     A,R6
   \   00002B   F8           MOV     R0,A
   \   00002C   EF           MOV     A,R7
   \   00002D   F9           MOV     R1,A
   \   00002E   AA..         MOV     R2,?V6
   \   000030   7B00         MOV     R3,#0x0
   \   000032   12....       LCALL   ?US_DIV_MOD
   \   000035   EA           MOV     A,R2
   \   000036   F5..         MOV     ?V0,A
    332              *p = c + (( c < 10 ) ? '0' : '7');  // Convert to Ascii
   \   000038   E5..         MOV     A,?V0
   \   00003A   C3           CLR     C
   \   00003B   940A         SUBB    A,#0xa
   \   00003D   5006         JNC     ??_itoa_2
   \   00003F   7830         MOV     R0,#0x30
   \   000041   7900         MOV     R1,#0x0
   \   000043   8004         SJMP    ??_itoa_3
   \                     ??_itoa_2:
   \   000045   7837         MOV     R0,#0x37
   \   000047   7900         MOV     R1,#0x0
   \                     ??_itoa_3:
   \   000049   E8           MOV     A,R0
   \   00004A   25..         ADD     A,?V0
   \   00004C   C0E0         PUSH    A
   \   00004E   8C82         MOV     DPL,R4
   \   000050   8D83         MOV     DPH,R5
   \   000052   D0E0         POP     A
   \   000054   F0           MOVX    @DPTR,A
    333              num /= radix;
   \   000055   EE           MOV     A,R6
   \   000056   F8           MOV     R0,A
   \   000057   EF           MOV     A,R7
   \   000058   F9           MOV     R1,A
   \   000059   AA..         MOV     R2,?V6
   \   00005B   7B00         MOV     R3,#0x0
   \   00005D   12....       LCALL   ?US_DIV_MOD
   \   000060   88..         MOV     ?V2,R0
   \   000062   89..         MOV     ?V3,R1
   \   000064   AE..         MOV     R6,?V2
   \   000066   AF..         MOV     R7,?V3
    334              if ( !num )
   \   000068   EE           MOV     A,R6
   \   000069   4F           ORL     A,R7
   \   00006A   600D         JZ      ??_itoa_1
    335                break;
    336            }
   \   00006C   05..         INC     ?V1
   \   00006E   8C82         MOV     DPL,R4
   \   000070   8D83         MOV     DPH,R5
   \   000072   A3           INC     DPTR
   \   000073   AC82         MOV     R4,DPL
   \   000075   AD83         MOV     R5,DPH
   \   000077   80AA         SJMP    ??_itoa_0
    337          
    338            for ( c=0 ; c<=i; c++ )
   \                     ??_itoa_1:
   \   000079   75..00       MOV     ?V0,#0x0
   \                     ??_itoa_4:
   \   00007C   E5..         MOV     A,?V1
   \   00007E   C3           CLR     C
   \   00007F   95..         SUBB    A,?V0
   \   000081   4029         JC      ??_itoa_5
    339              *buf++ = *p--;  // Reverse character order
   \   000083   8C82         MOV     DPL,R4
   \   000085   8D83         MOV     DPH,R5
   \   000087   E0           MOVX    A,@DPTR
   \   000088   C0E0         PUSH    A
   \   00008A   85..82       MOV     DPL,?V4
   \   00008D   85..83       MOV     DPH,?V5
   \   000090   D0E0         POP     A
   \   000092   F0           MOVX    @DPTR,A
   \   000093   EC           MOV     A,R4
   \   000094   24FF         ADD     A,#-0x1
   \   000096   FC           MOV     R4,A
   \   000097   ED           MOV     A,R5
   \   000098   34FF         ADDC    A,#-0x1
   \   00009A   FD           MOV     R5,A
   \   00009B   85..82       MOV     DPL,?V4
   \   00009E   85..83       MOV     DPH,?V5
   \   0000A1   A3           INC     DPTR
   \   0000A2   8582..       MOV     ?V4,DPL
   \   0000A5   8583..       MOV     ?V5,DPH
   \   0000A8   05..         INC     ?V0
   \   0000AA   80D0         SJMP    ??_itoa_4
    340          
    341            *buf = '\0';
   \                     ??_itoa_5:
   \   0000AC   85..82       MOV     DPL,?V4
   \   0000AF   85..83       MOV     DPH,?V5
   \   0000B2   7400         MOV     A,#0x0
   \   0000B4   F0           MOVX    @DPTR,A
    342          }
   \   0000B5   7405         MOV     A,#0x5
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BA   7F07         MOV     R7,#0x7
   \   0000BC   02....       LJMP    ?BANKED_LEAVE_XDATA
    343          
    344          /*********************************************************************
    345           * @fn        Onboard_rand
    346           *
    347           * @brief    Random number generator
    348           *
    349           * @param   none
    350           *
    351           * @return  uint16 - new random number
    352           *
    353           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    354          uint16 Onboard_rand( void )
   \                     Onboard_rand:
    355          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    356            return ( MAC_RADIO_RANDOM_WORD() );
   \   000004                ; Setup parameters for call to function macMcuRandomWord
   \   000004   12....       LCALL   ??macMcuRandomWord?relay; Banked call to: macMcuRandomWord
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    357          }
    358          
    359          /*********************************************************************
    360           * @fn        Onboard_wait
    361           *
    362           * @brief    Delay wait
    363           *
    364           * @param   uint16 - time to wait
    365           *
    366           * @return  none
    367           *
    368           *********************************************************************/
    369          #pragma optimize=none

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    370          void Onboard_wait( uint16 timeout )
   \                     Onboard_wait:
    371          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    372            while (timeout--)
   \                     ??Onboard_wait_0:
   \   000000   EA           MOV     A,R2
   \   000001   F8           MOV     R0,A
   \   000002   EB           MOV     A,R3
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   24FF         ADD     A,#-0x1
   \   000007   FA           MOV     R2,A
   \   000008   E9           MOV     A,R1
   \   000009   34FF         ADDC    A,#-0x1
   \   00000B   FB           MOV     R3,A
   \   00000C   E8           MOV     A,R0
   \   00000D   49           ORL     A,R1
   \   00000E   6005         JZ      ??Onboard_wait_1
    373            {
    374              asm("NOP");
   \   000010   00           NOP
    375              asm("NOP");
   \   000011   00           NOP
    376              asm("NOP");
   \   000012   00           NOP
   \   000013   80EB         SJMP    ??Onboard_wait_0
    377            }
    378          }
   \                     ??Onboard_wait_1:
   \   000015   02....       LJMP    ?BRET
    379          
    380          /*********************************************************************
    381           * @fn      Onboard_soft_reset
    382           *
    383           * @brief   Effect a soft reset.
    384           *
    385           * @param   none
    386           *
    387           * @return  none
    388           *
    389           *********************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    390          __near_func void Onboard_soft_reset( void )
   \                     Onboard_soft_reset:
    391          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    392            HAL_DISABLE_INTERRUPTS();
   \   000000   C2AF         CLR     0xa8.7
    393            // Abort all DMA channels to insure that ongoing operations do not
    394            // interfere with re-configuration.
    395            DMAARM = 0x80 | 0x1F;
   \   000002   75D69F       MOV     0xd6,#-0x61
    396            asm("LJMP 0x0");
   \   000005   020000       LJMP 0x0
    397          }
   \   000008   22           RET
   \   000009                REQUIRE _A_IEN0
   \   000009                REQUIRE DMAARM
    398          
    399          /*********************************************************************
    400           *                    EXTERNAL I/O FUNCTIONS
    401           *
    402           * User defined functions to control external devices. Add your code
    403           * to the following functions to control devices wired to DB outputs.
    404           *
    405           *********************************************************************/
    406          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    407          void BigLight_On( void )
   \                     BigLight_On:
    408          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    409            // Put code here to turn on an external light
    410          }
   \   000000   02....       LJMP    ?BRET
    411          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    412          void BigLight_Off( void )
   \                     BigLight_Off:
    413          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    414            // Put code here to turn off an external light
    415          }
   \   000000   02....       LJMP    ?BRET
    416          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    417          void BuzzerControl( uint8 on )
   \                     BuzzerControl:
    418          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    419            // Put code here to turn a buzzer on/off
    420            (void)on;
    421          }
   \   000000   02....       LJMP    ?BRET
    422          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    423          void Dimmer( uint8 lvl )
   \                     Dimmer:
    424          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    425            // Put code here to control a dimmer
    426            (void)lvl;
    427          }
   \   000000   02....       LJMP    ?BRET
    428          
    429          // No dip switches on this board

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    430          uint8 GetUserDipSw( void )
   \                     GetUserDipSw:
    431          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    432            return 0;
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
    433          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for registeredKeysTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??InitBoard?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    InitBoard

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ChkReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ChkReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??RegisterForKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    RegisterForKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??OnBoard_SendKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_SendKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??OnBoard_KeyCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_KeyCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??OnBoard_stack_used?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_stack_used

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_itoa?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _itoa

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Onboard_rand?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Onboard_rand

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Onboard_wait?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Onboard_wait

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BigLight_On?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BigLight_On

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BigLight_Off?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BigLight_Off

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BuzzerControl?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BuzzerControl

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Dimmer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Dimmer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetUserDipSw?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetUserDipSw
    434          
    435          /*********************************************************************
    436          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   BigLight_Off
      0      0   BigLight_On
      0      0   BuzzerControl
      0     18   ChkReset
        0      9   -> halAssertHandler
      0      0   Dimmer
      0      0   GetUserDipSw
      0      9   InitBoard
        0      9   -> ChkReset
        0      9   -> HalKeyConfig
        0      9   -> osal_int_disable
      0      9   OnBoard_KeyCallback
        0      9   -> OnBoard_SendKeys
      1     21   OnBoard_SendKeys
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
      2      0   OnBoard_stack_used
      2      0   Onboard_rand
        2      0   -> macMcuRandomWord
      0      0   Onboard_soft_reset
      0      0   Onboard_wait
      2      0   RegisterForKeys
      1     20   _itoa


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for registeredKeysTaskID>
       6  ??BigLight_Off?relay
       6  ??BigLight_On?relay
       6  ??BuzzerControl?relay
       6  ??ChkReset?relay
       6  ??Dimmer?relay
       6  ??GetUserDipSw?relay
       6  ??InitBoard?relay
       6  ??OnBoard_KeyCallback?relay
       6  ??OnBoard_SendKeys?relay
       6  ??OnBoard_stack_used?relay
       6  ??Onboard_rand?relay
       6  ??Onboard_wait?relay
       6  ??RegisterForKeys?relay
       6  ??_itoa?relay
       3  BigLight_Off
       3  BigLight_On
       3  BuzzerControl
      31  ChkReset
       1  DMAARM
       3  Dimmer
       5  GetUserDipSw
      41  InitBoard
      38  OnBoard_KeyCallback
      94  OnBoard_SendKeys
      93  OnBoard_stack_used
      14  Onboard_rand
       9  Onboard_soft_reset
      24  Onboard_wait
      32  RegisterForKeys
       1  SLEEPSTA
       1  _A_IEN0
       2  _crcShdw
     191  _itoa
       8  aExtendedAddress
       1  registeredKeysTaskID

 
 575 bytes in segment BANKED_CODE
  84 bytes in segment BANK_RELAYS
   2 bytes in segment CRC_SHDW
   9 bytes in segment NEAR_CODE
   3 bytes in segment SFR_AN
   1 byte  in segment XDATA_I
   1 byte  in segment XDATA_ID
   8 bytes in segment XDATA_Z
 
 671 bytes of CODE  memory
   0 bytes of DATA  memory (+ 3 bytes shared)
   9 bytes of XDATA memory

Errors: none
Warnings: none
