###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:47
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\zmac\f8w\zmac.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\zmac\f8w\zmac.c" -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D XLAB
#        -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\zmac.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\zmac.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\zmac\f8w\zmac.c
      1          /**************************************************************************************************
      2            Filename:       zmac.c
      3            Revised:        $Date: 2010-03-29 17:17:58 -0700 (Mon, 29 Mar 2010) $
      4            Revision:       $Revision: 22040 $
      5          
      6          
      7            Description:    This file contains the ZStack MAC Porting Layer
      8          
      9          
     10            Copyright 2005-2010 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /********************************************************************************************************
     42           *                                               INCLUDES
     43           ********************************************************************************************************/
     44          
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "ZMAC.h"
     48          #include "mac_main.h"
     49          #include "ssp.h"
     50          
     51          #if !defined NONWK
     52            #include "ZGlobals.h"
     53          #endif
     54          
     55          /********************************************************************************************************
     56           *                                                 MACROS
     57           ********************************************************************************************************/
     58          
     59          /********************************************************************************************************
     60           *                                               CONSTANTS
     61           ********************************************************************************************************/
     62          
     63          /********************************************************************************************************
     64           *                                               GLOBALS
     65           ********************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     66          uint32 _ScanChannels;
   \                     _ScanChannels:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     67          
     68          extern uint8 aExtendedAddress[];
     69          
     70          /**************************************************************************************************
     71           * @fn          MAC_SetRandomSeedCB
     72           *
     73           * @brief       MAC function: Set the function pointer for the random seed callback.
     74           *
     75           * input parameters
     76           *
     77           * @param       pCBFcn - function pointer of the random seed callback
     78           *
     79           * output parameters
     80           *
     81           * None.
     82           *
     83           * @return      none
     84           **************************************************************************************************
     85           */
     86          extern void MAC_SetRandomSeedCB(macRNGFcn_t pCBFcn);
     87          /********************************************************************************************************
     88           *                                               LOCALS
     89           ********************************************************************************************************/
     90          
     91          /* Pointer to scan result buffer */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92          void *ZMac_ScanBuf = NULL;
   \                     ZMac_ScanBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     93          
     94          /********************************************************************************************************
     95           * LOCAL FUNCTION PROTOTYPES
     96           ********************************************************************************************************/
     97          
     98          /********************************************************************************************************
     99           *                                                TYPEDEFS
    100           ********************************************************************************************************/
    101          
    102          
    103          /********************************************************************************************************
    104           *                                                FUNCTIONS
    105           ********************************************************************************************************/
    106          
    107          /********************************************************************************************************
    108           * @fn      ZMacInit
    109           *
    110           * @brief   Initialize MAC.
    111           *
    112           * @param   none.
    113           *
    114           * @return  status.
    115           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    116          uint8 ZMacInit( void )
   \                     ZMacInit:
    117          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    118            uint8 stat;
    119          
    120          #if defined( ZCL_KEY_ESTABLISH )
    121            /* Set the callback function for 16 byte random seed */
    122            MAC_SetRandomSeedCB( SSP_StoreRandomSeedNV);
    123          #endif
    124            
    125            MAC_Init();
   \   000005                ; Setup parameters for call to function MAC_Init
   \   000005   12....       LCALL   ??MAC_Init?relay     ; Banked call to: MAC_Init
    126            MAC_InitDevice();
   \   000008                ; Setup parameters for call to function MAC_InitDevice
   \   000008   12....       LCALL   ??MAC_InitDevice?relay; Banked call to: MAC_InitDevice
    127          
    128          #if !defined NONWK
    129            if ( ZG_BUILD_RTR_TYPE )
    130            {
    131              MAC_InitCoord();
   \   00000B                ; Setup parameters for call to function MAC_InitCoord
   \   00000B   12....       LCALL   ??MAC_InitCoord?relay; Banked call to: MAC_InitCoord
    132            }
    133          #endif
    134          
    135            // If OK, initialize the MAC
    136            stat = ZMacReset( TRUE );
   \   00000E                ; Setup parameters for call to function ZMacReset
   \   00000E   7901         MOV     R1,#0x1
   \   000010   12....       LCALL   ??ZMacReset?relay    ; Banked call to: ZMacReset
   \   000013   E9           MOV     A,R1
   \   000014   FE           MOV     R6,A
    137          
    138            // Turn off interrupts
    139            osal_int_disable( INTS_ALL );
   \   000015                ; Setup parameters for call to function osal_int_disable
   \   000015   79FF         MOV     R1,#-0x1
   \   000017   12....       LCALL   ??osal_int_disable?relay; Banked call to: osal_int_disable
   \   00001A   E9           MOV     A,R1
    140          
    141            return ( stat );
   \   00001B   EE           MOV     A,R6
   \   00001C   F9           MOV     R1,A
   \   00001D   7F01         MOV     R7,#0x1
   \   00001F   02....       LJMP    ?BANKED_LEAVE_XDATA
    142          }
    143          
    144          /********************************************************************************************************
    145           * @fn      ZMacReset
    146           *
    147           * @brief   Reset the MAC.
    148           *
    149           * @param   Default to PIB defaults.
    150           *
    151           * @return  status.
    152           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    153          uint8 ZMacReset( bool SetDefaultPIB )
   \                     ZMacReset:
    154          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
    155            byte stat;
    156            byte value;
    157          
    158            stat = MAC_MlmeResetReq( SetDefaultPIB );
   \   00000C                ; Setup parameters for call to function MAC_MlmeResetReq
   \   00000C   EF           MOV     A,R7
   \   00000D   F9           MOV     R1,A
   \   00000E   12....       LCALL   ??MAC_MlmeResetReq?relay; Banked call to: MAC_MlmeResetReq
   \   000011   E9           MOV     A,R1
   \   000012   FE           MOV     R6,A
    159          
    160            // Don't send PAN ID conflict
    161            value = FALSE;
   \   000013   85..82       MOV     DPL,?XSP + 0
   \   000016   85..83       MOV     DPH,?XSP + 1
   \   000019   7400         MOV     A,#0x0
   \   00001B   F0           MOVX    @DPTR,A
    162            MAC_MlmeSetReq( MAC_ASSOCIATED_PAN_COORD, &value );
   \   00001C                ; Setup parameters for call to function MAC_MlmeSetReq
   \   00001C   AA..         MOV     R2,?XSP + 0
   \   00001E   AB..         MOV     R3,?XSP + 1
   \   000020   7956         MOV     R1,#0x56
   \   000022   12....       LCALL   ??MAC_MlmeSetReq?relay; Banked call to: MAC_MlmeSetReq
   \   000025   E9           MOV     A,R1
    163            MAC_MlmeSetReq( MAC_EXTENDED_ADDRESS, &aExtendedAddress );
   \   000026                ; Setup parameters for call to function MAC_MlmeSetReq
   \   000026   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   000028   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   00002A   79E2         MOV     R1,#-0x1e
   \   00002C   12....       LCALL   ??MAC_MlmeSetReq?relay; Banked call to: MAC_MlmeSetReq
   \   00002F   E9           MOV     A,R1
    164          
    165            if (ZMac_ScanBuf)
   \   000030   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   E8           MOV     A,R0
   \   000039   49           ORL     A,R1
   \   00003A   6015         JZ      ??ZMacReset_0
    166            {
    167              osal_mem_free(ZMac_ScanBuf);
   \   00003C                ; Setup parameters for call to function osal_mem_free
   \   00003C   90....       MOV     DPTR,#ZMac_ScanBuf
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FA           MOV     R2,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FB           MOV     R3,A
   \   000044   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    168              ZMac_ScanBuf = NULL;
   \   000047   90....       MOV     DPTR,#ZMac_ScanBuf
   \   00004A   7400         MOV     A,#0x0
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   7400         MOV     A,#0x0
   \   000050   F0           MOVX    @DPTR,A
    169            }
    170          
    171            return ( stat );
   \                     ??ZMacReset_0:
   \   000051   EE           MOV     A,R6
   \   000052   F9           MOV     R1,A
   \   000053   7401         MOV     A,#0x1
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
   \   000058   7F01         MOV     R7,#0x1
   \   00005A   02....       LJMP    ?BANKED_LEAVE_XDATA
    172          }
    173          
    174          
    175          /********************************************************************************************************
    176           * @fn      ZMacGetReq
    177           *
    178           * @brief   Read a MAC PIB attribute.
    179           *
    180           * @param   attr - PIB attribute to get
    181           * @param   value - pointer to the buffer to store the attribute
    182           *
    183           * @return  status
    184           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    185          uint8 ZMacGetReq( uint8 attr, uint8 *value )
   \                     ZMacGetReq:
    186          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    187            if ( attr == ZMacExtAddr )
   \   00000B   74E2         MOV     A,#-0x1e
   \   00000D   65..         XRL     A,?V0
   \   00000F   700F         JNZ     ??ZMacGetReq_0
    188            {
    189              osal_cpyExtAddr( value, &aExtendedAddress );
   \   000011                ; Setup parameters for call to function sAddrExtCpy
   \   000011   7C..         MOV     R4,#aExtendedAddress & 0xff
   \   000013   7D..         MOV     R5,#(aExtendedAddress >> 8) & 0xff
   \   000015   EE           MOV     A,R6
   \   000016   FA           MOV     R2,A
   \   000017   EF           MOV     A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
    190              return ZMacSuccess;
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   8009         SJMP    ??ZMacGetReq_1
    191            }
    192          
    193            return (ZMacStatus_t) MAC_MlmeGetReq( attr, value );
   \                     ??ZMacGetReq_0:
   \   000020                ; Setup parameters for call to function MAC_MlmeGetReq
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   FB           MOV     R3,A
   \   000024   A9..         MOV     R1,?V0
   \   000026   12....       LCALL   ??MAC_MlmeGetReq?relay; Banked call to: MAC_MlmeGetReq
   \                     ??ZMacGetReq_1:
   \   000029   7F01         MOV     R7,#0x1
   \   00002B   02....       LJMP    ?BANKED_LEAVE_XDATA
    194          }
    195          
    196          
    197          /********************************************************************************************************
    198           * @fn      ZMacSetReq
    199           *
    200           * @brief   Write a MAC PIB attribute.
    201           *
    202           * @param   attr - PIB attribute to Set
    203           * @param   value - pointer to the data
    204           *
    205           * @return  status
    206           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    207          uint8 ZMacSetReq( uint8 attr, byte *value )
   \                     ZMacSetReq:
    208          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    209            if ( attr == ZMacExtAddr )
   \   00000B   74E2         MOV     A,#-0x1e
   \   00000D   65..         XRL     A,?V0
   \   00000F   700B         JNZ     ??ZMacSetReq_0
    210            {
    211              osal_cpyExtAddr( aExtendedAddress, value );
   \   000011                ; Setup parameters for call to function sAddrExtCpy
   \   000011   EE           MOV     A,R6
   \   000012   FC           MOV     R4,A
   \   000013   EF           MOV     A,R7
   \   000014   FD           MOV     R5,A
   \   000015   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   000017   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   000019   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
    212            }
    213          
    214            return (ZMacStatus_t) MAC_MlmeSetReq( attr, value );
   \                     ??ZMacSetReq_0:
   \   00001C                ; Setup parameters for call to function MAC_MlmeSetReq
   \   00001C   EE           MOV     A,R6
   \   00001D   FA           MOV     R2,A
   \   00001E   EF           MOV     A,R7
   \   00001F   FB           MOV     R3,A
   \   000020   A9..         MOV     R1,?V0
   \   000022   12....       LCALL   ??MAC_MlmeSetReq?relay; Banked call to: MAC_MlmeSetReq
   \   000025   7F01         MOV     R7,#0x1
   \   000027   02....       LJMP    ?BANKED_LEAVE_XDATA
    215          }
    216          
    217          /********************************************************************************************************
    218           * @fn      ZMacAssociateReq
    219           *
    220           * @brief   Request an association with a coordinator.
    221           *
    222           * @param   structure with info need to associate.
    223           *
    224           * @return  status
    225           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    226          uint8 ZMacAssociateReq( ZMacAssociateReq_t *pData )
   \                     ZMacAssociateReq:
    227          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    228            /* Right now, set security to zero */
    229            pData->Sec.SecurityLevel = false;
   \   000009   EE           MOV     A,R6
   \   00000A   2416         ADD     A,#0x16
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   7400         MOV     A,#0x0
   \   000014   F0           MOVX    @DPTR,A
    230          
    231            MAC_MlmeAssociateReq ( (macMlmeAssociateReq_t *)pData);
   \   000015                ; Setup parameters for call to function MAC_MlmeAssociateReq
   \   000015   EE           MOV     A,R6
   \   000016   FA           MOV     R2,A
   \   000017   EF           MOV     A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   ??MAC_MlmeAssociateReq?relay; Banked call to: MAC_MlmeAssociateReq
    232            return ( ZMacSuccess );
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   7F01         MOV     R7,#0x1
   \   000020   02....       LJMP    ?BANKED_LEAVE_XDATA
    233          }
    234          
    235          /********************************************************************************************************
    236           * @fn      ZMacAssociateRsp
    237           *
    238           * @brief   Request to send an association response message.
    239           *
    240           * @param   structure with associate response and info needed to send it.
    241           *
    242           * @return  MAC_SUCCESS or MAC error code
    243           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    244          uint8 ZMacAssociateRsp( ZMacAssociateRsp_t *pData )
   \                     ZMacAssociateRsp:
    245          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    246            /* Right now, set security to zero */
    247            pData->Sec.SecurityLevel = false;
   \   000009   EE           MOV     A,R6
   \   00000A   2413         ADD     A,#0x13
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   7400         MOV     A,#0x0
   \   000014   F0           MOVX    @DPTR,A
    248          
    249            return ( MAC_MlmeAssociateRsp( (macMlmeAssociateRsp_t *) pData ) );
   \   000015                ; Setup parameters for call to function MAC_MlmeAssociateRsp
   \   000015   EE           MOV     A,R6
   \   000016   FA           MOV     R2,A
   \   000017   EF           MOV     A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   ??MAC_MlmeAssociateRsp?relay; Banked call to: MAC_MlmeAssociateRsp
   \   00001C   7F01         MOV     R7,#0x1
   \   00001E   02....       LJMP    ?BANKED_LEAVE_XDATA
    250          }
    251          
    252          /********************************************************************************************************
    253           * @fn      ZMacDisassociateReq
    254           *
    255           * @brief   Request to send a disassociate request message.
    256           *
    257           * @param   structure with info need send it.
    258           *
    259           * @return  status
    260           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    261          uint8 ZMacDisassociateReq( ZMacDisassociateReq_t *pData )
   \                     ZMacDisassociateReq:
    262          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    263            /* Right now, set security to zero */
    264            pData->Sec.SecurityLevel = false;
   \   000009   EE           MOV     A,R6
   \   00000A   2415         ADD     A,#0x15
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   7400         MOV     A,#0x0
   \   000014   F0           MOVX    @DPTR,A
    265          
    266            MAC_MlmeDisassociateReq( (macMlmeDisassociateReq_t *)pData);
   \   000015                ; Setup parameters for call to function MAC_MlmeDisassociateReq
   \   000015   EE           MOV     A,R6
   \   000016   FA           MOV     R2,A
   \   000017   EF           MOV     A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   ??MAC_MlmeDisassociateReq?relay; Banked call to: MAC_MlmeDisassociateReq
    267            return ( ZMacSuccess );
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   7F01         MOV     R7,#0x1
   \   000020   02....       LJMP    ?BANKED_LEAVE_XDATA
    268          }
    269          
    270          /********************************************************************************************************
    271           * @fn      ZMacOrphanRsp
    272           *
    273           * @brief   Allows next higher layer to respond to an orphan indication message.
    274           *
    275           * @param   structure with info need send it.
    276           *
    277           * @return  status
    278           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    279          uint8 ZMacOrphanRsp( ZMacOrphanRsp_t *pData )
   \                     ZMacOrphanRsp:
    280          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    281            /* Right now, set security to zero */
    282            pData->Sec.SecurityLevel = false;
   \   000009   EE           MOV     A,R6
   \   00000A   2413         ADD     A,#0x13
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   7400         MOV     A,#0x0
   \   000014   F0           MOVX    @DPTR,A
    283          
    284            MAC_MlmeOrphanRsp( (macMlmeOrphanRsp_t *)pData);
   \   000015                ; Setup parameters for call to function MAC_MlmeOrphanRsp
   \   000015   EE           MOV     A,R6
   \   000016   FA           MOV     R2,A
   \   000017   EF           MOV     A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   ??MAC_MlmeOrphanRsp?relay; Banked call to: MAC_MlmeOrphanRsp
    285            return ( ZMacSuccess );
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   7F01         MOV     R7,#0x1
   \   000020   02....       LJMP    ?BANKED_LEAVE_XDATA
    286          }
    287          
    288          /********************************************************************************************************
    289           * @fn      ZMacScanReq
    290           *
    291           * @brief   This function is called to perform a network scan.
    292           *
    293           * @param   param - structure with info need send it.
    294           *
    295           * @return  status
    296           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    297          uint8 ZMacScanReq( ZMacScanReq_t *pData )
   \                     ZMacScanReq:
    298          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    299            _ScanChannels = pData->ScanChannels;
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   12....       LCALL   ?XLOAD_R0123
   \   000010   90....       MOV     DPTR,#_ScanChannels
   \   000013   12....       LCALL   ?XSTORE_R0123
    300          
    301            /* scan in progress */
    302            if (ZMac_ScanBuf != NULL)
   \   000016   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   E8           MOV     A,R0
   \   00001F   49           ORL     A,R1
   \   000020   6005         JZ      ??ZMacScanReq_0
    303            {
    304              return MAC_SCAN_IN_PROGRESS;
   \   000022   79FC         MOV     R1,#-0x4
   \   000024   02....       LJMP    ??ZMacScanReq_1 & 0xFFFF
    305            }
    306          
    307            if (pData->ScanType != ZMAC_ORPHAN_SCAN)
   \                     ??ZMacScanReq_0:
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6403         XRL     A,#0x3
   \   000032   7003         JNZ     $+5
   \   000034   02....       LJMP    ??ZMacScanReq_2 & 0xFFFF
    308            {
    309              /* Allocate memory depends on the scan type */
    310              if (pData->ScanType == ZMAC_ED_SCAN)
   \   000037   8E82         MOV     DPL,R6
   \   000039   8F83         MOV     DPH,R7
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   704D         JNZ     ??ZMacScanReq_3
    311              {
    312                if ((ZMac_ScanBuf = osal_mem_alloc(ZMAC_ED_SCAN_MAXCHANNELS)) == NULL)
   \   000042                ; Setup parameters for call to function osal_mem_alloc
   \   000042   7A1B         MOV     R2,#0x1b
   \   000044   7B00         MOV     R3,#0x0
   \   000046   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000049   8A..         MOV     ?V0,R2
   \   00004B   8B..         MOV     ?V1,R3
   \   00004D   A8..         MOV     R0,?V0
   \   00004F   A9..         MOV     R1,?V1
   \   000051   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000054   E8           MOV     A,R0
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   E9           MOV     A,R1
   \   000058   F0           MOVX    @DPTR,A
   \   000059   E8           MOV     A,R0
   \   00005A   49           ORL     A,R1
   \   00005B   7005         JNZ     ??ZMacScanReq_4
    313                {
    314                  return MAC_NO_RESOURCES;
   \   00005D   791A         MOV     R1,#0x1a
   \   00005F   02....       LJMP    ??ZMacScanReq_1 & 0xFFFF
    315                }
    316                osal_memset(ZMac_ScanBuf, 0, ZMAC_ED_SCAN_MAXCHANNELS);
   \                     ??ZMacScanReq_4:
   \   000062                ; Setup parameters for call to function osal_memset
   \   000062   7C1B         MOV     R4,#0x1b
   \   000064   7D00         MOV     R5,#0x0
   \   000066   7900         MOV     R1,#0x0
   \   000068   90....       MOV     DPTR,#ZMac_ScanBuf
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   FA           MOV     R2,A
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   FB           MOV     R3,A
   \   000070   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
    317                pData->Result.pEnergyDetect = ((uint8*)ZMac_ScanBuf) + MAC_CHAN_11;
   \   000073   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000076   E0           MOVX    A,@DPTR
   \   000077   240B         ADD     A,#0xb
   \   000079   F8           MOV     R0,A
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   3400         ADDC    A,#0x0
   \   00007E   F9           MOV     R1,A
   \   00007F   EE           MOV     A,R6
   \   000080   2413         ADD     A,#0x13
   \   000082   F582         MOV     DPL,A
   \   000084   E4           CLR     A
   \   000085   3F           ADDC    A,R7
   \   000086   F583         MOV     DPH,A
   \   000088   E8           MOV     A,R0
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   E9           MOV     A,R1
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   805B         SJMP    ??ZMacScanReq_2
    318              }
    319              else if (pData->MaxResults > 0)
   \                     ??ZMacScanReq_3:
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   604D         JZ      ??ZMacScanReq_2
    320              {
    321                if ((ZMac_ScanBuf = pData->Result.pPanDescriptor =
    322                     osal_mem_alloc( sizeof( ZMacPanDesc_t ) * pData->MaxResults )) == NULL)
   \   00009D                ; Setup parameters for call to function osal_mem_alloc
   \   00009D   8E82         MOV     DPL,R6
   \   00009F   8F83         MOV     DPH,R7
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   FA           MOV     R2,A
   \   0000AA   7B00         MOV     R3,#0x0
   \   0000AC   EA           MOV     A,R2
   \   0000AD   75F021       MOV     B,#0x21
   \   0000B0   A4           MUL     AB
   \   0000B1   CA           XCH     A,R2
   \   0000B2   A8F0         MOV     R0,B
   \   0000B4   75F000       MOV     B,#0x0
   \   0000B7   A4           MUL     AB
   \   0000B8   28           ADD     A,R0
   \   0000B9   F8           MOV     R0,A
   \   0000BA   75F021       MOV     B,#0x21
   \   0000BD   EB           MOV     A,R3
   \   0000BE   A4           MUL     AB
   \   0000BF   28           ADD     A,R0
   \   0000C0   FB           MOV     R3,A
   \   0000C1   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0000C4   8A..         MOV     ?V0,R2
   \   0000C6   8B..         MOV     ?V1,R3
   \   0000C8   A8..         MOV     R0,?V0
   \   0000CA   A9..         MOV     R1,?V1
   \   0000CC   EE           MOV     A,R6
   \   0000CD   2413         ADD     A,#0x13
   \   0000CF   F582         MOV     DPL,A
   \   0000D1   E4           CLR     A
   \   0000D2   3F           ADDC    A,R7
   \   0000D3   F583         MOV     DPH,A
   \   0000D5   E8           MOV     A,R0
   \   0000D6   F0           MOVX    @DPTR,A
   \   0000D7   A3           INC     DPTR
   \   0000D8   E9           MOV     A,R1
   \   0000D9   F0           MOVX    @DPTR,A
   \   0000DA   90....       MOV     DPTR,#ZMac_ScanBuf
   \   0000DD   E8           MOV     A,R0
   \   0000DE   F0           MOVX    @DPTR,A
   \   0000DF   A3           INC     DPTR
   \   0000E0   E9           MOV     A,R1
   \   0000E1   F0           MOVX    @DPTR,A
   \   0000E2   E8           MOV     A,R0
   \   0000E3   49           ORL     A,R1
   \   0000E4   7004         JNZ     ??ZMacScanReq_2
    323                {
    324                  return MAC_NO_RESOURCES;
   \   0000E6   791A         MOV     R1,#0x1a
   \   0000E8   8022         SJMP    ??ZMacScanReq_1
    325                }
    326              }
    327            }
    328          
    329            /* Right now, set security to zero */
    330            pData->Sec.SecurityLevel = false;
   \                     ??ZMacScanReq_2:
   \   0000EA   EE           MOV     A,R6
   \   0000EB   2410         ADD     A,#0x10
   \   0000ED   F582         MOV     DPL,A
   \   0000EF   E4           CLR     A
   \   0000F0   3F           ADDC    A,R7
   \   0000F1   F583         MOV     DPH,A
   \   0000F3   7400         MOV     A,#0x0
   \   0000F5   F0           MOVX    @DPTR,A
    331          
    332            /* Channel Page */
    333            pData->ChannelPage = 0x00;
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   7400         MOV     A,#0x0
   \   000102   F0           MOVX    @DPTR,A
    334          
    335            MAC_MlmeScanReq ((macMlmeScanReq_t *)pData);
   \   000103                ; Setup parameters for call to function MAC_MlmeScanReq
   \   000103   EE           MOV     A,R6
   \   000104   FA           MOV     R2,A
   \   000105   EF           MOV     A,R7
   \   000106   FB           MOV     R3,A
   \   000107   12....       LCALL   ??MAC_MlmeScanReq?relay; Banked call to: MAC_MlmeScanReq
    336          
    337            return ZMacSuccess;
   \   00010A   7900         MOV     R1,#0x0
   \                     ??ZMacScanReq_1:
   \   00010C   7F02         MOV     R7,#0x2
   \   00010E   02....       LJMP    ?BANKED_LEAVE_XDATA
    338          }
    339          
    340          
    341          /********************************************************************************************************
    342           * @fn      ZMacStartReq
    343           *
    344           * @brief   This function is called to tell the MAC to transmit beacons
    345           *          and become a coordinator.
    346           *
    347           * @param   structure with info need send it.
    348           *
    349           * @return  status
    350           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    351          uint8 ZMacStartReq( ZMacStartReq_t *pData )
   \                     ZMacStartReq:
    352          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    353            uint8 stat;
    354          
    355            // Probably want to keep the receiver on
    356            stat = true;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
    357            MAC_MlmeSetReq( MAC_RX_ON_WHEN_IDLE, &stat );
   \   000017                ; Setup parameters for call to function MAC_MlmeSetReq
   \   000017   AA..         MOV     R2,?XSP + 0
   \   000019   AB..         MOV     R3,?XSP + 1
   \   00001B   7952         MOV     R1,#0x52
   \   00001D   12....       LCALL   ??MAC_MlmeSetReq?relay; Banked call to: MAC_MlmeSetReq
   \   000020   E9           MOV     A,R1
    358          
    359            /* Right now, set security to zero */
    360            pData->RealignSec.SecurityLevel = false;
   \   000021   EE           MOV     A,R6
   \   000022   2415         ADD     A,#0x15
   \   000024   F582         MOV     DPL,A
   \   000026   E4           CLR     A
   \   000027   3F           ADDC    A,R7
   \   000028   F583         MOV     DPH,A
   \   00002A   7400         MOV     A,#0x0
   \   00002C   F0           MOVX    @DPTR,A
    361            pData->BeaconSec.SecurityLevel = false;
   \   00002D   EE           MOV     A,R6
   \   00002E   2420         ADD     A,#0x20
   \   000030   F582         MOV     DPL,A
   \   000032   E4           CLR     A
   \   000033   3F           ADDC    A,R7
   \   000034   F583         MOV     DPH,A
   \   000036   7400         MOV     A,#0x0
   \   000038   F0           MOVX    @DPTR,A
    362          
    363          
    364            MAC_MlmeStartReq((macMlmeStartReq_t *) pData);
   \   000039                ; Setup parameters for call to function MAC_MlmeStartReq
   \   000039   EE           MOV     A,R6
   \   00003A   FA           MOV     R2,A
   \   00003B   EF           MOV     A,R7
   \   00003C   FB           MOV     R3,A
   \   00003D   12....       LCALL   ??MAC_MlmeStartReq?relay; Banked call to: MAC_MlmeStartReq
    365          
    366            // MAC does not issue mlmeStartConfirm(), so we have to
    367            // mlmeStartConfirm( stat );  This needs to be addressed some how
    368          
    369            return ZMacSuccess;
   \   000040   7900         MOV     R1,#0x0
   \   000042   7401         MOV     A,#0x1
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   \   000047   7F01         MOV     R7,#0x1
   \   000049   02....       LJMP    ?BANKED_LEAVE_XDATA
    370          }
    371          
    372          /********************************************************************************************************
    373           * @fn      ZMacSyncReq
    374           *
    375           * @brief   This function is called to request a sync to the current
    376           *          networks beacons.
    377           *
    378           * @param   LogicalChannel -
    379           * @param   TrackBeacon - true/false
    380           *
    381           * @return  status
    382           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    383          uint8 ZMacSyncReq( ZMacSyncReq_t *pData )
   \                     ZMacSyncReq:
    384          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    385            MAC_MlmeSyncReq( (macMlmeSyncReq_t *)pData);
   \   000009                ; Setup parameters for call to function MAC_MlmeSyncReq
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   ??MAC_MlmeSyncReq?relay; Banked call to: MAC_MlmeSyncReq
    386            return ZMacSuccess;
   \   000010   7900         MOV     R1,#0x0
   \   000012   7F01         MOV     R7,#0x1
   \   000014   02....       LJMP    ?BANKED_LEAVE_XDATA
    387          }
    388          
    389          /********************************************************************************************************
    390           * @fn      ZMacPollReq
    391           *
    392           * @brief   This function is called to request MAC data request poll.
    393           *
    394           * @param   coordAddr -
    395           * @param   coordPanId -
    396           * @param   SecurityEnable - true or false.
    397           *
    398           * @return  status
    399           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    400          uint8 ZMacPollReq( ZMacPollReq_t *pData )
   \                     ZMacPollReq:
    401          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    402            /* Right now, set security to zero */
    403            pData->Sec.SecurityLevel = false;
   \   000009   EE           MOV     A,R6
   \   00000A   2413         ADD     A,#0x13
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   7400         MOV     A,#0x0
   \   000014   F0           MOVX    @DPTR,A
    404          
    405            MAC_MlmePollReq ((macMlmePollReq_t *)pData);
   \   000015                ; Setup parameters for call to function MAC_MlmePollReq
   \   000015   EE           MOV     A,R6
   \   000016   FA           MOV     R2,A
   \   000017   EF           MOV     A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   ??MAC_MlmePollReq?relay; Banked call to: MAC_MlmePollReq
    406            return ( ZMacSuccess );
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   7F01         MOV     R7,#0x1
   \   000020   02....       LJMP    ?BANKED_LEAVE_XDATA
    407          }
    408          
    409          /********************************************************************************************************
    410           * @fn      ZMacDataReqSec
    411           *
    412           * @brief   Send a MAC Data Frame packet, calls the passed in function to apply non-MAC security
    413           *          on the MAC data field after the MAC buffer allocation.
    414           *
    415           * @param   pData - structure containing data and where to send it.
    416           * @param   secCB - callback function to apply security, NULL indicates no security
    417           *
    418           * @return  status
    419           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    420          uint8 ZMacDataReqSec( ZMacDataReq_t *pData, applySecCB_t secCB )
   \                     ZMacDataReqSec:
    421          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
   \   000009   8C..         MOV     ?V6,R4
   \   00000B   8D..         MOV     ?V7,R5
    422            macMcpsDataReq_t *pBuf;
    423          
    424            /* Allocate memory */
    425            pBuf = MAC_McpsDataAlloc( pData->msduLength, MAC_SEC_LEVEL_NONE, MAC_KEY_ID_MODE_NONE );
   \   00000D                ; Setup parameters for call to function MAC_McpsDataAlloc
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   7A00         MOV     R2,#0x0
   \   000011   E5..         MOV     A,?V4
   \   000013   241B         ADD     A,#0x1b
   \   000015   F582         MOV     DPL,A
   \   000017   E4           CLR     A
   \   000018   35..         ADDC    A,?V5
   \   00001A   F583         MOV     DPH,A
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   ??MAC_McpsDataAlloc?relay; Banked call to: MAC_McpsDataAlloc
   \   000021   8A..         MOV     ?V0,R2
   \   000023   8B..         MOV     ?V1,R3
   \   000025   AE..         MOV     R6,?V0
   \   000027   AF..         MOV     R7,?V1
    426          
    427            if ( pBuf )
   \   000029   EE           MOV     A,R6
   \   00002A   4F           ORL     A,R7
   \   00002B   7003         JNZ     $+5
   \   00002D   02....       LJMP    ??ZMacDataReqSec_0 & 0xFFFF
    428            {
    429              /* Copy the addresses */
    430              osal_memcpy( &pBuf->mac, pData, sizeof (macDataReq_t) );
   \   000030                ; Setup parameters for call to function osal_memcpy
   \   000030   85....       MOV     ?V0,?V4
   \   000033   85....       MOV     ?V1,?V5
   \   000036   75..00       MOV     ?V2,#0x0
   \   000039   78..         MOV     R0,#?V0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003E   7C10         MOV     R4,#0x10
   \   000040   7D00         MOV     R5,#0x0
   \   000042   EE           MOV     A,R6
   \   000043   2422         ADD     A,#0x22
   \   000045   FA           MOV     R2,A
   \   000046   E4           CLR     A
   \   000047   3F           ADDC    A,R7
   \   000048   FB           MOV     R3,A
   \   000049   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00004C   7403         MOV     A,#0x3
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
    431          
    432              /* Copy data */
    433              pBuf->msdu.len = pData->msduLength;
   \   000051   E5..         MOV     A,?V4
   \   000053   241B         ADD     A,#0x1b
   \   000055   F582         MOV     DPL,A
   \   000057   E4           CLR     A
   \   000058   35..         ADDC    A,?V5
   \   00005A   F583         MOV     DPH,A
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   C0E0         PUSH    A
   \   00005F   8E82         MOV     DPL,R6
   \   000061   8F83         MOV     DPH,R7
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   D0E0         POP     A
   \   000069   F0           MOVX    @DPTR,A
    434              osal_memcpy( pBuf->msdu.p, pData->msdu, pData->msduLength );
   \   00006A                ; Setup parameters for call to function osal_memcpy
   \   00006A   E5..         MOV     A,?V4
   \   00006C   241C         ADD     A,#0x1c
   \   00006E   F582         MOV     DPL,A
   \   000070   E4           CLR     A
   \   000071   35..         ADDC    A,?V5
   \   000073   F583         MOV     DPH,A
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F5..         MOV     ?V0,A
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F5..         MOV     ?V1,A
   \   00007C   75..00       MOV     ?V2,#0x0
   \   00007F   78..         MOV     R0,#?V0
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000084   E5..         MOV     A,?V4
   \   000086   241B         ADD     A,#0x1b
   \   000088   F582         MOV     DPL,A
   \   00008A   E4           CLR     A
   \   00008B   35..         ADDC    A,?V5
   \   00008D   F583         MOV     DPH,A
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   FC           MOV     R4,A
   \   000091   7D00         MOV     R5,#0x0
   \   000093   8E82         MOV     DPL,R6
   \   000095   8F83         MOV     DPH,R7
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   FA           MOV     R2,A
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   FB           MOV     R3,A
   \   00009E   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000A1   7403         MOV     A,#0x3
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
    435              
    436              /* Encrypt in place */
    437              if ( secCB && pBuf->msdu.len && pBuf->msdu.p )
   \   0000A6   E5..         MOV     A,?V6
   \   0000A8   45..         ORL     A,?V7
   \   0000AA   6047         JZ      ??ZMacDataReqSec_1
   \   0000AC   8E82         MOV     DPL,R6
   \   0000AE   8F83         MOV     DPH,R7
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   603C         JZ      ??ZMacDataReqSec_1
   \   0000B7   8E82         MOV     DPL,R6
   \   0000B9   8F83         MOV     DPH,R7
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F8           MOV     R0,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F9           MOV     R1,A
   \   0000C2   E8           MOV     A,R0
   \   0000C3   49           ORL     A,R1
   \   0000C4   602D         JZ      ??ZMacDataReqSec_1
    438              {
    439                if ( secCB( pBuf->msdu.len, pBuf->msdu.p ) != ZSuccess )
   \   0000C6                ; Setup parameters for indirect call
   \   0000C6   8E82         MOV     DPL,R6
   \   0000C8   8F83         MOV     DPH,R7
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   FA           MOV     R2,A
   \   0000CE   A3           INC     DPTR
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   FB           MOV     R3,A
   \   0000D1   8E82         MOV     DPL,R6
   \   0000D3   8F83         MOV     DPH,R7
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   F9           MOV     R1,A
   \   0000DB   85..82       MOV     DPL,?V6
   \   0000DE   85..83       MOV     DPH,?V7
   \   0000E1   12....       LCALL   ?CALL_IND
   \   0000E4   E9           MOV     A,R1
   \   0000E5   600C         JZ      ??ZMacDataReqSec_1
    440                {
    441                  // Deallocate the buffer.  MAC_McpsDataAlloc() calls osal_msg_allocate() and
    442                  // returns the same pointer.
    443                  osal_msg_deallocate( (uint8 *)pBuf );
   \   0000E7                ; Setup parameters for call to function osal_msg_deallocate
   \   0000E7   EE           MOV     A,R6
   \   0000E8   FA           MOV     R2,A
   \   0000E9   EF           MOV     A,R7
   \   0000EA   FB           MOV     R3,A
   \   0000EB   12....       LCALL   ??osal_msg_deallocate?relay; Banked call to: osal_msg_deallocate
   \   0000EE   E9           MOV     A,R1
    444                  
    445                  return ( MAC_NO_RESOURCES );
   \   0000EF   791A         MOV     R1,#0x1a
   \   0000F1   8019         SJMP    ??ZMacDataReqSec_2
    446                }
    447              }
    448          
    449              /* Right now, set MAC security to off */
    450              pBuf->sec.securityLevel = false;
   \                     ??ZMacDataReqSec_1:
   \   0000F3   EE           MOV     A,R6
   \   0000F4   241F         ADD     A,#0x1f
   \   0000F6   F582         MOV     DPL,A
   \   0000F8   E4           CLR     A
   \   0000F9   3F           ADDC    A,R7
   \   0000FA   F583         MOV     DPH,A
   \   0000FC   7400         MOV     A,#0x0
   \   0000FE   F0           MOVX    @DPTR,A
    451          
    452              /* Call Mac Data Request */
    453              MAC_McpsDataReq( pBuf );
   \   0000FF                ; Setup parameters for call to function MAC_McpsDataReq
   \   0000FF   EE           MOV     A,R6
   \   000100   FA           MOV     R2,A
   \   000101   EF           MOV     A,R7
   \   000102   FB           MOV     R3,A
   \   000103   12....       LCALL   ??MAC_McpsDataReq?relay; Banked call to: MAC_McpsDataReq
    454          
    455              return ( ZMacSuccess );
   \   000106   7900         MOV     R1,#0x0
   \   000108   8002         SJMP    ??ZMacDataReqSec_2
    456            }
    457          
    458            return ( MAC_NO_RESOURCES );
   \                     ??ZMacDataReqSec_0:
   \   00010A   791A         MOV     R1,#0x1a
   \                     ??ZMacDataReqSec_2:
   \   00010C   7F08         MOV     R7,#0x8
   \   00010E   02....       LJMP    ?BANKED_LEAVE_XDATA
    459          }
    460          
    461          /********************************************************************************************************
    462           * @fn      ZMacDataReq
    463           *
    464           * @brief   Send a MAC Data Frame packet.
    465           *
    466           * @param   structure containing data and where to send it.
    467           *
    468           * @return  status
    469           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    470          uint8 ZMacDataReq( ZMacDataReq_t *pData )
   \                     ZMacDataReq:
    471          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    472            return ZMacDataReqSec( pData, NULL );
   \   000009                ; Setup parameters for call to function ZMacDataReqSec
   \   000009   7C00         MOV     R4,#0x0
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   EE           MOV     A,R6
   \   00000E   FA           MOV     R2,A
   \   00000F   EF           MOV     A,R7
   \   000010   FB           MOV     R3,A
   \   000011   12....       LCALL   ??ZMacDataReqSec?relay; Banked call to: ZMacDataReqSec
   \   000014   7F01         MOV     R7,#0x1
   \   000016   02....       LJMP    ?BANKED_LEAVE_XDATA
    473          }
    474          
    475          /********************************************************************************************************
    476           * @fn      ZMacPurgeReq
    477           *
    478           * @brief   Purge a MAC Data Frame packet.
    479           *
    480           * @param   MSDU data handle.
    481           *
    482           * @return  status
    483           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    484          uint8 ZMacPurgeReq( byte Handle )
   \                     ZMacPurgeReq:
    485          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    486            MAC_McpsPurgeReq( Handle );
   \   000007                ; Setup parameters for call to function MAC_McpsPurgeReq
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   ??MAC_McpsPurgeReq?relay; Banked call to: MAC_McpsPurgeReq
    487            return ZMacSuccess;
   \   00000C   7900         MOV     R1,#0x0
   \   00000E   7F01         MOV     R7,#0x1
   \   000010   02....       LJMP    ?BANKED_LEAVE_XDATA
    488          }
    489          
    490          /********************************************************************************************************
    491           * @fn      ZMacSrcMatchEnable
    492           *
    493           * @brief   This function is call to enable AUTOPEND and source address matching.
    494           *
    495           * @param   addressType - address type that the application uses
    496           *                        SADDR_MODE_SHORT or SADDR_MODE_EXT.
    497           *          numEntries  - number of source address table entries to be used
    498           *
    499           * @return  status
    500           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    501          ZMacStatus_t ZMacSrcMatchEnable (uint8 addrType, uint8 numEntries)
   \                     ZMacSrcMatchEnable:
    502          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
    503            return (MAC_SrcMatchEnable(addrType, numEntries));
   \   000009                ; Setup parameters for call to function MAC_SrcMatchEnable
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??MAC_SrcMatchEnable?relay; Banked call to: MAC_SrcMatchEnable
   \   000010   7F01         MOV     R7,#0x1
   \   000012   02....       LJMP    ?BANKED_LEAVE_XDATA
    504          }
    505          
    506          /********************************************************************************************************
    507           * @fn      ZMacSrcMatchAddEntry
    508           *
    509           * @brief   This function is called to add a short or extended address to source address table.
    510           *
    511           * @param   addr - a pointer to sAddr_t which contains addrMode
    512           *                     and a union of a short 16-bit MAC address or an extended
    513           *                     64-bit MAC address to be added to the source address table.
    514           *          panID - the device PAN ID. It is only used when the addr is
    515           *                      using short address
    516           *
    517           * @return  status
    518           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    519          ZMacStatus_t ZMacSrcMatchAddEntry (zAddrType_t *addr, uint16 panID)
   \                     ZMacSrcMatchAddEntry:
    520          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    521            return (MAC_SrcMatchAddEntry ((sAddr_t*)addr, panID));
   \   00000D                ; Setup parameters for call to function MAC_SrcMatchAddEntry
   \   00000D   EE           MOV     A,R6
   \   00000E   FC           MOV     R4,A
   \   00000F   EF           MOV     A,R7
   \   000010   FD           MOV     R5,A
   \   000011   AA..         MOV     R2,?V0
   \   000013   AB..         MOV     R3,?V1
   \   000015   12....       LCALL   ??MAC_SrcMatchAddEntry?relay; Banked call to: MAC_SrcMatchAddEntry
   \   000018   7F02         MOV     R7,#0x2
   \   00001A   02....       LJMP    ?BANKED_LEAVE_XDATA
    522          }
    523          
    524          /********************************************************************************************************
    525           * @fn      ZMacSrcMatchDeleteEntry
    526           *
    527           * @brief   This function is called to delete a short or extended address from source address table.
    528           *
    529           * @param   addr - a pointer to sAddr_t which contains addrMode
    530           *                     and a union of a short 16-bit MAC address or an extended
    531           *                     64-bit MAC address to be added to the source address table.
    532           *          panID - the device PAN ID. It is only used when the addr is
    533           *                      using short address
    534           *
    535           * @return  status
    536           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    537          ZMacStatus_t ZMacSrcMatchDeleteEntry (zAddrType_t *addr, uint16 panID)
   \                     ZMacSrcMatchDeleteEntry:
    538          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    539            return (MAC_SrcMatchDeleteEntry ((sAddr_t*)addr, panID));
   \   00000D                ; Setup parameters for call to function MAC_SrcMatchDeleteEntry
   \   00000D   EE           MOV     A,R6
   \   00000E   FC           MOV     R4,A
   \   00000F   EF           MOV     A,R7
   \   000010   FD           MOV     R5,A
   \   000011   AA..         MOV     R2,?V0
   \   000013   AB..         MOV     R3,?V1
   \   000015   12....       LCALL   ??MAC_SrcMatchDeleteEntry?relay; Banked call to: MAC_SrcMatchDeleteEntry
   \   000018   7F02         MOV     R7,#0x2
   \   00001A   02....       LJMP    ?BANKED_LEAVE_XDATA
    540          }
    541          
    542          /********************************************************************************************************
    543           * @fn       ZMacSrcMatchAckAllPending
    544           *
    545           * @brief    Enabled/disable acknowledging all packets with pending bit set
    546           *           It is normally enabled when adding new entries to
    547           *           the source address table fails due to the table is full, or
    548           *           disabled when more entries are deleted and the table has
    549           *           empty slots.
    550           *
    551           * @param    option - true (acknowledging all packets with pending field set)
    552           *                    false (acknowledging all packets with pending field cleared)
    553           *
    554           * @return   status
    555           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    556          ZMacStatus_t ZMacSrcMatchAckAllPending (uint8 option)
   \                     ZMacSrcMatchAckAllPending:
    557          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    558            MAC_SrcMatchAckAllPending (option);
   \   000007                ; Setup parameters for call to function MAC_SrcMatchAckAllPending
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   ??MAC_SrcMatchAckAllPending?relay; Banked call to: MAC_SrcMatchAckAllPending
    559          
    560            return ZMacSuccess;
   \   00000C   7900         MOV     R1,#0x0
   \   00000E   7F01         MOV     R7,#0x1
   \   000010   02....       LJMP    ?BANKED_LEAVE_XDATA
    561          }
    562          
    563          /********************************************************************************************************
    564           * @fn       ZMacSrcMatchCheckAllPending
    565           *
    566           * @brief    This function is called to check if acknowledging all packets with pending bit set is enabled.
    567           *
    568           * @param    none
    569           *
    570           * @return   status
    571           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    572          ZMacStatus_t ZMacSrcMatchCheckAllPending (void)
   \                     ZMacSrcMatchCheckAllPending:
    573          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    574            return (MAC_SrcMatchCheckAllPending ());
   \   000004                ; Setup parameters for call to function MAC_SrcMatchCheckAllPending
   \   000004   12....       LCALL   ??MAC_SrcMatchCheckAllPending?relay; Banked call to: MAC_SrcMatchCheckAllPending
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    575          }
    576          
    577          /********************************************************************************************************
    578           * @fn      - ZMACPwrOnReq
    579           *
    580           * @brief   - This function requests the MAC to power on the radio hardware
    581           *            and wake up.  When the power on procedure is complete the MAC
    582           *            will send a MAC_PWR_ON_CNF to the application.
    583           *
    584           * @input   - None.
    585           *
    586           * @output  - None.
    587           *
    588           * @return  - None.
    589           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    590          void ZMacPwrOnReq ( void )
   \                     ZMacPwrOnReq:
    591          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    592            MAC_PwrOnReq();
   \   000004                ; Setup parameters for call to function MAC_PwrOnReq
   \   000004   12....       LCALL   ??MAC_PwrOnReq?relay ; Banked call to: MAC_PwrOnReq
    593          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    594          
    595          /********************************************************************************************************
    596           * @fn          MAC_PwrMode
    597           *
    598           * @brief       This function returns the current power mode of the MAC.
    599           *
    600           * input parameters
    601           *
    602           * None.
    603           *
    604           * output parameters
    605           *
    606           * None.
    607           *
    608           * @return      The current power mode of the MAC.
    609           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    610          uint8 ZMac_PwrMode(void)
   \                     ZMac_PwrMode:
    611          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    612            return (MAC_PwrMode());
   \   000004                ; Setup parameters for call to function MAC_PwrMode
   \   000004   12....       LCALL   ??MAC_PwrMode?relay  ; Banked call to: MAC_PwrMode
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    613          }
    614          
    615          /********************************************************************************************************
    616           * @fn      ZMacSetTransmitPower
    617           *
    618           * @brief   Set the transmitter power according to the level setting param.
    619           *
    620           * @param   Valid power level setting as defined in ZMAC.h.
    621           *
    622           * @return  ZMacSuccess if PHY_TRANSMIT_POWER found or ZMacUnsupportedAttribute.
    623           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    624          uint8 ZMacSetTransmitPower( ZMacTransmitPower_t level )
   \                     ZMacSetTransmitPower:
    625          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   C0E0         PUSH    A
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   D0E0         POP     A
   \   000014   F0           MOVX    @DPTR,A
    626            return MAC_MlmeSetReq( ZMacPhyTransmitPowerSigned, &level );
   \   000015                ; Setup parameters for call to function MAC_MlmeSetReq
   \   000015   AA..         MOV     R2,?XSP + 0
   \   000017   AB..         MOV     R3,?XSP + 1
   \   000019   79E5         MOV     R1,#-0x1b
   \   00001B   12....       LCALL   ??MAC_MlmeSetReq?relay; Banked call to: MAC_MlmeSetReq
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?DEALLOC_XSTACK8
   \   000023   D083         POP     DPH
   \   000025   D082         POP     DPL
   \   000027   02....       LJMP    ?BRET
    627          }
    628          
    629          /********************************************************************************************************
    630           * @fn      ZMacSendNoData
    631           *
    632           * @brief   This function sends an empty msg
    633           *
    634           * @param   DstAddr   - destination short address
    635           *          DstPANId  - destination pan id
    636           *
    637           * @return  None
    638           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    639          void ZMacSendNoData ( uint16 DstAddr, uint16 DstPANId )
   \                     ZMacSendNoData:
    640          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
    641            macMcpsDataReq_t *pBuf;
    642          
    643            /* Allocate memory */
    644            pBuf = MAC_McpsDataAlloc(0, MAC_SEC_LEVEL_NONE, MAC_KEY_ID_MODE_NONE);
   \   00000D                ; Setup parameters for call to function MAC_McpsDataAlloc
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   7A00         MOV     R2,#0x0
   \   000011   7900         MOV     R1,#0x0
   \   000013   12....       LCALL   ??MAC_McpsDataAlloc?relay; Banked call to: MAC_McpsDataAlloc
   \   000016   8A..         MOV     ?V4,R2
   \   000018   8B..         MOV     ?V5,R3
   \   00001A   AE..         MOV     R6,?V4
   \   00001C   AF..         MOV     R7,?V5
    645          
    646            if (pBuf)
   \   00001E   EE           MOV     A,R6
   \   00001F   4F           ORL     A,R7
   \   000020   6063         JZ      ??ZMacSendNoData_0
    647            {
    648              /* Fill in src information */
    649              pBuf->mac.srcAddrMode              = SADDR_MODE_SHORT;
   \   000022   EE           MOV     A,R6
   \   000023   242D         ADD     A,#0x2d
   \   000025   F582         MOV     DPL,A
   \   000027   E4           CLR     A
   \   000028   3F           ADDC    A,R7
   \   000029   F583         MOV     DPH,A
   \   00002B   7402         MOV     A,#0x2
   \   00002D   F0           MOVX    @DPTR,A
    650          
    651              /* Fill in dst information */
    652              pBuf->mac.dstAddr.addr.shortAddr   = DstAddr;
   \   00002E   EE           MOV     A,R6
   \   00002F   2422         ADD     A,#0x22
   \   000031   F582         MOV     DPL,A
   \   000033   E4           CLR     A
   \   000034   3F           ADDC    A,R7
   \   000035   F583         MOV     DPH,A
   \   000037   E5..         MOV     A,?V2
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   E5..         MOV     A,?V3
   \   00003D   F0           MOVX    @DPTR,A
    653              pBuf->mac.dstAddr.addrMode         = SADDR_MODE_SHORT;
   \   00003E   EE           MOV     A,R6
   \   00003F   242A         ADD     A,#0x2a
   \   000041   F582         MOV     DPL,A
   \   000043   E4           CLR     A
   \   000044   3F           ADDC    A,R7
   \   000045   F583         MOV     DPH,A
   \   000047   7402         MOV     A,#0x2
   \   000049   F0           MOVX    @DPTR,A
    654              pBuf->mac.dstPanId                 = DstPANId;
   \   00004A   EE           MOV     A,R6
   \   00004B   242B         ADD     A,#0x2b
   \   00004D   F582         MOV     DPL,A
   \   00004F   E4           CLR     A
   \   000050   3F           ADDC    A,R7
   \   000051   F583         MOV     DPH,A
   \   000053   E5..         MOV     A,?V0
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   E5..         MOV     A,?V1
   \   000059   F0           MOVX    @DPTR,A
    655          
    656              /* Misc information */
    657              pBuf->mac.msduHandle               = 0;
   \   00005A   EE           MOV     A,R6
   \   00005B   242E         ADD     A,#0x2e
   \   00005D   F582         MOV     DPL,A
   \   00005F   E4           CLR     A
   \   000060   3F           ADDC    A,R7
   \   000061   F583         MOV     DPH,A
   \   000063   7400         MOV     A,#0x0
   \   000065   F0           MOVX    @DPTR,A
    658              pBuf->mac.txOptions                = ZMAC_TXOPTION_ACK | ZMAC_TXOPTION_NO_RETRANS | ZMAC_TXOPTION_NO_CNF;
   \   000066   EE           MOV     A,R6
   \   000067   242F         ADD     A,#0x2f
   \   000069   F582         MOV     DPL,A
   \   00006B   E4           CLR     A
   \   00006C   3F           ADDC    A,R7
   \   00006D   F583         MOV     DPH,A
   \   00006F   7431         MOV     A,#0x31
   \   000071   F0           MOVX    @DPTR,A
    659          
    660              /* Right now, set security to zero */
    661              pBuf->sec.securityLevel = false;
   \   000072   EE           MOV     A,R6
   \   000073   241F         ADD     A,#0x1f
   \   000075   F582         MOV     DPL,A
   \   000077   E4           CLR     A
   \   000078   3F           ADDC    A,R7
   \   000079   F583         MOV     DPH,A
   \   00007B   7400         MOV     A,#0x0
   \   00007D   F0           MOVX    @DPTR,A
    662          
    663              /* Call Mac Data Request */
    664              MAC_McpsDataReq(pBuf);
   \   00007E                ; Setup parameters for call to function MAC_McpsDataReq
   \   00007E   EE           MOV     A,R6
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   FB           MOV     R3,A
   \   000082   12....       LCALL   ??MAC_McpsDataReq?relay; Banked call to: MAC_McpsDataReq
    665            }
    666          
    667          }
   \                     ??ZMacSendNoData_0:
   \   000085   7F06         MOV     R7,#0x6
   \   000087   02....       LJMP    ?BANKED_LEAVE_XDATA
    668          
    669          /********************************************************************************************************
    670           * @fn      ZMacStateIdle
    671           *
    672           * @brief   This function returns true if the MAC state is idle.
    673           *
    674           * @param   none
    675           *
    676           * @return  TRUE if the MAC state is idle, FALSE otherwise.
    677           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    678          uint8 ZMacStateIdle( void )
   \                     ZMacStateIdle:
    679          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    680            return macStateIdle();
   \   000004                ; Setup parameters for call to function macStateIdle
   \   000004   12....       LCALL   ??macStateIdle?relay ; Banked call to: macStateIdle
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    681          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacGetReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacGetReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacSetReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSetReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacAssociateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacAssociateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacAssociateRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacAssociateRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacDisassociateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacDisassociateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacOrphanRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacOrphanRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacScanReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacScanReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacStartReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacStartReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacSyncReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSyncReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacPollReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacPollReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacDataReqSec?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacDataReqSec

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacDataReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacDataReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacPurgeReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacPurgeReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacSrcMatchEnable?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSrcMatchEnable

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacSrcMatchAddEntry?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSrcMatchAddEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacSrcMatchDeleteEntry?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSrcMatchDeleteEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacSrcMatchAckAllPending?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSrcMatchAckAllPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacSrcMatchCheckAllPending?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSrcMatchCheckAllPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacPwrOnReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacPwrOnReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMac_PwrMode?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMac_PwrMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacSetTransmitPower?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSetTransmitPower

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacSendNoData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSendNoData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacStateIdle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacStateIdle

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   ZMacAssociateReq
        0      9   -> MAC_MlmeAssociateReq
      0      9   ZMacAssociateRsp
        0      9   -> MAC_MlmeAssociateRsp
      0      9   ZMacDataReq
        0      9   -> ZMacDataReqSec
      1     28   ZMacDataReqSec
        0     16   -> MAC_McpsDataAlloc
        0     16   -> MAC_McpsDataReq
        0     19   -> osal_memcpy
        0     16   -> osal_msg_deallocate
      0      9   ZMacDisassociateReq
        0      9   -> MAC_MlmeDisassociateReq
      0      9   ZMacGetReq
        0      9   -> MAC_MlmeGetReq
        0      9   -> sAddrExtCpy
      0      9   ZMacInit
        0      9   -> MAC_Init
        0      9   -> MAC_InitCoord
        0      9   -> MAC_InitDevice
        0      9   -> ZMacReset
        0      9   -> osal_int_disable
      0      9   ZMacOrphanRsp
        0      9   -> MAC_MlmeOrphanRsp
      0      9   ZMacPollReq
        0      9   -> MAC_MlmePollReq
      0      9   ZMacPurgeReq
        0      9   -> MAC_McpsPurgeReq
      2      0   ZMacPwrOnReq
        2      0   -> MAC_PwrOnReq
      0     19   ZMacReset
        0     10   -> MAC_MlmeResetReq
        0     10   -> MAC_MlmeSetReq
        0     10   -> osal_mem_free
      0     10   ZMacScanReq
        0     10   -> MAC_MlmeScanReq
        0     10   -> osal_mem_alloc
        0     10   -> osal_memset
      0     14   ZMacSendNoData
        0     14   -> MAC_McpsDataAlloc
        0     14   -> MAC_McpsDataReq
      0      9   ZMacSetReq
        0      9   -> MAC_MlmeSetReq
        0      9   -> sAddrExtCpy
      3      1   ZMacSetTransmitPower
        2      1   -> MAC_MlmeSetReq
      0      9   ZMacSrcMatchAckAllPending
        0      9   -> MAC_SrcMatchAckAllPending
      0     10   ZMacSrcMatchAddEntry
        0     10   -> MAC_SrcMatchAddEntry
      2      0   ZMacSrcMatchCheckAllPending
        2      0   -> MAC_SrcMatchCheckAllPending
      0     10   ZMacSrcMatchDeleteEntry
        0     10   -> MAC_SrcMatchDeleteEntry
      0      9   ZMacSrcMatchEnable
        0      9   -> MAC_SrcMatchEnable
      0     10   ZMacStartReq
        0     10   -> MAC_MlmeSetReq
        0     10   -> MAC_MlmeStartReq
      2      0   ZMacStateIdle
        2      0   -> macStateIdle
      0      9   ZMacSyncReq
        0      9   -> MAC_MlmeSyncReq
      2      0   ZMac_PwrMode
        2      0   -> MAC_PwrMode


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??ZMacAssociateReq?relay
       6  ??ZMacAssociateRsp?relay
       6  ??ZMacDataReq?relay
       6  ??ZMacDataReqSec?relay
       6  ??ZMacDisassociateReq?relay
       6  ??ZMacGetReq?relay
       6  ??ZMacInit?relay
       6  ??ZMacOrphanRsp?relay
       6  ??ZMacPollReq?relay
       6  ??ZMacPurgeReq?relay
       6  ??ZMacPwrOnReq?relay
       6  ??ZMacReset?relay
       6  ??ZMacScanReq?relay
       6  ??ZMacSendNoData?relay
       6  ??ZMacSetReq?relay
       6  ??ZMacSetTransmitPower?relay
       6  ??ZMacSrcMatchAckAllPending?relay
       6  ??ZMacSrcMatchAddEntry?relay
       6  ??ZMacSrcMatchCheckAllPending?relay
       6  ??ZMacSrcMatchDeleteEntry?relay
       6  ??ZMacSrcMatchEnable?relay
       6  ??ZMacStartReq?relay
       6  ??ZMacStateIdle?relay
       6  ??ZMacSyncReq?relay
       6  ??ZMac_PwrMode?relay
      35  ZMacAssociateReq
      33  ZMacAssociateRsp
      25  ZMacDataReq
     273  ZMacDataReqSec
      35  ZMacDisassociateReq
      46  ZMacGetReq
      34  ZMacInit
      35  ZMacOrphanRsp
      35  ZMacPollReq
      19  ZMacPurgeReq
      14  ZMacPwrOnReq
      93  ZMacReset
     273  ZMacScanReq
     138  ZMacSendNoData
      42  ZMacSetReq
      42  ZMacSetTransmitPower
      19  ZMacSrcMatchAckAllPending
      29  ZMacSrcMatchAddEntry
      14  ZMacSrcMatchCheckAllPending
      29  ZMacSrcMatchDeleteEntry
      21  ZMacSrcMatchEnable
      76  ZMacStartReq
      14  ZMacStateIdle
      23  ZMacSyncReq
      14  ZMac_PwrMode
       2  ZMac_ScanBuf
       4  _ScanChannels

 
 1 411 bytes in segment BANKED_CODE
   150 bytes in segment BANK_RELAYS
     6 bytes in segment XDATA_Z
 
 1 561 bytes of CODE  memory
     6 bytes of XDATA memory

Errors: none
Warnings: none
