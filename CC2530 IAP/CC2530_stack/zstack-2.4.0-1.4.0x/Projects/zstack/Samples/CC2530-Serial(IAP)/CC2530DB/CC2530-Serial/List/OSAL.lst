###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:42
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\osal\common\OSAL.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\osal\common\OSAL.c" -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D XLAB
#        -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\OSAL.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\OSAL.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\osal\common\OSAL.c
      1          /**************************************************************************************************
      2            Filename:       OSAL.c
      3            Revised:        $Date: 2010-09-20 14:09:47 -0700 (Mon, 20 Sep 2010) $
      4            Revision:       $Revision: 23845 $
      5          
      6            Description:    This API allows the software components in the Z-stack to be written
      7                            independently of the specifics of the operating system, kernel or tasking
      8                            environment (including control loops or connect-to-interrupt systems).
      9          
     10          
     11            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License").  You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product.  Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45          
     46          #include <string.h>
     47          
     48          #include "comdef.h"
     49          #include "OSAL.h"
     50          #include "OSAL_Tasks.h"
     51          #include "OSAL_Memory.h"
     52          #include "OSAL_PwrMgr.h"
     53          #include "OSAL_Clock.h"
     54          
     55          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     56          
     57          /* HAL */
     58          #include "hal_drivers.h"
     59          
     60          #ifdef IAR_ARMCM3_LM
     61            #include "FreeRTOSConfig.h"
     62            #include "osal_task.h"
     63          #endif
     64          
     65          /*********************************************************************
     66           * MACROS
     67           */
     68          
     69          /*********************************************************************
     70           * CONSTANTS
     71           */
     72          
     73          /*********************************************************************
     74           * TYPEDEFS
     75           */
     76          
     77          /*********************************************************************
     78           * GLOBAL VARIABLES
     79           */
     80          
     81          // Message Pool Definitions

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     82          osal_msg_q_t osal_qHead;
   \                     osal_qHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     83          
     84          /*********************************************************************
     85           * EXTERNAL VARIABLES
     86           */
     87          
     88          /*********************************************************************
     89           * EXTERNAL FUNCTIONS
     90           */
     91          
     92          /*********************************************************************
     93           * LOCAL VARIABLES
     94           */
     95          
     96          /*********************************************************************
     97           * LOCAL FUNCTION PROTOTYPES
     98           */
     99          
    100          /*********************************************************************
    101           * HELPER FUNCTIONS
    102           */
    103          /* very ugly stub so Keil can compile */
    104          #ifdef __KEIL__
    105          char *  itoa ( int value, char * buffer, int radix )
    106          {
    107            return(buffer);
    108          }
    109          #endif
    110          
    111          /*********************************************************************
    112           * @fn      osal_strlen
    113           *
    114           * @brief
    115           *
    116           *   Calculates the length of a string.  The string must be null
    117           *   terminated.
    118           *
    119           * @param   char *pString - pointer to text string
    120           *
    121           * @return  int - number of characters
    122           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    123          int osal_strlen( char *pString )
   \                     osal_strlen:
    124          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    125            return (int)( strlen( pString ) );
   \   000009                ; Setup parameters for call to function strlen
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   ??strlen?relay       ; Banked call to: strlen
   \   000010   7F01         MOV     R7,#0x1
   \   000012   02....       LJMP    ?BANKED_LEAVE_XDATA
    126          }
    127          
    128          /*********************************************************************
    129           * @fn      osal_memcpy
    130           *
    131           * @brief
    132           *
    133           *   Generic memory copy.
    134           *
    135           *   Note: This function differs from the standard memcpy(), since
    136           *         it returns the pointer to the next destination uint8. The
    137           *         standard memcpy() returns the original destination address.
    138           *
    139           * @param   dst - destination address
    140           * @param   src - source address
    141           * @param   len - number of bytes to copy
    142           *
    143           * @return  pointer to end of destination buffer
    144           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    145          void *osal_memcpy( void *dst, const void GENERIC *src, unsigned int len )
   \                     osal_memcpy:
    146          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V1,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V2,A
    147            uint8 *pDst;
    148            const uint8 GENERIC *pSrc;
    149          
    150            pSrc = src;
   \   00001D   AC..         MOV     R4,?V0
   \   00001F   AD..         MOV     R5,?V1
   \   000021   AE..         MOV     R6,?V2
    151            pDst = dst;
   \   000023   85..82       MOV     DPL,?V6
   \   000026   85..83       MOV     DPH,?V7
    152          
    153            while ( len-- )
   \                     ??osal_memcpy_0:
   \   000029   A8..         MOV     R0,?V4
   \   00002B   A9..         MOV     R1,?V5
   \   00002D   E8           MOV     A,R0
   \   00002E   24FF         ADD     A,#-0x1
   \   000030   F5..         MOV     ?V4,A
   \   000032   E9           MOV     A,R1
   \   000033   34FF         ADDC    A,#-0x1
   \   000035   F5..         MOV     ?V5,A
   \   000037   E8           MOV     A,R0
   \   000038   49           ORL     A,R1
   \   000039   6019         JZ      ??osal_memcpy_1
    154              *pDst++ = *pSrc++;
   \   00003B   EC           MOV     A,R4
   \   00003C   F9           MOV     R1,A
   \   00003D   ED           MOV     A,R5
   \   00003E   FA           MOV     R2,A
   \   00003F   EE           MOV     A,R6
   \   000040   FB           MOV     R3,A
   \   000041   12....       LCALL   ?C_GPTR_LOAD
   \   000044   C0E0         PUSH    A
   \   000046   D0E0         POP     A
   \   000048   F0           MOVX    @DPTR,A
   \   000049   EC           MOV     A,R4
   \   00004A   2401         ADD     A,#0x1
   \   00004C   FC           MOV     R4,A
   \   00004D   ED           MOV     A,R5
   \   00004E   3400         ADDC    A,#0x0
   \   000050   FD           MOV     R5,A
   \   000051   A3           INC     DPTR
   \   000052   80D5         SJMP    ??osal_memcpy_0
    155          
    156            return ( pDst );
   \                     ??osal_memcpy_1:
   \   000054   AA82         MOV     R2,DPL
   \   000056   AB83         MOV     R3,DPH
   \   000058   7F08         MOV     R7,#0x8
   \   00005A   02....       LJMP    ?BANKED_LEAVE_XDATA
    157          }
    158          
    159          /*********************************************************************
    160           * @fn      osal_revmemcpy
    161           *
    162           * @brief   Generic reverse memory copy.  Starts at the end of the
    163           *   source buffer, by taking the source address pointer and moving
    164           *   pointer ahead "len" bytes, then decrementing the pointer.
    165           *
    166           *   Note: This function differs from the standard memcpy(), since
    167           *         it returns the pointer to the next destination uint8. The
    168           *         standard memcpy() returns the original destination address.
    169           *
    170           * @param   dst - destination address
    171           * @param   src - source address
    172           * @param   len - number of bytes to copy
    173           *
    174           * @return  pointer to end of destination buffer
    175           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    176          void *osal_revmemcpy( void *dst, const void GENERIC *src, unsigned int len )
   \                     osal_revmemcpy:
    177          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V1,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V2,A
    178            uint8 *pDst;
    179            const uint8 GENERIC *pSrc;
    180          
    181            pSrc = src;
   \   00001D   AC..         MOV     R4,?V0
   \   00001F   AD..         MOV     R5,?V1
   \   000021   AE..         MOV     R6,?V2
    182            pSrc += (len-1);
   \   000023   EC           MOV     A,R4
   \   000024   25..         ADD     A,?V4
   \   000026   FC           MOV     R4,A
   \   000027   ED           MOV     A,R5
   \   000028   35..         ADDC    A,?V5
   \   00002A   FD           MOV     R5,A
   \   00002B   EC           MOV     A,R4
   \   00002C   24FF         ADD     A,#-0x1
   \   00002E   FC           MOV     R4,A
   \   00002F   ED           MOV     A,R5
   \   000030   34FF         ADDC    A,#-0x1
   \   000032   FD           MOV     R5,A
    183            pDst = dst;
   \   000033   85..82       MOV     DPL,?V6
   \   000036   85..83       MOV     DPH,?V7
    184          
    185            while ( len-- )
   \                     ??osal_revmemcpy_0:
   \   000039   A8..         MOV     R0,?V4
   \   00003B   A9..         MOV     R1,?V5
   \   00003D   E8           MOV     A,R0
   \   00003E   24FF         ADD     A,#-0x1
   \   000040   F5..         MOV     ?V4,A
   \   000042   E9           MOV     A,R1
   \   000043   34FF         ADDC    A,#-0x1
   \   000045   F5..         MOV     ?V5,A
   \   000047   E8           MOV     A,R0
   \   000048   49           ORL     A,R1
   \   000049   6019         JZ      ??osal_revmemcpy_1
    186              *pDst++ = *pSrc--;
   \   00004B   EC           MOV     A,R4
   \   00004C   F9           MOV     R1,A
   \   00004D   ED           MOV     A,R5
   \   00004E   FA           MOV     R2,A
   \   00004F   EE           MOV     A,R6
   \   000050   FB           MOV     R3,A
   \   000051   12....       LCALL   ?C_GPTR_LOAD
   \   000054   C0E0         PUSH    A
   \   000056   D0E0         POP     A
   \   000058   F0           MOVX    @DPTR,A
   \   000059   EC           MOV     A,R4
   \   00005A   24FF         ADD     A,#-0x1
   \   00005C   FC           MOV     R4,A
   \   00005D   ED           MOV     A,R5
   \   00005E   34FF         ADDC    A,#-0x1
   \   000060   FD           MOV     R5,A
   \   000061   A3           INC     DPTR
   \   000062   80D5         SJMP    ??osal_revmemcpy_0
    187          
    188            return ( pDst );
   \                     ??osal_revmemcpy_1:
   \   000064   AA82         MOV     R2,DPL
   \   000066   AB83         MOV     R3,DPH
   \   000068   7F08         MOV     R7,#0x8
   \   00006A   02....       LJMP    ?BANKED_LEAVE_XDATA
    189          }
    190          
    191          /*********************************************************************
    192           * @fn      osal_memdup
    193           *
    194           * @brief   Allocates a buffer [with osal_mem_alloc()] and copies
    195           *          the src buffer into the newly allocated space.
    196           *
    197           * @param   src - source address
    198           * @param   len - number of bytes to copy
    199           *
    200           * @return  pointer to the new allocated buffer, or NULL if
    201           *          allocation problem.
    202           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    203          void *osal_memdup( const void GENERIC *src, unsigned int len )
   \                     osal_memdup:
    204          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V1,R2
   \   000009   8B..         MOV     ?V2,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
    205            uint8 *pDst;
    206          
    207            pDst = osal_mem_alloc( len );
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   EE           MOV     A,R6
   \   000010   FA           MOV     R2,A
   \   000011   EF           MOV     A,R7
   \   000012   FB           MOV     R3,A
   \   000013   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000016   8A..         MOV     ?V4,R2
   \   000018   8B..         MOV     ?V5,R3
   \   00001A   85....       MOV     ?V6,?V4
   \   00001D   85....       MOV     ?V7,?V5
    208            if ( pDst )
   \   000020   E5..         MOV     A,?V6
   \   000022   45..         ORL     A,?V7
   \   000024   601F         JZ      ??osal_memdup_0
    209            {
    210              VOID osal_memcpy( pDst, src, len );
   \   000026                ; Setup parameters for call to function osal_memcpy
   \   000026   78..         MOV     R0,#?V0
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00002B   EE           MOV     A,R6
   \   00002C   FC           MOV     R4,A
   \   00002D   EF           MOV     A,R7
   \   00002E   FD           MOV     R5,A
   \   00002F   AA..         MOV     R2,?V6
   \   000031   AB..         MOV     R3,?V7
   \   000033   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000036   7403         MOV     A,#0x3
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003B   8A..         MOV     ?V4,R2
   \   00003D   8B..         MOV     ?V5,R3
   \   00003F   85..82       MOV     DPL,?V4
   \   000042   85..83       MOV     DPH,?V5
    211            }
    212          
    213            return ( (void *)pDst );
   \                     ??osal_memdup_0:
   \   000045   AA..         MOV     R2,?V6
   \   000047   AB..         MOV     R3,?V7
   \   000049   7F08         MOV     R7,#0x8
   \   00004B   02....       LJMP    ?BANKED_LEAVE_XDATA
    214          }
    215          
    216          /*********************************************************************
    217           * @fn      osal_memcmp
    218           *
    219           * @brief
    220           *
    221           *   Generic memory compare.
    222           *
    223           * @param   src1 - source 1 addrexx
    224           * @param   src2 - source 2 address
    225           * @param   len - number of bytes to compare
    226           *
    227           * @return  TRUE - same, FALSE - different
    228           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    229          uint8 osal_memcmp( const void GENERIC *src1, const void GENERIC *src2, unsigned int len )
   \                     osal_memcmp:
    230          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7403         MOV     A,#0x3
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E9           MOV     A,R1
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EA           MOV     A,R2
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   EB           MOV     A,R3
   \   000016   F0           MOVX    @DPTR,A
   \   000017   8C..         MOV     ?V4,R4
   \   000019   8D..         MOV     ?V5,R5
    231            const uint8 GENERIC *pSrc1;
    232            const uint8 GENERIC *pSrc2;
    233          
    234            pSrc1 = src1;
   \   00001B   7403         MOV     A,#0x3
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V1,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V2,A
    235            pSrc2 = src2;
   \   00002B   7414         MOV     A,#0x14
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   E0           MOVX    A,@DPTR
   \   000031   FC           MOV     R4,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FD           MOV     R5,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   FE           MOV     R6,A
    236          
    237            while ( len-- )
   \                     ??osal_memcmp_0:
   \   000038   A8..         MOV     R0,?V4
   \   00003A   A9..         MOV     R1,?V5
   \   00003C   E8           MOV     A,R0
   \   00003D   24FF         ADD     A,#-0x1
   \   00003F   F5..         MOV     ?V4,A
   \   000041   E9           MOV     A,R1
   \   000042   34FF         ADDC    A,#-0x1
   \   000044   F5..         MOV     ?V5,A
   \   000046   E8           MOV     A,R0
   \   000047   49           ORL     A,R1
   \   000048   6058         JZ      ??osal_memcmp_1
    238            {
    239              if( *pSrc1++ != *pSrc2++ )
   \   00004A   A9..         MOV     R1,?V0
   \   00004C   AA..         MOV     R2,?V1
   \   00004E   AB..         MOV     R3,?V2
   \   000050   89..         MOV     ?V0,R1
   \   000052   8A..         MOV     ?V1,R2
   \   000054   8B..         MOV     ?V2,R3
   \   000056   E5..         MOV     A,?V0
   \   000058   2401         ADD     A,#0x1
   \   00005A   F5..         MOV     ?V0,A
   \   00005C   E5..         MOV     A,?V1
   \   00005E   3400         ADDC    A,#0x0
   \   000060   F5..         MOV     ?V1,A
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   EC           MOV     A,R4
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   ED           MOV     A,R5
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   EE           MOV     A,R6
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   85..82       MOV     DPL,?XSP + 0
   \   000073   85..83       MOV     DPH,?XSP + 1
   \   000076   E0           MOVX    A,@DPTR
   \   000077   FC           MOV     R4,A
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   FD           MOV     R5,A
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   FE           MOV     R6,A
   \   00007E   EC           MOV     A,R4
   \   00007F   2401         ADD     A,#0x1
   \   000081   FC           MOV     R4,A
   \   000082   ED           MOV     A,R5
   \   000083   3400         ADDC    A,#0x0
   \   000085   FD           MOV     R5,A
   \   000086   12....       LCALL   ?C_GPTR_LOAD
   \   000089   F8           MOV     R0,A
   \   00008A   85..82       MOV     DPL,?XSP + 0
   \   00008D   85..83       MOV     DPH,?XSP + 1
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F9           MOV     R1,A
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   FA           MOV     R2,A
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   FB           MOV     R3,A
   \   000098   12....       LCALL   ?C_GPTR_LOAD
   \   00009B   68           XRL     A,R0
   \   00009C   609A         JZ      ??osal_memcmp_0
    240                return FALSE;
   \   00009E   7900         MOV     R1,#0x0
   \   0000A0   8002         SJMP    ??osal_memcmp_2
    241            }
    242            return TRUE;
   \                     ??osal_memcmp_1:
   \   0000A2   7901         MOV     R1,#0x1
   \                     ??osal_memcmp_2:
   \   0000A4   7406         MOV     A,#0x6
   \   0000A6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A9   7F06         MOV     R7,#0x6
   \   0000AB   02....       LJMP    ?BANKED_LEAVE_XDATA
    243          }
    244          
    245          
    246          /*********************************************************************
    247           * @fn      osal_memset
    248           *
    249           * @brief
    250           *
    251           *   Set memory buffer to value.
    252           *
    253           * @param   dest - pointer to buffer
    254           * @param   value - what to set each uint8 of the message
    255           * @param   size - how big
    256           *
    257           * @return  value of next widget, 0 if no widget found
    258           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    259          void *osal_memset( void *dest, uint8 value, int len )
   \                     osal_memset:
    260          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
   \   00000B   8C..         MOV     ?V2,R4
   \   00000D   8D..         MOV     ?V3,R5
    261            return memset( dest, value, len );
   \   00000F                ; Setup parameters for call to function memset
   \   00000F   78..         MOV     R0,#?V2
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   AC..         MOV     R4,?V0
   \   000016   7D00         MOV     R5,#0x0
   \   000018   EE           MOV     A,R6
   \   000019   FA           MOV     R2,A
   \   00001A   EF           MOV     A,R7
   \   00001B   FB           MOV     R3,A
   \   00001C   12....       LCALL   ??memset?relay       ; Banked call to: memset
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   7F04         MOV     R7,#0x4
   \   000026   02....       LJMP    ?BANKED_LEAVE_XDATA
    262          }
    263          
    264          /*********************************************************************
    265           * @fn      osal_build_uint16
    266           *
    267           * @brief
    268           *
    269           *   Build a uint16 out of 2 bytes (0 then 1).
    270           *
    271           * @param   swapped - 0 then 1
    272           *
    273           * @return  uint16
    274           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    275          uint16 osal_build_uint16( uint8 *swapped )
   \                     osal_build_uint16:
    276          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    277            return ( BUILD_UINT16( swapped[0], swapped[1] ) );
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FC           MOV     R4,A
   \   00000A   7D00         MOV     R5,#0x0
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   7900         MOV     R1,#0x0
   \   000015   E4           CLR     A
   \   000016   C8           XCH     A,R0
   \   000017   F9           MOV     R1,A
   \   000018   EC           MOV     A,R4
   \   000019   28           ADD     A,R0
   \   00001A   FA           MOV     R2,A
   \   00001B   ED           MOV     A,R5
   \   00001C   39           ADDC    A,R1
   \   00001D   FB           MOV     R3,A
   \   00001E   D083         POP     DPH
   \   000020   D082         POP     DPL
   \   000022   02....       LJMP    ?BRET
    278          }
    279          
    280          /*********************************************************************
    281           * @fn      osal_build_uint32
    282           *
    283           * @brief
    284           *
    285           *   Build a uint32 out of sequential bytes.
    286           *
    287           * @param   swapped - sequential bytes
    288           * @param   len - number of bytes in the uint8 array
    289           *
    290           * @return  uint32
    291           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    292          uint32 osal_build_uint32( uint8 *swapped, uint8 len )
   \                     osal_build_uint32:
    293          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    294            if ( len == 2 )
   \   000007   7402         MOV     A,#0x2
   \   000009   6E           XRL     A,R6
   \   00000A   7036         JNZ     ??osal_build_uint32_0
    295              return ( BUILD_UINT32( swapped[0], swapped[1], 0L, 0L ) );
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0,A
   \   000013   E4           CLR     A
   \   000014   F5..         MOV     ?V1,A
   \   000016   F5..         MOV     ?V2,A
   \   000018   F5..         MOV     ?V3,A
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V4,A
   \   000022   E4           CLR     A
   \   000023   F5..         MOV     ?V5,A
   \   000025   F5..         MOV     ?V6,A
   \   000027   F5..         MOV     ?V7,A
   \   000029   7408         MOV     A,#0x8
   \   00002B   78..         MOV     R0,#?V4
   \   00002D   12....       LCALL   ?L_SHL
   \   000030   78..         MOV     R0,#?V0
   \   000032   79..         MOV     R1,#?V4
   \   000034   12....       LCALL   ?L_ADD
   \   000037   AA..         MOV     R2,?V0
   \   000039   AB..         MOV     R3,?V1
   \   00003B   AC..         MOV     R4,?V2
   \   00003D   AD..         MOV     R5,?V3
   \   00003F   02....       LJMP    ??osal_build_uint32_1 & 0xFFFF
    296            else if ( len == 3 )
   \                     ??osal_build_uint32_0:
   \   000042   7403         MOV     A,#0x3
   \   000044   6E           XRL     A,R6
   \   000045   7054         JNZ     ??osal_build_uint32_2
    297              return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], 0L ) );
   \   000047   8A82         MOV     DPL,R2
   \   000049   8B83         MOV     DPH,R3
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F5..         MOV     ?V4,A
   \   00004E   E4           CLR     A
   \   00004F   F5..         MOV     ?V5,A
   \   000051   F5..         MOV     ?V6,A
   \   000053   F5..         MOV     ?V7,A
   \   000055   8A82         MOV     DPL,R2
   \   000057   8B83         MOV     DPH,R3
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F5..         MOV     ?V0,A
   \   00005D   E4           CLR     A
   \   00005E   F5..         MOV     ?V1,A
   \   000060   F5..         MOV     ?V2,A
   \   000062   F5..         MOV     ?V3,A
   \   000064   7408         MOV     A,#0x8
   \   000066   78..         MOV     R0,#?V0
   \   000068   12....       LCALL   ?L_SHL
   \   00006B   78..         MOV     R0,#?V4
   \   00006D   79..         MOV     R1,#?V0
   \   00006F   12....       LCALL   ?L_ADD
   \   000072   8A82         MOV     DPL,R2
   \   000074   8B83         MOV     DPH,R3
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F5..         MOV     ?V0,A
   \   00007B   E4           CLR     A
   \   00007C   F5..         MOV     ?V1,A
   \   00007E   F5..         MOV     ?V2,A
   \   000080   F5..         MOV     ?V3,A
   \   000082   7410         MOV     A,#0x10
   \   000084   78..         MOV     R0,#?V0
   \   000086   12....       LCALL   ?L_SHL
   \   000089   78..         MOV     R0,#?V4
   \   00008B   79..         MOV     R1,#?V0
   \   00008D   12....       LCALL   ?L_ADD
   \   000090   AA..         MOV     R2,?V4
   \   000092   AB..         MOV     R3,?V5
   \   000094   AC..         MOV     R4,?V6
   \   000096   AD..         MOV     R5,?V7
   \   000098   02....       LJMP    ??osal_build_uint32_1 & 0xFFFF
    298            else if ( len == 4 )
   \                     ??osal_build_uint32_2:
   \   00009B   7404         MOV     A,#0x4
   \   00009D   6E           XRL     A,R6
   \   00009E   7072         JNZ     ??osal_build_uint32_3
    299              return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], swapped[3] ) );
   \   0000A0   8A82         MOV     DPL,R2
   \   0000A2   8B83         MOV     DPH,R3
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F5..         MOV     ?V0,A
   \   0000A7   E4           CLR     A
   \   0000A8   F5..         MOV     ?V1,A
   \   0000AA   F5..         MOV     ?V2,A
   \   0000AC   F5..         MOV     ?V3,A
   \   0000AE   8A82         MOV     DPL,R2
   \   0000B0   8B83         MOV     DPH,R3
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F5..         MOV     ?V4,A
   \   0000B6   E4           CLR     A
   \   0000B7   F5..         MOV     ?V5,A
   \   0000B9   F5..         MOV     ?V6,A
   \   0000BB   F5..         MOV     ?V7,A
   \   0000BD   7408         MOV     A,#0x8
   \   0000BF   78..         MOV     R0,#?V4
   \   0000C1   12....       LCALL   ?L_SHL
   \   0000C4   78..         MOV     R0,#?V0
   \   0000C6   79..         MOV     R1,#?V4
   \   0000C8   12....       LCALL   ?L_ADD
   \   0000CB   8A82         MOV     DPL,R2
   \   0000CD   8B83         MOV     DPH,R3
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   F5..         MOV     ?V4,A
   \   0000D4   E4           CLR     A
   \   0000D5   F5..         MOV     ?V5,A
   \   0000D7   F5..         MOV     ?V6,A
   \   0000D9   F5..         MOV     ?V7,A
   \   0000DB   7410         MOV     A,#0x10
   \   0000DD   78..         MOV     R0,#?V4
   \   0000DF   12....       LCALL   ?L_SHL
   \   0000E2   78..         MOV     R0,#?V0
   \   0000E4   79..         MOV     R1,#?V4
   \   0000E6   12....       LCALL   ?L_ADD
   \   0000E9   8A82         MOV     DPL,R2
   \   0000EB   8B83         MOV     DPH,R3
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F5..         MOV     ?V4,A
   \   0000F3   E4           CLR     A
   \   0000F4   F5..         MOV     ?V5,A
   \   0000F6   F5..         MOV     ?V6,A
   \   0000F8   F5..         MOV     ?V7,A
   \   0000FA   7418         MOV     A,#0x18
   \   0000FC   78..         MOV     R0,#?V4
   \   0000FE   12....       LCALL   ?L_SHL
   \   000101   78..         MOV     R0,#?V0
   \   000103   79..         MOV     R1,#?V4
   \   000105   12....       LCALL   ?L_ADD
   \   000108   AA..         MOV     R2,?V0
   \   00010A   AB..         MOV     R3,?V1
   \   00010C   AC..         MOV     R4,?V2
   \   00010E   AD..         MOV     R5,?V3
   \   000110   800D         SJMP    ??osal_build_uint32_1
    300            else
    301              return ( (uint32)swapped[0] );
   \                     ??osal_build_uint32_3:
   \   000112   8A82         MOV     DPL,R2
   \   000114   8B83         MOV     DPH,R3
   \   000116   E0           MOVX    A,@DPTR
   \   000117   F5..         MOV     ?V0,A
   \   000119   AA..         MOV     R2,?V0
   \   00011B   E4           CLR     A
   \   00011C   FB           MOV     R3,A
   \   00011D   FC           MOV     R4,A
   \   00011E   FD           MOV     R5,A
   \                     ??osal_build_uint32_1:
   \   00011F   7F08         MOV     R7,#0x8
   \   000121   02....       LJMP    ?BANKED_LEAVE_XDATA
    302          }
    303          
    304          #if !defined ( ZBIT ) && !defined ( ZBIT2 ) && !defined (UBIT)
    305          /*********************************************************************
    306           * @fn      _ltoa
    307           *
    308           * @brief
    309           *
    310           *   convert a long unsigned int to a string.
    311           *
    312           * @param  l - long to convert
    313           * @param  buf - buffer to convert to
    314           * @param  radix - 10 dec, 16 hex
    315           *
    316           * @return  pointer to buffer
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          unsigned char * _ltoa(unsigned long l, unsigned char *buf, unsigned char radix)
   \                     _ltoa:
    319          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 42
   \   000005   74D6         MOV     A,#-0x2a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7408         MOV     A,#0x8
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   EC           MOV     A,R4
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   ED           MOV     A,R5
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   E9           MOV     A,R1
   \   00001B   C0E0         PUSH    A
   \   00001D   7407         MOV     A,#0x7
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   D0E0         POP     A
   \   000024   F0           MOVX    @DPTR,A
    320          #if defined( __GNUC__ )
    321            return ( (char*)ltoa( l, buf, radix ) );
    322          #else
    323            unsigned char tmp1[10] = "", tmp2[10] = "", tmp3[10] = "";
   \   000025   90....       MOV     DPTR,#`?<Constant "">`
   \   000028   740C         MOV     A,#0xc
   \   00002A   12....       LCALL   ?XSTACK_DISP102_8
   \   00002D   740A         MOV     A,#0xa
   \   00002F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000032   90....       MOV     DPTR,#`?<Constant "">_1`
   \   000035   7416         MOV     A,#0x16
   \   000037   12....       LCALL   ?XSTACK_DISP102_8
   \   00003A   740A         MOV     A,#0xa
   \   00003C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   00003F   90....       MOV     DPTR,#`?<Constant "">_2`
   \   000042   7420         MOV     A,#0x20
   \   000044   12....       LCALL   ?XSTACK_DISP102_8
   \   000047   740A         MOV     A,#0xa
   \   000049   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    324            unsigned short num1, num2, num3;
    325            unsigned char i;
    326          
    327            buf[0] = '\0';
   \   00004C   743A         MOV     A,#0x3a
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F8           MOV     R0,A
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F583         MOV     DPH,A
   \   000057   8882         MOV     DPL,R0
   \   000059   7400         MOV     A,#0x0
   \   00005B   F0           MOVX    @DPTR,A
    328          
    329            if ( radix == 10 )
   \   00005C   7407         MOV     A,#0x7
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   E0           MOVX    A,@DPTR
   \   000062   640A         XRL     A,#0xa
   \   000064   6003         JZ      $+5
   \   000066   02....       LJMP    ??_ltoa_0 & 0xFFFF
    330            {
    331              num1 = l % 10000;
   \   000069   7408         MOV     A,#0x8
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   78..         MOV     R0,#?V4
   \   000070   12....       LCALL   ?L_MOV_X
   \   000073   90....       MOV     DPTR,#__Constant_2710
   \   000076   78..         MOV     R0,#?V0
   \   000078   12....       LCALL   ?L_MOV_X
   \   00007B   78..         MOV     R0,#?V4
   \   00007D   79..         MOV     R1,#?V0
   \   00007F   12....       LCALL   ?UL_DIV_MOD
   \   000082   7403         MOV     A,#0x3
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   E5..         MOV     A,?V0
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   E5..         MOV     A,?V1
   \   00008D   F0           MOVX    @DPTR,A
    332              num2 = (l / 10000) % 10000;
   \   00008E   7408         MOV     A,#0x8
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   78..         MOV     R0,#?V4
   \   000095   12....       LCALL   ?L_MOV_X
   \   000098   90....       MOV     DPTR,#__Constant_2710
   \   00009B   78..         MOV     R0,#?V0
   \   00009D   12....       LCALL   ?L_MOV_X
   \   0000A0   78..         MOV     R0,#?V4
   \   0000A2   79..         MOV     R1,#?V0
   \   0000A4   12....       LCALL   ?UL_DIV_MOD
   \   0000A7   90....       MOV     DPTR,#__Constant_2710
   \   0000AA   78..         MOV     R0,#?V0
   \   0000AC   12....       LCALL   ?L_MOV_X
   \   0000AF   78..         MOV     R0,#?V4
   \   0000B1   79..         MOV     R1,#?V0
   \   0000B3   12....       LCALL   ?UL_DIV_MOD
   \   0000B6   7401         MOV     A,#0x1
   \   0000B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BB   E5..         MOV     A,?V0
   \   0000BD   F0           MOVX    @DPTR,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   E5..         MOV     A,?V1
   \   0000C1   F0           MOVX    @DPTR,A
    333              num3 = (unsigned short)(l / 100000000);
   \   0000C2   7408         MOV     A,#0x8
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   78..         MOV     R0,#?V0
   \   0000C9   12....       LCALL   ?L_MOV_X
   \   0000CC   90....       MOV     DPTR,#__Constant_5f5e100
   \   0000CF   78..         MOV     R0,#?V4
   \   0000D1   12....       LCALL   ?L_MOV_X
   \   0000D4   78..         MOV     R0,#?V0
   \   0000D6   79..         MOV     R1,#?V4
   \   0000D8   12....       LCALL   ?UL_DIV_MOD
   \   0000DB   7405         MOV     A,#0x5
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   E5..         MOV     A,?V0
   \   0000E2   F0           MOVX    @DPTR,A
   \   0000E3   A3           INC     DPTR
   \   0000E4   E5..         MOV     A,?V1
   \   0000E6   F0           MOVX    @DPTR,A
    334          
    335              if (num3) _itoa(num3, tmp3, 10);
   \   0000E7   7405         MOV     A,#0x5
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   F8           MOV     R0,A
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   F9           MOV     R1,A
   \   0000F1   E8           MOV     A,R0
   \   0000F2   49           ORL     A,R1
   \   0000F3   6014         JZ      ??_ltoa_1
   \   0000F5                ; Setup parameters for call to function _itoa
   \   0000F5   790A         MOV     R1,#0xa
   \   0000F7   7420         MOV     A,#0x20
   \   0000F9   12....       LCALL   ?XSTACK_DISP102_8
   \   0000FC   7405         MOV     A,#0x5
   \   0000FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000101   E0           MOVX    A,@DPTR
   \   000102   FA           MOV     R2,A
   \   000103   A3           INC     DPTR
   \   000104   E0           MOVX    A,@DPTR
   \   000105   FB           MOV     R3,A
   \   000106   12....       LCALL   ??_itoa?relay        ; Banked call to: _itoa
    336              if (num2) _itoa(num2, tmp2, 10);
   \                     ??_ltoa_1:
   \   000109   7401         MOV     A,#0x1
   \   00010B   12....       LCALL   ?XSTACK_DISP0_8
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   F8           MOV     R0,A
   \   000110   A3           INC     DPTR
   \   000111   E0           MOVX    A,@DPTR
   \   000112   F9           MOV     R1,A
   \   000113   E8           MOV     A,R0
   \   000114   49           ORL     A,R1
   \   000115   6014         JZ      ??_ltoa_2
   \   000117                ; Setup parameters for call to function _itoa
   \   000117   790A         MOV     R1,#0xa
   \   000119   7416         MOV     A,#0x16
   \   00011B   12....       LCALL   ?XSTACK_DISP102_8
   \   00011E   7401         MOV     A,#0x1
   \   000120   12....       LCALL   ?XSTACK_DISP0_8
   \   000123   E0           MOVX    A,@DPTR
   \   000124   FA           MOV     R2,A
   \   000125   A3           INC     DPTR
   \   000126   E0           MOVX    A,@DPTR
   \   000127   FB           MOV     R3,A
   \   000128   12....       LCALL   ??_itoa?relay        ; Banked call to: _itoa
    337              if (num1) _itoa(num1, tmp1, 10);
   \                     ??_ltoa_2:
   \   00012B   7403         MOV     A,#0x3
   \   00012D   12....       LCALL   ?XSTACK_DISP0_8
   \   000130   E0           MOVX    A,@DPTR
   \   000131   F8           MOV     R0,A
   \   000132   A3           INC     DPTR
   \   000133   E0           MOVX    A,@DPTR
   \   000134   F9           MOV     R1,A
   \   000135   E8           MOV     A,R0
   \   000136   49           ORL     A,R1
   \   000137   6014         JZ      ??_ltoa_3
   \   000139                ; Setup parameters for call to function _itoa
   \   000139   790A         MOV     R1,#0xa
   \   00013B   740C         MOV     A,#0xc
   \   00013D   12....       LCALL   ?XSTACK_DISP102_8
   \   000140   7403         MOV     A,#0x3
   \   000142   12....       LCALL   ?XSTACK_DISP0_8
   \   000145   E0           MOVX    A,@DPTR
   \   000146   FA           MOV     R2,A
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   FB           MOV     R3,A
   \   00014A   12....       LCALL   ??_itoa?relay        ; Banked call to: _itoa
    338          
    339              if (num3)
   \                     ??_ltoa_3:
   \   00014D   7405         MOV     A,#0x5
   \   00014F   12....       LCALL   ?XSTACK_DISP0_8
   \   000152   E0           MOVX    A,@DPTR
   \   000153   F8           MOV     R0,A
   \   000154   A3           INC     DPTR
   \   000155   E0           MOVX    A,@DPTR
   \   000156   F9           MOV     R1,A
   \   000157   E8           MOV     A,R0
   \   000158   49           ORL     A,R1
   \   000159   6060         JZ      ??_ltoa_4
    340              {
    341                strcpy((char*)buf, (char const*)tmp3);
   \   00015B                ; Setup parameters for call to function strcpy
   \   00015B   7420         MOV     A,#0x20
   \   00015D   12....       LCALL   ?XSTACK_DISP102_8
   \   000160   743A         MOV     A,#0x3a
   \   000162   12....       LCALL   ?XSTACK_DISP0_8
   \   000165   E0           MOVX    A,@DPTR
   \   000166   FA           MOV     R2,A
   \   000167   A3           INC     DPTR
   \   000168   E0           MOVX    A,@DPTR
   \   000169   FB           MOV     R3,A
   \   00016A   12....       LCALL   ??strcpy?relay       ; Banked call to: strcpy
    342                for (i = 0; i < 4 - strlen((char const*)tmp2); i++)
   \   00016D   85..82       MOV     DPL,?XSP + 0
   \   000170   85..83       MOV     DPH,?XSP + 1
   \   000173   7400         MOV     A,#0x0
   \   000175   F0           MOVX    @DPTR,A
   \                     ??_ltoa_5:
   \   000176   85..82       MOV     DPL,?XSP + 0
   \   000179   85..83       MOV     DPH,?XSP + 1
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   FE           MOV     R6,A
   \   00017E   7F00         MOV     R7,#0x0
   \   000180                ; Setup parameters for call to function strlen
   \   000180   7416         MOV     A,#0x16
   \   000182   12....       LCALL   ?XSTACK_DISP101_8
   \   000185   12....       LCALL   ??strlen?relay       ; Banked call to: strlen
   \   000188   8A..         MOV     ?V0,R2
   \   00018A   8B..         MOV     ?V1,R3
   \   00018C   7404         MOV     A,#0x4
   \   00018E   C3           CLR     C
   \   00018F   95..         SUBB    A,?V0
   \   000191   F8           MOV     R0,A
   \   000192   7400         MOV     A,#0x0
   \   000194   95..         SUBB    A,?V1
   \   000196   F9           MOV     R1,A
   \   000197   C3           CLR     C
   \   000198   EE           MOV     A,R6
   \   000199   98           SUBB    A,R0
   \   00019A   EF           MOV     A,R7
   \   00019B   99           SUBB    A,R1
   \   00019C   501D         JNC     ??_ltoa_4
    343                  strcat((char*)buf, "0");
   \   00019E                ; Setup parameters for call to function strcat
   \   00019E   7C..         MOV     R4,#`?<Constant "0">` & 0xff
   \   0001A0   7D..         MOV     R5,#(`?<Constant "0">` >> 8) & 0xff
   \   0001A2   743A         MOV     A,#0x3a
   \   0001A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   FA           MOV     R2,A
   \   0001A9   A3           INC     DPTR
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   FB           MOV     R3,A
   \   0001AC   12....       LCALL   ??strcat?relay       ; Banked call to: strcat
   \   0001AF   85..82       MOV     DPL,?XSP + 0
   \   0001B2   85..83       MOV     DPH,?XSP + 1
   \   0001B5   E0           MOVX    A,@DPTR
   \   0001B6   2401         ADD     A,#0x1
   \   0001B8   F0           MOVX    @DPTR,A
   \   0001B9   80BB         SJMP    ??_ltoa_5
    344              }
    345              strcat((char*)buf, (char const*)tmp2);
   \                     ??_ltoa_4:
   \   0001BB                ; Setup parameters for call to function strcat
   \   0001BB   7416         MOV     A,#0x16
   \   0001BD   12....       LCALL   ?XSTACK_DISP102_8
   \   0001C0   743A         MOV     A,#0x3a
   \   0001C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C5   E0           MOVX    A,@DPTR
   \   0001C6   FA           MOV     R2,A
   \   0001C7   A3           INC     DPTR
   \   0001C8   E0           MOVX    A,@DPTR
   \   0001C9   FB           MOV     R3,A
   \   0001CA   12....       LCALL   ??strcat?relay       ; Banked call to: strcat
    346              if (num3 || num2)
   \   0001CD   7405         MOV     A,#0x5
   \   0001CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D2   E0           MOVX    A,@DPTR
   \   0001D3   F8           MOV     R0,A
   \   0001D4   A3           INC     DPTR
   \   0001D5   E0           MOVX    A,@DPTR
   \   0001D6   F9           MOV     R1,A
   \   0001D7   E8           MOV     A,R0
   \   0001D8   49           ORL     A,R1
   \   0001D9   700E         JNZ     ??_ltoa_6
   \   0001DB   7401         MOV     A,#0x1
   \   0001DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   F8           MOV     R0,A
   \   0001E2   A3           INC     DPTR
   \   0001E3   E0           MOVX    A,@DPTR
   \   0001E4   F9           MOV     R1,A
   \   0001E5   E8           MOV     A,R0
   \   0001E6   49           ORL     A,R1
   \   0001E7   604E         JZ      ??_ltoa_7
    347              {
    348                for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
   \                     ??_ltoa_6:
   \   0001E9   85..82       MOV     DPL,?XSP + 0
   \   0001EC   85..83       MOV     DPH,?XSP + 1
   \   0001EF   7400         MOV     A,#0x0
   \   0001F1   F0           MOVX    @DPTR,A
   \                     ??_ltoa_8:
   \   0001F2   85..82       MOV     DPL,?XSP + 0
   \   0001F5   85..83       MOV     DPH,?XSP + 1
   \   0001F8   E0           MOVX    A,@DPTR
   \   0001F9   FE           MOV     R6,A
   \   0001FA   7F00         MOV     R7,#0x0
   \   0001FC                ; Setup parameters for call to function strlen
   \   0001FC   740C         MOV     A,#0xc
   \   0001FE   12....       LCALL   ?XSTACK_DISP101_8
   \   000201   12....       LCALL   ??strlen?relay       ; Banked call to: strlen
   \   000204   8A..         MOV     ?V0,R2
   \   000206   8B..         MOV     ?V1,R3
   \   000208   7404         MOV     A,#0x4
   \   00020A   C3           CLR     C
   \   00020B   95..         SUBB    A,?V0
   \   00020D   F8           MOV     R0,A
   \   00020E   7400         MOV     A,#0x0
   \   000210   95..         SUBB    A,?V1
   \   000212   F9           MOV     R1,A
   \   000213   C3           CLR     C
   \   000214   EE           MOV     A,R6
   \   000215   98           SUBB    A,R0
   \   000216   EF           MOV     A,R7
   \   000217   99           SUBB    A,R1
   \   000218   501D         JNC     ??_ltoa_7
    349                  strcat((char*)buf, "0");
   \   00021A                ; Setup parameters for call to function strcat
   \   00021A   7C..         MOV     R4,#`?<Constant "0">` & 0xff
   \   00021C   7D..         MOV     R5,#(`?<Constant "0">` >> 8) & 0xff
   \   00021E   743A         MOV     A,#0x3a
   \   000220   12....       LCALL   ?XSTACK_DISP0_8
   \   000223   E0           MOVX    A,@DPTR
   \   000224   FA           MOV     R2,A
   \   000225   A3           INC     DPTR
   \   000226   E0           MOVX    A,@DPTR
   \   000227   FB           MOV     R3,A
   \   000228   12....       LCALL   ??strcat?relay       ; Banked call to: strcat
   \   00022B   85..82       MOV     DPL,?XSP + 0
   \   00022E   85..83       MOV     DPH,?XSP + 1
   \   000231   E0           MOVX    A,@DPTR
   \   000232   2401         ADD     A,#0x1
   \   000234   F0           MOVX    @DPTR,A
   \   000235   80BB         SJMP    ??_ltoa_8
    350              }
    351              strcat((char*)buf, (char const*)tmp1);
   \                     ??_ltoa_7:
   \   000237                ; Setup parameters for call to function strcat
   \   000237   740C         MOV     A,#0xc
   \   000239   12....       LCALL   ?XSTACK_DISP102_8
   \   00023C   743A         MOV     A,#0x3a
   \   00023E   12....       LCALL   ?XSTACK_DISP0_8
   \   000241   E0           MOVX    A,@DPTR
   \   000242   FA           MOV     R2,A
   \   000243   A3           INC     DPTR
   \   000244   E0           MOVX    A,@DPTR
   \   000245   FB           MOV     R3,A
   \   000246   12....       LCALL   ??strcat?relay       ; Banked call to: strcat
    352              if (!num3 && !num2 && !num1)
   \   000249   7405         MOV     A,#0x5
   \   00024B   12....       LCALL   ?XSTACK_DISP0_8
   \   00024E   E0           MOVX    A,@DPTR
   \   00024F   F8           MOV     R0,A
   \   000250   A3           INC     DPTR
   \   000251   E0           MOVX    A,@DPTR
   \   000252   F9           MOV     R1,A
   \   000253   E8           MOV     A,R0
   \   000254   49           ORL     A,R1
   \   000255   6003         JZ      $+5
   \   000257   02....       LJMP    ??_ltoa_9 & 0xFFFF
   \   00025A   7401         MOV     A,#0x1
   \   00025C   12....       LCALL   ?XSTACK_DISP0_8
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   F8           MOV     R0,A
   \   000261   A3           INC     DPTR
   \   000262   E0           MOVX    A,@DPTR
   \   000263   F9           MOV     R1,A
   \   000264   E8           MOV     A,R0
   \   000265   49           ORL     A,R1
   \   000266   6003         JZ      $+5
   \   000268   02....       LJMP    ??_ltoa_9 & 0xFFFF
   \   00026B   7403         MOV     A,#0x3
   \   00026D   12....       LCALL   ?XSTACK_DISP0_8
   \   000270   E0           MOVX    A,@DPTR
   \   000271   F8           MOV     R0,A
   \   000272   A3           INC     DPTR
   \   000273   E0           MOVX    A,@DPTR
   \   000274   F9           MOV     R1,A
   \   000275   E8           MOV     A,R0
   \   000276   49           ORL     A,R1
   \   000277   6003         JZ      $+5
   \   000279   02....       LJMP    ??_ltoa_9 & 0xFFFF
    353                strcpy((char*)buf, "0");
   \   00027C                ; Setup parameters for call to function strcpy
   \   00027C   7C..         MOV     R4,#`?<Constant "0">` & 0xff
   \   00027E   7D..         MOV     R5,#(`?<Constant "0">` >> 8) & 0xff
   \   000280   743A         MOV     A,#0x3a
   \   000282   12....       LCALL   ?XSTACK_DISP0_8
   \   000285   E0           MOVX    A,@DPTR
   \   000286   FA           MOV     R2,A
   \   000287   A3           INC     DPTR
   \   000288   E0           MOVX    A,@DPTR
   \   000289   FB           MOV     R3,A
   \   00028A   12....       LCALL   ??strcpy?relay       ; Banked call to: strcpy
   \   00028D   02....       LJMP    ??_ltoa_9 & 0xFFFF
    354            }
    355            else if ( radix == 16 )
   \                     ??_ltoa_0:
   \   000290   7407         MOV     A,#0x7
   \   000292   12....       LCALL   ?XSTACK_DISP0_8
   \   000295   E0           MOVX    A,@DPTR
   \   000296   6410         XRL     A,#0x10
   \   000298   6003         JZ      $+5
   \   00029A   02....       LJMP    ??_ltoa_10 & 0xFFFF
    356            {
    357              num1 = l & 0x0000FFFF;
   \   00029D   7408         MOV     A,#0x8
   \   00029F   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A2   78..         MOV     R0,#?V0
   \   0002A4   12....       LCALL   ?L_MOV_X
   \   0002A7   7403         MOV     A,#0x3
   \   0002A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AC   E5..         MOV     A,?V0
   \   0002AE   F0           MOVX    @DPTR,A
   \   0002AF   A3           INC     DPTR
   \   0002B0   E5..         MOV     A,?V1
   \   0002B2   F0           MOVX    @DPTR,A
    358              num2 = l >> 16;
   \   0002B3   7408         MOV     A,#0x8
   \   0002B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B8   78..         MOV     R0,#?V0
   \   0002BA   12....       LCALL   ?L_MOV_X
   \   0002BD   7410         MOV     A,#0x10
   \   0002BF   78..         MOV     R0,#?V0
   \   0002C1   12....       LCALL   ?UL_SHR
   \   0002C4   7401         MOV     A,#0x1
   \   0002C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C9   E5..         MOV     A,?V0
   \   0002CB   F0           MOVX    @DPTR,A
   \   0002CC   A3           INC     DPTR
   \   0002CD   E5..         MOV     A,?V1
   \   0002CF   F0           MOVX    @DPTR,A
    359          
    360              if (num2) _itoa(num2, tmp2, 16);
   \   0002D0   7401         MOV     A,#0x1
   \   0002D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D5   E0           MOVX    A,@DPTR
   \   0002D6   F8           MOV     R0,A
   \   0002D7   A3           INC     DPTR
   \   0002D8   E0           MOVX    A,@DPTR
   \   0002D9   F9           MOV     R1,A
   \   0002DA   E8           MOV     A,R0
   \   0002DB   49           ORL     A,R1
   \   0002DC   6014         JZ      ??_ltoa_11
   \   0002DE                ; Setup parameters for call to function _itoa
   \   0002DE   7910         MOV     R1,#0x10
   \   0002E0   7416         MOV     A,#0x16
   \   0002E2   12....       LCALL   ?XSTACK_DISP102_8
   \   0002E5   7401         MOV     A,#0x1
   \   0002E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002EA   E0           MOVX    A,@DPTR
   \   0002EB   FA           MOV     R2,A
   \   0002EC   A3           INC     DPTR
   \   0002ED   E0           MOVX    A,@DPTR
   \   0002EE   FB           MOV     R3,A
   \   0002EF   12....       LCALL   ??_itoa?relay        ; Banked call to: _itoa
    361              if (num1) _itoa(num1, tmp1, 16);
   \                     ??_ltoa_11:
   \   0002F2   7403         MOV     A,#0x3
   \   0002F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F7   E0           MOVX    A,@DPTR
   \   0002F8   F8           MOV     R0,A
   \   0002F9   A3           INC     DPTR
   \   0002FA   E0           MOVX    A,@DPTR
   \   0002FB   F9           MOV     R1,A
   \   0002FC   E8           MOV     A,R0
   \   0002FD   49           ORL     A,R1
   \   0002FE   6014         JZ      ??_ltoa_12
   \   000300                ; Setup parameters for call to function _itoa
   \   000300   7910         MOV     R1,#0x10
   \   000302   740C         MOV     A,#0xc
   \   000304   12....       LCALL   ?XSTACK_DISP102_8
   \   000307   7403         MOV     A,#0x3
   \   000309   12....       LCALL   ?XSTACK_DISP0_8
   \   00030C   E0           MOVX    A,@DPTR
   \   00030D   FA           MOV     R2,A
   \   00030E   A3           INC     DPTR
   \   00030F   E0           MOVX    A,@DPTR
   \   000310   FB           MOV     R3,A
   \   000311   12....       LCALL   ??_itoa?relay        ; Banked call to: _itoa
    362          
    363              if (num2)
   \                     ??_ltoa_12:
   \   000314   7401         MOV     A,#0x1
   \   000316   12....       LCALL   ?XSTACK_DISP0_8
   \   000319   E0           MOVX    A,@DPTR
   \   00031A   F8           MOV     R0,A
   \   00031B   A3           INC     DPTR
   \   00031C   E0           MOVX    A,@DPTR
   \   00031D   F9           MOV     R1,A
   \   00031E   E8           MOV     A,R0
   \   00031F   49           ORL     A,R1
   \   000320   6060         JZ      ??_ltoa_13
    364              {
    365                strcpy((char*)buf,(char const*)tmp2);
   \   000322                ; Setup parameters for call to function strcpy
   \   000322   7416         MOV     A,#0x16
   \   000324   12....       LCALL   ?XSTACK_DISP102_8
   \   000327   743A         MOV     A,#0x3a
   \   000329   12....       LCALL   ?XSTACK_DISP0_8
   \   00032C   E0           MOVX    A,@DPTR
   \   00032D   FA           MOV     R2,A
   \   00032E   A3           INC     DPTR
   \   00032F   E0           MOVX    A,@DPTR
   \   000330   FB           MOV     R3,A
   \   000331   12....       LCALL   ??strcpy?relay       ; Banked call to: strcpy
    366                for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
   \   000334   85..82       MOV     DPL,?XSP + 0
   \   000337   85..83       MOV     DPH,?XSP + 1
   \   00033A   7400         MOV     A,#0x0
   \   00033C   F0           MOVX    @DPTR,A
   \                     ??_ltoa_14:
   \   00033D   85..82       MOV     DPL,?XSP + 0
   \   000340   85..83       MOV     DPH,?XSP + 1
   \   000343   E0           MOVX    A,@DPTR
   \   000344   FE           MOV     R6,A
   \   000345   7F00         MOV     R7,#0x0
   \   000347                ; Setup parameters for call to function strlen
   \   000347   740C         MOV     A,#0xc
   \   000349   12....       LCALL   ?XSTACK_DISP101_8
   \   00034C   12....       LCALL   ??strlen?relay       ; Banked call to: strlen
   \   00034F   8A..         MOV     ?V0,R2
   \   000351   8B..         MOV     ?V1,R3
   \   000353   7404         MOV     A,#0x4
   \   000355   C3           CLR     C
   \   000356   95..         SUBB    A,?V0
   \   000358   F8           MOV     R0,A
   \   000359   7400         MOV     A,#0x0
   \   00035B   95..         SUBB    A,?V1
   \   00035D   F9           MOV     R1,A
   \   00035E   C3           CLR     C
   \   00035F   EE           MOV     A,R6
   \   000360   98           SUBB    A,R0
   \   000361   EF           MOV     A,R7
   \   000362   99           SUBB    A,R1
   \   000363   501D         JNC     ??_ltoa_13
    367                  strcat((char*)buf, "0");
   \   000365                ; Setup parameters for call to function strcat
   \   000365   7C..         MOV     R4,#`?<Constant "0">` & 0xff
   \   000367   7D..         MOV     R5,#(`?<Constant "0">` >> 8) & 0xff
   \   000369   743A         MOV     A,#0x3a
   \   00036B   12....       LCALL   ?XSTACK_DISP0_8
   \   00036E   E0           MOVX    A,@DPTR
   \   00036F   FA           MOV     R2,A
   \   000370   A3           INC     DPTR
   \   000371   E0           MOVX    A,@DPTR
   \   000372   FB           MOV     R3,A
   \   000373   12....       LCALL   ??strcat?relay       ; Banked call to: strcat
   \   000376   85..82       MOV     DPL,?XSP + 0
   \   000379   85..83       MOV     DPH,?XSP + 1
   \   00037C   E0           MOVX    A,@DPTR
   \   00037D   2401         ADD     A,#0x1
   \   00037F   F0           MOVX    @DPTR,A
   \   000380   80BB         SJMP    ??_ltoa_14
    368              }
    369              strcat((char*)buf, (char const*)tmp1);
   \                     ??_ltoa_13:
   \   000382                ; Setup parameters for call to function strcat
   \   000382   740C         MOV     A,#0xc
   \   000384   12....       LCALL   ?XSTACK_DISP102_8
   \   000387   743A         MOV     A,#0x3a
   \   000389   12....       LCALL   ?XSTACK_DISP0_8
   \   00038C   E0           MOVX    A,@DPTR
   \   00038D   FA           MOV     R2,A
   \   00038E   A3           INC     DPTR
   \   00038F   E0           MOVX    A,@DPTR
   \   000390   FB           MOV     R3,A
   \   000391   12....       LCALL   ??strcat?relay       ; Banked call to: strcat
    370              if (!num2 && !num1)
   \   000394   7401         MOV     A,#0x1
   \   000396   12....       LCALL   ?XSTACK_DISP0_8
   \   000399   E0           MOVX    A,@DPTR
   \   00039A   F8           MOV     R0,A
   \   00039B   A3           INC     DPTR
   \   00039C   E0           MOVX    A,@DPTR
   \   00039D   F9           MOV     R1,A
   \   00039E   E8           MOV     A,R0
   \   00039F   49           ORL     A,R1
   \   0003A0   7027         JNZ     ??_ltoa_9
   \   0003A2   7403         MOV     A,#0x3
   \   0003A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0003A7   E0           MOVX    A,@DPTR
   \   0003A8   F8           MOV     R0,A
   \   0003A9   A3           INC     DPTR
   \   0003AA   E0           MOVX    A,@DPTR
   \   0003AB   F9           MOV     R1,A
   \   0003AC   E8           MOV     A,R0
   \   0003AD   49           ORL     A,R1
   \   0003AE   7019         JNZ     ??_ltoa_9
    371                strcpy((char*)buf, "0");
   \   0003B0                ; Setup parameters for call to function strcpy
   \   0003B0   7C..         MOV     R4,#`?<Constant "0">` & 0xff
   \   0003B2   7D..         MOV     R5,#(`?<Constant "0">` >> 8) & 0xff
   \   0003B4   743A         MOV     A,#0x3a
   \   0003B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0003B9   E0           MOVX    A,@DPTR
   \   0003BA   FA           MOV     R2,A
   \   0003BB   A3           INC     DPTR
   \   0003BC   E0           MOVX    A,@DPTR
   \   0003BD   FB           MOV     R3,A
   \   0003BE   12....       LCALL   ??strcpy?relay       ; Banked call to: strcpy
   \   0003C1   8006         SJMP    ??_ltoa_9
    372            }
    373            else
    374              return NULL;
   \                     ??_ltoa_10:
   \   0003C3   7A00         MOV     R2,#0x0
   \   0003C5   7B00         MOV     R3,#0x0
   \   0003C7   800A         SJMP    ??_ltoa_15
    375          
    376            return buf;
   \                     ??_ltoa_9:
   \   0003C9   743A         MOV     A,#0x3a
   \   0003CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0003CE   E0           MOVX    A,@DPTR
   \   0003CF   FA           MOV     R2,A
   \   0003D0   A3           INC     DPTR
   \   0003D1   E0           MOVX    A,@DPTR
   \   0003D2   FB           MOV     R3,A
   \                     ??_ltoa_15:
   \   0003D3   742A         MOV     A,#0x2a
   \   0003D5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003D8   7F08         MOV     R7,#0x8
   \   0003DA   02....       LJMP    ?BANKED_LEAVE_XDATA
    377          #endif
    378          }
    379          #endif // !defined(ZBIT) && !defined(ZBIT2)
    380          
    381          /*********************************************************************
    382           * @fn        osal_rand
    383           *
    384           * @brief    Random number generator
    385           *
    386           * @param   none
    387           *
    388           * @return  uint16 - new random number
    389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    390          uint16 osal_rand( void )
   \                     osal_rand:
    391          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    392            return ( Onboard_rand() );
   \   000004                ; Setup parameters for call to function Onboard_rand
   \   000004   12....       LCALL   ??Onboard_rand?relay ; Banked call to: Onboard_rand
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    393          }
    394          
    395          /*********************************************************************
    396           * API FUNCTIONS
    397           *********************************************************************/
    398          
    399          /*********************************************************************
    400           * @fn      osal_msg_allocate
    401           *
    402           * @brief
    403           *
    404           *    This function is called by a task to allocate a message buffer
    405           *    into which the task will encode the particular message it wishes
    406           *    to send.  This common buffer scheme is used to strictly limit the
    407           *    creation of message buffers within the system due to RAM size
    408           *    limitations on the microprocessor.   Note that all message buffers
    409           *    are a fixed size (at least initially).  The parameter len is kept
    410           *    in case a message pool with varying fixed message sizes is later
    411           *    created (for example, a pool of message buffers of size LARGE,
    412           *    MEDIUM and SMALL could be maintained and allocated based on request
    413           *    from the tasks).
    414           *
    415           *
    416           * @param   uint8 len  - wanted buffer length
    417           *
    418           *
    419           * @return  pointer to allocated buffer or NULL if allocation failed.
    420           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    421          uint8 * osal_msg_allocate( uint16 len )
   \                     osal_msg_allocate:
    422          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
    423            osal_msg_hdr_t *hdr;
    424          
    425            if ( len == 0 )
   \   000009   E5..         MOV     A,?V0
   \   00000B   45..         ORL     A,?V1
   \   00000D   7006         JNZ     ??osal_msg_allocate_0
    426              return ( NULL );
   \   00000F   7A00         MOV     R2,#0x0
   \   000011   7B00         MOV     R3,#0x0
   \   000013   8048         SJMP    ??osal_msg_allocate_1
    427          
    428            hdr = (osal_msg_hdr_t *) osal_mem_alloc( (short)(len + sizeof( osal_msg_hdr_t )) );
   \                     ??osal_msg_allocate_0:
   \   000015                ; Setup parameters for call to function osal_mem_alloc
   \   000015   E5..         MOV     A,?V0
   \   000017   2405         ADD     A,#0x5
   \   000019   FA           MOV     R2,A
   \   00001A   E4           CLR     A
   \   00001B   35..         ADDC    A,?V1
   \   00001D   FB           MOV     R3,A
   \   00001E   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000021   8A..         MOV     ?V2,R2
   \   000023   8B..         MOV     ?V3,R3
   \   000025   AE..         MOV     R6,?V2
   \   000027   AF..         MOV     R7,?V3
    429            if ( hdr )
   \   000029   EE           MOV     A,R6
   \   00002A   4F           ORL     A,R7
   \   00002B   602C         JZ      ??osal_msg_allocate_2
    430            {
    431              hdr->next = NULL;
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   7400         MOV     A,#0x0
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   7400         MOV     A,#0x0
   \   000037   F0           MOVX    @DPTR,A
    432              hdr->len = len;
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   E5..         MOV     A,?V0
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   E5..         MOV     A,?V1
   \   000044   F0           MOVX    @DPTR,A
    433              hdr->dest_id = TASK_NO_TASK;
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   74FF         MOV     A,#-0x1
   \   00004F   F0           MOVX    @DPTR,A
    434              return ( (uint8 *) (hdr + 1) );
   \   000050   EE           MOV     A,R6
   \   000051   2405         ADD     A,#0x5
   \   000053   FA           MOV     R2,A
   \   000054   E4           CLR     A
   \   000055   3F           ADDC    A,R7
   \   000056   FB           MOV     R3,A
   \   000057   8004         SJMP    ??osal_msg_allocate_1
    435            }
    436            else
    437              return ( NULL );
   \                     ??osal_msg_allocate_2:
   \   000059   7A00         MOV     R2,#0x0
   \   00005B   7B00         MOV     R3,#0x0
   \                     ??osal_msg_allocate_1:
   \   00005D   7F04         MOV     R7,#0x4
   \   00005F   02....       LJMP    ?BANKED_LEAVE_XDATA
    438          }
    439          
    440          /*********************************************************************
    441           * @fn      osal_msg_deallocate
    442           *
    443           * @brief
    444           *
    445           *    This function is used to deallocate a message buffer. This function
    446           *    is called by a task (or processing element) after it has finished
    447           *    processing a received message.
    448           *
    449           *
    450           * @param   uint8 *msg_ptr - pointer to new message buffer
    451           *
    452           * @return  SUCCESS, INVALID_MSG_POINTER
    453           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    454          uint8 osal_msg_deallocate( uint8 *msg_ptr )
   \                     osal_msg_deallocate:
    455          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    456            uint8 *x;
    457          
    458            if ( msg_ptr == NULL )
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   7004         JNZ     ??osal_msg_deallocate_0
    459              return ( INVALID_MSG_POINTER );
   \   00000D   7905         MOV     R1,#0x5
   \   00000F   8028         SJMP    ??osal_msg_deallocate_1
    460          
    461            // don't deallocate queued buffer
    462            if ( OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
   \                     ??osal_msg_deallocate_0:
   \   000011   EE           MOV     A,R6
   \   000012   24FF         ADD     A,#-0x1
   \   000014   F582         MOV     DPL,A
   \   000016   EF           MOV     A,R7
   \   000017   34FF         ADDC    A,#-0x1
   \   000019   F583         MOV     DPH,A
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   64FF         XRL     A,#0xff
   \   00001E   6004         JZ      ??osal_msg_deallocate_2
    463              return ( MSG_BUFFER_NOT_AVAIL );
   \   000020   7904         MOV     R1,#0x4
   \   000022   8015         SJMP    ??osal_msg_deallocate_1
    464          
    465            x = (uint8 *)((uint8 *)msg_ptr - sizeof( osal_msg_hdr_t ));
   \                     ??osal_msg_deallocate_2:
   \   000024   EE           MOV     A,R6
   \   000025   24FB         ADD     A,#-0x5
   \   000027   F8           MOV     R0,A
   \   000028   EF           MOV     A,R7
   \   000029   34FF         ADDC    A,#-0x1
   \   00002B   F9           MOV     R1,A
   \   00002C   88..         MOV     ?V0,R0
   \   00002E   89..         MOV     ?V1,R1
    466          
    467            osal_mem_free( (void *)x );
   \   000030                ; Setup parameters for call to function osal_mem_free
   \   000030   AA..         MOV     R2,?V0
   \   000032   AB..         MOV     R3,?V1
   \   000034   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    468          
    469            return ( SUCCESS );
   \   000037   7900         MOV     R1,#0x0
   \                     ??osal_msg_deallocate_1:
   \   000039   7F02         MOV     R7,#0x2
   \   00003B   02....       LJMP    ?BANKED_LEAVE_XDATA
    470          }
    471          
    472          /*********************************************************************
    473           * @fn      osal_msg_send
    474           *
    475           * @brief
    476           *
    477           *    This function is called by a task to send a command message to
    478           *    another task or processing element.  The sending_task field must
    479           *    refer to a valid task, since the task ID will be used
    480           *    for the response message.  This function will also set a message
    481           *    ready event in the destination tasks event list.
    482           *
    483           *
    484           * @param   uint8 destination task - Send msg to?  Task ID
    485           * @param   uint8 *msg_ptr - pointer to new message buffer
    486           * @param   uint8 len - length of data in message
    487           *
    488           * @return  SUCCESS, INVALID_TASK, INVALID_MSG_POINTER
    489           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    490          uint8 osal_msg_send( uint8 destination_task, uint8 *msg_ptr )
   \                     osal_msg_send:
    491          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    492            if ( msg_ptr == NULL )
   \   00000B   EE           MOV     A,R6
   \   00000C   4F           ORL     A,R7
   \   00000D   7004         JNZ     ??osal_msg_send_0
    493              return ( INVALID_MSG_POINTER );
   \   00000F   7905         MOV     R1,#0x5
   \   000011   806D         SJMP    ??osal_msg_send_1
    494          
    495            if ( destination_task >= tasksCnt )
   \                     ??osal_msg_send_0:
   \   000013   90....       MOV     DPTR,#tasksCnt
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F8           MOV     R0,A
   \   000018   E5..         MOV     A,?V0
   \   00001A   C3           CLR     C
   \   00001B   98           SUBB    A,R0
   \   00001C   400C         JC      ??osal_msg_send_2
    496            {
    497              osal_msg_deallocate( msg_ptr );
   \   00001E                ; Setup parameters for call to function osal_msg_deallocate
   \   00001E   EE           MOV     A,R6
   \   00001F   FA           MOV     R2,A
   \   000020   EF           MOV     A,R7
   \   000021   FB           MOV     R3,A
   \   000022   12....       LCALL   ??osal_msg_deallocate?relay; Banked call to: osal_msg_deallocate
   \   000025   E9           MOV     A,R1
    498              return ( INVALID_TASK );
   \   000026   7903         MOV     R1,#0x3
   \   000028   8056         SJMP    ??osal_msg_send_1
    499            }
    500          
    501            // Check the message header
    502            if ( OSAL_MSG_NEXT( msg_ptr ) != NULL ||
    503                 OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
   \                     ??osal_msg_send_2:
   \   00002A   EE           MOV     A,R6
   \   00002B   24FB         ADD     A,#-0x5
   \   00002D   F582         MOV     DPL,A
   \   00002F   EF           MOV     A,R7
   \   000030   34FF         ADDC    A,#-0x1
   \   000032   F583         MOV     DPH,A
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F8           MOV     R0,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F9           MOV     R1,A
   \   000039   E8           MOV     A,R0
   \   00003A   49           ORL     A,R1
   \   00003B   700F         JNZ     ??osal_msg_send_3
   \   00003D   EE           MOV     A,R6
   \   00003E   24FF         ADD     A,#-0x1
   \   000040   F582         MOV     DPL,A
   \   000042   EF           MOV     A,R7
   \   000043   34FF         ADDC    A,#-0x1
   \   000045   F583         MOV     DPH,A
   \   000047   E0           MOVX    A,@DPTR
   \   000048   64FF         XRL     A,#0xff
   \   00004A   600C         JZ      ??osal_msg_send_4
    504            {
    505              osal_msg_deallocate( msg_ptr );
   \                     ??osal_msg_send_3:
   \   00004C                ; Setup parameters for call to function osal_msg_deallocate
   \   00004C   EE           MOV     A,R6
   \   00004D   FA           MOV     R2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   FB           MOV     R3,A
   \   000050   12....       LCALL   ??osal_msg_deallocate?relay; Banked call to: osal_msg_deallocate
   \   000053   E9           MOV     A,R1
    506              return ( INVALID_MSG_POINTER );
   \   000054   7905         MOV     R1,#0x5
   \   000056   8028         SJMP    ??osal_msg_send_1
    507            }
    508          
    509            OSAL_MSG_ID( msg_ptr ) = destination_task;
   \                     ??osal_msg_send_4:
   \   000058   E5..         MOV     A,?V0
   \   00005A   C0E0         PUSH    A
   \   00005C   EE           MOV     A,R6
   \   00005D   24FF         ADD     A,#-0x1
   \   00005F   F582         MOV     DPL,A
   \   000061   EF           MOV     A,R7
   \   000062   34FF         ADDC    A,#-0x1
   \   000064   F583         MOV     DPH,A
   \   000066   D0E0         POP     A
   \   000068   F0           MOVX    @DPTR,A
    510          
    511            // queue message
    512            osal_msg_enqueue( &osal_qHead, msg_ptr );
   \   000069                ; Setup parameters for call to function osal_msg_enqueue
   \   000069   EE           MOV     A,R6
   \   00006A   FC           MOV     R4,A
   \   00006B   EF           MOV     A,R7
   \   00006C   FD           MOV     R5,A
   \   00006D   7A..         MOV     R2,#osal_qHead & 0xff
   \   00006F   7B..         MOV     R3,#(osal_qHead >> 8) & 0xff
   \   000071   12....       LCALL   ??osal_msg_enqueue?relay; Banked call to: osal_msg_enqueue
    513          
    514            // Signal the task that a message is waiting
    515            osal_set_event( destination_task, SYS_EVENT_MSG );
   \   000074                ; Setup parameters for call to function osal_set_event
   \   000074   7A00         MOV     R2,#0x0
   \   000076   7B80         MOV     R3,#-0x80
   \   000078   A9..         MOV     R1,?V0
   \   00007A   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   00007D   E9           MOV     A,R1
    516          
    517            return ( SUCCESS );
   \   00007E   7900         MOV     R1,#0x0
   \                     ??osal_msg_send_1:
   \   000080   7F01         MOV     R7,#0x1
   \   000082   02....       LJMP    ?BANKED_LEAVE_XDATA
    518          }
    519          
    520          /*********************************************************************
    521           * @fn      osal_msg_receive
    522           *
    523           * @brief
    524           *
    525           *    This function is called by a task to retrieve a received command
    526           *    message. The calling task must deallocate the message buffer after
    527           *    processing the message using the osal_msg_deallocate() call.
    528           *
    529           * @param   uint8 task_id - receiving tasks ID
    530           *
    531           * @return  *uint8 - message information or NULL if no message
    532           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          uint8 *osal_msg_receive( uint8 task_id )
   \                     osal_msg_receive:
    534          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
    535            osal_msg_hdr_t *listHdr;
    536            osal_msg_hdr_t *prevHdr = NULL;
   \   000007   75..00       MOV     ?V4,#0x0
   \   00000A   75..00       MOV     ?V5,#0x0
    537            osal_msg_hdr_t *foundHdr = NULL;
   \   00000D   75..00       MOV     ?V0,#0x0
   \   000010   75..00       MOV     ?V1,#0x0
    538            halIntState_t   intState;
    539          
    540            // Hold off interrupts
    541            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000013   A2AF         MOV     C,0xa8.7
   \   000015   E4           CLR     A
   \   000016   33           RLC     A
   \   000017   F5..         MOV     ?V3,A
   \   000019   C2AF         CLR     0xa8.7
    542          
    543            // Point to the top of the queue
    544            listHdr = osal_qHead;
   \   00001B   90....       MOV     DPTR,#osal_qHead
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F8           MOV     R0,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F9           MOV     R1,A
   \   000023   E8           MOV     A,R0
   \   000024   FE           MOV     R6,A
   \   000025   E9           MOV     A,R1
   \   000026   FF           MOV     R7,A
    545          
    546            // Look through the queue for a message that belongs to the asking task
    547            while ( listHdr != NULL )
   \                     ??osal_msg_receive_0:
   \   000027   EE           MOV     A,R6
   \   000028   4F           ORL     A,R7
   \   000029   6034         JZ      ??osal_msg_receive_1
    548            {
    549              if ( (listHdr - 1)->dest_id == task_id )
   \   00002B   EE           MOV     A,R6
   \   00002C   24FF         ADD     A,#-0x1
   \   00002E   F582         MOV     DPL,A
   \   000030   EF           MOV     A,R7
   \   000031   34FF         ADDC    A,#-0x1
   \   000033   F583         MOV     DPH,A
   \   000035   E0           MOVX    A,@DPTR
   \   000036   65..         XRL     A,?V2
   \   000038   700A         JNZ     ??osal_msg_receive_2
    550              {
    551                if ( foundHdr == NULL )
   \   00003A   E5..         MOV     A,?V0
   \   00003C   45..         ORL     A,?V1
   \   00003E   701F         JNZ     ??osal_msg_receive_1
    552                {
    553                  // Save the first one
    554                  foundHdr = listHdr;
   \   000040   8E..         MOV     ?V0,R6
   \   000042   8F..         MOV     ?V1,R7
    555                }
    556                else
    557                {
    558                  // Second msg found, stop looking
    559                  break;
    560                }
    561              }
    562              if ( foundHdr == NULL )
   \                     ??osal_msg_receive_2:
   \   000044   E5..         MOV     A,?V0
   \   000046   45..         ORL     A,?V1
   \   000048   7004         JNZ     ??osal_msg_receive_3
    563              {
    564                prevHdr = listHdr;
   \   00004A   8E..         MOV     ?V4,R6
   \   00004C   8F..         MOV     ?V5,R7
    565              }
    566              listHdr = OSAL_MSG_NEXT( listHdr );
   \                     ??osal_msg_receive_3:
   \   00004E   EE           MOV     A,R6
   \   00004F   24FB         ADD     A,#-0x5
   \   000051   F582         MOV     DPL,A
   \   000053   EF           MOV     A,R7
   \   000054   34FF         ADDC    A,#-0x1
   \   000056   F583         MOV     DPH,A
   \   000058   E0           MOVX    A,@DPTR
   \   000059   FE           MOV     R6,A
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FF           MOV     R7,A
   \   00005D   80C8         SJMP    ??osal_msg_receive_0
    567            }
    568          
    569            // Is there more than one?
    570            if ( listHdr != NULL )
   \                     ??osal_msg_receive_1:
   \   00005F   EE           MOV     A,R6
   \   000060   4F           ORL     A,R7
   \   000061   600C         JZ      ??osal_msg_receive_4
    571            {
    572              // Yes, Signal the task that a message is waiting
    573              osal_set_event( task_id, SYS_EVENT_MSG );
   \   000063                ; Setup parameters for call to function osal_set_event
   \   000063   7A00         MOV     R2,#0x0
   \   000065   7B80         MOV     R3,#-0x80
   \   000067   A9..         MOV     R1,?V2
   \   000069   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   00006C   E9           MOV     A,R1
   \   00006D   800A         SJMP    ??osal_msg_receive_5
    574            }
    575            else
    576            {
    577              // No more
    578              osal_clear_event( task_id, SYS_EVENT_MSG );
   \                     ??osal_msg_receive_4:
   \   00006F                ; Setup parameters for call to function osal_clear_event
   \   00006F   7A00         MOV     R2,#0x0
   \   000071   7B80         MOV     R3,#-0x80
   \   000073   A9..         MOV     R1,?V2
   \   000075   12....       LCALL   ??osal_clear_event?relay; Banked call to: osal_clear_event
   \   000078   E9           MOV     A,R1
    579            }
    580          
    581            // Did we find a message?
    582            if ( foundHdr != NULL )
   \                     ??osal_msg_receive_5:
   \   000079   E5..         MOV     A,?V0
   \   00007B   45..         ORL     A,?V1
   \   00007D   6015         JZ      ??osal_msg_receive_6
    583            {
    584              // Take out of the link list
    585              osal_msg_extract( &osal_qHead, foundHdr, prevHdr );
   \   00007F                ; Setup parameters for call to function osal_msg_extract
   \   00007F   78..         MOV     R0,#?V4
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000084   AC..         MOV     R4,?V0
   \   000086   AD..         MOV     R5,?V1
   \   000088   7A..         MOV     R2,#osal_qHead & 0xff
   \   00008A   7B..         MOV     R3,#(osal_qHead >> 8) & 0xff
   \   00008C   12....       LCALL   ??osal_msg_extract?relay; Banked call to: osal_msg_extract
   \   00008F   7402         MOV     A,#0x2
   \   000091   12....       LCALL   ?DEALLOC_XSTACK8
    586            }
    587          
    588            // Release interrupts
    589            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osal_msg_receive_6:
   \   000094   A8..         MOV     R0,?V3
   \   000096   E5..         MOV     A,?V3
   \   000098   A2E0         MOV     C,0xE0 /* A   */.0
   \   00009A   92AF         MOV     0xa8.7,C
    590          
    591            return ( (uint8*) foundHdr );
   \   00009C   AA..         MOV     R2,?V0
   \   00009E   AB..         MOV     R3,?V1
   \   0000A0   7F06         MOV     R7,#0x6
   \   0000A2   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000A5                REQUIRE _A_IEN0
    592          }
    593          
    594          /**************************************************************************************************
    595           * @fn          osal_msg_find
    596           *
    597           * @brief       This function finds in place an OSAL message matching the task_id and event
    598           *              parameters.
    599           *
    600           * input parameters
    601           *
    602           * @param       task_id - The OSAL task id that the enqueued OSAL message must match.
    603           * @param       event - The OSAL event id that the enqueued OSAL message must match.
    604           *
    605           * output parameters
    606           *
    607           * None.
    608           *
    609           * @return      NULL if no match, otherwise an in place pointer to the matching OSAL message.
    610           **************************************************************************************************
    611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    612          osal_event_hdr_t *osal_msg_find(uint8 task_id, uint8 event)
   \                     osal_msg_find:
    613          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FC           MOV     R4,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
    614            osal_msg_hdr_t *pHdr;
    615            halIntState_t intState;
    616          
    617            HAL_ENTER_CRITICAL_SECTION(intState);  // Hold off interrupts.
   \   000009   A2AF         MOV     C,0xa8.7
   \   00000B   E4           CLR     A
   \   00000C   33           RLC     A
   \   00000D   FD           MOV     R5,A
   \   00000E   C2AF         CLR     0xa8.7
    618          
    619            pHdr = osal_qHead;  // Point to the top of the queue.
   \   000010   90....       MOV     DPTR,#osal_qHead
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   E8           MOV     A,R0
   \   000019   FA           MOV     R2,A
   \   00001A   E9           MOV     A,R1
   \   00001B   FB           MOV     R3,A
    620          
    621            // Look through the queue for a message that matches the task_id and event parameters.
    622            while (pHdr != NULL)
   \                     ??osal_msg_find_0:
   \   00001C   EA           MOV     A,R2
   \   00001D   4B           ORL     A,R3
   \   00001E   6027         JZ      ??osal_msg_find_1
    623            {
    624              if (((pHdr-1)->dest_id == task_id) && (((osal_event_hdr_t *)pHdr)->event == event))
   \   000020   EA           MOV     A,R2
   \   000021   24FF         ADD     A,#-0x1
   \   000023   F582         MOV     DPL,A
   \   000025   EB           MOV     A,R3
   \   000026   34FF         ADDC    A,#-0x1
   \   000028   F583         MOV     DPH,A
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6C           XRL     A,R4
   \   00002C   7008         JNZ     ??osal_msg_find_2
   \   00002E   8A82         MOV     DPL,R2
   \   000030   8B83         MOV     DPH,R3
   \   000032   E0           MOVX    A,@DPTR
   \   000033   6E           XRL     A,R6
   \   000034   6011         JZ      ??osal_msg_find_1
    625              {
    626                break;
    627              }
    628          
    629              pHdr = OSAL_MSG_NEXT(pHdr);
   \                     ??osal_msg_find_2:
   \   000036   EA           MOV     A,R2
   \   000037   24FB         ADD     A,#-0x5
   \   000039   F582         MOV     DPL,A
   \   00003B   EB           MOV     A,R3
   \   00003C   34FF         ADDC    A,#-0x1
   \   00003E   F583         MOV     DPH,A
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FA           MOV     R2,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   FB           MOV     R3,A
   \   000045   80D5         SJMP    ??osal_msg_find_0
    630            }
    631          
    632            HAL_EXIT_CRITICAL_SECTION(intState);  // Release interrupts.
   \                     ??osal_msg_find_1:
   \   000047   ED           MOV     A,R5
   \   000048   F8           MOV     R0,A
   \   000049   ED           MOV     A,R5
   \   00004A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00004C   92AF         MOV     0xa8.7,C
    633          
    634            return (osal_event_hdr_t *)pHdr;
   \   00004E   7F01         MOV     R7,#0x1
   \   000050   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000053                REQUIRE _A_IEN0
    635          }
    636          
    637          /*********************************************************************
    638           * @fn      osal_msg_enqueue
    639           *
    640           * @brief
    641           *
    642           *    This function enqueues an OSAL message into an OSAL queue.
    643           *
    644           * @param   osal_msg_q_t *q_ptr - OSAL queue
    645           * @param   void *msg_ptr  - OSAL message
    646           *
    647           * @return  none
    648           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    649          void osal_msg_enqueue( osal_msg_q_t *q_ptr, void *msg_ptr )
   \                     osal_msg_enqueue:
    650          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    651            void *list;
    652            halIntState_t intState;
    653          
    654            // Hold off interrupts
    655            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000005   A2AF         MOV     C,0xa8.7
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   F5..         MOV     ?V0,A
   \   00000B   C2AF         CLR     0xa8.7
    656          
    657            OSAL_MSG_NEXT( msg_ptr ) = NULL;
   \   00000D   EC           MOV     A,R4
   \   00000E   24FB         ADD     A,#-0x5
   \   000010   F582         MOV     DPL,A
   \   000012   ED           MOV     A,R5
   \   000013   34FF         ADDC    A,#-0x1
   \   000015   F583         MOV     DPH,A
   \   000017   7400         MOV     A,#0x0
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   7400         MOV     A,#0x0
   \   00001D   F0           MOVX    @DPTR,A
    658            // If first message in queue
    659            if ( *q_ptr == NULL )
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FE           MOV     R6,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FF           MOV     R7,A
   \   000027   EE           MOV     A,R6
   \   000028   4F           ORL     A,R7
   \   000029   700B         JNZ     ??osal_msg_enqueue_0
    660            {
    661              *q_ptr = msg_ptr;
   \   00002B   8A82         MOV     DPL,R2
   \   00002D   8B83         MOV     DPH,R3
   \   00002F   EC           MOV     A,R4
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   ED           MOV     A,R5
   \   000033   F0           MOVX    @DPTR,A
   \   000034   8040         SJMP    ??osal_msg_enqueue_1
    662            }
    663            else
    664            {
    665              // Find end of queue
    666              for ( list = *q_ptr; OSAL_MSG_NEXT( list ) != NULL; list = OSAL_MSG_NEXT( list ) );
   \                     ??osal_msg_enqueue_0:
   \   000036   8A82         MOV     DPL,R2
   \   000038   8B83         MOV     DPH,R3
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   FE           MOV     R6,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FF           MOV     R7,A
   \   00003F   EE           MOV     A,R6
   \   000040   F8           MOV     R0,A
   \   000041   EF           MOV     A,R7
   \   000042   F9           MOV     R1,A
   \                     ??osal_msg_enqueue_2:
   \   000043   E8           MOV     A,R0
   \   000044   24FB         ADD     A,#-0x5
   \   000046   F582         MOV     DPL,A
   \   000048   E9           MOV     A,R1
   \   000049   34FF         ADDC    A,#-0x1
   \   00004B   F583         MOV     DPH,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FE           MOV     R6,A
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   FF           MOV     R7,A
   \   000052   EE           MOV     A,R6
   \   000053   4F           ORL     A,R7
   \   000054   6011         JZ      ??osal_msg_enqueue_3
   \   000056   E8           MOV     A,R0
   \   000057   24FB         ADD     A,#-0x5
   \   000059   F582         MOV     DPL,A
   \   00005B   E9           MOV     A,R1
   \   00005C   34FF         ADDC    A,#-0x1
   \   00005E   F583         MOV     DPH,A
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F8           MOV     R0,A
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F9           MOV     R1,A
   \   000065   80DC         SJMP    ??osal_msg_enqueue_2
    667          
    668              // Add message to end of queue
    669              OSAL_MSG_NEXT( list ) = msg_ptr;
   \                     ??osal_msg_enqueue_3:
   \   000067   E8           MOV     A,R0
   \   000068   24FB         ADD     A,#-0x5
   \   00006A   F582         MOV     DPL,A
   \   00006C   E9           MOV     A,R1
   \   00006D   34FF         ADDC    A,#-0x1
   \   00006F   F583         MOV     DPH,A
   \   000071   EC           MOV     A,R4
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   ED           MOV     A,R5
   \   000075   F0           MOVX    @DPTR,A
    670            }
    671          
    672            // Re-enable interrupts
    673            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osal_msg_enqueue_1:
   \   000076   AE..         MOV     R6,?V0
   \   000078   E5..         MOV     A,?V0
   \   00007A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00007C   92AF         MOV     0xa8.7,C
    674          }
   \   00007E   7F01         MOV     R7,#0x1
   \   000080   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000083                REQUIRE _A_IEN0
    675          
    676          /*********************************************************************
    677           * @fn      osal_msg_dequeue
    678           *
    679           * @brief
    680           *
    681           *    This function dequeues an OSAL message from an OSAL queue.
    682           *
    683           * @param   osal_msg_q_t *q_ptr - OSAL queue
    684           *
    685           * @return  void * - pointer to OSAL message or NULL of queue is empty.
    686           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    687          void *osal_msg_dequeue( osal_msg_q_t *q_ptr )
   \                     osal_msg_dequeue:
    688          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   EB           MOV     A,R3
   \   000008   F9           MOV     R1,A
    689            void *msg_ptr = NULL;
   \   000009   7A00         MOV     R2,#0x0
   \   00000B   7B00         MOV     R3,#0x0
    690            halIntState_t intState;
    691          
    692            // Hold off interrupts
    693            HAL_ENTER_CRITICAL_SECTION(intState);
   \   00000D   A2AF         MOV     C,0xa8.7
   \   00000F   E4           CLR     A
   \   000010   33           RLC     A
   \   000011   FE           MOV     R6,A
   \   000012   C2AF         CLR     0xa8.7
    694          
    695            if ( *q_ptr != NULL )
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FC           MOV     R4,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FD           MOV     R5,A
   \   00001D   EC           MOV     A,R4
   \   00001E   4D           ORL     A,R5
   \   00001F   6043         JZ      ??osal_msg_dequeue_0
    696            {
    697              // Dequeue message
    698              msg_ptr = *q_ptr;
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FC           MOV     R4,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FD           MOV     R5,A
   \   00002A   EC           MOV     A,R4
   \   00002B   FA           MOV     R2,A
   \   00002C   ED           MOV     A,R5
   \   00002D   FB           MOV     R3,A
    699              *q_ptr = OSAL_MSG_NEXT( msg_ptr );
   \   00002E   EA           MOV     A,R2
   \   00002F   24FB         ADD     A,#-0x5
   \   000031   F582         MOV     DPL,A
   \   000033   EB           MOV     A,R3
   \   000034   34FF         ADDC    A,#-0x1
   \   000036   F583         MOV     DPH,A
   \   000038   E0           MOVX    A,@DPTR
   \   000039   FC           MOV     R4,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FD           MOV     R5,A
   \   00003D   8882         MOV     DPL,R0
   \   00003F   8983         MOV     DPH,R1
   \   000041   EC           MOV     A,R4
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   ED           MOV     A,R5
   \   000045   F0           MOVX    @DPTR,A
    700              OSAL_MSG_NEXT( msg_ptr ) = NULL;
   \   000046   EA           MOV     A,R2
   \   000047   24FB         ADD     A,#-0x5
   \   000049   F582         MOV     DPL,A
   \   00004B   EB           MOV     A,R3
   \   00004C   34FF         ADDC    A,#-0x1
   \   00004E   F583         MOV     DPH,A
   \   000050   7400         MOV     A,#0x0
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   7400         MOV     A,#0x0
   \   000056   F0           MOVX    @DPTR,A
    701              OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
   \   000057   EA           MOV     A,R2
   \   000058   24FF         ADD     A,#-0x1
   \   00005A   F582         MOV     DPL,A
   \   00005C   EB           MOV     A,R3
   \   00005D   34FF         ADDC    A,#-0x1
   \   00005F   F583         MOV     DPH,A
   \   000061   74FF         MOV     A,#-0x1
   \   000063   F0           MOVX    @DPTR,A
    702            }
    703          
    704            // Re-enable interrupts
    705            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osal_msg_dequeue_0:
   \   000064   EE           MOV     A,R6
   \   000065   FC           MOV     R4,A
   \   000066   EE           MOV     A,R6
   \   000067   A2E0         MOV     C,0xE0 /* A   */.0
   \   000069   92AF         MOV     0xa8.7,C
    706          
    707            return msg_ptr;
   \   00006B   7F01         MOV     R7,#0x1
   \   00006D   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000070                REQUIRE _A_IEN0
    708          }
    709          
    710          /*********************************************************************
    711           * @fn      osal_msg_push
    712           *
    713           * @brief
    714           *
    715           *    This function pushes an OSAL message to the head of an OSAL
    716           *    queue.
    717           *
    718           * @param   osal_msg_q_t *q_ptr - OSAL queue
    719           * @param   void *msg_ptr  - OSAL message
    720           *
    721           * @return  none
    722           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    723          void osal_msg_push( osal_msg_q_t *q_ptr, void *msg_ptr )
   \                     osal_msg_push:
    724          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    725            halIntState_t intState;
    726          
    727            // Hold off interrupts
    728            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000005   A2AF         MOV     C,0xa8.7
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   F8           MOV     R0,A
   \   00000A   C2AF         CLR     0xa8.7
    729          
    730            // Push message to head of queue
    731            OSAL_MSG_NEXT( msg_ptr ) = *q_ptr;
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FF           MOV     R7,A
   \   000015   EC           MOV     A,R4
   \   000016   24FB         ADD     A,#-0x5
   \   000018   F582         MOV     DPL,A
   \   00001A   ED           MOV     A,R5
   \   00001B   34FF         ADDC    A,#-0x1
   \   00001D   F583         MOV     DPH,A
   \   00001F   EE           MOV     A,R6
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   EF           MOV     A,R7
   \   000023   F0           MOVX    @DPTR,A
    732            *q_ptr = msg_ptr;
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   EC           MOV     A,R4
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   ED           MOV     A,R5
   \   00002C   F0           MOVX    @DPTR,A
    733          
    734            // Re-enable interrupts
    735            HAL_EXIT_CRITICAL_SECTION(intState);
   \   00002D   E8           MOV     A,R0
   \   00002E   F9           MOV     R1,A
   \   00002F   E8           MOV     A,R0
   \   000030   A2E0         MOV     C,0xE0 /* A   */.0
   \   000032   92AF         MOV     0xa8.7,C
    736          }
   \   000034   7F01         MOV     R7,#0x1
   \   000036   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000039                REQUIRE _A_IEN0
    737          
    738          /*********************************************************************
    739           * @fn      osal_msg_extract
    740           *
    741           * @brief
    742           *
    743           *    This function extracts and removes an OSAL message from the
    744           *    middle of an OSAL queue.
    745           *
    746           * @param   osal_msg_q_t *q_ptr - OSAL queue
    747           * @param   void *msg_ptr  - OSAL message to be extracted
    748           * @param   void *prev_ptr  - OSAL message before msg_ptr in queue
    749           *
    750           * @return  none
    751           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    752          void osal_msg_extract( osal_msg_q_t *q_ptr, void *msg_ptr, void *prev_ptr )
   \                     osal_msg_extract:
    753          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   740A         MOV     A,#0xa
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
    754            halIntState_t intState;
    755          
    756            // Hold off interrupts
    757            HAL_ENTER_CRITICAL_SECTION(intState);
   \   00000F   A2AF         MOV     C,0xa8.7
   \   000011   E4           CLR     A
   \   000012   33           RLC     A
   \   000013   F5..         MOV     ?V0,A
   \   000015   C2AF         CLR     0xa8.7
    758          
    759            if ( msg_ptr == *q_ptr )
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FE           MOV     R6,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FF           MOV     R7,A
   \   000020   EC           MOV     A,R4
   \   000021   6E           XRL     A,R6
   \   000022   7002         JNZ     ??osal_msg_extract_0
   \   000024   ED           MOV     A,R5
   \   000025   6F           XRL     A,R7
   \                     ??osal_msg_extract_0:
   \   000026   701A         JNZ     ??osal_msg_extract_1
    760            {
    761              // remove from first
    762              *q_ptr = OSAL_MSG_NEXT( msg_ptr );
   \   000028   EC           MOV     A,R4
   \   000029   24FB         ADD     A,#-0x5
   \   00002B   F582         MOV     DPL,A
   \   00002D   ED           MOV     A,R5
   \   00002E   34FF         ADDC    A,#-0x1
   \   000030   F583         MOV     DPH,A
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FE           MOV     R6,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FF           MOV     R7,A
   \   000037   8A82         MOV     DPL,R2
   \   000039   8B83         MOV     DPH,R3
   \   00003B   EE           MOV     A,R6
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   EF           MOV     A,R7
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   801E         SJMP    ??osal_msg_extract_2
    763            }
    764            else
    765            {
    766              // remove from middle
    767              OSAL_MSG_NEXT( prev_ptr ) = OSAL_MSG_NEXT( msg_ptr );
   \                     ??osal_msg_extract_1:
   \   000042   EC           MOV     A,R4
   \   000043   24FB         ADD     A,#-0x5
   \   000045   F582         MOV     DPL,A
   \   000047   ED           MOV     A,R5
   \   000048   34FF         ADDC    A,#-0x1
   \   00004A   F583         MOV     DPH,A
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   FE           MOV     R6,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   FF           MOV     R7,A
   \   000051   E8           MOV     A,R0
   \   000052   24FB         ADD     A,#-0x5
   \   000054   F582         MOV     DPL,A
   \   000056   E9           MOV     A,R1
   \   000057   34FF         ADDC    A,#-0x1
   \   000059   F583         MOV     DPH,A
   \   00005B   EE           MOV     A,R6
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   EF           MOV     A,R7
   \   00005F   F0           MOVX    @DPTR,A
    768            }
    769            OSAL_MSG_NEXT( msg_ptr ) = NULL;
   \                     ??osal_msg_extract_2:
   \   000060   EC           MOV     A,R4
   \   000061   24FB         ADD     A,#-0x5
   \   000063   F582         MOV     DPL,A
   \   000065   ED           MOV     A,R5
   \   000066   34FF         ADDC    A,#-0x1
   \   000068   F583         MOV     DPH,A
   \   00006A   7400         MOV     A,#0x0
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   7400         MOV     A,#0x0
   \   000070   F0           MOVX    @DPTR,A
    770            OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
   \   000071   EC           MOV     A,R4
   \   000072   24FF         ADD     A,#-0x1
   \   000074   F582         MOV     DPL,A
   \   000076   ED           MOV     A,R5
   \   000077   34FF         ADDC    A,#-0x1
   \   000079   F583         MOV     DPH,A
   \   00007B   74FF         MOV     A,#-0x1
   \   00007D   F0           MOVX    @DPTR,A
    771          
    772            // Re-enable interrupts
    773            HAL_EXIT_CRITICAL_SECTION(intState);
   \   00007E   AE..         MOV     R6,?V0
   \   000080   E5..         MOV     A,?V0
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   92AF         MOV     0xa8.7,C
    774          }
   \   000086   7F02         MOV     R7,#0x2
   \   000088   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00008B                REQUIRE _A_IEN0
    775          
    776          /*********************************************************************
    777           * @fn      osal_msg_enqueue_max
    778           *
    779           * @brief
    780           *
    781           *    This function enqueues an OSAL message into an OSAL queue if
    782           *    the length of the queue is less than max.
    783           *
    784           * @param   osal_msg_q_t *q_ptr - OSAL queue
    785           * @param   void *msg_ptr  - OSAL message
    786           * @param   uint8 max - maximum length of queue
    787           *
    788           * @return  TRUE if message was enqueued, FALSE otherwise
    789           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    790          uint8 osal_msg_enqueue_max( osal_msg_q_t *q_ptr, void *msg_ptr, uint8 max )
   \                     osal_msg_enqueue_max:
    791          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
    792            void *list;
    793            uint8 ret = FALSE;
   \   00000B   7900         MOV     R1,#0x0
    794            halIntState_t intState;
    795          
    796            // Hold off interrupts
    797            HAL_ENTER_CRITICAL_SECTION(intState);
   \   00000D   A2AF         MOV     C,0xa8.7
   \   00000F   E4           CLR     A
   \   000010   33           RLC     A
   \   000011   F8           MOV     R0,A
   \   000012   C2AF         CLR     0xa8.7
    798          
    799            // If first message in queue
    800            if ( *q_ptr == NULL )
   \   000014   8E82         MOV     DPL,R6
   \   000016   8F83         MOV     DPH,R7
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V2,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V3,A
   \   00001F   E5..         MOV     A,?V2
   \   000021   45..         ORL     A,?V3
   \   000023   700D         JNZ     ??osal_msg_enqueue_max_0
    801            {
    802              *q_ptr = msg_ptr;
   \   000025   8E82         MOV     DPL,R6
   \   000027   8F83         MOV     DPH,R7
   \   000029   EC           MOV     A,R4
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   ED           MOV     A,R5
   \   00002D   F0           MOVX    @DPTR,A
    803              ret = TRUE;
   \   00002E   7901         MOV     R1,#0x1
   \   000030   8054         SJMP    ??osal_msg_enqueue_max_1
    804            }
    805            else
    806            {
    807              // Find end of queue or max
    808              list = *q_ptr;
   \                     ??osal_msg_enqueue_max_0:
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V2,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V3,A
   \   00003D   AA..         MOV     R2,?V2
   \   00003F   AB..         MOV     R3,?V3
    809              max--;
   \   000041   15..         DEC     ?V0
    810              while ( (OSAL_MSG_NEXT( list ) != NULL) && (max > 0) )
   \                     ??osal_msg_enqueue_max_2:
   \   000043   EA           MOV     A,R2
   \   000044   24FB         ADD     A,#-0x5
   \   000046   F582         MOV     DPL,A
   \   000048   EB           MOV     A,R3
   \   000049   34FF         ADDC    A,#-0x1
   \   00004B   F583         MOV     DPH,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F5..         MOV     ?V2,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F5..         MOV     ?V3,A
   \   000054   E5..         MOV     A,?V2
   \   000056   45..         ORL     A,?V3
   \   000058   6017         JZ      ??osal_msg_enqueue_max_3
   \   00005A   E5..         MOV     A,?V0
   \   00005C   6013         JZ      ??osal_msg_enqueue_max_3
    811              {
    812                list = OSAL_MSG_NEXT( list );
   \   00005E   EA           MOV     A,R2
   \   00005F   24FB         ADD     A,#-0x5
   \   000061   F582         MOV     DPL,A
   \   000063   EB           MOV     A,R3
   \   000064   34FF         ADDC    A,#-0x1
   \   000066   F583         MOV     DPH,A
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FA           MOV     R2,A
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   FB           MOV     R3,A
    813                max--;
   \   00006D   15..         DEC     ?V0
   \   00006F   80D2         SJMP    ??osal_msg_enqueue_max_2
    814              }
    815          
    816              // Add message to end of queue if max not reached
    817              if ( max != 0 )
   \                     ??osal_msg_enqueue_max_3:
   \   000071   E5..         MOV     A,?V0
   \   000073   6011         JZ      ??osal_msg_enqueue_max_1
    818              {
    819                OSAL_MSG_NEXT( list ) = msg_ptr;
   \   000075   EA           MOV     A,R2
   \   000076   24FB         ADD     A,#-0x5
   \   000078   F582         MOV     DPL,A
   \   00007A   EB           MOV     A,R3
   \   00007B   34FF         ADDC    A,#-0x1
   \   00007D   F583         MOV     DPH,A
   \   00007F   EC           MOV     A,R4
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   ED           MOV     A,R5
   \   000083   F0           MOVX    @DPTR,A
    820                ret = TRUE;
   \   000084   7901         MOV     R1,#0x1
    821              }
    822            }
    823          
    824            // Re-enable interrupts
    825            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osal_msg_enqueue_max_1:
   \   000086   88..         MOV     ?V1,R0
   \   000088   E8           MOV     A,R0
   \   000089   A2E0         MOV     C,0xE0 /* A   */.0
   \   00008B   92AF         MOV     0xa8.7,C
    826          
    827            return ret;
   \   00008D   7F04         MOV     R7,#0x4
   \   00008F   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000092                REQUIRE _A_IEN0
    828          }
    829          
    830          /*********************************************************************
    831           * @fn      osal_set_event
    832           *
    833           * @brief
    834           *
    835           *    This function is called to set the event flags for a task.  The
    836           *    event passed in is OR'd into the task's event variable.
    837           *
    838           * @param   uint8 task_id - receiving tasks ID
    839           * @param   uint8 event_flag - what event to set
    840           *
    841           * @return  SUCCESS, INVALID_TASK
    842           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    843          uint8 osal_set_event( uint8 task_id, uint16 event_flag )
   \                     osal_set_event:
    844          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    845            if ( task_id < tasksCnt )
   \   000007   90....       MOV     DPTR,#tasksCnt
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   EE           MOV     A,R6
   \   00000D   C3           CLR     C
   \   00000E   98           SUBB    A,R0
   \   00000F   503F         JNC     ??osal_set_event_0
    846            {
    847              halIntState_t   intState;
    848              HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
   \   000011   A2AF         MOV     C,0xa8.7
   \   000013   E4           CLR     A
   \   000014   33           RLC     A
   \   000015   FC           MOV     R4,A
   \   000016   C2AF         CLR     0xa8.7
    849              tasksEvents[task_id] |= event_flag;  // Stuff the event bit(s)
   \   000018   EE           MOV     A,R6
   \   000019   F8           MOV     R0,A
   \   00001A   7900         MOV     R1,#0x0
   \   00001C   E8           MOV     A,R0
   \   00001D   75F002       MOV     B,#0x2
   \   000020   A4           MUL     AB
   \   000021   C8           XCH     A,R0
   \   000022   ADF0         MOV     R5,B
   \   000024   75F000       MOV     B,#0x0
   \   000027   A4           MUL     AB
   \   000028   2D           ADD     A,R5
   \   000029   FD           MOV     R5,A
   \   00002A   75F002       MOV     B,#0x2
   \   00002D   E9           MOV     A,R1
   \   00002E   A4           MUL     AB
   \   00002F   2D           ADD     A,R5
   \   000030   F9           MOV     R1,A
   \   000031   90....       MOV     DPTR,#tasksEvents
   \   000034   E0           MOVX    A,@DPTR
   \   000035   28           ADD     A,R0
   \   000036   FD           MOV     R5,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   39           ADDC    A,R1
   \   00003A   8D82         MOV     DPL,R5
   \   00003C   F583         MOV     DPH,A
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   4A           ORL     A,R2
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   4B           ORL     A,R3
   \   000044   F0           MOVX    @DPTR,A
    850              HAL_EXIT_CRITICAL_SECTION(intState);     // Release interrupts
   \   000045   EC           MOV     A,R4
   \   000046   F8           MOV     R0,A
   \   000047   EC           MOV     A,R4
   \   000048   A2E0         MOV     C,0xE0 /* A   */.0
   \   00004A   92AF         MOV     0xa8.7,C
    851              return ( SUCCESS );
   \   00004C   7900         MOV     R1,#0x0
   \   00004E   8002         SJMP    ??osal_set_event_1
    852            }
    853             else
    854            {
    855              return ( INVALID_TASK );
   \                     ??osal_set_event_0:
   \   000050   7903         MOV     R1,#0x3
   \                     ??osal_set_event_1:
   \   000052   7F01         MOV     R7,#0x1
   \   000054   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000057                REQUIRE _A_IEN0
    856            }
    857          }
    858          
    859          /*********************************************************************
    860           * @fn      osal_clear_event
    861           *
    862           * @brief
    863           *
    864           *    This function is called to clear the event flags for a task.  The
    865           *    event passed in is masked out of the task's event variable.
    866           *
    867           * @param   uint8 task_id - receiving tasks ID
    868           * @param   uint8 event_flag - what event to set
    869           *
    870           * @return  SUCCESS, INVALID_TASK
    871           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    872          uint8 osal_clear_event( uint8 task_id, uint16 event_flag )
   \                     osal_clear_event:
    873          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    874            if ( task_id < tasksCnt )
   \   000007   90....       MOV     DPTR,#tasksCnt
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   E5..         MOV     A,?V0
   \   00000E   C3           CLR     C
   \   00000F   98           SUBB    A,R0
   \   000010   5045         JNC     ??osal_clear_event_0
    875            {
    876              halIntState_t   intState;
    877              HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
   \   000012   A2AF         MOV     C,0xa8.7
   \   000014   E4           CLR     A
   \   000015   33           RLC     A
   \   000016   FE           MOV     R6,A
   \   000017   C2AF         CLR     0xa8.7
    878              tasksEvents[task_id] &= ~(event_flag);   // clear the event bit(s)
   \   000019   EA           MOV     A,R2
   \   00001A   F4           CPL     A
   \   00001B   FC           MOV     R4,A
   \   00001C   EB           MOV     A,R3
   \   00001D   F4           CPL     A
   \   00001E   FD           MOV     R5,A
   \   00001F   A8..         MOV     R0,?V0
   \   000021   7900         MOV     R1,#0x0
   \   000023   E8           MOV     A,R0
   \   000024   75F002       MOV     B,#0x2
   \   000027   A4           MUL     AB
   \   000028   C8           XCH     A,R0
   \   000029   AFF0         MOV     R7,B
   \   00002B   75F000       MOV     B,#0x0
   \   00002E   A4           MUL     AB
   \   00002F   2F           ADD     A,R7
   \   000030   FF           MOV     R7,A
   \   000031   75F002       MOV     B,#0x2
   \   000034   E9           MOV     A,R1
   \   000035   A4           MUL     AB
   \   000036   2F           ADD     A,R7
   \   000037   F9           MOV     R1,A
   \   000038   90....       MOV     DPTR,#tasksEvents
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   28           ADD     A,R0
   \   00003D   FF           MOV     R7,A
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   39           ADDC    A,R1
   \   000041   8F82         MOV     DPL,R7
   \   000043   F583         MOV     DPH,A
   \   000045   E0           MOVX    A,@DPTR
   \   000046   5C           ANL     A,R4
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   5D           ANL     A,R5
   \   00004B   F0           MOVX    @DPTR,A
    879              HAL_EXIT_CRITICAL_SECTION(intState);     // Release interrupts
   \   00004C   EE           MOV     A,R6
   \   00004D   F8           MOV     R0,A
   \   00004E   EE           MOV     A,R6
   \   00004F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000051   92AF         MOV     0xa8.7,C
    880              return ( SUCCESS );
   \   000053   7900         MOV     R1,#0x0
   \   000055   8002         SJMP    ??osal_clear_event_1
    881            }
    882             else
    883            {
    884              return ( INVALID_TASK );
   \                     ??osal_clear_event_0:
   \   000057   7903         MOV     R1,#0x3
   \                     ??osal_clear_event_1:
   \   000059   7F01         MOV     R7,#0x1
   \   00005B   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00005E                REQUIRE _A_IEN0
    885            }
    886          }
    887          
    888          /*********************************************************************
    889           * @fn      osal_isr_register
    890           *
    891           * @brief
    892           *
    893           *   This function is called to register a service routine with an
    894           *   interrupt. When the interrupt occurs, this service routine is called.
    895           *
    896           * @param   uint8 interrupt_id - Interrupt number
    897           * @param   void (*isr_ptr)( uint8* ) - function pointer to ISR
    898           *
    899           * @return  SUCCESS, INVALID_INTERRUPT_ID,
    900           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    901          uint8 osal_isr_register( uint8 interrupt_id, void (*isr_ptr)( uint8* ) )
   \                     osal_isr_register:
    902          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV     A,R1
   \   000001   F8           MOV     R0,A
    903            // Remove these statements when functionality is complete
    904            (void)interrupt_id;
    905            (void)isr_ptr;
    906            return ( SUCCESS );
   \   000002   7900         MOV     R1,#0x0
   \   000004   02....       LJMP    ?BRET
    907          }
    908          
    909          /*********************************************************************
    910           * @fn      osal_int_enable
    911           *
    912           * @brief
    913           *
    914           *   This function is called to enable an interrupt. Once enabled,
    915           *   occurrence of the interrupt causes the service routine associated
    916           *   with that interrupt to be called.
    917           *
    918           *   If INTS_ALL is the interrupt_id, interrupts (in general) are enabled.
    919           *   If a single interrupt is passed in, then interrupts still have
    920           *   to be enabled with another call to INTS_ALL.
    921           *
    922           * @param   uint8 interrupt_id - Interrupt number
    923           *
    924           * @return  SUCCESS or INVALID_INTERRUPT_ID
    925           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    926          uint8 osal_int_enable( uint8 interrupt_id )
   \                     osal_int_enable:
    927          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV     A,R1
   \   000001   F8           MOV     R0,A
    928          
    929            if ( interrupt_id == INTS_ALL )
   \   000002   74FF         MOV     A,#-0x1
   \   000004   68           XRL     A,R0
   \   000005   7006         JNZ     ??osal_int_enable_0
    930            {
    931              HAL_ENABLE_INTERRUPTS();
   \   000007   D2AF         SETB    0xa8.7
    932              return ( SUCCESS );
   \   000009   7900         MOV     R1,#0x0
   \   00000B   8002         SJMP    ??osal_int_enable_1
    933            }
    934            else
    935            {
    936              return ( INVALID_INTERRUPT_ID );
   \                     ??osal_int_enable_0:
   \   00000D   7907         MOV     R1,#0x7
   \                     ??osal_int_enable_1:
   \   00000F   02....       LJMP    ?BRET
   \   000012                REQUIRE _A_IEN0
    937            }
    938          }
    939          
    940          /*********************************************************************
    941           * @fn      osal_int_disable
    942           *
    943           * @brief
    944           *
    945           *   This function is called to disable an interrupt. When a disabled
    946           *   interrupt occurs, the service routine associated with that
    947           *   interrupt is not called.
    948           *
    949           *   If INTS_ALL is the interrupt_id, interrupts (in general) are disabled.
    950           *   If a single interrupt is passed in, then just that interrupt is disabled.
    951           *
    952           * @param   uint8 interrupt_id - Interrupt number
    953           *
    954           * @return  SUCCESS or INVALID_INTERRUPT_ID
    955           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    956          uint8 osal_int_disable( uint8 interrupt_id )
   \                     osal_int_disable:
    957          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV     A,R1
   \   000001   F8           MOV     R0,A
    958          
    959            if ( interrupt_id == INTS_ALL )
   \   000002   74FF         MOV     A,#-0x1
   \   000004   68           XRL     A,R0
   \   000005   7006         JNZ     ??osal_int_disable_0
    960            {
    961              HAL_DISABLE_INTERRUPTS();
   \   000007   C2AF         CLR     0xa8.7
    962              return ( SUCCESS );
   \   000009   7900         MOV     R1,#0x0
   \   00000B   8002         SJMP    ??osal_int_disable_1
    963            }
    964            else
    965            {
    966              return ( INVALID_INTERRUPT_ID );
   \                     ??osal_int_disable_0:
   \   00000D   7907         MOV     R1,#0x7
   \                     ??osal_int_disable_1:
   \   00000F   02....       LJMP    ?BRET
   \   000012                REQUIRE _A_IEN0
    967            }
    968          }
    969          
    970          /*********************************************************************
    971           * @fn      osal_init_system
    972           *
    973           * @brief
    974           *
    975           *   This function initializes the "task" system by creating the
    976           *   tasks defined in the task table (OSAL_Tasks.h).
    977           *
    978           * @param   void
    979           *
    980           * @return  SUCCESS
    981           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    982          uint8 osal_init_system( void )
   \                     osal_init_system:
    983          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    984            // Initialize the Memory Allocation System
    985            osal_mem_init();
   \   000004                ; Setup parameters for call to function osal_mem_init
   \   000004   12....       LCALL   ??osal_mem_init?relay; Banked call to: osal_mem_init
    986          
    987            // Initialize the message queue
    988            osal_qHead = NULL;
   \   000007   90....       MOV     DPTR,#osal_qHead
   \   00000A   7400         MOV     A,#0x0
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   7400         MOV     A,#0x0
   \   000010   F0           MOVX    @DPTR,A
    989          
    990            // Initialize the timers
    991            osalTimerInit();
   \   000011                ; Setup parameters for call to function osalTimerInit
   \   000011   12....       LCALL   ??osalTimerInit?relay; Banked call to: osalTimerInit
    992          
    993            // Initialize the Power Management System
    994            osal_pwrmgr_init();
   \   000014                ; Setup parameters for call to function osal_pwrmgr_init
   \   000014   12....       LCALL   ??osal_pwrmgr_init?relay; Banked call to: osal_pwrmgr_init
    995          
    996            // Initialize the system tasks.
    997            osalInitTasks();
   \   000017                ; Setup parameters for call to function osalInitTasks
   \   000017   12....       LCALL   ??osalInitTasks?relay; Banked call to: osalInitTasks
    998          
    999            // Setup efficient search for the first free block of heap.
   1000            osal_mem_kick();
   \   00001A                ; Setup parameters for call to function osal_mem_kick
   \   00001A   12....       LCALL   ??osal_mem_kick?relay; Banked call to: osal_mem_kick
   1001          
   1002            return ( SUCCESS );
   \   00001D   7900         MOV     R1,#0x0
   \   00001F   D083         POP     DPH
   \   000021   D082         POP     DPL
   \   000023   02....       LJMP    ?BRET
   1003          }
   1004          
   1005          /*********************************************************************
   1006           * @fn      osal_start_system
   1007           *
   1008           * @brief
   1009           *
   1010           *   This function is the main loop function of the task system.  It
   1011           *   will look through all task events and call the task_event_processor()
   1012           *   function for the task with the event.  If there are no events (for
   1013           *   all tasks), this function puts the processor into Sleep.
   1014           *   This Function doesn't return.
   1015           *
   1016           * @param   void
   1017           *
   1018           * @return  none
   1019           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1020          void osal_start_system( void )
   \                     osal_start_system:
   1021          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1022          #if !defined ( ZBIT ) && !defined ( UBIT )
   1023            for(;;)  // Forever Loop
   1024          #endif
   1025            {
   1026              osal_run_system();
   \                     ??osal_start_system_0:
   \   000004                ; Setup parameters for call to function osal_run_system
   \   000004   12....       LCALL   ??osal_run_system?relay; Banked call to: osal_run_system
   \   000007   80FB         SJMP    ??osal_start_system_0
   1027            }
   1028          }
   1029            
   1030          /*********************************************************************
   1031           * @fn      osal_run_system
   1032           *
   1033           * @brief
   1034           *
   1035           *   This will make one pass through the OSAL task .
   1036           *
   1037           * @param   void
   1038           *
   1039           * @return  none
   1040           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1041          void osal_run_system( void )
   \                     osal_run_system:
   1042          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   1043            uint8 idx = 0;
   \   000005   75..00       MOV     ?V1,#0x0
   1044          
   1045            osalTimeUpdate();
   \   000008                ; Setup parameters for call to function osalTimeUpdate
   \   000008   12....       LCALL   ??osalTimeUpdate?relay; Banked call to: osalTimeUpdate
   1046            Hal_ProcessPoll();  // This replaces MT_SerialPoll() and osal_check_timer().
   \   00000B                ; Setup parameters for call to function Hal_ProcessPoll
   \   00000B   12....       LCALL   ??Hal_ProcessPoll?relay; Banked call to: Hal_ProcessPoll
   1047          
   1048            do {
   1049              if (tasksEvents[idx])  // Task is highest priority that is ready.
   \                     ??osal_run_system_0:
   \   00000E   A8..         MOV     R0,?V1
   \   000010   7900         MOV     R1,#0x0
   \   000012   E8           MOV     A,R0
   \   000013   75F002       MOV     B,#0x2
   \   000016   A4           MUL     AB
   \   000017   C8           XCH     A,R0
   \   000018   AAF0         MOV     R2,B
   \   00001A   75F000       MOV     B,#0x0
   \   00001D   A4           MUL     AB
   \   00001E   2A           ADD     A,R2
   \   00001F   FA           MOV     R2,A
   \   000020   75F002       MOV     B,#0x2
   \   000023   E9           MOV     A,R1
   \   000024   A4           MUL     AB
   \   000025   2A           ADD     A,R2
   \   000026   F9           MOV     R1,A
   \   000027   90....       MOV     DPTR,#tasksEvents
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   28           ADD     A,R0
   \   00002C   FA           MOV     R2,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   39           ADDC    A,R1
   \   000030   8A82         MOV     DPL,R2
   \   000032   F583         MOV     DPH,A
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F8           MOV     R0,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F9           MOV     R1,A
   \   000039   E8           MOV     A,R0
   \   00003A   49           ORL     A,R1
   \   00003B   7011         JNZ     ??osal_run_system_1
   1050              {
   1051                break;
   1052              }
   1053            } while (++idx < tasksCnt);
   \   00003D   7401         MOV     A,#0x1
   \   00003F   25..         ADD     A,?V1
   \   000041   F8           MOV     R0,A
   \   000042   88..         MOV     ?V1,R0
   \   000044   90....       MOV     DPTR,#tasksCnt
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   E8           MOV     A,R0
   \   00004A   C3           CLR     C
   \   00004B   99           SUBB    A,R1
   \   00004C   40C0         JC      ??osal_run_system_0
   1054          
   1055            if (idx < tasksCnt)
   \                     ??osal_run_system_1:
   \   00004E   90....       MOV     DPTR,#tasksCnt
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F8           MOV     R0,A
   \   000053   E5..         MOV     A,?V1
   \   000055   C3           CLR     C
   \   000056   98           SUBB    A,R0
   \   000057   4003         JC      $+5
   \   000059   02....       LJMP    ??osal_run_system_2 & 0xFFFF
   1056            {
   1057              uint16 events;
   1058              halIntState_t intState;
   1059          
   1060              HAL_ENTER_CRITICAL_SECTION(intState);
   \   00005C   A2AF         MOV     C,0xa8.7
   \   00005E   E4           CLR     A
   \   00005F   33           RLC     A
   \   000060   F5..         MOV     ?V0,A
   \   000062   C2AF         CLR     0xa8.7
   1061              events = tasksEvents[idx];
   \   000064   A8..         MOV     R0,?V1
   \   000066   7900         MOV     R1,#0x0
   \   000068   E8           MOV     A,R0
   \   000069   75F002       MOV     B,#0x2
   \   00006C   A4           MUL     AB
   \   00006D   C8           XCH     A,R0
   \   00006E   AAF0         MOV     R2,B
   \   000070   75F000       MOV     B,#0x0
   \   000073   A4           MUL     AB
   \   000074   2A           ADD     A,R2
   \   000075   FA           MOV     R2,A
   \   000076   75F002       MOV     B,#0x2
   \   000079   E9           MOV     A,R1
   \   00007A   A4           MUL     AB
   \   00007B   2A           ADD     A,R2
   \   00007C   F9           MOV     R1,A
   \   00007D   90....       MOV     DPTR,#tasksEvents
   \   000080   E0           MOVX    A,@DPTR
   \   000081   28           ADD     A,R0
   \   000082   FA           MOV     R2,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   39           ADDC    A,R1
   \   000086   8A82         MOV     DPL,R2
   \   000088   F583         MOV     DPH,A
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   FE           MOV     R6,A
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   FF           MOV     R7,A
   1062              tasksEvents[idx] = 0;  // Clear the Events for this task.
   \   00008F   A8..         MOV     R0,?V1
   \   000091   7900         MOV     R1,#0x0
   \   000093   E8           MOV     A,R0
   \   000094   75F002       MOV     B,#0x2
   \   000097   A4           MUL     AB
   \   000098   C8           XCH     A,R0
   \   000099   AAF0         MOV     R2,B
   \   00009B   75F000       MOV     B,#0x0
   \   00009E   A4           MUL     AB
   \   00009F   2A           ADD     A,R2
   \   0000A0   FA           MOV     R2,A
   \   0000A1   75F002       MOV     B,#0x2
   \   0000A4   E9           MOV     A,R1
   \   0000A5   A4           MUL     AB
   \   0000A6   2A           ADD     A,R2
   \   0000A7   F9           MOV     R1,A
   \   0000A8   90....       MOV     DPTR,#tasksEvents
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   28           ADD     A,R0
   \   0000AD   FA           MOV     R2,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   39           ADDC    A,R1
   \   0000B1   8A82         MOV     DPL,R2
   \   0000B3   F583         MOV     DPH,A
   \   0000B5   7400         MOV     A,#0x0
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   7400         MOV     A,#0x0
   \   0000BB   F0           MOVX    @DPTR,A
   1063              HAL_EXIT_CRITICAL_SECTION(intState);
   \   0000BC   85....       MOV     ?V4,?V0
   \   0000BF   E5..         MOV     A,?V0
   \   0000C1   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000C3   92AF         MOV     0xa8.7,C
   1064          
   1065              events = (tasksArr[idx])( idx, events );
   \   0000C5                ; Setup parameters for indirect call
   \   0000C5   EE           MOV     A,R6
   \   0000C6   FA           MOV     R2,A
   \   0000C7   EF           MOV     A,R7
   \   0000C8   FB           MOV     R3,A
   \   0000C9   A9..         MOV     R1,?V1
   \   0000CB   AC..         MOV     R4,?V1
   \   0000CD   7D00         MOV     R5,#0x0
   \   0000CF   EC           MOV     A,R4
   \   0000D0   75F002       MOV     B,#0x2
   \   0000D3   A4           MUL     AB
   \   0000D4   CC           XCH     A,R4
   \   0000D5   A8F0         MOV     R0,B
   \   0000D7   75F000       MOV     B,#0x0
   \   0000DA   A4           MUL     AB
   \   0000DB   28           ADD     A,R0
   \   0000DC   F8           MOV     R0,A
   \   0000DD   75F002       MOV     B,#0x2
   \   0000E0   ED           MOV     A,R5
   \   0000E1   A4           MUL     AB
   \   0000E2   28           ADD     A,R0
   \   0000E3   FD           MOV     R5,A
   \   0000E4   74..         MOV     A,#tasksArr & 0xff
   \   0000E6   2C           ADD     A,R4
   \   0000E7   F582         MOV     DPL,A
   \   0000E9   74..         MOV     A,#(tasksArr >> 8) & 0xff
   \   0000EB   3D           ADDC    A,R5
   \   0000EC   F583         MOV     DPH,A
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F8           MOV     R0,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   F583         MOV     DPH,A
   \   0000F4   8882         MOV     DPL,R0
   \   0000F6   12....       LCALL   ?CALL_IND
   \   0000F9   8A..         MOV     ?V2,R2
   \   0000FB   8B..         MOV     ?V3,R3
   \   0000FD   AE..         MOV     R6,?V2
   \   0000FF   AF..         MOV     R7,?V3
   1066          
   1067              HAL_ENTER_CRITICAL_SECTION(intState);
   \   000101   A2AF         MOV     C,0xa8.7
   \   000103   E4           CLR     A
   \   000104   33           RLC     A
   \   000105   F5..         MOV     ?V0,A
   \   000107   C2AF         CLR     0xa8.7
   1068              tasksEvents[idx] |= events;  // Add back unprocessed events to the current task.
   \   000109   A8..         MOV     R0,?V1
   \   00010B   7900         MOV     R1,#0x0
   \   00010D   E8           MOV     A,R0
   \   00010E   75F002       MOV     B,#0x2
   \   000111   A4           MUL     AB
   \   000112   C8           XCH     A,R0
   \   000113   AAF0         MOV     R2,B
   \   000115   75F000       MOV     B,#0x0
   \   000118   A4           MUL     AB
   \   000119   2A           ADD     A,R2
   \   00011A   FA           MOV     R2,A
   \   00011B   75F002       MOV     B,#0x2
   \   00011E   E9           MOV     A,R1
   \   00011F   A4           MUL     AB
   \   000120   2A           ADD     A,R2
   \   000121   F9           MOV     R1,A
   \   000122   90....       MOV     DPTR,#tasksEvents
   \   000125   E0           MOVX    A,@DPTR
   \   000126   28           ADD     A,R0
   \   000127   FA           MOV     R2,A
   \   000128   A3           INC     DPTR
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   39           ADDC    A,R1
   \   00012B   8A82         MOV     DPL,R2
   \   00012D   F583         MOV     DPH,A
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   4E           ORL     A,R6
   \   000131   F0           MOVX    @DPTR,A
   \   000132   A3           INC     DPTR
   \   000133   E0           MOVX    A,@DPTR
   \   000134   4F           ORL     A,R7
   \   000135   F0           MOVX    @DPTR,A
   1069              HAL_EXIT_CRITICAL_SECTION(intState);
   \   000136   A8..         MOV     R0,?V0
   \   000138   E5..         MOV     A,?V0
   \   00013A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00013C   92AF         MOV     0xa8.7,C
   1070            }
   1071          #if defined( POWER_SAVING )
   1072            else  // Complete pass through all task events with no activity?
   1073            {
   1074              osal_pwrmgr_powerconserve();  // Put the processor/system into sleep
   1075            }
   1076          #endif
   1077          
   1078            /* Yield in case cooperative scheduling is being used. */
   1079          #if defined (configUSE_PREEMPTION) && (configUSE_PREEMPTION == 0)
   1080            {
   1081              osal_task_yield();
   1082            }
   1083          #endif
   1084          }
   \                     ??osal_run_system_2:
   \   00013E   7F05         MOV     R7,#0x5
   \   000140   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000143                REQUIRE _A_IEN0
   1085          
   1086          /*********************************************************************
   1087           * @fn      osal_buffer_uint32
   1088           *
   1089           * @brief
   1090           *
   1091           *   Buffer an uint32 value - LSB first.
   1092           *
   1093           * @param   buf - buffer
   1094           * @param   val - uint32 value
   1095           *
   1096           * @return  pointer to end of destination buffer
   1097           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1098          uint8* osal_buffer_uint32( uint8 *buf, uint32 val )
   \                     osal_buffer_uint32:
   1099          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   7410         MOV     A,#0x10
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   78..         MOV     R0,#?V4
   \   00000C   12....       LCALL   ?L_MOV_X
   1100            *buf++ = BREAK_UINT32( val, 0 );
   \   00000F   A8..         MOV     R0,?V4
   \   000011   A9..         MOV     R1,?V5
   \   000013   E8           MOV     A,R0
   \   000014   C0E0         PUSH    A
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   D0E0         POP     A
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   A3           INC     DPTR
   \   000022   AA82         MOV     R2,DPL
   \   000024   AB83         MOV     R3,DPH
   1101            *buf++ = BREAK_UINT32( val, 1 );
   \   000026   85....       MOV     ?V0,?V4
   \   000029   85....       MOV     ?V1,?V5
   \   00002C   E4           CLR     A
   \   00002D   C5..         XCH     A,?V1
   \   00002F   F5..         MOV     ?V0,A
   \   000031   E5..         MOV     A,?V0
   \   000033   C0E0         PUSH    A
   \   000035   8A82         MOV     DPL,R2
   \   000037   8B83         MOV     DPH,R3
   \   000039   D0E0         POP     A
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   A3           INC     DPTR
   \   000041   AA82         MOV     R2,DPL
   \   000043   AB83         MOV     R3,DPH
   1102            *buf++ = BREAK_UINT32( val, 2 );
   \   000045   85....       MOV     ?V0,?V4
   \   000048   85....       MOV     ?V1,?V5
   \   00004B   85....       MOV     ?V2,?V6
   \   00004E   85....       MOV     ?V3,?V7
   \   000051   7410         MOV     A,#0x10
   \   000053   78..         MOV     R0,#?V0
   \   000055   12....       LCALL   ?UL_SHR
   \   000058   E5..         MOV     A,?V0
   \   00005A   C0E0         PUSH    A
   \   00005C   8A82         MOV     DPL,R2
   \   00005E   8B83         MOV     DPH,R3
   \   000060   D0E0         POP     A
   \   000062   F0           MOVX    @DPTR,A
   \   000063   8A82         MOV     DPL,R2
   \   000065   8B83         MOV     DPH,R3
   \   000067   A3           INC     DPTR
   \   000068   AA82         MOV     R2,DPL
   \   00006A   AB83         MOV     R3,DPH
   1103            *buf++ = BREAK_UINT32( val, 3 );
   \   00006C   85....       MOV     ?V0,?V4
   \   00006F   85....       MOV     ?V1,?V5
   \   000072   85....       MOV     ?V2,?V6
   \   000075   85....       MOV     ?V3,?V7
   \   000078   7418         MOV     A,#0x18
   \   00007A   78..         MOV     R0,#?V0
   \   00007C   12....       LCALL   ?UL_SHR
   \   00007F   E5..         MOV     A,?V0
   \   000081   C0E0         PUSH    A
   \   000083   8A82         MOV     DPL,R2
   \   000085   8B83         MOV     DPH,R3
   \   000087   D0E0         POP     A
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   8A82         MOV     DPL,R2
   \   00008C   8B83         MOV     DPH,R3
   \   00008E   A3           INC     DPTR
   \   00008F   AA82         MOV     R2,DPL
   \   000091   AB83         MOV     R3,DPH
   1104          
   1105            return buf;
   \   000093   7F08         MOV     R7,#0x8
   \   000095   02....       LJMP    ?BANKED_LEAVE_XDATA
   1106          }
   1107          
   1108          /*********************************************************************
   1109           * @fn      osal_buffer_uint24
   1110           *
   1111           * @brief
   1112           *
   1113           *   Buffer an uint24 value - LSB first. Note that type uint24 is
   1114           *   typedef to uint32 in comdef.h
   1115           *
   1116           * @param   buf - buffer
   1117           * @param   val - uint24 value
   1118           *
   1119           * @return  pointer to end of destination buffer
   1120           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1121          uint8* osal_buffer_uint24( uint8 *buf, uint24 val )
   \                     osal_buffer_uint24:
   1122          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   7410         MOV     A,#0x10
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   78..         MOV     R0,#?V4
   \   00000C   12....       LCALL   ?L_MOV_X
   1123            *buf++ = BREAK_UINT32( val, 0 );
   \   00000F   A8..         MOV     R0,?V4
   \   000011   A9..         MOV     R1,?V5
   \   000013   E8           MOV     A,R0
   \   000014   C0E0         PUSH    A
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   D0E0         POP     A
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   A3           INC     DPTR
   \   000022   AA82         MOV     R2,DPL
   \   000024   AB83         MOV     R3,DPH
   1124            *buf++ = BREAK_UINT32( val, 1 );
   \   000026   85....       MOV     ?V0,?V4
   \   000029   85....       MOV     ?V1,?V5
   \   00002C   E4           CLR     A
   \   00002D   C5..         XCH     A,?V1
   \   00002F   F5..         MOV     ?V0,A
   \   000031   E5..         MOV     A,?V0
   \   000033   C0E0         PUSH    A
   \   000035   8A82         MOV     DPL,R2
   \   000037   8B83         MOV     DPH,R3
   \   000039   D0E0         POP     A
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   A3           INC     DPTR
   \   000041   AA82         MOV     R2,DPL
   \   000043   AB83         MOV     R3,DPH
   1125            *buf++ = BREAK_UINT32( val, 2 );
   \   000045   85....       MOV     ?V0,?V4
   \   000048   85....       MOV     ?V1,?V5
   \   00004B   85....       MOV     ?V2,?V6
   \   00004E   85....       MOV     ?V3,?V7
   \   000051   7410         MOV     A,#0x10
   \   000053   78..         MOV     R0,#?V0
   \   000055   12....       LCALL   ?UL_SHR
   \   000058   E5..         MOV     A,?V0
   \   00005A   C0E0         PUSH    A
   \   00005C   8A82         MOV     DPL,R2
   \   00005E   8B83         MOV     DPH,R3
   \   000060   D0E0         POP     A
   \   000062   F0           MOVX    @DPTR,A
   \   000063   8A82         MOV     DPL,R2
   \   000065   8B83         MOV     DPH,R3
   \   000067   A3           INC     DPTR
   \   000068   AA82         MOV     R2,DPL
   \   00006A   AB83         MOV     R3,DPH
   1126          
   1127            return buf;
   \   00006C   7F08         MOV     R7,#0x8
   \   00006E   02....       LJMP    ?BANKED_LEAVE_XDATA
   1128          }
   1129          
   1130          /*********************************************************************
   1131           * @fn      osal_isbufset
   1132           *
   1133           * @brief
   1134           *
   1135           *   Is all of the array elements set to a value?
   1136           *
   1137           * @param   buf - buffer to check
   1138           * @param   val - value to check each array element for
   1139           * @param   len - length to check
   1140           *
   1141           * @return  TRUE if all "val"
   1142           *          FALSE otherwise
   1143           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1144          uint8 osal_isbufset( uint8 *buf, uint8 val, uint8 len )
   \                     osal_isbufset:
   1145          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1146            uint8 x;
   1147            
   1148            if ( buf == NULL )
   \   000007   EA           MOV     A,R2
   \   000008   4B           ORL     A,R3
   \   000009   7004         JNZ     ??osal_isbufset_0
   1149            {
   1150              return ( FALSE );
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   8020         SJMP    ??osal_isbufset_1
   1151            }
   1152            
   1153            for ( x = 0; x < len; x++ )
   \                     ??osal_isbufset_0:
   \   00000F   7D00         MOV     R5,#0x0
   \                     ??osal_isbufset_2:
   \   000011   ED           MOV     A,R5
   \   000012   C3           CLR     C
   \   000013   9C           SUBB    A,R4
   \   000014   5017         JNC     ??osal_isbufset_3
   1154            {
   1155              // Check for non-initialized value
   1156              if ( buf[x] != val )
   \   000016   ED           MOV     A,R5
   \   000017   F8           MOV     R0,A
   \   000018   7900         MOV     R1,#0x0
   \   00001A   EA           MOV     A,R2
   \   00001B   28           ADD     A,R0
   \   00001C   F582         MOV     DPL,A
   \   00001E   EB           MOV     A,R3
   \   00001F   39           ADDC    A,R1
   \   000020   F583         MOV     DPH,A
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6E           XRL     A,R6
   \   000024   6004         JZ      ??osal_isbufset_4
   1157              {
   1158                return ( FALSE );
   \   000026   7900         MOV     R1,#0x0
   \   000028   8005         SJMP    ??osal_isbufset_1
   1159              }
   1160            }
   \                     ??osal_isbufset_4:
   \   00002A   0D           INC     R5
   \   00002B   80E4         SJMP    ??osal_isbufset_2
   1161            return ( TRUE );
   \                     ??osal_isbufset_3:
   \   00002D   7901         MOV     R1,#0x1
   \                     ??osal_isbufset_1:
   \   00002F   7F01         MOV     R7,#0x1
   \   000031   02....       LJMP    ?BANKED_LEAVE_XDATA
   1162          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_strlen?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_strlen

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_memcpy?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_memcpy

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_revmemcpy?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_revmemcpy

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_memdup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_memdup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_memcmp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_memcmp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_memset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_memset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_build_uint16?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_build_uint16

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_build_uint32?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_build_uint32

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_ltoa?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _ltoa

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_rand?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_rand

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_msg_allocate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_allocate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_msg_deallocate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_deallocate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_msg_send?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_send

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_msg_receive?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_receive

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_msg_find?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_find

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_msg_enqueue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_enqueue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_msg_dequeue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_dequeue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_msg_push?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_push

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_msg_extract?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_extract

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_msg_enqueue_max?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_enqueue_max

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_set_event?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_set_event

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_clear_event?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_clear_event

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_isr_register?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_isr_register

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_int_enable?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_int_enable

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_int_disable?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_int_disable

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_init_system?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_init_system

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_start_system?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_start_system

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_run_system?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_run_system

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_buffer_uint32?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_buffer_uint32

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_buffer_uint24?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_buffer_uint24

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_isbufset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_isbufset

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">_1`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">_2`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0">`:
   \   000000   3000         DB "0"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_5f5e100:
   \   000000   00E1F505     DD 100000000
   1163          
   1164          
   1165          /*********************************************************************
   1166          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     60   _ltoa
        0     58   -> _itoa
        0     58   -> strcat
        0     58   -> strcpy
        0     58   -> strlen
      1     20   osal_buffer_uint24
      1     20   osal_buffer_uint32
      2      0   osal_build_uint16
      0     16   osal_build_uint32
      0     23   osal_clear_event
      2      0   osal_init_system
        2      0   -> osalInitTasks
        2      0   -> osalTimerInit
        2      0   -> osal_mem_init
        2      0   -> osal_mem_kick
        2      0   -> osal_pwrmgr_init
      0      0   osal_int_disable
      0      0   osal_int_enable
      0      9   osal_isbufset
      0      0   osal_isr_register
      0     23   osal_memcmp
      1     35   osal_memcpy
      0     19   osal_memdup
        0     16   -> osal_mem_alloc
        0     19   -> osal_memcpy
      0     14   osal_memset
        0     14   -> memset
      0     12   osal_msg_allocate
        0     12   -> osal_mem_alloc
      0     19   osal_msg_deallocate
        0     10   -> osal_mem_free
      0      9   osal_msg_dequeue
      0     18   osal_msg_enqueue
      0     12   osal_msg_enqueue_max
      0     26   osal_msg_extract
      0      9   osal_msg_find
      0      9   osal_msg_push
      0     16   osal_msg_receive
        0     14   -> osal_clear_event
        0     16   -> osal_msg_extract
        0     14   -> osal_set_event
      1      9   osal_msg_send
        0      9   -> osal_msg_deallocate
        0      9   -> osal_msg_enqueue
        0      9   -> osal_set_event
      2      0   osal_rand
        2      0   -> Onboard_rand
      1     19   osal_revmemcpy
      0     13   osal_run_system
        0     13   -> Hal_ProcessPoll
        0     13   -> osalTimeUpdate
      0     23   osal_set_event
      2      0   osal_start_system
        2      0   -> osal_run_system
      0      9   osal_strlen
        0      9   -> strlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant "">
      10  ?<Constant "">_1
      10  ?<Constant "">_2
       2  ?<Constant "0">
       6  ??_ltoa?relay
       6  ??osal_buffer_uint24?relay
       6  ??osal_buffer_uint32?relay
       6  ??osal_build_uint16?relay
       6  ??osal_build_uint32?relay
       6  ??osal_clear_event?relay
       6  ??osal_init_system?relay
       6  ??osal_int_disable?relay
       6  ??osal_int_enable?relay
       6  ??osal_isbufset?relay
       6  ??osal_isr_register?relay
       6  ??osal_memcmp?relay
       6  ??osal_memcpy?relay
       6  ??osal_memdup?relay
       6  ??osal_memset?relay
       6  ??osal_msg_allocate?relay
       6  ??osal_msg_deallocate?relay
       6  ??osal_msg_dequeue?relay
       6  ??osal_msg_enqueue?relay
       6  ??osal_msg_enqueue_max?relay
       6  ??osal_msg_extract?relay
       6  ??osal_msg_find?relay
       6  ??osal_msg_push?relay
       6  ??osal_msg_receive?relay
       6  ??osal_msg_send?relay
       6  ??osal_rand?relay
       6  ??osal_revmemcpy?relay
       6  ??osal_run_system?relay
       6  ??osal_set_event?relay
       6  ??osal_start_system?relay
       6  ??osal_strlen?relay
       1  _A_IEN0
       4  __Constant_2710
       4  __Constant_5f5e100
     989  _ltoa
     113  osal_buffer_uint24
     152  osal_buffer_uint32
      37  osal_build_uint16
     292  osal_build_uint32
      94  osal_clear_event
      38  osal_init_system
      18  osal_int_disable
      18  osal_int_enable
      52  osal_isbufset
       7  osal_isr_register
     174  osal_memcmp
      93  osal_memcpy
      78  osal_memdup
      41  osal_memset
      98  osal_msg_allocate
      62  osal_msg_deallocate
     112  osal_msg_dequeue
     131  osal_msg_enqueue
     146  osal_msg_enqueue_max
     139  osal_msg_extract
      83  osal_msg_find
      57  osal_msg_push
     165  osal_msg_receive
     133  osal_msg_send
       2  osal_qHead
      14  osal_rand
     109  osal_revmemcpy
     323  osal_run_system
      87  osal_set_event
       9  osal_start_system
      21  osal_strlen

 
 3 885 bytes in segment BANKED_CODE
   186 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
    40 bytes in segment XDATA_ROM_C
     2 bytes in segment XDATA_Z
 
 4 071 bytes of CODE  memory
    32 bytes of CONST memory (+ 8 bytes shared)
     0 bytes of DATA  memory (+ 1 byte  shared)
     2 bytes of XDATA memory

Errors: none
Warnings: none
