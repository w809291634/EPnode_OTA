###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:45
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\stack\zdo\ZDObject.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\stack\zdo\ZDObject.c"
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        XLAB -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\ZDObject.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\ZDObject.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2010-06-28 16:07:20 -0700 (Mon, 28 Jun 2010) $
      4            Revision:       $Revision: 22834 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          #if defined MT_ZDO_CB_FUNC
     63          #include "MT.h"
     64          #endif
     65          
     66          #if defined( LCD_SUPPORTED )
     67            #include "OnBoard.h"
     68          #endif
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          
     73          /*********************************************************************
     74           * MACROS
     75           */
     76          
     77          /*********************************************************************
     78           * CONSTANTS
     79           */
     80          // NLME Stub Implementations
     81          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     82          
     83          // Status fields used by ZDO_ProcessMgmtRtgReq
     84          #define ZDO_MGMT_RTG_ENTRY_ACTIVE             0x00
     85          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY 0x01
     86          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED   0x02
     87          #define ZDO_MGMT_RTG_ENTRY_INACTIVE           0x03
     88          
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          #if defined ( REFLECTOR )
     93          typedef struct
     94          {
     95            byte SrcTransSeq;
     96            zAddrType_t SrcAddr;
     97            uint16 LocalCoordinator;
     98            byte epIntf;
     99            uint16 ProfileID;
    100            byte numInClusters;
    101            uint16 *inClusters;
    102            byte numOutClusters;
    103            uint16 *outClusters;
    104            byte SecurityUse;
    105            byte status;
    106          } ZDO_EDBind_t;
    107          #endif // defined ( REFLECTOR )
    108          
    109          enum
    110          {
    111            ZDMATCH_INIT,           // Initialized
    112            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    113            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    114          };
    115          
    116          enum
    117          {
    118            ZDMATCH_SENDING_NOT,
    119            ZDMATCH_SENDING_UNBIND,
    120            ZDMATCH_SENDING_BIND
    121          };
    122          
    123          /*********************************************************************
    124           * GLOBAL VARIABLES
    125           */
    126          
    127          /*********************************************************************
    128           * EXTERNAL VARIABLES
    129           */
    130          
    131          /*********************************************************************
    132           * EXTERNAL FUNCTIONS
    133           */
    134          
    135          /*********************************************************************
    136           * LOCAL VARIABLES
    137           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    139          
    140          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    142          #endif
    143          
    144          #if defined ( MANAGED_SCAN )
    145            uint32 managedScanNextChannel = 0;
    146            uint32 managedScanChannelMask = 0;
    147            uint8  managedScanTimesPerChannel = 0;
    148          #endif
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    151          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    153          
    154          /*********************************************************************
    155           * LOCAL FUNCTIONS
    156           */
    157          static void ZDODeviceSetup( void );
    158          #if defined ( MANAGED_SCAN )
    159            static void ZDOManagedScan_Next( void );
    160          #endif
    161          #if defined ( REFLECTOR )
    162            static void ZDO_RemoveEndDeviceBind( void );
    163            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    164          #endif
    165          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    166                                          byte numList2, uint16 *list2, uint16 *pMatches );
    167          static void ZDO_RemoveMatchMemory( void );
    168          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    169          static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    170          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    171          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    172          
    173          /*********************************************************************
    174           * @fn          ZDO_Init
    175           *
    176           * @brief       ZDObject and ZDProfile initialization.
    177           *
    178           * @param       none
    179           *
    180           * @return      none
    181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          void ZDO_Init( void )
   \                     ZDO_Init:
    183          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    184            // Initialize ZD items
    185            #if defined ( REFLECTOR )
    186            ZDO_EDBind = NULL;
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   7400         MOV     A,#0x0
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   7400         MOV     A,#0x0
   \   00000D   F0           MOVX    @DPTR,A
    187            #endif
    188          
    189            // Initialize default ZDO_UseExtendedPANID to the APS one.
    190            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000E                ; Setup parameters for call to function sAddrExtCpy
   \   00000E   7C..         MOV     R4,#AIB_apsUseExtendedPANID & 0xff
   \   000010   7D..         MOV     R5,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   000012   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000014   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000016   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
    191          
    192            // Setup the device - type of device to create.
    193            ZDODeviceSetup();
   \   000019                ; Setup parameters for call to function ZDODeviceSetup
   \   000019   12....       LCALL   ??ZDODeviceSetup?relay; Banked call to: ZDODeviceSetup
    194          }
   \   00001C   D083         POP     DPH
   \   00001E   D082         POP     DPL
   \   000020   02....       LJMP    ?BRET
    195          
    196          #if defined ( MANAGED_SCAN )
    197          /*********************************************************************
    198           * @fn      ZDOManagedScan_Next()
    199           *
    200           * @brief   Setup a managed scan.
    201           *
    202           * @param   none
    203           *
    204           * @return  none
    205           */
    206          static void ZDOManagedScan_Next( void )
    207          {
    208            // Is it the first time
    209            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    210            {
    211              // Setup the defaults
    212              managedScanNextChannel  = 1;
    213          
    214              while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    215                managedScanNextChannel <<= 1;
    216          
    217              managedScanChannelMask = managedScanNextChannel;
    218              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    219            }
    220            else
    221            {
    222              // Do we need to go to the next channel
    223              if ( managedScanTimesPerChannel == 0 )
    224              {
    225                // Find next active channel
    226                managedScanChannelMask  = managedScanNextChannel;
    227                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    228              }
    229              else
    230              {
    231                managedScanTimesPerChannel--;
    232          
    233                if ( managedScanTimesPerChannel == 0 )
    234                {
    235                  managedScanNextChannel  <<= 1;
    236                  while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    237                    managedScanNextChannel <<= 1;
    238          
    239                  if ( managedScanNextChannel == 0 )
    240                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    241                }
    242              }
    243            }
    244          }
    245          #endif // MANAGED_SCAN
    246          
    247          /*********************************************************************
    248           * @fn      ZDODeviceSetup()
    249           *
    250           * @brief   Call set functions depending on the type of device compiled.
    251           *
    252           * @param   none
    253           *
    254           * @return  none
    255           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    256          static void ZDODeviceSetup( void )
   \                     ZDODeviceSetup:
    257          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    258            if ( ZG_BUILD_COORDINATOR_TYPE )
    259            {
    260              NLME_CoordinatorInit();
   \   000004                ; Setup parameters for call to function NLME_CoordinatorInit
   \   000004   12....       LCALL   ??NLME_CoordinatorInit?relay; Banked call to: NLME_CoordinatorInit
    261            }
    262          
    263          #if defined ( REFLECTOR )
    264            APS_ReflectorInit( (ZG_DEVICE_COORDINATOR_TYPE) ? APS_REFLECTOR_PUBLIC :  APS_REFLECTOR_PRIVATE );
   \   000007   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   7004         JNZ     ??ZDODeviceSetup_0
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   8002         SJMP    ??ZDODeviceSetup_1
   \                     ??ZDODeviceSetup_0:
   \   000011   7901         MOV     R1,#0x1
   \                     ??ZDODeviceSetup_1:
   \   000013                ; Setup parameters for call to function APS_ReflectorInit
   \   000013   12....       LCALL   ??APS_ReflectorInit?relay; Banked call to: APS_ReflectorInit
    265          #endif
    266          
    267            if ( ZG_BUILD_JOINING_TYPE )
    268            {
    269              NLME_DeviceJoiningInit();
   \   000016                ; Setup parameters for call to function NLME_DeviceJoiningInit
   \   000016   12....       LCALL   ??NLME_DeviceJoiningInit?relay; Banked call to: NLME_DeviceJoiningInit
    270            }
    271          }
   \   000019   D083         POP     DPH
   \   00001B   D082         POP     DPL
   \   00001D   02....       LJMP    ?BRET
    272          
    273          /*********************************************************************
    274           * @fn          ZDO_StartDevice
    275           *
    276           * @brief       This function starts a device in a network.
    277           *
    278           * @param       logicalType     - Device type to start
    279           *              startMode       - indicates mode of device startup
    280           *              beaconOrder     - indicates time betwen beacons
    281           *              superframeOrder - indicates length of active superframe
    282           *
    283           * @return      none
    284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    285          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    286          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   8C..         MOV     ?V2,R4
    287            ZStatus_t ret;
    288          #if defined ( ZIGBEE_FREQ_AGILITY )
    289            static uint8 discRetries = 0;
    290          #endif
    291          #if defined ( ZIGBEE_COMMISSIONING )
    292            static uint8 scanCnt = 0;
    293          #endif
    294          
    295            ret = ZUnsupportedMode;
   \   000012   7E12         MOV     R6,#0x12
    296          
    297            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
   \   000014   E5..         MOV     A,?V0
   \   000016   705E         JNZ     ??ZDO_StartDevice_0
    298            {
    299              if ( startMode == MODE_HARD )
   \   000018   7402         MOV     A,#0x2
   \   00001A   6F           XRL     A,R7
   \   00001B   7043         JNZ     ??ZDO_StartDevice_1
    300              {
    301                devState = DEV_COORD_STARTING;
   \   00001D   90....       MOV     DPTR,#devState
   \   000020   7408         MOV     A,#0x8
   \   000022   F0           MOVX    @DPTR,A
    302                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, zgDefaultChannelList,
    303                                                    zgDefaultStartingScanDuration, beaconOrder,
    304                                                    superframeOrder, false );
   \   000023                ; Setup parameters for call to function NLME_NetworkFormationRequest
   \   000023   75..00       MOV     ?V3,#0x0
   \   000026   78..         MOV     R0,#?V3
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002B   E5..         MOV     A,?V2
   \   00002D   F5..         MOV     ?V3,A
   \   00002F   78..         MOV     R0,#?V3
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000034   E5..         MOV     A,?V1
   \   000036   F5..         MOV     ?V3,A
   \   000038   78..         MOV     R0,#?V3
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003D   90....       MOV     DPTR,#zgDefaultChannelList
   \   000040   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000043   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F9           MOV     R1,A
   \   000048   7C..         MOV     R4,#zgApsUseExtendedPANID & 0xff
   \   00004A   7D..         MOV     R5,#(zgApsUseExtendedPANID >> 8) & 0xff
   \   00004C   90....       MOV     DPTR,#zgConfigPANID
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   FA           MOV     R2,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   FB           MOV     R3,A
   \   000054   12....       LCALL   ??NLME_NetworkFormationRequest?relay; Banked call to: NLME_NetworkFormationRequest
   \   000057   7407         MOV     A,#0x7
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005C   E9           MOV     A,R1
   \   00005D   FE           MOV     R6,A
   \   00005E   8016         SJMP    ??ZDO_StartDevice_0
    305              }
    306              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_1:
   \   000060   7401         MOV     A,#0x1
   \   000062   6F           XRL     A,R7
   \   000063   7011         JNZ     ??ZDO_StartDevice_0
    307              {
    308                // Just start the coordinator
    309                devState = DEV_COORD_STARTING;
   \   000065   90....       MOV     DPTR,#devState
   \   000068   7408         MOV     A,#0x8
   \   00006A   F0           MOVX    @DPTR,A
    310                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
   \   00006B                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00006B   7B00         MOV     R3,#0x0
   \   00006D   AA..         MOV     R2,?V1
   \   00006F   A9..         MOV     R1,?V1
   \   000071   12....       LCALL   ??NLME_StartRouterRequest?relay; Banked call to: NLME_StartRouterRequest
   \   000074   E9           MOV     A,R1
   \   000075   FE           MOV     R6,A
    311              }
    312              else
    313              {
    314          #if defined( LCD_SUPPORTED )
    315                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    316          #endif
    317              }
    318            }
    319          
    320            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
   \                     ??ZDO_StartDevice_0:
   \   000076   7401         MOV     A,#0x1
   \   000078   65..         XRL     A,?V0
   \   00007A   6009         JZ      ??ZDO_StartDevice_2
   \   00007C   7402         MOV     A,#0x2
   \   00007E   65..         XRL     A,?V0
   \   000080   6003         JZ      $+5
   \   000082   02....       LJMP    ??ZDO_StartDevice_3 & 0xFFFF
    321            {
    322              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
   \                     ??ZDO_StartDevice_2:
   \   000085   EF           MOV     A,R7
   \   000086   6005         JZ      ??ZDO_StartDevice_4
   \   000088   7403         MOV     A,#0x3
   \   00008A   6F           XRL     A,R7
   \   00008B   707A         JNZ     ??ZDO_StartDevice_5
    323              {
    324                devState = DEV_NWK_DISC;
   \                     ??ZDO_StartDevice_4:
   \   00008D   90....       MOV     DPTR,#devState
   \   000090   7402         MOV     A,#0x2
   \   000092   F0           MOVX    @DPTR,A
    325          
    326            #if defined( MANAGED_SCAN )
    327                ZDOManagedScan_Next();
    328                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    329            #else
    330                ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
   \   000093                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000093   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000096   E0           MOVX    A,@DPTR
   \   000097   F9           MOV     R1,A
   \   000098   90....       MOV     DPTR,#zgDefaultChannelList
   \   00009B   12....       LCALL   ?XLOAD_R2345
   \   00009E   12....       LCALL   ??NLME_NetworkDiscoveryRequest?relay; Banked call to: NLME_NetworkDiscoveryRequest
   \   0000A1   E9           MOV     A,R1
   \   0000A2   FE           MOV     R6,A
    331              #if defined ( ZIGBEE_FREQ_AGILITY )
    332                if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    333                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
   \   0000A3   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000A9   402A         JC      ??ZDO_StartDevice_6
   \   0000AB   EE           MOV     A,R6
   \   0000AC   7027         JNZ     ??ZDO_StartDevice_6
   \   0000AE   90....       MOV     DPTR,#??discRetries
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   2401         ADD     A,#0x1
   \   0000B4   F8           MOV     R0,A
   \   0000B5   E8           MOV     A,R0
   \   0000B6   90....       MOV     DPTR,#??discRetries
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   7404         MOV     A,#0x4
   \   0000BC   68           XRL     A,R0
   \   0000BD   7016         JNZ     ??ZDO_StartDevice_6
    334                {
    335                  // For devices with RxOnWhenIdle equals to FALSE, any network channel
    336                  // change will not be recieved. On these devices or routers that have
    337                  // lost the network, an active scan shall be conducted on the Default
    338                  // Channel list using the extended PANID to find the network. If the
    339                  // extended PANID isn't found using the Default Channel list, an scan
    340                  // should be completed using all channels.
    341                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
   \   0000BF   7A00         MOV     R2,#0x0
   \   0000C1   7BF8         MOV     R3,#-0x8
   \   0000C3   7CFF         MOV     R4,#-0x1
   \   0000C5   7D07         MOV     R5,#0x7
   \   0000C7   90....       MOV     DPTR,#zgDefaultChannelList
   \   0000CA   EA           MOV     A,R2
   \   0000CB   F0           MOVX    @DPTR,A
   \   0000CC   A3           INC     DPTR
   \   0000CD   EB           MOV     A,R3
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   A3           INC     DPTR
   \   0000D0   EC           MOV     A,R4
   \   0000D1   F0           MOVX    @DPTR,A
   \   0000D2   A3           INC     DPTR
   \   0000D3   ED           MOV     A,R5
   \   0000D4   F0           MOVX    @DPTR,A
    342                }
    343              #endif // ZIGBEE_FREQ_AGILITY
    344              #if defined ( ZIGBEE_COMMISSIONING )
    345                if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
   \                     ??ZDO_StartDevice_6:
   \   0000D5   7403         MOV     A,#0x3
   \   0000D7   6F           XRL     A,R7
   \   0000D8   6003         JZ      $+5
   \   0000DA   02....       LJMP    ??ZDO_StartDevice_3 & 0xFFFF
   \   0000DD   90....       MOV     DPTR,#??scanCnt
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   F8           MOV     R0,A
   \   0000E2   7401         MOV     A,#0x1
   \   0000E4   28           ADD     A,R0
   \   0000E5   90....       MOV     DPTR,#??scanCnt
   \   0000E8   F0           MOVX    @DPTR,A
   \   0000E9   E8           MOV     A,R0
   \   0000EA   C3           CLR     C
   \   0000EB   9405         SUBB    A,#0x5
   \   0000ED   407A         JC      ??ZDO_StartDevice_3
    346                {
    347                  // When ApsUseExtendedPanID is commissioned to a non zero value via
    348                  // application specific means, the device shall conduct an active scan
    349                  // on the Default Channel list and join the PAN with the same
    350                  // ExtendedPanID. If the PAN is not found, an scan should be completed
    351                  // on all channels.
    352                  // When devices rejoin the network and the PAN is not found from
    353                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
   \   0000EF   7A00         MOV     R2,#0x0
   \   0000F1   7BF8         MOV     R3,#-0x8
   \   0000F3   7CFF         MOV     R4,#-0x1
   \   0000F5   7D07         MOV     R5,#0x7
   \   0000F7   90....       MOV     DPTR,#zgDefaultChannelList
   \   0000FA   EA           MOV     A,R2
   \   0000FB   F0           MOVX    @DPTR,A
   \   0000FC   A3           INC     DPTR
   \   0000FD   EB           MOV     A,R3
   \   0000FE   F0           MOVX    @DPTR,A
   \   0000FF   A3           INC     DPTR
   \   000100   EC           MOV     A,R4
   \   000101   F0           MOVX    @DPTR,A
   \   000102   A3           INC     DPTR
   \   000103   ED           MOV     A,R5
   \   000104   F0           MOVX    @DPTR,A
   \   000105   8062         SJMP    ??ZDO_StartDevice_3
    354                }
    355              #endif // ZIGBEE_COMMISSIONING
    356            #endif
    357              }
    358              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_5:
   \   000107   7401         MOV     A,#0x1
   \   000109   6F           XRL     A,R7
   \   00010A   705D         JNZ     ??ZDO_StartDevice_3
    359              {
    360                if ( logicalType == NODETYPE_ROUTER )
   \   00010C   7401         MOV     A,#0x1
   \   00010E   65..         XRL     A,?V0
   \   000110   7041         JNZ     ??ZDO_StartDevice_7
    361                {
    362                  ZMacScanCnf_t scanCnf;
    363                  devState = DEV_NWK_ORPHAN;
   \   000112   90....       MOV     DPTR,#devState
   \   000115   740A         MOV     A,#0xa
   \   000117   F0           MOVX    @DPTR,A
    364          
    365                  /* if router and nvram is available, fake successful orphan scan */
    366                  scanCnf.hdr.Status = ZSUCCESS;
   \   000118   7401         MOV     A,#0x1
   \   00011A   12....       LCALL   ?XSTACK_DISP0_8
   \   00011D   7400         MOV     A,#0x0
   \   00011F   F0           MOVX    @DPTR,A
    367                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
   \   000120   7402         MOV     A,#0x2
   \   000122   12....       LCALL   ?XSTACK_DISP0_8
   \   000125   7403         MOV     A,#0x3
   \   000127   F0           MOVX    @DPTR,A
    368                  scanCnf.UnscannedChannels = 0;
   \   000128   7A00         MOV     R2,#0x0
   \   00012A   7B00         MOV     R3,#0x0
   \   00012C   7C00         MOV     R4,#0x0
   \   00012E   7D00         MOV     R5,#0x0
   \   000130   7404         MOV     A,#0x4
   \   000132   12....       LCALL   ?XSTACK_DISP0_8
   \   000135   EA           MOV     A,R2
   \   000136   F0           MOVX    @DPTR,A
   \   000137   A3           INC     DPTR
   \   000138   EB           MOV     A,R3
   \   000139   F0           MOVX    @DPTR,A
   \   00013A   A3           INC     DPTR
   \   00013B   EC           MOV     A,R4
   \   00013C   F0           MOVX    @DPTR,A
   \   00013D   A3           INC     DPTR
   \   00013E   ED           MOV     A,R5
   \   00013F   F0           MOVX    @DPTR,A
    369                  scanCnf.ResultListSize = 0;
   \   000140   7408         MOV     A,#0x8
   \   000142   12....       LCALL   ?XSTACK_DISP0_8
   \   000145   7400         MOV     A,#0x0
   \   000147   F0           MOVX    @DPTR,A
    370                  nwk_ScanJoiningOrphan(&scanCnf);
   \   000148                ; Setup parameters for call to function nwk_ScanJoiningOrphan
   \   000148   AA..         MOV     R2,?XSP + 0
   \   00014A   AB..         MOV     R3,?XSP + 1
   \   00014C   12....       LCALL   ??nwk_ScanJoiningOrphan?relay; Banked call to: nwk_ScanJoiningOrphan
    371          
    372                  ret = ZSuccess;
   \   00014F   7E00         MOV     R6,#0x0
   \   000151   8016         SJMP    ??ZDO_StartDevice_3
    373                }
    374                else
    375                {
    376                  devState = DEV_NWK_ORPHAN;
   \                     ??ZDO_StartDevice_7:
   \   000153   90....       MOV     DPTR,#devState
   \   000156   740A         MOV     A,#0xa
   \   000158   F0           MOVX    @DPTR,A
    377                  ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
    378                                                zgDefaultStartingScanDuration );
   \   000159                ; Setup parameters for call to function NLME_OrphanJoinRequest
   \   000159   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   F9           MOV     R1,A
   \   00015E   90....       MOV     DPTR,#zgDefaultChannelList
   \   000161   12....       LCALL   ?XLOAD_R2345
   \   000164   12....       LCALL   ??NLME_OrphanJoinRequest?relay; Banked call to: NLME_OrphanJoinRequest
   \   000167   E9           MOV     A,R1
   \   000168   FE           MOV     R6,A
    379                }
    380              }
    381              else
    382              {
    383          #if defined( LCD_SUPPORTED )
    384                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    385          #endif
    386              }
    387            }
    388          
    389            if ( ret != ZSuccess )
   \                     ??ZDO_StartDevice_3:
   \   000169   EE           MOV     A,R6
   \   00016A   6011         JZ      ??ZDO_StartDevice_8
    390              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \   00016C                ; Setup parameters for call to function osal_start_timerEx
   \   00016C   7CE8         MOV     R4,#-0x18
   \   00016E   7D03         MOV     R5,#0x3
   \   000170   7A01         MOV     R2,#0x1
   \   000172   7B00         MOV     R3,#0x0
   \   000174   90....       MOV     DPTR,#ZDAppTaskID
   \   000177   E0           MOVX    A,@DPTR
   \   000178   F9           MOV     R1,A
   \   000179   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   00017C   E9           MOV     A,R1
    391          }
   \                     ??ZDO_StartDevice_8:
   \   00017D   740B         MOV     A,#0xb
   \   00017F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000182   7F04         MOV     R7,#0x4
   \   000184   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??discRetries:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??scanCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    392          
    393          /**************************************************************************************************
    394           * @fn          zdoSendStateChangeMsg
    395           *
    396           * @brief       Helper function for ZDO_UpdateNwkStatus.
    397           *
    398           * input parameters
    399           *
    400           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    401           * @param       state - The current device state.
    402           *
    403           * output parameters
    404           *
    405           * None.
    406           *
    407           * @return      None.
    408           **************************************************************************************************
    409           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    410          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
   \                     zdoSendStateChangeMsg:
    411          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V1,R1
   \   00000C   8A..         MOV     ?V0,R2
    412            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
   \   00000E                ; Setup parameters for call to function osal_msg_find
   \   00000E   7AD1         MOV     R2,#-0x2f
   \   000010   A9..         MOV     R1,?V0
   \   000012   12....       LCALL   ??osal_msg_find?relay; Banked call to: osal_msg_find
   \   000015   8A..         MOV     ?V2,R2
   \   000017   8B..         MOV     ?V3,R3
   \   000019   AE..         MOV     R6,?V2
   \   00001B   AF..         MOV     R7,?V3
    413          
    414            if (NULL == pMsg)
   \   00001D   EE           MOV     A,R6
   \   00001E   4F           ORL     A,R7
   \   00001F   7050         JNZ     ??zdoSendStateChangeMsg_0
    415            {
    416              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
   \   000021                ; Setup parameters for call to function osal_msg_allocate
   \   000021   7A02         MOV     R2,#0x2
   \   000023   7B00         MOV     R3,#0x0
   \   000025   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
   \   000028   8A..         MOV     ?V2,R2
   \   00002A   8B..         MOV     ?V3,R3
   \   00002C   A8..         MOV     R0,?V2
   \   00002E   A9..         MOV     R1,?V3
   \   000030   E8           MOV     A,R0
   \   000031   FE           MOV     R6,A
   \   000032   E9           MOV     A,R1
   \   000033   FF           MOV     R7,A
   \   000034   E8           MOV     A,R0
   \   000035   49           ORL     A,R1
   \   000036   700F         JNZ     ??zdoSendStateChangeMsg_1
    417              {
    418                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    419                // try again later when more Heap may be available.
    420                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
   \   000038                ; Setup parameters for call to function osal_set_event
   \   000038   7A10         MOV     R2,#0x10
   \   00003A   7B00         MOV     R3,#0x0
   \   00003C   90....       MOV     DPTR,#ZDAppTaskID
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   000044   E9           MOV     A,R1
   \   000045   8036         SJMP    ??zdoSendStateChangeMsg_2
    421              }
    422              else
    423              {
    424                pMsg->event = ZDO_STATE_CHANGE;
   \                     ??zdoSendStateChangeMsg_1:
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   74D1         MOV     A,#-0x2f
   \   00004D   F0           MOVX    @DPTR,A
    425                pMsg->status = state;
   \   00004E   E5..         MOV     A,?V1
   \   000050   C0E0         PUSH    A
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   A3           INC     DPTR
   \   000057   D0E0         POP     A
   \   000059   F0           MOVX    @DPTR,A
    426          
    427                (void)osal_msg_send(taskId, (uint8 *)pMsg);
   \   00005A                ; Setup parameters for call to function osal_msg_send
   \   00005A   EE           MOV     A,R6
   \   00005B   FA           MOV     R2,A
   \   00005C   EF           MOV     A,R7
   \   00005D   FB           MOV     R3,A
   \   00005E   A9..         MOV     R1,?V0
   \   000060   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
   \   000063   E9           MOV     A,R1
   \   000064   C0E0         PUSH    A
   \   000066   85..82       MOV     DPL,?XSP + 0
   \   000069   85..83       MOV     DPH,?XSP + 1
   \   00006C   D0E0         POP     A
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   800C         SJMP    ??zdoSendStateChangeMsg_2
    428              }
    429            }
    430            else
    431            {
    432              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    433              pMsg->status = state;
   \                     ??zdoSendStateChangeMsg_0:
   \   000071   E5..         MOV     A,?V1
   \   000073   C0E0         PUSH    A
   \   000075   8E82         MOV     DPL,R6
   \   000077   8F83         MOV     DPH,R7
   \   000079   A3           INC     DPTR
   \   00007A   D0E0         POP     A
   \   00007C   F0           MOVX    @DPTR,A
    434            }
    435          }
   \                     ??zdoSendStateChangeMsg_2:
   \   00007D   7401         MOV     A,#0x1
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000082   7F04         MOV     R7,#0x4
   \   000084   02....       LJMP    ?BANKED_LEAVE_XDATA
    436          
    437          /**************************************************************************************************
    438           * @fn          ZDO_UpdateNwkStatus
    439           *
    440           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    441           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    442           *              than one registered EndPoint, it will only receive one notification per state
    443           *              change. Although the device may go through a sequence of state changes, the
    444           *              Application task may only receive notification of the final, steady-state state
    445           *              because it has the lowest priority and never even runs to receive the intermediate
    446           *              state change notifications.
    447           *
    448           * input parameters
    449           *
    450           * @param       state - The current device state.
    451           *
    452           * output parameters
    453           *
    454           * None.
    455           *
    456           * @return      None.
    457           **************************************************************************************************
    458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    459          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    460          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    461            epList_t *pItem = epList;
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FE           MOV     R6,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FF           MOV     R7,A
    462          
    463            while (pItem != NULL)
   \                     ??ZDO_UpdateNwkStatus_0:
   \   00000F   EE           MOV     A,R6
   \   000010   4F           ORL     A,R7
   \   000011   603B         JZ      ??ZDO_UpdateNwkStatus_1
    464            {
    465              if (pItem->epDesc->endPoint != ZDO_EP)
   \   000013   8E82         MOV     DPL,R6
   \   000015   8F83         MOV     DPH,R7
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F583         MOV     DPH,A
   \   00001D   8882         MOV     DPL,R0
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   601C         JZ      ??ZDO_UpdateNwkStatus_2
    466              {
    467                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \   000022                ; Setup parameters for call to function zdoSendStateChangeMsg
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F583         MOV     DPH,A
   \   00002C   8882         MOV     DPL,R0
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F8           MOV     R0,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F583         MOV     DPH,A
   \   000035   8882         MOV     DPL,R0
   \   000037   E0           MOVX    A,@DPTR
   \   000038   FA           MOV     R2,A
   \   000039   A9..         MOV     R1,?V0
   \   00003B   12....       LCALL   ??zdoSendStateChangeMsg?relay; Banked call to: zdoSendStateChangeMsg
    468              }
    469          
    470              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_2:
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FE           MOV     R6,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   FF           MOV     R7,A
   \   00004C   80C1         SJMP    ??ZDO_UpdateNwkStatus_0
    471            }
    472          #if defined MT_ZDO_CB_FUNC
    473            zdoSendStateChangeMsg(state, MT_TaskID);
    474          #endif
    475          
    476            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_1:
   \   00004E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00004E   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   000051   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000054   EA           MOV     A,R2
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   EB           MOV     A,R3
   \   000058   F0           MOVX    @DPTR,A
    477            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000059                ; Setup parameters for call to function NLME_GetExtAddr
   \   000059   12....       LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
   \   00005C   8A..         MOV     ?V2,R2
   \   00005E   8B..         MOV     ?V3,R3
   \   000060   85..82       MOV     DPL,?V2
   \   000063   85..83       MOV     DPH,?V3
    478          }
   \   000066   7F04         MOV     R7,#0x4
   \   000068   02....       LJMP    ?BANKED_LEAVE_XDATA
    479          
    480          #if defined ( REFLECTOR )
    481          /*********************************************************************
    482           * @fn          ZDO_RemoveEndDeviceBind
    483           *
    484           * @brief       Remove the end device bind
    485           *
    486           * @param  none
    487           *
    488           * @return      none
    489           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    490          static void ZDO_RemoveEndDeviceBind( void )
   \                     ZDO_RemoveEndDeviceBind:
    491          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    492            if ( ZDO_EDBind != NULL )
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   E8           MOV     A,R0
   \   00000D   49           ORL     A,R1
   \   00000E   607B         JZ      ??ZDO_RemoveEndDeviceBind_0
    493            {
    494              // Free the RAM
    495              if ( ZDO_EDBind->inClusters != NULL )
   \   000010   90....       MOV     DPTR,#ZDO_EDBind
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   C8           XCH     A,R0
   \   000018   2410         ADD     A,#0x10
   \   00001A   F582         MOV     DPL,A
   \   00001C   C8           XCH     A,R0
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   F583         MOV     DPH,A
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   E8           MOV     A,R0
   \   000027   49           ORL     A,R1
   \   000028   6019         JZ      ??ZDO_RemoveEndDeviceBind_1
    496                osal_mem_free( ZDO_EDBind->inClusters );
   \   00002A                ; Setup parameters for call to function osal_mem_free
   \   00002A   90....       MOV     DPTR,#ZDO_EDBind
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F8           MOV     R0,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   C8           XCH     A,R0
   \   000032   2410         ADD     A,#0x10
   \   000034   F582         MOV     DPL,A
   \   000036   C8           XCH     A,R0
   \   000037   3400         ADDC    A,#0x0
   \   000039   F583         MOV     DPH,A
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FA           MOV     R2,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FB           MOV     R3,A
   \   000040   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    497              if ( ZDO_EDBind->outClusters != NULL )
   \                     ??ZDO_RemoveEndDeviceBind_1:
   \   000043   90....       MOV     DPTR,#ZDO_EDBind
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F8           MOV     R0,A
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   C8           XCH     A,R0
   \   00004B   2413         ADD     A,#0x13
   \   00004D   F582         MOV     DPL,A
   \   00004F   C8           XCH     A,R0
   \   000050   3400         ADDC    A,#0x0
   \   000052   F583         MOV     DPH,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F8           MOV     R0,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   E8           MOV     A,R0
   \   00005A   49           ORL     A,R1
   \   00005B   6019         JZ      ??ZDO_RemoveEndDeviceBind_2
    498                osal_mem_free( ZDO_EDBind->outClusters );
   \   00005D                ; Setup parameters for call to function osal_mem_free
   \   00005D   90....       MOV     DPTR,#ZDO_EDBind
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F8           MOV     R0,A
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   C8           XCH     A,R0
   \   000065   2413         ADD     A,#0x13
   \   000067   F582         MOV     DPL,A
   \   000069   C8           XCH     A,R0
   \   00006A   3400         ADDC    A,#0x0
   \   00006C   F583         MOV     DPH,A
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   FA           MOV     R2,A
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   FB           MOV     R3,A
   \   000073   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    499              osal_mem_free( ZDO_EDBind );
   \                     ??ZDO_RemoveEndDeviceBind_2:
   \   000076                ; Setup parameters for call to function osal_mem_free
   \   000076   90....       MOV     DPTR,#ZDO_EDBind
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   FA           MOV     R2,A
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   FB           MOV     R3,A
   \   00007E   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    500              ZDO_EDBind = NULL;
   \   000081   90....       MOV     DPTR,#ZDO_EDBind
   \   000084   7400         MOV     A,#0x0
   \   000086   F0           MOVX    @DPTR,A
   \   000087   A3           INC     DPTR
   \   000088   7400         MOV     A,#0x0
   \   00008A   F0           MOVX    @DPTR,A
    501            }
    502          }
   \                     ??ZDO_RemoveEndDeviceBind_0:
   \   00008B   D083         POP     DPH
   \   00008D   D082         POP     DPL
   \   00008F   02....       LJMP    ?BRET
    503          #endif // REFLECTOR
    504          
    505          #if defined ( REFLECTOR )
    506          /*********************************************************************
    507           * @fn          ZDO_RemoveEndDeviceBind
    508           *
    509           * @brief       Remove the end device bind
    510           *
    511           * @param  none
    512           *
    513           * @return      none
    514           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    515          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
   \                     ZDO_SendEDBindRsp:
    516          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   7401         MOV     A,#0x1
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   D0E0         POP     A
   \   000014   F0           MOVX    @DPTR,A
   \   000015   EC           MOV     A,R4
   \   000016   C0E0         PUSH    A
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   D0E0         POP     A
   \   000020   F0           MOVX    @DPTR,A
   \   000021   EA           MOV     A,R2
   \   000022   FE           MOV     R6,A
   \   000023   EB           MOV     A,R3
   \   000024   FF           MOV     R7,A
   \   000025   8D..         MOV     ?V0,R5
    517            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
   \   000027                ; Setup parameters for call to function ZDP_SendData
   \   000027   E5..         MOV     A,?V0
   \   000029   F5..         MOV     ?V1,A
   \   00002B   78..         MOV     R0,#?V1
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000030   7401         MOV     A,#0x1
   \   000032   12....       LCALL   ?XSTACK_DISP100_8
   \   000035   88..         MOV     ?V2,R0
   \   000037   89..         MOV     ?V3,R1
   \   000039   78..         MOV     R0,#?V2
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   75..20       MOV     ?V2,#0x20
   \   000041   75..80       MOV     ?V3,#-0x80
   \   000044   78..         MOV     R0,#?V2
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   7901         MOV     R1,#0x1
   \   00004B   EE           MOV     A,R6
   \   00004C   FC           MOV     R4,A
   \   00004D   EF           MOV     A,R7
   \   00004E   FD           MOV     R5,A
   \   00004F   7406         MOV     A,#0x6
   \   000051   12....       LCALL   ?XSTACK_DISP101_8
   \   000054   12....       LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
   \   000057   7405         MOV     A,#0x5
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005C   E9           MOV     A,R1
    518          
    519          #if defined( LCD_SUPPORTED )
    520            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    521            if ( Status == ZDP_SUCCESS )
    522              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    523            else
    524              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    525          #endif
    526          
    527          }
   \   00005D   7402         MOV     A,#0x2
   \   00005F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000062   7F04         MOV     R7,#0x4
   \   000064   02....       LJMP    ?BANKED_LEAVE_XDATA
    528          #endif // REFLECTOR
    529          
    530          /*********************************************************************
    531           * @fn          ZDO_CompareClusterLists
    532           *
    533           * @brief       Compare one list to another list
    534           *
    535           * @param       numList1 - number of items in list 1
    536           * @param       list1 - first list of cluster IDs
    537           * @param       numList2 - number of items in list 2
    538           * @param       list2 - second list of cluster IDs
    539           * @param       pMatches - buffer to put matches
    540           *
    541           * @return      number of matches
    542           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    543          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
   \                     ZDO_CompareClusterLists:
    544                                    byte numList2, uint16 *list2, uint16 *pMatches )
    545          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V6,R2
   \   000009   8B..         MOV     ?V7,R3
   \   00000B   8C..         MOV     ?V4,R4
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FC           MOV     R4,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FD           MOV     R5,A
   \   000017   7412         MOV     A,#0x12
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FE           MOV     R6,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FF           MOV     R7,A
    546            byte x, y;
    547            uint16 z;
    548            byte numMatches = 0;
   \   000021   7A00         MOV     R2,#0x0
    549          
    550            // Check the first in against the seconds out
    551            for ( x = 0; x < numList1; x++ )
   \   000023   7B00         MOV     R3,#0x0
   \                     ??ZDO_CompareClusterLists_0:
   \   000025   EB           MOV     A,R3
   \   000026   C3           CLR     C
   \   000027   95..         SUBB    A,?V2
   \   000029   4003         JC      $+5
   \   00002B   02....       LJMP    ??ZDO_CompareClusterLists_1 & 0xFFFF
    552            {
    553              for ( y = 0; y < numList2; y++ )
   \   00002E   75..00       MOV     ?V3,#0x0
   \                     ??ZDO_CompareClusterLists_2:
   \   000031   E5..         MOV     A,?V3
   \   000033   C3           CLR     C
   \   000034   95..         SUBB    A,?V4
   \   000036   4003         JC      $+5
   \   000038   02....       LJMP    ??ZDO_CompareClusterLists_3 & 0xFFFF
    554              {
    555                z = list2[y];
   \   00003B   A8..         MOV     R0,?V3
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   E8           MOV     A,R0
   \   000040   75F002       MOV     B,#0x2
   \   000043   A4           MUL     AB
   \   000044   C8           XCH     A,R0
   \   000045   85F0..       MOV     ?V5,B
   \   000048   75F000       MOV     B,#0x0
   \   00004B   A4           MUL     AB
   \   00004C   25..         ADD     A,?V5
   \   00004E   F5..         MOV     ?V5,A
   \   000050   75F002       MOV     B,#0x2
   \   000053   E9           MOV     A,R1
   \   000054   A4           MUL     AB
   \   000055   25..         ADD     A,?V5
   \   000057   F9           MOV     R1,A
   \   000058   EC           MOV     A,R4
   \   000059   28           ADD     A,R0
   \   00005A   F582         MOV     DPL,A
   \   00005C   ED           MOV     A,R5
   \   00005D   39           ADDC    A,R1
   \   00005E   F583         MOV     DPH,A
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F5..         MOV     ?V0,A
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F5..         MOV     ?V1,A
    556                if ( list1[x] == z )
   \   000067   EB           MOV     A,R3
   \   000068   F8           MOV     R0,A
   \   000069   7900         MOV     R1,#0x0
   \   00006B   E8           MOV     A,R0
   \   00006C   75F002       MOV     B,#0x2
   \   00006F   A4           MUL     AB
   \   000070   C8           XCH     A,R0
   \   000071   85F0..       MOV     ?V5,B
   \   000074   75F000       MOV     B,#0x0
   \   000077   A4           MUL     AB
   \   000078   25..         ADD     A,?V5
   \   00007A   F5..         MOV     ?V5,A
   \   00007C   75F002       MOV     B,#0x2
   \   00007F   E9           MOV     A,R1
   \   000080   A4           MUL     AB
   \   000081   25..         ADD     A,?V5
   \   000083   F9           MOV     R1,A
   \   000084   E5..         MOV     A,?V6
   \   000086   28           ADD     A,R0
   \   000087   F582         MOV     DPL,A
   \   000089   E5..         MOV     A,?V7
   \   00008B   39           ADDC    A,R1
   \   00008C   F583         MOV     DPH,A
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   65..         XRL     A,?V0
   \   000091   7004         JNZ     ??ZDO_CompareClusterLists_4
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   65..         XRL     A,?V1
   \                     ??ZDO_CompareClusterLists_4:
   \   000097   702D         JNZ     ??ZDO_CompareClusterLists_5
    557                  pMatches[numMatches++] = z;
   \   000099   EA           MOV     A,R2
   \   00009A   F8           MOV     R0,A
   \   00009B   7900         MOV     R1,#0x0
   \   00009D   E8           MOV     A,R0
   \   00009E   75F002       MOV     B,#0x2
   \   0000A1   A4           MUL     AB
   \   0000A2   C8           XCH     A,R0
   \   0000A3   85F0..       MOV     ?V5,B
   \   0000A6   75F000       MOV     B,#0x0
   \   0000A9   A4           MUL     AB
   \   0000AA   25..         ADD     A,?V5
   \   0000AC   F5..         MOV     ?V5,A
   \   0000AE   75F002       MOV     B,#0x2
   \   0000B1   E9           MOV     A,R1
   \   0000B2   A4           MUL     AB
   \   0000B3   25..         ADD     A,?V5
   \   0000B5   F9           MOV     R1,A
   \   0000B6   EE           MOV     A,R6
   \   0000B7   28           ADD     A,R0
   \   0000B8   F582         MOV     DPL,A
   \   0000BA   EF           MOV     A,R7
   \   0000BB   39           ADDC    A,R1
   \   0000BC   F583         MOV     DPH,A
   \   0000BE   E5..         MOV     A,?V0
   \   0000C0   F0           MOVX    @DPTR,A
   \   0000C1   A3           INC     DPTR
   \   0000C2   E5..         MOV     A,?V1
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   0A           INC     R2
    558              }
   \                     ??ZDO_CompareClusterLists_5:
   \   0000C6   05..         INC     ?V3
   \   0000C8   02....       LJMP    ??ZDO_CompareClusterLists_2 & 0xFFFF
    559            }
   \                     ??ZDO_CompareClusterLists_3:
   \   0000CB   0B           INC     R3
   \   0000CC   02....       LJMP    ??ZDO_CompareClusterLists_0 & 0xFFFF
    560          
    561            return ( numMatches );
   \                     ??ZDO_CompareClusterLists_1:
   \   0000CF   EA           MOV     A,R2
   \   0000D0   F9           MOV     R1,A
   \   0000D1   7F08         MOV     R7,#0x8
   \   0000D3   02....       LJMP    ?BANKED_LEAVE_XDATA
    562          }
    563          
    564          /*********************************************************************
    565           * Utility functions
    566           */
    567          
    568          /*********************************************************************
    569           * @fn          ZDO_CompareByteLists
    570           *
    571           * @brief       Compares two lists for matches.
    572           *
    573           * @param       ACnt  - number of entries in list A
    574           * @param       AList  - List A
    575           * @param       BCnt  - number of entries in list B
    576           * @param       BList  - List B
    577           *
    578           * @return      true if a match is found
    579           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    580          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    581          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   8C..         MOV     ?V2,R4
   \   000009   740D         MOV     A,#0xd
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   E8           MOV     A,R0
   \   000014   FC           MOV     R4,A
   \   000015   E9           MOV     A,R1
   \   000016   FD           MOV     R5,A
    582            byte x, y;
    583          
    584            for ( x = 0; x < ACnt; x++ )
   \   000017   7F00         MOV     R7,#0x0
   \                     ??ZDO_AnyClusterMatches_0:
   \   000019   EF           MOV     A,R7
   \   00001A   C3           CLR     C
   \   00001B   9E           SUBB    A,R6
   \   00001C   5071         JNC     ??ZDO_AnyClusterMatches_1
    585            {
    586              for ( y = 0; y < BCnt; y++ )
   \   00001E   75..00       MOV     ?V3,#0x0
   \                     ??ZDO_AnyClusterMatches_2:
   \   000021   E5..         MOV     A,?V3
   \   000023   C3           CLR     C
   \   000024   95..         SUBB    A,?V2
   \   000026   5064         JNC     ??ZDO_AnyClusterMatches_3
    587              {
    588                if ( AList[x] == BList[y] )
   \   000028   EF           MOV     A,R7
   \   000029   F8           MOV     R0,A
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   E8           MOV     A,R0
   \   00002D   75F002       MOV     B,#0x2
   \   000030   A4           MUL     AB
   \   000031   C8           XCH     A,R0
   \   000032   85F0..       MOV     ?V0,B
   \   000035   75F000       MOV     B,#0x0
   \   000038   A4           MUL     AB
   \   000039   25..         ADD     A,?V0
   \   00003B   F5..         MOV     ?V0,A
   \   00003D   75F002       MOV     B,#0x2
   \   000040   E9           MOV     A,R1
   \   000041   A4           MUL     AB
   \   000042   25..         ADD     A,?V0
   \   000044   F9           MOV     R1,A
   \   000045   EA           MOV     A,R2
   \   000046   28           ADD     A,R0
   \   000047   F582         MOV     DPL,A
   \   000049   EB           MOV     A,R3
   \   00004A   39           ADDC    A,R1
   \   00004B   F583         MOV     DPH,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F5..         MOV     ?V0,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F5..         MOV     ?V1,A
   \   000054   A8..         MOV     R0,?V3
   \   000056   7900         MOV     R1,#0x0
   \   000058   E8           MOV     A,R0
   \   000059   75F002       MOV     B,#0x2
   \   00005C   A4           MUL     AB
   \   00005D   C8           XCH     A,R0
   \   00005E   85F0..       MOV     ?V4,B
   \   000061   75F000       MOV     B,#0x0
   \   000064   A4           MUL     AB
   \   000065   25..         ADD     A,?V4
   \   000067   F5..         MOV     ?V4,A
   \   000069   75F002       MOV     B,#0x2
   \   00006C   E9           MOV     A,R1
   \   00006D   A4           MUL     AB
   \   00006E   25..         ADD     A,?V4
   \   000070   F9           MOV     R1,A
   \   000071   EC           MOV     A,R4
   \   000072   28           ADD     A,R0
   \   000073   F582         MOV     DPL,A
   \   000075   ED           MOV     A,R5
   \   000076   39           ADDC    A,R1
   \   000077   F583         MOV     DPH,A
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   65..         XRL     A,?V0
   \   00007C   7004         JNZ     ??ZDO_AnyClusterMatches_4
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   65..         XRL     A,?V1
   \                     ??ZDO_AnyClusterMatches_4:
   \   000082   7004         JNZ     ??ZDO_AnyClusterMatches_5
    589                {
    590                  return true;
   \   000084   7901         MOV     R1,#0x1
   \   000086   8009         SJMP    ??ZDO_AnyClusterMatches_6
    591                }
    592              }
   \                     ??ZDO_AnyClusterMatches_5:
   \   000088   05..         INC     ?V3
   \   00008A   8095         SJMP    ??ZDO_AnyClusterMatches_2
    593            }
   \                     ??ZDO_AnyClusterMatches_3:
   \   00008C   0F           INC     R7
   \   00008D   808A         SJMP    ??ZDO_AnyClusterMatches_0
    594          
    595            return false;
   \                     ??ZDO_AnyClusterMatches_1:
   \   00008F   7900         MOV     R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   000091   7F05         MOV     R7,#0x5
   \   000093   02....       LJMP    ?BANKED_LEAVE_XDATA
    596          }
    597          
    598          /*********************************************************************
    599           * Callback functions from ZDProfile
    600           */
    601          
    602          /*********************************************************************
    603           * @fn          ZDO_ProcessNodeDescReq
    604           *
    605           * @brief       This function processes and responds to the
    606           *              Node_Desc_req message.
    607           *
    608           * @param       inMsg - incoming message
    609           *
    610           * @return      none
    611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    612          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    613          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    614            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000009   EE           MOV     A,R6
   \   00000A   2413         ADD     A,#0x13
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F583         MOV     DPH,A
   \   000018   8882         MOV     DPL,R0
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FA           MOV     R2,A
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   EE           MOV     A,R6
   \   00001F   2413         ADD     A,#0x13
   \   000021   F582         MOV     DPL,A
   \   000023   E4           CLR     A
   \   000024   3F           ADDC    A,R7
   \   000025   F583         MOV     DPH,A
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F583         MOV     DPH,A
   \   00002D   8882         MOV     DPL,R0
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   7900         MOV     R1,#0x0
   \   000034   E4           CLR     A
   \   000035   C8           XCH     A,R0
   \   000036   F9           MOV     R1,A
   \   000037   EA           MOV     A,R2
   \   000038   28           ADD     A,R0
   \   000039   F5..         MOV     ?V0,A
   \   00003B   EB           MOV     A,R3
   \   00003C   39           ADDC    A,R1
   \   00003D   F5..         MOV     ?V1,A
    615            NodeDescriptorFormat_t *desc = NULL;
   \   00003F   75..00       MOV     ?V2,#0x0
   \   000042   75..00       MOV     ?V3,#0x0
    616          
    617            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000045   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000048   E0           MOVX    A,@DPTR
   \   000049   65..         XRL     A,?V0
   \   00004B   7004         JNZ     ??ZDO_ProcessNodeDescReq_0
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   65..         XRL     A,?V1
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   000051   7006         JNZ     ??ZDO_ProcessNodeDescReq_1
    618            {
    619              desc = &ZDO_Config_Node_Descriptor;
   \   000053   75....       MOV     ?V2,#ZDO_Config_Node_Descriptor & 0xff
   \   000056   75....       MOV     ?V3,#(ZDO_Config_Node_Descriptor >> 8) & 0xff
    620            }
    621          
    622            if ( desc != NULL )
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000059   E5..         MOV     A,?V2
   \   00005B   45..         ORL     A,?V3
   \   00005D   6018         JZ      ??ZDO_ProcessNodeDescReq_2
    623            {
    624              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00005F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00005F   78..         MOV     R0,#?V2
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   AC..         MOV     R4,?V0
   \   000066   AD..         MOV     R5,?V1
   \   000068   EE           MOV     A,R6
   \   000069   FA           MOV     R2,A
   \   00006A   EF           MOV     A,R7
   \   00006B   FB           MOV     R3,A
   \   00006C   12....       LCALL   ??ZDP_NodeDescMsg?relay; Banked call to: ZDP_NodeDescMsg
   \   00006F   7402         MOV     A,#0x2
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   \   000074   E9           MOV     A,R1
   \   000075   8038         SJMP    ??ZDO_ProcessNodeDescReq_3
    625            }
    626            else
    627            {
    628              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    629                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000077                ; Setup parameters for call to function ZDP_GenericRsp
   \   000077   75..02       MOV     ?V4,#0x2
   \   00007A   75..80       MOV     ?V5,#-0x80
   \   00007D   78..         MOV     R0,#?V4
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   78..         MOV     R0,#?V0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   EE           MOV     A,R6
   \   000088   240E         ADD     A,#0xe
   \   00008A   F582         MOV     DPL,A
   \   00008C   E4           CLR     A
   \   00008D   3F           ADDC    A,R7
   \   00008E   F583         MOV     DPH,A
   \   000090   E0           MOVX    A,@DPTR
   \   000091   FD           MOV     R5,A
   \   000092   7C80         MOV     R4,#-0x80
   \   000094   EE           MOV     A,R6
   \   000095   2402         ADD     A,#0x2
   \   000097   FA           MOV     R2,A
   \   000098   E4           CLR     A
   \   000099   3F           ADDC    A,R7
   \   00009A   FB           MOV     R3,A
   \   00009B   EE           MOV     A,R6
   \   00009C   240F         ADD     A,#0xf
   \   00009E   F582         MOV     DPL,A
   \   0000A0   E4           CLR     A
   \   0000A1   3F           ADDC    A,R7
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F9           MOV     R1,A
   \   0000A6   12....       LCALL   ??ZDP_GenericRsp?relay; Banked call to: ZDP_GenericRsp
   \   0000A9   7404         MOV     A,#0x4
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AE   E9           MOV     A,R1
    630            }
    631          }
   \                     ??ZDO_ProcessNodeDescReq_3:
   \   0000AF   7F06         MOV     R7,#0x6
   \   0000B1   02....       LJMP    ?BANKED_LEAVE_XDATA
    632          
    633          /*********************************************************************
    634           * @fn          ZDO_ProcessPowerDescReq
    635           *
    636           * @brief       This function processes and responds to the
    637           *              Node_Power_req message.
    638           *
    639           * @param       inMsg  - incoming request
    640           *
    641           * @return      none
    642           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    643          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    644          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    645            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000009   EE           MOV     A,R6
   \   00000A   2413         ADD     A,#0x13
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F583         MOV     DPH,A
   \   000018   8882         MOV     DPL,R0
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FA           MOV     R2,A
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   EE           MOV     A,R6
   \   00001F   2413         ADD     A,#0x13
   \   000021   F582         MOV     DPL,A
   \   000023   E4           CLR     A
   \   000024   3F           ADDC    A,R7
   \   000025   F583         MOV     DPH,A
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F583         MOV     DPH,A
   \   00002D   8882         MOV     DPL,R0
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   7900         MOV     R1,#0x0
   \   000034   E4           CLR     A
   \   000035   C8           XCH     A,R0
   \   000036   F9           MOV     R1,A
   \   000037   EA           MOV     A,R2
   \   000038   28           ADD     A,R0
   \   000039   F5..         MOV     ?V0,A
   \   00003B   EB           MOV     A,R3
   \   00003C   39           ADDC    A,R1
   \   00003D   F5..         MOV     ?V1,A
    646            NodePowerDescriptorFormat_t *desc = NULL;
   \   00003F   75..00       MOV     ?V2,#0x0
   \   000042   75..00       MOV     ?V3,#0x0
    647          
    648            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000045   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000048   E0           MOVX    A,@DPTR
   \   000049   65..         XRL     A,?V0
   \   00004B   7004         JNZ     ??ZDO_ProcessPowerDescReq_0
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   65..         XRL     A,?V1
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   000051   7006         JNZ     ??ZDO_ProcessPowerDescReq_1
    649            {
    650              desc = &ZDO_Config_Power_Descriptor;
   \   000053   75....       MOV     ?V2,#ZDO_Config_Power_Descriptor & 0xff
   \   000056   75....       MOV     ?V3,#(ZDO_Config_Power_Descriptor >> 8) & 0xff
    651            }
    652          
    653            if ( desc != NULL )
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000059   E5..         MOV     A,?V2
   \   00005B   45..         ORL     A,?V3
   \   00005D   6018         JZ      ??ZDO_ProcessPowerDescReq_2
    654            {
    655              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00005F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00005F   78..         MOV     R0,#?V2
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   AC..         MOV     R4,?V0
   \   000066   AD..         MOV     R5,?V1
   \   000068   EE           MOV     A,R6
   \   000069   FA           MOV     R2,A
   \   00006A   EF           MOV     A,R7
   \   00006B   FB           MOV     R3,A
   \   00006C   12....       LCALL   ??ZDP_PowerDescMsg?relay; Banked call to: ZDP_PowerDescMsg
   \   00006F   7402         MOV     A,#0x2
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   \   000074   E9           MOV     A,R1
   \   000075   8038         SJMP    ??ZDO_ProcessPowerDescReq_3
    656            }
    657            else
    658            {
    659              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    660                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000077                ; Setup parameters for call to function ZDP_GenericRsp
   \   000077   75..03       MOV     ?V4,#0x3
   \   00007A   75..80       MOV     ?V5,#-0x80
   \   00007D   78..         MOV     R0,#?V4
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   78..         MOV     R0,#?V0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   EE           MOV     A,R6
   \   000088   240E         ADD     A,#0xe
   \   00008A   F582         MOV     DPL,A
   \   00008C   E4           CLR     A
   \   00008D   3F           ADDC    A,R7
   \   00008E   F583         MOV     DPH,A
   \   000090   E0           MOVX    A,@DPTR
   \   000091   FD           MOV     R5,A
   \   000092   7C80         MOV     R4,#-0x80
   \   000094   EE           MOV     A,R6
   \   000095   2402         ADD     A,#0x2
   \   000097   FA           MOV     R2,A
   \   000098   E4           CLR     A
   \   000099   3F           ADDC    A,R7
   \   00009A   FB           MOV     R3,A
   \   00009B   EE           MOV     A,R6
   \   00009C   240F         ADD     A,#0xf
   \   00009E   F582         MOV     DPL,A
   \   0000A0   E4           CLR     A
   \   0000A1   3F           ADDC    A,R7
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F9           MOV     R1,A
   \   0000A6   12....       LCALL   ??ZDP_GenericRsp?relay; Banked call to: ZDP_GenericRsp
   \   0000A9   7404         MOV     A,#0x4
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AE   E9           MOV     A,R1
    661            }
    662          }
   \                     ??ZDO_ProcessPowerDescReq_3:
   \   0000AF   7F06         MOV     R7,#0x6
   \   0000B1   02....       LJMP    ?BANKED_LEAVE_XDATA
    663          
    664          /*********************************************************************
    665           * @fn          ZDO_ProcessSimpleDescReq
    666           *
    667           * @brief       This function processes and responds to the
    668           *              Simple_Desc_req message.
    669           *
    670           * @param       inMsg - incoming message (request)
    671           *
    672           * @return      none
    673           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    674          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    675          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
    676            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   7400         MOV     A,#0x0
   \   00001A   F0           MOVX    @DPTR,A
    677            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00001B   E5..         MOV     A,?V4
   \   00001D   2413         ADD     A,#0x13
   \   00001F   F582         MOV     DPL,A
   \   000021   E4           CLR     A
   \   000022   35..         ADDC    A,?V5
   \   000024   F583         MOV     DPH,A
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F583         MOV     DPH,A
   \   00002C   8882         MOV     DPL,R0
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FA           MOV     R2,A
   \   000030   7B00         MOV     R3,#0x0
   \   000032   E5..         MOV     A,?V4
   \   000034   2413         ADD     A,#0x13
   \   000036   F582         MOV     DPL,A
   \   000038   E4           CLR     A
   \   000039   35..         ADDC    A,?V5
   \   00003B   F583         MOV     DPH,A
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F8           MOV     R0,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F583         MOV     DPH,A
   \   000043   8882         MOV     DPL,R0
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F8           MOV     R0,A
   \   000048   7900         MOV     R1,#0x0
   \   00004A   E4           CLR     A
   \   00004B   C8           XCH     A,R0
   \   00004C   F9           MOV     R1,A
   \   00004D   EA           MOV     A,R2
   \   00004E   28           ADD     A,R0
   \   00004F   FE           MOV     R6,A
   \   000050   EB           MOV     A,R3
   \   000051   39           ADDC    A,R1
   \   000052   FF           MOV     R7,A
    678            byte endPoint = inMsg->asdu[2];
   \   000053   E5..         MOV     A,?V4
   \   000055   2413         ADD     A,#0x13
   \   000057   F582         MOV     DPL,A
   \   000059   E4           CLR     A
   \   00005A   35..         ADDC    A,?V5
   \   00005C   F583         MOV     DPH,A
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F8           MOV     R0,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F583         MOV     DPH,A
   \   000064   8882         MOV     DPL,R0
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F5..         MOV     ?V2,A
    679            byte free = false;
   \   00006B   75..00       MOV     ?V1,#0x0
    680            byte stat = ZDP_SUCCESS;
   \   00006E   75..00       MOV     ?V0,#0x0
    681          
    682            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   000071   E5..         MOV     A,?V2
   \   000073   6007         JZ      ??ZDO_ProcessSimpleDescReq_0
   \   000075   E5..         MOV     A,?V2
   \   000077   C3           CLR     C
   \   000078   94F1         SUBB    A,#-0xf
   \   00007A   4005         JC      ??ZDO_ProcessSimpleDescReq_1
    683            {
    684              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   00007C   75..82       MOV     ?V0,#-0x7e
   \   00007F   804A         SJMP    ??ZDO_ProcessSimpleDescReq_2
    685            }
    686            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   000081   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000084   E0           MOVX    A,@DPTR
   \   000085   6E           XRL     A,R6
   \   000086   7003         JNZ     ??ZDO_ProcessSimpleDescReq_3
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   6F           XRL     A,R7
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   00008B   7020         JNZ     ??ZDO_ProcessSimpleDescReq_4
    687            {
    688              free = afFindSimpleDesc( &sDesc, endPoint );
   \   00008D                ; Setup parameters for call to function afFindSimpleDesc
   \   00008D   A9..         MOV     R1,?V2
   \   00008F   AA..         MOV     R2,?XSP + 0
   \   000091   AB..         MOV     R3,?XSP + 1
   \   000093   12....       LCALL   ??afFindSimpleDesc?relay; Banked call to: afFindSimpleDesc
   \   000096   E9           MOV     A,R1
   \   000097   F5..         MOV     ?V1,A
    689              if ( sDesc == NULL )
   \   000099   85..82       MOV     DPL,?XSP + 0
   \   00009C   85..83       MOV     DPH,?XSP + 1
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   F8           MOV     R0,A
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F9           MOV     R1,A
   \   0000A4   E8           MOV     A,R0
   \   0000A5   49           ORL     A,R1
   \   0000A6   7023         JNZ     ??ZDO_ProcessSimpleDescReq_2
    690              {
    691                stat = ZDP_NOT_ACTIVE;
   \   0000A8   75..83       MOV     ?V0,#-0x7d
   \   0000AB   801E         SJMP    ??ZDO_ProcessSimpleDescReq_2
    692              }
    693            }
    694            else
    695            {
    696              if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   0000AD   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   6008         JZ      ??ZDO_ProcessSimpleDescReq_5
   \   0000B3   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   6401         XRL     A,#0x1
   \   0000B9   7005         JNZ     ??ZDO_ProcessSimpleDescReq_6
    697              {
    698                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   0000BB   75..81       MOV     ?V0,#-0x7f
   \   0000BE   800B         SJMP    ??ZDO_ProcessSimpleDescReq_2
    699              }
    700              else if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDO_ProcessSimpleDescReq_6:
   \   0000C0   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   6402         XRL     A,#0x2
   \   0000C6   7003         JNZ     ??ZDO_ProcessSimpleDescReq_2
    701              {
    702                stat = ZDP_INVALID_REQTYPE;
   \   0000C8   75..80       MOV     ?V0,#-0x80
    703              }
    704            }
    705          
    706            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   0000CB                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   0000CB   85..82       MOV     DPL,?XSP + 0
   \   0000CE   85..83       MOV     DPH,?XSP + 1
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   FC           MOV     R4,A
   \   0000D3   A3           INC     DPTR
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   FD           MOV     R5,A
   \   0000D6   A9..         MOV     R1,?V0
   \   0000D8   AA..         MOV     R2,?V4
   \   0000DA   AB..         MOV     R3,?V5
   \   0000DC   12....       LCALL   ??ZDP_SimpleDescMsg?relay; Banked call to: ZDP_SimpleDescMsg
   \   0000DF   E9           MOV     A,R1
    707          
    708            if ( free && sDesc )
   \   0000E0   E5..         MOV     A,?V1
   \   0000E2   601D         JZ      ??ZDO_ProcessSimpleDescReq_7
   \   0000E4   85..82       MOV     DPL,?XSP + 0
   \   0000E7   85..83       MOV     DPH,?XSP + 1
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   F8           MOV     R0,A
   \   0000EC   A3           INC     DPTR
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   F9           MOV     R1,A
   \   0000EF   E8           MOV     A,R0
   \   0000F0   49           ORL     A,R1
   \   0000F1   600E         JZ      ??ZDO_ProcessSimpleDescReq_7
    709            {
    710              osal_mem_free( sDesc );
   \   0000F3                ; Setup parameters for call to function osal_mem_free
   \   0000F3   85..82       MOV     DPL,?XSP + 0
   \   0000F6   85..83       MOV     DPH,?XSP + 1
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   FA           MOV     R2,A
   \   0000FB   A3           INC     DPTR
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   FB           MOV     R3,A
   \   0000FE   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    711            }
    712          }
   \                     ??ZDO_ProcessSimpleDescReq_7:
   \   000101   7402         MOV     A,#0x2
   \   000103   12....       LCALL   ?DEALLOC_XSTACK8
   \   000106   7F06         MOV     R7,#0x6
   \   000108   02....       LJMP    ?BANKED_LEAVE_XDATA
    713          
    714          /*********************************************************************
    715           * @fn          ZDO_ProcessActiveEPReq
    716           *
    717           * @brief       This function processes and responds to the
    718           *              Active_EP_req message.
    719           *
    720           * @param       inMsg  - incoming message (request)
    721           *
    722           * @return      none
    723           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    724          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    725          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
    726            byte cnt = 0;
   \   000009   75..00       MOV     ?V1,#0x0
    727            uint16 aoi;
    728            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV     ?V0,#0x0
    729          
    730            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   E5..         MOV     A,?V4
   \   000011   2413         ADD     A,#0x13
   \   000013   F582         MOV     DPL,A
   \   000015   E4           CLR     A
   \   000016   35..         ADDC    A,?V5
   \   000018   F583         MOV     DPH,A
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F8           MOV     R0,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F583         MOV     DPH,A
   \   000020   8882         MOV     DPL,R0
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   7B00         MOV     R3,#0x0
   \   000026   E5..         MOV     A,?V4
   \   000028   2413         ADD     A,#0x13
   \   00002A   F582         MOV     DPL,A
   \   00002C   E4           CLR     A
   \   00002D   35..         ADDC    A,?V5
   \   00002F   F583         MOV     DPH,A
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F583         MOV     DPH,A
   \   000037   8882         MOV     DPL,R0
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F8           MOV     R0,A
   \   00003C   7900         MOV     R1,#0x0
   \   00003E   E4           CLR     A
   \   00003F   C8           XCH     A,R0
   \   000040   F9           MOV     R1,A
   \   000041   EA           MOV     A,R2
   \   000042   28           ADD     A,R0
   \   000043   F8           MOV     R0,A
   \   000044   EB           MOV     A,R3
   \   000045   39           ADDC    A,R1
   \   000046   F9           MOV     R1,A
   \   000047   E8           MOV     A,R0
   \   000048   FE           MOV     R6,A
   \   000049   E9           MOV     A,R1
   \   00004A   FF           MOV     R7,A
    731          
    732            if ( aoi == NLME_GetShortAddr() )
   \   00004B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00004B   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   00004E   8A..         MOV     ?V2,R2
   \   000050   8B..         MOV     ?V3,R3
   \   000052   E5..         MOV     A,?V2
   \   000054   6E           XRL     A,R6
   \   000055   7003         JNZ     ??ZDO_ProcessActiveEPReq_0
   \   000057   E5..         MOV     A,?V3
   \   000059   6F           XRL     A,R7
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   00005A   7013         JNZ     ??ZDO_ProcessActiveEPReq_1
    733            {
    734              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   00005C                ; Setup parameters for call to function afNumEndPoints
   \   00005C   12....       LCALL   ??afNumEndPoints?relay; Banked call to: afNumEndPoints
   \   00005F   E9           MOV     A,R1
   \   000060   24FF         ADD     A,#-0x1
   \   000062   F5..         MOV     ?V1,A
    735              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   000064                ; Setup parameters for call to function afEndPoints
   \   000064   7901         MOV     R1,#0x1
   \   000066   7A..         MOV     R2,#ZDOBuildBuf & 0xff
   \   000068   7B..         MOV     R3,#(ZDOBuildBuf >> 8) & 0xff
   \   00006A   12....       LCALL   ??afEndPoints?relay  ; Banked call to: afEndPoints
   \   00006D   8003         SJMP    ??ZDO_ProcessActiveEPReq_2
    736            }
    737            else
    738            {
    739              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   00006F   75..80       MOV     ?V0,#-0x80
    740            }
    741          
    742            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    743                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   000072                ; Setup parameters for call to function ZDP_EPRsp
   \   000072   E5..         MOV     A,?V4
   \   000074   240E         ADD     A,#0xe
   \   000076   F582         MOV     DPL,A
   \   000078   E4           CLR     A
   \   000079   35..         ADDC    A,?V5
   \   00007B   F583         MOV     DPH,A
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F5..         MOV     ?V2,A
   \   000080   78..         MOV     R0,#?V2
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000085   75....       MOV     ?V2,#ZDOBuildBuf & 0xff
   \   000088   75....       MOV     ?V3,#(ZDOBuildBuf >> 8) & 0xff
   \   00008B   78..         MOV     R0,#?V2
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000090   E5..         MOV     A,?V1
   \   000092   F5..         MOV     ?V2,A
   \   000094   78..         MOV     R0,#?V2
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000099   8E..         MOV     ?V2,R6
   \   00009B   8F..         MOV     ?V3,R7
   \   00009D   78..         MOV     R0,#?V2
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   E5..         MOV     A,?V0
   \   0000A4   F5..         MOV     ?V2,A
   \   0000A6   78..         MOV     R0,#?V2
   \   0000A8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AB   E5..         MOV     A,?V4
   \   0000AD   2402         ADD     A,#0x2
   \   0000AF   FC           MOV     R4,A
   \   0000B0   E4           CLR     A
   \   0000B1   35..         ADDC    A,?V5
   \   0000B3   FD           MOV     R5,A
   \   0000B4   E5..         MOV     A,?V4
   \   0000B6   240F         ADD     A,#0xf
   \   0000B8   F582         MOV     DPL,A
   \   0000BA   E4           CLR     A
   \   0000BB   35..         ADDC    A,?V5
   \   0000BD   F583         MOV     DPH,A
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   F9           MOV     R1,A
   \   0000C1   7A05         MOV     R2,#0x5
   \   0000C3   7B80         MOV     R3,#-0x80
   \   0000C5   12....       LCALL   ??ZDP_EPRsp?relay    ; Banked call to: ZDP_EPRsp
   \   0000C8   7407         MOV     A,#0x7
   \   0000CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CD   E9           MOV     A,R1
    744          }
   \   0000CE   7F06         MOV     R7,#0x6
   \   0000D0   02....       LJMP    ?BANKED_LEAVE_XDATA
    745          
    746          /*********************************************************************
    747           * @fn          ZDO_ConvertOTAClusters
    748           *
    749           * @brief       This function will convert the over-the-air cluster list
    750           *              format to an internal format.
    751           *
    752           * @param       inMsg  - incoming message (request)
    753           *
    754           * @return      pointer to incremented inBuf
    755           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    756          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    757          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    758            uint8 x;
    759          
    760            for ( x = 0; x < cnt; x++ )
   \   000007   7F00         MOV     R7,#0x0
   \                     ??ZDO_ConvertOTAClusters_0:
   \   000009   EF           MOV     A,R7
   \   00000A   C3           CLR     C
   \   00000B   9E           SUBB    A,R6
   \   00000C   5056         JNC     ??ZDO_ConvertOTAClusters_1
    761            {
    762              // convert ota format to internal
    763              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0,A
   \   000015   75..00       MOV     ?V1,#0x0
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F8           MOV     R0,A
   \   00001F   7900         MOV     R1,#0x0
   \   000021   E4           CLR     A
   \   000022   C8           XCH     A,R0
   \   000023   F9           MOV     R1,A
   \   000024   E5..         MOV     A,?V0
   \   000026   28           ADD     A,R0
   \   000027   F5..         MOV     ?V0,A
   \   000029   E5..         MOV     A,?V1
   \   00002B   39           ADDC    A,R1
   \   00002C   F5..         MOV     ?V1,A
   \   00002E   EF           MOV     A,R7
   \   00002F   F8           MOV     R0,A
   \   000030   7900         MOV     R1,#0x0
   \   000032   E8           MOV     A,R0
   \   000033   75F002       MOV     B,#0x2
   \   000036   A4           MUL     AB
   \   000037   C8           XCH     A,R0
   \   000038   85F0..       MOV     ?V2,B
   \   00003B   75F000       MOV     B,#0x0
   \   00003E   A4           MUL     AB
   \   00003F   25..         ADD     A,?V2
   \   000041   F5..         MOV     ?V2,A
   \   000043   75F002       MOV     B,#0x2
   \   000046   E9           MOV     A,R1
   \   000047   A4           MUL     AB
   \   000048   25..         ADD     A,?V2
   \   00004A   F9           MOV     R1,A
   \   00004B   EC           MOV     A,R4
   \   00004C   28           ADD     A,R0
   \   00004D   F582         MOV     DPL,A
   \   00004F   ED           MOV     A,R5
   \   000050   39           ADDC    A,R1
   \   000051   F583         MOV     DPH,A
   \   000053   E5..         MOV     A,?V0
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   E5..         MOV     A,?V1
   \   000059   F0           MOVX    @DPTR,A
    764              inBuf += sizeof( uint16 );
   \   00005A   EA           MOV     A,R2
   \   00005B   2402         ADD     A,#0x2
   \   00005D   FA           MOV     R2,A
   \   00005E   5001         JNC     ??ZDO_ConvertOTAClusters_2
   \   000060   0B           INC     R3
    765            }
   \                     ??ZDO_ConvertOTAClusters_2:
   \   000061   0F           INC     R7
   \   000062   80A5         SJMP    ??ZDO_ConvertOTAClusters_0
    766            return ( inBuf );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   000064   7F03         MOV     R7,#0x3
   \   000066   02....       LJMP    ?BANKED_LEAVE_XDATA
    767          }
    768          
    769          /*********************************************************************
    770           * @fn          ZDO_ProcessMatchDescReq
    771           *
    772           * @brief       This function processes and responds to the
    773           *              Match_Desc_req message.
    774           *
    775           * @param       inMsg  - incoming message (request)
    776           *
    777           * @return      none
    778           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    779          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    780          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7404         MOV     A,#0x4
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
    781            uint8 epCnt = 0;
   \   000014   75..00       MOV     ?V7,#0x0
    782            uint8 numInClusters;
    783            uint16 *inClusters = NULL;
   \   000017   7409         MOV     A,#0x9
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   7400         MOV     A,#0x0
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   7400         MOV     A,#0x0
   \   000022   F0           MOVX    @DPTR,A
    784            uint8 numOutClusters;
    785            uint16 *outClusters = NULL;
   \   000023   7407         MOV     A,#0x7
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   7400         MOV     A,#0x0
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   7400         MOV     A,#0x0
   \   00002E   F0           MOVX    @DPTR,A
    786            epList_t *epDesc;
    787            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00002F   85..82       MOV     DPL,?XSP + 0
   \   000032   85..83       MOV     DPH,?XSP + 1
   \   000035   7400         MOV     A,#0x0
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   7400         MOV     A,#0x0
   \   00003B   F0           MOVX    @DPTR,A
    788            uint8 allocated;
    789            uint8 *msg;
    790            uint16 aoi;
    791            uint16 profileID;
    792          
    793            // Parse the incoming message
    794            msg = inMsg->asdu;
   \   00003C   7404         MOV     A,#0x4
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F8           MOV     R0,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   C8           XCH     A,R0
   \   000046   2413         ADD     A,#0x13
   \   000048   F582         MOV     DPL,A
   \   00004A   C8           XCH     A,R0
   \   00004B   3400         ADDC    A,#0x0
   \   00004D   F583         MOV     DPH,A
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F8           MOV     R0,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   E8           MOV     A,R0
   \   000055   FE           MOV     R6,A
   \   000056   E9           MOV     A,R1
   \   000057   FF           MOV     R7,A
    795            aoi = BUILD_UINT16( msg[0], msg[1] );
   \   000058   8E82         MOV     DPL,R6
   \   00005A   8F83         MOV     DPH,R7
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   FA           MOV     R2,A
   \   00005E   7B00         MOV     R3,#0x0
   \   000060   8E82         MOV     DPL,R6
   \   000062   8F83         MOV     DPH,R7
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F8           MOV     R0,A
   \   000067   7900         MOV     R1,#0x0
   \   000069   E4           CLR     A
   \   00006A   C8           XCH     A,R0
   \   00006B   F9           MOV     R1,A
   \   00006C   EA           MOV     A,R2
   \   00006D   28           ADD     A,R0
   \   00006E   F8           MOV     R0,A
   \   00006F   EB           MOV     A,R3
   \   000070   39           ADDC    A,R1
   \   000071   F9           MOV     R1,A
   \   000072   740C         MOV     A,#0xc
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E8           MOV     A,R0
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   E9           MOV     A,R1
   \   00007B   F0           MOVX    @DPTR,A
    796            profileID = BUILD_UINT16( msg[2], msg[3] );
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   FA           MOV     R2,A
   \   000084   7B00         MOV     R3,#0x0
   \   000086   8E82         MOV     DPL,R6
   \   000088   8F83         MOV     DPH,R7
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   F8           MOV     R0,A
   \   00008F   7900         MOV     R1,#0x0
   \   000091   E4           CLR     A
   \   000092   C8           XCH     A,R0
   \   000093   F9           MOV     R1,A
   \   000094   EA           MOV     A,R2
   \   000095   28           ADD     A,R0
   \   000096   F8           MOV     R0,A
   \   000097   EB           MOV     A,R3
   \   000098   39           ADDC    A,R1
   \   000099   F9           MOV     R1,A
   \   00009A   7410         MOV     A,#0x10
   \   00009C   12....       LCALL   ?XSTACK_DISP0_8
   \   00009F   E8           MOV     A,R0
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   A3           INC     DPTR
   \   0000A2   E9           MOV     A,R1
   \   0000A3   F0           MOVX    @DPTR,A
    797            msg += 4;
   \   0000A4   EE           MOV     A,R6
   \   0000A5   2404         ADD     A,#0x4
   \   0000A7   FE           MOV     R6,A
   \   0000A8   5001         JNC     ??ZDO_ProcessMatchDescReq_0
   \   0000AA   0F           INC     R7
    798          
    799            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   0000AB                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   0000AB   740C         MOV     A,#0xc
   \   0000AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   FA           MOV     R2,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   FB           MOV     R3,A
   \   0000B5   12....       LCALL   ??NLME_IsAddressBroadcast?relay; Banked call to: NLME_IsAddressBroadcast
   \   0000B8   E9           MOV     A,R1
   \   0000B9   6401         XRL     A,#0x1
   \   0000BB   706E         JNZ     ??ZDO_ProcessMatchDescReq_1
    800            {
    801              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    802                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \   0000BD                ; Setup parameters for call to function ZDP_EPRsp
   \   0000BD   7404         MOV     A,#0x4
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F8           MOV     R0,A
   \   0000C4   A3           INC     DPTR
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   C8           XCH     A,R0
   \   0000C7   240E         ADD     A,#0xe
   \   0000C9   F582         MOV     DPL,A
   \   0000CB   C8           XCH     A,R0
   \   0000CC   3400         ADDC    A,#0x0
   \   0000CE   F583         MOV     DPH,A
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   F5..         MOV     ?V0,A
   \   0000D3   78..         MOV     R0,#?V0
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D8   E4           CLR     A
   \   0000D9   F5..         MOV     ?V0,A
   \   0000DB   F5..         MOV     ?V1,A
   \   0000DD   78..         MOV     R0,#?V0
   \   0000DF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E2   75..00       MOV     ?V0,#0x0
   \   0000E5   78..         MOV     R0,#?V0
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EA   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0000ED   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000F0   75..80       MOV     ?V0,#-0x80
   \   0000F3   78..         MOV     R0,#?V0
   \   0000F5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F8   740B         MOV     A,#0xb
   \   0000FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   2402         ADD     A,#0x2
   \   000100   FC           MOV     R4,A
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   3400         ADDC    A,#0x0
   \   000105   FD           MOV     R5,A
   \   000106   740B         MOV     A,#0xb
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   F8           MOV     R0,A
   \   00010D   A3           INC     DPTR
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   C8           XCH     A,R0
   \   000110   240F         ADD     A,#0xf
   \   000112   F582         MOV     DPL,A
   \   000114   C8           XCH     A,R0
   \   000115   3400         ADDC    A,#0x0
   \   000117   F583         MOV     DPH,A
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   F9           MOV     R1,A
   \   00011B   7A06         MOV     R2,#0x6
   \   00011D   7B80         MOV     R3,#-0x80
   \   00011F   12....       LCALL   ??ZDP_EPRsp?relay    ; Banked call to: ZDP_EPRsp
   \   000122   7407         MOV     A,#0x7
   \   000124   12....       LCALL   ?DEALLOC_XSTACK8
   \   000127   E9           MOV     A,R1
    803              return;
   \   000128   02....       LJMP    ??ZDO_ProcessMatchDescReq_2 & 0xFFFF
    804            }
    805            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   00012B                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00012B   740C         MOV     A,#0xc
   \   00012D   12....       LCALL   ?XSTACK_DISP0_8
   \   000130   E0           MOVX    A,@DPTR
   \   000131   FA           MOV     R2,A
   \   000132   A3           INC     DPTR
   \   000133   E0           MOVX    A,@DPTR
   \   000134   FB           MOV     R3,A
   \   000135   12....       LCALL   ??NLME_IsAddressBroadcast?relay; Banked call to: NLME_IsAddressBroadcast
   \   000138   E9           MOV     A,R1
   \   000139   6003         JZ      $+5
   \   00013B   02....       LJMP    ??ZDO_ProcessMatchDescReq_3 & 0xFFFF
   \   00013E   740C         MOV     A,#0xc
   \   000140   12....       LCALL   ?XSTACK_DISP0_8
   \   000143   E0           MOVX    A,@DPTR
   \   000144   F8           MOV     R0,A
   \   000145   A3           INC     DPTR
   \   000146   E0           MOVX    A,@DPTR
   \   000147   F9           MOV     R1,A
   \   000148   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   68           XRL     A,R0
   \   00014D   7003         JNZ     ??ZDO_ProcessMatchDescReq_4
   \   00014F   A3           INC     DPTR
   \   000150   E0           MOVX    A,@DPTR
   \   000151   69           XRL     A,R1
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   000152   606E         JZ      ??ZDO_ProcessMatchDescReq_3
    806            {
    807              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    808                                       ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \   000154                ; Setup parameters for call to function ZDP_EPRsp
   \   000154   7404         MOV     A,#0x4
   \   000156   12....       LCALL   ?XSTACK_DISP0_8
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   F8           MOV     R0,A
   \   00015B   A3           INC     DPTR
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   C8           XCH     A,R0
   \   00015E   240E         ADD     A,#0xe
   \   000160   F582         MOV     DPL,A
   \   000162   C8           XCH     A,R0
   \   000163   3400         ADDC    A,#0x0
   \   000165   F583         MOV     DPH,A
   \   000167   E0           MOVX    A,@DPTR
   \   000168   F5..         MOV     ?V0,A
   \   00016A   78..         MOV     R0,#?V0
   \   00016C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00016F   E4           CLR     A
   \   000170   F5..         MOV     ?V0,A
   \   000172   F5..         MOV     ?V1,A
   \   000174   78..         MOV     R0,#?V0
   \   000176   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000179   75..00       MOV     ?V0,#0x0
   \   00017C   78..         MOV     R0,#?V0
   \   00017E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000181   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000184   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000187   75..80       MOV     ?V0,#-0x80
   \   00018A   78..         MOV     R0,#?V0
   \   00018C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00018F   740B         MOV     A,#0xb
   \   000191   12....       LCALL   ?XSTACK_DISP0_8
   \   000194   E0           MOVX    A,@DPTR
   \   000195   2402         ADD     A,#0x2
   \   000197   FC           MOV     R4,A
   \   000198   A3           INC     DPTR
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   3400         ADDC    A,#0x0
   \   00019C   FD           MOV     R5,A
   \   00019D   740B         MOV     A,#0xb
   \   00019F   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   F8           MOV     R0,A
   \   0001A4   A3           INC     DPTR
   \   0001A5   E0           MOVX    A,@DPTR
   \   0001A6   C8           XCH     A,R0
   \   0001A7   240F         ADD     A,#0xf
   \   0001A9   F582         MOV     DPL,A
   \   0001AB   C8           XCH     A,R0
   \   0001AC   3400         ADDC    A,#0x0
   \   0001AE   F583         MOV     DPH,A
   \   0001B0   E0           MOVX    A,@DPTR
   \   0001B1   F9           MOV     R1,A
   \   0001B2   7A06         MOV     R2,#0x6
   \   0001B4   7B80         MOV     R3,#-0x80
   \   0001B6   12....       LCALL   ??ZDP_EPRsp?relay    ; Banked call to: ZDP_EPRsp
   \   0001B9   7407         MOV     A,#0x7
   \   0001BB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001BE   E9           MOV     A,R1
    809              return;
   \   0001BF   02....       LJMP    ??ZDO_ProcessMatchDescReq_2 & 0xFFFF
    810            }
    811          
    812            if ((numInClusters = *msg++) &&
    813                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   0001C2   8E82         MOV     DPL,R6
   \   0001C4   8F83         MOV     DPH,R7
   \   0001C6   E0           MOVX    A,@DPTR
   \   0001C7   F8           MOV     R0,A
   \   0001C8   8E82         MOV     DPL,R6
   \   0001CA   8F83         MOV     DPH,R7
   \   0001CC   A3           INC     DPTR
   \   0001CD   AE82         MOV     R6,DPL
   \   0001CF   AF83         MOV     R7,DPH
   \   0001D1   88..         MOV     ?V3,R0
   \   0001D3   E8           MOV     A,R0
   \   0001D4   604F         JZ      ??ZDO_ProcessMatchDescReq_5
   \   0001D6                ; Setup parameters for call to function osal_mem_alloc
   \   0001D6   AA..         MOV     R2,?V3
   \   0001D8   7B00         MOV     R3,#0x0
   \   0001DA   EA           MOV     A,R2
   \   0001DB   75F002       MOV     B,#0x2
   \   0001DE   A4           MUL     AB
   \   0001DF   CA           XCH     A,R2
   \   0001E0   A8F0         MOV     R0,B
   \   0001E2   75F000       MOV     B,#0x0
   \   0001E5   A4           MUL     AB
   \   0001E6   28           ADD     A,R0
   \   0001E7   F8           MOV     R0,A
   \   0001E8   75F002       MOV     B,#0x2
   \   0001EB   EB           MOV     A,R3
   \   0001EC   A4           MUL     AB
   \   0001ED   28           ADD     A,R0
   \   0001EE   FB           MOV     R3,A
   \   0001EF   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0001F2   8A..         MOV     ?V0,R2
   \   0001F4   8B..         MOV     ?V1,R3
   \   0001F6   A8..         MOV     R0,?V0
   \   0001F8   A9..         MOV     R1,?V1
   \   0001FA   7409         MOV     A,#0x9
   \   0001FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FF   E8           MOV     A,R0
   \   000200   F0           MOVX    @DPTR,A
   \   000201   A3           INC     DPTR
   \   000202   E9           MOV     A,R1
   \   000203   F0           MOVX    @DPTR,A
   \   000204   E8           MOV     A,R0
   \   000205   49           ORL     A,R1
   \   000206   601D         JZ      ??ZDO_ProcessMatchDescReq_5
    814            {
    815              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   000208                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000208   7409         MOV     A,#0x9
   \   00020A   12....       LCALL   ?XSTACK_DISP0_8
   \   00020D   E0           MOVX    A,@DPTR
   \   00020E   FC           MOV     R4,A
   \   00020F   A3           INC     DPTR
   \   000210   E0           MOVX    A,@DPTR
   \   000211   FD           MOV     R5,A
   \   000212   EE           MOV     A,R6
   \   000213   FA           MOV     R2,A
   \   000214   EF           MOV     A,R7
   \   000215   FB           MOV     R3,A
   \   000216   A9..         MOV     R1,?V3
   \   000218   12....       LCALL   ??ZDO_ConvertOTAClusters?relay; Banked call to: ZDO_ConvertOTAClusters
   \   00021B   8A..         MOV     ?V0,R2
   \   00021D   8B..         MOV     ?V1,R3
   \   00021F   AE..         MOV     R6,?V0
   \   000221   AF..         MOV     R7,?V1
   \   000223   8003         SJMP    ??ZDO_ProcessMatchDescReq_6
    816            }
    817            else
    818            {
    819              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   000225   75..00       MOV     ?V3,#0x0
    820            }
    821          
    822            if ((numOutClusters = *msg++) &&
    823                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   000228   8E82         MOV     DPL,R6
   \   00022A   8F83         MOV     DPH,R7
   \   00022C   E0           MOVX    A,@DPTR
   \   00022D   F8           MOV     R0,A
   \   00022E   8E82         MOV     DPL,R6
   \   000230   8F83         MOV     DPH,R7
   \   000232   A3           INC     DPTR
   \   000233   AE82         MOV     R6,DPL
   \   000235   AF83         MOV     R7,DPH
   \   000237   88..         MOV     ?V6,R0
   \   000239   E8           MOV     A,R0
   \   00023A   604F         JZ      ??ZDO_ProcessMatchDescReq_7
   \   00023C                ; Setup parameters for call to function osal_mem_alloc
   \   00023C   AA..         MOV     R2,?V6
   \   00023E   7B00         MOV     R3,#0x0
   \   000240   EA           MOV     A,R2
   \   000241   75F002       MOV     B,#0x2
   \   000244   A4           MUL     AB
   \   000245   CA           XCH     A,R2
   \   000246   A8F0         MOV     R0,B
   \   000248   75F000       MOV     B,#0x0
   \   00024B   A4           MUL     AB
   \   00024C   28           ADD     A,R0
   \   00024D   F8           MOV     R0,A
   \   00024E   75F002       MOV     B,#0x2
   \   000251   EB           MOV     A,R3
   \   000252   A4           MUL     AB
   \   000253   28           ADD     A,R0
   \   000254   FB           MOV     R3,A
   \   000255   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000258   8A..         MOV     ?V0,R2
   \   00025A   8B..         MOV     ?V1,R3
   \   00025C   A8..         MOV     R0,?V0
   \   00025E   A9..         MOV     R1,?V1
   \   000260   7407         MOV     A,#0x7
   \   000262   12....       LCALL   ?XSTACK_DISP0_8
   \   000265   E8           MOV     A,R0
   \   000266   F0           MOVX    @DPTR,A
   \   000267   A3           INC     DPTR
   \   000268   E9           MOV     A,R1
   \   000269   F0           MOVX    @DPTR,A
   \   00026A   E8           MOV     A,R0
   \   00026B   49           ORL     A,R1
   \   00026C   601D         JZ      ??ZDO_ProcessMatchDescReq_7
    824            {
    825              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   00026E                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   00026E   7407         MOV     A,#0x7
   \   000270   12....       LCALL   ?XSTACK_DISP0_8
   \   000273   E0           MOVX    A,@DPTR
   \   000274   FC           MOV     R4,A
   \   000275   A3           INC     DPTR
   \   000276   E0           MOVX    A,@DPTR
   \   000277   FD           MOV     R5,A
   \   000278   EE           MOV     A,R6
   \   000279   FA           MOV     R2,A
   \   00027A   EF           MOV     A,R7
   \   00027B   FB           MOV     R3,A
   \   00027C   A9..         MOV     R1,?V6
   \   00027E   12....       LCALL   ??ZDO_ConvertOTAClusters?relay; Banked call to: ZDO_ConvertOTAClusters
   \   000281   8A..         MOV     ?V0,R2
   \   000283   8B..         MOV     ?V1,R3
   \   000285   AE..         MOV     R6,?V0
   \   000287   AF..         MOV     R7,?V1
   \   000289   8003         SJMP    ??ZDO_ProcessMatchDescReq_8
    826            }
    827            else
    828            {
    829              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   00028B   75..00       MOV     ?V6,#0x0
    830            }
    831          
    832            // First count the number of endpoints that match.
    833            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   00028E   90....       MOV     DPTR,#epList
   \   000291   E0           MOVX    A,@DPTR
   \   000292   F8           MOV     R0,A
   \   000293   A3           INC     DPTR
   \   000294   E0           MOVX    A,@DPTR
   \   000295   F9           MOV     R1,A
   \   000296   7402         MOV     A,#0x2
   \   000298   12....       LCALL   ?XSTACK_DISP0_8
   \   00029B   E8           MOV     A,R0
   \   00029C   F0           MOVX    @DPTR,A
   \   00029D   A3           INC     DPTR
   \   00029E   E9           MOV     A,R1
   \   00029F   F0           MOVX    @DPTR,A
    834            while ( epDesc )
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   0002A0   7402         MOV     A,#0x2
   \   0002A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A5   E0           MOVX    A,@DPTR
   \   0002A6   F8           MOV     R0,A
   \   0002A7   A3           INC     DPTR
   \   0002A8   E0           MOVX    A,@DPTR
   \   0002A9   F9           MOV     R1,A
   \   0002AA   E8           MOV     A,R0
   \   0002AB   49           ORL     A,R1
   \   0002AC   7003         JNZ     $+5
   \   0002AE   02....       LJMP    ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
    835            {
    836              // Don't search endpoint 0 and check if response is allowed
    837              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
   \   0002B1   7402         MOV     A,#0x2
   \   0002B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B6   E0           MOVX    A,@DPTR
   \   0002B7   F8           MOV     R0,A
   \   0002B8   A3           INC     DPTR
   \   0002B9   E0           MOVX    A,@DPTR
   \   0002BA   F583         MOV     DPH,A
   \   0002BC   8882         MOV     DPL,R0
   \   0002BE   E0           MOVX    A,@DPTR
   \   0002BF   F8           MOV     R0,A
   \   0002C0   A3           INC     DPTR
   \   0002C1   E0           MOVX    A,@DPTR
   \   0002C2   F583         MOV     DPH,A
   \   0002C4   8882         MOV     DPL,R0
   \   0002C6   E0           MOVX    A,@DPTR
   \   0002C7   7003         JNZ     $+5
   \   0002C9   02....       LJMP    ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
   \   0002CC   7402         MOV     A,#0x2
   \   0002CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D1   E0           MOVX    A,@DPTR
   \   0002D2   F8           MOV     R0,A
   \   0002D3   A3           INC     DPTR
   \   0002D4   E0           MOVX    A,@DPTR
   \   0002D5   F583         MOV     DPH,A
   \   0002D7   8882         MOV     DPL,R0
   \   0002D9   A3           INC     DPTR
   \   0002DA   A3           INC     DPTR
   \   0002DB   E0           MOVX    A,@DPTR
   \   0002DC   A2E0         MOV     C,0xE0 /* A   */.0
   \   0002DE   4003         JC      $+5
   \   0002E0   02....       LJMP    ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
    838              {
    839                if ( epDesc->pfnDescCB )
   \   0002E3   7402         MOV     A,#0x2
   \   0002E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E8   E0           MOVX    A,@DPTR
   \   0002E9   F8           MOV     R0,A
   \   0002EA   A3           INC     DPTR
   \   0002EB   E0           MOVX    A,@DPTR
   \   0002EC   F583         MOV     DPH,A
   \   0002EE   8882         MOV     DPL,R0
   \   0002F0   A3           INC     DPTR
   \   0002F1   A3           INC     DPTR
   \   0002F2   A3           INC     DPTR
   \   0002F3   E0           MOVX    A,@DPTR
   \   0002F4   F8           MOV     R0,A
   \   0002F5   A3           INC     DPTR
   \   0002F6   E0           MOVX    A,@DPTR
   \   0002F7   F9           MOV     R1,A
   \   0002F8   E8           MOV     A,R0
   \   0002F9   49           ORL     A,R1
   \   0002FA   6049         JZ      ??ZDO_ProcessMatchDescReq_12
    840                {
    841                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
   \   0002FC                ; Setup parameters for indirect call
   \   0002FC   7402         MOV     A,#0x2
   \   0002FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000301   E0           MOVX    A,@DPTR
   \   000302   F8           MOV     R0,A
   \   000303   A3           INC     DPTR
   \   000304   E0           MOVX    A,@DPTR
   \   000305   F583         MOV     DPH,A
   \   000307   8882         MOV     DPL,R0
   \   000309   E0           MOVX    A,@DPTR
   \   00030A   F8           MOV     R0,A
   \   00030B   A3           INC     DPTR
   \   00030C   E0           MOVX    A,@DPTR
   \   00030D   F583         MOV     DPH,A
   \   00030F   8882         MOV     DPL,R0
   \   000311   E0           MOVX    A,@DPTR
   \   000312   FA           MOV     R2,A
   \   000313   7901         MOV     R1,#0x1
   \   000315   7402         MOV     A,#0x2
   \   000317   12....       LCALL   ?XSTACK_DISP0_8
   \   00031A   E0           MOVX    A,@DPTR
   \   00031B   F8           MOV     R0,A
   \   00031C   A3           INC     DPTR
   \   00031D   E0           MOVX    A,@DPTR
   \   00031E   F583         MOV     DPH,A
   \   000320   8882         MOV     DPL,R0
   \   000322   A3           INC     DPTR
   \   000323   A3           INC     DPTR
   \   000324   A3           INC     DPTR
   \   000325   E0           MOVX    A,@DPTR
   \   000326   F8           MOV     R0,A
   \   000327   A3           INC     DPTR
   \   000328   E0           MOVX    A,@DPTR
   \   000329   F583         MOV     DPH,A
   \   00032B   8882         MOV     DPL,R0
   \   00032D   12....       LCALL   ?CALL_IND
   \   000330   85..82       MOV     DPL,?XSP + 0
   \   000333   85..83       MOV     DPH,?XSP + 1
   \   000336   EA           MOV     A,R2
   \   000337   F0           MOVX    @DPTR,A
   \   000338   A3           INC     DPTR
   \   000339   EB           MOV     A,R3
   \   00033A   F0           MOVX    @DPTR,A
    842                  allocated = TRUE;
   \   00033B   7406         MOV     A,#0x6
   \   00033D   12....       LCALL   ?XSTACK_DISP0_8
   \   000340   7401         MOV     A,#0x1
   \   000342   F0           MOVX    @DPTR,A
   \   000343   8030         SJMP    ??ZDO_ProcessMatchDescReq_13
    843                }
    844                else
    845                {
    846                  sDesc = epDesc->epDesc->simpleDesc;
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   000345   7402         MOV     A,#0x2
   \   000347   12....       LCALL   ?XSTACK_DISP0_8
   \   00034A   E0           MOVX    A,@DPTR
   \   00034B   F8           MOV     R0,A
   \   00034C   A3           INC     DPTR
   \   00034D   E0           MOVX    A,@DPTR
   \   00034E   F583         MOV     DPH,A
   \   000350   8882         MOV     DPL,R0
   \   000352   E0           MOVX    A,@DPTR
   \   000353   F8           MOV     R0,A
   \   000354   A3           INC     DPTR
   \   000355   E0           MOVX    A,@DPTR
   \   000356   F583         MOV     DPH,A
   \   000358   8882         MOV     DPL,R0
   \   00035A   A3           INC     DPTR
   \   00035B   A3           INC     DPTR
   \   00035C   A3           INC     DPTR
   \   00035D   E0           MOVX    A,@DPTR
   \   00035E   F8           MOV     R0,A
   \   00035F   A3           INC     DPTR
   \   000360   E0           MOVX    A,@DPTR
   \   000361   F9           MOV     R1,A
   \   000362   85..82       MOV     DPL,?XSP + 0
   \   000365   85..83       MOV     DPH,?XSP + 1
   \   000368   E8           MOV     A,R0
   \   000369   F0           MOVX    @DPTR,A
   \   00036A   A3           INC     DPTR
   \   00036B   E9           MOV     A,R1
   \   00036C   F0           MOVX    @DPTR,A
    847                  allocated = FALSE;
   \   00036D   7406         MOV     A,#0x6
   \   00036F   12....       LCALL   ?XSTACK_DISP0_8
   \   000372   7400         MOV     A,#0x0
   \   000374   F0           MOVX    @DPTR,A
    848                }
    849          
    850                if ( sDesc && sDesc->AppProfId == profileID )
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   000375   85..82       MOV     DPL,?XSP + 0
   \   000378   85..83       MOV     DPH,?XSP + 1
   \   00037B   E0           MOVX    A,@DPTR
   \   00037C   F8           MOV     R0,A
   \   00037D   A3           INC     DPTR
   \   00037E   E0           MOVX    A,@DPTR
   \   00037F   F9           MOV     R1,A
   \   000380   E8           MOV     A,R0
   \   000381   49           ORL     A,R1
   \   000382   7003         JNZ     $+5
   \   000384   02....       LJMP    ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
   \   000387   85..82       MOV     DPL,?XSP + 0
   \   00038A   85..83       MOV     DPH,?XSP + 1
   \   00038D   E0           MOVX    A,@DPTR
   \   00038E   F8           MOV     R0,A
   \   00038F   A3           INC     DPTR
   \   000390   E0           MOVX    A,@DPTR
   \   000391   F583         MOV     DPH,A
   \   000393   8882         MOV     DPL,R0
   \   000395   A3           INC     DPTR
   \   000396   E0           MOVX    A,@DPTR
   \   000397   F8           MOV     R0,A
   \   000398   A3           INC     DPTR
   \   000399   E0           MOVX    A,@DPTR
   \   00039A   F9           MOV     R1,A
   \   00039B   7410         MOV     A,#0x10
   \   00039D   12....       LCALL   ?XSTACK_DISP0_8
   \   0003A0   E0           MOVX    A,@DPTR
   \   0003A1   68           XRL     A,R0
   \   0003A2   7003         JNZ     ??ZDO_ProcessMatchDescReq_15
   \   0003A4   A3           INC     DPTR
   \   0003A5   E0           MOVX    A,@DPTR
   \   0003A6   69           XRL     A,R1
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   0003A7   6003         JZ      $+5
   \   0003A9   02....       LJMP    ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
    851                {
    852                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
   \   0003AC   740E         MOV     A,#0xe
   \   0003AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0003B1   74..         MOV     A,#ZDOBuildBuf & 0xff
   \   0003B3   F0           MOVX    @DPTR,A
   \   0003B4   A3           INC     DPTR
   \   0003B5   74..         MOV     A,#(ZDOBuildBuf >> 8) & 0xff
   \   0003B7   F0           MOVX    @DPTR,A
    853          
    854                  // Are there matching input clusters?
    855                  if ((ZDO_AnyClusterMatches( numInClusters, inClusters,
    856                             sDesc->AppNumInClusters, sDesc->pAppInClusterList )) ||
    857                      // Are there matching output clusters?
    858                      (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    859                             sDesc->AppNumOutClusters, sDesc->pAppOutClusterList )))
   \   0003B8                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   0003B8   85..82       MOV     DPL,?XSP + 0
   \   0003BB   85..83       MOV     DPH,?XSP + 1
   \   0003BE   E0           MOVX    A,@DPTR
   \   0003BF   F8           MOV     R0,A
   \   0003C0   A3           INC     DPTR
   \   0003C1   E0           MOVX    A,@DPTR
   \   0003C2   C8           XCH     A,R0
   \   0003C3   2407         ADD     A,#0x7
   \   0003C5   F582         MOV     DPL,A
   \   0003C7   C8           XCH     A,R0
   \   0003C8   3400         ADDC    A,#0x0
   \   0003CA   F583         MOV     DPH,A
   \   0003CC   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0003CF   7402         MOV     A,#0x2
   \   0003D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0003D4   E0           MOVX    A,@DPTR
   \   0003D5   F8           MOV     R0,A
   \   0003D6   A3           INC     DPTR
   \   0003D7   E0           MOVX    A,@DPTR
   \   0003D8   C8           XCH     A,R0
   \   0003D9   2406         ADD     A,#0x6
   \   0003DB   F582         MOV     DPL,A
   \   0003DD   C8           XCH     A,R0
   \   0003DE   3400         ADDC    A,#0x0
   \   0003E0   F583         MOV     DPH,A
   \   0003E2   E0           MOVX    A,@DPTR
   \   0003E3   FC           MOV     R4,A
   \   0003E4   740B         MOV     A,#0xb
   \   0003E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E9   E0           MOVX    A,@DPTR
   \   0003EA   FA           MOV     R2,A
   \   0003EB   A3           INC     DPTR
   \   0003EC   E0           MOVX    A,@DPTR
   \   0003ED   FB           MOV     R3,A
   \   0003EE   A9..         MOV     R1,?V3
   \   0003F0   12....       LCALL   ??ZDO_AnyClusterMatches?relay; Banked call to: ZDO_AnyClusterMatches
   \   0003F3   7402         MOV     A,#0x2
   \   0003F5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003F8   E9           MOV     A,R1
   \   0003F9   7046         JNZ     ??ZDO_ProcessMatchDescReq_16
   \   0003FB                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   0003FB   85..82       MOV     DPL,?XSP + 0
   \   0003FE   85..83       MOV     DPH,?XSP + 1
   \   000401   E0           MOVX    A,@DPTR
   \   000402   F8           MOV     R0,A
   \   000403   A3           INC     DPTR
   \   000404   E0           MOVX    A,@DPTR
   \   000405   C8           XCH     A,R0
   \   000406   240A         ADD     A,#0xa
   \   000408   F582         MOV     DPL,A
   \   00040A   C8           XCH     A,R0
   \   00040B   3400         ADDC    A,#0x0
   \   00040D   F583         MOV     DPH,A
   \   00040F   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000412   7402         MOV     A,#0x2
   \   000414   12....       LCALL   ?XSTACK_DISP0_8
   \   000417   E0           MOVX    A,@DPTR
   \   000418   F8           MOV     R0,A
   \   000419   A3           INC     DPTR
   \   00041A   E0           MOVX    A,@DPTR
   \   00041B   C8           XCH     A,R0
   \   00041C   2409         ADD     A,#0x9
   \   00041E   F582         MOV     DPL,A
   \   000420   C8           XCH     A,R0
   \   000421   3400         ADDC    A,#0x0
   \   000423   F583         MOV     DPH,A
   \   000425   E0           MOVX    A,@DPTR
   \   000426   FC           MOV     R4,A
   \   000427   7409         MOV     A,#0x9
   \   000429   12....       LCALL   ?XSTACK_DISP0_8
   \   00042C   E0           MOVX    A,@DPTR
   \   00042D   FA           MOV     R2,A
   \   00042E   A3           INC     DPTR
   \   00042F   E0           MOVX    A,@DPTR
   \   000430   FB           MOV     R3,A
   \   000431   A9..         MOV     R1,?V6
   \   000433   12....       LCALL   ??ZDO_AnyClusterMatches?relay; Banked call to: ZDO_AnyClusterMatches
   \   000436   7402         MOV     A,#0x2
   \   000438   12....       LCALL   ?DEALLOC_XSTACK8
   \   00043B   E9           MOV     A,R1
   \   00043C   7003         JNZ     $+5
   \   00043E   02....       LJMP    ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
    860                  {
    861                    // Notify the endpoint of the match.
    862                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   000441   75F002       MOV     B,#0x2
   \   000444   AA..         MOV     R2,?V6
   \   000446   7B00         MOV     R3,#0x0
   \   000448   A8..         MOV     R0,?V3
   \   00044A   7900         MOV     R1,#0x0
   \   00044C   EA           MOV     A,R2
   \   00044D   28           ADD     A,R0
   \   00044E   F8           MOV     R0,A
   \   00044F   EB           MOV     A,R3
   \   000450   39           ADDC    A,R1
   \   000451   F9           MOV     R1,A
   \   000452   E8           MOV     A,R0
   \   000453   A4           MUL     AB
   \   000454   240A         ADD     A,#0xa
   \   000456   C0E0         PUSH    A
   \   000458   740B         MOV     A,#0xb
   \   00045A   12....       LCALL   ?XSTACK_DISP0_8
   \   00045D   D0E0         POP     A
   \   00045F   F0           MOVX    @DPTR,A
    863                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
   \   000460                ; Setup parameters for call to function osal_msg_allocate
   \   000460   740B         MOV     A,#0xb
   \   000462   12....       LCALL   ?XSTACK_DISP0_8
   \   000465   E0           MOVX    A,@DPTR
   \   000466   FA           MOV     R2,A
   \   000467   7B00         MOV     R3,#0x0
   \   000469   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
   \   00046C   8A..         MOV     ?V0,R2
   \   00046E   8B..         MOV     ?V1,R3
   \   000470   85....       MOV     ?V4,?V0
   \   000473   85....       MOV     ?V5,?V1
    864          
    865                    if (pRspSent)
   \   000476   E5..         MOV     A,?V4
   \   000478   45..         ORL     A,?V5
   \   00047A   7003         JNZ     $+5
   \   00047C   02....       LJMP    ??ZDO_ProcessMatchDescReq_17 & 0xFFFF
    866                    {
    867                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
   \   00047F   85..82       MOV     DPL,?V4
   \   000482   85..83       MOV     DPH,?V5
   \   000485   74D2         MOV     A,#-0x2e
   \   000487   F0           MOVX    @DPTR,A
    868                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
   \   000488   7404         MOV     A,#0x4
   \   00048A   12....       LCALL   ?XSTACK_DISP0_8
   \   00048D   E0           MOVX    A,@DPTR
   \   00048E   F8           MOV     R0,A
   \   00048F   A3           INC     DPTR
   \   000490   E0           MOVX    A,@DPTR
   \   000491   F583         MOV     DPH,A
   \   000493   8882         MOV     DPL,R0
   \   000495   A3           INC     DPTR
   \   000496   A3           INC     DPTR
   \   000497   E0           MOVX    A,@DPTR
   \   000498   F8           MOV     R0,A
   \   000499   A3           INC     DPTR
   \   00049A   E0           MOVX    A,@DPTR
   \   00049B   F9           MOV     R1,A
   \   00049C   85..82       MOV     DPL,?V4
   \   00049F   85..83       MOV     DPH,?V5
   \   0004A2   A3           INC     DPTR
   \   0004A3   A3           INC     DPTR
   \   0004A4   E8           MOV     A,R0
   \   0004A5   F0           MOVX    @DPTR,A
   \   0004A6   A3           INC     DPTR
   \   0004A7   E9           MOV     A,R1
   \   0004A8   F0           MOVX    @DPTR,A
    869                      pRspSent->numInClusters = numInClusters;
   \   0004A9   E5..         MOV     A,?V3
   \   0004AB   C0E0         PUSH    A
   \   0004AD   85..82       MOV     DPL,?V4
   \   0004B0   85..83       MOV     DPH,?V5
   \   0004B3   A3           INC     DPTR
   \   0004B4   A3           INC     DPTR
   \   0004B5   A3           INC     DPTR
   \   0004B6   A3           INC     DPTR
   \   0004B7   D0E0         POP     A
   \   0004B9   F0           MOVX    @DPTR,A
    870                      pRspSent->numOutClusters = numOutClusters;
   \   0004BA   E5..         MOV     A,?V6
   \   0004BC   C0E0         PUSH    A
   \   0004BE   85..82       MOV     DPL,?V4
   \   0004C1   85..83       MOV     DPH,?V5
   \   0004C4   A3           INC     DPTR
   \   0004C5   A3           INC     DPTR
   \   0004C6   A3           INC     DPTR
   \   0004C7   A3           INC     DPTR
   \   0004C8   A3           INC     DPTR
   \   0004C9   A3           INC     DPTR
   \   0004CA   A3           INC     DPTR
   \   0004CB   D0E0         POP     A
   \   0004CD   F0           MOVX    @DPTR,A
    871          
    872                      if (numInClusters)
   \   0004CE   E5..         MOV     A,?V3
   \   0004D0   6060         JZ      ??ZDO_ProcessMatchDescReq_18
    873                      {
    874                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
   \   0004D2   E5..         MOV     A,?V4
   \   0004D4   240A         ADD     A,#0xa
   \   0004D6   F8           MOV     R0,A
   \   0004D7   E4           CLR     A
   \   0004D8   35..         ADDC    A,?V5
   \   0004DA   F9           MOV     R1,A
   \   0004DB   85..82       MOV     DPL,?V4
   \   0004DE   85..83       MOV     DPH,?V5
   \   0004E1   A3           INC     DPTR
   \   0004E2   A3           INC     DPTR
   \   0004E3   A3           INC     DPTR
   \   0004E4   A3           INC     DPTR
   \   0004E5   A3           INC     DPTR
   \   0004E6   E8           MOV     A,R0
   \   0004E7   F0           MOVX    @DPTR,A
   \   0004E8   A3           INC     DPTR
   \   0004E9   E9           MOV     A,R1
   \   0004EA   F0           MOVX    @DPTR,A
    875                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
   \   0004EB                ; Setup parameters for call to function osal_memcpy
   \   0004EB   7409         MOV     A,#0x9
   \   0004ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0004F0   E0           MOVX    A,@DPTR
   \   0004F1   F5..         MOV     ?V0,A
   \   0004F3   A3           INC     DPTR
   \   0004F4   E0           MOVX    A,@DPTR
   \   0004F5   F5..         MOV     ?V1,A
   \   0004F7   75..00       MOV     ?V2,#0x0
   \   0004FA   78..         MOV     R0,#?V0
   \   0004FC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0004FF   AC..         MOV     R4,?V3
   \   000501   7D00         MOV     R5,#0x0
   \   000503   EC           MOV     A,R4
   \   000504   75F002       MOV     B,#0x2
   \   000507   A4           MUL     AB
   \   000508   CC           XCH     A,R4
   \   000509   A8F0         MOV     R0,B
   \   00050B   75F000       MOV     B,#0x0
   \   00050E   A4           MUL     AB
   \   00050F   28           ADD     A,R0
   \   000510   F8           MOV     R0,A
   \   000511   75F002       MOV     B,#0x2
   \   000514   ED           MOV     A,R5
   \   000515   A4           MUL     AB
   \   000516   28           ADD     A,R0
   \   000517   FD           MOV     R5,A
   \   000518   85..82       MOV     DPL,?V4
   \   00051B   85..83       MOV     DPH,?V5
   \   00051E   A3           INC     DPTR
   \   00051F   A3           INC     DPTR
   \   000520   A3           INC     DPTR
   \   000521   A3           INC     DPTR
   \   000522   A3           INC     DPTR
   \   000523   E0           MOVX    A,@DPTR
   \   000524   FA           MOV     R2,A
   \   000525   A3           INC     DPTR
   \   000526   E0           MOVX    A,@DPTR
   \   000527   FB           MOV     R3,A
   \   000528   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00052B   7403         MOV     A,#0x3
   \   00052D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000530   8012         SJMP    ??ZDO_ProcessMatchDescReq_19
    876                      }
    877                      else
    878                      {
    879                        pRspSent->pInClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   000532   85..82       MOV     DPL,?V4
   \   000535   85..83       MOV     DPH,?V5
   \   000538   A3           INC     DPTR
   \   000539   A3           INC     DPTR
   \   00053A   A3           INC     DPTR
   \   00053B   A3           INC     DPTR
   \   00053C   A3           INC     DPTR
   \   00053D   7400         MOV     A,#0x0
   \   00053F   F0           MOVX    @DPTR,A
   \   000540   A3           INC     DPTR
   \   000541   7400         MOV     A,#0x0
   \   000543   F0           MOVX    @DPTR,A
    880                      }
    881          
    882                      if (numOutClusters)
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   000544   E5..         MOV     A,?V6
   \   000546   7003         JNZ     $+5
   \   000548   02....       LJMP    ??ZDO_ProcessMatchDescReq_20 & 0xFFFF
    883                      {
    884                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
   \   00054B   A8..         MOV     R0,?V3
   \   00054D   7900         MOV     R1,#0x0
   \   00054F   E8           MOV     A,R0
   \   000550   75F002       MOV     B,#0x2
   \   000553   A4           MUL     AB
   \   000554   C8           XCH     A,R0
   \   000555   AAF0         MOV     R2,B
   \   000557   75F000       MOV     B,#0x0
   \   00055A   A4           MUL     AB
   \   00055B   2A           ADD     A,R2
   \   00055C   FA           MOV     R2,A
   \   00055D   75F002       MOV     B,#0x2
   \   000560   E9           MOV     A,R1
   \   000561   A4           MUL     AB
   \   000562   2A           ADD     A,R2
   \   000563   F9           MOV     R1,A
   \   000564   E5..         MOV     A,?V4
   \   000566   28           ADD     A,R0
   \   000567   F8           MOV     R0,A
   \   000568   E5..         MOV     A,?V5
   \   00056A   39           ADDC    A,R1
   \   00056B   F9           MOV     R1,A
   \   00056C   E8           MOV     A,R0
   \   00056D   240A         ADD     A,#0xa
   \   00056F   F8           MOV     R0,A
   \   000570   5001         JNC     ??ZDO_ProcessMatchDescReq_21
   \   000572   09           INC     R1
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   000573   85..82       MOV     DPL,?V4
   \   000576   85..83       MOV     DPH,?V5
   \   000579   A3           INC     DPTR
   \   00057A   A3           INC     DPTR
   \   00057B   A3           INC     DPTR
   \   00057C   A3           INC     DPTR
   \   00057D   A3           INC     DPTR
   \   00057E   A3           INC     DPTR
   \   00057F   A3           INC     DPTR
   \   000580   A3           INC     DPTR
   \   000581   E8           MOV     A,R0
   \   000582   F0           MOVX    @DPTR,A
   \   000583   A3           INC     DPTR
   \   000584   E9           MOV     A,R1
   \   000585   F0           MOVX    @DPTR,A
    885                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
   \   000586                ; Setup parameters for call to function osal_memcpy
   \   000586   7407         MOV     A,#0x7
   \   000588   12....       LCALL   ?XSTACK_DISP0_8
   \   00058B   E0           MOVX    A,@DPTR
   \   00058C   F5..         MOV     ?V0,A
   \   00058E   A3           INC     DPTR
   \   00058F   E0           MOVX    A,@DPTR
   \   000590   F5..         MOV     ?V1,A
   \   000592   75..00       MOV     ?V2,#0x0
   \   000595   78..         MOV     R0,#?V0
   \   000597   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00059A   AC..         MOV     R4,?V6
   \   00059C   7D00         MOV     R5,#0x0
   \   00059E   EC           MOV     A,R4
   \   00059F   75F002       MOV     B,#0x2
   \   0005A2   A4           MUL     AB
   \   0005A3   CC           XCH     A,R4
   \   0005A4   A8F0         MOV     R0,B
   \   0005A6   75F000       MOV     B,#0x0
   \   0005A9   A4           MUL     AB
   \   0005AA   28           ADD     A,R0
   \   0005AB   F8           MOV     R0,A
   \   0005AC   75F002       MOV     B,#0x2
   \   0005AF   ED           MOV     A,R5
   \   0005B0   A4           MUL     AB
   \   0005B1   28           ADD     A,R0
   \   0005B2   FD           MOV     R5,A
   \   0005B3   85..82       MOV     DPL,?V4
   \   0005B6   85..83       MOV     DPH,?V5
   \   0005B9   A3           INC     DPTR
   \   0005BA   A3           INC     DPTR
   \   0005BB   A3           INC     DPTR
   \   0005BC   A3           INC     DPTR
   \   0005BD   A3           INC     DPTR
   \   0005BE   A3           INC     DPTR
   \   0005BF   A3           INC     DPTR
   \   0005C0   A3           INC     DPTR
   \   0005C1   E0           MOVX    A,@DPTR
   \   0005C2   FA           MOV     R2,A
   \   0005C3   A3           INC     DPTR
   \   0005C4   E0           MOVX    A,@DPTR
   \   0005C5   FB           MOV     R3,A
   \   0005C6   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0005C9   7403         MOV     A,#0x3
   \   0005CB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0005CE   8015         SJMP    ??ZDO_ProcessMatchDescReq_22
    886                      }
    887                      else
    888                      {
    889                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   0005D0   85..82       MOV     DPL,?V4
   \   0005D3   85..83       MOV     DPH,?V5
   \   0005D6   A3           INC     DPTR
   \   0005D7   A3           INC     DPTR
   \   0005D8   A3           INC     DPTR
   \   0005D9   A3           INC     DPTR
   \   0005DA   A3           INC     DPTR
   \   0005DB   A3           INC     DPTR
   \   0005DC   A3           INC     DPTR
   \   0005DD   A3           INC     DPTR
   \   0005DE   7400         MOV     A,#0x0
   \   0005E0   F0           MOVX    @DPTR,A
   \   0005E1   A3           INC     DPTR
   \   0005E2   7400         MOV     A,#0x0
   \   0005E4   F0           MOVX    @DPTR,A
    890                      }
    891          
    892                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   0005E5                ; Setup parameters for call to function osal_msg_send
   \   0005E5   AA..         MOV     R2,?V4
   \   0005E7   AB..         MOV     R3,?V5
   \   0005E9   7402         MOV     A,#0x2
   \   0005EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0005EE   E0           MOVX    A,@DPTR
   \   0005EF   F8           MOV     R0,A
   \   0005F0   A3           INC     DPTR
   \   0005F1   E0           MOVX    A,@DPTR
   \   0005F2   F583         MOV     DPH,A
   \   0005F4   8882         MOV     DPL,R0
   \   0005F6   E0           MOVX    A,@DPTR
   \   0005F7   F8           MOV     R0,A
   \   0005F8   A3           INC     DPTR
   \   0005F9   E0           MOVX    A,@DPTR
   \   0005FA   F583         MOV     DPH,A
   \   0005FC   8882         MOV     DPL,R0
   \   0005FE   A3           INC     DPTR
   \   0005FF   E0           MOVX    A,@DPTR
   \   000600   F8           MOV     R0,A
   \   000601   A3           INC     DPTR
   \   000602   E0           MOVX    A,@DPTR
   \   000603   F583         MOV     DPH,A
   \   000605   8882         MOV     DPL,R0
   \   000607   E0           MOVX    A,@DPTR
   \   000608   F9           MOV     R1,A
   \   000609   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
   \   00060C   E9           MOV     A,R1
    893                    }
    894          
    895                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   00060D   85..82       MOV     DPL,?XSP + 0
   \   000610   85..83       MOV     DPH,?XSP + 1
   \   000613   E0           MOVX    A,@DPTR
   \   000614   F8           MOV     R0,A
   \   000615   A3           INC     DPTR
   \   000616   E0           MOVX    A,@DPTR
   \   000617   F583         MOV     DPH,A
   \   000619   8882         MOV     DPL,R0
   \   00061B   E0           MOVX    A,@DPTR
   \   00061C   C0E0         PUSH    A
   \   00061E   A8..         MOV     R0,?V7
   \   000620   7900         MOV     R1,#0x0
   \   000622   740E         MOV     A,#0xe
   \   000624   12....       LCALL   ?XSTACK_DISP0_8
   \   000627   E0           MOVX    A,@DPTR
   \   000628   28           ADD     A,R0
   \   000629   FA           MOV     R2,A
   \   00062A   A3           INC     DPTR
   \   00062B   E0           MOVX    A,@DPTR
   \   00062C   39           ADDC    A,R1
   \   00062D   8A82         MOV     DPL,R2
   \   00062F   F583         MOV     DPH,A
   \   000631   D0E0         POP     A
   \   000633   F0           MOVX    @DPTR,A
   \   000634   05..         INC     ?V7
    896                  }
    897                }
    898          
    899                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   000636   7406         MOV     A,#0x6
   \   000638   12....       LCALL   ?XSTACK_DISP0_8
   \   00063B   E0           MOVX    A,@DPTR
   \   00063C   600E         JZ      ??ZDO_ProcessMatchDescReq_11
    900                {
    901                  osal_mem_free( sDesc );
   \   00063E                ; Setup parameters for call to function osal_mem_free
   \   00063E   85..82       MOV     DPL,?XSP + 0
   \   000641   85..83       MOV     DPH,?XSP + 1
   \   000644   E0           MOVX    A,@DPTR
   \   000645   FA           MOV     R2,A
   \   000646   A3           INC     DPTR
   \   000647   E0           MOVX    A,@DPTR
   \   000648   FB           MOV     R3,A
   \   000649   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    902                }
    903              }
    904              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   00064C   7402         MOV     A,#0x2
   \   00064E   12....       LCALL   ?XSTACK_DISP0_8
   \   000651   E0           MOVX    A,@DPTR
   \   000652   F8           MOV     R0,A
   \   000653   A3           INC     DPTR
   \   000654   E0           MOVX    A,@DPTR
   \   000655   F583         MOV     DPH,A
   \   000657   8882         MOV     DPL,R0
   \   000659   A3           INC     DPTR
   \   00065A   A3           INC     DPTR
   \   00065B   A3           INC     DPTR
   \   00065C   A3           INC     DPTR
   \   00065D   A3           INC     DPTR
   \   00065E   E0           MOVX    A,@DPTR
   \   00065F   F8           MOV     R0,A
   \   000660   A3           INC     DPTR
   \   000661   E0           MOVX    A,@DPTR
   \   000662   F9           MOV     R1,A
   \   000663   7402         MOV     A,#0x2
   \   000665   12....       LCALL   ?XSTACK_DISP0_8
   \   000668   E8           MOV     A,R0
   \   000669   F0           MOVX    @DPTR,A
   \   00066A   A3           INC     DPTR
   \   00066B   E9           MOV     A,R1
   \   00066C   F0           MOVX    @DPTR,A
   \   00066D   02....       LJMP    ??ZDO_ProcessMatchDescReq_9 & 0xFFFF
    905            }
    906          
    907            // Send the message only if at least one match found.
    908            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   000670   E5..         MOV     A,?V7
   \   000672   606D         JZ      ??ZDO_ProcessMatchDescReq_23
    909            {
    910              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    911                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   000674                ; Setup parameters for call to function ZDP_EPRsp
   \   000674   7404         MOV     A,#0x4
   \   000676   12....       LCALL   ?XSTACK_DISP0_8
   \   000679   E0           MOVX    A,@DPTR
   \   00067A   F8           MOV     R0,A
   \   00067B   A3           INC     DPTR
   \   00067C   E0           MOVX    A,@DPTR
   \   00067D   C8           XCH     A,R0
   \   00067E   240E         ADD     A,#0xe
   \   000680   F582         MOV     DPL,A
   \   000682   C8           XCH     A,R0
   \   000683   3400         ADDC    A,#0x0
   \   000685   F583         MOV     DPH,A
   \   000687   E0           MOVX    A,@DPTR
   \   000688   F5..         MOV     ?V0,A
   \   00068A   78..         MOV     R0,#?V0
   \   00068C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00068F   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   000692   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   000695   78..         MOV     R0,#?V0
   \   000697   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00069A   E5..         MOV     A,?V7
   \   00069C   F5..         MOV     ?V0,A
   \   00069E   78..         MOV     R0,#?V0
   \   0006A0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0006A3   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0006A6   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0006A9   75..00       MOV     ?V0,#0x0
   \   0006AC   78..         MOV     R0,#?V0
   \   0006AE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0006B1   740B         MOV     A,#0xb
   \   0006B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0006B6   E0           MOVX    A,@DPTR
   \   0006B7   2402         ADD     A,#0x2
   \   0006B9   FC           MOV     R4,A
   \   0006BA   A3           INC     DPTR
   \   0006BB   E0           MOVX    A,@DPTR
   \   0006BC   3400         ADDC    A,#0x0
   \   0006BE   FD           MOV     R5,A
   \   0006BF   740B         MOV     A,#0xb
   \   0006C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0006C4   E0           MOVX    A,@DPTR
   \   0006C5   F8           MOV     R0,A
   \   0006C6   A3           INC     DPTR
   \   0006C7   E0           MOVX    A,@DPTR
   \   0006C8   C8           XCH     A,R0
   \   0006C9   240F         ADD     A,#0xf
   \   0006CB   F582         MOV     DPL,A
   \   0006CD   C8           XCH     A,R0
   \   0006CE   3400         ADDC    A,#0x0
   \   0006D0   F583         MOV     DPH,A
   \   0006D2   E0           MOVX    A,@DPTR
   \   0006D3   F9           MOV     R1,A
   \   0006D4   7A06         MOV     R2,#0x6
   \   0006D6   7B80         MOV     R3,#-0x80
   \   0006D8   12....       LCALL   ??ZDP_EPRsp?relay    ; Banked call to: ZDP_EPRsp
   \   0006DB   7407         MOV     A,#0x7
   \   0006DD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0006E0   E9           MOV     A,R1
    912              {
    913          #if defined( LCD_SUPPORTED )
    914                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
    915          #endif
    916              }
    917            }
    918            else
    919            {
    920          #if defined( LCD_SUPPORTED )
    921              HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
    922          #endif
    923            }
    924          
    925            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   0006E1   7409         MOV     A,#0x9
   \   0006E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0006E6   E0           MOVX    A,@DPTR
   \   0006E7   F8           MOV     R0,A
   \   0006E8   A3           INC     DPTR
   \   0006E9   E0           MOVX    A,@DPTR
   \   0006EA   F9           MOV     R1,A
   \   0006EB   E8           MOV     A,R0
   \   0006EC   49           ORL     A,R1
   \   0006ED   600D         JZ      ??ZDO_ProcessMatchDescReq_24
    926            {
    927              osal_mem_free( inClusters );
   \   0006EF                ; Setup parameters for call to function osal_mem_free
   \   0006EF   7409         MOV     A,#0x9
   \   0006F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0006F4   E0           MOVX    A,@DPTR
   \   0006F5   FA           MOV     R2,A
   \   0006F6   A3           INC     DPTR
   \   0006F7   E0           MOVX    A,@DPTR
   \   0006F8   FB           MOV     R3,A
   \   0006F9   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    928            }
    929            
    930            if ( outClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_24:
   \   0006FC   7407         MOV     A,#0x7
   \   0006FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000701   E0           MOVX    A,@DPTR
   \   000702   F8           MOV     R0,A
   \   000703   A3           INC     DPTR
   \   000704   E0           MOVX    A,@DPTR
   \   000705   F9           MOV     R1,A
   \   000706   E8           MOV     A,R0
   \   000707   49           ORL     A,R1
   \   000708   600D         JZ      ??ZDO_ProcessMatchDescReq_2
    931            {
    932              osal_mem_free( outClusters );
   \   00070A                ; Setup parameters for call to function osal_mem_free
   \   00070A   7407         MOV     A,#0x7
   \   00070C   12....       LCALL   ?XSTACK_DISP0_8
   \   00070F   E0           MOVX    A,@DPTR
   \   000710   FA           MOV     R2,A
   \   000711   A3           INC     DPTR
   \   000712   E0           MOVX    A,@DPTR
   \   000713   FB           MOV     R3,A
   \   000714   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    933            }
    934          }
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   000717   7412         MOV     A,#0x12
   \   000719   12....       LCALL   ?DEALLOC_XSTACK8
   \   00071C   7F08         MOV     R7,#0x8
   \   00071E   02....       LJMP    ?BANKED_LEAVE_XDATA
    935          
    936          
    937          /*********************************************************************
    938           * @fn      ZDO_ProcessBindUnbindReq()
    939           *
    940           * @brief   Called to process a Bind or Unbind Request message.
    941           *
    942           * @param   inMsg  - incoming message (request)
    943           * @param   pReq - place to put parsed information
    944           *
    945           * @return  none
    946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    947          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
    948          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    949            zAddrType_t SourceAddr;       // Binding Source addres
    950            byte bindStat;
    951          
    952            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7403         MOV     A,#0x3
   \   000019   F0           MOVX    @DPTR,A
    953            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   EE           MOV     A,R6
   \   00001B   FC           MOV     R4,A
   \   00001C   EF           MOV     A,R7
   \   00001D   FD           MOV     R5,A
   \   00001E   7403         MOV     A,#0x3
   \   000020   12....       LCALL   ?XSTACK_DISP101_8
   \   000023   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
    954          
    955          
    956            // If the local device is not the primary binding cache
    957            // check the src address of the bind request.
    958            // If it is not the local device's extended address
    959            // discard the request.
    960            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
    961                  (pReq->dstAddress.addrMode != Addr64Bit &&
    962                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000026                ; Setup parameters for call to function NLME_GetExtAddr
   \   000026   12....       LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
   \   000029   8A..         MOV     ?V2,R2
   \   00002B   8B..         MOV     ?V3,R3
   \   00002D   AC..         MOV     R4,?V2
   \   00002F   AD..         MOV     R5,?V3
   \   000031                ; Setup parameters for call to function sAddrExtCmp
   \   000031   7403         MOV     A,#0x3
   \   000033   12....       LCALL   ?XSTACK_DISP101_8
   \   000036   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   000039   E9           MOV     A,R1
   \   00003A   601C         JZ      ??ZDO_ProcessBindUnbindReq_0
   \   00003C   EE           MOV     A,R6
   \   00003D   2413         ADD     A,#0x13
   \   00003F   F582         MOV     DPL,A
   \   000041   E4           CLR     A
   \   000042   3F           ADDC    A,R7
   \   000043   F583         MOV     DPH,A
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6403         XRL     A,#0x3
   \   000048   601A         JZ      ??ZDO_ProcessBindUnbindReq_1
   \   00004A   EE           MOV     A,R6
   \   00004B   2413         ADD     A,#0x13
   \   00004D   F582         MOV     DPL,A
   \   00004F   E4           CLR     A
   \   000050   3F           ADDC    A,R7
   \   000051   F583         MOV     DPH,A
   \   000053   E0           MOVX    A,@DPTR
   \   000054   6401         XRL     A,#0x1
   \   000056   600C         JZ      ??ZDO_ProcessBindUnbindReq_1
    963            {
    964              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   000058   85..82       MOV     DPL,?XSP + 0
   \   00005B   85..83       MOV     DPH,?XSP + 1
   \   00005E   7484         MOV     A,#-0x7c
   \   000060   F0           MOVX    @DPTR,A
   \   000061   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    965            }
    966            else
    967            {
    968              // Check source & destination endpoints
    969              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
    970                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
    971                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   000064   8E82         MOV     DPL,R6
   \   000066   8F83         MOV     DPH,R7
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   603B         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   000073   8E82         MOV     DPL,R6
   \   000075   8F83         MOV     DPH,R7
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   C3           CLR     C
   \   000081   94F1         SUBB    A,#-0xf
   \   000083   5029         JNC     ??ZDO_ProcessBindUnbindReq_3
   \   000085   EE           MOV     A,R6
   \   000086   2413         ADD     A,#0x13
   \   000088   F582         MOV     DPL,A
   \   00008A   E4           CLR     A
   \   00008B   3F           ADDC    A,R7
   \   00008C   F583         MOV     DPH,A
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   6403         XRL     A,#0x3
   \   000091   7027         JNZ     ??ZDO_ProcessBindUnbindReq_4
   \   000093   EE           MOV     A,R6
   \   000094   2414         ADD     A,#0x14
   \   000096   F582         MOV     DPL,A
   \   000098   E4           CLR     A
   \   000099   3F           ADDC    A,R7
   \   00009A   F583         MOV     DPH,A
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   600F         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00009F   EE           MOV     A,R6
   \   0000A0   2414         ADD     A,#0x14
   \   0000A2   F582         MOV     DPL,A
   \   0000A4   E4           CLR     A
   \   0000A5   3F           ADDC    A,R7
   \   0000A6   F583         MOV     DPH,A
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   C3           CLR     C
   \   0000AA   94F1         SUBB    A,#-0xf
   \   0000AC   400C         JC      ??ZDO_ProcessBindUnbindReq_4
    972              {
    973                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   0000AE   85..82       MOV     DPL,?XSP + 0
   \   0000B1   85..83       MOV     DPH,?XSP + 1
   \   0000B4   7482         MOV     A,#-0x7e
   \   0000B6   F0           MOVX    @DPTR,A
   \   0000B7   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    974              }
    975              else
    976              {
    977                if ( inMsg->clusterID == Bind_req )
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   0000BA   E5..         MOV     A,?V0
   \   0000BC   240C         ADD     A,#0xc
   \   0000BE   F582         MOV     DPL,A
   \   0000C0   E4           CLR     A
   \   0000C1   35..         ADDC    A,?V1
   \   0000C3   F583         MOV     DPH,A
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   6421         XRL     A,#0x21
   \   0000C8   7004         JNZ     ??ZDO_ProcessBindUnbindReq_5
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   6400         XRL     A,#0x0
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   0000CE   6003         JZ      $+5
   \   0000D0   02....       LJMP    ??ZDO_ProcessBindUnbindReq_6 & 0xFFFF
    978                {
    979                  // Assume the table is full
    980                  bindStat = ZDP_TABLE_FULL;
   \   0000D3   85..82       MOV     DPL,?XSP + 0
   \   0000D6   85..83       MOV     DPH,?XSP + 1
   \   0000D9   748C         MOV     A,#-0x74
   \   0000DB   F0           MOVX    @DPTR,A
    981          
    982                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   \   0000DC                ; Setup parameters for call to function bindNumOfEntries
   \   0000DC   12....       LCALL   ??bindNumOfEntries?relay; Banked call to: bindNumOfEntries
   \   0000DF   8A..         MOV     ?V2,R2
   \   0000E1   8B..         MOV     ?V3,R3
   \   0000E3   AA..         MOV     R2,?V2
   \   0000E5   AB..         MOV     R3,?V3
   \   0000E7   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000EA   E4           CLR     A
   \   0000EB   93           MOVC    A,@A+DPTR
   \   0000EC   F8           MOV     R0,A
   \   0000ED   7401         MOV     A,#0x1
   \   0000EF   93           MOVC    A,@A+DPTR
   \   0000F0   F9           MOV     R1,A
   \   0000F1   C3           CLR     C
   \   0000F2   EA           MOV     A,R2
   \   0000F3   98           SUBB    A,R0
   \   0000F4   EB           MOV     A,R3
   \   0000F5   99           SUBB    A,R1
   \   0000F6   4003         JC      $+5
   \   0000F8   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    983                  {
    984                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
    985                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \   0000FB                ; Setup parameters for call to function APSME_BindRequest
   \   0000FB   EE           MOV     A,R6
   \   0000FC   2414         ADD     A,#0x14
   \   0000FE   F582         MOV     DPL,A
   \   000100   E4           CLR     A
   \   000101   3F           ADDC    A,R7
   \   000102   F583         MOV     DPH,A
   \   000104   E0           MOVX    A,@DPTR
   \   000105   F5..         MOV     ?V2,A
   \   000107   78..         MOV     R0,#?V2
   \   000109   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00010C   EE           MOV     A,R6
   \   00010D   240B         ADD     A,#0xb
   \   00010F   FC           MOV     R4,A
   \   000110   E4           CLR     A
   \   000111   3F           ADDC    A,R7
   \   000112   FD           MOV     R5,A
   \   000113   8E82         MOV     DPL,R6
   \   000115   8F83         MOV     DPH,R7
   \   000117   A3           INC     DPTR
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   A3           INC     DPTR
   \   00011F   A3           INC     DPTR
   \   000120   E0           MOVX    A,@DPTR
   \   000121   FA           MOV     R2,A
   \   000122   A3           INC     DPTR
   \   000123   E0           MOVX    A,@DPTR
   \   000124   FB           MOV     R3,A
   \   000125   8E82         MOV     DPL,R6
   \   000127   8F83         MOV     DPH,R7
   \   000129   A3           INC     DPTR
   \   00012A   A3           INC     DPTR
   \   00012B   A3           INC     DPTR
   \   00012C   A3           INC     DPTR
   \   00012D   A3           INC     DPTR
   \   00012E   A3           INC     DPTR
   \   00012F   A3           INC     DPTR
   \   000130   A3           INC     DPTR
   \   000131   E0           MOVX    A,@DPTR
   \   000132   F9           MOV     R1,A
   \   000133   12....       LCALL   ??APSME_BindRequest?relay; Banked call to: APSME_BindRequest
   \   000136   7401         MOV     A,#0x1
   \   000138   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013B   E9           MOV     A,R1
   \   00013C   6003         JZ      $+5
   \   00013E   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    986                    {
    987                      uint16 nwkAddr;
    988          
    989                      // valid entry
    990                      bindStat = ZDP_SUCCESS;
   \   000141   85..82       MOV     DPL,?XSP + 0
   \   000144   85..83       MOV     DPH,?XSP + 1
   \   000147   7400         MOV     A,#0x0
   \   000149   F0           MOVX    @DPTR,A
    991          
    992                      // Notify to save info into NV
    993                      ZDApp_NVUpdate();
   \   00014A                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00014A   12....       LCALL   ??ZDApp_NVUpdate?relay; Banked call to: ZDApp_NVUpdate
    994          
    995                      // Check for the destination address
    996                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   \   00014D   EE           MOV     A,R6
   \   00014E   2413         ADD     A,#0x13
   \   000150   F582         MOV     DPL,A
   \   000152   E4           CLR     A
   \   000153   3F           ADDC    A,R7
   \   000154   F583         MOV     DPH,A
   \   000156   E0           MOVX    A,@DPTR
   \   000157   6403         XRL     A,#0x3
   \   000159   707F         JNZ     ??ZDO_ProcessBindUnbindReq_2
    997                      {
    998                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   \   00015B                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   00015B   7401         MOV     A,#0x1
   \   00015D   12....       LCALL   ?XSTACK_DISP102_8
   \   000160   EE           MOV     A,R6
   \   000161   240B         ADD     A,#0xb
   \   000163   FA           MOV     R2,A
   \   000164   E4           CLR     A
   \   000165   3F           ADDC    A,R7
   \   000166   FB           MOV     R3,A
   \   000167   12....       LCALL   ??APSME_LookupNwkAddr?relay; Banked call to: APSME_LookupNwkAddr
   \   00016A   E9           MOV     A,R1
   \   00016B   706D         JNZ     ??ZDO_ProcessBindUnbindReq_2
    999                        {
   1000                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   00016D                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   00016D   7D00         MOV     R5,#0x0
   \   00016F   7C00         MOV     R4,#0x0
   \   000171   7900         MOV     R1,#0x0
   \   000173   EE           MOV     A,R6
   \   000174   240B         ADD     A,#0xb
   \   000176   FA           MOV     R2,A
   \   000177   E4           CLR     A
   \   000178   3F           ADDC    A,R7
   \   000179   FB           MOV     R3,A
   \   00017A   12....       LCALL   ??ZDP_NwkAddrReq?relay; Banked call to: ZDP_NwkAddrReq
   \   00017D   E9           MOV     A,R1
   \   00017E   805A         SJMP    ??ZDO_ProcessBindUnbindReq_2
   1001                        }
   1002                      }
   1003                    }
   1004                  }
   1005                }
   1006                else // Unbind_req
   1007                {
   1008                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
   1009                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   000180                ; Setup parameters for call to function APSME_UnBindRequest
   \   000180   EE           MOV     A,R6
   \   000181   2414         ADD     A,#0x14
   \   000183   F582         MOV     DPL,A
   \   000185   E4           CLR     A
   \   000186   3F           ADDC    A,R7
   \   000187   F583         MOV     DPH,A
   \   000189   E0           MOVX    A,@DPTR
   \   00018A   F5..         MOV     ?V2,A
   \   00018C   78..         MOV     R0,#?V2
   \   00018E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000191   EE           MOV     A,R6
   \   000192   240B         ADD     A,#0xb
   \   000194   FC           MOV     R4,A
   \   000195   E4           CLR     A
   \   000196   3F           ADDC    A,R7
   \   000197   FD           MOV     R5,A
   \   000198   8E82         MOV     DPL,R6
   \   00019A   8F83         MOV     DPH,R7
   \   00019C   A3           INC     DPTR
   \   00019D   A3           INC     DPTR
   \   00019E   A3           INC     DPTR
   \   00019F   A3           INC     DPTR
   \   0001A0   A3           INC     DPTR
   \   0001A1   A3           INC     DPTR
   \   0001A2   A3           INC     DPTR
   \   0001A3   A3           INC     DPTR
   \   0001A4   A3           INC     DPTR
   \   0001A5   E0           MOVX    A,@DPTR
   \   0001A6   FA           MOV     R2,A
   \   0001A7   A3           INC     DPTR
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   FB           MOV     R3,A
   \   0001AA   8E82         MOV     DPL,R6
   \   0001AC   8F83         MOV     DPH,R7
   \   0001AE   A3           INC     DPTR
   \   0001AF   A3           INC     DPTR
   \   0001B0   A3           INC     DPTR
   \   0001B1   A3           INC     DPTR
   \   0001B2   A3           INC     DPTR
   \   0001B3   A3           INC     DPTR
   \   0001B4   A3           INC     DPTR
   \   0001B5   A3           INC     DPTR
   \   0001B6   E0           MOVX    A,@DPTR
   \   0001B7   F9           MOV     R1,A
   \   0001B8   12....       LCALL   ??APSME_UnBindRequest?relay; Banked call to: APSME_UnBindRequest
   \   0001BB   7401         MOV     A,#0x1
   \   0001BD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C0   E9           MOV     A,R1
   \   0001C1   700E         JNZ     ??ZDO_ProcessBindUnbindReq_7
   1010                  {
   1011                    bindStat = ZDP_SUCCESS;
   \   0001C3   85..82       MOV     DPL,?XSP + 0
   \   0001C6   85..83       MOV     DPH,?XSP + 1
   \   0001C9   7400         MOV     A,#0x0
   \   0001CB   F0           MOVX    @DPTR,A
   1012          
   1013                    // Notify to save info into NV
   1014                    ZDApp_NVUpdate();
   \   0001CC                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0001CC   12....       LCALL   ??ZDApp_NVUpdate?relay; Banked call to: ZDApp_NVUpdate
   \   0001CF   8009         SJMP    ??ZDO_ProcessBindUnbindReq_2
   1015                  }
   1016                  else
   1017                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   0001D1   85..82       MOV     DPL,?XSP + 0
   \   0001D4   85..83       MOV     DPH,?XSP + 1
   \   0001D7   7488         MOV     A,#-0x78
   \   0001D9   F0           MOVX    @DPTR,A
   1018                }
   1019              }
   1020            }
   1021          
   1022            // Send back a response message
   1023            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
   1024                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
   1025                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   0001DA                ; Setup parameters for call to function ZDP_SendData
   \   0001DA   E5..         MOV     A,?V0
   \   0001DC   240E         ADD     A,#0xe
   \   0001DE   F582         MOV     DPL,A
   \   0001E0   E4           CLR     A
   \   0001E1   35..         ADDC    A,?V1
   \   0001E3   F583         MOV     DPH,A
   \   0001E5   E0           MOVX    A,@DPTR
   \   0001E6   F5..         MOV     ?V2,A
   \   0001E8   78..         MOV     R0,#?V2
   \   0001EA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001ED   7401         MOV     A,#0x1
   \   0001EF   12....       LCALL   ?XSTACK_DISP100_8
   \   0001F2   88..         MOV     ?V2,R0
   \   0001F4   89..         MOV     ?V3,R1
   \   0001F6   78..         MOV     R0,#?V2
   \   0001F8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001FB   E5..         MOV     A,?V0
   \   0001FD   240C         ADD     A,#0xc
   \   0001FF   F582         MOV     DPL,A
   \   000201   E4           CLR     A
   \   000202   35..         ADDC    A,?V1
   \   000204   F583         MOV     DPH,A
   \   000206   E0           MOVX    A,@DPTR
   \   000207   4400         ORL     A,#0x0
   \   000209   F5..         MOV     ?V2,A
   \   00020B   A3           INC     DPTR
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   4480         ORL     A,#0x80
   \   00020F   F5..         MOV     ?V3,A
   \   000211   78..         MOV     R0,#?V2
   \   000213   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000216   7901         MOV     R1,#0x1
   \   000218   E5..         MOV     A,?V0
   \   00021A   2402         ADD     A,#0x2
   \   00021C   FC           MOV     R4,A
   \   00021D   E4           CLR     A
   \   00021E   35..         ADDC    A,?V1
   \   000220   FD           MOV     R5,A
   \   000221   E5..         MOV     A,?V0
   \   000223   240F         ADD     A,#0xf
   \   000225   FA           MOV     R2,A
   \   000226   E4           CLR     A
   \   000227   35..         ADDC    A,?V1
   \   000229   FB           MOV     R3,A
   \   00022A   12....       LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
   \   00022D   7405         MOV     A,#0x5
   \   00022F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000232   E9           MOV     A,R1
   1026          }
   \   000233   740C         MOV     A,#0xc
   \   000235   12....       LCALL   ?DEALLOC_XSTACK8
   \   000238   7F04         MOV     R7,#0x4
   \   00023A   02....       LJMP    ?BANKED_LEAVE_XDATA
   1027          
   1028          /*********************************************************************
   1029           * @fn      ZDO_UpdateAddrManager
   1030           *
   1031           * @brief   Update the Address Manager.
   1032           *
   1033           * @param   nwkAddr - network address
   1034           * @param   extAddr - extended address
   1035           *
   1036           * @return  none
   1037           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1038          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
   1039          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
   1040            AddrMgrEntry_t addrEntry;
   1041          
   1042            // Update the address manager
   1043            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   7400         MOV     A,#0x0
   \   00001A   F0           MOVX    @DPTR,A
   1044            addrEntry.nwkAddr = nwkAddr;
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EE           MOV     A,R6
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   EF           MOV     A,R7
   \   000024   F0           MOVX    @DPTR,A
   1045            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \   000025                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000025   AC..         MOV     R4,?V0
   \   000027   AD..         MOV     R5,?V1
   \   000029   7403         MOV     A,#0x3
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   AA82         MOV     R2,DPL
   \   000030   AB83         MOV     R3,DPH
   \   000032   12....       LCALL   ??AddrMgrExtAddrSet?relay; Banked call to: AddrMgrExtAddrSet
   1046            AddrMgrEntryUpdate( &addrEntry );
   \   000035                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000035   AA..         MOV     R2,?XSP + 0
   \   000037   AB..         MOV     R3,?XSP + 1
   \   000039   12....       LCALL   ??AddrMgrEntryUpdate?relay; Banked call to: AddrMgrEntryUpdate
   \   00003C   E9           MOV     A,R1
   1047          }
   \   00003D   740D         MOV     A,#0xd
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000042   7F02         MOV     R7,#0x2
   \   000044   02....       LJMP    ?BANKED_LEAVE_XDATA
   1048          
   1049          /*********************************************************************
   1050           * @fn      ZDO_ProcessServerDiscReq
   1051           *
   1052           * @brief   Process the Server_Discovery_req message.
   1053           *
   1054           * @param   inMsg  - incoming message (request)
   1055           *
   1056           * @return  none
   1057           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1058          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1059          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1060            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000009   E5..         MOV     A,?V0
   \   00000B   2413         ADD     A,#0x13
   \   00000D   F582         MOV     DPL,A
   \   00000F   E4           CLR     A
   \   000010   35..         ADDC    A,?V1
   \   000012   F583         MOV     DPH,A
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F583         MOV     DPH,A
   \   00001A   8882         MOV     DPL,R0
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FA           MOV     R2,A
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   E5..         MOV     A,?V0
   \   000022   2413         ADD     A,#0x13
   \   000024   F582         MOV     DPL,A
   \   000026   E4           CLR     A
   \   000027   35..         ADDC    A,?V1
   \   000029   F583         MOV     DPH,A
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F583         MOV     DPH,A
   \   000031   8882         MOV     DPL,R0
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F8           MOV     R0,A
   \   000036   7900         MOV     R1,#0x0
   \   000038   E4           CLR     A
   \   000039   C8           XCH     A,R0
   \   00003A   F9           MOV     R1,A
   \   00003B   EA           MOV     A,R2
   \   00003C   28           ADD     A,R0
   \   00003D   FE           MOV     R6,A
   \   00003E   EB           MOV     A,R3
   \   00003F   39           ADDC    A,R1
   \   000040   FF           MOV     R7,A
   1061            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \   000041   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000044   E0           MOVX    A,@DPTR
   \   000045   5E           ANL     A,R6
   \   000046   F5..         MOV     ?V2,A
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   5F           ANL     A,R7
   \   00004B   F5..         MOV     ?V3,A
   1062          
   1063            if ( matchMask )
   \   00004D   E5..         MOV     A,?V2
   \   00004F   45..         ORL     A,?V3
   \   000051   6039         JZ      ??ZDO_ProcessServerDiscReq_0
   1064            {
   1065              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
   1066                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   000053                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   000053   78..         MOV     R0,#?V2
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00005B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00005E   E5..         MOV     A,?V0
   \   000060   240E         ADD     A,#0xe
   \   000062   F582         MOV     DPL,A
   \   000064   E4           CLR     A
   \   000065   35..         ADDC    A,?V1
   \   000067   F583         MOV     DPH,A
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   FD           MOV     R5,A
   \   00006B   7C00         MOV     R4,#0x0
   \   00006D   E5..         MOV     A,?V0
   \   00006F   2402         ADD     A,#0x2
   \   000071   FA           MOV     R2,A
   \   000072   E4           CLR     A
   \   000073   35..         ADDC    A,?V1
   \   000075   FB           MOV     R3,A
   \   000076   E5..         MOV     A,?V0
   \   000078   240F         ADD     A,#0xf
   \   00007A   F582         MOV     DPL,A
   \   00007C   E4           CLR     A
   \   00007D   35..         ADDC    A,?V1
   \   00007F   F583         MOV     DPH,A
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F9           MOV     R1,A
   \   000083   12....       LCALL   ??ZDP_ServerDiscRsp?relay; Banked call to: ZDP_ServerDiscRsp
   \   000086   7404         MOV     A,#0x4
   \   000088   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008B   E9           MOV     A,R1
   1067            }
   1068          }
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   00008C   7F04         MOV     R7,#0x4
   \   00008E   02....       LJMP    ?BANKED_LEAVE_XDATA
   1069          
   1070          /*********************************************************************
   1071           * Call Back Functions from APS  - API
   1072           */
   1073          
   1074          /*********************************************************************
   1075           * @fn          ZDO_EndDeviceTimeoutCB
   1076           *
   1077           * @brief       This function handles the binding timer for the End
   1078           *              Device Bind command.
   1079           *
   1080           * @param       none
   1081           *
   1082           * @return      none
   1083           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1084          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1085          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1086          #if defined ( REFLECTOR )
   1087            byte stat;
   1088            if ( ZDO_EDBind )
   \   000005   90....       MOV     DPTR,#ZDO_EDBind
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   49           ORL     A,R1
   \   00000F   6047         JZ      ??ZDO_EndDeviceTimeoutCB_0
   1089            {
   1090              stat = ZDO_EDBind->status;
   \   000011   90....       MOV     DPTR,#ZDO_EDBind
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   C8           XCH     A,R0
   \   000019   2416         ADD     A,#0x16
   \   00001B   F582         MOV     DPL,A
   \   00001D   C8           XCH     A,R0
   \   00001E   3400         ADDC    A,#0x0
   \   000020   F583         MOV     DPH,A
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FE           MOV     R6,A
   1091          
   1092              // Send the response message to the first sent
   1093              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1094                                  stat, ZDO_EDBind->SecurityUse );
   \   000024                ; Setup parameters for call to function ZDO_SendEDBindRsp
   \   000024   90....       MOV     DPTR,#ZDO_EDBind
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   C8           XCH     A,R0
   \   00002C   2415         ADD     A,#0x15
   \   00002E   F582         MOV     DPL,A
   \   000030   C8           XCH     A,R0
   \   000031   3400         ADDC    A,#0x0
   \   000033   F583         MOV     DPH,A
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FD           MOV     R5,A
   \   000037   EE           MOV     A,R6
   \   000038   FC           MOV     R4,A
   \   000039   90....       MOV     DPTR,#ZDO_EDBind
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   2401         ADD     A,#0x1
   \   00003F   FA           MOV     R2,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   3400         ADDC    A,#0x0
   \   000044   FB           MOV     R3,A
   \   000045   90....       MOV     DPTR,#ZDO_EDBind
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F8           MOV     R0,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F583         MOV     DPH,A
   \   00004E   8882         MOV     DPL,R0
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F9           MOV     R1,A
   \   000052   12....       LCALL   ??ZDO_SendEDBindRsp?relay; Banked call to: ZDO_SendEDBindRsp
   1095          
   1096              ZDO_RemoveEndDeviceBind();
   \   000055                ; Setup parameters for call to function ZDO_RemoveEndDeviceBind
   \   000055   12....       LCALL   ??ZDO_RemoveEndDeviceBind?relay; Banked call to: ZDO_RemoveEndDeviceBind
   1097            }
   1098          #endif  // REFLECTOR
   1099          }
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   000058   7F01         MOV     R7,#0x1
   \   00005A   02....       LJMP    ?BANKED_LEAVE_XDATA
   1100          
   1101          /*********************************************************************
   1102           * Optional Management Messages
   1103           */
   1104          
   1105          /*********************************************************************
   1106           * @fn          ZDO_ProcessMgmtLqiReq
   1107           *
   1108           * @brief       This function handles parsing the incoming Management
   1109           *              LQI request and generate the response.
   1110           *
   1111           *   Note:      This function will limit the number of items returned
   1112           *              to ZDO_MAX_LQI_ITEMS items.
   1113           *
   1114           * @param       inMsg - incoming message (request)
   1115           *
   1116           * @return      none
   1117           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1118          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1119          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 42
   \   000005   74D6         MOV     A,#-0x2a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7404         MOV     A,#0x4
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   1120            byte x;
   1121            byte index;
   1122            byte numItems;
   1123            byte maxItems;
   1124            ZDP_MgmtLqiItem_t* table = NULL;
   \   000014   7402         MOV     A,#0x2
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   7400         MOV     A,#0x0
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   7400         MOV     A,#0x0
   \   00001F   F0           MOVX    @DPTR,A
   1125            ZDP_MgmtLqiItem_t* item;
   1126            neighborEntry_t    entry;
   1127            byte aItems;
   1128            associated_devices_t *aDevice;
   1129            AddrMgrEntry_t  nwkEntry;
   1130            uint8 StartIndex = inMsg->asdu[0];
   \   000020   7404         MOV     A,#0x4
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F8           MOV     R0,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   C8           XCH     A,R0
   \   00002A   2413         ADD     A,#0x13
   \   00002C   F582         MOV     DPL,A
   \   00002E   C8           XCH     A,R0
   \   00002F   3400         ADDC    A,#0x0
   \   000031   F583         MOV     DPH,A
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F583         MOV     DPH,A
   \   000039   8882         MOV     DPL,R0
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F5..         MOV     ?V4,A
   1131          
   1132            // Get the number of neighbor items
   1133            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \   00003E                ; Setup parameters for call to function NLME_GetRequest
   \   00003E   7401         MOV     A,#0x1
   \   000040   12....       LCALL   ?XSTACK_DISP102_8
   \   000043   7A00         MOV     R2,#0x0
   \   000045   7B00         MOV     R3,#0x0
   \   000047   799C         MOV     R1,#-0x64
   \   000049   12....       LCALL   ??NLME_GetRequest?relay; Banked call to: NLME_GetRequest
   \   00004C   E9           MOV     A,R1
   1134          
   1135            // Get the number of associated items
   1136            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \   00004D                ; Setup parameters for call to function AssocCount
   \   00004D   7A04         MOV     R2,#0x4
   \   00004F   7900         MOV     R1,#0x0
   \   000051   12....       LCALL   ??AssocCount?relay   ; Banked call to: AssocCount
   \   000054   EA           MOV     A,R2
   \   000055   C0E0         PUSH    A
   \   000057   85..82       MOV     DPL,?XSP + 0
   \   00005A   85..83       MOV     DPH,?XSP + 1
   \   00005D   D0E0         POP     A
   \   00005F   F0           MOVX    @DPTR,A
   1137          
   1138            // Total number of items
   1139            maxItems += aItems;
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F8           MOV     R0,A
   \   000068   7401         MOV     A,#0x1
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   28           ADD     A,R0
   \   00006F   F0           MOVX    @DPTR,A
   1140          
   1141            // Start with the supplied index
   1142            if ( maxItems > StartIndex )
   \   000070   7401         MOV     A,#0x1
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F8           MOV     R0,A
   \   000077   E5..         MOV     A,?V4
   \   000079   C3           CLR     C
   \   00007A   98           SUBB    A,R0
   \   00007B   4003         JC      $+5
   \   00007D   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
   1143            {
   1144              numItems = maxItems - StartIndex;
   \   000080   7401         MOV     A,#0x1
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   E0           MOVX    A,@DPTR
   \   000086   C3           CLR     C
   \   000087   95..         SUBB    A,?V4
   \   000089   F5..         MOV     ?V1,A
   1145          
   1146              // limit the size of the list
   1147              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   00008B   E5..         MOV     A,?V1
   \   00008D   C3           CLR     C
   \   00008E   9404         SUBB    A,#0x4
   \   000090   4003         JC      ??ZDO_ProcessMgmtLqiReq_1
   1148                numItems = ZDO_MAX_LQI_ITEMS;
   \   000092   75..03       MOV     ?V1,#0x3
   1149          
   1150              // Allocate the memory to build the table
   1151              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1152                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   000095                ; Setup parameters for call to function osal_mem_alloc
   \   000095   AA..         MOV     R2,?V1
   \   000097   7B00         MOV     R3,#0x0
   \   000099   EA           MOV     A,R2
   \   00009A   75F01A       MOV     B,#0x1a
   \   00009D   A4           MUL     AB
   \   00009E   CA           XCH     A,R2
   \   00009F   A8F0         MOV     R0,B
   \   0000A1   75F000       MOV     B,#0x0
   \   0000A4   A4           MUL     AB
   \   0000A5   28           ADD     A,R0
   \   0000A6   F8           MOV     R0,A
   \   0000A7   75F01A       MOV     B,#0x1a
   \   0000AA   EB           MOV     A,R3
   \   0000AB   A4           MUL     AB
   \   0000AC   28           ADD     A,R0
   \   0000AD   FB           MOV     R3,A
   \   0000AE   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0000B1   7402         MOV     A,#0x2
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   EA           MOV     A,R2
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   EB           MOV     A,R3
   \   0000BA   F0           MOVX    @DPTR,A
   1153          
   1154              if ( table != NULL )
   \   0000BB   7402         MOV     A,#0x2
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F8           MOV     R0,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   F9           MOV     R1,A
   \   0000C5   E8           MOV     A,R0
   \   0000C6   49           ORL     A,R1
   \   0000C7   7003         JNZ     $+5
   \   0000C9   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   1155              {
   1156                x = 0;
   \   0000CC   75..00       MOV     ?V5,#0x0
   1157                item = table;
   \   0000CF   7402         MOV     A,#0x2
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   F8           MOV     R0,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   F9           MOV     R1,A
   \   0000D9   E8           MOV     A,R0
   \   0000DA   FE           MOV     R6,A
   \   0000DB   E9           MOV     A,R1
   \   0000DC   FF           MOV     R7,A
   1158                index = StartIndex;
   \   0000DD   85....       MOV     ?V0,?V4
   1159          
   1160                // Loop through associated items and build list
   1161                for ( ; x < numItems; x++ )
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   0000E0   E5..         MOV     A,?V5
   \   0000E2   C3           CLR     C
   \   0000E3   95..         SUBB    A,?V1
   \   0000E5   4003         JC      $+5
   \   0000E7   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   1162                {
   1163                  if ( index < aItems )
   \   0000EA   85..82       MOV     DPL,?XSP + 0
   \   0000ED   85..83       MOV     DPH,?XSP + 1
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F8           MOV     R0,A
   \   0000F2   E5..         MOV     A,?V0
   \   0000F4   C3           CLR     C
   \   0000F5   98           SUBB    A,R0
   \   0000F6   4003         JC      $+5
   \   0000F8   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
   1164                  {
   1165                    // get next associated device
   1166                    aDevice = AssocFindDevice( index++ );
   \   0000FB                ; Setup parameters for call to function AssocFindDevice
   \   0000FB   A9..         MOV     R1,?V0
   \   0000FD   12....       LCALL   ??AssocFindDevice?relay; Banked call to: AssocFindDevice
   \   000100   8A..         MOV     ?V2,R2
   \   000102   8B..         MOV     ?V3,R3
   \   000104   85....       MOV     ?V6,?V2
   \   000107   85....       MOV     ?V7,?V3
   \   00010A   05..         INC     ?V0
   1167          
   1168                    // set basic fields
   1169                    item->panID   = _NIB.nwkPanId;
   \   00010C   90....       MOV     DPTR,#_NIB + 33
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   F8           MOV     R0,A
   \   000111   A3           INC     DPTR
   \   000112   E0           MOVX    A,@DPTR
   \   000113   F9           MOV     R1,A
   \   000114   8E82         MOV     DPL,R6
   \   000116   8F83         MOV     DPH,R7
   \   000118   E8           MOV     A,R0
   \   000119   F0           MOVX    @DPTR,A
   \   00011A   A3           INC     DPTR
   \   00011B   E9           MOV     A,R1
   \   00011C   F0           MOVX    @DPTR,A
   1170                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   \   00011D                ; Setup parameters for call to function sAddrExtCpy
   \   00011D   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   00011F   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000121   EE           MOV     A,R6
   \   000122   2402         ADD     A,#0x2
   \   000124   FA           MOV     R2,A
   \   000125   E4           CLR     A
   \   000126   3F           ADDC    A,R7
   \   000127   FB           MOV     R3,A
   \   000128   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   1171                    item->nwkAddr = aDevice->shortAddr;
   \   00012B   85..82       MOV     DPL,?V6
   \   00012E   85..83       MOV     DPH,?V7
   \   000131   E0           MOVX    A,@DPTR
   \   000132   F8           MOV     R0,A
   \   000133   A3           INC     DPTR
   \   000134   E0           MOVX    A,@DPTR
   \   000135   F9           MOV     R1,A
   \   000136   EE           MOV     A,R6
   \   000137   2412         ADD     A,#0x12
   \   000139   F582         MOV     DPL,A
   \   00013B   E4           CLR     A
   \   00013C   3F           ADDC    A,R7
   \   00013D   F583         MOV     DPH,A
   \   00013F   E8           MOV     A,R0
   \   000140   F0           MOVX    @DPTR,A
   \   000141   A3           INC     DPTR
   \   000142   E9           MOV     A,R1
   \   000143   F0           MOVX    @DPTR,A
   1172                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   \   000144   EE           MOV     A,R6
   \   000145   2417         ADD     A,#0x17
   \   000147   F582         MOV     DPL,A
   \   000149   E4           CLR     A
   \   00014A   3F           ADDC    A,R7
   \   00014B   F583         MOV     DPH,A
   \   00014D   7402         MOV     A,#0x2
   \   00014F   F0           MOVX    @DPTR,A
   1173                    item->depth   = 0xFF;
   \   000150   EE           MOV     A,R6
   \   000151   2418         ADD     A,#0x18
   \   000153   F582         MOV     DPL,A
   \   000155   E4           CLR     A
   \   000156   3F           ADDC    A,R7
   \   000157   F583         MOV     DPH,A
   \   000159   74FF         MOV     A,#-0x1
   \   00015B   F0           MOVX    @DPTR,A
   1174                    item->lqi     = aDevice->linkInfo.rxLqi;
   \   00015C   85..82       MOV     DPL,?V6
   \   00015F   85..83       MOV     DPH,?V7
   \   000162   A3           INC     DPTR
   \   000163   A3           INC     DPTR
   \   000164   A3           INC     DPTR
   \   000165   A3           INC     DPTR
   \   000166   A3           INC     DPTR
   \   000167   A3           INC     DPTR
   \   000168   A3           INC     DPTR
   \   000169   A3           INC     DPTR
   \   00016A   A3           INC     DPTR
   \   00016B   A3           INC     DPTR
   \   00016C   E0           MOVX    A,@DPTR
   \   00016D   C0E0         PUSH    A
   \   00016F   EE           MOV     A,R6
   \   000170   2419         ADD     A,#0x19
   \   000172   F582         MOV     DPL,A
   \   000174   E4           CLR     A
   \   000175   3F           ADDC    A,R7
   \   000176   F583         MOV     DPH,A
   \   000178   D0E0         POP     A
   \   00017A   F0           MOVX    @DPTR,A
   1175          
   1176                    // set extented address
   1177                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   \   00017B   7406         MOV     A,#0x6
   \   00017D   12....       LCALL   ?XSTACK_DISP0_8
   \   000180   7400         MOV     A,#0x0
   \   000182   F0           MOVX    @DPTR,A
   1178                    nwkEntry.nwkAddr = aDevice->shortAddr;
   \   000183   85..82       MOV     DPL,?V6
   \   000186   85..83       MOV     DPH,?V7
   \   000189   E0           MOVX    A,@DPTR
   \   00018A   F8           MOV     R0,A
   \   00018B   A3           INC     DPTR
   \   00018C   E0           MOVX    A,@DPTR
   \   00018D   F9           MOV     R1,A
   \   00018E   7407         MOV     A,#0x7
   \   000190   12....       LCALL   ?XSTACK_DISP0_8
   \   000193   E8           MOV     A,R0
   \   000194   F0           MOVX    @DPTR,A
   \   000195   A3           INC     DPTR
   \   000196   E9           MOV     A,R1
   \   000197   F0           MOVX    @DPTR,A
   1179          
   1180                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   \   000198                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000198   7406         MOV     A,#0x6
   \   00019A   12....       LCALL   ?XSTACK_DISP101_8
   \   00019D   12....       LCALL   ??AddrMgrEntryLookupNwk?relay; Banked call to: AddrMgrEntryLookupNwk
   \   0001A0   E9           MOV     A,R1
   \   0001A1   6401         XRL     A,#0x1
   \   0001A3   7015         JNZ     ??ZDO_ProcessMgmtLqiReq_6
   1181                    {
   1182                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   \   0001A5                ; Setup parameters for call to function sAddrExtCpy
   \   0001A5   7409         MOV     A,#0x9
   \   0001A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AA   AC82         MOV     R4,DPL
   \   0001AC   AD83         MOV     R5,DPH
   \   0001AE   EE           MOV     A,R6
   \   0001AF   240A         ADD     A,#0xa
   \   0001B1   FA           MOV     R2,A
   \   0001B2   E4           CLR     A
   \   0001B3   3F           ADDC    A,R7
   \   0001B4   FB           MOV     R3,A
   \   0001B5   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   0001B8   8010         SJMP    ??ZDO_ProcessMgmtLqiReq_7
   1183                    }
   1184                    else
   1185                    {
   1186                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   0001BA                ; Setup parameters for call to function osal_memset
   \   0001BA   7C08         MOV     R4,#0x8
   \   0001BC   7D00         MOV     R5,#0x0
   \   0001BE   79FF         MOV     R1,#-0x1
   \   0001C0   EE           MOV     A,R6
   \   0001C1   240A         ADD     A,#0xa
   \   0001C3   FA           MOV     R2,A
   \   0001C4   E4           CLR     A
   \   0001C5   3F           ADDC    A,R7
   \   0001C6   FB           MOV     R3,A
   \   0001C7   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   1187                    }
   1188          
   1189                    // use association info to set other fields
   1190                    if ( aDevice->nodeRelation == PARENT )
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   0001CA   85..82       MOV     DPL,?V6
   \   0001CD   85..83       MOV     DPH,?V7
   \   0001D0   A3           INC     DPTR
   \   0001D1   A3           INC     DPTR
   \   0001D2   A3           INC     DPTR
   \   0001D3   A3           INC     DPTR
   \   0001D4   E0           MOVX    A,@DPTR
   \   0001D5   7064         JNZ     ??ZDO_ProcessMgmtLqiReq_8
   1191                    {
   1192                      if (  aDevice->shortAddr == 0 )
   \   0001D7   85..82       MOV     DPL,?V6
   \   0001DA   85..83       MOV     DPH,?V7
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   F8           MOV     R0,A
   \   0001DF   A3           INC     DPTR
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   F9           MOV     R1,A
   \   0001E2   E8           MOV     A,R0
   \   0001E3   49           ORL     A,R1
   \   0001E4   701A         JNZ     ??ZDO_ProcessMgmtLqiReq_9
   1193                      {
   1194                        item->devType = ZDP_MGMT_DT_COORD;
   \   0001E6   EE           MOV     A,R6
   \   0001E7   2414         ADD     A,#0x14
   \   0001E9   F582         MOV     DPL,A
   \   0001EB   E4           CLR     A
   \   0001EC   3F           ADDC    A,R7
   \   0001ED   F583         MOV     DPH,A
   \   0001EF   7400         MOV     A,#0x0
   \   0001F1   F0           MOVX    @DPTR,A
   1195                        item->depth = 0;
   \   0001F2   EE           MOV     A,R6
   \   0001F3   2418         ADD     A,#0x18
   \   0001F5   F582         MOV     DPL,A
   \   0001F7   E4           CLR     A
   \   0001F8   3F           ADDC    A,R7
   \   0001F9   F583         MOV     DPH,A
   \   0001FB   7400         MOV     A,#0x0
   \   0001FD   F0           MOVX    @DPTR,A
   \   0001FE   8020         SJMP    ??ZDO_ProcessMgmtLqiReq_10
   1196                      }
   1197                      else
   1198                      {
   1199                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   000200   EE           MOV     A,R6
   \   000201   2414         ADD     A,#0x14
   \   000203   F582         MOV     DPL,A
   \   000205   E4           CLR     A
   \   000206   3F           ADDC    A,R7
   \   000207   F583         MOV     DPH,A
   \   000209   7401         MOV     A,#0x1
   \   00020B   F0           MOVX    @DPTR,A
   1200                        item->depth = _NIB.nodeDepth - 1;
   \   00020C   90....       MOV     DPTR,#_NIB + 52
   \   00020F   E0           MOVX    A,@DPTR
   \   000210   24FF         ADD     A,#-0x1
   \   000212   C0E0         PUSH    A
   \   000214   EE           MOV     A,R6
   \   000215   2418         ADD     A,#0x18
   \   000217   F582         MOV     DPL,A
   \   000219   E4           CLR     A
   \   00021A   3F           ADDC    A,R7
   \   00021B   F583         MOV     DPH,A
   \   00021D   D0E0         POP     A
   \   00021F   F0           MOVX    @DPTR,A
   1201                      }
   1202          
   1203                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   000220   EE           MOV     A,R6
   \   000221   2415         ADD     A,#0x15
   \   000223   F582         MOV     DPL,A
   \   000225   E4           CLR     A
   \   000226   3F           ADDC    A,R7
   \   000227   F583         MOV     DPH,A
   \   000229   7402         MOV     A,#0x2
   \   00022B   F0           MOVX    @DPTR,A
   1204                      item->relation = ZDP_MGMT_REL_PARENT;
   \   00022C   EE           MOV     A,R6
   \   00022D   2416         ADD     A,#0x16
   \   00022F   F582         MOV     DPL,A
   \   000231   E4           CLR     A
   \   000232   3F           ADDC    A,R7
   \   000233   F583         MOV     DPH,A
   \   000235   7400         MOV     A,#0x0
   \   000237   F0           MOVX    @DPTR,A
   \   000238   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_11 & 0xFFFF
   1205                    }
   1206                    else
   1207                    {
   1208                      // If not parent, then it's a child
   1209                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   00023B   90....       MOV     DPTR,#_NIB + 52
   \   00023E   E0           MOVX    A,@DPTR
   \   00023F   2401         ADD     A,#0x1
   \   000241   C0E0         PUSH    A
   \   000243   EE           MOV     A,R6
   \   000244   2418         ADD     A,#0x18
   \   000246   F582         MOV     DPL,A
   \   000248   E4           CLR     A
   \   000249   3F           ADDC    A,R7
   \   00024A   F583         MOV     DPH,A
   \   00024C   D0E0         POP     A
   \   00024E   F0           MOVX    @DPTR,A
   1210          
   1211                      if ( aDevice->nodeRelation < CHILD_FFD )
   \   00024F   85..82       MOV     DPL,?V6
   \   000252   85..83       MOV     DPH,?V7
   \   000255   A3           INC     DPTR
   \   000256   A3           INC     DPTR
   \   000257   A3           INC     DPTR
   \   000258   A3           INC     DPTR
   \   000259   E0           MOVX    A,@DPTR
   \   00025A   C3           CLR     C
   \   00025B   9403         SUBB    A,#0x3
   \   00025D   5037         JNC     ??ZDO_ProcessMgmtLqiReq_12
   1212                      {
   1213                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   00025F   EE           MOV     A,R6
   \   000260   2414         ADD     A,#0x14
   \   000262   F582         MOV     DPL,A
   \   000264   E4           CLR     A
   \   000265   3F           ADDC    A,R7
   \   000266   F583         MOV     DPH,A
   \   000268   7402         MOV     A,#0x2
   \   00026A   F0           MOVX    @DPTR,A
   1214          
   1215                        if ( aDevice->nodeRelation == CHILD_RFD )
   \   00026B   85..82       MOV     DPL,?V6
   \   00026E   85..83       MOV     DPH,?V7
   \   000271   A3           INC     DPTR
   \   000272   A3           INC     DPTR
   \   000273   A3           INC     DPTR
   \   000274   A3           INC     DPTR
   \   000275   E0           MOVX    A,@DPTR
   \   000276   6401         XRL     A,#0x1
   \   000278   700E         JNZ     ??ZDO_ProcessMgmtLqiReq_13
   1216                        {
   1217                          item->rxOnIdle = FALSE;
   \   00027A   EE           MOV     A,R6
   \   00027B   2415         ADD     A,#0x15
   \   00027D   F582         MOV     DPL,A
   \   00027F   E4           CLR     A
   \   000280   3F           ADDC    A,R7
   \   000281   F583         MOV     DPH,A
   \   000283   7400         MOV     A,#0x0
   \   000285   F0           MOVX    @DPTR,A
   \   000286   8043         SJMP    ??ZDO_ProcessMgmtLqiReq_14
   1218                        }
   1219                        else
   1220                        {
   1221                          item->rxOnIdle = TRUE;
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   000288   EE           MOV     A,R6
   \   000289   2415         ADD     A,#0x15
   \   00028B   F582         MOV     DPL,A
   \   00028D   E4           CLR     A
   \   00028E   3F           ADDC    A,R7
   \   00028F   F583         MOV     DPH,A
   \   000291   7401         MOV     A,#0x1
   \   000293   F0           MOVX    @DPTR,A
   \   000294   8035         SJMP    ??ZDO_ProcessMgmtLqiReq_14
   1222                        }
   1223                      }
   1224                      else
   1225                      {
   1226                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   000296   EE           MOV     A,R6
   \   000297   2414         ADD     A,#0x14
   \   000299   F582         MOV     DPL,A
   \   00029B   E4           CLR     A
   \   00029C   3F           ADDC    A,R7
   \   00029D   F583         MOV     DPH,A
   \   00029F   7401         MOV     A,#0x1
   \   0002A1   F0           MOVX    @DPTR,A
   1227          
   1228                        if ( aDevice->nodeRelation == CHILD_FFD )
   \   0002A2   85..82       MOV     DPL,?V6
   \   0002A5   85..83       MOV     DPH,?V7
   \   0002A8   A3           INC     DPTR
   \   0002A9   A3           INC     DPTR
   \   0002AA   A3           INC     DPTR
   \   0002AB   A3           INC     DPTR
   \   0002AC   E0           MOVX    A,@DPTR
   \   0002AD   6403         XRL     A,#0x3
   \   0002AF   700E         JNZ     ??ZDO_ProcessMgmtLqiReq_15
   1229                        {
   1230                          item->rxOnIdle = FALSE;
   \   0002B1   EE           MOV     A,R6
   \   0002B2   2415         ADD     A,#0x15
   \   0002B4   F582         MOV     DPL,A
   \   0002B6   E4           CLR     A
   \   0002B7   3F           ADDC    A,R7
   \   0002B8   F583         MOV     DPH,A
   \   0002BA   7400         MOV     A,#0x0
   \   0002BC   F0           MOVX    @DPTR,A
   \   0002BD   800C         SJMP    ??ZDO_ProcessMgmtLqiReq_14
   1231                        }
   1232                        else
   1233                        {
   1234                          item->rxOnIdle = TRUE;
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   0002BF   EE           MOV     A,R6
   \   0002C0   2415         ADD     A,#0x15
   \   0002C2   F582         MOV     DPL,A
   \   0002C4   E4           CLR     A
   \   0002C5   3F           ADDC    A,R7
   \   0002C6   F583         MOV     DPH,A
   \   0002C8   7401         MOV     A,#0x1
   \   0002CA   F0           MOVX    @DPTR,A
   1235                        }
   1236                      }
   1237          
   1238                      item->relation = ZDP_MGMT_REL_CHILD;
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   0002CB   EE           MOV     A,R6
   \   0002CC   2416         ADD     A,#0x16
   \   0002CE   F582         MOV     DPL,A
   \   0002D0   E4           CLR     A
   \   0002D1   3F           ADDC    A,R7
   \   0002D2   F583         MOV     DPH,A
   \   0002D4   7401         MOV     A,#0x1
   \   0002D6   F0           MOVX    @DPTR,A
   1239                    }
   1240          
   1241                    item++;
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   0002D7   EE           MOV     A,R6
   \   0002D8   241A         ADD     A,#0x1a
   \   0002DA   FE           MOV     R6,A
   \   0002DB   5001         JNC     ??ZDO_ProcessMgmtLqiReq_16
   \   0002DD   0F           INC     R7
   1242                  }
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   0002DE   05..         INC     ?V5
   \   0002E0   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_3 & 0xFFFF
   1243                  else
   1244                  {
   1245                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   0002E3   85..82       MOV     DPL,?XSP + 0
   \   0002E6   85..83       MOV     DPH,?XSP + 1
   \   0002E9   E0           MOVX    A,@DPTR
   \   0002EA   C3           CLR     C
   \   0002EB   95..         SUBB    A,?V4
   \   0002ED   4005         JC      ??ZDO_ProcessMgmtLqiReq_17
   1246                      // Start with 1st neighbor
   1247                      index = 0;
   \   0002EF   75..00       MOV     ?V0,#0x0
   \   0002F2   800E         SJMP    ??ZDO_ProcessMgmtLqiReq_4
   1248                    else
   1249                      // Start with >1st neighbor
   1250                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   0002F4   85..82       MOV     DPL,?XSP + 0
   \   0002F7   85..83       MOV     DPH,?XSP + 1
   \   0002FA   E0           MOVX    A,@DPTR
   \   0002FB   F8           MOV     R0,A
   \   0002FC   E5..         MOV     A,?V4
   \   0002FE   C3           CLR     C
   \   0002FF   98           SUBB    A,R0
   \   000300   F5..         MOV     ?V0,A
   1251                    break;
   1252                  }
   1253                }
   1254          
   1255                // Loop through neighbor items and finish list
   1256                for ( ; x < numItems; x++ )
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   000302   E5..         MOV     A,?V5
   \   000304   C3           CLR     C
   \   000305   95..         SUBB    A,?V1
   \   000307   4003         JC      $+5
   \   000309   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   1257                {
   1258                  // Add next neighbor table item
   1259                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   \   00030C                ; Setup parameters for call to function NLME_GetRequest
   \   00030C   7413         MOV     A,#0x13
   \   00030E   12....       LCALL   ?XSTACK_DISP102_8
   \   000311   AA..         MOV     R2,?V0
   \   000313   7B00         MOV     R3,#0x0
   \   000315   7987         MOV     R1,#-0x79
   \   000317   12....       LCALL   ??NLME_GetRequest?relay; Banked call to: NLME_GetRequest
   \   00031A   E9           MOV     A,R1
   \   00031B   05..         INC     ?V0
   1260          
   1261                  // set ZDP_MgmtLqiItem_t fields
   1262                  item->panID    = entry.panId;
   \   00031D   741D         MOV     A,#0x1d
   \   00031F   12....       LCALL   ?XSTACK_DISP0_8
   \   000322   E0           MOVX    A,@DPTR
   \   000323   F8           MOV     R0,A
   \   000324   A3           INC     DPTR
   \   000325   E0           MOVX    A,@DPTR
   \   000326   F9           MOV     R1,A
   \   000327   8E82         MOV     DPL,R6
   \   000329   8F83         MOV     DPH,R7
   \   00032B   E8           MOV     A,R0
   \   00032C   F0           MOVX    @DPTR,A
   \   00032D   A3           INC     DPTR
   \   00032E   E9           MOV     A,R1
   \   00032F   F0           MOVX    @DPTR,A
   1263                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   \   000330                ; Setup parameters for call to function sAddrExtCpy
   \   000330   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   000332   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000334   EE           MOV     A,R6
   \   000335   2402         ADD     A,#0x2
   \   000337   FA           MOV     R2,A
   \   000338   E4           CLR     A
   \   000339   3F           ADDC    A,R7
   \   00033A   FB           MOV     R3,A
   \   00033B   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   1264                  osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \   00033E                ; Setup parameters for call to function osal_memset
   \   00033E   7C08         MOV     R4,#0x8
   \   000340   7D00         MOV     R5,#0x0
   \   000342   79FF         MOV     R1,#-0x1
   \   000344   EE           MOV     A,R6
   \   000345   240A         ADD     A,#0xa
   \   000347   FA           MOV     R2,A
   \   000348   E4           CLR     A
   \   000349   3F           ADDC    A,R7
   \   00034A   FB           MOV     R3,A
   \   00034B   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   1265                  item->nwkAddr  = entry.neighborAddress;
   \   00034E   7413         MOV     A,#0x13
   \   000350   12....       LCALL   ?XSTACK_DISP0_8
   \   000353   E0           MOVX    A,@DPTR
   \   000354   F8           MOV     R0,A
   \   000355   A3           INC     DPTR
   \   000356   E0           MOVX    A,@DPTR
   \   000357   F9           MOV     R1,A
   \   000358   EE           MOV     A,R6
   \   000359   2412         ADD     A,#0x12
   \   00035B   F582         MOV     DPL,A
   \   00035D   E4           CLR     A
   \   00035E   3F           ADDC    A,R7
   \   00035F   F583         MOV     DPH,A
   \   000361   E8           MOV     A,R0
   \   000362   F0           MOVX    @DPTR,A
   \   000363   A3           INC     DPTR
   \   000364   E9           MOV     A,R1
   \   000365   F0           MOVX    @DPTR,A
   1266                  item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   \   000366   EE           MOV     A,R6
   \   000367   2415         ADD     A,#0x15
   \   000369   F582         MOV     DPL,A
   \   00036B   E4           CLR     A
   \   00036C   3F           ADDC    A,R7
   \   00036D   F583         MOV     DPH,A
   \   00036F   7402         MOV     A,#0x2
   \   000371   F0           MOVX    @DPTR,A
   1267                  item->relation = ZDP_MGMT_REL_UNKNOWN;
   \   000372   EE           MOV     A,R6
   \   000373   2416         ADD     A,#0x16
   \   000375   F582         MOV     DPL,A
   \   000377   E4           CLR     A
   \   000378   3F           ADDC    A,R7
   \   000379   F583         MOV     DPH,A
   \   00037B   7403         MOV     A,#0x3
   \   00037D   F0           MOVX    @DPTR,A
   1268                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   \   00037E   EE           MOV     A,R6
   \   00037F   2417         ADD     A,#0x17
   \   000381   F582         MOV     DPL,A
   \   000383   E4           CLR     A
   \   000384   3F           ADDC    A,R7
   \   000385   F583         MOV     DPH,A
   \   000387   7402         MOV     A,#0x2
   \   000389   F0           MOVX    @DPTR,A
   1269                  item->depth    = 0xFF;
   \   00038A   EE           MOV     A,R6
   \   00038B   2418         ADD     A,#0x18
   \   00038D   F582         MOV     DPL,A
   \   00038F   E4           CLR     A
   \   000390   3F           ADDC    A,R7
   \   000391   F583         MOV     DPH,A
   \   000393   74FF         MOV     A,#-0x1
   \   000395   F0           MOVX    @DPTR,A
   1270                  item->lqi      = entry.linkInfo.rxLqi;
   \   000396   7422         MOV     A,#0x22
   \   000398   12....       LCALL   ?XSTACK_DISP0_8
   \   00039B   E0           MOVX    A,@DPTR
   \   00039C   C0E0         PUSH    A
   \   00039E   EE           MOV     A,R6
   \   00039F   2419         ADD     A,#0x19
   \   0003A1   F582         MOV     DPL,A
   \   0003A3   E4           CLR     A
   \   0003A4   3F           ADDC    A,R7
   \   0003A5   F583         MOV     DPH,A
   \   0003A7   D0E0         POP     A
   \   0003A9   F0           MOVX    @DPTR,A
   1271          
   1272                  if ( item->nwkAddr == 0 )
   \   0003AA   EE           MOV     A,R6
   \   0003AB   2412         ADD     A,#0x12
   \   0003AD   F582         MOV     DPL,A
   \   0003AF   E4           CLR     A
   \   0003B0   3F           ADDC    A,R7
   \   0003B1   F583         MOV     DPH,A
   \   0003B3   E0           MOVX    A,@DPTR
   \   0003B4   F8           MOV     R0,A
   \   0003B5   A3           INC     DPTR
   \   0003B6   E0           MOVX    A,@DPTR
   \   0003B7   F9           MOV     R1,A
   \   0003B8   E8           MOV     A,R0
   \   0003B9   49           ORL     A,R1
   \   0003BA   700E         JNZ     ??ZDO_ProcessMgmtLqiReq_18
   1273                  {
   1274                    item->devType = ZDP_MGMT_DT_COORD;
   \   0003BC   EE           MOV     A,R6
   \   0003BD   2414         ADD     A,#0x14
   \   0003BF   F582         MOV     DPL,A
   \   0003C1   E4           CLR     A
   \   0003C2   3F           ADDC    A,R7
   \   0003C3   F583         MOV     DPH,A
   \   0003C5   7400         MOV     A,#0x0
   \   0003C7   F0           MOVX    @DPTR,A
   \   0003C8   800C         SJMP    ??ZDO_ProcessMgmtLqiReq_19
   1275                  }
   1276                  else
   1277                  {
   1278                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_18:
   \   0003CA   EE           MOV     A,R6
   \   0003CB   2414         ADD     A,#0x14
   \   0003CD   F582         MOV     DPL,A
   \   0003CF   E4           CLR     A
   \   0003D0   3F           ADDC    A,R7
   \   0003D1   F583         MOV     DPH,A
   \   0003D3   7401         MOV     A,#0x1
   \   0003D5   F0           MOVX    @DPTR,A
   1279                  }
   1280          
   1281                  item++;
   \                     ??ZDO_ProcessMgmtLqiReq_19:
   \   0003D6   EE           MOV     A,R6
   \   0003D7   241A         ADD     A,#0x1a
   \   0003D9   FE           MOV     R6,A
   \   0003DA   5001         JNC     ??ZDO_ProcessMgmtLqiReq_20
   \   0003DC   0F           INC     R7
   1282                }
   \                     ??ZDO_ProcessMgmtLqiReq_20:
   \   0003DD   05..         INC     ?V5
   \   0003DF   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   1283              }
   1284            }
   1285            else
   1286            {
   1287              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   0003E2   75..00       MOV     ?V1,#0x0
   1288            }
   1289          
   1290            // Send response
   1291            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1292                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   0003E5                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   0003E5   75..00       MOV     ?V2,#0x0
   \   0003E8   78..         MOV     R0,#?V2
   \   0003EA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003ED   7403         MOV     A,#0x3
   \   0003EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F2   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0003F5   E5..         MOV     A,?V1
   \   0003F7   F5..         MOV     ?V2,A
   \   0003F9   78..         MOV     R0,#?V2
   \   0003FB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003FE   E5..         MOV     A,?V4
   \   000400   F5..         MOV     ?V2,A
   \   000402   78..         MOV     R0,#?V2
   \   000404   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000407   7406         MOV     A,#0x6
   \   000409   12....       LCALL   ?XSTACK_DISP0_8
   \   00040C   E0           MOVX    A,@DPTR
   \   00040D   FD           MOV     R5,A
   \   00040E   7C00         MOV     R4,#0x0
   \   000410   7409         MOV     A,#0x9
   \   000412   12....       LCALL   ?XSTACK_DISP0_8
   \   000415   E0           MOVX    A,@DPTR
   \   000416   2402         ADD     A,#0x2
   \   000418   FA           MOV     R2,A
   \   000419   A3           INC     DPTR
   \   00041A   E0           MOVX    A,@DPTR
   \   00041B   3400         ADDC    A,#0x0
   \   00041D   FB           MOV     R3,A
   \   00041E   7409         MOV     A,#0x9
   \   000420   12....       LCALL   ?XSTACK_DISP0_8
   \   000423   E0           MOVX    A,@DPTR
   \   000424   F8           MOV     R0,A
   \   000425   A3           INC     DPTR
   \   000426   E0           MOVX    A,@DPTR
   \   000427   C8           XCH     A,R0
   \   000428   240F         ADD     A,#0xf
   \   00042A   F582         MOV     DPL,A
   \   00042C   C8           XCH     A,R0
   \   00042D   3400         ADDC    A,#0x0
   \   00042F   F583         MOV     DPH,A
   \   000431   E0           MOVX    A,@DPTR
   \   000432   F9           MOV     R1,A
   \   000433   12....       LCALL   ??ZDP_MgmtLqiRsp?relay; Banked call to: ZDP_MgmtLqiRsp
   \   000436   7405         MOV     A,#0x5
   \   000438   12....       LCALL   ?DEALLOC_XSTACK8
   \   00043B   E9           MOV     A,R1
   1293          
   1294            if ( table )
   \   00043C   7402         MOV     A,#0x2
   \   00043E   12....       LCALL   ?XSTACK_DISP0_8
   \   000441   E0           MOVX    A,@DPTR
   \   000442   F8           MOV     R0,A
   \   000443   A3           INC     DPTR
   \   000444   E0           MOVX    A,@DPTR
   \   000445   F9           MOV     R1,A
   \   000446   E8           MOV     A,R0
   \   000447   49           ORL     A,R1
   \   000448   600D         JZ      ??ZDO_ProcessMgmtLqiReq_21
   1295            {
   1296              osal_mem_free( table );
   \   00044A                ; Setup parameters for call to function osal_mem_free
   \   00044A   7402         MOV     A,#0x2
   \   00044C   12....       LCALL   ?XSTACK_DISP0_8
   \   00044F   E0           MOVX    A,@DPTR
   \   000450   FA           MOV     R2,A
   \   000451   A3           INC     DPTR
   \   000452   E0           MOVX    A,@DPTR
   \   000453   FB           MOV     R3,A
   \   000454   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   1297            }
   1298          }
   \                     ??ZDO_ProcessMgmtLqiReq_21:
   \   000457   742A         MOV     A,#0x2a
   \   000459   12....       LCALL   ?DEALLOC_XSTACK8
   \   00045C   7F08         MOV     R7,#0x8
   \   00045E   02....       LJMP    ?BANKED_LEAVE_XDATA
   1299          
   1300          /*********************************************************************
   1301           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1302           *
   1303           * @brief       This function handles parsing the incoming Management
   1304           *              Network Discover request and starts the request.
   1305           *
   1306           * @param       inMsg - incoming message (request)
   1307           *
   1308           * @return      none
   1309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1310          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1311          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1312            NLME_ScanFields_t scan;
   1313            uint8             index;
   1314            uint8             *msg;
   1315          
   1316            msg = inMsg->asdu;
   \   00000E   E5..         MOV     A,?V0
   \   000010   2413         ADD     A,#0x13
   \   000012   F582         MOV     DPL,A
   \   000014   E4           CLR     A
   \   000015   35..         ADDC    A,?V1
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   E8           MOV     A,R0
   \   00001F   FE           MOV     R6,A
   \   000020   E9           MOV     A,R1
   \   000021   FF           MOV     R7,A
   1317            scan.channels = osal_build_uint32( msg, 4 );
   \   000022                ; Setup parameters for call to function osal_build_uint32
   \   000022   7904         MOV     R1,#0x4
   \   000024   EE           MOV     A,R6
   \   000025   FA           MOV     R2,A
   \   000026   EF           MOV     A,R7
   \   000027   FB           MOV     R3,A
   \   000028   12....       LCALL   ??osal_build_uint32?relay; Banked call to: osal_build_uint32
   \   00002B   EA           MOV     A,R2
   \   00002C   F8           MOV     R0,A
   \   00002D   EB           MOV     A,R3
   \   00002E   F9           MOV     R1,A
   \   00002F   EC           MOV     A,R4
   \   000030   FA           MOV     R2,A
   \   000031   ED           MOV     A,R5
   \   000032   FB           MOV     R3,A
   \   000033   85..82       MOV     DPL,?XSP + 0
   \   000036   85..83       MOV     DPH,?XSP + 1
   \   000039   12....       LCALL   ?XSTORE_R0123
   1318            msg += 4;
   \   00003C   EE           MOV     A,R6
   \   00003D   2404         ADD     A,#0x4
   \   00003F   FE           MOV     R6,A
   \   000040   5001         JNC     ??ZDO_ProcessMgmtNwkDiscReq_0
   \   000042   0F           INC     R7
   1319            scan.duration = *msg++;
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   E0           MOVX    A,@DPTR
   \   000048   C0E0         PUSH    A
   \   00004A   7404         MOV     A,#0x4
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   D0E0         POP     A
   \   000051   F0           MOVX    @DPTR,A
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   A3           INC     DPTR
   \   000057   AE82         MOV     R6,DPL
   \   000059   AF83         MOV     R7,DPH
   1320            index         = *msg;
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F5..         MOV     ?V2,A
   1321            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   000062   7405         MOV     A,#0x5
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   7401         MOV     A,#0x1
   \   000069   F0           MOVX    @DPTR,A
   1322            scan.scanApp  = NLME_DISC_SCAN;
   \   00006A   7406         MOV     A,#0x6
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   7401         MOV     A,#0x1
   \   000071   F0           MOVX    @DPTR,A
   1323          
   1324            // Save off the information to be used for the response
   1325            zdappMgmtNwkDiscReqInProgress          = true;
   \   000072   90....       MOV     DPTR,#zdappMgmtNwkDiscReqInProgress
   \   000075   7401         MOV     A,#0x1
   \   000077   F0           MOVX    @DPTR,A
   1326            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   000078   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr + 8
   \   00007B   7402         MOV     A,#0x2
   \   00007D   F0           MOVX    @DPTR,A
   1327            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \   00007E   85..82       MOV     DPL,?V0
   \   000081   85..83       MOV     DPH,?V1
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F8           MOV     R0,A
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F9           MOV     R1,A
   \   00008B   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr
   \   00008E   E8           MOV     A,R0
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A3           INC     DPTR
   \   000091   E9           MOV     A,R1
   \   000092   F0           MOVX    @DPTR,A
   1328            zdappMgmtNwkDiscStartIndex             = index;
   \   000093   E5..         MOV     A,?V2
   \   000095   90....       MOV     DPTR,#zdappMgmtNwkDiscStartIndex
   \   000098   F0           MOVX    @DPTR,A
   1329            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \   000099   E5..         MOV     A,?V0
   \   00009B   240F         ADD     A,#0xf
   \   00009D   F582         MOV     DPL,A
   \   00009F   E4           CLR     A
   \   0000A0   35..         ADDC    A,?V1
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   90....       MOV     DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   0000A8   F0           MOVX    @DPTR,A
   1330          
   1331            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \   0000A9                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   0000A9   AA..         MOV     R2,?XSP + 0
   \   0000AB   AB..         MOV     R3,?XSP + 1
   \   0000AD   12....       LCALL   ??NLME_NwkDiscReq2?relay; Banked call to: NLME_NwkDiscReq2
   \   0000B0   E9           MOV     A,R1
   \   0000B1   6003         JZ      ??ZDO_ProcessMgmtNwkDiscReq_1
   1332            {
   1333              NLME_NwkDiscTerm();
   \   0000B3                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000B3   12....       LCALL   ??NLME_NwkDiscTerm?relay; Banked call to: NLME_NwkDiscTerm
   1334          
   1335              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1336            }
   1337          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_1:
   \   0000B6   7407         MOV     A,#0x7
   \   0000B8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BB   7F03         MOV     R7,#0x3
   \   0000BD   02....       LJMP    ?BANKED_LEAVE_XDATA
   1338          
   1339          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1340          /*********************************************************************
   1341           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1342           *
   1343           * @brief       This function finishes the processing of the Management
   1344           *              Network Discover Request and generates the response.
   1345           *
   1346           *   Note:      This function will limit the number of items returned
   1347           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1348           *
   1349           * @param       ResultCountSrcAddr - source of the request
   1350           * @param       msg - pointer to incoming message
   1351           * @param       SecurityUse -
   1352           *
   1353           * @return      none
   1354           */
   1355          void ZDO_FinishProcessingMgmtNwkDiscReq( void )
   1356          {
   1357            byte count, i, ResultCount = 0;
   1358            networkDesc_t *newDesc = NULL, *pList, *NetworkList;
   1359          
   1360            NetworkList = nwk_getNwkDescList();
   1361          
   1362            // Count the number of nwk descriptors in the list
   1363            pList = nwk_getNwkDescList();
   1364            while (pList)
   1365            {
   1366              ResultCount++;
   1367              pList = pList->nextDesc;
   1368            }
   1369          
   1370            if ( ZSTACK_ROUTER_BUILD )
   1371            {
   1372              // Look for my PanID.
   1373              pList = nwk_getNwkDescList();
   1374              while ( pList )
   1375              {
   1376                if ( pList->panId == _NIB.nwkPanId )
   1377                {
   1378                  break;
   1379                }
   1380          
   1381          
   1382                if ( !pList->nextDesc )
   1383                {
   1384                  break;
   1385                }
   1386                pList = pList->nextDesc;
   1387              }
   1388          
   1389          
   1390              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1391              // prepend it.
   1392              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1393              {
   1394                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1395                if ( newDesc )
   1396                {
   1397                  byte pJoin;
   1398          
   1399                  newDesc->panId = _NIB.nwkPanId;
   1400                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1401                  newDesc->version = NLME_GetProtocolVersion();
   1402                  newDesc->stackProfile = zgStackProfile;
   1403                  
   1404                  //Extended PanID
   1405                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1406          
   1407                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1408                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1409                                                     INVALID_NODE_ADDR);
   1410          
   1411                  newDesc->nextDesc = NetworkList;
   1412                  NetworkList = newDesc;
   1413                  ResultCount++;
   1414                }
   1415              }
   1416            }
   1417          
   1418            // Calc the count and apply a max count.
   1419            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   1420            {
   1421              count = 0;
   1422            }
   1423            else
   1424            {
   1425              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   1426              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   1427              {
   1428                count = ZDO_MAX_NWKDISC_ITEMS;
   1429              }
   1430          
   1431              // Move the list pointer up to the start index.
   1432              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   1433              {
   1434                NetworkList = NetworkList->nextDesc;
   1435              }
   1436            }
   1437          
   1438            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1439                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1440                                zdappMgmtNwkDiscStartIndex,
   1441                                count,
   1442                                NetworkList,
   1443                                false );
   1444          
   1445            if ( ZSTACK_ROUTER_BUILD )
   1446            {
   1447              if ( newDesc != NULL )
   1448              {
   1449                osal_mem_free( newDesc );
   1450              }
   1451            }
   1452          
   1453            NLME_NwkDiscTerm();
   1454          }
   1455          #endif
   1456          
   1457          /*********************************************************************
   1458           * @fn          ZDO_ProcessMgmtRtgReq
   1459           *
   1460           * @brief       This function finishes the processing of the Management
   1461           *              Routing Request and generates the response.
   1462           *
   1463           *   Note:      This function will limit the number of items returned
   1464           *              to ZDO_MAX_RTG_ITEMS items.
   1465           *
   1466           * @param       inMsg - incoming message (request)
   1467           *
   1468           * @return      none
   1469           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1470          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1471          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   1472            byte x;
   1473            byte maxNumItems;
   1474            byte numItems = 0;
   \   000014   7E00         MOV     R6,#0x0
   1475            uint8 *pBuf = NULL;
   \   000016   75..00       MOV     ?V6,#0x0
   \   000019   75..00       MOV     ?V7,#0x0
   1476            rtgItem_t *pList;
   1477            uint8 StartIndex = inMsg->asdu[0];
   \   00001C   7401         MOV     A,#0x1
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   C8           XCH     A,R0
   \   000026   2413         ADD     A,#0x13
   \   000028   F582         MOV     DPL,A
   \   00002A   C8           XCH     A,R0
   \   00002B   3400         ADDC    A,#0x0
   \   00002D   F583         MOV     DPH,A
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F8           MOV     R0,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F583         MOV     DPH,A
   \   000035   8882         MOV     DPL,R0
   \   000037   E0           MOVX    A,@DPTR
   \   000038   FF           MOV     R7,A
   1478          
   1479            // Get the number of table items
   1480            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   000039                ; Setup parameters for call to function NLME_GetRequest
   \   000039   AC..         MOV     R4,?XSP + 0
   \   00003B   AD..         MOV     R5,?XSP + 1
   \   00003D   7A00         MOV     R2,#0x0
   \   00003F   7B00         MOV     R3,#0x0
   \   000041   799D         MOV     R1,#-0x63
   \   000043   12....       LCALL   ??NLME_GetRequest?relay; Banked call to: NLME_GetRequest
   \   000046   E9           MOV     A,R1
   1481          
   1482            if ( maxNumItems > StartIndex )
   \   000047   85..82       MOV     DPL,?XSP + 0
   \   00004A   85..83       MOV     DPH,?XSP + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F8           MOV     R0,A
   \   00004F   EF           MOV     A,R7
   \   000050   C3           CLR     C
   \   000051   98           SUBB    A,R0
   \   000052   4003         JC      $+5
   \   000054   02....       LJMP    ??ZDO_ProcessMgmtRtgReq_0 & 0xFFFF
   1483            {
   1484              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000057   85..82       MOV     DPL,?XSP + 0
   \   00005A   85..83       MOV     DPH,?XSP + 1
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   C3           CLR     C
   \   00005F   9F           SUBB    A,R7
   \   000060   FE           MOV     R6,A
   1485          
   1486              // limit the size of the list
   1487              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   000061   EE           MOV     A,R6
   \   000062   C3           CLR     C
   \   000063   940B         SUBB    A,#0xb
   \   000065   4002         JC      ??ZDO_ProcessMgmtRtgReq_1
   1488              {
   1489                numItems = ZDO_MAX_RTG_ITEMS;
   \   000067   7E0A         MOV     R6,#0xa
   1490              }
   1491          
   1492              // Allocate the memory to build the table
   1493              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   000069                ; Setup parameters for call to function osal_mem_alloc
   \   000069   EE           MOV     A,R6
   \   00006A   FA           MOV     R2,A
   \   00006B   7B00         MOV     R3,#0x0
   \   00006D   EA           MOV     A,R2
   \   00006E   75F007       MOV     B,#0x7
   \   000071   A4           MUL     AB
   \   000072   CA           XCH     A,R2
   \   000073   A8F0         MOV     R0,B
   \   000075   75F000       MOV     B,#0x0
   \   000078   A4           MUL     AB
   \   000079   28           ADD     A,R0
   \   00007A   F8           MOV     R0,A
   \   00007B   75F007       MOV     B,#0x7
   \   00007E   EB           MOV     A,R3
   \   00007F   A4           MUL     AB
   \   000080   28           ADD     A,R0
   \   000081   FB           MOV     R3,A
   \   000082   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000085   8A..         MOV     ?V2,R2
   \   000087   8B..         MOV     ?V3,R3
   \   000089   85....       MOV     ?V6,?V2
   \   00008C   85....       MOV     ?V7,?V3
   1494          
   1495              if ( pBuf != NULL )
   \   00008F   E5..         MOV     A,?V6
   \   000091   45..         ORL     A,?V7
   \   000093   7003         JNZ     $+5
   \   000095   02....       LJMP    ??ZDO_ProcessMgmtRtgReq_2 & 0xFFFF
   1496              {
   1497                // Convert buffer to list
   1498                pList = (rtgItem_t *)pBuf;
   \   000098   85....       MOV     ?V0,?V6
   \   00009B   85....       MOV     ?V1,?V7
   1499          
   1500                // Loop through items and build list
   1501                for ( x = 0; x < numItems; x++ )
   \   00009E   75..00       MOV     ?V4,#0x0
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   0000A1   E5..         MOV     A,?V4
   \   0000A3   C3           CLR     C
   \   0000A4   9E           SUBB    A,R6
   \   0000A5   507B         JNC     ??ZDO_ProcessMgmtRtgReq_0
   1502                {
   1503                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   \   0000A7                ; Setup parameters for call to function NLME_GetRequest
   \   0000A7   AC..         MOV     R4,?V0
   \   0000A9   AD..         MOV     R5,?V1
   \   0000AB   AA..         MOV     R2,?V4
   \   0000AD   7B00         MOV     R3,#0x0
   \   0000AF   EF           MOV     A,R7
   \   0000B0   F8           MOV     R0,A
   \   0000B1   7900         MOV     R1,#0x0
   \   0000B3   EA           MOV     A,R2
   \   0000B4   28           ADD     A,R0
   \   0000B5   FA           MOV     R2,A
   \   0000B6   EB           MOV     A,R3
   \   0000B7   39           ADDC    A,R1
   \   0000B8   FB           MOV     R3,A
   \   0000B9   798B         MOV     R1,#-0x75
   \   0000BB   12....       LCALL   ??NLME_GetRequest?relay; Banked call to: NLME_GetRequest
   \   0000BE   E9           MOV     A,R1
   1504          
   1505                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1506                  switch( pList->status )
   \   0000BF   85..82       MOV     DPL,?V0
   \   0000C2   85..83       MOV     DPH,?V1
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   14           DEC     A
   \   0000CC   6008         JZ      ??ZDO_ProcessMgmtRtgReq_4
   \   0000CE   14           DEC     A
   \   0000CF   6015         JZ      ??ZDO_ProcessMgmtRtgReq_5
   \   0000D1   14           DEC     A
   \   0000D2   6022         JZ      ??ZDO_ProcessMgmtRtgReq_6
   \   0000D4   802E         SJMP    ??ZDO_ProcessMgmtRtgReq_7
   1507                  {
   1508                    case RT_ACTIVE:
   1509                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   0000D6   85..82       MOV     DPL,?V0
   \   0000D9   85..83       MOV     DPH,?V1
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   7400         MOV     A,#0x0
   \   0000E3   F0           MOVX    @DPTR,A
   1510                      break;
   \   0000E4   802C         SJMP    ??ZDO_ProcessMgmtRtgReq_8
   1511          
   1512                    case RT_DISC:
   1513                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   0000E6   85..82       MOV     DPL,?V0
   \   0000E9   85..83       MOV     DPH,?V1
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   7401         MOV     A,#0x1
   \   0000F3   F0           MOVX    @DPTR,A
   1514                      break;
   \   0000F4   801C         SJMP    ??ZDO_ProcessMgmtRtgReq_8
   1515          
   1516                    case RT_LINK_FAIL:
   1517                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   0000F6   85..82       MOV     DPL,?V0
   \   0000F9   85..83       MOV     DPH,?V1
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   7402         MOV     A,#0x2
   \   000103   F0           MOVX    @DPTR,A
   1518          
   1519                    case RT_INIT:
   1520                    case RT_REPAIR:
   1521                    default:
   1522                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   000104   85..82       MOV     DPL,?V0
   \   000107   85..83       MOV     DPH,?V1
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   7403         MOV     A,#0x3
   \   000111   F0           MOVX    @DPTR,A
   1523                      break;
   1524                  }
   1525          
   1526                  // Increment pointer to next record
   1527                  pList++;
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   000112   E5..         MOV     A,?V0
   \   000114   2407         ADD     A,#0x7
   \   000116   F5..         MOV     ?V0,A
   \   000118   5002         JNC     ??ZDO_ProcessMgmtRtgReq_9
   \   00011A   05..         INC     ?V1
   1528                }
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   00011C   05..         INC     ?V4
   \   00011E   8081         SJMP    ??ZDO_ProcessMgmtRtgReq_3
   1529              }
   1530              else
   1531              {
   1532                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   000120   7E00         MOV     R6,#0x0
   1533              }
   1534            }
   1535          
   1536            // Send response
   1537            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1538                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   000122                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   000122   75..00       MOV     ?V2,#0x0
   \   000125   78..         MOV     R0,#?V2
   \   000127   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00012A   85....       MOV     ?V2,?V6
   \   00012D   85....       MOV     ?V3,?V7
   \   000130   78..         MOV     R0,#?V2
   \   000132   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000135   EE           MOV     A,R6
   \   000136   F5..         MOV     ?V2,A
   \   000138   78..         MOV     R0,#?V2
   \   00013A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00013D   EF           MOV     A,R7
   \   00013E   F5..         MOV     ?V2,A
   \   000140   78..         MOV     R0,#?V2
   \   000142   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000145   7405         MOV     A,#0x5
   \   000147   12....       LCALL   ?XSTACK_DISP0_8
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   FD           MOV     R5,A
   \   00014C   7C00         MOV     R4,#0x0
   \   00014E   7406         MOV     A,#0x6
   \   000150   12....       LCALL   ?XSTACK_DISP0_8
   \   000153   E0           MOVX    A,@DPTR
   \   000154   2402         ADD     A,#0x2
   \   000156   FA           MOV     R2,A
   \   000157   A3           INC     DPTR
   \   000158   E0           MOVX    A,@DPTR
   \   000159   3400         ADDC    A,#0x0
   \   00015B   FB           MOV     R3,A
   \   00015C   7406         MOV     A,#0x6
   \   00015E   12....       LCALL   ?XSTACK_DISP0_8
   \   000161   E0           MOVX    A,@DPTR
   \   000162   F8           MOV     R0,A
   \   000163   A3           INC     DPTR
   \   000164   E0           MOVX    A,@DPTR
   \   000165   C8           XCH     A,R0
   \   000166   240F         ADD     A,#0xf
   \   000168   F582         MOV     DPL,A
   \   00016A   C8           XCH     A,R0
   \   00016B   3400         ADDC    A,#0x0
   \   00016D   F583         MOV     DPH,A
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   F9           MOV     R1,A
   \   000171   12....       LCALL   ??ZDP_MgmtRtgRsp?relay; Banked call to: ZDP_MgmtRtgRsp
   \   000174   7405         MOV     A,#0x5
   \   000176   12....       LCALL   ?DEALLOC_XSTACK8
   \   000179   E9           MOV     A,R1
   1539          
   1540            if ( pBuf )
   \   00017A   E5..         MOV     A,?V6
   \   00017C   45..         ORL     A,?V7
   \   00017E   6007         JZ      ??ZDO_ProcessMgmtRtgReq_10
   1541            {
   1542              osal_mem_free( pBuf );
   \   000180                ; Setup parameters for call to function osal_mem_free
   \   000180   AA..         MOV     R2,?V6
   \   000182   AB..         MOV     R3,?V7
   \   000184   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   1543            }
   1544          }
   \                     ??ZDO_ProcessMgmtRtgReq_10:
   \   000187   7403         MOV     A,#0x3
   \   000189   12....       LCALL   ?DEALLOC_XSTACK8
   \   00018C   7F08         MOV     R7,#0x8
   \   00018E   02....       LJMP    ?BANKED_LEAVE_XDATA
   1545          
   1546          /*********************************************************************
   1547           * @fn          ZDO_ProcessMgmtBindReq
   1548           *
   1549           * @brief       This function finishes the processing of the Management
   1550           *              Bind Request and generates the response.
   1551           *
   1552           *   Note:      This function will limit the number of items returned
   1553           *              to ZDO_MAX_BIND_ITEMS items.
   1554           *
   1555           * @param       inMsg - incoming message (request)
   1556           *
   1557           * @return      none
   1558           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1559          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1560          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7404         MOV     A,#0x4
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   1561          #if defined ( REFLECTOR )
   1562            byte x;
   1563            uint16 maxNumItems;
   1564            uint16 numItems;
   1565            uint8 *pBuf = NULL;
   \   000014   75..00       MOV     ?V6,#0x0
   \   000017   75..00       MOV     ?V7,#0x0
   1566            apsBindingItem_t *pList;
   1567            uint8 StartIndex = inMsg->asdu[0];
   \   00001A   7404         MOV     A,#0x4
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   C8           XCH     A,R0
   \   000024   2413         ADD     A,#0x13
   \   000026   F582         MOV     DPL,A
   \   000028   C8           XCH     A,R0
   \   000029   3400         ADDC    A,#0x0
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F8           MOV     R0,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F583         MOV     DPH,A
   \   000033   8882         MOV     DPL,R0
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5..         MOV     ?V1,A
   1568            uint8 status;
   1569          
   1570            // Get the number of table items
   1571            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \   000038                ; Setup parameters for call to function APSME_GetRequest
   \   000038   7402         MOV     A,#0x2
   \   00003A   12....       LCALL   ?XSTACK_DISP102_8
   \   00003D   7A00         MOV     R2,#0x0
   \   00003F   7B00         MOV     R3,#0x0
   \   000041   79A3         MOV     R1,#-0x5d
   \   000043   12....       LCALL   ??APSME_GetRequest?relay; Banked call to: APSME_GetRequest
   \   000046   E9           MOV     A,R1
   1572          
   1573            if ( maxNumItems > StartIndex )
   \   000047   A8..         MOV     R0,?V1
   \   000049   7900         MOV     R1,#0x0
   \   00004B   7402         MOV     A,#0x2
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   E0           MOVX    A,@DPTR
   \   000051   FA           MOV     R2,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   FB           MOV     R3,A
   \   000055   C3           CLR     C
   \   000056   E8           MOV     A,R0
   \   000057   9A           SUBB    A,R2
   \   000058   E9           MOV     A,R1
   \   000059   9B           SUBB    A,R3
   \   00005A   5017         JNC     ??ZDO_ProcessMgmtBindReq_0
   1574            {
   1575              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   00005C   7402         MOV     A,#0x2
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   A8..         MOV     R0,?V1
   \   000063   7900         MOV     R1,#0x0
   \   000065   E0           MOVX    A,@DPTR
   \   000066   C3           CLR     C
   \   000067   98           SUBB    A,R0
   \   000068   F8           MOV     R0,A
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   99           SUBB    A,R1
   \   00006C   F9           MOV     R1,A
   \   00006D   E8           MOV     A,R0
   \   00006E   FE           MOV     R6,A
   \   00006F   E9           MOV     A,R1
   \   000070   FF           MOV     R7,A
   \   000071   8004         SJMP    ??ZDO_ProcessMgmtBindReq_1
   1576            }
   1577            else
   1578            {
   1579              numItems = 0;
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   000073   7E00         MOV     R6,#0x0
   \   000075   7F00         MOV     R7,#0x0
   1580            }
   1581          
   1582            // limit the size of the list
   1583            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   000077   C3           CLR     C
   \   000078   EE           MOV     A,R6
   \   000079   9404         SUBB    A,#0x4
   \   00007B   EF           MOV     A,R7
   \   00007C   9400         SUBB    A,#0x0
   \   00007E   4004         JC      ??ZDO_ProcessMgmtBindReq_2
   1584            {
   1585              numItems = ZDO_MAX_BIND_ITEMS;
   \   000080   7E03         MOV     R6,#0x3
   \   000082   7F00         MOV     R7,#0x0
   1586            }
   1587          
   1588            // Allocate the memory to build the table
   1589            if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   000084   EE           MOV     A,R6
   \   000085   4F           ORL     A,R7
   \   000086   7003         JNZ     $+5
   \   000088   02....       LJMP    ??ZDO_ProcessMgmtBindReq_3 & 0xFFFF
   \   00008B                ; Setup parameters for call to function osal_mem_alloc
   \   00008B   EE           MOV     A,R6
   \   00008C   FA           MOV     R2,A
   \   00008D   EF           MOV     A,R7
   \   00008E   FB           MOV     R3,A
   \   00008F   EA           MOV     A,R2
   \   000090   75F015       MOV     B,#0x15
   \   000093   A4           MUL     AB
   \   000094   CA           XCH     A,R2
   \   000095   A8F0         MOV     R0,B
   \   000097   75F000       MOV     B,#0x0
   \   00009A   A4           MUL     AB
   \   00009B   28           ADD     A,R0
   \   00009C   F8           MOV     R0,A
   \   00009D   75F015       MOV     B,#0x15
   \   0000A0   EB           MOV     A,R3
   \   0000A1   A4           MUL     AB
   \   0000A2   28           ADD     A,R0
   \   0000A3   FB           MOV     R3,A
   \   0000A4   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0000A7   8A..         MOV     ?V2,R2
   \   0000A9   8B..         MOV     ?V3,R3
   \   0000AB   A8..         MOV     R0,?V2
   \   0000AD   A9..         MOV     R1,?V3
   \   0000AF   88..         MOV     ?V6,R0
   \   0000B1   89..         MOV     ?V7,R1
   \   0000B3   E8           MOV     A,R0
   \   0000B4   49           ORL     A,R1
   \   0000B5   605B         JZ      ??ZDO_ProcessMgmtBindReq_3
   1590            {
   1591              status = ZSuccess;
   \   0000B7   75..00       MOV     ?V0,#0x0
   1592          
   1593              // Convert buffer to list
   1594              pList = (apsBindingItem_t *)pBuf;
   \   0000BA   85..82       MOV     DPL,?XSP + 0
   \   0000BD   85..83       MOV     DPH,?XSP + 1
   \   0000C0   E5..         MOV     A,?V6
   \   0000C2   F0           MOVX    @DPTR,A
   \   0000C3   A3           INC     DPTR
   \   0000C4   E5..         MOV     A,?V7
   \   0000C6   F0           MOVX    @DPTR,A
   1595          
   1596              // Loop through items and build list
   1597              for ( x = 0; x < numItems; x++ )
   \   0000C7   75..00       MOV     ?V4,#0x0
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   0000CA   A8..         MOV     R0,?V4
   \   0000CC   7900         MOV     R1,#0x0
   \   0000CE   C3           CLR     C
   \   0000CF   E8           MOV     A,R0
   \   0000D0   9E           SUBB    A,R6
   \   0000D1   E9           MOV     A,R1
   \   0000D2   9F           SUBB    A,R7
   \   0000D3   5044         JNC     ??ZDO_ProcessMgmtBindReq_5
   1598              {
   1599                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   \   0000D5                ; Setup parameters for call to function APSME_GetRequest
   \   0000D5   85..82       MOV     DPL,?XSP + 0
   \   0000D8   85..83       MOV     DPH,?XSP + 1
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   FC           MOV     R4,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   FD           MOV     R5,A
   \   0000E0   AA..         MOV     R2,?V4
   \   0000E2   7B00         MOV     R3,#0x0
   \   0000E4   A8..         MOV     R0,?V1
   \   0000E6   7900         MOV     R1,#0x0
   \   0000E8   EA           MOV     A,R2
   \   0000E9   28           ADD     A,R0
   \   0000EA   FA           MOV     R2,A
   \   0000EB   EB           MOV     A,R3
   \   0000EC   39           ADDC    A,R1
   \   0000ED   FB           MOV     R3,A
   \   0000EE   79A2         MOV     R1,#-0x5e
   \   0000F0   12....       LCALL   ??APSME_GetRequest?relay; Banked call to: APSME_GetRequest
   \   0000F3   E9           MOV     A,R1
   1600                pList++;
   \   0000F4   85..82       MOV     DPL,?XSP + 0
   \   0000F7   85..83       MOV     DPH,?XSP + 1
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   2415         ADD     A,#0x15
   \   0000FD   F8           MOV     R0,A
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   3400         ADDC    A,#0x0
   \   000102   F9           MOV     R1,A
   \   000103   85..82       MOV     DPL,?XSP + 0
   \   000106   85..83       MOV     DPH,?XSP + 1
   \   000109   E8           MOV     A,R0
   \   00010A   F0           MOVX    @DPTR,A
   \   00010B   A3           INC     DPTR
   \   00010C   E9           MOV     A,R1
   \   00010D   F0           MOVX    @DPTR,A
   1601              }
   \   00010E   05..         INC     ?V4
   \   000110   80B8         SJMP    ??ZDO_ProcessMgmtBindReq_4
   1602          
   1603            }
   1604            else
   1605            {
   1606              status = ZDP_NOT_PERMITTED;
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   000112   75..8B       MOV     ?V0,#-0x75
   1607              numItems = 0;
   \   000115   7E00         MOV     R6,#0x0
   \   000117   7F00         MOV     R7,#0x0
   1608            }
   1609          
   1610            // Send response
   1611            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1612                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   000119                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   000119   75..00       MOV     ?V2,#0x0
   \   00011C   78..         MOV     R0,#?V2
   \   00011E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000121   85....       MOV     ?V2,?V6
   \   000124   85....       MOV     ?V3,?V7
   \   000127   78..         MOV     R0,#?V2
   \   000129   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012C   EE           MOV     A,R6
   \   00012D   F5..         MOV     ?V2,A
   \   00012F   78..         MOV     R0,#?V2
   \   000131   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000134   E5..         MOV     A,?V1
   \   000136   F5..         MOV     ?V2,A
   \   000138   78..         MOV     R0,#?V2
   \   00013A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00013D   7407         MOV     A,#0x7
   \   00013F   12....       LCALL   ?XSTACK_DISP0_8
   \   000142   E0           MOVX    A,@DPTR
   \   000143   F8           MOV     R0,A
   \   000144   A3           INC     DPTR
   \   000145   E0           MOVX    A,@DPTR
   \   000146   F9           MOV     R1,A
   \   000147   E8           MOV     A,R0
   \   000148   FD           MOV     R5,A
   \   000149   AC..         MOV     R4,?V0
   \   00014B   7409         MOV     A,#0x9
   \   00014D   12....       LCALL   ?XSTACK_DISP0_8
   \   000150   E0           MOVX    A,@DPTR
   \   000151   2402         ADD     A,#0x2
   \   000153   FA           MOV     R2,A
   \   000154   A3           INC     DPTR
   \   000155   E0           MOVX    A,@DPTR
   \   000156   3400         ADDC    A,#0x0
   \   000158   FB           MOV     R3,A
   \   000159   7409         MOV     A,#0x9
   \   00015B   12....       LCALL   ?XSTACK_DISP0_8
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   F8           MOV     R0,A
   \   000160   A3           INC     DPTR
   \   000161   E0           MOVX    A,@DPTR
   \   000162   C8           XCH     A,R0
   \   000163   240F         ADD     A,#0xf
   \   000165   F582         MOV     DPL,A
   \   000167   C8           XCH     A,R0
   \   000168   3400         ADDC    A,#0x0
   \   00016A   F583         MOV     DPH,A
   \   00016C   E0           MOVX    A,@DPTR
   \   00016D   F9           MOV     R1,A
   \   00016E   12....       LCALL   ??ZDP_MgmtBindRsp?relay; Banked call to: ZDP_MgmtBindRsp
   \   000171   7405         MOV     A,#0x5
   \   000173   12....       LCALL   ?DEALLOC_XSTACK8
   \   000176   E9           MOV     A,R1
   1613          
   1614            if ( pBuf )
   \   000177   E5..         MOV     A,?V6
   \   000179   45..         ORL     A,?V7
   \   00017B   6007         JZ      ??ZDO_ProcessMgmtBindReq_6
   1615            {
   1616              osal_mem_free( pBuf );
   \   00017D                ; Setup parameters for call to function osal_mem_free
   \   00017D   AA..         MOV     R2,?V6
   \   00017F   AB..         MOV     R3,?V7
   \   000181   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   1617            }
   1618          #else
   1619            (void)inMsg;
   1620          #endif
   1621          }
   \                     ??ZDO_ProcessMgmtBindReq_6:
   \   000184   7406         MOV     A,#0x6
   \   000186   12....       LCALL   ?DEALLOC_XSTACK8
   \   000189   7F08         MOV     R7,#0x8
   \   00018B   02....       LJMP    ?BANKED_LEAVE_XDATA
   1622          
   1623          /*********************************************************************
   1624           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1625           *
   1626           * @brief       This function finishes the processing of the Management
   1627           *              Direct Join Request and generates the response.
   1628           *
   1629           * @param       inMsg - incoming message (request)
   1630           *
   1631           * @return      none
   1632           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1633          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1634          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1635            uint8 *deviceAddr;
   1636            uint8 capInfo;
   1637            uint8 stat;
   1638          
   1639            // Parse the message
   1640            deviceAddr = inMsg->asdu;
   \   00000E   EE           MOV     A,R6
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   88..         MOV     ?V2,R0
   \   00001E   89..         MOV     ?V3,R1
   1641            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   \   000020   EE           MOV     A,R6
   \   000021   2413         ADD     A,#0x13
   \   000023   F582         MOV     DPL,A
   \   000025   E4           CLR     A
   \   000026   3F           ADDC    A,R7
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   C8           XCH     A,R0
   \   00002E   2408         ADD     A,#0x8
   \   000030   F582         MOV     DPL,A
   \   000032   C8           XCH     A,R0
   \   000033   3400         ADDC    A,#0x0
   \   000035   F583         MOV     DPH,A
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V0,A
   1642          
   1643            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \   00003A                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   00003A   A9..         MOV     R1,?V0
   \   00003C   AA..         MOV     R2,?V2
   \   00003E   AB..         MOV     R3,?V3
   \   000040   12....       LCALL   ??NLME_DirectJoinRequest?relay; Banked call to: NLME_DirectJoinRequest
   \   000043   E9           MOV     A,R1
   \   000044   C0E0         PUSH    A
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   D0E0         POP     A
   \   00004E   F0           MOVX    @DPTR,A
   1644          
   1645            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   00004F                ; Setup parameters for call to function ZDP_SendData
   \   00004F   75..00       MOV     ?V1,#0x0
   \   000052   78..         MOV     R0,#?V1
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000057   7401         MOV     A,#0x1
   \   000059   12....       LCALL   ?XSTACK_DISP100_8
   \   00005C   88..         MOV     ?V4,R0
   \   00005E   89..         MOV     ?V5,R1
   \   000060   78..         MOV     R0,#?V4
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   75..35       MOV     ?V4,#0x35
   \   000068   75..80       MOV     ?V5,#-0x80
   \   00006B   78..         MOV     R0,#?V4
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000070   7901         MOV     R1,#0x1
   \   000072   EE           MOV     A,R6
   \   000073   2402         ADD     A,#0x2
   \   000075   FC           MOV     R4,A
   \   000076   E4           CLR     A
   \   000077   3F           ADDC    A,R7
   \   000078   FD           MOV     R5,A
   \   000079   EE           MOV     A,R6
   \   00007A   240F         ADD     A,#0xf
   \   00007C   FA           MOV     R2,A
   \   00007D   E4           CLR     A
   \   00007E   3F           ADDC    A,R7
   \   00007F   FB           MOV     R3,A
   \   000080   12....       LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
   \   000083   7405         MOV     A,#0x5
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
   \   000088   E9           MOV     A,R1
   1646          }
   \   000089   7401         MOV     A,#0x1
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008E   7F06         MOV     R7,#0x6
   \   000090   02....       LJMP    ?BANKED_LEAVE_XDATA
   1647          
   1648          /*********************************************************************
   1649           * @fn          ZDO_ProcessMgmtLeaveReq
   1650           *
   1651           * @brief       This function processes a Management Leave Request
   1652           *              and generates the response.
   1653           *
   1654           * @param       inMsg - incoming message (request)
   1655           *
   1656           * @return      none
   1657           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1658          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1659          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   1660            NLME_LeaveReq_t req;
   1661            ZStatus_t       status;
   1662            uint8           option;
   1663            uint8 *msg = inMsg->asdu;
   \   00000E   E5..         MOV     A,?V2
   \   000010   2413         ADD     A,#0x13
   \   000012   F582         MOV     DPL,A
   \   000014   E4           CLR     A
   \   000015   35..         ADDC    A,?V3
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FE           MOV     R6,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FF           MOV     R7,A
   1664          
   1665            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1666                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \   00001E                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   00001E   EE           MOV     A,R6
   \   00001F   FA           MOV     R2,A
   \   000020   EF           MOV     A,R7
   \   000021   FB           MOV     R3,A
   \   000022   12....       LCALL   ??AddrMgrExtAddrValid?relay; Banked call to: AddrMgrExtAddrValid
   \   000025   E9           MOV     A,R1
   \   000026   6017         JZ      ??ZDO_ProcessMgmtLeaveReq_0
   \   000028                ; Setup parameters for call to function NLME_GetExtAddr
   \   000028   12....       LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
   \   00002B   8A..         MOV     ?V4,R2
   \   00002D   8B..         MOV     ?V5,R3
   \   00002F   AC..         MOV     R4,?V4
   \   000031   AD..         MOV     R5,?V5
   \   000033                ; Setup parameters for call to function sAddrExtCmp
   \   000033   EE           MOV     A,R6
   \   000034   FA           MOV     R2,A
   \   000035   EF           MOV     A,R7
   \   000036   FB           MOV     R3,A
   \   000037   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   00003A   E9           MOV     A,R1
   \   00003B   6401         XRL     A,#0x1
   \   00003D   700E         JNZ     ??ZDO_ProcessMgmtLeaveReq_1
   1667            {
   1668              // Remove this device
   1669              req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   00003F   7401         MOV     A,#0x1
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   7400         MOV     A,#0x0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   7400         MOV     A,#0x0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   800A         SJMP    ??ZDO_ProcessMgmtLeaveReq_2
   1670            }
   1671            else
   1672            {
   1673              // Remove child device
   1674              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   00004D   7401         MOV     A,#0x1
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   EE           MOV     A,R6
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   EF           MOV     A,R7
   \   000056   F0           MOVX    @DPTR,A
   1675            }
   1676          
   1677            option = msg[Z_EXTADDR_LEN];
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F5..         MOV     ?V0,A
   1678            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   000066   E5..         MOV     A,?V0
   \   000068   A2E6         MOV     C,0xE0 /* A   */.6
   \   00006A   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_3
   1679            {
   1680              req.removeChildren = TRUE;
   \   00006C   7403         MOV     A,#0x3
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   7401         MOV     A,#0x1
   \   000073   F0           MOVX    @DPTR,A
   1681            }
   1682          
   1683            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   000074   E5..         MOV     A,?V0
   \   000076   A2E7         MOV     C,0xE0 /* A   */.7
   \   000078   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_4
   1684            {
   1685               req.rejoin = TRUE;
   \   00007A   7404         MOV     A,#0x4
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   7401         MOV     A,#0x1
   \   000081   F0           MOVX    @DPTR,A
   1686            }
   1687          
   1688            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   000082   7405         MOV     A,#0x5
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   7400         MOV     A,#0x0
   \   000089   F0           MOVX    @DPTR,A
   1689          
   1690            status = NLME_LeaveReq( &req );
   \   00008A                ; Setup parameters for call to function NLME_LeaveReq
   \   00008A   7401         MOV     A,#0x1
   \   00008C   12....       LCALL   ?XSTACK_DISP101_8
   \   00008F   12....       LCALL   ??NLME_LeaveReq?relay; Banked call to: NLME_LeaveReq
   \   000092   E9           MOV     A,R1
   \   000093   C0E0         PUSH    A
   \   000095   85..82       MOV     DPL,?XSP + 0
   \   000098   85..83       MOV     DPH,?XSP + 1
   \   00009B   D0E0         POP     A
   \   00009D   F0           MOVX    @DPTR,A
   1691          
   1692            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   00009E                ; Setup parameters for call to function ZDP_SendData
   \   00009E   75..00       MOV     ?V1,#0x0
   \   0000A1   78..         MOV     R0,#?V1
   \   0000A3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A6   7401         MOV     A,#0x1
   \   0000A8   12....       LCALL   ?XSTACK_DISP100_8
   \   0000AB   88..         MOV     ?V4,R0
   \   0000AD   89..         MOV     ?V5,R1
   \   0000AF   78..         MOV     R0,#?V4
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B4   75..34       MOV     ?V4,#0x34
   \   0000B7   75..80       MOV     ?V5,#-0x80
   \   0000BA   78..         MOV     R0,#?V4
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BF   7901         MOV     R1,#0x1
   \   0000C1   E5..         MOV     A,?V2
   \   0000C3   2402         ADD     A,#0x2
   \   0000C5   FC           MOV     R4,A
   \   0000C6   E4           CLR     A
   \   0000C7   35..         ADDC    A,?V3
   \   0000C9   FD           MOV     R5,A
   \   0000CA   E5..         MOV     A,?V2
   \   0000CC   240F         ADD     A,#0xf
   \   0000CE   FA           MOV     R2,A
   \   0000CF   E4           CLR     A
   \   0000D0   35..         ADDC    A,?V3
   \   0000D2   FB           MOV     R3,A
   \   0000D3   12....       LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
   \   0000D6   7405         MOV     A,#0x5
   \   0000D8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DB   E9           MOV     A,R1
   1693          }
   \   0000DC   7406         MOV     A,#0x6
   \   0000DE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E1   7F06         MOV     R7,#0x6
   \   0000E3   02....       LJMP    ?BANKED_LEAVE_XDATA
   1694          
   1695          
   1696          /*********************************************************************
   1697           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1698           *
   1699           * @brief       This function processes a Management Permit Join Request
   1700           *              and generates the response.
   1701           *
   1702           * @param       inMsg - incoming message (request)
   1703           *
   1704           * @return      none
   1705           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1706          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1707          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1708            uint8 stat;
   1709            uint8 duration;
   1710            uint8 tcsig;
   1711          
   1712            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   \   00000E   EE           MOV     A,R6
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F583         MOV     DPH,A
   \   00001D   8882         MOV     DPL,R0
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0,A
   1713            tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   \   000022   EE           MOV     A,R6
   \   000023   2413         ADD     A,#0x13
   \   000025   F582         MOV     DPL,A
   \   000027   E4           CLR     A
   \   000028   3F           ADDC    A,R7
   \   000029   F583         MOV     DPH,A
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F583         MOV     DPH,A
   \   000031   8882         MOV     DPL,R0
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V1,A
   1714          
   1715            // Set the network layer permit join duration
   1716            stat = (byte) NLME_PermitJoiningRequest( duration );
   \   000037                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000037   A9..         MOV     R1,?V0
   \   000039   12....       LCALL   ??NLME_PermitJoiningRequest?relay; Banked call to: NLME_PermitJoiningRequest
   \   00003C   E9           MOV     A,R1
   \   00003D   C0E0         PUSH    A
   \   00003F   85..82       MOV     DPL,?XSP + 0
   \   000042   85..83       MOV     DPH,?XSP + 1
   \   000045   D0E0         POP     A
   \   000047   F0           MOVX    @DPTR,A
   1717          
   1718            // Handle the Trust Center Significance
   1719            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1720            {
   1721              if ( tcsig == TRUE )
   1722              {
   1723                ZDSecMgrPermitJoining( duration );
   1724              }
   1725            }
   1726          
   1727            // Send a response if unicast
   1728            if (inMsg->srcAddr.addr.shortAddr != NWK_BROADCAST_SHORTADDR)
   \   000048   8E82         MOV     DPL,R6
   \   00004A   8F83         MOV     DPH,R7
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   64FF         XRL     A,#0xff
   \   000051   7004         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_0
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   64FF         XRL     A,#0xff
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   000057   603A         JZ      ??ZDO_ProcessMgmtPermitJoinReq_1
   1729            {
   1730              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000059                ; Setup parameters for call to function ZDP_SendData
   \   000059   75..00       MOV     ?V2,#0x0
   \   00005C   78..         MOV     R0,#?V2
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000061   7401         MOV     A,#0x1
   \   000063   12....       LCALL   ?XSTACK_DISP100_8
   \   000066   88..         MOV     ?V2,R0
   \   000068   89..         MOV     ?V3,R1
   \   00006A   78..         MOV     R0,#?V2
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   75..36       MOV     ?V2,#0x36
   \   000072   75..80       MOV     ?V3,#-0x80
   \   000075   78..         MOV     R0,#?V2
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   7901         MOV     R1,#0x1
   \   00007C   EE           MOV     A,R6
   \   00007D   2402         ADD     A,#0x2
   \   00007F   FC           MOV     R4,A
   \   000080   E4           CLR     A
   \   000081   3F           ADDC    A,R7
   \   000082   FD           MOV     R5,A
   \   000083   EE           MOV     A,R6
   \   000084   240F         ADD     A,#0xf
   \   000086   FA           MOV     R2,A
   \   000087   E4           CLR     A
   \   000088   3F           ADDC    A,R7
   \   000089   FB           MOV     R3,A
   \   00008A   12....       LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
   \   00008D   7405         MOV     A,#0x5
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000092   E9           MOV     A,R1
   1731            }
   1732          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_1:
   \   000093   7401         MOV     A,#0x1
   \   000095   12....       LCALL   ?DEALLOC_XSTACK8
   \   000098   7F04         MOV     R7,#0x4
   \   00009A   02....       LJMP    ?BANKED_LEAVE_XDATA
   1733          
   1734          /*
   1735           * This function stub allows the next higher layer to be notified of
   1736           * a permit joining timeout.
   1737           */
   1738          /*********************************************************************
   1739           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1740           *
   1741           * @brief       This function stub allows the next higher layer to be
   1742           *              notified of a permit joining timeout. Currently, this
   1743           *              directly bypasses the APS layer.
   1744           *
   1745           * @param       none
   1746           *
   1747           * @return      none
   1748           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1749          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   1750          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1751            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   1752            // Currently, only the ZDSecMgr needs to be notified
   1753            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1754            {
   1755              ZDSecMgrPermitJoiningTimeout();
   1756            }
   1757            #endif
   1758          }
   \   000000   02....       LJMP    ?BRET
   1759          
   1760          /*********************************************************************
   1761           * @fn          ZDO_ProcessUserDescReq
   1762           *
   1763           * @brief       This function finishes the processing of the User
   1764           *              Descriptor Request and generates the response.
   1765           *
   1766           * @param       inMsg - incoming message (request)
   1767           *
   1768           * @return      none
   1769           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1770          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   1771          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1772            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000E   EE           MOV     A,R6
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F583         MOV     DPH,A
   \   00001D   8882         MOV     DPL,R0
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FA           MOV     R2,A
   \   000021   7B00         MOV     R3,#0x0
   \   000023   EE           MOV     A,R6
   \   000024   2413         ADD     A,#0x13
   \   000026   F582         MOV     DPL,A
   \   000028   E4           CLR     A
   \   000029   3F           ADDC    A,R7
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F583         MOV     DPH,A
   \   000032   8882         MOV     DPL,R0
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F8           MOV     R0,A
   \   000037   7900         MOV     R1,#0x0
   \   000039   E4           CLR     A
   \   00003A   C8           XCH     A,R0
   \   00003B   F9           MOV     R1,A
   \   00003C   EA           MOV     A,R2
   \   00003D   28           ADD     A,R0
   \   00003E   F5..         MOV     ?V0,A
   \   000040   EB           MOV     A,R3
   \   000041   39           ADDC    A,R1
   \   000042   F5..         MOV     ?V1,A
   1773            UserDescriptorFormat_t userDesc;
   1774          
   1775            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   1776                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \   000044   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000047   E0           MOVX    A,@DPTR
   \   000048   65..         XRL     A,?V0
   \   00004A   7004         JNZ     ??ZDO_ProcessUserDescReq_0
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   65..         XRL     A,?V1
   \                     ??ZDO_ProcessUserDescReq_0:
   \   000050   7062         JNZ     ??ZDO_ProcessUserDescReq_1
   \   000052                ; Setup parameters for call to function osal_nv_read
   \   000052   A8..         MOV     R0,?XSP + 0
   \   000054   A9..         MOV     R1,?XSP + 1
   \   000056   88..         MOV     ?V2,R0
   \   000058   89..         MOV     ?V3,R1
   \   00005A   78..         MOV     R0,#?V2
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   75..11       MOV     ?V2,#0x11
   \   000062   75..00       MOV     ?V3,#0x0
   \   000065   78..         MOV     R0,#?V2
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   7C00         MOV     R4,#0x0
   \   00006C   7D00         MOV     R5,#0x0
   \   00006E   7A81         MOV     R2,#-0x7f
   \   000070   7B00         MOV     R3,#0x0
   \   000072   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   000075   7404         MOV     A,#0x4
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007A   E9           MOV     A,R1
   \   00007B   7037         JNZ     ??ZDO_ProcessUserDescReq_1
   1777            {
   1778              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   00007D                ; Setup parameters for call to function ZDP_UserDescRsp
   \   00007D   75..00       MOV     ?V2,#0x0
   \   000080   78..         MOV     R0,#?V2
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000085   7401         MOV     A,#0x1
   \   000087   12....       LCALL   ?XSTACK_DISP100_8
   \   00008A   88..         MOV     ?V2,R0
   \   00008C   89..         MOV     ?V3,R1
   \   00008E   78..         MOV     R0,#?V2
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000093   AC..         MOV     R4,?V0
   \   000095   AD..         MOV     R5,?V1
   \   000097   EE           MOV     A,R6
   \   000098   2402         ADD     A,#0x2
   \   00009A   FA           MOV     R2,A
   \   00009B   E4           CLR     A
   \   00009C   3F           ADDC    A,R7
   \   00009D   FB           MOV     R3,A
   \   00009E   EE           MOV     A,R6
   \   00009F   240F         ADD     A,#0xf
   \   0000A1   F582         MOV     DPL,A
   \   0000A3   E4           CLR     A
   \   0000A4   3F           ADDC    A,R7
   \   0000A5   F583         MOV     DPH,A
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F9           MOV     R1,A
   \   0000A9   12....       LCALL   ??ZDP_UserDescRsp?relay; Banked call to: ZDP_UserDescRsp
   \   0000AC   7403         MOV     A,#0x3
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B1   E9           MOV     A,R1
   \   0000B2   8038         SJMP    ??ZDO_ProcessUserDescReq_2
   1779            }
   1780            else
   1781            {
   1782              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   1783                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   0000B4                ; Setup parameters for call to function ZDP_GenericRsp
   \   0000B4   75..11       MOV     ?V2,#0x11
   \   0000B7   75..80       MOV     ?V3,#-0x80
   \   0000BA   78..         MOV     R0,#?V2
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BF   78..         MOV     R0,#?V0
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C4   EE           MOV     A,R6
   \   0000C5   240E         ADD     A,#0xe
   \   0000C7   F582         MOV     DPL,A
   \   0000C9   E4           CLR     A
   \   0000CA   3F           ADDC    A,R7
   \   0000CB   F583         MOV     DPH,A
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   FD           MOV     R5,A
   \   0000CF   7C84         MOV     R4,#-0x7c
   \   0000D1   EE           MOV     A,R6
   \   0000D2   2402         ADD     A,#0x2
   \   0000D4   FA           MOV     R2,A
   \   0000D5   E4           CLR     A
   \   0000D6   3F           ADDC    A,R7
   \   0000D7   FB           MOV     R3,A
   \   0000D8   EE           MOV     A,R6
   \   0000D9   240F         ADD     A,#0xf
   \   0000DB   F582         MOV     DPL,A
   \   0000DD   E4           CLR     A
   \   0000DE   3F           ADDC    A,R7
   \   0000DF   F583         MOV     DPH,A
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F9           MOV     R1,A
   \   0000E3   12....       LCALL   ??ZDP_GenericRsp?relay; Banked call to: ZDP_GenericRsp
   \   0000E6   7404         MOV     A,#0x4
   \   0000E8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EB   E9           MOV     A,R1
   1784            }
   1785          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   0000EC   7411         MOV     A,#0x11
   \   0000EE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F1   7F04         MOV     R7,#0x4
   \   0000F3   02....       LJMP    ?BANKED_LEAVE_XDATA
   1786          
   1787          /*********************************************************************
   1788           * @fn          ZDO_ProcessUserDescSet
   1789           *
   1790           * @brief       This function finishes the processing of the User
   1791           *              Descriptor Set and generates the response.
   1792           *
   1793           * @param       inMsg - incoming message (request)
   1794           *
   1795           * @return      none
   1796           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1797          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   1798          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V6,R2
   \   00000C   8B..         MOV     ?V7,R3
   1799            uint8 *msg;
   1800            uint16 aoi;
   1801            UserDescriptorFormat_t userDesc;
   1802            uint8 outMsg[3];
   1803            uint8 status;
   1804          
   1805            msg = inMsg->asdu;
   \   00000E   E5..         MOV     A,?V6
   \   000010   2413         ADD     A,#0x13
   \   000012   F582         MOV     DPL,A
   \   000014   E4           CLR     A
   \   000015   35..         ADDC    A,?V7
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   88..         MOV     ?V4,R0
   \   000020   89..         MOV     ?V5,R1
   1806            aoi = BUILD_UINT16( msg[0], msg[1] );
   \   000022   85..82       MOV     DPL,?V4
   \   000025   85..83       MOV     DPH,?V5
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FA           MOV     R2,A
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   85..82       MOV     DPL,?V4
   \   00002F   85..83       MOV     DPH,?V5
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   7900         MOV     R1,#0x0
   \   000037   E4           CLR     A
   \   000038   C8           XCH     A,R0
   \   000039   F9           MOV     R1,A
   \   00003A   EA           MOV     A,R2
   \   00003B   28           ADD     A,R0
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   39           ADDC    A,R1
   \   00003F   F9           MOV     R1,A
   \   000040   E8           MOV     A,R0
   \   000041   FE           MOV     R6,A
   \   000042   E9           MOV     A,R1
   \   000043   FF           MOV     R7,A
   1807          
   1808            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000044   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6E           XRL     A,R6
   \   000049   7003         JNZ     ??ZDO_ProcessUserDescSet_0
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   6F           XRL     A,R7
   \                     ??ZDO_ProcessUserDescSet_0:
   \   00004E   6003         JZ      $+5
   \   000050   02....       LJMP    ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   1809            {
   1810              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   000053   85..82       MOV     DPL,?V4
   \   000056   85..83       MOV     DPH,?V5
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   C3           CLR     C
   \   00005D   9410         SUBB    A,#0x10
   \   00005F   5016         JNC     ??ZDO_ProcessUserDescSet_2
   \   000061   85..82       MOV     DPL,?V4
   \   000064   85..83       MOV     DPH,?V5
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   C0E0         PUSH    A
   \   00006C   85..82       MOV     DPL,?XSP + 0
   \   00006F   85..83       MOV     DPH,?XSP + 1
   \   000072   D0E0         POP     A
   \   000074   F0           MOVX    @DPTR,A
   \   000075   8009         SJMP    ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   000077   85..82       MOV     DPL,?XSP + 0
   \   00007A   85..83       MOV     DPH,?XSP + 1
   \   00007D   7410         MOV     A,#0x10
   \   00007F   F0           MOVX    @DPTR,A
   \                     ??ZDO_ProcessUserDescSet_3:
   \   000080   85..82       MOV     DPL,?XSP + 0
   \   000083   85..83       MOV     DPH,?XSP + 1
   \   000086   E0           MOVX    A,@DPTR
   \   000087   C0E0         PUSH    A
   \   000089   7404         MOV     A,#0x4
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   D0E0         POP     A
   \   000090   F0           MOVX    @DPTR,A
   1811              msg ++;  // increment one for the length field
   \   000091   85..82       MOV     DPL,?V4
   \   000094   85..83       MOV     DPH,?V5
   \   000097   A3           INC     DPTR
   \   000098   8582..       MOV     ?V4,DPL
   \   00009B   8583..       MOV     ?V5,DPH
   1812          
   1813              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \   00009E                ; Setup parameters for call to function osal_memcpy
   \   00009E   85..82       MOV     DPL,?V4
   \   0000A1   85..83       MOV     DPH,?V5
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A982         MOV     R1,DPL
   \   0000A8   AA83         MOV     R2,DPH
   \   0000AA   7B00         MOV     R3,#0x0
   \   0000AC   89..         MOV     ?V0,R1
   \   0000AE   8A..         MOV     ?V1,R2
   \   0000B0   8B..         MOV     ?V2,R3
   \   0000B2   78..         MOV     R0,#?V0
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B7   7407         MOV     A,#0x7
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   FC           MOV     R4,A
   \   0000BE   7D00         MOV     R5,#0x0
   \   0000C0   7408         MOV     A,#0x8
   \   0000C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C5   AA82         MOV     R2,DPL
   \   0000C7   AB83         MOV     R3,DPH
   \   0000C9   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000CC   7403         MOV     A,#0x3
   \   0000CE   12....       LCALL   ?DEALLOC_XSTACK8
   1814              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   0000D1                ; Setup parameters for call to function osal_nv_write
   \   0000D1   7404         MOV     A,#0x4
   \   0000D3   12....       LCALL   ?XSTACK_DISP100_8
   \   0000D6   88..         MOV     ?V0,R0
   \   0000D8   89..         MOV     ?V1,R1
   \   0000DA   78..         MOV     R0,#?V0
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DF   75..11       MOV     ?V0,#0x11
   \   0000E2   75..00       MOV     ?V1,#0x0
   \   0000E5   78..         MOV     R0,#?V0
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EA   7C00         MOV     R4,#0x0
   \   0000EC   7D00         MOV     R5,#0x0
   \   0000EE   7A81         MOV     R2,#-0x7f
   \   0000F0   7B00         MOV     R3,#0x0
   \   0000F2   12....       LCALL   ??osal_nv_write?relay; Banked call to: osal_nv_write
   \   0000F5   7404         MOV     A,#0x4
   \   0000F7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FA   E9           MOV     A,R1
   1815              if ( userDesc.len != 0 )
   \   0000FB   7404         MOV     A,#0x4
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   E0           MOVX    A,@DPTR
   \   000101   6009         JZ      ??ZDO_ProcessUserDescSet_4
   1816              {
   1817                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   000103   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000106   E0           MOVX    A,@DPTR
   \   000107   D2E4         SETB    0xE0 /* A   */.4
   \   000109   F0           MOVX    @DPTR,A
   \   00010A   8007         SJMP    ??ZDO_ProcessUserDescSet_5
   1818              }
   1819              else
   1820              {
   1821                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   00010C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   C2E4         CLR     0xE0 /* A   */.4
   \   000112   F0           MOVX    @DPTR,A
   1822              }
   1823          
   1824              status = ZDP_SUCCESS;
   \                     ??ZDO_ProcessUserDescSet_5:
   \   000113   75..00       MOV     ?V3,#0x0
   \   000116   8003         SJMP    ??ZDO_ProcessUserDescSet_6
   1825            }
   1826            else
   1827            {
   1828              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   000118   75..84       MOV     ?V3,#-0x7c
   1829            }
   1830          
   1831            outMsg[0] = status;
   \                     ??ZDO_ProcessUserDescSet_6:
   \   00011B   E5..         MOV     A,?V3
   \   00011D   C0E0         PUSH    A
   \   00011F   7401         MOV     A,#0x1
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   D0E0         POP     A
   \   000126   F0           MOVX    @DPTR,A
   1832            outMsg[1] = LO_UINT16( aoi );
   \   000127   EE           MOV     A,R6
   \   000128   C0E0         PUSH    A
   \   00012A   7402         MOV     A,#0x2
   \   00012C   12....       LCALL   ?XSTACK_DISP0_8
   \   00012F   D0E0         POP     A
   \   000131   F0           MOVX    @DPTR,A
   1833            outMsg[2] = LO_UINT16( aoi );
   \   000132   EE           MOV     A,R6
   \   000133   C0E0         PUSH    A
   \   000135   7403         MOV     A,#0x3
   \   000137   12....       LCALL   ?XSTACK_DISP0_8
   \   00013A   D0E0         POP     A
   \   00013C   F0           MOVX    @DPTR,A
   1834          
   1835            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   1836                         inMsg->SecurityUse );
   \   00013D                ; Setup parameters for call to function ZDP_SendData
   \   00013D   E5..         MOV     A,?V6
   \   00013F   240E         ADD     A,#0xe
   \   000141   F582         MOV     DPL,A
   \   000143   E4           CLR     A
   \   000144   35..         ADDC    A,?V7
   \   000146   F583         MOV     DPH,A
   \   000148   E0           MOVX    A,@DPTR
   \   000149   F5..         MOV     ?V0,A
   \   00014B   78..         MOV     R0,#?V0
   \   00014D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000150   7402         MOV     A,#0x2
   \   000152   12....       LCALL   ?XSTACK_DISP100_8
   \   000155   88..         MOV     ?V0,R0
   \   000157   89..         MOV     ?V1,R1
   \   000159   78..         MOV     R0,#?V0
   \   00015B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015E   75..14       MOV     ?V0,#0x14
   \   000161   75..80       MOV     ?V1,#-0x80
   \   000164   78..         MOV     R0,#?V0
   \   000166   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000169   7903         MOV     R1,#0x3
   \   00016B   E5..         MOV     A,?V6
   \   00016D   2402         ADD     A,#0x2
   \   00016F   FC           MOV     R4,A
   \   000170   E4           CLR     A
   \   000171   35..         ADDC    A,?V7
   \   000173   FD           MOV     R5,A
   \   000174   E5..         MOV     A,?V6
   \   000176   240F         ADD     A,#0xf
   \   000178   FA           MOV     R2,A
   \   000179   E4           CLR     A
   \   00017A   35..         ADDC    A,?V7
   \   00017C   FB           MOV     R3,A
   \   00017D   12....       LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
   \   000180   7405         MOV     A,#0x5
   \   000182   12....       LCALL   ?DEALLOC_XSTACK8
   \   000185   E9           MOV     A,R1
   1837          }
   \   000186   7415         MOV     A,#0x15
   \   000188   12....       LCALL   ?DEALLOC_XSTACK8
   \   00018B   7F08         MOV     R7,#0x8
   \   00018D   02....       LJMP    ?BANKED_LEAVE_XDATA
   1838          
   1839          /*********************************************************************
   1840           * @fn          ZDO_ProcessDeviceAnnce
   1841           *
   1842           * @brief       This function processes a device annouce message.
   1843           *
   1844           * @param       inMsg - incoming message
   1845           *
   1846           * @return      none
   1847           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1848          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessDeviceAnnce:
   1849          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1850            ZDO_DeviceAnnce_t Annce;
   1851            AddrMgrEntry_t addrEntry;
   1852            uint8 parentExt[Z_EXTADDR_LEN];
   1853          
   1854            // Parse incoming message
   1855            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \   00000E                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   AA..         MOV     R2,?V0
   \   000014   AB..         MOV     R3,?V1
   \   000016   12....       LCALL   ??ZDO_ParseDeviceAnnce?relay; Banked call to: ZDO_ParseDeviceAnnce
   1856          
   1857            if ( ZSTACK_END_DEVICE_BUILD )
   \   000019   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6402         XRL     A,#0x2
   \   00001F   7037         JNZ     ??ZDO_ProcessDeviceAnnce_0
   1858            {
   1859              // Make sure the message didn't come from myself - end device only
   1860              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   \   000021                ; Setup parameters for call to function NLME_GetExtAddr
   \   000021   12....       LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
   \   000024   8A..         MOV     ?V2,R2
   \   000026   8B..         MOV     ?V3,R3
   \   000028   AA..         MOV     R2,?V2
   \   00002A   AB..         MOV     R3,?V3
   \   00002C                ; Setup parameters for call to function sAddrExtCmp
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   AC82         MOV     R4,DPL
   \   000033   AD83         MOV     R5,DPH
   \   000035   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   000038   E9           MOV     A,R1
   \   000039   601D         JZ      ??ZDO_ProcessDeviceAnnce_0
   \   00003B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00003B   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   00003E   8A..         MOV     ?V2,R2
   \   000040   8B..         MOV     ?V3,R3
   \   000042   A8..         MOV     R0,?V2
   \   000044   A9..         MOV     R1,?V3
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   68           XRL     A,R0
   \   00004E   7003         JNZ     ??ZDO_ProcessDeviceAnnce_1
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_1:
   \   000053   7003         JNZ     $+5
   \   000055   02....       LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   1861              {
   1862                return;
   1863              }
   1864            }
   1865          
   1866          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1867            // Clean up the neighbor table
   1868            nwkNeighborRemoveAllStranded();
   \                     ??ZDO_ProcessDeviceAnnce_0:
   \   000058                ; Setup parameters for call to function nwkNeighborRemoveAllStranded
   \   000058   12....       LCALL   ??nwkNeighborRemoveAllStranded?relay; Banked call to: nwkNeighborRemoveAllStranded
   1869          
   1870            // If address conflict is detected, no need to update the address manager
   1871            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   \   00005B                ; Setup parameters for call to function NLME_CheckNewAddrSet
   \   00005B   7402         MOV     A,#0x2
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   AC82         MOV     R4,DPL
   \   000062   AD83         MOV     R5,DPH
   \   000064   85..82       MOV     DPL,?XSP + 0
   \   000067   85..83       MOV     DPH,?XSP + 1
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   FA           MOV     R2,A
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   FB           MOV     R3,A
   \   00006F   12....       LCALL   ??NLME_CheckNewAddrSet?relay; Banked call to: NLME_CheckNewAddrSet
   \   000072   E9           MOV     A,R1
   \   000073   6401         XRL     A,#0x1
   \   000075   7003         JNZ     $+5
   \   000077   02....       LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   1872            {
   1873              return;
   1874            }
   1875          #endif
   1876          
   1877          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1878            // Check for parent's address
   1879            NLME_GetCoordExtAddr( parentExt );
   \   00007A                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   00007A   740B         MOV     A,#0xb
   \   00007C   12....       LCALL   ?XSTACK_DISP101_8
   \   00007F   12....       LCALL   ??NLME_GetCoordExtAddr?relay; Banked call to: NLME_GetCoordExtAddr
   1880            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   \   000082                ; Setup parameters for call to function sAddrExtCmp
   \   000082   7402         MOV     A,#0x2
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   AC82         MOV     R4,DPL
   \   000089   AD83         MOV     R5,DPH
   \   00008B   740B         MOV     A,#0xb
   \   00008D   12....       LCALL   ?XSTACK_DISP101_8
   \   000090   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   000093   E9           MOV     A,R1
   \   000094   6037         JZ      ??ZDO_ProcessDeviceAnnce_3
   1881            {
   1882              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   \   000096                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000096   12....       LCALL   ??NLME_GetCoordShortAddr?relay; Banked call to: NLME_GetCoordShortAddr
   \   000099   8A..         MOV     ?V2,R2
   \   00009B   8B..         MOV     ?V3,R3
   \   00009D   A8..         MOV     R0,?V2
   \   00009F   A9..         MOV     R1,?V3
   \   0000A1   85..82       MOV     DPL,?XSP + 0
   \   0000A4   85..83       MOV     DPH,?XSP + 1
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   68           XRL     A,R0
   \   0000A9   7003         JNZ     ??ZDO_ProcessDeviceAnnce_4
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_4:
   \   0000AE   601D         JZ      ??ZDO_ProcessDeviceAnnce_3
   1883              {
   1884                // Set the Parent's MAC's new short address
   1885                _NIB.nwkCoordAddress = Annce.nwkAddr;
   \   0000B0   85..82       MOV     DPL,?XSP + 0
   \   0000B3   85..83       MOV     DPH,?XSP + 1
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   F8           MOV     R0,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   F9           MOV     R1,A
   \   0000BB   90....       MOV     DPTR,#_NIB + 23
   \   0000BE   E8           MOV     A,R0
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   E9           MOV     A,R1
   \   0000C2   F0           MOVX    @DPTR,A
   1886                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   \   0000C3                ; Setup parameters for call to function ZMacSetReq
   \   0000C3   7A..         MOV     R2,#(_NIB + 23) & 0xff
   \   0000C5   7B..         MOV     R3,#((_NIB + 23) >> 8) & 0xff
   \   0000C7   794B         MOV     R1,#0x4b
   \   0000C9   12....       LCALL   ??ZMacSetReq?relay   ; Banked call to: ZMacSetReq
   \   0000CC   E9           MOV     A,R1
   1887              }
   1888            }
   1889          
   1890            if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDO_ProcessDeviceAnnce_3:
   \   0000CD   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   600B         JZ      ??ZDO_ProcessDeviceAnnce_5
   \   0000D3   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   6401         XRL     A,#0x1
   \   0000D9   6003         JZ      $+5
   \   0000DB   02....       LJMP    ??ZDO_ProcessDeviceAnnce_6 & 0xFFFF
   1891            {
   1892              // If the device annce comes from a end device child that has moved
   1893              // to another parent, remove it from associated device list
   1894          
   1895              // If the dev annce is coming from other device's children,
   1896              // (The dev annce from its own children shall be unicast to itself,
   1897              // So check the mac destination address)
   1898              // Remove it from the associated device list. If it is not
   1899              // a child, no action will be taken in AssocRemove() anyway.
   1900              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   \                     ??ZDO_ProcessDeviceAnnce_5:
   \   0000DE                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000DE   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   0000E1   8A..         MOV     ?V2,R2
   \   0000E3   8B..         MOV     ?V3,R3
   \   0000E5   A8..         MOV     R0,?V2
   \   0000E7   A9..         MOV     R1,?V3
   \   0000E9   E5..         MOV     A,?V0
   \   0000EB   2411         ADD     A,#0x11
   \   0000ED   F582         MOV     DPL,A
   \   0000EF   E4           CLR     A
   \   0000F0   35..         ADDC    A,?V1
   \   0000F2   F583         MOV     DPH,A
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   68           XRL     A,R0
   \   0000F6   7003         JNZ     ??ZDO_ProcessDeviceAnnce_7
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_7:
   \   0000FB   603F         JZ      ??ZDO_ProcessDeviceAnnce_8
   1901              {
   1902                associated_devices_t *dev_ptr;
   1903          
   1904                // If it's an end device child
   1905                dev_ptr = AssocGetWithExt( Annce.extAddr );
   \   0000FD                ; Setup parameters for call to function AssocGetWithExt
   \   0000FD   7402         MOV     A,#0x2
   \   0000FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000102   AA82         MOV     R2,DPL
   \   000104   AB83         MOV     R3,DPH
   \   000106   12....       LCALL   ??AssocGetWithExt?relay; Banked call to: AssocGetWithExt
   \   000109   8A..         MOV     ?V2,R2
   \   00010B   8B..         MOV     ?V3,R3
   \   00010D   AE..         MOV     R6,?V2
   \   00010F   AF..         MOV     R7,?V3
   1906                if ( dev_ptr )
   \   000111   EE           MOV     A,R6
   \   000112   4F           ORL     A,R7
   \   000113   6027         JZ      ??ZDO_ProcessDeviceAnnce_8
   1907                {
   1908                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   1909                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   \   000115   8E82         MOV     DPL,R6
   \   000117   8F83         MOV     DPH,R7
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   6401         XRL     A,#0x1
   \   000120   600D         JZ      ??ZDO_ProcessDeviceAnnce_9
   \   000122   8E82         MOV     DPL,R6
   \   000124   8F83         MOV     DPH,R7
   \   000126   A3           INC     DPTR
   \   000127   A3           INC     DPTR
   \   000128   A3           INC     DPTR
   \   000129   A3           INC     DPTR
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   6402         XRL     A,#0x2
   \   00012D   700D         JNZ     ??ZDO_ProcessDeviceAnnce_8
   1910                  {
   1911                    AssocRemove( Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_9:
   \   00012F                ; Setup parameters for call to function AssocRemove
   \   00012F   7402         MOV     A,#0x2
   \   000131   12....       LCALL   ?XSTACK_DISP0_8
   \   000134   AA82         MOV     R2,DPL
   \   000136   AB83         MOV     R3,DPH
   \   000138   12....       LCALL   ??AssocRemove?relay  ; Banked call to: AssocRemove
   \   00013B   E9           MOV     A,R1
   1912                  }
   1913                }
   1914              }
   1915          
   1916              if ( Annce.nwkAddr != NLME_GetShortAddr() )
   \                     ??ZDO_ProcessDeviceAnnce_8:
   \   00013C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00013C   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   00013F   8A..         MOV     ?V2,R2
   \   000141   8B..         MOV     ?V3,R3
   \   000143   A8..         MOV     R0,?V2
   \   000145   A9..         MOV     R1,?V3
   \   000147   85..82       MOV     DPL,?XSP + 0
   \   00014A   85..83       MOV     DPH,?XSP + 1
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   68           XRL     A,R0
   \   00014F   7003         JNZ     ??ZDO_ProcessDeviceAnnce_10
   \   000151   A3           INC     DPTR
   \   000152   E0           MOVX    A,@DPTR
   \   000153   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_10:
   \   000154   6034         JZ      ??ZDO_ProcessDeviceAnnce_6
   1917              {
   1918                // If an associated device is found with matched extended Address,
   1919                // update its short address
   1920                if ( AssocChangeNwkAddr( Annce.nwkAddr, Annce.extAddr ) )
   \   000156                ; Setup parameters for call to function AssocChangeNwkAddr
   \   000156   7402         MOV     A,#0x2
   \   000158   12....       LCALL   ?XSTACK_DISP0_8
   \   00015B   AC82         MOV     R4,DPL
   \   00015D   AD83         MOV     R5,DPH
   \   00015F   85..82       MOV     DPL,?XSP + 0
   \   000162   85..83       MOV     DPH,?XSP + 1
   \   000165   E0           MOVX    A,@DPTR
   \   000166   FA           MOV     R2,A
   \   000167   A3           INC     DPTR
   \   000168   E0           MOVX    A,@DPTR
   \   000169   FB           MOV     R3,A
   \   00016A   12....       LCALL   ??AssocChangeNwkAddr?relay; Banked call to: AssocChangeNwkAddr
   \   00016D   E9           MOV     A,R1
   \   00016E   601A         JZ      ??ZDO_ProcessDeviceAnnce_6
   1921                {
   1922                  // Update the neighbor table
   1923                  nwkNeighborUpdateNwkAddr( Annce.nwkAddr, Annce.extAddr );
   \   000170                ; Setup parameters for call to function nwkNeighborUpdateNwkAddr
   \   000170   7402         MOV     A,#0x2
   \   000172   12....       LCALL   ?XSTACK_DISP0_8
   \   000175   AC82         MOV     R4,DPL
   \   000177   AD83         MOV     R5,DPH
   \   000179   85..82       MOV     DPL,?XSP + 0
   \   00017C   85..83       MOV     DPH,?XSP + 1
   \   00017F   E0           MOVX    A,@DPTR
   \   000180   FA           MOV     R2,A
   \   000181   A3           INC     DPTR
   \   000182   E0           MOVX    A,@DPTR
   \   000183   FB           MOV     R3,A
   \   000184   12....       LCALL   ??nwkNeighborUpdateNwkAddr?relay; Banked call to: nwkNeighborUpdateNwkAddr
   1924          
   1925                  // Set event to save NV
   1926                  ZDApp_NVUpdate();
   \   000187                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000187   12....       LCALL   ??ZDApp_NVUpdate?relay; Banked call to: ZDApp_NVUpdate
   1927                }
   1928              }
   1929            }
   1930            
   1931            // Assume that the device has moved, remove existing routing entries
   1932            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   \                     ??ZDO_ProcessDeviceAnnce_6:
   \   00018A                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   00018A   7900         MOV     R1,#0x0
   \   00018C   85..82       MOV     DPL,?XSP + 0
   \   00018F   85..83       MOV     DPH,?XSP + 1
   \   000192   E0           MOVX    A,@DPTR
   \   000193   FA           MOV     R2,A
   \   000194   A3           INC     DPTR
   \   000195   E0           MOVX    A,@DPTR
   \   000196   FB           MOV     R3,A
   \   000197   12....       LCALL   ??RTG_RemoveRtgEntry?relay; Banked call to: RTG_RemoveRtgEntry
   \   00019A   E9           MOV     A,R1
   1933            
   1934          #endif // ZIGBEE_STOCHASTIC_ADDRESSING
   1935          
   1936          
   1937            // Fill in the extended address in address manager if we don't have it already.
   1938            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   00019B   7413         MOV     A,#0x13
   \   00019D   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A0   7400         MOV     A,#0x0
   \   0001A2   F0           MOVX    @DPTR,A
   1939            addrEntry.nwkAddr = Annce.nwkAddr;
   \   0001A3   85..82       MOV     DPL,?XSP + 0
   \   0001A6   85..83       MOV     DPH,?XSP + 1
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   F8           MOV     R0,A
   \   0001AB   A3           INC     DPTR
   \   0001AC   E0           MOVX    A,@DPTR
   \   0001AD   F9           MOV     R1,A
   \   0001AE   7414         MOV     A,#0x14
   \   0001B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B3   E8           MOV     A,R0
   \   0001B4   F0           MOVX    @DPTR,A
   \   0001B5   A3           INC     DPTR
   \   0001B6   E9           MOV     A,R1
   \   0001B7   F0           MOVX    @DPTR,A
   1940            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \   0001B8                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   0001B8   7413         MOV     A,#0x13
   \   0001BA   12....       LCALL   ?XSTACK_DISP101_8
   \   0001BD   12....       LCALL   ??AddrMgrEntryLookupNwk?relay; Banked call to: AddrMgrEntryLookupNwk
   \   0001C0   E9           MOV     A,R1
   \   0001C1   6040         JZ      ??ZDO_ProcessDeviceAnnce_2
   1941            {
   1942              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   0001C3                ; Setup parameters for call to function osal_memset
   \   0001C3   7C08         MOV     R4,#0x8
   \   0001C5   7D00         MOV     R5,#0x0
   \   0001C7   7900         MOV     R1,#0x0
   \   0001C9   740B         MOV     A,#0xb
   \   0001CB   12....       LCALL   ?XSTACK_DISP101_8
   \   0001CE   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   1943              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   0001D1                ; Setup parameters for call to function sAddrExtCmp
   \   0001D1   7416         MOV     A,#0x16
   \   0001D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D6   AC82         MOV     R4,DPL
   \   0001D8   AD83         MOV     R5,DPH
   \   0001DA   740B         MOV     A,#0xb
   \   0001DC   12....       LCALL   ?XSTACK_DISP101_8
   \   0001DF   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   0001E2   E9           MOV     A,R1
   \   0001E3   601E         JZ      ??ZDO_ProcessDeviceAnnce_2
   1944              {
   1945                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   0001E5                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   0001E5   7402         MOV     A,#0x2
   \   0001E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EA   AC82         MOV     R4,DPL
   \   0001EC   AD83         MOV     R5,DPH
   \   0001EE   7416         MOV     A,#0x16
   \   0001F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F3   AA82         MOV     R2,DPL
   \   0001F5   AB83         MOV     R3,DPH
   \   0001F7   12....       LCALL   ??AddrMgrExtAddrSet?relay; Banked call to: AddrMgrExtAddrSet
   1946                AddrMgrEntryUpdate( &addrEntry );
   \   0001FA                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   0001FA   7413         MOV     A,#0x13
   \   0001FC   12....       LCALL   ?XSTACK_DISP101_8
   \   0001FF   12....       LCALL   ??AddrMgrEntryUpdate?relay; Banked call to: AddrMgrEntryUpdate
   \   000202   E9           MOV     A,R1
   1947              }
   1948            }
   1949          }
   \                     ??ZDO_ProcessDeviceAnnce_2:
   \   000203   7420         MOV     A,#0x20
   \   000205   12....       LCALL   ?DEALLOC_XSTACK8
   \   000208   7F04         MOV     R7,#0x4
   \   00020A   02....       LJMP    ?BANKED_LEAVE_XDATA
   1950          
   1951          /*********************************************************************
   1952           * @fn          ZDO_BuildSimpleDescBuf
   1953           *
   1954           * @brief       Build a byte sequence representation of a Simple Descriptor.
   1955           *
   1956           * @param       buf  - pointer to a byte array big enough for data.
   1957           * @param       desc - SimpleDescriptionFormat_t *
   1958           *
   1959           * @return      none
   1960           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1961          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   1962          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   1963            byte cnt;
   1964            uint16 *ptr;
   1965          
   1966            *buf++ = desc->EndPoint;
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   C0E0         PUSH    A
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   \   000014   D0E0         POP     A
   \   000016   F0           MOVX    @DPTR,A
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   A3           INC     DPTR
   \   00001C   AA82         MOV     R2,DPL
   \   00001E   AB83         MOV     R3,DPH
   1967            *buf++ = HI_UINT16( desc->AppProfId );
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V1,A
   \   00002C   E4           CLR     A
   \   00002D   C5..         XCH     A,?V1
   \   00002F   F5..         MOV     ?V0,A
   \   000031   E5..         MOV     A,?V0
   \   000033   C0E0         PUSH    A
   \   000035   8A82         MOV     DPL,R2
   \   000037   8B83         MOV     DPH,R3
   \   000039   D0E0         POP     A
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   A3           INC     DPTR
   \   000041   AA82         MOV     R2,DPL
   \   000043   AB83         MOV     R3,DPH
   1968            *buf++ = LO_UINT16( desc->AppProfId );
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F5..         MOV     ?V0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F5..         MOV     ?V1,A
   \   000051   E5..         MOV     A,?V0
   \   000053   C0E0         PUSH    A
   \   000055   8A82         MOV     DPL,R2
   \   000057   8B83         MOV     DPH,R3
   \   000059   D0E0         POP     A
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   8A82         MOV     DPL,R2
   \   00005E   8B83         MOV     DPH,R3
   \   000060   A3           INC     DPTR
   \   000061   AA82         MOV     R2,DPL
   \   000063   AB83         MOV     R3,DPH
   1969            *buf++ = HI_UINT16( desc->AppDeviceId );
   \   000065   8E82         MOV     DPL,R6
   \   000067   8F83         MOV     DPH,R7
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F5..         MOV     ?V0,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F5..         MOV     ?V1,A
   \   000073   E4           CLR     A
   \   000074   C5..         XCH     A,?V1
   \   000076   F5..         MOV     ?V0,A
   \   000078   E5..         MOV     A,?V0
   \   00007A   C0E0         PUSH    A
   \   00007C   8A82         MOV     DPL,R2
   \   00007E   8B83         MOV     DPH,R3
   \   000080   D0E0         POP     A
   \   000082   F0           MOVX    @DPTR,A
   \   000083   8A82         MOV     DPL,R2
   \   000085   8B83         MOV     DPH,R3
   \   000087   A3           INC     DPTR
   \   000088   AA82         MOV     R2,DPL
   \   00008A   AB83         MOV     R3,DPH
   1970            *buf++ = LO_UINT16( desc->AppDeviceId );
   \   00008C   8E82         MOV     DPL,R6
   \   00008E   8F83         MOV     DPH,R7
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F5..         MOV     ?V0,A
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F5..         MOV     ?V1,A
   \   00009A   E5..         MOV     A,?V0
   \   00009C   C0E0         PUSH    A
   \   00009E   8A82         MOV     DPL,R2
   \   0000A0   8B83         MOV     DPH,R3
   \   0000A2   D0E0         POP     A
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   8A82         MOV     DPL,R2
   \   0000A7   8B83         MOV     DPH,R3
   \   0000A9   A3           INC     DPTR
   \   0000AA   AA82         MOV     R2,DPL
   \   0000AC   AB83         MOV     R3,DPH
   1971          
   1972            *buf++ = (byte)(desc->AppDevVer << 4);
   \   0000AE   8E82         MOV     DPL,R6
   \   0000B0   8F83         MOV     DPH,R7
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   C4           SWAP    A
   \   0000B9   54F0         ANL     A,#0xf0
   \   0000BB   C0E0         PUSH    A
   \   0000BD   8A82         MOV     DPL,R2
   \   0000BF   8B83         MOV     DPH,R3
   \   0000C1   D0E0         POP     A
   \   0000C3   F0           MOVX    @DPTR,A
   \   0000C4   8A82         MOV     DPL,R2
   \   0000C6   8B83         MOV     DPH,R3
   \   0000C8   A3           INC     DPTR
   \   0000C9   AA82         MOV     R2,DPL
   \   0000CB   AB83         MOV     R3,DPH
   1973          
   1974            *buf++ = desc->AppNumInClusters;
   \   0000CD   8E82         MOV     DPL,R6
   \   0000CF   8F83         MOV     DPH,R7
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   C0E0         PUSH    A
   \   0000DA   8A82         MOV     DPL,R2
   \   0000DC   8B83         MOV     DPH,R3
   \   0000DE   D0E0         POP     A
   \   0000E0   F0           MOVX    @DPTR,A
   \   0000E1   8A82         MOV     DPL,R2
   \   0000E3   8B83         MOV     DPH,R3
   \   0000E5   A3           INC     DPTR
   \   0000E6   AA82         MOV     R2,DPL
   \   0000E8   AB83         MOV     R3,DPH
   1975            ptr = desc->pAppInClusterList;
   \   0000EA   8E82         MOV     DPL,R6
   \   0000EC   8F83         MOV     DPH,R7
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   F5..         MOV     ?V0,A
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F5..         MOV     ?V1,A
   \   0000FC   AC..         MOV     R4,?V0
   \   0000FE   AD..         MOV     R5,?V1
   1976            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \   000100   7800         MOV     R0,#0x0
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   000102   8E82         MOV     DPL,R6
   \   000104   8F83         MOV     DPH,R7
   \   000106   A3           INC     DPTR
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   F9           MOV     R1,A
   \   00010E   E8           MOV     A,R0
   \   00010F   C3           CLR     C
   \   000110   99           SUBB    A,R1
   \   000111   504D         JNC     ??ZDO_BuildSimpleDescBuf_1
   1977            {
   1978              *buf++ = HI_UINT16( *ptr );
   \   000113   8C82         MOV     DPL,R4
   \   000115   8D83         MOV     DPH,R5
   \   000117   E0           MOVX    A,@DPTR
   \   000118   F5..         MOV     ?V0,A
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   F5..         MOV     ?V1,A
   \   00011E   E4           CLR     A
   \   00011F   C5..         XCH     A,?V1
   \   000121   F5..         MOV     ?V0,A
   \   000123   E5..         MOV     A,?V0
   \   000125   C0E0         PUSH    A
   \   000127   8A82         MOV     DPL,R2
   \   000129   8B83         MOV     DPH,R3
   \   00012B   D0E0         POP     A
   \   00012D   F0           MOVX    @DPTR,A
   \   00012E   8A82         MOV     DPL,R2
   \   000130   8B83         MOV     DPH,R3
   \   000132   A3           INC     DPTR
   \   000133   AA82         MOV     R2,DPL
   \   000135   AB83         MOV     R3,DPH
   1979              *buf++ = LO_UINT16( *ptr );
   \   000137   8C82         MOV     DPL,R4
   \   000139   8D83         MOV     DPH,R5
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   F5..         MOV     ?V0,A
   \   00013E   A3           INC     DPTR
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   F5..         MOV     ?V1,A
   \   000142   E5..         MOV     A,?V0
   \   000144   C0E0         PUSH    A
   \   000146   8A82         MOV     DPL,R2
   \   000148   8B83         MOV     DPH,R3
   \   00014A   D0E0         POP     A
   \   00014C   F0           MOVX    @DPTR,A
   \   00014D   8A82         MOV     DPL,R2
   \   00014F   8B83         MOV     DPH,R3
   \   000151   A3           INC     DPTR
   \   000152   AA82         MOV     R2,DPL
   \   000154   AB83         MOV     R3,DPH
   1980            }
   \   000156   EC           MOV     A,R4
   \   000157   2402         ADD     A,#0x2
   \   000159   FC           MOV     R4,A
   \   00015A   5001         JNC     ??ZDO_BuildSimpleDescBuf_2
   \   00015C   0D           INC     R5
   \                     ??ZDO_BuildSimpleDescBuf_2:
   \   00015D   08           INC     R0
   \   00015E   80A2         SJMP    ??ZDO_BuildSimpleDescBuf_0
   1981          
   1982            *buf++ = desc->AppNumOutClusters;
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   000160   8E82         MOV     DPL,R6
   \   000162   8F83         MOV     DPH,R7
   \   000164   A3           INC     DPTR
   \   000165   A3           INC     DPTR
   \   000166   A3           INC     DPTR
   \   000167   A3           INC     DPTR
   \   000168   A3           INC     DPTR
   \   000169   A3           INC     DPTR
   \   00016A   A3           INC     DPTR
   \   00016B   A3           INC     DPTR
   \   00016C   A3           INC     DPTR
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   C0E0         PUSH    A
   \   000170   8A82         MOV     DPL,R2
   \   000172   8B83         MOV     DPH,R3
   \   000174   D0E0         POP     A
   \   000176   F0           MOVX    @DPTR,A
   \   000177   8A82         MOV     DPL,R2
   \   000179   8B83         MOV     DPH,R3
   \   00017B   A3           INC     DPTR
   \   00017C   AA82         MOV     R2,DPL
   \   00017E   AB83         MOV     R3,DPH
   1983            ptr = desc->pAppOutClusterList;
   \   000180   8E82         MOV     DPL,R6
   \   000182   8F83         MOV     DPH,R7
   \   000184   A3           INC     DPTR
   \   000185   A3           INC     DPTR
   \   000186   A3           INC     DPTR
   \   000187   A3           INC     DPTR
   \   000188   A3           INC     DPTR
   \   000189   A3           INC     DPTR
   \   00018A   A3           INC     DPTR
   \   00018B   A3           INC     DPTR
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   F5..         MOV     ?V0,A
   \   000191   A3           INC     DPTR
   \   000192   E0           MOVX    A,@DPTR
   \   000193   F5..         MOV     ?V1,A
   \   000195   AC..         MOV     R4,?V0
   \   000197   AD..         MOV     R5,?V1
   1984            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \   000199   7800         MOV     R0,#0x0
   \                     ??ZDO_BuildSimpleDescBuf_3:
   \   00019B   8E82         MOV     DPL,R6
   \   00019D   8F83         MOV     DPH,R7
   \   00019F   A3           INC     DPTR
   \   0001A0   A3           INC     DPTR
   \   0001A1   A3           INC     DPTR
   \   0001A2   A3           INC     DPTR
   \   0001A3   A3           INC     DPTR
   \   0001A4   A3           INC     DPTR
   \   0001A5   A3           INC     DPTR
   \   0001A6   A3           INC     DPTR
   \   0001A7   A3           INC     DPTR
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   F9           MOV     R1,A
   \   0001AA   E8           MOV     A,R0
   \   0001AB   C3           CLR     C
   \   0001AC   99           SUBB    A,R1
   \   0001AD   504D         JNC     ??ZDO_BuildSimpleDescBuf_4
   1985            {
   1986              *buf++ = HI_UINT16( *ptr );
   \   0001AF   8C82         MOV     DPL,R4
   \   0001B1   8D83         MOV     DPH,R5
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   F5..         MOV     ?V0,A
   \   0001B6   A3           INC     DPTR
   \   0001B7   E0           MOVX    A,@DPTR
   \   0001B8   F5..         MOV     ?V1,A
   \   0001BA   E4           CLR     A
   \   0001BB   C5..         XCH     A,?V1
   \   0001BD   F5..         MOV     ?V0,A
   \   0001BF   E5..         MOV     A,?V0
   \   0001C1   C0E0         PUSH    A
   \   0001C3   8A82         MOV     DPL,R2
   \   0001C5   8B83         MOV     DPH,R3
   \   0001C7   D0E0         POP     A
   \   0001C9   F0           MOVX    @DPTR,A
   \   0001CA   8A82         MOV     DPL,R2
   \   0001CC   8B83         MOV     DPH,R3
   \   0001CE   A3           INC     DPTR
   \   0001CF   AA82         MOV     R2,DPL
   \   0001D1   AB83         MOV     R3,DPH
   1987              *buf++ = LO_UINT16( *ptr );
   \   0001D3   8C82         MOV     DPL,R4
   \   0001D5   8D83         MOV     DPH,R5
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   F5..         MOV     ?V0,A
   \   0001DA   A3           INC     DPTR
   \   0001DB   E0           MOVX    A,@DPTR
   \   0001DC   F5..         MOV     ?V1,A
   \   0001DE   E5..         MOV     A,?V0
   \   0001E0   C0E0         PUSH    A
   \   0001E2   8A82         MOV     DPL,R2
   \   0001E4   8B83         MOV     DPH,R3
   \   0001E6   D0E0         POP     A
   \   0001E8   F0           MOVX    @DPTR,A
   \   0001E9   8A82         MOV     DPL,R2
   \   0001EB   8B83         MOV     DPH,R3
   \   0001ED   A3           INC     DPTR
   \   0001EE   AA82         MOV     R2,DPL
   \   0001F0   AB83         MOV     R3,DPH
   1988            }
   \   0001F2   EC           MOV     A,R4
   \   0001F3   2402         ADD     A,#0x2
   \   0001F5   FC           MOV     R4,A
   \   0001F6   5001         JNC     ??ZDO_BuildSimpleDescBuf_5
   \   0001F8   0D           INC     R5
   \                     ??ZDO_BuildSimpleDescBuf_5:
   \   0001F9   08           INC     R0
   \   0001FA   809F         SJMP    ??ZDO_BuildSimpleDescBuf_3
   1989          }
   \                     ??ZDO_BuildSimpleDescBuf_4:
   \   0001FC   7F02         MOV     R7,#0x2
   \   0001FE   02....       LJMP    ?BANKED_LEAVE_XDATA
   1990          
   1991          /*********************************************************************
   1992           * @fn      ZDO_MatchEndDeviceBind()
   1993           *
   1994           * @brief
   1995           *
   1996           *   Called to match end device binding requests
   1997           *
   1998           * @param  bindReq  - binding request information
   1999           * @param  SecurityUse - Security enable/disable
   2000           *
   2001           * @return  none
   2002           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2003          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   \                     ZDO_MatchEndDeviceBind:
   2004          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   2005            zAddrType_t dstAddr;
   2006            uint8 sendRsp = FALSE;
   \   00000E   7E00         MOV     R6,#0x0
   2007            uint8 status;
   2008          
   2009            // Is this the first request?
   2010            if ( matchED == NULL )
   \   000010   90....       MOV     DPTR,#matchED
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   E8           MOV     A,R0
   \   000019   49           ORL     A,R1
   \   00001A   6003         JZ      $+5
   \   00001C   02....       LJMP    ??ZDO_MatchEndDeviceBind_0 & 0xFFFF
   2011            {
   2012              // Create match info structure
   2013              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   7A37         MOV     R2,#0x37
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000026   90....       MOV     DPTR,#matchED
   \   000029   EA           MOV     A,R2
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   EB           MOV     A,R3
   \   00002D   F0           MOVX    @DPTR,A
   2014              if ( matchED )
   \   00002E   90....       MOV     DPTR,#matchED
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   E8           MOV     A,R0
   \   000037   49           ORL     A,R1
   \   000038   6030         JZ      ??ZDO_MatchEndDeviceBind_1
   2015              {
   2016                // Clear the structure
   2017                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   \   00003A                ; Setup parameters for call to function osal_memset
   \   00003A   7C37         MOV     R4,#0x37
   \   00003C   7D00         MOV     R5,#0x0
   \   00003E   7900         MOV     R1,#0x0
   \   000040   90....       MOV     DPTR,#matchED
   \   000043   E0           MOVX    A,@DPTR
   \   000044   FA           MOV     R2,A
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   FB           MOV     R3,A
   \   000048   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   2018          
   2019                // Copy the first request's information
   2020                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   \   00004B                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   00004B   AC..         MOV     R4,?V4
   \   00004D   AD..         MOV     R5,?V5
   \   00004F   90....       MOV     DPTR,#matchED
   \   000052   E0           MOVX    A,@DPTR
   \   000053   FA           MOV     R2,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   FB           MOV     R3,A
   \   000057   12....       LCALL   ??ZDO_CopyMatchInfo?relay; Banked call to: ZDO_CopyMatchInfo
   \   00005A   E9           MOV     A,R1
   \   00005B   7018         JNZ     ??ZDO_MatchEndDeviceBind_2
   2021                {
   2022          
   2023                  status = ZDP_NO_ENTRY;
   \   00005D   85..82       MOV     DPL,?XSP + 0
   \   000060   85..83       MOV     DPH,?XSP + 1
   \   000063   7488         MOV     A,#-0x78
   \   000065   F0           MOVX    @DPTR,A
   2024                  sendRsp = TRUE;
   \   000066   7E01         MOV     R6,#0x1
   \   000068   800B         SJMP    ??ZDO_MatchEndDeviceBind_2
   2025                }
   2026              }
   2027              else
   2028              {
   2029                status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_1:
   \   00006A   85..82       MOV     DPL,?XSP + 0
   \   00006D   85..83       MOV     DPH,?XSP + 1
   \   000070   7488         MOV     A,#-0x78
   \   000072   F0           MOVX    @DPTR,A
   2030                sendRsp = TRUE;
   \   000073   7E01         MOV     R6,#0x1
   2031              }
   2032          
   2033              if ( !sendRsp )
   \                     ??ZDO_MatchEndDeviceBind_2:
   \   000075   EE           MOV     A,R6
   \   000076   6003         JZ      $+5
   \   000078   02....       LJMP    ??ZDO_MatchEndDeviceBind_3 & 0xFFFF
   2034              {
   2035                // Set into the correct state
   2036                matchED->state = ZDMATCH_WAIT_REQ;
   \   00007B   90....       MOV     DPTR,#matchED
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F8           MOV     R0,A
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   C8           XCH     A,R0
   \   000083   242E         ADD     A,#0x2e
   \   000085   F582         MOV     DPL,A
   \   000087   C8           XCH     A,R0
   \   000088   3400         ADDC    A,#0x0
   \   00008A   F583         MOV     DPH,A
   \   00008C   7401         MOV     A,#0x1
   \   00008E   F0           MOVX    @DPTR,A
   2037          
   2038                // Setup the timeout
   2039                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   00008F                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   00008F   7C..         MOV     R4,#??ZDO_EndDeviceBindMatchTimeoutCB?relay & 0xff
   \   000091   7D..         MOV     R5,#(??ZDO_EndDeviceBindMatchTimeoutCB?relay >> 8) & 0xff
   \   000093   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   000096   E0           MOVX    A,@DPTR
   \   000097   FA           MOV     R2,A
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   FB           MOV     R3,A
   \   00009B   12....       LCALL   ??APS_SetEndDeviceBindTimeout?relay; Banked call to: APS_SetEndDeviceBindTimeout
   \   00009E   02....       LJMP    ??ZDO_MatchEndDeviceBind_3 & 0xFFFF
   2040              }
   2041            }
   2042            else
   2043            {
   2044                matchED->state = ZDMATCH_SENDING_BINDS;
   \                     ??ZDO_MatchEndDeviceBind_0:
   \   0000A1   90....       MOV     DPTR,#matchED
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F8           MOV     R0,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   C8           XCH     A,R0
   \   0000A9   242E         ADD     A,#0x2e
   \   0000AB   F582         MOV     DPL,A
   \   0000AD   C8           XCH     A,R0
   \   0000AE   3400         ADDC    A,#0x0
   \   0000B0   F583         MOV     DPH,A
   \   0000B2   7402         MOV     A,#0x2
   \   0000B4   F0           MOVX    @DPTR,A
   2045          
   2046                // Copy the 2nd request's information
   2047                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   \   0000B5                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   0000B5   AC..         MOV     R4,?V4
   \   0000B7   AD..         MOV     R5,?V5
   \   0000B9   90....       MOV     DPTR,#matchED
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   2417         ADD     A,#0x17
   \   0000BF   FA           MOV     R2,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   3400         ADDC    A,#0x0
   \   0000C4   FB           MOV     R3,A
   \   0000C5   12....       LCALL   ??ZDO_CopyMatchInfo?relay; Banked call to: ZDO_CopyMatchInfo
   \   0000C8   E9           MOV     A,R1
   \   0000C9   700B         JNZ     ??ZDO_MatchEndDeviceBind_4
   2048                {
   2049                  status = ZDP_NO_ENTRY;
   \   0000CB   85..82       MOV     DPL,?XSP + 0
   \   0000CE   85..83       MOV     DPH,?XSP + 1
   \   0000D1   7488         MOV     A,#-0x78
   \   0000D3   F0           MOVX    @DPTR,A
   2050                  sendRsp = TRUE;
   \   0000D4   7E01         MOV     R6,#0x1
   2051                }
   2052          
   2053                // Make a source match for ed1
   2054                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2055                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2056                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_4:
   \   0000D6                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   0000D6   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   0000D9   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   0000DC   78..         MOV     R0,#?V0
   \   0000DE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E1   90....       MOV     DPTR,#matchED
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   F8           MOV     R0,A
   \   0000E6   A3           INC     DPTR
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   C8           XCH     A,R0
   \   0000E9   2429         ADD     A,#0x29
   \   0000EB   F582         MOV     DPL,A
   \   0000ED   C8           XCH     A,R0
   \   0000EE   3400         ADDC    A,#0x0
   \   0000F0   F583         MOV     DPH,A
   \   0000F2   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000F5   90....       MOV     DPTR,#matchED
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   F8           MOV     R0,A
   \   0000FA   A3           INC     DPTR
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   C8           XCH     A,R0
   \   0000FD   2428         ADD     A,#0x28
   \   0000FF   F582         MOV     DPL,A
   \   000101   C8           XCH     A,R0
   \   000102   3400         ADDC    A,#0x0
   \   000104   F583         MOV     DPH,A
   \   000106   E0           MOVX    A,@DPTR
   \   000107   FC           MOV     R4,A
   \   000108   90....       MOV     DPTR,#matchED
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   F8           MOV     R0,A
   \   00010D   A3           INC     DPTR
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   C8           XCH     A,R0
   \   000110   2415         ADD     A,#0x15
   \   000112   F582         MOV     DPL,A
   \   000114   C8           XCH     A,R0
   \   000115   3400         ADDC    A,#0x0
   \   000117   F583         MOV     DPH,A
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   FA           MOV     R2,A
   \   00011B   A3           INC     DPTR
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   FB           MOV     R3,A
   \   00011E   90....       MOV     DPTR,#matchED
   \   000121   E0           MOVX    A,@DPTR
   \   000122   F8           MOV     R0,A
   \   000123   A3           INC     DPTR
   \   000124   E0           MOVX    A,@DPTR
   \   000125   C8           XCH     A,R0
   \   000126   2414         ADD     A,#0x14
   \   000128   F582         MOV     DPL,A
   \   00012A   C8           XCH     A,R0
   \   00012B   3400         ADDC    A,#0x0
   \   00012D   F583         MOV     DPH,A
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   F9           MOV     R1,A
   \   000131   12....       LCALL   ??ZDO_CompareClusterLists?relay; Banked call to: ZDO_CompareClusterLists
   \   000134   7404         MOV     A,#0x4
   \   000136   12....       LCALL   ?DEALLOC_XSTACK8
   \   000139   E9           MOV     A,R1
   \   00013A   C0E0         PUSH    A
   \   00013C   90....       MOV     DPTR,#matchED
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   F8           MOV     R0,A
   \   000141   A3           INC     DPTR
   \   000142   E0           MOVX    A,@DPTR
   \   000143   C8           XCH     A,R0
   \   000144   2431         ADD     A,#0x31
   \   000146   F582         MOV     DPL,A
   \   000148   C8           XCH     A,R0
   \   000149   3400         ADDC    A,#0x0
   \   00014B   F583         MOV     DPH,A
   \   00014D   D0E0         POP     A
   \   00014F   F0           MOVX    @DPTR,A
   2057                if ( matchED->ed1numMatched )
   \   000150   90....       MOV     DPTR,#matchED
   \   000153   E0           MOVX    A,@DPTR
   \   000154   F8           MOV     R0,A
   \   000155   A3           INC     DPTR
   \   000156   E0           MOVX    A,@DPTR
   \   000157   C8           XCH     A,R0
   \   000158   2431         ADD     A,#0x31
   \   00015A   F582         MOV     DPL,A
   \   00015C   C8           XCH     A,R0
   \   00015D   3400         ADDC    A,#0x0
   \   00015F   F583         MOV     DPH,A
   \   000161   E0           MOVX    A,@DPTR
   \   000162   7003         JNZ     $+5
   \   000164   02....       LJMP    ??ZDO_MatchEndDeviceBind_5 & 0xFFFF
   2058                {
   2059                  // Save the match list
   2060                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   \   000167                ; Setup parameters for call to function osal_mem_alloc
   \   000167   90....       MOV     DPTR,#matchED
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   F8           MOV     R0,A
   \   00016C   A3           INC     DPTR
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   C8           XCH     A,R0
   \   00016F   2431         ADD     A,#0x31
   \   000171   F582         MOV     DPL,A
   \   000173   C8           XCH     A,R0
   \   000174   3400         ADDC    A,#0x0
   \   000176   F583         MOV     DPH,A
   \   000178   E0           MOVX    A,@DPTR
   \   000179   FA           MOV     R2,A
   \   00017A   7B00         MOV     R3,#0x0
   \   00017C   EA           MOV     A,R2
   \   00017D   75F002       MOV     B,#0x2
   \   000180   A4           MUL     AB
   \   000181   CA           XCH     A,R2
   \   000182   A8F0         MOV     R0,B
   \   000184   75F000       MOV     B,#0x0
   \   000187   A4           MUL     AB
   \   000188   28           ADD     A,R0
   \   000189   F8           MOV     R0,A
   \   00018A   75F002       MOV     B,#0x2
   \   00018D   EB           MOV     A,R3
   \   00018E   A4           MUL     AB
   \   00018F   28           ADD     A,R0
   \   000190   FB           MOV     R3,A
   \   000191   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000194   8A..         MOV     ?V0,R2
   \   000196   8B..         MOV     ?V1,R3
   \   000198   A8..         MOV     R0,?V0
   \   00019A   A9..         MOV     R1,?V1
   \   00019C   90....       MOV     DPTR,#matchED
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   FA           MOV     R2,A
   \   0001A1   A3           INC     DPTR
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   CA           XCH     A,R2
   \   0001A4   2432         ADD     A,#0x32
   \   0001A6   F582         MOV     DPL,A
   \   0001A8   CA           XCH     A,R2
   \   0001A9   3400         ADDC    A,#0x0
   \   0001AB   F583         MOV     DPH,A
   \   0001AD   E8           MOV     A,R0
   \   0001AE   F0           MOVX    @DPTR,A
   \   0001AF   A3           INC     DPTR
   \   0001B0   E9           MOV     A,R1
   \   0001B1   F0           MOVX    @DPTR,A
   2061                  if ( matchED->ed1Matched )
   \   0001B2   90....       MOV     DPTR,#matchED
   \   0001B5   E0           MOVX    A,@DPTR
   \   0001B6   F8           MOV     R0,A
   \   0001B7   A3           INC     DPTR
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   C8           XCH     A,R0
   \   0001BA   2432         ADD     A,#0x32
   \   0001BC   F582         MOV     DPL,A
   \   0001BE   C8           XCH     A,R0
   \   0001BF   3400         ADDC    A,#0x0
   \   0001C1   F583         MOV     DPH,A
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   F8           MOV     R0,A
   \   0001C5   A3           INC     DPTR
   \   0001C6   E0           MOVX    A,@DPTR
   \   0001C7   F9           MOV     R1,A
   \   0001C8   E8           MOV     A,R0
   \   0001C9   49           ORL     A,R1
   \   0001CA   6058         JZ      ??ZDO_MatchEndDeviceBind_6
   2062                  {
   2063                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0001CC                ; Setup parameters for call to function osal_memcpy
   \   0001CC   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   0001CF   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   0001D2   75..00       MOV     ?V2,#0x0
   \   0001D5   78..         MOV     R0,#?V0
   \   0001D7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001DA   90....       MOV     DPTR,#matchED
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   F8           MOV     R0,A
   \   0001DF   A3           INC     DPTR
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   C8           XCH     A,R0
   \   0001E2   2431         ADD     A,#0x31
   \   0001E4   F582         MOV     DPL,A
   \   0001E6   C8           XCH     A,R0
   \   0001E7   3400         ADDC    A,#0x0
   \   0001E9   F583         MOV     DPH,A
   \   0001EB   E0           MOVX    A,@DPTR
   \   0001EC   FC           MOV     R4,A
   \   0001ED   7D00         MOV     R5,#0x0
   \   0001EF   EC           MOV     A,R4
   \   0001F0   75F002       MOV     B,#0x2
   \   0001F3   A4           MUL     AB
   \   0001F4   CC           XCH     A,R4
   \   0001F5   A8F0         MOV     R0,B
   \   0001F7   75F000       MOV     B,#0x0
   \   0001FA   A4           MUL     AB
   \   0001FB   28           ADD     A,R0
   \   0001FC   F8           MOV     R0,A
   \   0001FD   75F002       MOV     B,#0x2
   \   000200   ED           MOV     A,R5
   \   000201   A4           MUL     AB
   \   000202   28           ADD     A,R0
   \   000203   FD           MOV     R5,A
   \   000204   90....       MOV     DPTR,#matchED
   \   000207   E0           MOVX    A,@DPTR
   \   000208   F8           MOV     R0,A
   \   000209   A3           INC     DPTR
   \   00020A   E0           MOVX    A,@DPTR
   \   00020B   C8           XCH     A,R0
   \   00020C   2432         ADD     A,#0x32
   \   00020E   F582         MOV     DPL,A
   \   000210   C8           XCH     A,R0
   \   000211   3400         ADDC    A,#0x0
   \   000213   F583         MOV     DPH,A
   \   000215   E0           MOVX    A,@DPTR
   \   000216   FA           MOV     R2,A
   \   000217   A3           INC     DPTR
   \   000218   E0           MOVX    A,@DPTR
   \   000219   FB           MOV     R3,A
   \   00021A   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00021D   7403         MOV     A,#0x3
   \   00021F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000222   800B         SJMP    ??ZDO_MatchEndDeviceBind_5
   2064                  }
   2065                  else
   2066                  {
   2067                    // Allocation error, stop
   2068                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_6:
   \   000224   85..82       MOV     DPL,?XSP + 0
   \   000227   85..83       MOV     DPH,?XSP + 1
   \   00022A   7488         MOV     A,#-0x78
   \   00022C   F0           MOVX    @DPTR,A
   2069                    sendRsp = TRUE;
   \   00022D   7E01         MOV     R6,#0x1
   2070                  }
   2071                }
   2072          
   2073                // Make a source match for ed2
   2074                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2075                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2076                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_5:
   \   00022F                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   00022F   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   000232   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   000235   78..         MOV     R0,#?V0
   \   000237   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00023A   90....       MOV     DPTR,#matchED
   \   00023D   E0           MOVX    A,@DPTR
   \   00023E   F8           MOV     R0,A
   \   00023F   A3           INC     DPTR
   \   000240   E0           MOVX    A,@DPTR
   \   000241   C8           XCH     A,R0
   \   000242   2412         ADD     A,#0x12
   \   000244   F582         MOV     DPL,A
   \   000246   C8           XCH     A,R0
   \   000247   3400         ADDC    A,#0x0
   \   000249   F583         MOV     DPH,A
   \   00024B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00024E   90....       MOV     DPTR,#matchED
   \   000251   E0           MOVX    A,@DPTR
   \   000252   F8           MOV     R0,A
   \   000253   A3           INC     DPTR
   \   000254   E0           MOVX    A,@DPTR
   \   000255   C8           XCH     A,R0
   \   000256   2411         ADD     A,#0x11
   \   000258   F582         MOV     DPL,A
   \   00025A   C8           XCH     A,R0
   \   00025B   3400         ADDC    A,#0x0
   \   00025D   F583         MOV     DPH,A
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   FC           MOV     R4,A
   \   000261   90....       MOV     DPTR,#matchED
   \   000264   E0           MOVX    A,@DPTR
   \   000265   F8           MOV     R0,A
   \   000266   A3           INC     DPTR
   \   000267   E0           MOVX    A,@DPTR
   \   000268   C8           XCH     A,R0
   \   000269   242C         ADD     A,#0x2c
   \   00026B   F582         MOV     DPL,A
   \   00026D   C8           XCH     A,R0
   \   00026E   3400         ADDC    A,#0x0
   \   000270   F583         MOV     DPH,A
   \   000272   E0           MOVX    A,@DPTR
   \   000273   FA           MOV     R2,A
   \   000274   A3           INC     DPTR
   \   000275   E0           MOVX    A,@DPTR
   \   000276   FB           MOV     R3,A
   \   000277   90....       MOV     DPTR,#matchED
   \   00027A   E0           MOVX    A,@DPTR
   \   00027B   F8           MOV     R0,A
   \   00027C   A3           INC     DPTR
   \   00027D   E0           MOVX    A,@DPTR
   \   00027E   C8           XCH     A,R0
   \   00027F   242B         ADD     A,#0x2b
   \   000281   F582         MOV     DPL,A
   \   000283   C8           XCH     A,R0
   \   000284   3400         ADDC    A,#0x0
   \   000286   F583         MOV     DPH,A
   \   000288   E0           MOVX    A,@DPTR
   \   000289   F9           MOV     R1,A
   \   00028A   12....       LCALL   ??ZDO_CompareClusterLists?relay; Banked call to: ZDO_CompareClusterLists
   \   00028D   7404         MOV     A,#0x4
   \   00028F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000292   E9           MOV     A,R1
   \   000293   F8           MOV     R0,A
   \   000294   E8           MOV     A,R0
   \   000295   C0E0         PUSH    A
   \   000297   90....       MOV     DPTR,#matchED
   \   00029A   E0           MOVX    A,@DPTR
   \   00029B   F8           MOV     R0,A
   \   00029C   A3           INC     DPTR
   \   00029D   E0           MOVX    A,@DPTR
   \   00029E   C8           XCH     A,R0
   \   00029F   2434         ADD     A,#0x34
   \   0002A1   F582         MOV     DPL,A
   \   0002A3   C8           XCH     A,R0
   \   0002A4   3400         ADDC    A,#0x0
   \   0002A6   F583         MOV     DPH,A
   \   0002A8   D0E0         POP     A
   \   0002AA   F0           MOVX    @DPTR,A
   2077                if ( matchED->ed2numMatched )
   \   0002AB   90....       MOV     DPTR,#matchED
   \   0002AE   E0           MOVX    A,@DPTR
   \   0002AF   F8           MOV     R0,A
   \   0002B0   A3           INC     DPTR
   \   0002B1   E0           MOVX    A,@DPTR
   \   0002B2   C8           XCH     A,R0
   \   0002B3   2434         ADD     A,#0x34
   \   0002B5   F582         MOV     DPL,A
   \   0002B7   C8           XCH     A,R0
   \   0002B8   3400         ADDC    A,#0x0
   \   0002BA   F583         MOV     DPH,A
   \   0002BC   E0           MOVX    A,@DPTR
   \   0002BD   7003         JNZ     $+5
   \   0002BF   02....       LJMP    ??ZDO_MatchEndDeviceBind_7 & 0xFFFF
   2078                {
   2079                  // Save the match list
   2080                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   \   0002C2                ; Setup parameters for call to function osal_mem_alloc
   \   0002C2   90....       MOV     DPTR,#matchED
   \   0002C5   E0           MOVX    A,@DPTR
   \   0002C6   F8           MOV     R0,A
   \   0002C7   A3           INC     DPTR
   \   0002C8   E0           MOVX    A,@DPTR
   \   0002C9   C8           XCH     A,R0
   \   0002CA   2434         ADD     A,#0x34
   \   0002CC   F582         MOV     DPL,A
   \   0002CE   C8           XCH     A,R0
   \   0002CF   3400         ADDC    A,#0x0
   \   0002D1   F583         MOV     DPH,A
   \   0002D3   E0           MOVX    A,@DPTR
   \   0002D4   FA           MOV     R2,A
   \   0002D5   7B00         MOV     R3,#0x0
   \   0002D7   EA           MOV     A,R2
   \   0002D8   75F002       MOV     B,#0x2
   \   0002DB   A4           MUL     AB
   \   0002DC   CA           XCH     A,R2
   \   0002DD   A8F0         MOV     R0,B
   \   0002DF   75F000       MOV     B,#0x0
   \   0002E2   A4           MUL     AB
   \   0002E3   28           ADD     A,R0
   \   0002E4   F8           MOV     R0,A
   \   0002E5   75F002       MOV     B,#0x2
   \   0002E8   EB           MOV     A,R3
   \   0002E9   A4           MUL     AB
   \   0002EA   28           ADD     A,R0
   \   0002EB   FB           MOV     R3,A
   \   0002EC   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0002EF   8A..         MOV     ?V0,R2
   \   0002F1   8B..         MOV     ?V1,R3
   \   0002F3   A8..         MOV     R0,?V0
   \   0002F5   A9..         MOV     R1,?V1
   \   0002F7   90....       MOV     DPTR,#matchED
   \   0002FA   E0           MOVX    A,@DPTR
   \   0002FB   FA           MOV     R2,A
   \   0002FC   A3           INC     DPTR
   \   0002FD   E0           MOVX    A,@DPTR
   \   0002FE   CA           XCH     A,R2
   \   0002FF   2435         ADD     A,#0x35
   \   000301   F582         MOV     DPL,A
   \   000303   CA           XCH     A,R2
   \   000304   3400         ADDC    A,#0x0
   \   000306   F583         MOV     DPH,A
   \   000308   E8           MOV     A,R0
   \   000309   F0           MOVX    @DPTR,A
   \   00030A   A3           INC     DPTR
   \   00030B   E9           MOV     A,R1
   \   00030C   F0           MOVX    @DPTR,A
   2081                  if ( matchED->ed2Matched )
   \   00030D   90....       MOV     DPTR,#matchED
   \   000310   E0           MOVX    A,@DPTR
   \   000311   F8           MOV     R0,A
   \   000312   A3           INC     DPTR
   \   000313   E0           MOVX    A,@DPTR
   \   000314   C8           XCH     A,R0
   \   000315   2435         ADD     A,#0x35
   \   000317   F582         MOV     DPL,A
   \   000319   C8           XCH     A,R0
   \   00031A   3400         ADDC    A,#0x0
   \   00031C   F583         MOV     DPH,A
   \   00031E   E0           MOVX    A,@DPTR
   \   00031F   F8           MOV     R0,A
   \   000320   A3           INC     DPTR
   \   000321   E0           MOVX    A,@DPTR
   \   000322   F9           MOV     R1,A
   \   000323   E8           MOV     A,R0
   \   000324   49           ORL     A,R1
   \   000325   6058         JZ      ??ZDO_MatchEndDeviceBind_8
   2082                  {
   2083                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000327                ; Setup parameters for call to function osal_memcpy
   \   000327   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   00032A   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   00032D   75..00       MOV     ?V2,#0x0
   \   000330   78..         MOV     R0,#?V0
   \   000332   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000335   90....       MOV     DPTR,#matchED
   \   000338   E0           MOVX    A,@DPTR
   \   000339   F8           MOV     R0,A
   \   00033A   A3           INC     DPTR
   \   00033B   E0           MOVX    A,@DPTR
   \   00033C   C8           XCH     A,R0
   \   00033D   2434         ADD     A,#0x34
   \   00033F   F582         MOV     DPL,A
   \   000341   C8           XCH     A,R0
   \   000342   3400         ADDC    A,#0x0
   \   000344   F583         MOV     DPH,A
   \   000346   E0           MOVX    A,@DPTR
   \   000347   FC           MOV     R4,A
   \   000348   7D00         MOV     R5,#0x0
   \   00034A   EC           MOV     A,R4
   \   00034B   75F002       MOV     B,#0x2
   \   00034E   A4           MUL     AB
   \   00034F   CC           XCH     A,R4
   \   000350   A8F0         MOV     R0,B
   \   000352   75F000       MOV     B,#0x0
   \   000355   A4           MUL     AB
   \   000356   28           ADD     A,R0
   \   000357   F8           MOV     R0,A
   \   000358   75F002       MOV     B,#0x2
   \   00035B   ED           MOV     A,R5
   \   00035C   A4           MUL     AB
   \   00035D   28           ADD     A,R0
   \   00035E   FD           MOV     R5,A
   \   00035F   90....       MOV     DPTR,#matchED
   \   000362   E0           MOVX    A,@DPTR
   \   000363   F8           MOV     R0,A
   \   000364   A3           INC     DPTR
   \   000365   E0           MOVX    A,@DPTR
   \   000366   C8           XCH     A,R0
   \   000367   2435         ADD     A,#0x35
   \   000369   F582         MOV     DPL,A
   \   00036B   C8           XCH     A,R0
   \   00036C   3400         ADDC    A,#0x0
   \   00036E   F583         MOV     DPH,A
   \   000370   E0           MOVX    A,@DPTR
   \   000371   FA           MOV     R2,A
   \   000372   A3           INC     DPTR
   \   000373   E0           MOVX    A,@DPTR
   \   000374   FB           MOV     R3,A
   \   000375   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000378   7403         MOV     A,#0x3
   \   00037A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00037D   800B         SJMP    ??ZDO_MatchEndDeviceBind_7
   2084                  }
   2085                  else
   2086                  {
   2087                    // Allocation error, stop
   2088                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_8:
   \   00037F   85..82       MOV     DPL,?XSP + 0
   \   000382   85..83       MOV     DPH,?XSP + 1
   \   000385   7488         MOV     A,#-0x78
   \   000387   F0           MOVX    @DPTR,A
   2089                    sendRsp = TRUE;
   \   000388   7E01         MOV     R6,#0x1
   2090                  }
   2091                }
   2092          
   2093                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   \                     ??ZDO_MatchEndDeviceBind_7:
   \   00038A   EE           MOV     A,R6
   \   00038B   7034         JNZ     ??ZDO_MatchEndDeviceBind_9
   \   00038D   90....       MOV     DPTR,#matchED
   \   000390   E0           MOVX    A,@DPTR
   \   000391   F8           MOV     R0,A
   \   000392   A3           INC     DPTR
   \   000393   E0           MOVX    A,@DPTR
   \   000394   C8           XCH     A,R0
   \   000395   2431         ADD     A,#0x31
   \   000397   F582         MOV     DPL,A
   \   000399   C8           XCH     A,R0
   \   00039A   3400         ADDC    A,#0x0
   \   00039C   F583         MOV     DPH,A
   \   00039E   E0           MOVX    A,@DPTR
   \   00039F   7014         JNZ     ??ZDO_MatchEndDeviceBind_10
   \   0003A1   90....       MOV     DPTR,#matchED
   \   0003A4   E0           MOVX    A,@DPTR
   \   0003A5   F8           MOV     R0,A
   \   0003A6   A3           INC     DPTR
   \   0003A7   E0           MOVX    A,@DPTR
   \   0003A8   C8           XCH     A,R0
   \   0003A9   2434         ADD     A,#0x34
   \   0003AB   F582         MOV     DPL,A
   \   0003AD   C8           XCH     A,R0
   \   0003AE   3400         ADDC    A,#0x0
   \   0003B0   F583         MOV     DPH,A
   \   0003B2   E0           MOVX    A,@DPTR
   \   0003B3   600C         JZ      ??ZDO_MatchEndDeviceBind_9
   2094                {
   2095                  // Do the first unbind/bind state
   2096                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   \                     ??ZDO_MatchEndDeviceBind_10:
   \   0003B5                ; Setup parameters for call to function ZDMatchSendState
   \   0003B5   7B00         MOV     R3,#0x0
   \   0003B7   7A00         MOV     R2,#0x0
   \   0003B9   7900         MOV     R1,#0x0
   \   0003BB   12....       LCALL   ??ZDMatchSendState?relay; Banked call to: ZDMatchSendState
   \   0003BE   E9           MOV     A,R1
   \   0003BF   800B         SJMP    ??ZDO_MatchEndDeviceBind_3
   2097                }
   2098                else
   2099                {
   2100                  status = ZDP_NO_MATCH;
   \                     ??ZDO_MatchEndDeviceBind_9:
   \   0003C1   85..82       MOV     DPL,?XSP + 0
   \   0003C4   85..83       MOV     DPH,?XSP + 1
   \   0003C7   7486         MOV     A,#-0x7a
   \   0003C9   F0           MOVX    @DPTR,A
   2101                  sendRsp = TRUE;
   \   0003CA   7E01         MOV     R6,#0x1
   2102                }
   2103            }
   2104          
   2105            if ( sendRsp )
   \                     ??ZDO_MatchEndDeviceBind_3:
   \   0003CC   EE           MOV     A,R6
   \   0003CD   7003         JNZ     $+5
   \   0003CF   02....       LJMP    ??ZDO_MatchEndDeviceBind_11 & 0xFFFF
   2106            {
   2107              // send response to this requester
   2108              dstAddr.addrMode = Addr16Bit;
   \   0003D2   7409         MOV     A,#0x9
   \   0003D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0003D7   7402         MOV     A,#0x2
   \   0003D9   F0           MOVX    @DPTR,A
   2109              dstAddr.addr.shortAddr = bindReq->srcAddr;
   \   0003DA   85..82       MOV     DPL,?V4
   \   0003DD   85..83       MOV     DPH,?V5
   \   0003E0   A3           INC     DPTR
   \   0003E1   A3           INC     DPTR
   \   0003E2   E0           MOVX    A,@DPTR
   \   0003E3   F8           MOV     R0,A
   \   0003E4   A3           INC     DPTR
   \   0003E5   E0           MOVX    A,@DPTR
   \   0003E6   F9           MOV     R1,A
   \   0003E7   7401         MOV     A,#0x1
   \   0003E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0003EC   E8           MOV     A,R0
   \   0003ED   F0           MOVX    @DPTR,A
   \   0003EE   A3           INC     DPTR
   \   0003EF   E9           MOV     A,R1
   \   0003F0   F0           MOVX    @DPTR,A
   2110              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   \   0003F1                ; Setup parameters for call to function ZDP_SendData
   \   0003F1   85..82       MOV     DPL,?V4
   \   0003F4   85..83       MOV     DPH,?V5
   \   0003F7   A3           INC     DPTR
   \   0003F8   E0           MOVX    A,@DPTR
   \   0003F9   F5..         MOV     ?V0,A
   \   0003FB   78..         MOV     R0,#?V0
   \   0003FD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000400   7401         MOV     A,#0x1
   \   000402   12....       LCALL   ?XSTACK_DISP100_8
   \   000405   88..         MOV     ?V0,R0
   \   000407   89..         MOV     ?V1,R1
   \   000409   78..         MOV     R0,#?V0
   \   00040B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00040E   75..20       MOV     ?V0,#0x20
   \   000411   75..80       MOV     ?V1,#-0x80
   \   000414   78..         MOV     R0,#?V0
   \   000416   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000419   7901         MOV     R1,#0x1
   \   00041B   7406         MOV     A,#0x6
   \   00041D   12....       LCALL   ?XSTACK_DISP102_8
   \   000420   AA..         MOV     R2,?V4
   \   000422   AB..         MOV     R3,?V5
   \   000424   12....       LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
   \   000427   7405         MOV     A,#0x5
   \   000429   12....       LCALL   ?DEALLOC_XSTACK8
   \   00042C   E9           MOV     A,R1
   2111          
   2112              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   00042D   90....       MOV     DPTR,#matchED
   \   000430   E0           MOVX    A,@DPTR
   \   000431   F8           MOV     R0,A
   \   000432   A3           INC     DPTR
   \   000433   E0           MOVX    A,@DPTR
   \   000434   C8           XCH     A,R0
   \   000435   242E         ADD     A,#0x2e
   \   000437   F582         MOV     DPL,A
   \   000439   C8           XCH     A,R0
   \   00043A   3400         ADDC    A,#0x0
   \   00043C   F583         MOV     DPH,A
   \   00043E   E0           MOVX    A,@DPTR
   \   00043F   6402         XRL     A,#0x2
   \   000441   7069         JNZ     ??ZDO_MatchEndDeviceBind_12
   2113              {
   2114                // send response to first requester
   2115                dstAddr.addrMode = Addr16Bit;
   \   000443   7409         MOV     A,#0x9
   \   000445   12....       LCALL   ?XSTACK_DISP0_8
   \   000448   7402         MOV     A,#0x2
   \   00044A   F0           MOVX    @DPTR,A
   2116                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \   00044B   90....       MOV     DPTR,#matchED
   \   00044E   E0           MOVX    A,@DPTR
   \   00044F   F8           MOV     R0,A
   \   000450   A3           INC     DPTR
   \   000451   E0           MOVX    A,@DPTR
   \   000452   F583         MOV     DPH,A
   \   000454   8882         MOV     DPL,R0
   \   000456   A3           INC     DPTR
   \   000457   A3           INC     DPTR
   \   000458   E0           MOVX    A,@DPTR
   \   000459   F8           MOV     R0,A
   \   00045A   A3           INC     DPTR
   \   00045B   E0           MOVX    A,@DPTR
   \   00045C   F9           MOV     R1,A
   \   00045D   7401         MOV     A,#0x1
   \   00045F   12....       LCALL   ?XSTACK_DISP0_8
   \   000462   E8           MOV     A,R0
   \   000463   F0           MOVX    @DPTR,A
   \   000464   A3           INC     DPTR
   \   000465   E9           MOV     A,R1
   \   000466   F0           MOVX    @DPTR,A
   2117                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   \   000467                ; Setup parameters for call to function ZDP_SendData
   \   000467   90....       MOV     DPTR,#matchED
   \   00046A   E0           MOVX    A,@DPTR
   \   00046B   F8           MOV     R0,A
   \   00046C   A3           INC     DPTR
   \   00046D   E0           MOVX    A,@DPTR
   \   00046E   F583         MOV     DPH,A
   \   000470   8882         MOV     DPL,R0
   \   000472   A3           INC     DPTR
   \   000473   E0           MOVX    A,@DPTR
   \   000474   F5..         MOV     ?V0,A
   \   000476   78..         MOV     R0,#?V0
   \   000478   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00047B   7401         MOV     A,#0x1
   \   00047D   12....       LCALL   ?XSTACK_DISP100_8
   \   000480   88..         MOV     ?V0,R0
   \   000482   89..         MOV     ?V1,R1
   \   000484   78..         MOV     R0,#?V0
   \   000486   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000489   75..20       MOV     ?V0,#0x20
   \   00048C   75..80       MOV     ?V1,#-0x80
   \   00048F   78..         MOV     R0,#?V0
   \   000491   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000494   7901         MOV     R1,#0x1
   \   000496   7406         MOV     A,#0x6
   \   000498   12....       LCALL   ?XSTACK_DISP102_8
   \   00049B   90....       MOV     DPTR,#matchED
   \   00049E   E0           MOVX    A,@DPTR
   \   00049F   FA           MOV     R2,A
   \   0004A0   A3           INC     DPTR
   \   0004A1   E0           MOVX    A,@DPTR
   \   0004A2   FB           MOV     R3,A
   \   0004A3   12....       LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
   \   0004A6   7405         MOV     A,#0x5
   \   0004A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004AB   E9           MOV     A,R1
   2118              }
   2119          
   2120              // Process ended - release memory used
   2121              ZDO_RemoveMatchMemory();
   \                     ??ZDO_MatchEndDeviceBind_12:
   \   0004AC                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   0004AC   12....       LCALL   ??ZDO_RemoveMatchMemory?relay; Banked call to: ZDO_RemoveMatchMemory
   2122            }
   2123          }
   \                     ??ZDO_MatchEndDeviceBind_11:
   \   0004AF   740A         MOV     A,#0xa
   \   0004B1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004B4   7F06         MOV     R7,#0x6
   \   0004B6   02....       LJMP    ?BANKED_LEAVE_XDATA
   2124          
   2125          /*********************************************************************
   2126           * @fn      ZDO_RemoveMatchMemory()
   2127           *
   2128           * @brief   Called to clear the memory used for the end device bind.
   2129           *
   2130           * @param  none
   2131           *
   2132           * @return  none
   2133           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2134          static void ZDO_RemoveMatchMemory( void )
   \                     ZDO_RemoveMatchMemory:
   2135          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2136            if ( matchED != NULL )
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   E8           MOV     A,R0
   \   00000D   49           ORL     A,R1
   \   00000E   7003         JNZ     $+5
   \   000010   02....       LJMP    ??ZDO_RemoveMatchMemory_0 & 0xFFFF
   2137            {
   2138              if ( matchED->ed2Matched != NULL )
   \   000013   90....       MOV     DPTR,#matchED
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F8           MOV     R0,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   C8           XCH     A,R0
   \   00001B   2435         ADD     A,#0x35
   \   00001D   F582         MOV     DPL,A
   \   00001F   C8           XCH     A,R0
   \   000020   3400         ADDC    A,#0x0
   \   000022   F583         MOV     DPH,A
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F8           MOV     R0,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   E8           MOV     A,R0
   \   00002A   49           ORL     A,R1
   \   00002B   6019         JZ      ??ZDO_RemoveMatchMemory_1
   2139                osal_mem_free( matchED->ed2Matched );
   \   00002D                ; Setup parameters for call to function osal_mem_free
   \   00002D   90....       MOV     DPTR,#matchED
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   C8           XCH     A,R0
   \   000035   2435         ADD     A,#0x35
   \   000037   F582         MOV     DPL,A
   \   000039   C8           XCH     A,R0
   \   00003A   3400         ADDC    A,#0x0
   \   00003C   F583         MOV     DPH,A
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FA           MOV     R2,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   2140              if ( matchED->ed1Matched != NULL )
   \                     ??ZDO_RemoveMatchMemory_1:
   \   000046   90....       MOV     DPTR,#matchED
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F8           MOV     R0,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   C8           XCH     A,R0
   \   00004E   2432         ADD     A,#0x32
   \   000050   F582         MOV     DPL,A
   \   000052   C8           XCH     A,R0
   \   000053   3400         ADDC    A,#0x0
   \   000055   F583         MOV     DPH,A
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F8           MOV     R0,A
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F9           MOV     R1,A
   \   00005C   E8           MOV     A,R0
   \   00005D   49           ORL     A,R1
   \   00005E   6019         JZ      ??ZDO_RemoveMatchMemory_2
   2141                osal_mem_free( matchED->ed1Matched );
   \   000060                ; Setup parameters for call to function osal_mem_free
   \   000060   90....       MOV     DPTR,#matchED
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F8           MOV     R0,A
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   C8           XCH     A,R0
   \   000068   2432         ADD     A,#0x32
   \   00006A   F582         MOV     DPL,A
   \   00006C   C8           XCH     A,R0
   \   00006D   3400         ADDC    A,#0x0
   \   00006F   F583         MOV     DPH,A
   \   000071   E0           MOVX    A,@DPTR
   \   000072   FA           MOV     R2,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   FB           MOV     R3,A
   \   000076   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   2142          
   2143              if ( matchED->ed1.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_2:
   \   000079   90....       MOV     DPTR,#matchED
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F8           MOV     R0,A
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   C8           XCH     A,R0
   \   000081   2412         ADD     A,#0x12
   \   000083   F582         MOV     DPL,A
   \   000085   C8           XCH     A,R0
   \   000086   3400         ADDC    A,#0x0
   \   000088   F583         MOV     DPH,A
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F8           MOV     R0,A
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   F9           MOV     R1,A
   \   00008F   E8           MOV     A,R0
   \   000090   49           ORL     A,R1
   \   000091   6019         JZ      ??ZDO_RemoveMatchMemory_3
   2144                osal_mem_free( matchED->ed1.inClusters );
   \   000093                ; Setup parameters for call to function osal_mem_free
   \   000093   90....       MOV     DPTR,#matchED
   \   000096   E0           MOVX    A,@DPTR
   \   000097   F8           MOV     R0,A
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   C8           XCH     A,R0
   \   00009B   2412         ADD     A,#0x12
   \   00009D   F582         MOV     DPL,A
   \   00009F   C8           XCH     A,R0
   \   0000A0   3400         ADDC    A,#0x0
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FA           MOV     R2,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   FB           MOV     R3,A
   \   0000A9   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   2145          
   2146              if ( matchED->ed1.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_3:
   \   0000AC   90....       MOV     DPTR,#matchED
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F8           MOV     R0,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   C8           XCH     A,R0
   \   0000B4   2415         ADD     A,#0x15
   \   0000B6   F582         MOV     DPL,A
   \   0000B8   C8           XCH     A,R0
   \   0000B9   3400         ADDC    A,#0x0
   \   0000BB   F583         MOV     DPH,A
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F8           MOV     R0,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F9           MOV     R1,A
   \   0000C2   E8           MOV     A,R0
   \   0000C3   49           ORL     A,R1
   \   0000C4   6019         JZ      ??ZDO_RemoveMatchMemory_4
   2147                osal_mem_free( matchED->ed1.outClusters );
   \   0000C6                ; Setup parameters for call to function osal_mem_free
   \   0000C6   90....       MOV     DPTR,#matchED
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   F8           MOV     R0,A
   \   0000CB   A3           INC     DPTR
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   C8           XCH     A,R0
   \   0000CE   2415         ADD     A,#0x15
   \   0000D0   F582         MOV     DPL,A
   \   0000D2   C8           XCH     A,R0
   \   0000D3   3400         ADDC    A,#0x0
   \   0000D5   F583         MOV     DPH,A
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   FA           MOV     R2,A
   \   0000D9   A3           INC     DPTR
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   FB           MOV     R3,A
   \   0000DC   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   2148          
   2149              if ( matchED->ed2.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_4:
   \   0000DF   90....       MOV     DPTR,#matchED
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   F8           MOV     R0,A
   \   0000E4   A3           INC     DPTR
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   C8           XCH     A,R0
   \   0000E7   2429         ADD     A,#0x29
   \   0000E9   F582         MOV     DPL,A
   \   0000EB   C8           XCH     A,R0
   \   0000EC   3400         ADDC    A,#0x0
   \   0000EE   F583         MOV     DPH,A
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F8           MOV     R0,A
   \   0000F2   A3           INC     DPTR
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   F9           MOV     R1,A
   \   0000F5   E8           MOV     A,R0
   \   0000F6   49           ORL     A,R1
   \   0000F7   6019         JZ      ??ZDO_RemoveMatchMemory_5
   2150                osal_mem_free( matchED->ed2.inClusters );
   \   0000F9                ; Setup parameters for call to function osal_mem_free
   \   0000F9   90....       MOV     DPTR,#matchED
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   F8           MOV     R0,A
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   C8           XCH     A,R0
   \   000101   2429         ADD     A,#0x29
   \   000103   F582         MOV     DPL,A
   \   000105   C8           XCH     A,R0
   \   000106   3400         ADDC    A,#0x0
   \   000108   F583         MOV     DPH,A
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   FA           MOV     R2,A
   \   00010C   A3           INC     DPTR
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   FB           MOV     R3,A
   \   00010F   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   2151          
   2152              if ( matchED->ed2.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_5:
   \   000112   90....       MOV     DPTR,#matchED
   \   000115   E0           MOVX    A,@DPTR
   \   000116   F8           MOV     R0,A
   \   000117   A3           INC     DPTR
   \   000118   E0           MOVX    A,@DPTR
   \   000119   C8           XCH     A,R0
   \   00011A   242C         ADD     A,#0x2c
   \   00011C   F582         MOV     DPL,A
   \   00011E   C8           XCH     A,R0
   \   00011F   3400         ADDC    A,#0x0
   \   000121   F583         MOV     DPH,A
   \   000123   E0           MOVX    A,@DPTR
   \   000124   F8           MOV     R0,A
   \   000125   A3           INC     DPTR
   \   000126   E0           MOVX    A,@DPTR
   \   000127   F9           MOV     R1,A
   \   000128   E8           MOV     A,R0
   \   000129   49           ORL     A,R1
   \   00012A   6019         JZ      ??ZDO_RemoveMatchMemory_6
   2153                osal_mem_free( matchED->ed2.outClusters );
   \   00012C                ; Setup parameters for call to function osal_mem_free
   \   00012C   90....       MOV     DPTR,#matchED
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   F8           MOV     R0,A
   \   000131   A3           INC     DPTR
   \   000132   E0           MOVX    A,@DPTR
   \   000133   C8           XCH     A,R0
   \   000134   242C         ADD     A,#0x2c
   \   000136   F582         MOV     DPL,A
   \   000138   C8           XCH     A,R0
   \   000139   3400         ADDC    A,#0x0
   \   00013B   F583         MOV     DPH,A
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   FA           MOV     R2,A
   \   00013F   A3           INC     DPTR
   \   000140   E0           MOVX    A,@DPTR
   \   000141   FB           MOV     R3,A
   \   000142   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   2154          
   2155              osal_mem_free( matchED );
   \                     ??ZDO_RemoveMatchMemory_6:
   \   000145                ; Setup parameters for call to function osal_mem_free
   \   000145   90....       MOV     DPTR,#matchED
   \   000148   E0           MOVX    A,@DPTR
   \   000149   FA           MOV     R2,A
   \   00014A   A3           INC     DPTR
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   FB           MOV     R3,A
   \   00014D   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   2156          
   2157              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \   000150   90....       MOV     DPTR,#matchED
   \   000153   7400         MOV     A,#0x0
   \   000155   F0           MOVX    @DPTR,A
   \   000156   A3           INC     DPTR
   \   000157   7400         MOV     A,#0x0
   \   000159   F0           MOVX    @DPTR,A
   2158            }
   2159          }
   \                     ??ZDO_RemoveMatchMemory_0:
   \   00015A   D083         POP     DPH
   \   00015C   D082         POP     DPL
   \   00015E   02....       LJMP    ?BRET
   2160          
   2161          /*********************************************************************
   2162           * @fn      ZDO_CopyMatchInfo()
   2163           *
   2164           * @brief   Called to copy memory used for the end device bind.
   2165           *
   2166           * @param  srcReq - source information
   2167           * @param  dstReq - destination location
   2168           *
   2169           * @return  TRUE if copy was successful.
   2170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2171          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   \                     ZDO_CopyMatchInfo:
   2172          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   2173            uint8 allOK = TRUE;
   \   00000D   75..01       MOV     ?V3,#0x1
   2174          
   2175            // Copy bind information into the match info structure
   2176            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   \   000010                ; Setup parameters for call to function osal_memcpy
   \   000010   85....       MOV     ?V0,?V4
   \   000013   85....       MOV     ?V1,?V5
   \   000016   75..00       MOV     ?V2,#0x0
   \   000019   78..         MOV     R0,#?V0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001E   7C17         MOV     R4,#0x17
   \   000020   7D00         MOV     R5,#0x0
   \   000022   EE           MOV     A,R6
   \   000023   FA           MOV     R2,A
   \   000024   EF           MOV     A,R7
   \   000025   FB           MOV     R3,A
   \   000026   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000029   7403         MOV     A,#0x3
   \   00002B   12....       LCALL   ?DEALLOC_XSTACK8
   2177          
   2178            // Initialize the destination cluster pointers
   2179            destReq->inClusters = NULL;
   \   00002E   EE           MOV     A,R6
   \   00002F   2412         ADD     A,#0x12
   \   000031   F582         MOV     DPL,A
   \   000033   E4           CLR     A
   \   000034   3F           ADDC    A,R7
   \   000035   F583         MOV     DPH,A
   \   000037   7400         MOV     A,#0x0
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   7400         MOV     A,#0x0
   \   00003D   F0           MOVX    @DPTR,A
   2180            destReq->outClusters = NULL;
   \   00003E   EE           MOV     A,R6
   \   00003F   2415         ADD     A,#0x15
   \   000041   F582         MOV     DPL,A
   \   000043   E4           CLR     A
   \   000044   3F           ADDC    A,R7
   \   000045   F583         MOV     DPH,A
   \   000047   7400         MOV     A,#0x0
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   7400         MOV     A,#0x0
   \   00004D   F0           MOVX    @DPTR,A
   2181          
   2182            // Copy input cluster IDs
   2183            if ( srcReq->numInClusters )
   \   00004E   E5..         MOV     A,?V4
   \   000050   2411         ADD     A,#0x11
   \   000052   F582         MOV     DPL,A
   \   000054   E4           CLR     A
   \   000055   35..         ADDC    A,?V5
   \   000057   F583         MOV     DPH,A
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   7003         JNZ     $+5
   \   00005C   02....       LJMP    ??ZDO_CopyMatchInfo_0 & 0xFFFF
   2184            {
   2185              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   \   00005F                ; Setup parameters for call to function osal_mem_alloc
   \   00005F   E5..         MOV     A,?V4
   \   000061   2411         ADD     A,#0x11
   \   000063   F582         MOV     DPL,A
   \   000065   E4           CLR     A
   \   000066   35..         ADDC    A,?V5
   \   000068   F583         MOV     DPH,A
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   FA           MOV     R2,A
   \   00006C   7B00         MOV     R3,#0x0
   \   00006E   EA           MOV     A,R2
   \   00006F   75F002       MOV     B,#0x2
   \   000072   A4           MUL     AB
   \   000073   CA           XCH     A,R2
   \   000074   A8F0         MOV     R0,B
   \   000076   75F000       MOV     B,#0x0
   \   000079   A4           MUL     AB
   \   00007A   28           ADD     A,R0
   \   00007B   F8           MOV     R0,A
   \   00007C   75F002       MOV     B,#0x2
   \   00007F   EB           MOV     A,R3
   \   000080   A4           MUL     AB
   \   000081   28           ADD     A,R0
   \   000082   FB           MOV     R3,A
   \   000083   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000086   EE           MOV     A,R6
   \   000087   2412         ADD     A,#0x12
   \   000089   F582         MOV     DPL,A
   \   00008B   E4           CLR     A
   \   00008C   3F           ADDC    A,R7
   \   00008D   F583         MOV     DPH,A
   \   00008F   EA           MOV     A,R2
   \   000090   F0           MOVX    @DPTR,A
   \   000091   A3           INC     DPTR
   \   000092   EB           MOV     A,R3
   \   000093   F0           MOVX    @DPTR,A
   2186              if ( destReq->inClusters )
   \   000094   EE           MOV     A,R6
   \   000095   2412         ADD     A,#0x12
   \   000097   F582         MOV     DPL,A
   \   000099   E4           CLR     A
   \   00009A   3F           ADDC    A,R7
   \   00009B   F583         MOV     DPH,A
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   F8           MOV     R0,A
   \   00009F   A3           INC     DPTR
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F9           MOV     R1,A
   \   0000A2   E8           MOV     A,R0
   \   0000A3   49           ORL     A,R1
   \   0000A4   6056         JZ      ??ZDO_CopyMatchInfo_1
   2187              {
   2188                // Copy the clusters
   2189                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2190                                (srcReq->numInClusters * sizeof ( uint16 )) );
   \   0000A6                ; Setup parameters for call to function osal_memcpy
   \   0000A6   E5..         MOV     A,?V4
   \   0000A8   2412         ADD     A,#0x12
   \   0000AA   F582         MOV     DPL,A
   \   0000AC   E4           CLR     A
   \   0000AD   35..         ADDC    A,?V5
   \   0000AF   F583         MOV     DPH,A
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F5..         MOV     ?V0,A
   \   0000B4   A3           INC     DPTR
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   F5..         MOV     ?V1,A
   \   0000B8   75..00       MOV     ?V2,#0x0
   \   0000BB   78..         MOV     R0,#?V0
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C0   E5..         MOV     A,?V4
   \   0000C2   2411         ADD     A,#0x11
   \   0000C4   F582         MOV     DPL,A
   \   0000C6   E4           CLR     A
   \   0000C7   35..         ADDC    A,?V5
   \   0000C9   F583         MOV     DPH,A
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   FC           MOV     R4,A
   \   0000CD   7D00         MOV     R5,#0x0
   \   0000CF   EC           MOV     A,R4
   \   0000D0   75F002       MOV     B,#0x2
   \   0000D3   A4           MUL     AB
   \   0000D4   CC           XCH     A,R4
   \   0000D5   A8F0         MOV     R0,B
   \   0000D7   75F000       MOV     B,#0x0
   \   0000DA   A4           MUL     AB
   \   0000DB   28           ADD     A,R0
   \   0000DC   F8           MOV     R0,A
   \   0000DD   75F002       MOV     B,#0x2
   \   0000E0   ED           MOV     A,R5
   \   0000E1   A4           MUL     AB
   \   0000E2   28           ADD     A,R0
   \   0000E3   FD           MOV     R5,A
   \   0000E4   EE           MOV     A,R6
   \   0000E5   2412         ADD     A,#0x12
   \   0000E7   F582         MOV     DPL,A
   \   0000E9   E4           CLR     A
   \   0000EA   3F           ADDC    A,R7
   \   0000EB   F583         MOV     DPH,A
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   FA           MOV     R2,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   FB           MOV     R3,A
   \   0000F2   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000F5   7403         MOV     A,#0x3
   \   0000F7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FA   8003         SJMP    ??ZDO_CopyMatchInfo_0
   2191              }
   2192              else
   2193                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_1:
   \   0000FC   75..00       MOV     ?V3,#0x0
   2194            }
   2195          
   2196            // Copy output cluster IDs
   2197            if ( srcReq->numOutClusters )
   \                     ??ZDO_CopyMatchInfo_0:
   \   0000FF   E5..         MOV     A,?V4
   \   000101   2414         ADD     A,#0x14
   \   000103   F582         MOV     DPL,A
   \   000105   E4           CLR     A
   \   000106   35..         ADDC    A,?V5
   \   000108   F583         MOV     DPH,A
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   7003         JNZ     $+5
   \   00010D   02....       LJMP    ??ZDO_CopyMatchInfo_2 & 0xFFFF
   2198            {
   2199              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   \   000110                ; Setup parameters for call to function osal_mem_alloc
   \   000110   E5..         MOV     A,?V4
   \   000112   2414         ADD     A,#0x14
   \   000114   F582         MOV     DPL,A
   \   000116   E4           CLR     A
   \   000117   35..         ADDC    A,?V5
   \   000119   F583         MOV     DPH,A
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   FA           MOV     R2,A
   \   00011D   7B00         MOV     R3,#0x0
   \   00011F   EA           MOV     A,R2
   \   000120   75F002       MOV     B,#0x2
   \   000123   A4           MUL     AB
   \   000124   CA           XCH     A,R2
   \   000125   A8F0         MOV     R0,B
   \   000127   75F000       MOV     B,#0x0
   \   00012A   A4           MUL     AB
   \   00012B   28           ADD     A,R0
   \   00012C   F8           MOV     R0,A
   \   00012D   75F002       MOV     B,#0x2
   \   000130   EB           MOV     A,R3
   \   000131   A4           MUL     AB
   \   000132   28           ADD     A,R0
   \   000133   FB           MOV     R3,A
   \   000134   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000137   EE           MOV     A,R6
   \   000138   2415         ADD     A,#0x15
   \   00013A   F582         MOV     DPL,A
   \   00013C   E4           CLR     A
   \   00013D   3F           ADDC    A,R7
   \   00013E   F583         MOV     DPH,A
   \   000140   EA           MOV     A,R2
   \   000141   F0           MOVX    @DPTR,A
   \   000142   A3           INC     DPTR
   \   000143   EB           MOV     A,R3
   \   000144   F0           MOVX    @DPTR,A
   2200              if ( destReq->outClusters )
   \   000145   EE           MOV     A,R6
   \   000146   2415         ADD     A,#0x15
   \   000148   F582         MOV     DPL,A
   \   00014A   E4           CLR     A
   \   00014B   3F           ADDC    A,R7
   \   00014C   F583         MOV     DPH,A
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   F8           MOV     R0,A
   \   000150   A3           INC     DPTR
   \   000151   E0           MOVX    A,@DPTR
   \   000152   F9           MOV     R1,A
   \   000153   E8           MOV     A,R0
   \   000154   49           ORL     A,R1
   \   000155   6056         JZ      ??ZDO_CopyMatchInfo_3
   2201              {
   2202                // Copy the clusters
   2203                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2204                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   \   000157                ; Setup parameters for call to function osal_memcpy
   \   000157   E5..         MOV     A,?V4
   \   000159   2415         ADD     A,#0x15
   \   00015B   F582         MOV     DPL,A
   \   00015D   E4           CLR     A
   \   00015E   35..         ADDC    A,?V5
   \   000160   F583         MOV     DPH,A
   \   000162   E0           MOVX    A,@DPTR
   \   000163   F5..         MOV     ?V0,A
   \   000165   A3           INC     DPTR
   \   000166   E0           MOVX    A,@DPTR
   \   000167   F5..         MOV     ?V1,A
   \   000169   75..00       MOV     ?V2,#0x0
   \   00016C   78..         MOV     R0,#?V0
   \   00016E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000171   E5..         MOV     A,?V4
   \   000173   2414         ADD     A,#0x14
   \   000175   F582         MOV     DPL,A
   \   000177   E4           CLR     A
   \   000178   35..         ADDC    A,?V5
   \   00017A   F583         MOV     DPH,A
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   FC           MOV     R4,A
   \   00017E   7D00         MOV     R5,#0x0
   \   000180   EC           MOV     A,R4
   \   000181   75F002       MOV     B,#0x2
   \   000184   A4           MUL     AB
   \   000185   CC           XCH     A,R4
   \   000186   A8F0         MOV     R0,B
   \   000188   75F000       MOV     B,#0x0
   \   00018B   A4           MUL     AB
   \   00018C   28           ADD     A,R0
   \   00018D   F8           MOV     R0,A
   \   00018E   75F002       MOV     B,#0x2
   \   000191   ED           MOV     A,R5
   \   000192   A4           MUL     AB
   \   000193   28           ADD     A,R0
   \   000194   FD           MOV     R5,A
   \   000195   EE           MOV     A,R6
   \   000196   2415         ADD     A,#0x15
   \   000198   F582         MOV     DPL,A
   \   00019A   E4           CLR     A
   \   00019B   3F           ADDC    A,R7
   \   00019C   F583         MOV     DPH,A
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   FA           MOV     R2,A
   \   0001A0   A3           INC     DPTR
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   FB           MOV     R3,A
   \   0001A3   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0001A6   7403         MOV     A,#0x3
   \   0001A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001AB   8003         SJMP    ??ZDO_CopyMatchInfo_2
   2205              }
   2206              else
   2207                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_3:
   \   0001AD   75..00       MOV     ?V3,#0x0
   2208            }
   2209          
   2210            if ( !allOK )
   \                     ??ZDO_CopyMatchInfo_2:
   \   0001B0   E5..         MOV     A,?V3
   \   0001B2   7046         JNZ     ??ZDO_CopyMatchInfo_4
   2211            {
   2212              if ( destReq->inClusters != NULL )
   \   0001B4   EE           MOV     A,R6
   \   0001B5   2412         ADD     A,#0x12
   \   0001B7   F582         MOV     DPL,A
   \   0001B9   E4           CLR     A
   \   0001BA   3F           ADDC    A,R7
   \   0001BB   F583         MOV     DPH,A
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   F8           MOV     R0,A
   \   0001BF   A3           INC     DPTR
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   F9           MOV     R1,A
   \   0001C2   E8           MOV     A,R0
   \   0001C3   49           ORL     A,R1
   \   0001C4   6011         JZ      ??ZDO_CopyMatchInfo_5
   2213                osal_mem_free( destReq->inClusters );
   \   0001C6                ; Setup parameters for call to function osal_mem_free
   \   0001C6   EE           MOV     A,R6
   \   0001C7   2412         ADD     A,#0x12
   \   0001C9   F582         MOV     DPL,A
   \   0001CB   E4           CLR     A
   \   0001CC   3F           ADDC    A,R7
   \   0001CD   F583         MOV     DPH,A
   \   0001CF   E0           MOVX    A,@DPTR
   \   0001D0   FA           MOV     R2,A
   \   0001D1   A3           INC     DPTR
   \   0001D2   E0           MOVX    A,@DPTR
   \   0001D3   FB           MOV     R3,A
   \   0001D4   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   2214              if ( destReq->outClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_5:
   \   0001D7   EE           MOV     A,R6
   \   0001D8   2415         ADD     A,#0x15
   \   0001DA   F582         MOV     DPL,A
   \   0001DC   E4           CLR     A
   \   0001DD   3F           ADDC    A,R7
   \   0001DE   F583         MOV     DPH,A
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   F8           MOV     R0,A
   \   0001E2   A3           INC     DPTR
   \   0001E3   E0           MOVX    A,@DPTR
   \   0001E4   F9           MOV     R1,A
   \   0001E5   E8           MOV     A,R0
   \   0001E6   49           ORL     A,R1
   \   0001E7   6011         JZ      ??ZDO_CopyMatchInfo_4
   2215                osal_mem_free( destReq->outClusters );
   \   0001E9                ; Setup parameters for call to function osal_mem_free
   \   0001E9   EE           MOV     A,R6
   \   0001EA   2415         ADD     A,#0x15
   \   0001EC   F582         MOV     DPL,A
   \   0001EE   E4           CLR     A
   \   0001EF   3F           ADDC    A,R7
   \   0001F0   F583         MOV     DPH,A
   \   0001F2   E0           MOVX    A,@DPTR
   \   0001F3   FA           MOV     R2,A
   \   0001F4   A3           INC     DPTR
   \   0001F5   E0           MOVX    A,@DPTR
   \   0001F6   FB           MOV     R3,A
   \   0001F7   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   2216            }
   2217          
   2218            return ( allOK );
   \                     ??ZDO_CopyMatchInfo_4:
   \   0001FA   A9..         MOV     R1,?V3
   \   0001FC   7F06         MOV     R7,#0x6
   \   0001FE   02....       LJMP    ?BANKED_LEAVE_XDATA
   2219          }
   2220          
   2221          /*********************************************************************
   2222           * @fn      ZDMatchSendState()
   2223           *
   2224           * @brief   State machine for the End device match message algorithm.
   2225           *
   2226           * @param  reason - state of algoritm
   2227           * @param  status - initial message status
   2228           * @param  TransSeq - next transaction sequence number
   2229           *
   2230           * @return  FALSE if error and we are not currently matching, TRUE
   2231           *          if success.
   2232           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2233          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   \                     ZDMatchSendState:
   2234          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   C0E0         PUSH    A
   \   00000D   7401         MOV     A,#0x1
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   D0E0         POP     A
   \   000014   F0           MOVX    @DPTR,A
   \   000015   EB           MOV     A,R3
   \   000016   C0E0         PUSH    A
   \   000018   7404         MOV     A,#0x4
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   D0E0         POP     A
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   89..         MOV     ?V2,R1
   2235            uint8 *dstIEEEAddr = NULL;
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   7400         MOV     A,#0x0
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   7400         MOV     A,#0x0
   \   00002D   F0           MOVX    @DPTR,A
   2236            uint8 dstEP = 0xFF;
   \   00002E   75..FF       MOV     ?V3,#-0x1
   2237            zAddrType_t dstAddr;
   2238            zAddrType_t destinationAddr;
   2239            uint16 msgType;
   2240            uint16 clusterID = 0xFFFF;
   \   000031   7EFF         MOV     R6,#-0x1
   \   000033   7FFF         MOV     R7,#-0x1
   2241            ZDEndDeviceBind_t *ed = NULL;
   \   000035   75..00       MOV     ?V6,#0x0
   \   000038   75..00       MOV     ?V7,#0x0
   2242            uint8 rspStatus = ZDP_SUCCESS;
   \   00003B   85..82       MOV     DPL,?XSP + 0
   \   00003E   85..83       MOV     DPH,?XSP + 1
   \   000041   7400         MOV     A,#0x0
   \   000043   F0           MOVX    @DPTR,A
   2243          
   2244            if ( matchED == NULL )
   \   000044   90....       MOV     DPTR,#matchED
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F8           MOV     R0,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F9           MOV     R1,A
   \   00004C   E8           MOV     A,R0
   \   00004D   49           ORL     A,R1
   \   00004E   7005         JNZ     ??ZDMatchSendState_0
   2245              return ( FALSE );
   \   000050   7900         MOV     R1,#0x0
   \   000052   02....       LJMP    ??ZDMatchSendState_1 & 0xFFFF
   2246          
   2247            // Check sequence number
   2248            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_0:
   \   000055   7403         MOV     A,#0x3
   \   000057   65..         XRL     A,?V2
   \   000059   6006         JZ      ??ZDMatchSendState_2
   \   00005B   7402         MOV     A,#0x2
   \   00005D   65..         XRL     A,?V2
   \   00005F   7021         JNZ     ??ZDMatchSendState_3
   2249            {
   2250              if ( TransSeq != matchED->transSeq )
   \                     ??ZDMatchSendState_2:
   \   000061   7404         MOV     A,#0x4
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F9           MOV     R1,A
   \   000068   90....       MOV     DPTR,#matchED
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F8           MOV     R0,A
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   C8           XCH     A,R0
   \   000070   2430         ADD     A,#0x30
   \   000072   F582         MOV     DPL,A
   \   000074   C8           XCH     A,R0
   \   000075   3400         ADDC    A,#0x0
   \   000077   F583         MOV     DPH,A
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   69           XRL     A,R1
   \   00007B   6005         JZ      ??ZDMatchSendState_3
   2251                return( FALSE ); // ignore the message
   \   00007D   7900         MOV     R1,#0x0
   \   00007F   02....       LJMP    ??ZDMatchSendState_1 & 0xFFFF
   2252            }
   2253          
   2254            // turn off timer
   2255            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   \                     ??ZDMatchSendState_3:
   \   000082                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000082   7C..         MOV     R4,#??ZDO_EndDeviceBindMatchTimeoutCB?relay & 0xff
   \   000084   7D..         MOV     R5,#(??ZDO_EndDeviceBindMatchTimeoutCB?relay >> 8) & 0xff
   \   000086   7A00         MOV     R2,#0x0
   \   000088   7B00         MOV     R3,#0x0
   \   00008A   12....       LCALL   ??APS_SetEndDeviceBindTimeout?relay; Banked call to: APS_SetEndDeviceBindTimeout
   2256          
   2257            if ( reason == ZDMATCH_REASON_TIMEOUT )
   \   00008D   7401         MOV     A,#0x1
   \   00008F   65..         XRL     A,?V2
   \   000091   7009         JNZ     ??ZDMatchSendState_4
   2258            {
   2259              rspStatus = ZDP_TIMEOUT;    // The process will stop
   \   000093   85..82       MOV     DPL,?XSP + 0
   \   000096   85..83       MOV     DPH,?XSP + 1
   \   000099   7485         MOV     A,#-0x7b
   \   00009B   F0           MOVX    @DPTR,A
   2260            }
   2261          
   2262            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   \                     ??ZDMatchSendState_4:
   \   00009C   E5..         MOV     A,?V2
   \   00009E   6006         JZ      ??ZDMatchSendState_5
   \   0000A0   7403         MOV     A,#0x3
   \   0000A2   65..         XRL     A,?V2
   \   0000A4   7035         JNZ     ??ZDMatchSendState_6
   2263            {
   2264              matchED->sending = ZDMATCH_SENDING_UNBIND;
   \                     ??ZDMatchSendState_5:
   \   0000A6   90....       MOV     DPTR,#matchED
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   F8           MOV     R0,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   C8           XCH     A,R0
   \   0000AE   242F         ADD     A,#0x2f
   \   0000B0   F582         MOV     DPL,A
   \   0000B2   C8           XCH     A,R0
   \   0000B3   3400         ADDC    A,#0x0
   \   0000B5   F583         MOV     DPH,A
   \   0000B7   7401         MOV     A,#0x1
   \   0000B9   F0           MOVX    @DPTR,A
   2265          
   2266              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   \   0000BA   7403         MOV     A,#0x3
   \   0000BC   65..         XRL     A,?V2
   \   0000BE   7053         JNZ     ??ZDMatchSendState_7
   \   0000C0   7401         MOV     A,#0x1
   \   0000C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   604B         JZ      ??ZDMatchSendState_7
   2267              {
   2268                rspStatus = status;
   \   0000C8   7401         MOV     A,#0x1
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   C0E0         PUSH    A
   \   0000D0   85..82       MOV     DPL,?XSP + 0
   \   0000D3   85..83       MOV     DPH,?XSP + 1
   \   0000D6   D0E0         POP     A
   \   0000D8   F0           MOVX    @DPTR,A
   \   0000D9   8038         SJMP    ??ZDMatchSendState_7
   2269              }
   2270            }
   2271            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_6:
   \   0000DB   7402         MOV     A,#0x2
   \   0000DD   65..         XRL     A,?V2
   \   0000DF   7032         JNZ     ??ZDMatchSendState_7
   2272            {
   2273              if ( status == ZDP_SUCCESS )
   \   0000E1   7401         MOV     A,#0x1
   \   0000E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   7016         JNZ     ??ZDMatchSendState_8
   2274              {
   2275                matchED->sending = ZDMATCH_SENDING_UNBIND;
   \   0000E9   90....       MOV     DPTR,#matchED
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   F8           MOV     R0,A
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   C8           XCH     A,R0
   \   0000F1   242F         ADD     A,#0x2f
   \   0000F3   F582         MOV     DPL,A
   \   0000F5   C8           XCH     A,R0
   \   0000F6   3400         ADDC    A,#0x0
   \   0000F8   F583         MOV     DPH,A
   \   0000FA   7401         MOV     A,#0x1
   \   0000FC   F0           MOVX    @DPTR,A
   \   0000FD   8014         SJMP    ??ZDMatchSendState_7
   2276              }
   2277              else
   2278              {
   2279                matchED->sending = ZDMATCH_SENDING_BIND;
   \                     ??ZDMatchSendState_8:
   \   0000FF   90....       MOV     DPTR,#matchED
   \   000102   E0           MOVX    A,@DPTR
   \   000103   F8           MOV     R0,A
   \   000104   A3           INC     DPTR
   \   000105   E0           MOVX    A,@DPTR
   \   000106   C8           XCH     A,R0
   \   000107   242F         ADD     A,#0x2f
   \   000109   F582         MOV     DPL,A
   \   00010B   C8           XCH     A,R0
   \   00010C   3400         ADDC    A,#0x0
   \   00010E   F583         MOV     DPH,A
   \   000110   7402         MOV     A,#0x2
   \   000112   F0           MOVX    @DPTR,A
   2280              }
   2281            }
   2282          
   2283            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   \                     ??ZDMatchSendState_7:
   \   000113   E5..         MOV     A,?V2
   \   000115   606A         JZ      ??ZDMatchSendState_9
   \   000117   90....       MOV     DPTR,#matchED
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   F8           MOV     R0,A
   \   00011C   A3           INC     DPTR
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   C8           XCH     A,R0
   \   00011F   242F         ADD     A,#0x2f
   \   000121   F582         MOV     DPL,A
   \   000123   C8           XCH     A,R0
   \   000124   3400         ADDC    A,#0x0
   \   000126   F583         MOV     DPH,A
   \   000128   E0           MOVX    A,@DPTR
   \   000129   6401         XRL     A,#0x1
   \   00012B   7054         JNZ     ??ZDMatchSendState_9
   2284            {
   2285              // Move to the next cluster ID
   2286              if ( matchED->ed1numMatched )
   \   00012D   90....       MOV     DPTR,#matchED
   \   000130   E0           MOVX    A,@DPTR
   \   000131   F8           MOV     R0,A
   \   000132   A3           INC     DPTR
   \   000133   E0           MOVX    A,@DPTR
   \   000134   C8           XCH     A,R0
   \   000135   2431         ADD     A,#0x31
   \   000137   F582         MOV     DPL,A
   \   000139   C8           XCH     A,R0
   \   00013A   3400         ADDC    A,#0x0
   \   00013C   F583         MOV     DPH,A
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   6017         JZ      ??ZDMatchSendState_10
   2287                matchED->ed1numMatched--;
   \   000141   90....       MOV     DPTR,#matchED
   \   000144   E0           MOVX    A,@DPTR
   \   000145   F8           MOV     R0,A
   \   000146   A3           INC     DPTR
   \   000147   E0           MOVX    A,@DPTR
   \   000148   C8           XCH     A,R0
   \   000149   2431         ADD     A,#0x31
   \   00014B   F582         MOV     DPL,A
   \   00014D   C8           XCH     A,R0
   \   00014E   3400         ADDC    A,#0x0
   \   000150   F583         MOV     DPH,A
   \   000152   E0           MOVX    A,@DPTR
   \   000153   24FF         ADD     A,#-0x1
   \   000155   F0           MOVX    @DPTR,A
   \   000156   8029         SJMP    ??ZDMatchSendState_9
   2288              else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_10:
   \   000158   90....       MOV     DPTR,#matchED
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   F8           MOV     R0,A
   \   00015D   A3           INC     DPTR
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   C8           XCH     A,R0
   \   000160   2434         ADD     A,#0x34
   \   000162   F582         MOV     DPL,A
   \   000164   C8           XCH     A,R0
   \   000165   3400         ADDC    A,#0x0
   \   000167   F583         MOV     DPH,A
   \   000169   E0           MOVX    A,@DPTR
   \   00016A   6015         JZ      ??ZDMatchSendState_9
   2289                matchED->ed2numMatched--;
   \   00016C   90....       MOV     DPTR,#matchED
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   F8           MOV     R0,A
   \   000171   A3           INC     DPTR
   \   000172   E0           MOVX    A,@DPTR
   \   000173   C8           XCH     A,R0
   \   000174   2434         ADD     A,#0x34
   \   000176   F582         MOV     DPL,A
   \   000178   C8           XCH     A,R0
   \   000179   3400         ADDC    A,#0x0
   \   00017B   F583         MOV     DPH,A
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   24FF         ADD     A,#-0x1
   \   000180   F0           MOVX    @DPTR,A
   2290            }
   2291          
   2292            // What message do we send now
   2293            if ( matchED->ed1numMatched )
   \                     ??ZDMatchSendState_9:
   \   000181   90....       MOV     DPTR,#matchED
   \   000184   E0           MOVX    A,@DPTR
   \   000185   F8           MOV     R0,A
   \   000186   A3           INC     DPTR
   \   000187   E0           MOVX    A,@DPTR
   \   000188   C8           XCH     A,R0
   \   000189   2431         ADD     A,#0x31
   \   00018B   F582         MOV     DPL,A
   \   00018D   C8           XCH     A,R0
   \   00018E   3400         ADDC    A,#0x0
   \   000190   F583         MOV     DPH,A
   \   000192   E0           MOVX    A,@DPTR
   \   000193   7003         JNZ     $+5
   \   000195   02....       LJMP    ??ZDMatchSendState_11 & 0xFFFF
   2294            {
   2295              ed = &(matchED->ed1);
   \   000198   90....       MOV     DPTR,#matchED
   \   00019B   E0           MOVX    A,@DPTR
   \   00019C   F8           MOV     R0,A
   \   00019D   A3           INC     DPTR
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   F9           MOV     R1,A
   \   0001A0   88..         MOV     ?V6,R0
   \   0001A2   89..         MOV     ?V7,R1
   2296              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   \   0001A4   90....       MOV     DPTR,#matchED
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   F8           MOV     R0,A
   \   0001A9   A3           INC     DPTR
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   C8           XCH     A,R0
   \   0001AC   2431         ADD     A,#0x31
   \   0001AE   F582         MOV     DPL,A
   \   0001B0   C8           XCH     A,R0
   \   0001B1   3400         ADDC    A,#0x0
   \   0001B3   F583         MOV     DPH,A
   \   0001B5   E0           MOVX    A,@DPTR
   \   0001B6   FA           MOV     R2,A
   \   0001B7   7B00         MOV     R3,#0x0
   \   0001B9   EA           MOV     A,R2
   \   0001BA   75F002       MOV     B,#0x2
   \   0001BD   A4           MUL     AB
   \   0001BE   CA           XCH     A,R2
   \   0001BF   A8F0         MOV     R0,B
   \   0001C1   75F000       MOV     B,#0x0
   \   0001C4   A4           MUL     AB
   \   0001C5   28           ADD     A,R0
   \   0001C6   F8           MOV     R0,A
   \   0001C7   75F002       MOV     B,#0x2
   \   0001CA   EB           MOV     A,R3
   \   0001CB   A4           MUL     AB
   \   0001CC   28           ADD     A,R0
   \   0001CD   FB           MOV     R3,A
   \   0001CE   90....       MOV     DPTR,#matchED
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   F8           MOV     R0,A
   \   0001D3   A3           INC     DPTR
   \   0001D4   E0           MOVX    A,@DPTR
   \   0001D5   C8           XCH     A,R0
   \   0001D6   2432         ADD     A,#0x32
   \   0001D8   F582         MOV     DPL,A
   \   0001DA   C8           XCH     A,R0
   \   0001DB   3400         ADDC    A,#0x0
   \   0001DD   F583         MOV     DPH,A
   \   0001DF   E0           MOVX    A,@DPTR
   \   0001E0   2A           ADD     A,R2
   \   0001E1   F8           MOV     R0,A
   \   0001E2   A3           INC     DPTR
   \   0001E3   E0           MOVX    A,@DPTR
   \   0001E4   3B           ADDC    A,R3
   \   0001E5   F9           MOV     R1,A
   \   0001E6   E8           MOV     A,R0
   \   0001E7   24FE         ADD     A,#-0x2
   \   0001E9   F582         MOV     DPL,A
   \   0001EB   E9           MOV     A,R1
   \   0001EC   34FF         ADDC    A,#-0x1
   \   0001EE   F583         MOV     DPH,A
   \   0001F0   E0           MOVX    A,@DPTR
   \   0001F1   FE           MOV     R6,A
   \   0001F2   A3           INC     DPTR
   \   0001F3   E0           MOVX    A,@DPTR
   \   0001F4   FF           MOV     R7,A
   2297              dstIEEEAddr = matchED->ed2.ieeeAddr;
   \   0001F5   90....       MOV     DPTR,#matchED
   \   0001F8   E0           MOVX    A,@DPTR
   \   0001F9   241D         ADD     A,#0x1d
   \   0001FB   F8           MOV     R0,A
   \   0001FC   A3           INC     DPTR
   \   0001FD   E0           MOVX    A,@DPTR
   \   0001FE   3400         ADDC    A,#0x0
   \   000200   F9           MOV     R1,A
   \   000201   7402         MOV     A,#0x2
   \   000203   12....       LCALL   ?XSTACK_DISP0_8
   \   000206   E8           MOV     A,R0
   \   000207   F0           MOVX    @DPTR,A
   \   000208   A3           INC     DPTR
   \   000209   E9           MOV     A,R1
   \   00020A   F0           MOVX    @DPTR,A
   2298              dstEP = matchED->ed2.endpoint;
   \   00020B   90....       MOV     DPTR,#matchED
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   F8           MOV     R0,A
   \   000210   A3           INC     DPTR
   \   000211   E0           MOVX    A,@DPTR
   \   000212   C8           XCH     A,R0
   \   000213   2425         ADD     A,#0x25
   \   000215   F582         MOV     DPL,A
   \   000217   C8           XCH     A,R0
   \   000218   3400         ADDC    A,#0x0
   \   00021A   F583         MOV     DPH,A
   \   00021C   E0           MOVX    A,@DPTR
   \   00021D   F5..         MOV     ?V3,A
   \   00021F   02....       LJMP    ??ZDMatchSendState_12 & 0xFFFF
   2299            }
   2300            else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_11:
   \   000222   90....       MOV     DPTR,#matchED
   \   000225   E0           MOVX    A,@DPTR
   \   000226   F8           MOV     R0,A
   \   000227   A3           INC     DPTR
   \   000228   E0           MOVX    A,@DPTR
   \   000229   C8           XCH     A,R0
   \   00022A   2434         ADD     A,#0x34
   \   00022C   F582         MOV     DPL,A
   \   00022E   C8           XCH     A,R0
   \   00022F   3400         ADDC    A,#0x0
   \   000231   F583         MOV     DPH,A
   \   000233   E0           MOVX    A,@DPTR
   \   000234   7003         JNZ     $+5
   \   000236   02....       LJMP    ??ZDMatchSendState_12 & 0xFFFF
   2301            {
   2302              ed = &(matchED->ed2);
   \   000239   90....       MOV     DPTR,#matchED
   \   00023C   E0           MOVX    A,@DPTR
   \   00023D   2417         ADD     A,#0x17
   \   00023F   F8           MOV     R0,A
   \   000240   A3           INC     DPTR
   \   000241   E0           MOVX    A,@DPTR
   \   000242   3400         ADDC    A,#0x0
   \   000244   F9           MOV     R1,A
   \   000245   88..         MOV     ?V6,R0
   \   000247   89..         MOV     ?V7,R1
   2303              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   \   000249   90....       MOV     DPTR,#matchED
   \   00024C   E0           MOVX    A,@DPTR
   \   00024D   F8           MOV     R0,A
   \   00024E   A3           INC     DPTR
   \   00024F   E0           MOVX    A,@DPTR
   \   000250   C8           XCH     A,R0
   \   000251   2434         ADD     A,#0x34
   \   000253   F582         MOV     DPL,A
   \   000255   C8           XCH     A,R0
   \   000256   3400         ADDC    A,#0x0
   \   000258   F583         MOV     DPH,A
   \   00025A   E0           MOVX    A,@DPTR
   \   00025B   FA           MOV     R2,A
   \   00025C   7B00         MOV     R3,#0x0
   \   00025E   EA           MOV     A,R2
   \   00025F   75F002       MOV     B,#0x2
   \   000262   A4           MUL     AB
   \   000263   CA           XCH     A,R2
   \   000264   A8F0         MOV     R0,B
   \   000266   75F000       MOV     B,#0x0
   \   000269   A4           MUL     AB
   \   00026A   28           ADD     A,R0
   \   00026B   F8           MOV     R0,A
   \   00026C   75F002       MOV     B,#0x2
   \   00026F   EB           MOV     A,R3
   \   000270   A4           MUL     AB
   \   000271   28           ADD     A,R0
   \   000272   FB           MOV     R3,A
   \   000273   90....       MOV     DPTR,#matchED
   \   000276   E0           MOVX    A,@DPTR
   \   000277   F8           MOV     R0,A
   \   000278   A3           INC     DPTR
   \   000279   E0           MOVX    A,@DPTR
   \   00027A   C8           XCH     A,R0
   \   00027B   2435         ADD     A,#0x35
   \   00027D   F582         MOV     DPL,A
   \   00027F   C8           XCH     A,R0
   \   000280   3400         ADDC    A,#0x0
   \   000282   F583         MOV     DPH,A
   \   000284   E0           MOVX    A,@DPTR
   \   000285   2A           ADD     A,R2
   \   000286   F8           MOV     R0,A
   \   000287   A3           INC     DPTR
   \   000288   E0           MOVX    A,@DPTR
   \   000289   3B           ADDC    A,R3
   \   00028A   F9           MOV     R1,A
   \   00028B   E8           MOV     A,R0
   \   00028C   24FE         ADD     A,#-0x2
   \   00028E   F582         MOV     DPL,A
   \   000290   E9           MOV     A,R1
   \   000291   34FF         ADDC    A,#-0x1
   \   000293   F583         MOV     DPH,A
   \   000295   E0           MOVX    A,@DPTR
   \   000296   FE           MOV     R6,A
   \   000297   A3           INC     DPTR
   \   000298   E0           MOVX    A,@DPTR
   \   000299   FF           MOV     R7,A
   2304              dstIEEEAddr = matchED->ed1.ieeeAddr;
   \   00029A   90....       MOV     DPTR,#matchED
   \   00029D   E0           MOVX    A,@DPTR
   \   00029E   2406         ADD     A,#0x6
   \   0002A0   F8           MOV     R0,A
   \   0002A1   A3           INC     DPTR
   \   0002A2   E0           MOVX    A,@DPTR
   \   0002A3   3400         ADDC    A,#0x0
   \   0002A5   F9           MOV     R1,A
   \   0002A6   7402         MOV     A,#0x2
   \   0002A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AB   E8           MOV     A,R0
   \   0002AC   F0           MOVX    @DPTR,A
   \   0002AD   A3           INC     DPTR
   \   0002AE   E9           MOV     A,R1
   \   0002AF   F0           MOVX    @DPTR,A
   2305              dstEP = matchED->ed1.endpoint;
   \   0002B0   90....       MOV     DPTR,#matchED
   \   0002B3   E0           MOVX    A,@DPTR
   \   0002B4   F8           MOV     R0,A
   \   0002B5   A3           INC     DPTR
   \   0002B6   E0           MOVX    A,@DPTR
   \   0002B7   C8           XCH     A,R0
   \   0002B8   240E         ADD     A,#0xe
   \   0002BA   F582         MOV     DPL,A
   \   0002BC   C8           XCH     A,R0
   \   0002BD   3400         ADDC    A,#0x0
   \   0002BF   F583         MOV     DPH,A
   \   0002C1   E0           MOVX    A,@DPTR
   \   0002C2   F5..         MOV     ?V3,A
   2306            }
   2307          
   2308            dstAddr.addrMode = Addr16Bit;
   \                     ??ZDMatchSendState_12:
   \   0002C4   740D         MOV     A,#0xd
   \   0002C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C9   7402         MOV     A,#0x2
   \   0002CB   F0           MOVX    @DPTR,A
   2309          
   2310            // Send the next message
   2311            if ( rspStatus == ZDP_SUCCESS && ed )
   \   0002CC   85..82       MOV     DPL,?XSP + 0
   \   0002CF   85..83       MOV     DPH,?XSP + 1
   \   0002D2   E0           MOVX    A,@DPTR
   \   0002D3   6003         JZ      $+5
   \   0002D5   02....       LJMP    ??ZDMatchSendState_13 & 0xFFFF
   \   0002D8   E5..         MOV     A,?V6
   \   0002DA   45..         ORL     A,?V7
   \   0002DC   7003         JNZ     $+5
   \   0002DE   02....       LJMP    ??ZDMatchSendState_13 & 0xFFFF
   2312            {
   2313              // Send unbind/bind message to source
   2314              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   \   0002E1   90....       MOV     DPTR,#matchED
   \   0002E4   E0           MOVX    A,@DPTR
   \   0002E5   F8           MOV     R0,A
   \   0002E6   A3           INC     DPTR
   \   0002E7   E0           MOVX    A,@DPTR
   \   0002E8   C8           XCH     A,R0
   \   0002E9   242F         ADD     A,#0x2f
   \   0002EB   F582         MOV     DPL,A
   \   0002ED   C8           XCH     A,R0
   \   0002EE   3400         ADDC    A,#0x0
   \   0002F0   F583         MOV     DPH,A
   \   0002F2   E0           MOVX    A,@DPTR
   \   0002F3   6401         XRL     A,#0x1
   \   0002F5   7008         JNZ     ??ZDMatchSendState_14
   2315                msgType = Unbind_req;
   \   0002F7   75..22       MOV     ?V0,#0x22
   \   0002FA   75..00       MOV     ?V1,#0x0
   \   0002FD   8006         SJMP    ??ZDMatchSendState_15
   2316              else
   2317                msgType = Bind_req;
   \                     ??ZDMatchSendState_14:
   \   0002FF   75..21       MOV     ?V0,#0x21
   \   000302   75..00       MOV     ?V1,#0x0
   2318          
   2319              dstAddr.addr.shortAddr = ed->srcAddr;
   \                     ??ZDMatchSendState_15:
   \   000305   85..82       MOV     DPL,?V6
   \   000308   85..83       MOV     DPH,?V7
   \   00030B   A3           INC     DPTR
   \   00030C   A3           INC     DPTR
   \   00030D   E0           MOVX    A,@DPTR
   \   00030E   F8           MOV     R0,A
   \   00030F   A3           INC     DPTR
   \   000310   E0           MOVX    A,@DPTR
   \   000311   F9           MOV     R1,A
   \   000312   7405         MOV     A,#0x5
   \   000314   12....       LCALL   ?XSTACK_DISP0_8
   \   000317   E8           MOV     A,R0
   \   000318   F0           MOVX    @DPTR,A
   \   000319   A3           INC     DPTR
   \   00031A   E9           MOV     A,R1
   \   00031B   F0           MOVX    @DPTR,A
   2320          
   2321              // Save off the transaction sequence number
   2322              matchED->transSeq = ZDP_TransID;
   \   00031C   90....       MOV     DPTR,#ZDP_TransID
   \   00031F   E0           MOVX    A,@DPTR
   \   000320   C0E0         PUSH    A
   \   000322   90....       MOV     DPTR,#matchED
   \   000325   E0           MOVX    A,@DPTR
   \   000326   F8           MOV     R0,A
   \   000327   A3           INC     DPTR
   \   000328   E0           MOVX    A,@DPTR
   \   000329   C8           XCH     A,R0
   \   00032A   2430         ADD     A,#0x30
   \   00032C   F582         MOV     DPL,A
   \   00032E   C8           XCH     A,R0
   \   00032F   3400         ADDC    A,#0x0
   \   000331   F583         MOV     DPH,A
   \   000333   D0E0         POP     A
   \   000335   F0           MOVX    @DPTR,A
   2323          
   2324              destinationAddr.addrMode = Addr64Bit;
   \   000336   7416         MOV     A,#0x16
   \   000338   12....       LCALL   ?XSTACK_DISP0_8
   \   00033B   7403         MOV     A,#0x3
   \   00033D   F0           MOVX    @DPTR,A
   2325              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   \   00033E                ; Setup parameters for call to function sAddrExtCpy
   \   00033E   7402         MOV     A,#0x2
   \   000340   12....       LCALL   ?XSTACK_DISP0_8
   \   000343   E0           MOVX    A,@DPTR
   \   000344   FC           MOV     R4,A
   \   000345   A3           INC     DPTR
   \   000346   E0           MOVX    A,@DPTR
   \   000347   FD           MOV     R5,A
   \   000348   740E         MOV     A,#0xe
   \   00034A   12....       LCALL   ?XSTACK_DISP101_8
   \   00034D   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   2326          
   2327              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2328                  &destinationAddr, dstEP, ed->SecurityUse );
   \   000350                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000350   85..82       MOV     DPL,?V6
   \   000353   85..83       MOV     DPH,?V7
   \   000356   A3           INC     DPTR
   \   000357   E0           MOVX    A,@DPTR
   \   000358   F5..         MOV     ?V4,A
   \   00035A   78..         MOV     R0,#?V4
   \   00035C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00035F   E5..         MOV     A,?V3
   \   000361   F5..         MOV     ?V4,A
   \   000363   78..         MOV     R0,#?V4
   \   000365   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000368   7410         MOV     A,#0x10
   \   00036A   12....       LCALL   ?XSTACK_DISP100_8
   \   00036D   88..         MOV     ?V4,R0
   \   00036F   89..         MOV     ?V5,R1
   \   000371   78..         MOV     R0,#?V4
   \   000373   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000376   8E..         MOV     ?V4,R6
   \   000378   8F..         MOV     ?V5,R7
   \   00037A   78..         MOV     R0,#?V4
   \   00037C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00037F   E5..         MOV     A,?V6
   \   000381   2406         ADD     A,#0x6
   \   000383   F5..         MOV     ?V4,A
   \   000385   E4           CLR     A
   \   000386   35..         ADDC    A,?V7
   \   000388   F5..         MOV     ?V5,A
   \   00038A   78..         MOV     R0,#?V4
   \   00038C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00038F   E5..         MOV     A,?V6
   \   000391   240E         ADD     A,#0xe
   \   000393   F582         MOV     DPL,A
   \   000395   E4           CLR     A
   \   000396   35..         ADDC    A,?V7
   \   000398   F583         MOV     DPH,A
   \   00039A   E0           MOVX    A,@DPTR
   \   00039B   F9           MOV     R1,A
   \   00039C   740D         MOV     A,#0xd
   \   00039E   12....       LCALL   ?XSTACK_DISP102_8
   \   0003A1   AA..         MOV     R2,?V0
   \   0003A3   AB..         MOV     R3,?V1
   \   0003A5   12....       LCALL   ??ZDP_BindUnbindReq?relay; Banked call to: ZDP_BindUnbindReq
   \   0003A8   7408         MOV     A,#0x8
   \   0003AA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003AD   E9           MOV     A,R1
   2329          
   2330              // Set timeout for response
   2331              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   0003AE                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   0003AE   7C..         MOV     R4,#??ZDO_EndDeviceBindMatchTimeoutCB?relay & 0xff
   \   0003B0   7D..         MOV     R5,#(??ZDO_EndDeviceBindMatchTimeoutCB?relay >> 8) & 0xff
   \   0003B2   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   0003B5   E0           MOVX    A,@DPTR
   \   0003B6   FA           MOV     R2,A
   \   0003B7   A3           INC     DPTR
   \   0003B8   E0           MOVX    A,@DPTR
   \   0003B9   FB           MOV     R3,A
   \   0003BA   12....       LCALL   ??APS_SetEndDeviceBindTimeout?relay; Banked call to: APS_SetEndDeviceBindTimeout
   \   0003BD   02....       LJMP    ??ZDMatchSendState_16 & 0xFFFF
   2332            }
   2333            else
   2334            {
   2335              // Send the response messages to requesting devices
   2336              // send response to first requester
   2337              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \                     ??ZDMatchSendState_13:
   \   0003C0   90....       MOV     DPTR,#matchED
   \   0003C3   E0           MOVX    A,@DPTR
   \   0003C4   F8           MOV     R0,A
   \   0003C5   A3           INC     DPTR
   \   0003C6   E0           MOVX    A,@DPTR
   \   0003C7   F583         MOV     DPH,A
   \   0003C9   8882         MOV     DPL,R0
   \   0003CB   A3           INC     DPTR
   \   0003CC   A3           INC     DPTR
   \   0003CD   E0           MOVX    A,@DPTR
   \   0003CE   F8           MOV     R0,A
   \   0003CF   A3           INC     DPTR
   \   0003D0   E0           MOVX    A,@DPTR
   \   0003D1   F9           MOV     R1,A
   \   0003D2   7405         MOV     A,#0x5
   \   0003D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0003D7   E8           MOV     A,R0
   \   0003D8   F0           MOVX    @DPTR,A
   \   0003D9   A3           INC     DPTR
   \   0003DA   E9           MOV     A,R1
   \   0003DB   F0           MOVX    @DPTR,A
   2338              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   \   0003DC                ; Setup parameters for call to function ZDP_SendData
   \   0003DC   90....       MOV     DPTR,#matchED
   \   0003DF   E0           MOVX    A,@DPTR
   \   0003E0   F8           MOV     R0,A
   \   0003E1   A3           INC     DPTR
   \   0003E2   E0           MOVX    A,@DPTR
   \   0003E3   F583         MOV     DPH,A
   \   0003E5   8882         MOV     DPL,R0
   \   0003E7   A3           INC     DPTR
   \   0003E8   E0           MOVX    A,@DPTR
   \   0003E9   F5..         MOV     ?V4,A
   \   0003EB   78..         MOV     R0,#?V4
   \   0003ED   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003F0   7401         MOV     A,#0x1
   \   0003F2   12....       LCALL   ?XSTACK_DISP100_8
   \   0003F5   88..         MOV     ?V4,R0
   \   0003F7   89..         MOV     ?V5,R1
   \   0003F9   78..         MOV     R0,#?V4
   \   0003FB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003FE   75..20       MOV     ?V4,#0x20
   \   000401   75..80       MOV     ?V5,#-0x80
   \   000404   78..         MOV     R0,#?V4
   \   000406   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000409   7901         MOV     R1,#0x1
   \   00040B   740A         MOV     A,#0xa
   \   00040D   12....       LCALL   ?XSTACK_DISP102_8
   \   000410   90....       MOV     DPTR,#matchED
   \   000413   E0           MOVX    A,@DPTR
   \   000414   FA           MOV     R2,A
   \   000415   A3           INC     DPTR
   \   000416   E0           MOVX    A,@DPTR
   \   000417   FB           MOV     R3,A
   \   000418   12....       LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
   \   00041B   7405         MOV     A,#0x5
   \   00041D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000420   E9           MOV     A,R1
   2339          
   2340              // send response to second requester
   2341              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   000421   90....       MOV     DPTR,#matchED
   \   000424   E0           MOVX    A,@DPTR
   \   000425   F8           MOV     R0,A
   \   000426   A3           INC     DPTR
   \   000427   E0           MOVX    A,@DPTR
   \   000428   C8           XCH     A,R0
   \   000429   242E         ADD     A,#0x2e
   \   00042B   F582         MOV     DPL,A
   \   00042D   C8           XCH     A,R0
   \   00042E   3400         ADDC    A,#0x0
   \   000430   F583         MOV     DPH,A
   \   000432   E0           MOVX    A,@DPTR
   \   000433   6402         XRL     A,#0x2
   \   000435   706E         JNZ     ??ZDMatchSendState_17
   2342              {
   2343                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   \   000437   90....       MOV     DPTR,#matchED
   \   00043A   E0           MOVX    A,@DPTR
   \   00043B   F8           MOV     R0,A
   \   00043C   A3           INC     DPTR
   \   00043D   E0           MOVX    A,@DPTR
   \   00043E   C8           XCH     A,R0
   \   00043F   2419         ADD     A,#0x19
   \   000441   F582         MOV     DPL,A
   \   000443   C8           XCH     A,R0
   \   000444   3400         ADDC    A,#0x0
   \   000446   F583         MOV     DPH,A
   \   000448   E0           MOVX    A,@DPTR
   \   000449   F8           MOV     R0,A
   \   00044A   A3           INC     DPTR
   \   00044B   E0           MOVX    A,@DPTR
   \   00044C   F9           MOV     R1,A
   \   00044D   7405         MOV     A,#0x5
   \   00044F   12....       LCALL   ?XSTACK_DISP0_8
   \   000452   E8           MOV     A,R0
   \   000453   F0           MOVX    @DPTR,A
   \   000454   A3           INC     DPTR
   \   000455   E9           MOV     A,R1
   \   000456   F0           MOVX    @DPTR,A
   2344                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   \   000457                ; Setup parameters for call to function ZDP_SendData
   \   000457   90....       MOV     DPTR,#matchED
   \   00045A   E0           MOVX    A,@DPTR
   \   00045B   F8           MOV     R0,A
   \   00045C   A3           INC     DPTR
   \   00045D   E0           MOVX    A,@DPTR
   \   00045E   C8           XCH     A,R0
   \   00045F   2418         ADD     A,#0x18
   \   000461   F582         MOV     DPL,A
   \   000463   C8           XCH     A,R0
   \   000464   3400         ADDC    A,#0x0
   \   000466   F583         MOV     DPH,A
   \   000468   E0           MOVX    A,@DPTR
   \   000469   F5..         MOV     ?V4,A
   \   00046B   78..         MOV     R0,#?V4
   \   00046D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000470   7401         MOV     A,#0x1
   \   000472   12....       LCALL   ?XSTACK_DISP100_8
   \   000475   88..         MOV     ?V4,R0
   \   000477   89..         MOV     ?V5,R1
   \   000479   78..         MOV     R0,#?V4
   \   00047B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00047E   75..20       MOV     ?V4,#0x20
   \   000481   75..80       MOV     ?V5,#-0x80
   \   000484   78..         MOV     R0,#?V4
   \   000486   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000489   7901         MOV     R1,#0x1
   \   00048B   740A         MOV     A,#0xa
   \   00048D   12....       LCALL   ?XSTACK_DISP102_8
   \   000490   90....       MOV     DPTR,#matchED
   \   000493   E0           MOVX    A,@DPTR
   \   000494   2417         ADD     A,#0x17
   \   000496   FA           MOV     R2,A
   \   000497   A3           INC     DPTR
   \   000498   E0           MOVX    A,@DPTR
   \   000499   3400         ADDC    A,#0x0
   \   00049B   FB           MOV     R3,A
   \   00049C   12....       LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
   \   00049F   7405         MOV     A,#0x5
   \   0004A1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004A4   E9           MOV     A,R1
   2345              }
   2346          
   2347              // Process ended - release memory used
   2348              ZDO_RemoveMatchMemory();
   \                     ??ZDMatchSendState_17:
   \   0004A5                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   0004A5   12....       LCALL   ??ZDO_RemoveMatchMemory?relay; Banked call to: ZDO_RemoveMatchMemory
   2349            }
   2350          
   2351            return ( TRUE );
   \                     ??ZDMatchSendState_16:
   \   0004A8   7901         MOV     R1,#0x1
   \                     ??ZDMatchSendState_1:
   \   0004AA   7417         MOV     A,#0x17
   \   0004AC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004AF   7F08         MOV     R7,#0x8
   \   0004B1   02....       LJMP    ?BANKED_LEAVE_XDATA
   2352          }
   2353          
   2354          /*********************************************************************
   2355           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2356           *
   2357           * @brief   End device bind timeout.
   2358           *
   2359           * @param  none
   2360           *
   2361           * @return  none
   2362           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2363          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   \                     ZDO_EndDeviceBindMatchTimeoutCB:
   2364          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2365            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   \   000004                ; Setup parameters for call to function ZDMatchSendState
   \   000004   7B00         MOV     R3,#0x0
   \   000006   7A85         MOV     R2,#-0x7b
   \   000008   7901         MOV     R1,#0x1
   \   00000A   12....       LCALL   ??ZDMatchSendState?relay; Banked call to: ZDMatchSendState
   \   00000D   E9           MOV     A,R1
   2366          }
   \   00000E   D083         POP     DPH
   \   000010   D082         POP     DPL
   \   000012   02....       LJMP    ?BRET
   2367          
   2368          /*********************************************************************
   2369           * ZDO MESSAGE PARSING API FUNCTIONS
   2370           */
   2371          
   2372          /*********************************************************************
   2373           * @fn          ZDO_ParseEndDeviceBindReq
   2374           *
   2375           * @brief       This function parses the End_Device_Bind_req message.
   2376           *
   2377           *     NOTE:  The clusters lists in bindReq are allocated in this
   2378           *            function and must be freed by that calling function.
   2379           *
   2380           * @param       inMsg  - incoming message (request)
   2381           * @param       bindReq - pointer to place to parse message to
   2382           *
   2383           * @return      none
   2384           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2385          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2386          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   2387            uint8 *msg;
   2388          
   2389            // Parse the message
   2390            bindReq->TransSeq = inMsg->TransSeq;
   \   00000D   E5..         MOV     A,?V2
   \   00000F   240F         ADD     A,#0xf
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   35..         ADDC    A,?V3
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   C0E0         PUSH    A
   \   00001B   85..82       MOV     DPL,?V0
   \   00001E   85..83       MOV     DPH,?V1
   \   000021   D0E0         POP     A
   \   000023   F0           MOVX    @DPTR,A
   2391            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \   000024   85..82       MOV     DPL,?V2
   \   000027   85..83       MOV     DPH,?V3
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   85..82       MOV     DPL,?V0
   \   000034   85..83       MOV     DPH,?V1
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   E8           MOV     A,R0
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   E9           MOV     A,R1
   \   00003D   F0           MOVX    @DPTR,A
   2392            bindReq->SecurityUse = inMsg->SecurityUse;
   \   00003E   E5..         MOV     A,?V2
   \   000040   240E         ADD     A,#0xe
   \   000042   F582         MOV     DPL,A
   \   000044   E4           CLR     A
   \   000045   35..         ADDC    A,?V3
   \   000047   F583         MOV     DPH,A
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   C0E0         PUSH    A
   \   00004C   85..82       MOV     DPL,?V0
   \   00004F   85..83       MOV     DPH,?V1
   \   000052   A3           INC     DPTR
   \   000053   D0E0         POP     A
   \   000055   F0           MOVX    @DPTR,A
   2393            msg = inMsg->asdu;
   \   000056   E5..         MOV     A,?V2
   \   000058   2413         ADD     A,#0x13
   \   00005A   F582         MOV     DPL,A
   \   00005C   E4           CLR     A
   \   00005D   35..         ADDC    A,?V3
   \   00005F   F583         MOV     DPH,A
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F8           MOV     R0,A
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F9           MOV     R1,A
   \   000066   E8           MOV     A,R0
   \   000067   FE           MOV     R6,A
   \   000068   E9           MOV     A,R1
   \   000069   FF           MOV     R7,A
   2394          
   2395            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \   00006A   8E82         MOV     DPL,R6
   \   00006C   8F83         MOV     DPH,R7
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   FA           MOV     R2,A
   \   000070   7B00         MOV     R3,#0x0
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F8           MOV     R0,A
   \   000079   7900         MOV     R1,#0x0
   \   00007B   E4           CLR     A
   \   00007C   C8           XCH     A,R0
   \   00007D   F9           MOV     R1,A
   \   00007E   EA           MOV     A,R2
   \   00007F   28           ADD     A,R0
   \   000080   F8           MOV     R0,A
   \   000081   EB           MOV     A,R3
   \   000082   39           ADDC    A,R1
   \   000083   F9           MOV     R1,A
   \   000084   85..82       MOV     DPL,?V0
   \   000087   85..83       MOV     DPH,?V1
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   E8           MOV     A,R0
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A3           INC     DPTR
   \   000091   E9           MOV     A,R1
   \   000092   F0           MOVX    @DPTR,A
   2396            msg += 2;
   \   000093   EE           MOV     A,R6
   \   000094   2402         ADD     A,#0x2
   \   000096   FE           MOV     R6,A
   \   000097   5001         JNC     ??ZDO_ParseEndDeviceBindReq_0
   \   000099   0F           INC     R7
   2397          
   2398            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   00009A                ; Setup parameters for call to function sAddrExtCpy
   \   00009A   EE           MOV     A,R6
   \   00009B   FC           MOV     R4,A
   \   00009C   EF           MOV     A,R7
   \   00009D   FD           MOV     R5,A
   \   00009E   E5..         MOV     A,?V0
   \   0000A0   2406         ADD     A,#0x6
   \   0000A2   FA           MOV     R2,A
   \   0000A3   E4           CLR     A
   \   0000A4   35..         ADDC    A,?V1
   \   0000A6   FB           MOV     R3,A
   \   0000A7   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   2399            msg += Z_EXTADDR_LEN;
   \   0000AA   EE           MOV     A,R6
   \   0000AB   2408         ADD     A,#0x8
   \   0000AD   FE           MOV     R6,A
   \   0000AE   5001         JNC     ??ZDO_ParseEndDeviceBindReq_1
   \   0000B0   0F           INC     R7
   2400          
   2401            bindReq->endpoint = *msg++;
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   0000B1   8E82         MOV     DPL,R6
   \   0000B3   8F83         MOV     DPH,R7
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   C0E0         PUSH    A
   \   0000B8   E5..         MOV     A,?V0
   \   0000BA   240E         ADD     A,#0xe
   \   0000BC   F582         MOV     DPL,A
   \   0000BE   E4           CLR     A
   \   0000BF   35..         ADDC    A,?V1
   \   0000C1   F583         MOV     DPH,A
   \   0000C3   D0E0         POP     A
   \   0000C5   F0           MOVX    @DPTR,A
   \   0000C6   8E82         MOV     DPL,R6
   \   0000C8   8F83         MOV     DPH,R7
   \   0000CA   A3           INC     DPTR
   \   0000CB   AE82         MOV     R6,DPL
   \   0000CD   AF83         MOV     R7,DPH
   2402            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \   0000CF   8E82         MOV     DPL,R6
   \   0000D1   8F83         MOV     DPH,R7
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   FA           MOV     R2,A
   \   0000D5   7B00         MOV     R3,#0x0
   \   0000D7   8E82         MOV     DPL,R6
   \   0000D9   8F83         MOV     DPH,R7
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   F8           MOV     R0,A
   \   0000DE   7900         MOV     R1,#0x0
   \   0000E0   E4           CLR     A
   \   0000E1   C8           XCH     A,R0
   \   0000E2   F9           MOV     R1,A
   \   0000E3   EA           MOV     A,R2
   \   0000E4   28           ADD     A,R0
   \   0000E5   F8           MOV     R0,A
   \   0000E6   EB           MOV     A,R3
   \   0000E7   39           ADDC    A,R1
   \   0000E8   F9           MOV     R1,A
   \   0000E9   E5..         MOV     A,?V0
   \   0000EB   240F         ADD     A,#0xf
   \   0000ED   F582         MOV     DPL,A
   \   0000EF   E4           CLR     A
   \   0000F0   35..         ADDC    A,?V1
   \   0000F2   F583         MOV     DPH,A
   \   0000F4   E8           MOV     A,R0
   \   0000F5   F0           MOVX    @DPTR,A
   \   0000F6   A3           INC     DPTR
   \   0000F7   E9           MOV     A,R1
   \   0000F8   F0           MOVX    @DPTR,A
   2403            msg += 2;
   \   0000F9   EE           MOV     A,R6
   \   0000FA   2402         ADD     A,#0x2
   \   0000FC   FE           MOV     R6,A
   \   0000FD   5001         JNC     ??ZDO_ParseEndDeviceBindReq_2
   \   0000FF   0F           INC     R7
   2404          
   2405            bindReq->inClusters = NULL;
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   000100   E5..         MOV     A,?V0
   \   000102   2412         ADD     A,#0x12
   \   000104   F582         MOV     DPL,A
   \   000106   E4           CLR     A
   \   000107   35..         ADDC    A,?V1
   \   000109   F583         MOV     DPH,A
   \   00010B   7400         MOV     A,#0x0
   \   00010D   F0           MOVX    @DPTR,A
   \   00010E   A3           INC     DPTR
   \   00010F   7400         MOV     A,#0x0
   \   000111   F0           MOVX    @DPTR,A
   2406            bindReq->outClusters = NULL;
   \   000112   E5..         MOV     A,?V0
   \   000114   2415         ADD     A,#0x15
   \   000116   F582         MOV     DPL,A
   \   000118   E4           CLR     A
   \   000119   35..         ADDC    A,?V1
   \   00011B   F583         MOV     DPH,A
   \   00011D   7400         MOV     A,#0x0
   \   00011F   F0           MOVX    @DPTR,A
   \   000120   A3           INC     DPTR
   \   000121   7400         MOV     A,#0x0
   \   000123   F0           MOVX    @DPTR,A
   2407          
   2408            if ((bindReq->numInClusters = *msg++) &&
   2409                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \   000124   8E82         MOV     DPL,R6
   \   000126   8F83         MOV     DPH,R7
   \   000128   E0           MOVX    A,@DPTR
   \   000129   F8           MOV     R0,A
   \   00012A   8E82         MOV     DPL,R6
   \   00012C   8F83         MOV     DPH,R7
   \   00012E   A3           INC     DPTR
   \   00012F   AE82         MOV     R6,DPL
   \   000131   AF83         MOV     R7,DPH
   \   000133   E8           MOV     A,R0
   \   000134   C0E0         PUSH    A
   \   000136   E5..         MOV     A,?V0
   \   000138   2411         ADD     A,#0x11
   \   00013A   F582         MOV     DPL,A
   \   00013C   E4           CLR     A
   \   00013D   35..         ADDC    A,?V1
   \   00013F   F583         MOV     DPH,A
   \   000141   D0E0         POP     A
   \   000143   F0           MOVX    @DPTR,A
   \   000144   E8           MOV     A,R0
   \   000145   6071         JZ      ??ZDO_ParseEndDeviceBindReq_3
   \   000147                ; Setup parameters for call to function osal_mem_alloc
   \   000147   E5..         MOV     A,?V0
   \   000149   2411         ADD     A,#0x11
   \   00014B   F582         MOV     DPL,A
   \   00014D   E4           CLR     A
   \   00014E   35..         ADDC    A,?V1
   \   000150   F583         MOV     DPH,A
   \   000152   E0           MOVX    A,@DPTR
   \   000153   FA           MOV     R2,A
   \   000154   7B00         MOV     R3,#0x0
   \   000156   EA           MOV     A,R2
   \   000157   75F002       MOV     B,#0x2
   \   00015A   A4           MUL     AB
   \   00015B   CA           XCH     A,R2
   \   00015C   A8F0         MOV     R0,B
   \   00015E   75F000       MOV     B,#0x0
   \   000161   A4           MUL     AB
   \   000162   28           ADD     A,R0
   \   000163   F8           MOV     R0,A
   \   000164   75F002       MOV     B,#0x2
   \   000167   EB           MOV     A,R3
   \   000168   A4           MUL     AB
   \   000169   28           ADD     A,R0
   \   00016A   FB           MOV     R3,A
   \   00016B   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00016E   8A..         MOV     ?V4,R2
   \   000170   8B..         MOV     ?V5,R3
   \   000172   A8..         MOV     R0,?V4
   \   000174   A9..         MOV     R1,?V5
   \   000176   E5..         MOV     A,?V0
   \   000178   2412         ADD     A,#0x12
   \   00017A   F582         MOV     DPL,A
   \   00017C   E4           CLR     A
   \   00017D   35..         ADDC    A,?V1
   \   00017F   F583         MOV     DPH,A
   \   000181   E8           MOV     A,R0
   \   000182   F0           MOVX    @DPTR,A
   \   000183   A3           INC     DPTR
   \   000184   E9           MOV     A,R1
   \   000185   F0           MOVX    @DPTR,A
   \   000186   E8           MOV     A,R0
   \   000187   49           ORL     A,R1
   \   000188   602E         JZ      ??ZDO_ParseEndDeviceBindReq_3
   2410            {
   2411              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   00018A                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   00018A   E5..         MOV     A,?V0
   \   00018C   2412         ADD     A,#0x12
   \   00018E   F582         MOV     DPL,A
   \   000190   E4           CLR     A
   \   000191   35..         ADDC    A,?V1
   \   000193   F583         MOV     DPH,A
   \   000195   E0           MOVX    A,@DPTR
   \   000196   FC           MOV     R4,A
   \   000197   A3           INC     DPTR
   \   000198   E0           MOVX    A,@DPTR
   \   000199   FD           MOV     R5,A
   \   00019A   EE           MOV     A,R6
   \   00019B   FA           MOV     R2,A
   \   00019C   EF           MOV     A,R7
   \   00019D   FB           MOV     R3,A
   \   00019E   E5..         MOV     A,?V0
   \   0001A0   2411         ADD     A,#0x11
   \   0001A2   F582         MOV     DPL,A
   \   0001A4   E4           CLR     A
   \   0001A5   35..         ADDC    A,?V1
   \   0001A7   F583         MOV     DPH,A
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   F9           MOV     R1,A
   \   0001AB   12....       LCALL   ??ZDO_ConvertOTAClusters?relay; Banked call to: ZDO_ConvertOTAClusters
   \   0001AE   8A..         MOV     ?V4,R2
   \   0001B0   8B..         MOV     ?V5,R3
   \   0001B2   AE..         MOV     R6,?V4
   \   0001B4   AF..         MOV     R7,?V5
   \   0001B6   800E         SJMP    ??ZDO_ParseEndDeviceBindReq_4
   2412            }
   2413            else
   2414            {
   2415              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   0001B8   E5..         MOV     A,?V0
   \   0001BA   2411         ADD     A,#0x11
   \   0001BC   F582         MOV     DPL,A
   \   0001BE   E4           CLR     A
   \   0001BF   35..         ADDC    A,?V1
   \   0001C1   F583         MOV     DPH,A
   \   0001C3   7400         MOV     A,#0x0
   \   0001C5   F0           MOVX    @DPTR,A
   2416            }
   2417          
   2418            if ((bindReq->numOutClusters = *msg++) &&
   2419                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??ZDO_ParseEndDeviceBindReq_4:
   \   0001C6   8E82         MOV     DPL,R6
   \   0001C8   8F83         MOV     DPH,R7
   \   0001CA   E0           MOVX    A,@DPTR
   \   0001CB   F8           MOV     R0,A
   \   0001CC   8E82         MOV     DPL,R6
   \   0001CE   8F83         MOV     DPH,R7
   \   0001D0   A3           INC     DPTR
   \   0001D1   AE82         MOV     R6,DPL
   \   0001D3   AF83         MOV     R7,DPH
   \   0001D5   E8           MOV     A,R0
   \   0001D6   C0E0         PUSH    A
   \   0001D8   E5..         MOV     A,?V0
   \   0001DA   2414         ADD     A,#0x14
   \   0001DC   F582         MOV     DPL,A
   \   0001DE   E4           CLR     A
   \   0001DF   35..         ADDC    A,?V1
   \   0001E1   F583         MOV     DPH,A
   \   0001E3   D0E0         POP     A
   \   0001E5   F0           MOVX    @DPTR,A
   \   0001E6   E8           MOV     A,R0
   \   0001E7   6071         JZ      ??ZDO_ParseEndDeviceBindReq_5
   \   0001E9                ; Setup parameters for call to function osal_mem_alloc
   \   0001E9   E5..         MOV     A,?V0
   \   0001EB   2414         ADD     A,#0x14
   \   0001ED   F582         MOV     DPL,A
   \   0001EF   E4           CLR     A
   \   0001F0   35..         ADDC    A,?V1
   \   0001F2   F583         MOV     DPH,A
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   FA           MOV     R2,A
   \   0001F6   7B00         MOV     R3,#0x0
   \   0001F8   EA           MOV     A,R2
   \   0001F9   75F002       MOV     B,#0x2
   \   0001FC   A4           MUL     AB
   \   0001FD   CA           XCH     A,R2
   \   0001FE   A8F0         MOV     R0,B
   \   000200   75F000       MOV     B,#0x0
   \   000203   A4           MUL     AB
   \   000204   28           ADD     A,R0
   \   000205   F8           MOV     R0,A
   \   000206   75F002       MOV     B,#0x2
   \   000209   EB           MOV     A,R3
   \   00020A   A4           MUL     AB
   \   00020B   28           ADD     A,R0
   \   00020C   FB           MOV     R3,A
   \   00020D   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000210   8A..         MOV     ?V4,R2
   \   000212   8B..         MOV     ?V5,R3
   \   000214   A8..         MOV     R0,?V4
   \   000216   A9..         MOV     R1,?V5
   \   000218   E5..         MOV     A,?V0
   \   00021A   2415         ADD     A,#0x15
   \   00021C   F582         MOV     DPL,A
   \   00021E   E4           CLR     A
   \   00021F   35..         ADDC    A,?V1
   \   000221   F583         MOV     DPH,A
   \   000223   E8           MOV     A,R0
   \   000224   F0           MOVX    @DPTR,A
   \   000225   A3           INC     DPTR
   \   000226   E9           MOV     A,R1
   \   000227   F0           MOVX    @DPTR,A
   \   000228   E8           MOV     A,R0
   \   000229   49           ORL     A,R1
   \   00022A   602E         JZ      ??ZDO_ParseEndDeviceBindReq_5
   2420            {
   2421              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   00022C                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   00022C   E5..         MOV     A,?V0
   \   00022E   2415         ADD     A,#0x15
   \   000230   F582         MOV     DPL,A
   \   000232   E4           CLR     A
   \   000233   35..         ADDC    A,?V1
   \   000235   F583         MOV     DPH,A
   \   000237   E0           MOVX    A,@DPTR
   \   000238   FC           MOV     R4,A
   \   000239   A3           INC     DPTR
   \   00023A   E0           MOVX    A,@DPTR
   \   00023B   FD           MOV     R5,A
   \   00023C   EE           MOV     A,R6
   \   00023D   FA           MOV     R2,A
   \   00023E   EF           MOV     A,R7
   \   00023F   FB           MOV     R3,A
   \   000240   E5..         MOV     A,?V0
   \   000242   2414         ADD     A,#0x14
   \   000244   F582         MOV     DPL,A
   \   000246   E4           CLR     A
   \   000247   35..         ADDC    A,?V1
   \   000249   F583         MOV     DPH,A
   \   00024B   E0           MOVX    A,@DPTR
   \   00024C   F9           MOV     R1,A
   \   00024D   12....       LCALL   ??ZDO_ConvertOTAClusters?relay; Banked call to: ZDO_ConvertOTAClusters
   \   000250   8A..         MOV     ?V4,R2
   \   000252   8B..         MOV     ?V5,R3
   \   000254   AE..         MOV     R6,?V4
   \   000256   AF..         MOV     R7,?V5
   \   000258   800E         SJMP    ??ZDO_ParseEndDeviceBindReq_6
   2422            }
   2423            else
   2424            {
   2425              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_5:
   \   00025A   E5..         MOV     A,?V0
   \   00025C   2414         ADD     A,#0x14
   \   00025E   F582         MOV     DPL,A
   \   000260   E4           CLR     A
   \   000261   35..         ADDC    A,?V1
   \   000263   F583         MOV     DPH,A
   \   000265   7400         MOV     A,#0x0
   \   000267   F0           MOVX    @DPTR,A
   2426            }
   2427          }
   \                     ??ZDO_ParseEndDeviceBindReq_6:
   \   000268   7F06         MOV     R7,#0x6
   \   00026A   02....       LJMP    ?BANKED_LEAVE_XDATA
   2428          
   2429          /*********************************************************************
   2430           * @fn          ZDO_ParseBindUnbindReq
   2431           *
   2432           * @brief       This function parses the Bind_req or Unbind_req message.
   2433           *
   2434           * @param       inMsg  - incoming message (request)
   2435           * @param       pReq - place to put parsed information
   2436           *
   2437           * @return      none
   2438           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2439          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2440          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   2441            uint8 *msg;
   2442          
   2443            msg = inMsg->asdu;
   \   00000D   E5..         MOV     A,?V2
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   35..         ADDC    A,?V3
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   E8           MOV     A,R0
   \   00001E   FE           MOV     R6,A
   \   00001F   E9           MOV     A,R1
   \   000020   FF           MOV     R7,A
   2444            osal_cpyExtAddr( pReq->srcAddress, msg );
   \   000021                ; Setup parameters for call to function sAddrExtCpy
   \   000021   EE           MOV     A,R6
   \   000022   FC           MOV     R4,A
   \   000023   EF           MOV     A,R7
   \   000024   FD           MOV     R5,A
   \   000025   AA..         MOV     R2,?V0
   \   000027   AB..         MOV     R3,?V1
   \   000029   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   2445            msg += Z_EXTADDR_LEN;
   \   00002C   EE           MOV     A,R6
   \   00002D   2408         ADD     A,#0x8
   \   00002F   FE           MOV     R6,A
   \   000030   5001         JNC     ??ZDO_ParseBindUnbindReq_0
   \   000032   0F           INC     R7
   2446            pReq->srcEndpoint = *msg++;
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   E0           MOVX    A,@DPTR
   \   000038   C0E0         PUSH    A
   \   00003A   85..82       MOV     DPL,?V0
   \   00003D   85..83       MOV     DPH,?V1
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   D0E0         POP     A
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   A3           INC     DPTR
   \   000050   AE82         MOV     R6,DPL
   \   000052   AF83         MOV     R7,DPH
   2447            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   E0           MOVX    A,@DPTR
   \   000059   FA           MOV     R2,A
   \   00005A   7B00         MOV     R3,#0x0
   \   00005C   8E82         MOV     DPL,R6
   \   00005E   8F83         MOV     DPH,R7
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F8           MOV     R0,A
   \   000063   7900         MOV     R1,#0x0
   \   000065   E4           CLR     A
   \   000066   C8           XCH     A,R0
   \   000067   F9           MOV     R1,A
   \   000068   EA           MOV     A,R2
   \   000069   28           ADD     A,R0
   \   00006A   F8           MOV     R0,A
   \   00006B   EB           MOV     A,R3
   \   00006C   39           ADDC    A,R1
   \   00006D   F9           MOV     R1,A
   \   00006E   85..82       MOV     DPL,?V0
   \   000071   85..83       MOV     DPH,?V1
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   E8           MOV     A,R0
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   \   000080   E9           MOV     A,R1
   \   000081   F0           MOVX    @DPTR,A
   2448            msg += 2;
   \   000082   EE           MOV     A,R6
   \   000083   2402         ADD     A,#0x2
   \   000085   FE           MOV     R6,A
   \   000086   5001         JNC     ??ZDO_ParseBindUnbindReq_1
   \   000088   0F           INC     R7
   2449            pReq->dstAddress.addrMode = *msg++;
   \                     ??ZDO_ParseBindUnbindReq_1:
   \   000089   8E82         MOV     DPL,R6
   \   00008B   8F83         MOV     DPH,R7
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   C0E0         PUSH    A
   \   000090   E5..         MOV     A,?V0
   \   000092   2413         ADD     A,#0x13
   \   000094   F582         MOV     DPL,A
   \   000096   E4           CLR     A
   \   000097   35..         ADDC    A,?V1
   \   000099   F583         MOV     DPH,A
   \   00009B   D0E0         POP     A
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   8E82         MOV     DPL,R6
   \   0000A0   8F83         MOV     DPH,R7
   \   0000A2   A3           INC     DPTR
   \   0000A3   AE82         MOV     R6,DPL
   \   0000A5   AF83         MOV     R7,DPH
   2450            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \   0000A7   E5..         MOV     A,?V0
   \   0000A9   2413         ADD     A,#0x13
   \   0000AB   F582         MOV     DPL,A
   \   0000AD   E4           CLR     A
   \   0000AE   35..         ADDC    A,?V1
   \   0000B0   F583         MOV     DPH,A
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   6403         XRL     A,#0x3
   \   0000B5   702E         JNZ     ??ZDO_ParseBindUnbindReq_2
   2451            {
   2452              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   0000B7                ; Setup parameters for call to function sAddrExtCpy
   \   0000B7   EE           MOV     A,R6
   \   0000B8   FC           MOV     R4,A
   \   0000B9   EF           MOV     A,R7
   \   0000BA   FD           MOV     R5,A
   \   0000BB   E5..         MOV     A,?V0
   \   0000BD   240B         ADD     A,#0xb
   \   0000BF   FA           MOV     R2,A
   \   0000C0   E4           CLR     A
   \   0000C1   35..         ADDC    A,?V1
   \   0000C3   FB           MOV     R3,A
   \   0000C4   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   2453              msg += Z_EXTADDR_LEN;
   \   0000C7   EE           MOV     A,R6
   \   0000C8   2408         ADD     A,#0x8
   \   0000CA   FE           MOV     R6,A
   \   0000CB   5001         JNC     ??ZDO_ParseBindUnbindReq_3
   \   0000CD   0F           INC     R7
   2454              pReq->dstEndpoint = *msg;
   \                     ??ZDO_ParseBindUnbindReq_3:
   \   0000CE   8E82         MOV     DPL,R6
   \   0000D0   8F83         MOV     DPH,R7
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   C0E0         PUSH    A
   \   0000D5   E5..         MOV     A,?V0
   \   0000D7   2414         ADD     A,#0x14
   \   0000D9   F582         MOV     DPL,A
   \   0000DB   E4           CLR     A
   \   0000DC   35..         ADDC    A,?V1
   \   0000DE   F583         MOV     DPH,A
   \   0000E0   D0E0         POP     A
   \   0000E2   F0           MOVX    @DPTR,A
   \   0000E3   802A         SJMP    ??ZDO_ParseBindUnbindReq_4
   2455            }
   2456            else
   2457            {
   2458              // copy group address
   2459              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_2:
   \   0000E5   8E82         MOV     DPL,R6
   \   0000E7   8F83         MOV     DPH,R7
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   FA           MOV     R2,A
   \   0000EB   7B00         MOV     R3,#0x0
   \   0000ED   8E82         MOV     DPL,R6
   \   0000EF   8F83         MOV     DPH,R7
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   F8           MOV     R0,A
   \   0000F4   7900         MOV     R1,#0x0
   \   0000F6   E4           CLR     A
   \   0000F7   C8           XCH     A,R0
   \   0000F8   F9           MOV     R1,A
   \   0000F9   EA           MOV     A,R2
   \   0000FA   28           ADD     A,R0
   \   0000FB   F8           MOV     R0,A
   \   0000FC   EB           MOV     A,R3
   \   0000FD   39           ADDC    A,R1
   \   0000FE   F9           MOV     R1,A
   \   0000FF   E5..         MOV     A,?V0
   \   000101   240B         ADD     A,#0xb
   \   000103   F582         MOV     DPL,A
   \   000105   E4           CLR     A
   \   000106   35..         ADDC    A,?V1
   \   000108   F583         MOV     DPH,A
   \   00010A   E8           MOV     A,R0
   \   00010B   F0           MOVX    @DPTR,A
   \   00010C   A3           INC     DPTR
   \   00010D   E9           MOV     A,R1
   \   00010E   F0           MOVX    @DPTR,A
   2460            }
   2461          }
   \                     ??ZDO_ParseBindUnbindReq_4:
   \   00010F   7F04         MOV     R7,#0x4
   \   000111   02....       LJMP    ?BANKED_LEAVE_XDATA
   2462          
   2463          /*********************************************************************
   2464           * @fn      ZDO_ParseAddrRsp
   2465           *
   2466           * @brief   Turns the inMsg (incoming message) into the out parsed
   2467           *          structure.
   2468           *
   2469           * @param   inMsg - incoming message
   2470           *
   2471           * @return  pointer to parsed structures.  This structure was
   2472           *          allocated using osal_mem_alloc, so it must be freed
   2473           *          by the calling function [osal_mem_free()].
   2474           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2475          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2476          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   2477            ZDO_NwkIEEEAddrResp_t *rsp;
   2478            uint8 *msg;
   2479            byte cnt = 0;
   \   000009   75..00       MOV     ?V2,#0x0
   2480          
   2481            // Calculate the number of items in the list
   2482            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   00000C   E5..         MOV     A,?V6
   \   00000E   2410         ADD     A,#0x10
   \   000010   F582         MOV     DPL,A
   \   000012   E4           CLR     A
   \   000013   35..         ADDC    A,?V7
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   C3           CLR     C
   \   000019   940C         SUBB    A,#0xc
   \   00001B   401E         JC      ??ZDO_ParseAddrRsp_0
   2483              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   00001D   E5..         MOV     A,?V6
   \   00001F   2413         ADD     A,#0x13
   \   000021   F582         MOV     DPL,A
   \   000023   E4           CLR     A
   \   000024   35..         ADDC    A,?V7
   \   000026   F583         MOV     DPH,A
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   C8           XCH     A,R0
   \   00002D   240B         ADD     A,#0xb
   \   00002F   F582         MOV     DPL,A
   \   000031   C8           XCH     A,R0
   \   000032   3400         ADDC    A,#0x0
   \   000034   F583         MOV     DPH,A
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V2,A
   \   000039   8003         SJMP    ??ZDO_ParseAddrRsp_1
   2484            else
   2485              cnt = 0;
   \                     ??ZDO_ParseAddrRsp_0:
   \   00003B   75..00       MOV     ?V2,#0x0
   2486          
   2487            // Make buffer
   2488            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_1:
   \   00003E                ; Setup parameters for call to function osal_mem_alloc
   \   00003E   A8..         MOV     R0,?V2
   \   000040   7900         MOV     R1,#0x0
   \   000042   E8           MOV     A,R0
   \   000043   75F002       MOV     B,#0x2
   \   000046   A4           MUL     AB
   \   000047   C8           XCH     A,R0
   \   000048   AAF0         MOV     R2,B
   \   00004A   75F000       MOV     B,#0x0
   \   00004D   A4           MUL     AB
   \   00004E   2A           ADD     A,R2
   \   00004F   FA           MOV     R2,A
   \   000050   75F002       MOV     B,#0x2
   \   000053   E9           MOV     A,R1
   \   000054   A4           MUL     AB
   \   000055   2A           ADD     A,R2
   \   000056   F9           MOV     R1,A
   \   000057   E8           MOV     A,R0
   \   000058   240D         ADD     A,#0xd
   \   00005A   FA           MOV     R2,A
   \   00005B   E4           CLR     A
   \   00005C   39           ADDC    A,R1
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000061   8A..         MOV     ?V4,R2
   \   000063   8B..         MOV     ?V5,R3
   \   000065   85....       MOV     ?V0,?V4
   \   000068   85....       MOV     ?V1,?V5
   2489          
   2490            if ( rsp )
   \   00006B   E5..         MOV     A,?V0
   \   00006D   45..         ORL     A,?V1
   \   00006F   7003         JNZ     $+5
   \   000071   02....       LJMP    ??ZDO_ParseAddrRsp_2 & 0xFFFF
   2491            {
   2492              msg = inMsg->asdu;
   \   000074   E5..         MOV     A,?V6
   \   000076   2413         ADD     A,#0x13
   \   000078   F582         MOV     DPL,A
   \   00007A   E4           CLR     A
   \   00007B   35..         ADDC    A,?V7
   \   00007D   F583         MOV     DPH,A
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F8           MOV     R0,A
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F9           MOV     R1,A
   \   000084   E8           MOV     A,R0
   \   000085   FE           MOV     R6,A
   \   000086   E9           MOV     A,R1
   \   000087   FF           MOV     R7,A
   2493          
   2494              rsp->status = *msg++;
   \   000088   8E82         MOV     DPL,R6
   \   00008A   8F83         MOV     DPH,R7
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   C0E0         PUSH    A
   \   00008F   85..82       MOV     DPL,?V0
   \   000092   85..83       MOV     DPH,?V1
   \   000095   D0E0         POP     A
   \   000097   F0           MOVX    @DPTR,A
   \   000098   8E82         MOV     DPL,R6
   \   00009A   8F83         MOV     DPH,R7
   \   00009C   A3           INC     DPTR
   \   00009D   AE82         MOV     R6,DPL
   \   00009F   AF83         MOV     R7,DPH
   2495              if ( rsp->status == ZDO_SUCCESS )
   \   0000A1   85..82       MOV     DPL,?V0
   \   0000A4   85..83       MOV     DPH,?V1
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   6003         JZ      $+5
   \   0000AA   02....       LJMP    ??ZDO_ParseAddrRsp_2 & 0xFFFF
   2496              {
   2497                osal_cpyExtAddr( rsp->extAddr, msg );
   \   0000AD                ; Setup parameters for call to function sAddrExtCpy
   \   0000AD   EE           MOV     A,R6
   \   0000AE   FC           MOV     R4,A
   \   0000AF   EF           MOV     A,R7
   \   0000B0   FD           MOV     R5,A
   \   0000B1   E5..         MOV     A,?V0
   \   0000B3   2403         ADD     A,#0x3
   \   0000B5   FA           MOV     R2,A
   \   0000B6   E4           CLR     A
   \   0000B7   35..         ADDC    A,?V1
   \   0000B9   FB           MOV     R3,A
   \   0000BA   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   2498                msg += Z_EXTADDR_LEN;
   \   0000BD   EE           MOV     A,R6
   \   0000BE   2408         ADD     A,#0x8
   \   0000C0   FE           MOV     R6,A
   \   0000C1   5001         JNC     ??ZDO_ParseAddrRsp_3
   \   0000C3   0F           INC     R7
   2499                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_3:
   \   0000C4   8E82         MOV     DPL,R6
   \   0000C6   8F83         MOV     DPH,R7
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   FA           MOV     R2,A
   \   0000CA   7B00         MOV     R3,#0x0
   \   0000CC   8E82         MOV     DPL,R6
   \   0000CE   8F83         MOV     DPH,R7
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   F8           MOV     R0,A
   \   0000D3   7900         MOV     R1,#0x0
   \   0000D5   E4           CLR     A
   \   0000D6   C8           XCH     A,R0
   \   0000D7   F9           MOV     R1,A
   \   0000D8   EA           MOV     A,R2
   \   0000D9   28           ADD     A,R0
   \   0000DA   F8           MOV     R0,A
   \   0000DB   EB           MOV     A,R3
   \   0000DC   39           ADDC    A,R1
   \   0000DD   F9           MOV     R1,A
   \   0000DE   85..82       MOV     DPL,?V0
   \   0000E1   85..83       MOV     DPH,?V1
   \   0000E4   A3           INC     DPTR
   \   0000E5   E8           MOV     A,R0
   \   0000E6   F0           MOVX    @DPTR,A
   \   0000E7   A3           INC     DPTR
   \   0000E8   E9           MOV     A,R1
   \   0000E9   F0           MOVX    @DPTR,A
   2500          
   2501                msg += 2;
   \   0000EA   EE           MOV     A,R6
   \   0000EB   2402         ADD     A,#0x2
   \   0000ED   FE           MOV     R6,A
   \   0000EE   5001         JNC     ??ZDO_ParseAddrRsp_4
   \   0000F0   0F           INC     R7
   2502                rsp->numAssocDevs = 0;
   \                     ??ZDO_ParseAddrRsp_4:
   \   0000F1   E5..         MOV     A,?V0
   \   0000F3   240B         ADD     A,#0xb
   \   0000F5   F582         MOV     DPL,A
   \   0000F7   E4           CLR     A
   \   0000F8   35..         ADDC    A,?V1
   \   0000FA   F583         MOV     DPH,A
   \   0000FC   7400         MOV     A,#0x0
   \   0000FE   F0           MOVX    @DPTR,A
   2503          
   2504                // StartIndex field is only present if NumAssocDev field is non-zero.
   2505                if ( cnt > 0 )
   \   0000FF   E5..         MOV     A,?V2
   \   000101   7003         JNZ     $+5
   \   000103   02....       LJMP    ??ZDO_ParseAddrRsp_2 & 0xFFFF
   2506                {
   2507                  uint16 *pList = &(rsp->devList[0]);
   \   000106   E5..         MOV     A,?V0
   \   000108   240D         ADD     A,#0xd
   \   00010A   F8           MOV     R0,A
   \   00010B   E4           CLR     A
   \   00010C   35..         ADDC    A,?V1
   \   00010E   F9           MOV     R1,A
   2508                  byte n = cnt;
   \   00010F   AC..         MOV     R4,?V2
   2509          
   2510                  rsp->numAssocDevs = *msg++;
   \   000111   8E82         MOV     DPL,R6
   \   000113   8F83         MOV     DPH,R7
   \   000115   E0           MOVX    A,@DPTR
   \   000116   C0E0         PUSH    A
   \   000118   E5..         MOV     A,?V0
   \   00011A   240B         ADD     A,#0xb
   \   00011C   F582         MOV     DPL,A
   \   00011E   E4           CLR     A
   \   00011F   35..         ADDC    A,?V1
   \   000121   F583         MOV     DPH,A
   \   000123   D0E0         POP     A
   \   000125   F0           MOVX    @DPTR,A
   \   000126   8E82         MOV     DPL,R6
   \   000128   8F83         MOV     DPH,R7
   \   00012A   A3           INC     DPTR
   \   00012B   AE82         MOV     R6,DPL
   \   00012D   AF83         MOV     R7,DPH
   2511                  rsp->startIndex = *msg++;
   \   00012F   8E82         MOV     DPL,R6
   \   000131   8F83         MOV     DPH,R7
   \   000133   E0           MOVX    A,@DPTR
   \   000134   C0E0         PUSH    A
   \   000136   E5..         MOV     A,?V0
   \   000138   240C         ADD     A,#0xc
   \   00013A   F582         MOV     DPL,A
   \   00013C   E4           CLR     A
   \   00013D   35..         ADDC    A,?V1
   \   00013F   F583         MOV     DPH,A
   \   000141   D0E0         POP     A
   \   000143   F0           MOVX    @DPTR,A
   \   000144   8E82         MOV     DPL,R6
   \   000146   8F83         MOV     DPH,R7
   \   000148   A3           INC     DPTR
   \   000149   AE82         MOV     R6,DPL
   \   00014B   AF83         MOV     R7,DPH
   2512          
   2513                  while ( n != 0 )
   \                     ??ZDO_ParseAddrRsp_5:
   \   00014D   EC           MOV     A,R4
   \   00014E   6038         JZ      ??ZDO_ParseAddrRsp_2
   2514                  {
   2515                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \   000150   8E82         MOV     DPL,R6
   \   000152   8F83         MOV     DPH,R7
   \   000154   E0           MOVX    A,@DPTR
   \   000155   F5..         MOV     ?V4,A
   \   000157   75..00       MOV     ?V5,#0x0
   \   00015A   8E82         MOV     DPL,R6
   \   00015C   8F83         MOV     DPH,R7
   \   00015E   A3           INC     DPTR
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   FA           MOV     R2,A
   \   000161   7B00         MOV     R3,#0x0
   \   000163   E4           CLR     A
   \   000164   CA           XCH     A,R2
   \   000165   FB           MOV     R3,A
   \   000166   E5..         MOV     A,?V4
   \   000168   2A           ADD     A,R2
   \   000169   FA           MOV     R2,A
   \   00016A   E5..         MOV     A,?V5
   \   00016C   3B           ADDC    A,R3
   \   00016D   FB           MOV     R3,A
   \   00016E   8882         MOV     DPL,R0
   \   000170   8983         MOV     DPH,R1
   \   000172   EA           MOV     A,R2
   \   000173   F0           MOVX    @DPTR,A
   \   000174   A3           INC     DPTR
   \   000175   EB           MOV     A,R3
   \   000176   F0           MOVX    @DPTR,A
   \   000177   E8           MOV     A,R0
   \   000178   2402         ADD     A,#0x2
   \   00017A   F8           MOV     R0,A
   \   00017B   5001         JNC     ??ZDO_ParseAddrRsp_6
   \   00017D   09           INC     R1
   2516                    msg += sizeof( uint16 );
   \                     ??ZDO_ParseAddrRsp_6:
   \   00017E   EE           MOV     A,R6
   \   00017F   2402         ADD     A,#0x2
   \   000181   FE           MOV     R6,A
   \   000182   5001         JNC     ??ZDO_ParseAddrRsp_7
   \   000184   0F           INC     R7
   2517                    n--;
   \                     ??ZDO_ParseAddrRsp_7:
   \   000185   1C           DEC     R4
   \   000186   80C5         SJMP    ??ZDO_ParseAddrRsp_5
   2518                  }
   2519                }
   2520              }
   2521            }
   2522            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_2:
   \   000188   AA..         MOV     R2,?V0
   \   00018A   AB..         MOV     R3,?V1
   \   00018C   7F08         MOV     R7,#0x8
   \   00018E   02....       LJMP    ?BANKED_LEAVE_XDATA
   2523          }
   2524          
   2525          /*********************************************************************
   2526           * @fn          ZDO_ParseNodeDescRsp
   2527           *
   2528           * @brief       This function parses the Node_Desc_rsp message.
   2529           *
   2530           * @param       inMsg - incoming message
   2531           * @param       pNDRsp - place to parse the message into
   2532           *
   2533           * @return      none
   2534           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2535          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   2536          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2537            uint8 *msg;
   2538          
   2539            msg = inMsg->asdu;
   \   00000A   EA           MOV     A,R2
   \   00000B   2413         ADD     A,#0x13
   \   00000D   F582         MOV     DPL,A
   \   00000F   E4           CLR     A
   \   000010   3B           ADDC    A,R3
   \   000011   F583         MOV     DPH,A
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FE           MOV     R6,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FF           MOV     R7,A
   \   000018   EE           MOV     A,R6
   \   000019   F8           MOV     R0,A
   \   00001A   EF           MOV     A,R7
   \   00001B   F9           MOV     R1,A
   2540          
   2541            pNDRsp->status = *msg++;
   \   00001C   8882         MOV     DPL,R0
   \   00001E   8983         MOV     DPH,R1
   \   000020   E0           MOVX    A,@DPTR
   \   000021   C0E0         PUSH    A
   \   000023   8C82         MOV     DPL,R4
   \   000025   8D83         MOV     DPH,R5
   \   000027   D0E0         POP     A
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   8882         MOV     DPL,R0
   \   00002C   8983         MOV     DPH,R1
   \   00002E   A3           INC     DPTR
   \   00002F   A882         MOV     R0,DPL
   \   000031   A983         MOV     R1,DPH
   2542            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000033   8882         MOV     DPL,R0
   \   000035   8983         MOV     DPH,R1
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V0,A
   \   00003A   75..00       MOV     ?V1,#0x0
   \   00003D   8882         MOV     DPL,R0
   \   00003F   8983         MOV     DPH,R1
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FE           MOV     R6,A
   \   000044   7F00         MOV     R7,#0x0
   \   000046   E4           CLR     A
   \   000047   CE           XCH     A,R6
   \   000048   FF           MOV     R7,A
   \   000049   E5..         MOV     A,?V0
   \   00004B   2E           ADD     A,R6
   \   00004C   FE           MOV     R6,A
   \   00004D   E5..         MOV     A,?V1
   \   00004F   3F           ADDC    A,R7
   \   000050   FF           MOV     R7,A
   \   000051   8C82         MOV     DPL,R4
   \   000053   8D83         MOV     DPH,R5
   \   000055   A3           INC     DPTR
   \   000056   EE           MOV     A,R6
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   EF           MOV     A,R7
   \   00005A   F0           MOVX    @DPTR,A
   2543          
   2544            if ( pNDRsp->status == ZDP_SUCCESS )
   \   00005B   8C82         MOV     DPL,R4
   \   00005D   8D83         MOV     DPH,R5
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   6003         JZ      $+5
   \   000062   02....       LJMP    ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   2545            {
   2546              msg += 2;
   \   000065   E8           MOV     A,R0
   \   000066   2402         ADD     A,#0x2
   \   000068   F8           MOV     R0,A
   \   000069   5001         JNC     ??ZDO_ParseNodeDescRsp_1
   \   00006B   09           INC     R1
   2547              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \                     ??ZDO_ParseNodeDescRsp_1:
   \   00006C   8882         MOV     DPL,R0
   \   00006E   8983         MOV     DPH,R1
   \   000070   E0           MOVX    A,@DPTR
   \   000071   5407         ANL     A,#0x7
   \   000073   FE           MOV     R6,A
   \   000074   7407         MOV     A,#0x7
   \   000076   5E           ANL     A,R6
   \   000077   FE           MOV     R6,A
   \   000078   8C82         MOV     DPL,R4
   \   00007A   8D83         MOV     DPH,R5
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   54F8         ANL     A,#0xf8
   \   000082   4E           ORL     A,R6
   \   000083   C0E0         PUSH    A
   \   000085   8C82         MOV     DPL,R4
   \   000087   8D83         MOV     DPH,R5
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   D0E0         POP     A
   \   00008E   F0           MOVX    @DPTR,A
   2548          
   2549              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \   00008F   8882         MOV     DPL,R0
   \   000091   8983         MOV     DPH,R1
   \   000093   E0           MOVX    A,@DPTR
   \   000094   A2E3         MOV     C,0xE0 /* A   */.3
   \   000096   E4           CLR     A
   \   000097   33           RLC     A
   \   000098   FE           MOV     R6,A
   \   000099   8C82         MOV     DPL,R4
   \   00009B   8D83         MOV     DPH,R5
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   EE           MOV     A,R6
   \   0000A1   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   92E3         MOV     0xE0 /* A   */.3,C
   \   0000A6   F0           MOVX    @DPTR,A
   2550              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \   0000A7   8882         MOV     DPL,R0
   \   0000A9   8983         MOV     DPH,R1
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   A2E4         MOV     C,0xE0 /* A   */.4
   \   0000AE   E4           CLR     A
   \   0000AF   33           RLC     A
   \   0000B0   FE           MOV     R6,A
   \   0000B1   8C82         MOV     DPL,R4
   \   0000B3   8D83         MOV     DPH,R5
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   EE           MOV     A,R6
   \   0000B9   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   92E4         MOV     0xE0 /* A   */.4,C
   \   0000BE   F0           MOVX    @DPTR,A
   2551          
   2552              msg++;  // Reserved bits.
   \   0000BF   8882         MOV     DPL,R0
   \   0000C1   8983         MOV     DPH,R1
   \   0000C3   A3           INC     DPTR
   \   0000C4   A882         MOV     R0,DPL
   \   0000C6   A983         MOV     R1,DPH
   2553              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   0000C8   8882         MOV     DPL,R0
   \   0000CA   8983         MOV     DPH,R1
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   13           RRC     A
   \   0000CE   13           RRC     A
   \   0000CF   13           RRC     A
   \   0000D0   541F         ANL     A,#0x1f
   \   0000D2   C0E0         PUSH    A
   \   0000D4   85..82       MOV     DPL,?XSP + 0
   \   0000D7   85..83       MOV     DPH,?XSP + 1
   \   0000DA   D0E0         POP     A
   \   0000DC   F0           MOVX    @DPTR,A
   \   0000DD   85..82       MOV     DPL,?XSP + 0
   \   0000E0   85..83       MOV     DPH,?XSP + 1
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   33           RLC     A
   \   0000E5   33           RLC     A
   \   0000E6   33           RLC     A
   \   0000E7   54F8         ANL     A,#0xf8
   \   0000E9   FE           MOV     R6,A
   \   0000EA   8C82         MOV     DPL,R4
   \   0000EC   8D83         MOV     DPH,R5
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   5407         ANL     A,#0x7
   \   0000F5   4E           ORL     A,R6
   \   0000F6   C0E0         PUSH    A
   \   0000F8   8C82         MOV     DPL,R4
   \   0000FA   8D83         MOV     DPH,R5
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   D0E0         POP     A
   \   000102   F0           MOVX    @DPTR,A
   2554              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \   000103   8882         MOV     DPL,R0
   \   000105   8983         MOV     DPH,R1
   \   000107   E0           MOVX    A,@DPTR
   \   000108   5407         ANL     A,#0x7
   \   00010A   FE           MOV     R6,A
   \   00010B   8882         MOV     DPL,R0
   \   00010D   8983         MOV     DPH,R1
   \   00010F   A3           INC     DPTR
   \   000110   A882         MOV     R0,DPL
   \   000112   A983         MOV     R1,DPH
   \   000114   7407         MOV     A,#0x7
   \   000116   5E           ANL     A,R6
   \   000117   FE           MOV     R6,A
   \   000118   8C82         MOV     DPL,R4
   \   00011A   8D83         MOV     DPH,R5
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   A3           INC     DPTR
   \   00011F   A3           INC     DPTR
   \   000120   E0           MOVX    A,@DPTR
   \   000121   54F8         ANL     A,#0xf8
   \   000123   4E           ORL     A,R6
   \   000124   C0E0         PUSH    A
   \   000126   8C82         MOV     DPL,R4
   \   000128   8D83         MOV     DPH,R5
   \   00012A   A3           INC     DPTR
   \   00012B   A3           INC     DPTR
   \   00012C   A3           INC     DPTR
   \   00012D   A3           INC     DPTR
   \   00012E   D0E0         POP     A
   \   000130   F0           MOVX    @DPTR,A
   2555              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \   000131   8882         MOV     DPL,R0
   \   000133   8983         MOV     DPH,R1
   \   000135   E0           MOVX    A,@DPTR
   \   000136   C0E0         PUSH    A
   \   000138   8C82         MOV     DPL,R4
   \   00013A   8D83         MOV     DPH,R5
   \   00013C   A3           INC     DPTR
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   D0E0         POP     A
   \   000143   F0           MOVX    @DPTR,A
   \   000144   8882         MOV     DPL,R0
   \   000146   8983         MOV     DPH,R1
   \   000148   A3           INC     DPTR
   \   000149   A882         MOV     R0,DPL
   \   00014B   A983         MOV     R1,DPH
   2556              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \   00014D   8882         MOV     DPL,R0
   \   00014F   8983         MOV     DPH,R1
   \   000151   E0           MOVX    A,@DPTR
   \   000152   C0E0         PUSH    A
   \   000154   8C82         MOV     DPL,R4
   \   000156   8D83         MOV     DPH,R5
   \   000158   A3           INC     DPTR
   \   000159   A3           INC     DPTR
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   A3           INC     DPTR
   \   00015D   A3           INC     DPTR
   \   00015E   D0E0         POP     A
   \   000160   F0           MOVX    @DPTR,A
   \   000161   8882         MOV     DPL,R0
   \   000163   8983         MOV     DPH,R1
   \   000165   A3           INC     DPTR
   \   000166   A882         MOV     R0,DPL
   \   000168   A983         MOV     R1,DPH
   2557              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \   00016A   8882         MOV     DPL,R0
   \   00016C   8983         MOV     DPH,R1
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   C0E0         PUSH    A
   \   000171   8C82         MOV     DPL,R4
   \   000173   8D83         MOV     DPH,R5
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   A3           INC     DPTR
   \   000178   A3           INC     DPTR
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   D0E0         POP     A
   \   00017E   F0           MOVX    @DPTR,A
   \   00017F   8882         MOV     DPL,R0
   \   000181   8983         MOV     DPH,R1
   \   000183   A3           INC     DPTR
   \   000184   A882         MOV     R0,DPL
   \   000186   A983         MOV     R1,DPH
   2558              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \   000188   8882         MOV     DPL,R0
   \   00018A   8983         MOV     DPH,R1
   \   00018C   E0           MOVX    A,@DPTR
   \   00018D   C0E0         PUSH    A
   \   00018F   8C82         MOV     DPL,R4
   \   000191   8D83         MOV     DPH,R5
   \   000193   A3           INC     DPTR
   \   000194   A3           INC     DPTR
   \   000195   A3           INC     DPTR
   \   000196   A3           INC     DPTR
   \   000197   A3           INC     DPTR
   \   000198   A3           INC     DPTR
   \   000199   A3           INC     DPTR
   \   00019A   A3           INC     DPTR
   \   00019B   D0E0         POP     A
   \   00019D   F0           MOVX    @DPTR,A
   \   00019E   8882         MOV     DPL,R0
   \   0001A0   8983         MOV     DPH,R1
   \   0001A2   A3           INC     DPTR
   \   0001A3   A882         MOV     R0,DPL
   \   0001A5   A983         MOV     R1,DPH
   2559              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \   0001A7   8882         MOV     DPL,R0
   \   0001A9   8983         MOV     DPH,R1
   \   0001AB   E0           MOVX    A,@DPTR
   \   0001AC   C0E0         PUSH    A
   \   0001AE   8C82         MOV     DPL,R4
   \   0001B0   8D83         MOV     DPH,R5
   \   0001B2   A3           INC     DPTR
   \   0001B3   A3           INC     DPTR
   \   0001B4   A3           INC     DPTR
   \   0001B5   A3           INC     DPTR
   \   0001B6   A3           INC     DPTR
   \   0001B7   A3           INC     DPTR
   \   0001B8   A3           INC     DPTR
   \   0001B9   A3           INC     DPTR
   \   0001BA   A3           INC     DPTR
   \   0001BB   D0E0         POP     A
   \   0001BD   F0           MOVX    @DPTR,A
   \   0001BE   8882         MOV     DPL,R0
   \   0001C0   8983         MOV     DPH,R1
   \   0001C2   A3           INC     DPTR
   \   0001C3   A882         MOV     R0,DPL
   \   0001C5   A983         MOV     R1,DPH
   2560              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \   0001C7   8882         MOV     DPL,R0
   \   0001C9   8983         MOV     DPH,R1
   \   0001CB   E0           MOVX    A,@DPTR
   \   0001CC   C0E0         PUSH    A
   \   0001CE   8C82         MOV     DPL,R4
   \   0001D0   8D83         MOV     DPH,R5
   \   0001D2   A3           INC     DPTR
   \   0001D3   A3           INC     DPTR
   \   0001D4   A3           INC     DPTR
   \   0001D5   A3           INC     DPTR
   \   0001D6   A3           INC     DPTR
   \   0001D7   A3           INC     DPTR
   \   0001D8   A3           INC     DPTR
   \   0001D9   A3           INC     DPTR
   \   0001DA   A3           INC     DPTR
   \   0001DB   A3           INC     DPTR
   \   0001DC   D0E0         POP     A
   \   0001DE   F0           MOVX    @DPTR,A
   \   0001DF   8882         MOV     DPL,R0
   \   0001E1   8983         MOV     DPH,R1
   \   0001E3   A3           INC     DPTR
   \   0001E4   A882         MOV     R0,DPL
   \   0001E6   A983         MOV     R1,DPH
   2561              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \   0001E8   8882         MOV     DPL,R0
   \   0001EA   8983         MOV     DPH,R1
   \   0001EC   E0           MOVX    A,@DPTR
   \   0001ED   F5..         MOV     ?V0,A
   \   0001EF   75..00       MOV     ?V1,#0x0
   \   0001F2   8882         MOV     DPL,R0
   \   0001F4   8983         MOV     DPH,R1
   \   0001F6   A3           INC     DPTR
   \   0001F7   E0           MOVX    A,@DPTR
   \   0001F8   FE           MOV     R6,A
   \   0001F9   7F00         MOV     R7,#0x0
   \   0001FB   E4           CLR     A
   \   0001FC   CE           XCH     A,R6
   \   0001FD   FF           MOV     R7,A
   \   0001FE   E5..         MOV     A,?V0
   \   000200   2E           ADD     A,R6
   \   000201   FE           MOV     R6,A
   \   000202   E5..         MOV     A,?V1
   \   000204   3F           ADDC    A,R7
   \   000205   FF           MOV     R7,A
   \   000206   EC           MOV     A,R4
   \   000207   240B         ADD     A,#0xb
   \   000209   F582         MOV     DPL,A
   \   00020B   E4           CLR     A
   \   00020C   3D           ADDC    A,R5
   \   00020D   F583         MOV     DPH,A
   \   00020F   EE           MOV     A,R6
   \   000210   F0           MOVX    @DPTR,A
   \   000211   A3           INC     DPTR
   \   000212   EF           MOV     A,R7
   \   000213   F0           MOVX    @DPTR,A
   2562              msg += 2;
   \   000214   E8           MOV     A,R0
   \   000215   2402         ADD     A,#0x2
   \   000217   F8           MOV     R0,A
   \   000218   5001         JNC     ??ZDO_ParseNodeDescRsp_2
   \   00021A   09           INC     R1
   2563              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   \                     ??ZDO_ParseNodeDescRsp_2:
   \   00021B   8882         MOV     DPL,R0
   \   00021D   8983         MOV     DPH,R1
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   C0E0         PUSH    A
   \   000222   EC           MOV     A,R4
   \   000223   240D         ADD     A,#0xd
   \   000225   F582         MOV     DPL,A
   \   000227   E4           CLR     A
   \   000228   3D           ADDC    A,R5
   \   000229   F583         MOV     DPH,A
   \   00022B   D0E0         POP     A
   \   00022D   F0           MOVX    @DPTR,A
   \   00022E   8882         MOV     DPL,R0
   \   000230   8983         MOV     DPH,R1
   \   000232   A3           INC     DPTR
   \   000233   A882         MOV     R0,DPL
   \   000235   A983         MOV     R1,DPH
   2564              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   \   000237   8882         MOV     DPL,R0
   \   000239   8983         MOV     DPH,R1
   \   00023B   E0           MOVX    A,@DPTR
   \   00023C   C0E0         PUSH    A
   \   00023E   EC           MOV     A,R4
   \   00023F   240E         ADD     A,#0xe
   \   000241   F582         MOV     DPL,A
   \   000243   E4           CLR     A
   \   000244   3D           ADDC    A,R5
   \   000245   F583         MOV     DPH,A
   \   000247   D0E0         POP     A
   \   000249   F0           MOVX    @DPTR,A
   \   00024A   8882         MOV     DPL,R0
   \   00024C   8983         MOV     DPH,R1
   \   00024E   A3           INC     DPTR
   \   00024F   A882         MOV     R0,DPL
   \   000251   A983         MOV     R1,DPH
   2565              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   \   000253   8882         MOV     DPL,R0
   \   000255   8983         MOV     DPH,R1
   \   000257   E0           MOVX    A,@DPTR
   \   000258   C0E0         PUSH    A
   \   00025A   EC           MOV     A,R4
   \   00025B   240F         ADD     A,#0xf
   \   00025D   F582         MOV     DPL,A
   \   00025F   E4           CLR     A
   \   000260   3D           ADDC    A,R5
   \   000261   F583         MOV     DPH,A
   \   000263   D0E0         POP     A
   \   000265   F0           MOVX    @DPTR,A
   2566            }
   2567          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   000266   7401         MOV     A,#0x1
   \   000268   12....       LCALL   ?DEALLOC_XSTACK8
   \   00026B   7F02         MOV     R7,#0x2
   \   00026D   02....       LJMP    ?BANKED_LEAVE_XDATA
   2568          
   2569          /*********************************************************************
   2570           * @fn          ZDO_ParesPowerDescRsp
   2571           *
   2572           * @brief       This function parses the Power_Desc_rsp message.
   2573           *
   2574           * @param       inMsg  - incoming message
   2575           * @param       pNPRsp - place to parse the message into
   2576           *
   2577           * @return      none
   2578           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2579          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   2580          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2581            uint8 *msg;
   2582          
   2583            msg = inMsg->asdu;
   \   000009   EE           MOV     A,R6
   \   00000A   2413         ADD     A,#0x13
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   E8           MOV     A,R0
   \   000018   FA           MOV     R2,A
   \   000019   E9           MOV     A,R1
   \   00001A   FB           MOV     R3,A
   2584            pNPRsp->status = *msg++;
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   C0E0         PUSH    A
   \   000022   8C82         MOV     DPL,R4
   \   000024   8D83         MOV     DPH,R5
   \   000026   D0E0         POP     A
   \   000028   F0           MOVX    @DPTR,A
   \   000029   8A82         MOV     DPL,R2
   \   00002B   8B83         MOV     DPH,R3
   \   00002D   A3           INC     DPTR
   \   00002E   AA82         MOV     R2,DPL
   \   000030   AB83         MOV     R3,DPH
   2585            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V0,A
   \   000039   75..00       MOV     ?V1,#0x0
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F8           MOV     R0,A
   \   000043   7900         MOV     R1,#0x0
   \   000045   E4           CLR     A
   \   000046   C8           XCH     A,R0
   \   000047   F9           MOV     R1,A
   \   000048   E5..         MOV     A,?V0
   \   00004A   28           ADD     A,R0
   \   00004B   F8           MOV     R0,A
   \   00004C   E5..         MOV     A,?V1
   \   00004E   39           ADDC    A,R1
   \   00004F   F9           MOV     R1,A
   \   000050   8C82         MOV     DPL,R4
   \   000052   8D83         MOV     DPH,R5
   \   000054   A3           INC     DPTR
   \   000055   E8           MOV     A,R0
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   E9           MOV     A,R1
   \   000059   F0           MOVX    @DPTR,A
   2586          
   2587            if ( pNPRsp->status == ZDP_SUCCESS )
   \   00005A   8C82         MOV     DPL,R4
   \   00005C   8D83         MOV     DPH,R5
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   6003         JZ      $+5
   \   000061   02....       LJMP    ??ZDO_ParsePowerDescRsp_0 & 0xFFFF
   2588            {
   2589              msg += 2;
   \   000064   EA           MOV     A,R2
   \   000065   2402         ADD     A,#0x2
   \   000067   FA           MOV     R2,A
   \   000068   5001         JNC     ??ZDO_ParsePowerDescRsp_1
   \   00006A   0B           INC     R3
   2590              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   \                     ??ZDO_ParsePowerDescRsp_1:
   \   00006B   8A82         MOV     DPL,R2
   \   00006D   8B83         MOV     DPH,R3
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   C4           SWAP    A
   \   000071   540F         ANL     A,#0xf
   \   000073   F5..         MOV     ?V0,A
   \   000075   75..00       MOV     ?V1,#0x0
   \   000078   8C82         MOV     DPL,R4
   \   00007A   8D83         MOV     DPH,R5
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   540F         ANL     A,#0xf
   \   000082   F5..         MOV     ?V2,A
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   54FF         ANL     A,#0xff
   \   000088   F5..         MOV     ?V3,A
   \   00008A   7404         MOV     A,#0x4
   \   00008C   78..         MOV     R0,#?V0
   \   00008E   12....       LCALL   ?S_SHL
   \   000091   E5..         MOV     A,?V0
   \   000093   54F0         ANL     A,#0xf0
   \   000095   F8           MOV     R0,A
   \   000096   E5..         MOV     A,?V1
   \   000098   5400         ANL     A,#0x0
   \   00009A   F9           MOV     R1,A
   \   00009B   E5..         MOV     A,?V2
   \   00009D   48           ORL     A,R0
   \   00009E   F8           MOV     R0,A
   \   00009F   E5..         MOV     A,?V3
   \   0000A1   49           ORL     A,R1
   \   0000A2   F9           MOV     R1,A
   \   0000A3   8C82         MOV     DPL,R4
   \   0000A5   8D83         MOV     DPH,R5
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   E8           MOV     A,R0
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   E9           MOV     A,R1
   \   0000AE   F0           MOVX    @DPTR,A
   2591              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   \   0000AF   8A82         MOV     DPL,R2
   \   0000B1   8B83         MOV     DPH,R3
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F8           MOV     R0,A
   \   0000B5   7900         MOV     R1,#0x0
   \   0000B7   E8           MOV     A,R0
   \   0000B8   540F         ANL     A,#0xf
   \   0000BA   F8           MOV     R0,A
   \   0000BB   E9           MOV     A,R1
   \   0000BC   5400         ANL     A,#0x0
   \   0000BE   F9           MOV     R1,A
   \   0000BF   8A82         MOV     DPL,R2
   \   0000C1   8B83         MOV     DPH,R3
   \   0000C3   A3           INC     DPTR
   \   0000C4   AA82         MOV     R2,DPL
   \   0000C6   AB83         MOV     R3,DPH
   \   0000C8   8C82         MOV     DPL,R4
   \   0000CA   8D83         MOV     DPH,R5
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   54F0         ANL     A,#0xf0
   \   0000D2   F5..         MOV     ?V0,A
   \   0000D4   A3           INC     DPTR
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   54FF         ANL     A,#0xff
   \   0000D8   F5..         MOV     ?V1,A
   \   0000DA   E8           MOV     A,R0
   \   0000DB   540F         ANL     A,#0xf
   \   0000DD   F8           MOV     R0,A
   \   0000DE   E9           MOV     A,R1
   \   0000DF   5400         ANL     A,#0x0
   \   0000E1   F9           MOV     R1,A
   \   0000E2   E5..         MOV     A,?V0
   \   0000E4   48           ORL     A,R0
   \   0000E5   F8           MOV     R0,A
   \   0000E6   E5..         MOV     A,?V1
   \   0000E8   49           ORL     A,R1
   \   0000E9   F9           MOV     R1,A
   \   0000EA   8C82         MOV     DPL,R4
   \   0000EC   8D83         MOV     DPH,R5
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   E8           MOV     A,R0
   \   0000F2   F0           MOVX    @DPTR,A
   \   0000F3   A3           INC     DPTR
   \   0000F4   E9           MOV     A,R1
   \   0000F5   F0           MOVX    @DPTR,A
   2592              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   \   0000F6   8A82         MOV     DPL,R2
   \   0000F8   8B83         MOV     DPH,R3
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   C4           SWAP    A
   \   0000FC   540F         ANL     A,#0xf
   \   0000FE   F5..         MOV     ?V0,A
   \   000100   75..00       MOV     ?V1,#0x0
   \   000103   8C82         MOV     DPL,R4
   \   000105   8D83         MOV     DPH,R5
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   54FF         ANL     A,#0xff
   \   00010D   F5..         MOV     ?V2,A
   \   00010F   A3           INC     DPTR
   \   000110   E0           MOVX    A,@DPTR
   \   000111   540F         ANL     A,#0xf
   \   000113   F5..         MOV     ?V3,A
   \   000115   740C         MOV     A,#0xc
   \   000117   78..         MOV     R0,#?V0
   \   000119   12....       LCALL   ?S_SHL
   \   00011C   E5..         MOV     A,?V2
   \   00011E   45..         ORL     A,?V0
   \   000120   F8           MOV     R0,A
   \   000121   E5..         MOV     A,?V3
   \   000123   45..         ORL     A,?V1
   \   000125   F9           MOV     R1,A
   \   000126   8C82         MOV     DPL,R4
   \   000128   8D83         MOV     DPH,R5
   \   00012A   A3           INC     DPTR
   \   00012B   A3           INC     DPTR
   \   00012C   A3           INC     DPTR
   \   00012D   E8           MOV     A,R0
   \   00012E   F0           MOVX    @DPTR,A
   \   00012F   A3           INC     DPTR
   \   000130   E9           MOV     A,R1
   \   000131   F0           MOVX    @DPTR,A
   2593              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   \   000132   8A82         MOV     DPL,R2
   \   000134   8B83         MOV     DPH,R3
   \   000136   E0           MOVX    A,@DPTR
   \   000137   F8           MOV     R0,A
   \   000138   7900         MOV     R1,#0x0
   \   00013A   E8           MOV     A,R0
   \   00013B   540F         ANL     A,#0xf
   \   00013D   F8           MOV     R0,A
   \   00013E   E9           MOV     A,R1
   \   00013F   5400         ANL     A,#0x0
   \   000141   F9           MOV     R1,A
   \   000142   8A82         MOV     DPL,R2
   \   000144   8B83         MOV     DPH,R3
   \   000146   A3           INC     DPTR
   \   000147   AA82         MOV     R2,DPL
   \   000149   AB83         MOV     R3,DPH
   \   00014B   8C82         MOV     DPL,R4
   \   00014D   8D83         MOV     DPH,R5
   \   00014F   A3           INC     DPTR
   \   000150   A3           INC     DPTR
   \   000151   A3           INC     DPTR
   \   000152   E0           MOVX    A,@DPTR
   \   000153   54FF         ANL     A,#0xff
   \   000155   F5..         MOV     ?V0,A
   \   000157   A3           INC     DPTR
   \   000158   E0           MOVX    A,@DPTR
   \   000159   54F0         ANL     A,#0xf0
   \   00015B   F5..         MOV     ?V1,A
   \   00015D   E4           CLR     A
   \   00015E   C8           XCH     A,R0
   \   00015F   F9           MOV     R1,A
   \   000160   E8           MOV     A,R0
   \   000161   5400         ANL     A,#0x0
   \   000163   F8           MOV     R0,A
   \   000164   E9           MOV     A,R1
   \   000165   540F         ANL     A,#0xf
   \   000167   F9           MOV     R1,A
   \   000168   E5..         MOV     A,?V0
   \   00016A   48           ORL     A,R0
   \   00016B   F8           MOV     R0,A
   \   00016C   E5..         MOV     A,?V1
   \   00016E   49           ORL     A,R1
   \   00016F   F9           MOV     R1,A
   \   000170   8C82         MOV     DPL,R4
   \   000172   8D83         MOV     DPH,R5
   \   000174   A3           INC     DPTR
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   E8           MOV     A,R0
   \   000178   F0           MOVX    @DPTR,A
   \   000179   A3           INC     DPTR
   \   00017A   E9           MOV     A,R1
   \   00017B   F0           MOVX    @DPTR,A
   2594            }
   2595          }
   \                     ??ZDO_ParsePowerDescRsp_0:
   \   00017C   7F04         MOV     R7,#0x4
   \   00017E   02....       LJMP    ?BANKED_LEAVE_XDATA
   2596          
   2597          /*********************************************************************
   2598           * @fn          ZDO_ParseSimpleDescRsp
   2599           *
   2600           * @brief       This function parse the Simple_Desc_rsp message.
   2601           *
   2602           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   2603           *         in the SimpleDescriptionFormat_t structure are allocated
   2604           *         and the calling function needs to free [osal_msg_free()]
   2605           *         these buffers.
   2606           *
   2607           * @param       inMsg  - incoming message
   2608           * @param       pSimpleDescRsp - place to parse the message into
   2609           *
   2610           * @return      none
   2611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2612          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   2613          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   2614            uint8 *msg;
   2615          
   2616            msg = inMsg->asdu;
   \   00000D   E5..         MOV     A,?V2
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   35..         ADDC    A,?V3
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   E8           MOV     A,R0
   \   00001E   FE           MOV     R6,A
   \   00001F   E9           MOV     A,R1
   \   000020   FF           MOV     R7,A
   2617            pSimpleDescRsp->status = *msg++;
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   E0           MOVX    A,@DPTR
   \   000026   C0E0         PUSH    A
   \   000028   85..82       MOV     DPL,?V0
   \   00002B   85..83       MOV     DPH,?V1
   \   00002E   D0E0         POP     A
   \   000030   F0           MOVX    @DPTR,A
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   A3           INC     DPTR
   \   000036   AE82         MOV     R6,DPL
   \   000038   AF83         MOV     R7,DPH
   2618            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FA           MOV     R2,A
   \   000040   7B00         MOV     R3,#0x0
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F8           MOV     R0,A
   \   000049   7900         MOV     R1,#0x0
   \   00004B   E4           CLR     A
   \   00004C   C8           XCH     A,R0
   \   00004D   F9           MOV     R1,A
   \   00004E   EA           MOV     A,R2
   \   00004F   28           ADD     A,R0
   \   000050   F8           MOV     R0,A
   \   000051   EB           MOV     A,R3
   \   000052   39           ADDC    A,R1
   \   000053   F9           MOV     R1,A
   \   000054   85..82       MOV     DPL,?V0
   \   000057   85..83       MOV     DPH,?V1
   \   00005A   A3           INC     DPTR
   \   00005B   E8           MOV     A,R0
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   E9           MOV     A,R1
   \   00005F   F0           MOVX    @DPTR,A
   2619            msg += sizeof ( uint16 );
   \   000060   EE           MOV     A,R6
   \   000061   2402         ADD     A,#0x2
   \   000063   FE           MOV     R6,A
   \   000064   5001         JNC     ??ZDO_ParseSimpleDescRsp_0
   \   000066   0F           INC     R7
   2620            msg++; // Skip past the length field.
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   000067   8E82         MOV     DPL,R6
   \   000069   8F83         MOV     DPH,R7
   \   00006B   A3           INC     DPTR
   \   00006C   AE82         MOV     R6,DPL
   \   00006E   AF83         MOV     R7,DPH
   2621          
   2622            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \   000070   85..82       MOV     DPL,?V0
   \   000073   85..83       MOV     DPH,?V1
   \   000076   E0           MOVX    A,@DPTR
   \   000077   7011         JNZ     ??ZDO_ParseSimpleDescRsp_1
   2623            {
   2624              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   000079                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   000079   E5..         MOV     A,?V0
   \   00007B   2403         ADD     A,#0x3
   \   00007D   FC           MOV     R4,A
   \   00007E   E4           CLR     A
   \   00007F   35..         ADDC    A,?V1
   \   000081   FD           MOV     R5,A
   \   000082   EE           MOV     A,R6
   \   000083   FA           MOV     R2,A
   \   000084   EF           MOV     A,R7
   \   000085   FB           MOV     R3,A
   \   000086   12....       LCALL   ??ZDO_ParseSimpleDescBuf?relay; Banked call to: ZDO_ParseSimpleDescBuf
   \   000089   E9           MOV     A,R1
   2625            }
   2626          }
   \                     ??ZDO_ParseSimpleDescRsp_1:
   \   00008A   7F04         MOV     R7,#0x4
   \   00008C   02....       LJMP    ?BANKED_LEAVE_XDATA
   2627          
   2628          /*********************************************************************
   2629           * @fn          ZDO_ParseEPListRsp
   2630           *
   2631           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   2632           *
   2633           * @param       inMsg  - incoming message
   2634           *
   2635           * @return      none
   2636           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2637          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   2638          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   2639            ZDO_ActiveEndpointRsp_t *pRsp;
   2640            uint8 *msg;
   2641            uint8 Status;
   2642            uint8 cnt;
   2643          
   2644            msg = inMsg->asdu;
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   C8           XCH     A,R0
   \   000020   2413         ADD     A,#0x13
   \   000022   F582         MOV     DPL,A
   \   000024   C8           XCH     A,R0
   \   000025   3400         ADDC    A,#0x0
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   E8           MOV     A,R0
   \   00002F   FE           MOV     R6,A
   \   000030   E9           MOV     A,R1
   \   000031   FF           MOV     R7,A
   2645            Status = *msg++;
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V6,A
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   A3           INC     DPTR
   \   00003E   AE82         MOV     R6,DPL
   \   000040   AF83         MOV     R7,DPH
   2646            cnt = msg[2];
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V3,A
   2647          
   2648            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   00004B                ; Setup parameters for call to function osal_mem_alloc
   \   00004B   A8..         MOV     R0,?V3
   \   00004D   7900         MOV     R1,#0x0
   \   00004F   E8           MOV     A,R0
   \   000050   2404         ADD     A,#0x4
   \   000052   FA           MOV     R2,A
   \   000053   E4           CLR     A
   \   000054   39           ADDC    A,R1
   \   000055   FB           MOV     R3,A
   \   000056   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000059   8A..         MOV     ?V0,R2
   \   00005B   8B..         MOV     ?V1,R3
   \   00005D   85....       MOV     ?V4,?V0
   \   000060   85....       MOV     ?V5,?V1
   2649            if ( pRsp )
   \   000063   E5..         MOV     A,?V4
   \   000065   45..         ORL     A,?V5
   \   000067   6074         JZ      ??ZDO_ParseEPListRsp_0
   2650            {
   2651              pRsp->status = Status;
   \   000069   E5..         MOV     A,?V6
   \   00006B   C0E0         PUSH    A
   \   00006D   85..82       MOV     DPL,?V4
   \   000070   85..83       MOV     DPH,?V5
   \   000073   D0E0         POP     A
   \   000075   F0           MOVX    @DPTR,A
   2652              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   FA           MOV     R2,A
   \   00007C   7B00         MOV     R3,#0x0
   \   00007E   8E82         MOV     DPL,R6
   \   000080   8F83         MOV     DPH,R7
   \   000082   A3           INC     DPTR
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F8           MOV     R0,A
   \   000085   7900         MOV     R1,#0x0
   \   000087   E4           CLR     A
   \   000088   C8           XCH     A,R0
   \   000089   F9           MOV     R1,A
   \   00008A   EA           MOV     A,R2
   \   00008B   28           ADD     A,R0
   \   00008C   F8           MOV     R0,A
   \   00008D   EB           MOV     A,R3
   \   00008E   39           ADDC    A,R1
   \   00008F   F9           MOV     R1,A
   \   000090   85..82       MOV     DPL,?V4
   \   000093   85..83       MOV     DPH,?V5
   \   000096   A3           INC     DPTR
   \   000097   E8           MOV     A,R0
   \   000098   F0           MOVX    @DPTR,A
   \   000099   A3           INC     DPTR
   \   00009A   E9           MOV     A,R1
   \   00009B   F0           MOVX    @DPTR,A
   2653              msg += sizeof( uint16 );
   \   00009C   EE           MOV     A,R6
   \   00009D   2402         ADD     A,#0x2
   \   00009F   FE           MOV     R6,A
   \   0000A0   5001         JNC     ??ZDO_ParseEPListRsp_1
   \   0000A2   0F           INC     R7
   2654              pRsp->cnt = cnt;
   \                     ??ZDO_ParseEPListRsp_1:
   \   0000A3   E5..         MOV     A,?V3
   \   0000A5   C0E0         PUSH    A
   \   0000A7   85..82       MOV     DPL,?V4
   \   0000AA   85..83       MOV     DPH,?V5
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   D0E0         POP     A
   \   0000B2   F0           MOVX    @DPTR,A
   2655              msg++; // pass cnt
   \   0000B3   8E82         MOV     DPL,R6
   \   0000B5   8F83         MOV     DPH,R7
   \   0000B7   A3           INC     DPTR
   \   0000B8   AE82         MOV     R6,DPL
   \   0000BA   AF83         MOV     R7,DPH
   2656              osal_memcpy( pRsp->epList, msg, cnt );
   \   0000BC                ; Setup parameters for call to function osal_memcpy
   \   0000BC   8E..         MOV     ?V0,R6
   \   0000BE   8F..         MOV     ?V1,R7
   \   0000C0   75..00       MOV     ?V2,#0x0
   \   0000C3   78..         MOV     R0,#?V0
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C8   AC..         MOV     R4,?V3
   \   0000CA   7D00         MOV     R5,#0x0
   \   0000CC   E5..         MOV     A,?V4
   \   0000CE   2404         ADD     A,#0x4
   \   0000D0   FA           MOV     R2,A
   \   0000D1   E4           CLR     A
   \   0000D2   35..         ADDC    A,?V5
   \   0000D4   FB           MOV     R3,A
   \   0000D5   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000D8   7403         MOV     A,#0x3
   \   0000DA   12....       LCALL   ?DEALLOC_XSTACK8
   2657            }
   2658          
   2659            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_0:
   \   0000DD   AA..         MOV     R2,?V4
   \   0000DF   AB..         MOV     R3,?V5
   \   0000E1   7402         MOV     A,#0x2
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E6   7F07         MOV     R7,#0x7
   \   0000E8   02....       LJMP    ?BANKED_LEAVE_XDATA
   2660          }
   2661          
   2662          /*********************************************************************
   2663           * @fn          ZDO_ParseServerDiscRsp
   2664           *
   2665           * @brief       Parse the Server_Discovery_rsp message.
   2666           *
   2667           * @param       inMsg - incoming message.
   2668           * @param       pRsp - place to put the parsed information.
   2669           *
   2670           * @return      none
   2671           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2672          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   2673          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2674            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F582         MOV     DPL,A
   \   00000A   E4           CLR     A
   \   00000B   3B           ADDC    A,R3
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F583         MOV     DPH,A
   \   000014   8882         MOV     DPL,R0
   \   000016   E0           MOVX    A,@DPTR
   \   000017   C0E0         PUSH    A
   \   000019   8C82         MOV     DPL,R4
   \   00001B   8D83         MOV     DPH,R5
   \   00001D   D0E0         POP     A
   \   00001F   F0           MOVX    @DPTR,A
   2675            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \   000020   EA           MOV     A,R2
   \   000021   2413         ADD     A,#0x13
   \   000023   F582         MOV     DPL,A
   \   000025   E4           CLR     A
   \   000026   3B           ADDC    A,R3
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F583         MOV     DPH,A
   \   00002F   8882         MOV     DPL,R0
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FE           MOV     R6,A
   \   000034   7F00         MOV     R7,#0x0
   \   000036   EA           MOV     A,R2
   \   000037   2413         ADD     A,#0x13
   \   000039   F582         MOV     DPL,A
   \   00003B   E4           CLR     A
   \   00003C   3B           ADDC    A,R3
   \   00003D   F583         MOV     DPH,A
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F8           MOV     R0,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F583         MOV     DPH,A
   \   000045   8882         MOV     DPL,R0
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F8           MOV     R0,A
   \   00004B   7900         MOV     R1,#0x0
   \   00004D   E4           CLR     A
   \   00004E   C8           XCH     A,R0
   \   00004F   F9           MOV     R1,A
   \   000050   EE           MOV     A,R6
   \   000051   28           ADD     A,R0
   \   000052   F8           MOV     R0,A
   \   000053   EF           MOV     A,R7
   \   000054   39           ADDC    A,R1
   \   000055   F9           MOV     R1,A
   \   000056   8C82         MOV     DPL,R4
   \   000058   8D83         MOV     DPH,R5
   \   00005A   A3           INC     DPTR
   \   00005B   E8           MOV     A,R0
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   E9           MOV     A,R1
   \   00005F   F0           MOVX    @DPTR,A
   2676          }
   \   000060   7F01         MOV     R7,#0x1
   \   000062   02....       LJMP    ?BANKED_LEAVE_XDATA
   2677          
   2678          /*********************************************************************
   2679           * @fn          ZDO_ParseMgmtLqiRsp
   2680           *
   2681           * @brief       This function parses the incoming Management
   2682           *              LQI response
   2683           *
   2684           * @param       inMsg - incoming message
   2685           *
   2686           * @return      a pointer to parsed response structure (NULL if not allocated).
   2687           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2688           *          by the calling function [osal_mem_free()].
   2689           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2690          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   2691          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   2692            ZDO_MgmtLqiRsp_t *pRsp;
   2693            uint8 status;
   2694            uint8 startIndex = 0;
   \   000014   75..00       MOV     ?V6,#0x0
   2695            uint8 neighborLqiCount = 0;
   \   000017   75..00       MOV     ?V4,#0x0
   2696            uint8 neighborLqiEntries = 0;
   \   00001A   75..00       MOV     ?V5,#0x0
   2697            uint8 *msg;
   2698          
   2699            msg = inMsg->asdu;
   \   00001D   7401         MOV     A,#0x1
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F8           MOV     R0,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   C8           XCH     A,R0
   \   000027   2413         ADD     A,#0x13
   \   000029   F582         MOV     DPL,A
   \   00002B   C8           XCH     A,R0
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   F583         MOV     DPH,A
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \   000035   E8           MOV     A,R0
   \   000036   FE           MOV     R6,A
   \   000037   E9           MOV     A,R1
   \   000038   FF           MOV     R7,A
   2700          
   2701            status = *msg++;
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   C0E0         PUSH    A
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   D0E0         POP     A
   \   000048   F0           MOVX    @DPTR,A
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   A3           INC     DPTR
   \   00004E   AE82         MOV     R6,DPL
   \   000050   AF83         MOV     R7,DPH
   2702            if ( status == ZSuccess )
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   E0           MOVX    A,@DPTR
   \   000059   7030         JNZ     ??ZDO_ParseMgmtLqiRsp_0
   2703            {
   2704              neighborLqiEntries = *msg++;
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F5..         MOV     ?V5,A
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   A3           INC     DPTR
   \   000067   AE82         MOV     R6,DPL
   \   000069   AF83         MOV     R7,DPH
   2705              startIndex = *msg++;
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F5..         MOV     ?V6,A
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   A3           INC     DPTR
   \   000077   AE82         MOV     R6,DPL
   \   000079   AF83         MOV     R7,DPH
   2706              neighborLqiCount = *msg++;
   \   00007B   8E82         MOV     DPL,R6
   \   00007D   8F83         MOV     DPH,R7
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F5..         MOV     ?V4,A
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   A3           INC     DPTR
   \   000087   AE82         MOV     R6,DPL
   \   000089   AF83         MOV     R7,DPH
   2707            }
   2708          
   2709            // Allocate a buffer big enough to handle the list.
   2710            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   2711                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( neighborLqiItem_t )) );
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   00008B                ; Setup parameters for call to function osal_mem_alloc
   \   00008B   A8..         MOV     R0,?V4
   \   00008D   7900         MOV     R1,#0x0
   \   00008F   E8           MOV     A,R0
   \   000090   75F00E       MOV     B,#0xe
   \   000093   A4           MUL     AB
   \   000094   C8           XCH     A,R0
   \   000095   AAF0         MOV     R2,B
   \   000097   75F000       MOV     B,#0x0
   \   00009A   A4           MUL     AB
   \   00009B   2A           ADD     A,R2
   \   00009C   FA           MOV     R2,A
   \   00009D   75F00E       MOV     B,#0xe
   \   0000A0   E9           MOV     A,R1
   \   0000A1   A4           MUL     AB
   \   0000A2   2A           ADD     A,R2
   \   0000A3   F9           MOV     R1,A
   \   0000A4   E8           MOV     A,R0
   \   0000A5   2404         ADD     A,#0x4
   \   0000A7   FA           MOV     R2,A
   \   0000A8   E4           CLR     A
   \   0000A9   39           ADDC    A,R1
   \   0000AA   FB           MOV     R3,A
   \   0000AB   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0000AE   8A..         MOV     ?V0,R2
   \   0000B0   8B..         MOV     ?V1,R3
   \   0000B2   85....       MOV     ?V2,?V0
   \   0000B5   85....       MOV     ?V3,?V1
   2712            if ( pRsp )
   \   0000B8   E5..         MOV     A,?V2
   \   0000BA   45..         ORL     A,?V3
   \   0000BC   7003         JNZ     $+5
   \   0000BE   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_1 & 0xFFFF
   2713            {
   2714              uint8 x;
   2715              neighborLqiItem_t *pList = pRsp->list;
   \   0000C1   E5..         MOV     A,?V2
   \   0000C3   2404         ADD     A,#0x4
   \   0000C5   F5..         MOV     ?V0,A
   \   0000C7   E4           CLR     A
   \   0000C8   35..         ADDC    A,?V3
   \   0000CA   F5..         MOV     ?V1,A
   2716              pRsp->status = status;
   \   0000CC   85..82       MOV     DPL,?XSP + 0
   \   0000CF   85..83       MOV     DPH,?XSP + 1
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   C0E0         PUSH    A
   \   0000D5   85..82       MOV     DPL,?V2
   \   0000D8   85..83       MOV     DPH,?V3
   \   0000DB   D0E0         POP     A
   \   0000DD   F0           MOVX    @DPTR,A
   2717              pRsp->neighborLqiEntries = neighborLqiEntries;
   \   0000DE   E5..         MOV     A,?V5
   \   0000E0   C0E0         PUSH    A
   \   0000E2   85..82       MOV     DPL,?V2
   \   0000E5   85..83       MOV     DPH,?V3
   \   0000E8   A3           INC     DPTR
   \   0000E9   D0E0         POP     A
   \   0000EB   F0           MOVX    @DPTR,A
   2718              pRsp->startIndex = startIndex;
   \   0000EC   E5..         MOV     A,?V6
   \   0000EE   C0E0         PUSH    A
   \   0000F0   85..82       MOV     DPL,?V2
   \   0000F3   85..83       MOV     DPH,?V3
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   D0E0         POP     A
   \   0000FA   F0           MOVX    @DPTR,A
   2719              pRsp->neighborLqiCount = neighborLqiCount;
   \   0000FB   E5..         MOV     A,?V4
   \   0000FD   C0E0         PUSH    A
   \   0000FF   85..82       MOV     DPL,?V2
   \   000102   85..83       MOV     DPH,?V3
   \   000105   A3           INC     DPTR
   \   000106   A3           INC     DPTR
   \   000107   A3           INC     DPTR
   \   000108   D0E0         POP     A
   \   00010A   F0           MOVX    @DPTR,A
   2720          
   2721              for ( x = 0; x < neighborLqiCount; x++ )
   \   00010B   75..00       MOV     ?V7,#0x0
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   00010E   E5..         MOV     A,?V7
   \   000110   C3           CLR     C
   \   000111   95..         SUBB    A,?V4
   \   000113   4003         JC      $+5
   \   000115   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_1 & 0xFFFF
   2722              {
   2723                osal_cpyExtAddr(pList->extPANId, msg);   //Copy extended PAN ID
   \   000118                ; Setup parameters for call to function sAddrExtCpy
   \   000118   EE           MOV     A,R6
   \   000119   FC           MOV     R4,A
   \   00011A   EF           MOV     A,R7
   \   00011B   FD           MOV     R5,A
   \   00011C   E5..         MOV     A,?V0
   \   00011E   2404         ADD     A,#0x4
   \   000120   FA           MOV     R2,A
   \   000121   E4           CLR     A
   \   000122   35..         ADDC    A,?V1
   \   000124   FB           MOV     R3,A
   \   000125   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   2724                msg += Z_EXTADDR_LEN;
   \   000128   EE           MOV     A,R6
   \   000129   2408         ADD     A,#0x8
   \   00012B   FE           MOV     R6,A
   \   00012C   5001         JNC     ??ZDO_ParseMgmtLqiRsp_3
   \   00012E   0F           INC     R7
   2725          
   2726                msg += Z_EXTADDR_LEN;  // Throwing away IEEE.
   \                     ??ZDO_ParseMgmtLqiRsp_3:
   \   00012F   EE           MOV     A,R6
   \   000130   2408         ADD     A,#0x8
   \   000132   FE           MOV     R6,A
   \   000133   5001         JNC     ??ZDO_ParseMgmtLqiRsp_4
   \   000135   0F           INC     R7
   2727                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtLqiRsp_4:
   \   000136   8E82         MOV     DPL,R6
   \   000138   8F83         MOV     DPH,R7
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   F8           MOV     R0,A
   \   00013C   7900         MOV     R1,#0x0
   \   00013E   8E82         MOV     DPL,R6
   \   000140   8F83         MOV     DPH,R7
   \   000142   A3           INC     DPTR
   \   000143   E0           MOVX    A,@DPTR
   \   000144   FA           MOV     R2,A
   \   000145   7B00         MOV     R3,#0x0
   \   000147   E4           CLR     A
   \   000148   CA           XCH     A,R2
   \   000149   FB           MOV     R3,A
   \   00014A   E8           MOV     A,R0
   \   00014B   2A           ADD     A,R2
   \   00014C   F8           MOV     R0,A
   \   00014D   E9           MOV     A,R1
   \   00014E   3B           ADDC    A,R3
   \   00014F   F9           MOV     R1,A
   \   000150   85..82       MOV     DPL,?V0
   \   000153   85..83       MOV     DPH,?V1
   \   000156   E8           MOV     A,R0
   \   000157   F0           MOVX    @DPTR,A
   \   000158   A3           INC     DPTR
   \   000159   E9           MOV     A,R1
   \   00015A   F0           MOVX    @DPTR,A
   2728                msg += 2 + 1 + 1 + 1;      // Skip DeviceType, RxOnIdle, Rlationship, PermitJoining and Depth
   \   00015B   EE           MOV     A,R6
   \   00015C   2405         ADD     A,#0x5
   \   00015E   FE           MOV     R6,A
   \   00015F   5001         JNC     ??ZDO_ParseMgmtLqiRsp_5
   \   000161   0F           INC     R7
   2729                pList->rxLqi = *msg++;
   \                     ??ZDO_ParseMgmtLqiRsp_5:
   \   000162   8E82         MOV     DPL,R6
   \   000164   8F83         MOV     DPH,R7
   \   000166   E0           MOVX    A,@DPTR
   \   000167   C0E0         PUSH    A
   \   000169   E5..         MOV     A,?V0
   \   00016B   240D         ADD     A,#0xd
   \   00016D   F582         MOV     DPL,A
   \   00016F   E4           CLR     A
   \   000170   35..         ADDC    A,?V1
   \   000172   F583         MOV     DPH,A
   \   000174   D0E0         POP     A
   \   000176   F0           MOVX    @DPTR,A
   \   000177   8E82         MOV     DPL,R6
   \   000179   8F83         MOV     DPH,R7
   \   00017B   A3           INC     DPTR
   \   00017C   AE82         MOV     R6,DPL
   \   00017E   AF83         MOV     R7,DPH
   2730                pList->txQuality = 0;  // This is not specified OTA by ZigBee 1.1.
   \   000180   E5..         MOV     A,?V0
   \   000182   240C         ADD     A,#0xc
   \   000184   F582         MOV     DPL,A
   \   000186   E4           CLR     A
   \   000187   35..         ADDC    A,?V1
   \   000189   F583         MOV     DPH,A
   \   00018B   7400         MOV     A,#0x0
   \   00018D   F0           MOVX    @DPTR,A
   2731                pList++;
   \   00018E   E5..         MOV     A,?V0
   \   000190   240E         ADD     A,#0xe
   \   000192   F5..         MOV     ?V0,A
   \   000194   5002         JNC     ??ZDO_ParseMgmtLqiRsp_6
   \   000196   05..         INC     ?V1
   2732              }
   \                     ??ZDO_ParseMgmtLqiRsp_6:
   \   000198   05..         INC     ?V7
   \   00019A   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_2 & 0xFFFF
   2733            }
   2734          
   2735            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   00019D   AA..         MOV     R2,?V2
   \   00019F   AB..         MOV     R3,?V3
   \   0001A1   7403         MOV     A,#0x3
   \   0001A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A6   7F08         MOV     R7,#0x8
   \   0001A8   02....       LJMP    ?BANKED_LEAVE_XDATA
   2736          }
   2737          
   2738          /*********************************************************************
   2739           * @fn          ZDO_ParseMgmNwkDiscRsp
   2740           *
   2741           * @brief       This function parses the incoming Management
   2742           *              Network Discover response.
   2743           *
   2744           * @param       inMsg - incoming message
   2745           *
   2746           * @return      pointer to parsed response.  This structure was
   2747           *          allocated using osal_mem_alloc, so it must be freed
   2748           *          by the calling function [osal_mem_free()].
   2749           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2750          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   2751          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   2752            ZDO_MgmNwkDiscRsp_t *pRsp;
   2753            uint8 status;
   2754            uint8 networkCount = 0;
   \   000014   75..00       MOV     ?V6,#0x0
   2755            uint8 startIndex = 0;
   \   000017   75..00       MOV     ?V5,#0x0
   2756            uint8 networkListCount = 0;
   \   00001A   75..00       MOV     ?V4,#0x0
   2757            uint8 *msg;
   2758          
   2759            msg = inMsg->asdu;
   \   00001D   7401         MOV     A,#0x1
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F8           MOV     R0,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   C8           XCH     A,R0
   \   000027   2413         ADD     A,#0x13
   \   000029   F582         MOV     DPL,A
   \   00002B   C8           XCH     A,R0
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   F583         MOV     DPH,A
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \   000035   E8           MOV     A,R0
   \   000036   FE           MOV     R6,A
   \   000037   E9           MOV     A,R1
   \   000038   FF           MOV     R7,A
   2760            status = *msg++;
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   C0E0         PUSH    A
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   D0E0         POP     A
   \   000048   F0           MOVX    @DPTR,A
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   A3           INC     DPTR
   \   00004E   AE82         MOV     R6,DPL
   \   000050   AF83         MOV     R7,DPH
   2761          
   2762            if ( status == ZSuccess )
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   E0           MOVX    A,@DPTR
   \   000059   7030         JNZ     ??ZDO_ParseMgmNwkDiscRsp_0
   2763            {
   2764              networkCount = *msg++;
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F5..         MOV     ?V6,A
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   A3           INC     DPTR
   \   000067   AE82         MOV     R6,DPL
   \   000069   AF83         MOV     R7,DPH
   2765              startIndex = *msg++;
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F5..         MOV     ?V5,A
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   A3           INC     DPTR
   \   000077   AE82         MOV     R6,DPL
   \   000079   AF83         MOV     R7,DPH
   2766              networkListCount = *msg++;
   \   00007B   8E82         MOV     DPL,R6
   \   00007D   8F83         MOV     DPH,R7
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F5..         MOV     ?V4,A
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   A3           INC     DPTR
   \   000087   AE82         MOV     R6,DPL
   \   000089   AF83         MOV     R7,DPH
   2767            }
   2768          
   2769            // Allocate a buffer big enough to handle the list.
   2770            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   2771                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   00008B                ; Setup parameters for call to function osal_mem_alloc
   \   00008B   A8..         MOV     R0,?V4
   \   00008D   7900         MOV     R1,#0x0
   \   00008F   E8           MOV     A,R0
   \   000090   75F010       MOV     B,#0x10
   \   000093   A4           MUL     AB
   \   000094   C8           XCH     A,R0
   \   000095   AAF0         MOV     R2,B
   \   000097   75F000       MOV     B,#0x0
   \   00009A   A4           MUL     AB
   \   00009B   2A           ADD     A,R2
   \   00009C   FA           MOV     R2,A
   \   00009D   75F010       MOV     B,#0x10
   \   0000A0   E9           MOV     A,R1
   \   0000A1   A4           MUL     AB
   \   0000A2   2A           ADD     A,R2
   \   0000A3   F9           MOV     R1,A
   \   0000A4   E8           MOV     A,R0
   \   0000A5   2404         ADD     A,#0x4
   \   0000A7   FA           MOV     R2,A
   \   0000A8   E4           CLR     A
   \   0000A9   39           ADDC    A,R1
   \   0000AA   FB           MOV     R3,A
   \   0000AB   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0000AE   8A..         MOV     ?V0,R2
   \   0000B0   8B..         MOV     ?V1,R3
   \   0000B2   85....       MOV     ?V2,?V0
   \   0000B5   85....       MOV     ?V3,?V1
   2772            if ( pRsp )
   \   0000B8   E5..         MOV     A,?V2
   \   0000BA   45..         ORL     A,?V3
   \   0000BC   7003         JNZ     $+5
   \   0000BE   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   2773            {
   2774              uint8 x;
   2775              mgmtNwkDiscItem_t *pList;
   2776          
   2777              pRsp->status = status;
   \   0000C1   85..82       MOV     DPL,?XSP + 0
   \   0000C4   85..83       MOV     DPH,?XSP + 1
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   C0E0         PUSH    A
   \   0000CA   85..82       MOV     DPL,?V2
   \   0000CD   85..83       MOV     DPH,?V3
   \   0000D0   D0E0         POP     A
   \   0000D2   F0           MOVX    @DPTR,A
   2778              pRsp->networkCount = networkCount;
   \   0000D3   E5..         MOV     A,?V6
   \   0000D5   C0E0         PUSH    A
   \   0000D7   85..82       MOV     DPL,?V2
   \   0000DA   85..83       MOV     DPH,?V3
   \   0000DD   A3           INC     DPTR
   \   0000DE   D0E0         POP     A
   \   0000E0   F0           MOVX    @DPTR,A
   2779              pRsp->startIndex = startIndex;
   \   0000E1   E5..         MOV     A,?V5
   \   0000E3   C0E0         PUSH    A
   \   0000E5   85..82       MOV     DPL,?V2
   \   0000E8   85..83       MOV     DPH,?V3
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   D0E0         POP     A
   \   0000EF   F0           MOVX    @DPTR,A
   2780              pRsp->networkListCount = networkListCount;
   \   0000F0   E5..         MOV     A,?V4
   \   0000F2   C0E0         PUSH    A
   \   0000F4   85..82       MOV     DPL,?V2
   \   0000F7   85..83       MOV     DPH,?V3
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   D0E0         POP     A
   \   0000FF   F0           MOVX    @DPTR,A
   2781              pList = pRsp->list;
   \   000100   E5..         MOV     A,?V2
   \   000102   2404         ADD     A,#0x4
   \   000104   F8           MOV     R0,A
   \   000105   E4           CLR     A
   \   000106   35..         ADDC    A,?V3
   \   000108   F9           MOV     R1,A
   \   000109   88..         MOV     ?V0,R0
   \   00010B   89..         MOV     ?V1,R1
   2782          
   2783              for ( x = 0; x < networkListCount; x++ )
   \   00010D   75..00       MOV     ?V7,#0x0
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   000110   E5..         MOV     A,?V7
   \   000112   C3           CLR     C
   \   000113   95..         SUBB    A,?V4
   \   000115   4003         JC      $+5
   \   000117   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   2784              {
   2785                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \   00011A                ; Setup parameters for call to function sAddrExtCpy
   \   00011A   EE           MOV     A,R6
   \   00011B   FC           MOV     R4,A
   \   00011C   EF           MOV     A,R7
   \   00011D   FD           MOV     R5,A
   \   00011E   AA..         MOV     R2,?V0
   \   000120   AB..         MOV     R3,?V1
   \   000122   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   2786                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   000125   8E82         MOV     DPL,R6
   \   000127   8F83         MOV     DPH,R7
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   F8           MOV     R0,A
   \   00012B   7900         MOV     R1,#0x0
   \   00012D   8E82         MOV     DPL,R6
   \   00012F   8F83         MOV     DPH,R7
   \   000131   A3           INC     DPTR
   \   000132   E0           MOVX    A,@DPTR
   \   000133   FA           MOV     R2,A
   \   000134   7B00         MOV     R3,#0x0
   \   000136   E4           CLR     A
   \   000137   CA           XCH     A,R2
   \   000138   FB           MOV     R3,A
   \   000139   E8           MOV     A,R0
   \   00013A   2A           ADD     A,R2
   \   00013B   F8           MOV     R0,A
   \   00013C   E9           MOV     A,R1
   \   00013D   3B           ADDC    A,R3
   \   00013E   F9           MOV     R1,A
   \   00013F   85..82       MOV     DPL,?V0
   \   000142   85..83       MOV     DPH,?V1
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   A3           INC     DPTR
   \   00014A   A3           INC     DPTR
   \   00014B   A3           INC     DPTR
   \   00014C   A3           INC     DPTR
   \   00014D   E8           MOV     A,R0
   \   00014E   F0           MOVX    @DPTR,A
   \   00014F   A3           INC     DPTR
   \   000150   E9           MOV     A,R1
   \   000151   F0           MOVX    @DPTR,A
   2787                msg += Z_EXTADDR_LEN;
   \   000152   EE           MOV     A,R6
   \   000153   2408         ADD     A,#0x8
   \   000155   FE           MOV     R6,A
   \   000156   5001         JNC     ??ZDO_ParseMgmNwkDiscRsp_3
   \   000158   0F           INC     R7
   2788          
   2789                pList->logicalChannel = *msg++;
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   000159   8E82         MOV     DPL,R6
   \   00015B   8F83         MOV     DPH,R7
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   C0E0         PUSH    A
   \   000160   85..82       MOV     DPL,?V0
   \   000163   85..83       MOV     DPH,?V1
   \   000166   A3           INC     DPTR
   \   000167   A3           INC     DPTR
   \   000168   A3           INC     DPTR
   \   000169   A3           INC     DPTR
   \   00016A   A3           INC     DPTR
   \   00016B   A3           INC     DPTR
   \   00016C   A3           INC     DPTR
   \   00016D   A3           INC     DPTR
   \   00016E   A3           INC     DPTR
   \   00016F   A3           INC     DPTR
   \   000170   D0E0         POP     A
   \   000172   F0           MOVX    @DPTR,A
   \   000173   8E82         MOV     DPL,R6
   \   000175   8F83         MOV     DPH,R7
   \   000177   A3           INC     DPTR
   \   000178   AE82         MOV     R6,DPL
   \   00017A   AF83         MOV     R7,DPH
   2790                pList->stackProfile = (*msg) & 0x0F;
   \   00017C   8E82         MOV     DPL,R6
   \   00017E   8F83         MOV     DPH,R7
   \   000180   E0           MOVX    A,@DPTR
   \   000181   540F         ANL     A,#0xf
   \   000183   C0E0         PUSH    A
   \   000185   E5..         MOV     A,?V0
   \   000187   240B         ADD     A,#0xb
   \   000189   F582         MOV     DPL,A
   \   00018B   E4           CLR     A
   \   00018C   35..         ADDC    A,?V1
   \   00018E   F583         MOV     DPH,A
   \   000190   D0E0         POP     A
   \   000192   F0           MOVX    @DPTR,A
   2791                pList->version = (*msg++ >> 4) & 0x0F;
   \   000193   8E82         MOV     DPL,R6
   \   000195   8F83         MOV     DPH,R7
   \   000197   E0           MOVX    A,@DPTR
   \   000198   C4           SWAP    A
   \   000199   540F         ANL     A,#0xf
   \   00019B   C0E0         PUSH    A
   \   00019D   E5..         MOV     A,?V0
   \   00019F   240C         ADD     A,#0xc
   \   0001A1   F582         MOV     DPL,A
   \   0001A3   E4           CLR     A
   \   0001A4   35..         ADDC    A,?V1
   \   0001A6   F583         MOV     DPH,A
   \   0001A8   D0E0         POP     A
   \   0001AA   F0           MOVX    @DPTR,A
   \   0001AB   8E82         MOV     DPL,R6
   \   0001AD   8F83         MOV     DPH,R7
   \   0001AF   A3           INC     DPTR
   \   0001B0   AE82         MOV     R6,DPL
   \   0001B2   AF83         MOV     R7,DPH
   2792                pList->beaconOrder = (*msg) & 0x0F;
   \   0001B4   8E82         MOV     DPL,R6
   \   0001B6   8F83         MOV     DPH,R7
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   540F         ANL     A,#0xf
   \   0001BB   C0E0         PUSH    A
   \   0001BD   E5..         MOV     A,?V0
   \   0001BF   240D         ADD     A,#0xd
   \   0001C1   F582         MOV     DPL,A
   \   0001C3   E4           CLR     A
   \   0001C4   35..         ADDC    A,?V1
   \   0001C6   F583         MOV     DPH,A
   \   0001C8   D0E0         POP     A
   \   0001CA   F0           MOVX    @DPTR,A
   2793                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   \   0001CB   8E82         MOV     DPL,R6
   \   0001CD   8F83         MOV     DPH,R7
   \   0001CF   E0           MOVX    A,@DPTR
   \   0001D0   C4           SWAP    A
   \   0001D1   540F         ANL     A,#0xf
   \   0001D3   C0E0         PUSH    A
   \   0001D5   E5..         MOV     A,?V0
   \   0001D7   240E         ADD     A,#0xe
   \   0001D9   F582         MOV     DPL,A
   \   0001DB   E4           CLR     A
   \   0001DC   35..         ADDC    A,?V1
   \   0001DE   F583         MOV     DPH,A
   \   0001E0   D0E0         POP     A
   \   0001E2   F0           MOVX    @DPTR,A
   \   0001E3   8E82         MOV     DPL,R6
   \   0001E5   8F83         MOV     DPH,R7
   \   0001E7   A3           INC     DPTR
   \   0001E8   AE82         MOV     R6,DPL
   \   0001EA   AF83         MOV     R7,DPH
   2794                pList->permitJoining = *msg++;
   \   0001EC   8E82         MOV     DPL,R6
   \   0001EE   8F83         MOV     DPH,R7
   \   0001F0   E0           MOVX    A,@DPTR
   \   0001F1   C0E0         PUSH    A
   \   0001F3   E5..         MOV     A,?V0
   \   0001F5   240F         ADD     A,#0xf
   \   0001F7   F582         MOV     DPL,A
   \   0001F9   E4           CLR     A
   \   0001FA   35..         ADDC    A,?V1
   \   0001FC   F583         MOV     DPH,A
   \   0001FE   D0E0         POP     A
   \   000200   F0           MOVX    @DPTR,A
   \   000201   8E82         MOV     DPL,R6
   \   000203   8F83         MOV     DPH,R7
   \   000205   A3           INC     DPTR
   \   000206   AE82         MOV     R6,DPL
   \   000208   AF83         MOV     R7,DPH
   2795                pList++;
   \   00020A   E5..         MOV     A,?V0
   \   00020C   2410         ADD     A,#0x10
   \   00020E   F5..         MOV     ?V0,A
   \   000210   5002         JNC     ??ZDO_ParseMgmNwkDiscRsp_4
   \   000212   05..         INC     ?V1
   2796              }
   \                     ??ZDO_ParseMgmNwkDiscRsp_4:
   \   000214   05..         INC     ?V7
   \   000216   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_2 & 0xFFFF
   2797            }
   2798          
   2799            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   000219   AA..         MOV     R2,?V2
   \   00021B   AB..         MOV     R3,?V3
   \   00021D   7403         MOV     A,#0x3
   \   00021F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000222   7F08         MOV     R7,#0x8
   \   000224   02....       LJMP    ?BANKED_LEAVE_XDATA
   2800          }
   2801          
   2802          /*********************************************************************
   2803           * @fn          ZDO_ParseMgmtRtgRsp
   2804           *
   2805           * @brief       This function parses the incoming Management
   2806           *              Routing response.
   2807           *
   2808           * @param       inMsg - incoming message
   2809           *
   2810           * @return      a pointer to parsed response structure (NULL if not allocated).
   2811           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2812           *          by the calling function [osal_mem_free()].
   2813           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2814          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   2815          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   2816            ZDO_MgmtRtgRsp_t *pRsp;
   2817            uint8 status;
   2818            uint8 rtgCount = 0;
   \   000015   75..00       MOV     ?V6,#0x0
   2819            uint8 startIndex = 0;
   \   000018   75..00       MOV     ?V3,#0x0
   2820            uint8 rtgListCount = 0;
   \   00001B   75..00       MOV     ?V2,#0x0
   2821            uint8 *msg;
   2822          
   2823            msg = inMsg->asdu;
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F8           MOV     R0,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   C8           XCH     A,R0
   \   000029   2413         ADD     A,#0x13
   \   00002B   F582         MOV     DPL,A
   \   00002D   C8           XCH     A,R0
   \   00002E   3400         ADDC    A,#0x0
   \   000030   F583         MOV     DPH,A
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F8           MOV     R0,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F9           MOV     R1,A
   \   000037   E8           MOV     A,R0
   \   000038   FE           MOV     R6,A
   \   000039   E9           MOV     A,R1
   \   00003A   FF           MOV     R7,A
   2824          
   2825            status = *msg++;
   \   00003B   8E82         MOV     DPL,R6
   \   00003D   8F83         MOV     DPH,R7
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F5..         MOV     ?V7,A
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   A3           INC     DPTR
   \   000047   AE82         MOV     R6,DPL
   \   000049   AF83         MOV     R7,DPH
   2826            if ( status == ZSuccess )
   \   00004B   E5..         MOV     A,?V7
   \   00004D   7030         JNZ     ??ZDO_ParseMgmtRtgRsp_0
   2827            {
   2828              rtgCount = *msg++;
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F5..         MOV     ?V6,A
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   A3           INC     DPTR
   \   00005B   AE82         MOV     R6,DPL
   \   00005D   AF83         MOV     R7,DPH
   2829              startIndex = *msg++;
   \   00005F   8E82         MOV     DPL,R6
   \   000061   8F83         MOV     DPH,R7
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F5..         MOV     ?V3,A
   \   000066   8E82         MOV     DPL,R6
   \   000068   8F83         MOV     DPH,R7
   \   00006A   A3           INC     DPTR
   \   00006B   AE82         MOV     R6,DPL
   \   00006D   AF83         MOV     R7,DPH
   2830              rtgListCount = *msg++;
   \   00006F   8E82         MOV     DPL,R6
   \   000071   8F83         MOV     DPH,R7
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F5..         MOV     ?V2,A
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   A3           INC     DPTR
   \   00007B   AE82         MOV     R6,DPL
   \   00007D   AF83         MOV     R7,DPH
   2831            }
   2832          
   2833            // Allocate a buffer big enough to handle the list
   2834            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   2835                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   00007F                ; Setup parameters for call to function osal_mem_alloc
   \   00007F   A8..         MOV     R0,?V2
   \   000081   7900         MOV     R1,#0x0
   \   000083   E8           MOV     A,R0
   \   000084   75F007       MOV     B,#0x7
   \   000087   A4           MUL     AB
   \   000088   C8           XCH     A,R0
   \   000089   AAF0         MOV     R2,B
   \   00008B   75F000       MOV     B,#0x0
   \   00008E   A4           MUL     AB
   \   00008F   2A           ADD     A,R2
   \   000090   FA           MOV     R2,A
   \   000091   75F007       MOV     B,#0x7
   \   000094   E9           MOV     A,R1
   \   000095   A4           MUL     AB
   \   000096   2A           ADD     A,R2
   \   000097   F9           MOV     R1,A
   \   000098   E8           MOV     A,R0
   \   000099   2404         ADD     A,#0x4
   \   00009B   FA           MOV     R2,A
   \   00009C   E4           CLR     A
   \   00009D   39           ADDC    A,R1
   \   00009E   FB           MOV     R3,A
   \   00009F   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0000A2   8A..         MOV     ?V4,R2
   \   0000A4   8B..         MOV     ?V5,R3
   \   0000A6   85....       MOV     ?V0,?V4
   \   0000A9   85....       MOV     ?V1,?V5
   2836            if ( pRsp )
   \   0000AC   E5..         MOV     A,?V0
   \   0000AE   45..         ORL     A,?V1
   \   0000B0   7003         JNZ     $+5
   \   0000B2   02....       LJMP    ??ZDO_ParseMgmtRtgRsp_1 & 0xFFFF
   2837            {
   2838              uint8 x;
   2839              rtgItem_t *pList = pRsp->list;
   \   0000B5   E5..         MOV     A,?V0
   \   0000B7   2404         ADD     A,#0x4
   \   0000B9   FA           MOV     R2,A
   \   0000BA   E4           CLR     A
   \   0000BB   35..         ADDC    A,?V1
   \   0000BD   FB           MOV     R3,A
   2840              pRsp->status = status;
   \   0000BE   E5..         MOV     A,?V7
   \   0000C0   C0E0         PUSH    A
   \   0000C2   85..82       MOV     DPL,?V0
   \   0000C5   85..83       MOV     DPH,?V1
   \   0000C8   D0E0         POP     A
   \   0000CA   F0           MOVX    @DPTR,A
   2841              pRsp->rtgCount = rtgCount;
   \   0000CB   E5..         MOV     A,?V6
   \   0000CD   C0E0         PUSH    A
   \   0000CF   85..82       MOV     DPL,?V0
   \   0000D2   85..83       MOV     DPH,?V1
   \   0000D5   A3           INC     DPTR
   \   0000D6   D0E0         POP     A
   \   0000D8   F0           MOVX    @DPTR,A
   2842              pRsp->startIndex = startIndex;
   \   0000D9   E5..         MOV     A,?V3
   \   0000DB   C0E0         PUSH    A
   \   0000DD   85..82       MOV     DPL,?V0
   \   0000E0   85..83       MOV     DPH,?V1
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   D0E0         POP     A
   \   0000E7   F0           MOVX    @DPTR,A
   2843              pRsp->rtgListCount = rtgListCount;
   \   0000E8   E5..         MOV     A,?V2
   \   0000EA   C0E0         PUSH    A
   \   0000EC   85..82       MOV     DPL,?V0
   \   0000EF   85..83       MOV     DPH,?V1
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   D0E0         POP     A
   \   0000F7   F0           MOVX    @DPTR,A
   2844          
   2845              for ( x = 0; x < rtgListCount; x++ )
   \   0000F8   7800         MOV     R0,#0x0
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   0000FA   E8           MOV     A,R0
   \   0000FB   C3           CLR     C
   \   0000FC   95..         SUBB    A,?V2
   \   0000FE   4003         JC      $+5
   \   000100   02....       LJMP    ??ZDO_ParseMgmtRtgRsp_1 & 0xFFFF
   2846              {
   2847                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \   000103   8E82         MOV     DPL,R6
   \   000105   8F83         MOV     DPH,R7
   \   000107   E0           MOVX    A,@DPTR
   \   000108   FC           MOV     R4,A
   \   000109   7D00         MOV     R5,#0x0
   \   00010B   8E82         MOV     DPL,R6
   \   00010D   8F83         MOV     DPH,R7
   \   00010F   A3           INC     DPTR
   \   000110   E0           MOVX    A,@DPTR
   \   000111   F5..         MOV     ?V4,A
   \   000113   75..00       MOV     ?V5,#0x0
   \   000116   E4           CLR     A
   \   000117   C5..         XCH     A,?V4
   \   000119   F5..         MOV     ?V5,A
   \   00011B   EC           MOV     A,R4
   \   00011C   25..         ADD     A,?V4
   \   00011E   FC           MOV     R4,A
   \   00011F   ED           MOV     A,R5
   \   000120   35..         ADDC    A,?V5
   \   000122   FD           MOV     R5,A
   \   000123   8A82         MOV     DPL,R2
   \   000125   8B83         MOV     DPH,R3
   \   000127   EC           MOV     A,R4
   \   000128   F0           MOVX    @DPTR,A
   \   000129   A3           INC     DPTR
   \   00012A   ED           MOV     A,R5
   \   00012B   F0           MOVX    @DPTR,A
   2848                msg += 2;
   \   00012C   EE           MOV     A,R6
   \   00012D   2402         ADD     A,#0x2
   \   00012F   FE           MOV     R6,A
   \   000130   5001         JNC     ??ZDO_ParseMgmtRtgRsp_3
   \   000132   0F           INC     R7
   2849                pList->status = *msg++;
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   000133   8E82         MOV     DPL,R6
   \   000135   8F83         MOV     DPH,R7
   \   000137   E0           MOVX    A,@DPTR
   \   000138   C0E0         PUSH    A
   \   00013A   8A82         MOV     DPL,R2
   \   00013C   8B83         MOV     DPH,R3
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   D0E0         POP     A
   \   000145   F0           MOVX    @DPTR,A
   \   000146   8E82         MOV     DPL,R6
   \   000148   8F83         MOV     DPH,R7
   \   00014A   A3           INC     DPTR
   \   00014B   AE82         MOV     R6,DPL
   \   00014D   AF83         MOV     R7,DPH
   2850                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \   00014F   8E82         MOV     DPL,R6
   \   000151   8F83         MOV     DPH,R7
   \   000153   E0           MOVX    A,@DPTR
   \   000154   FC           MOV     R4,A
   \   000155   7D00         MOV     R5,#0x0
   \   000157   8E82         MOV     DPL,R6
   \   000159   8F83         MOV     DPH,R7
   \   00015B   A3           INC     DPTR
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   F5..         MOV     ?V4,A
   \   00015F   75..00       MOV     ?V5,#0x0
   \   000162   E4           CLR     A
   \   000163   C5..         XCH     A,?V4
   \   000165   F5..         MOV     ?V5,A
   \   000167   EC           MOV     A,R4
   \   000168   25..         ADD     A,?V4
   \   00016A   FC           MOV     R4,A
   \   00016B   ED           MOV     A,R5
   \   00016C   35..         ADDC    A,?V5
   \   00016E   FD           MOV     R5,A
   \   00016F   8A82         MOV     DPL,R2
   \   000171   8B83         MOV     DPH,R3
   \   000173   A3           INC     DPTR
   \   000174   A3           INC     DPTR
   \   000175   EC           MOV     A,R4
   \   000176   F0           MOVX    @DPTR,A
   \   000177   A3           INC     DPTR
   \   000178   ED           MOV     A,R5
   \   000179   F0           MOVX    @DPTR,A
   2851                msg += 2;
   \   00017A   EE           MOV     A,R6
   \   00017B   2402         ADD     A,#0x2
   \   00017D   FE           MOV     R6,A
   \   00017E   5001         JNC     ??ZDO_ParseMgmtRtgRsp_4
   \   000180   0F           INC     R7
   2852                pList++;
   \                     ??ZDO_ParseMgmtRtgRsp_4:
   \   000181   EA           MOV     A,R2
   \   000182   2407         ADD     A,#0x7
   \   000184   FA           MOV     R2,A
   \   000185   5001         JNC     ??ZDO_ParseMgmtRtgRsp_5
   \   000187   0B           INC     R3
   2853              }
   \                     ??ZDO_ParseMgmtRtgRsp_5:
   \   000188   08           INC     R0
   \   000189   02....       LJMP    ??ZDO_ParseMgmtRtgRsp_2 & 0xFFFF
   2854            }
   2855          
   2856            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   00018C   AA..         MOV     R2,?V0
   \   00018E   AB..         MOV     R3,?V1
   \   000190   7402         MOV     A,#0x2
   \   000192   12....       LCALL   ?DEALLOC_XSTACK8
   \   000195   7F08         MOV     R7,#0x8
   \   000197   02....       LJMP    ?BANKED_LEAVE_XDATA
   2857          }
   2858          
   2859          /*********************************************************************
   2860           * @fn          ZDO_ParseMgmtBindRsp
   2861           *
   2862           * @brief       This function parses the incoming Management
   2863           *              Binding response.
   2864           *
   2865           * @param       inMsg - pointer to message to parse
   2866           *
   2867           * @return      a pointer to parsed response structure (NULL if not allocated).
   2868           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2869           *          by the calling function [osal_mem_free()].
   2870           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2871          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   2872          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   2873            ZDO_MgmtBindRsp_t *pRsp;
   2874            uint8 status;
   2875            uint8 bindingCount = 0;
   \   000014   75..00       MOV     ?V6,#0x0
   2876            uint8 startIndex = 0;
   \   000017   75..00       MOV     ?V5,#0x0
   2877            uint8 bindingListCount = 0;
   \   00001A   75..00       MOV     ?V4,#0x0
   2878            uint8 *msg;
   2879          
   2880            msg = inMsg->asdu;
   \   00001D   7401         MOV     A,#0x1
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F8           MOV     R0,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   C8           XCH     A,R0
   \   000027   2413         ADD     A,#0x13
   \   000029   F582         MOV     DPL,A
   \   00002B   C8           XCH     A,R0
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   F583         MOV     DPH,A
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \   000035   E8           MOV     A,R0
   \   000036   FE           MOV     R6,A
   \   000037   E9           MOV     A,R1
   \   000038   FF           MOV     R7,A
   2881          
   2882            status = *msg++;
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   C0E0         PUSH    A
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   D0E0         POP     A
   \   000048   F0           MOVX    @DPTR,A
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   A3           INC     DPTR
   \   00004E   AE82         MOV     R6,DPL
   \   000050   AF83         MOV     R7,DPH
   2883            if ( status == ZSuccess )
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   E0           MOVX    A,@DPTR
   \   000059   7030         JNZ     ??ZDO_ParseMgmtBindRsp_0
   2884            {
   2885              bindingCount = *msg++;
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F5..         MOV     ?V6,A
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   A3           INC     DPTR
   \   000067   AE82         MOV     R6,DPL
   \   000069   AF83         MOV     R7,DPH
   2886              startIndex = *msg++;
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F5..         MOV     ?V5,A
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   A3           INC     DPTR
   \   000077   AE82         MOV     R6,DPL
   \   000079   AF83         MOV     R7,DPH
   2887              bindingListCount = *msg++;
   \   00007B   8E82         MOV     DPL,R6
   \   00007D   8F83         MOV     DPH,R7
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F5..         MOV     ?V4,A
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   A3           INC     DPTR
   \   000087   AE82         MOV     R6,DPL
   \   000089   AF83         MOV     R7,DPH
   2888            }
   2889          
   2890            // Allocate a buffer big enough to handle the list
   2891            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   2892                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   00008B                ; Setup parameters for call to function osal_mem_alloc
   \   00008B   A8..         MOV     R0,?V4
   \   00008D   7900         MOV     R1,#0x0
   \   00008F   E8           MOV     A,R0
   \   000090   75F015       MOV     B,#0x15
   \   000093   A4           MUL     AB
   \   000094   C8           XCH     A,R0
   \   000095   AAF0         MOV     R2,B
   \   000097   75F000       MOV     B,#0x0
   \   00009A   A4           MUL     AB
   \   00009B   2A           ADD     A,R2
   \   00009C   FA           MOV     R2,A
   \   00009D   75F015       MOV     B,#0x15
   \   0000A0   E9           MOV     A,R1
   \   0000A1   A4           MUL     AB
   \   0000A2   2A           ADD     A,R2
   \   0000A3   F9           MOV     R1,A
   \   0000A4   E8           MOV     A,R0
   \   0000A5   2404         ADD     A,#0x4
   \   0000A7   FA           MOV     R2,A
   \   0000A8   E4           CLR     A
   \   0000A9   39           ADDC    A,R1
   \   0000AA   FB           MOV     R3,A
   \   0000AB   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0000AE   8A..         MOV     ?V0,R2
   \   0000B0   8B..         MOV     ?V1,R3
   \   0000B2   85....       MOV     ?V2,?V0
   \   0000B5   85....       MOV     ?V3,?V1
   2893            if ( pRsp )
   \   0000B8   E5..         MOV     A,?V2
   \   0000BA   45..         ORL     A,?V3
   \   0000BC   7003         JNZ     $+5
   \   0000BE   02....       LJMP    ??ZDO_ParseMgmtBindRsp_1 & 0xFFFF
   2894            {
   2895              uint8 x;
   2896              apsBindingItem_t *pList = pRsp->list;
   \   0000C1   E5..         MOV     A,?V2
   \   0000C3   2404         ADD     A,#0x4
   \   0000C5   F5..         MOV     ?V0,A
   \   0000C7   E4           CLR     A
   \   0000C8   35..         ADDC    A,?V3
   \   0000CA   F5..         MOV     ?V1,A
   2897              pRsp->status = status;
   \   0000CC   85..82       MOV     DPL,?XSP + 0
   \   0000CF   85..83       MOV     DPH,?XSP + 1
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   C0E0         PUSH    A
   \   0000D5   85..82       MOV     DPL,?V2
   \   0000D8   85..83       MOV     DPH,?V3
   \   0000DB   D0E0         POP     A
   \   0000DD   F0           MOVX    @DPTR,A
   2898              pRsp->bindingCount = bindingCount;
   \   0000DE   E5..         MOV     A,?V6
   \   0000E0   C0E0         PUSH    A
   \   0000E2   85..82       MOV     DPL,?V2
   \   0000E5   85..83       MOV     DPH,?V3
   \   0000E8   A3           INC     DPTR
   \   0000E9   D0E0         POP     A
   \   0000EB   F0           MOVX    @DPTR,A
   2899              pRsp->startIndex = startIndex;
   \   0000EC   E5..         MOV     A,?V5
   \   0000EE   C0E0         PUSH    A
   \   0000F0   85..82       MOV     DPL,?V2
   \   0000F3   85..83       MOV     DPH,?V3
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   D0E0         POP     A
   \   0000FA   F0           MOVX    @DPTR,A
   2900              pRsp->bindingListCount = bindingListCount;
   \   0000FB   E5..         MOV     A,?V4
   \   0000FD   C0E0         PUSH    A
   \   0000FF   85..82       MOV     DPL,?V2
   \   000102   85..83       MOV     DPH,?V3
   \   000105   A3           INC     DPTR
   \   000106   A3           INC     DPTR
   \   000107   A3           INC     DPTR
   \   000108   D0E0         POP     A
   \   00010A   F0           MOVX    @DPTR,A
   2901          
   2902              for ( x = 0; x < bindingListCount; x++ )
   \   00010B   75..00       MOV     ?V7,#0x0
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   00010E   E5..         MOV     A,?V7
   \   000110   C3           CLR     C
   \   000111   95..         SUBB    A,?V4
   \   000113   4003         JC      $+5
   \   000115   02....       LJMP    ??ZDO_ParseMgmtBindRsp_1 & 0xFFFF
   2903              {
   2904                osal_cpyExtAddr( pList->srcAddr, msg );
   \   000118                ; Setup parameters for call to function sAddrExtCpy
   \   000118   EE           MOV     A,R6
   \   000119   FC           MOV     R4,A
   \   00011A   EF           MOV     A,R7
   \   00011B   FD           MOV     R5,A
   \   00011C   AA..         MOV     R2,?V0
   \   00011E   AB..         MOV     R3,?V1
   \   000120   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   2905                msg += Z_EXTADDR_LEN;
   \   000123   EE           MOV     A,R6
   \   000124   2408         ADD     A,#0x8
   \   000126   FE           MOV     R6,A
   \   000127   5001         JNC     ??ZDO_ParseMgmtBindRsp_3
   \   000129   0F           INC     R7
   2906                pList->srcEP = *msg++;
   \                     ??ZDO_ParseMgmtBindRsp_3:
   \   00012A   8E82         MOV     DPL,R6
   \   00012C   8F83         MOV     DPH,R7
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   C0E0         PUSH    A
   \   000131   85..82       MOV     DPL,?V0
   \   000134   85..83       MOV     DPH,?V1
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   A3           INC     DPTR
   \   00013C   A3           INC     DPTR
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   D0E0         POP     A
   \   000141   F0           MOVX    @DPTR,A
   \   000142   8E82         MOV     DPL,R6
   \   000144   8F83         MOV     DPH,R7
   \   000146   A3           INC     DPTR
   \   000147   AE82         MOV     R6,DPL
   \   000149   AF83         MOV     R7,DPH
   2907          
   2908                // Get the Cluster ID
   2909          
   2910                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \   00014B   8E82         MOV     DPL,R6
   \   00014D   8F83         MOV     DPH,R7
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   F8           MOV     R0,A
   \   000151   7900         MOV     R1,#0x0
   \   000153   8E82         MOV     DPL,R6
   \   000155   8F83         MOV     DPH,R7
   \   000157   A3           INC     DPTR
   \   000158   E0           MOVX    A,@DPTR
   \   000159   FA           MOV     R2,A
   \   00015A   7B00         MOV     R3,#0x0
   \   00015C   E4           CLR     A
   \   00015D   CA           XCH     A,R2
   \   00015E   FB           MOV     R3,A
   \   00015F   E8           MOV     A,R0
   \   000160   2A           ADD     A,R2
   \   000161   F8           MOV     R0,A
   \   000162   E9           MOV     A,R1
   \   000163   3B           ADDC    A,R3
   \   000164   F9           MOV     R1,A
   \   000165   85..82       MOV     DPL,?V0
   \   000168   85..83       MOV     DPH,?V1
   \   00016B   A3           INC     DPTR
   \   00016C   A3           INC     DPTR
   \   00016D   A3           INC     DPTR
   \   00016E   A3           INC     DPTR
   \   00016F   A3           INC     DPTR
   \   000170   A3           INC     DPTR
   \   000171   A3           INC     DPTR
   \   000172   A3           INC     DPTR
   \   000173   A3           INC     DPTR
   \   000174   E8           MOV     A,R0
   \   000175   F0           MOVX    @DPTR,A
   \   000176   A3           INC     DPTR
   \   000177   E9           MOV     A,R1
   \   000178   F0           MOVX    @DPTR,A
   2911                msg += 2;
   \   000179   EE           MOV     A,R6
   \   00017A   2402         ADD     A,#0x2
   \   00017C   FE           MOV     R6,A
   \   00017D   5001         JNC     ??ZDO_ParseMgmtBindRsp_4
   \   00017F   0F           INC     R7
   2912                pList->dstAddr.addrMode = *msg++;
   \                     ??ZDO_ParseMgmtBindRsp_4:
   \   000180   8E82         MOV     DPL,R6
   \   000182   8F83         MOV     DPH,R7
   \   000184   E0           MOVX    A,@DPTR
   \   000185   C0E0         PUSH    A
   \   000187   E5..         MOV     A,?V0
   \   000189   2413         ADD     A,#0x13
   \   00018B   F582         MOV     DPL,A
   \   00018D   E4           CLR     A
   \   00018E   35..         ADDC    A,?V1
   \   000190   F583         MOV     DPH,A
   \   000192   D0E0         POP     A
   \   000194   F0           MOVX    @DPTR,A
   \   000195   8E82         MOV     DPL,R6
   \   000197   8F83         MOV     DPH,R7
   \   000199   A3           INC     DPTR
   \   00019A   AE82         MOV     R6,DPL
   \   00019C   AF83         MOV     R7,DPH
   2913                if ( pList->dstAddr.addrMode == Addr64Bit )
   \   00019E   E5..         MOV     A,?V0
   \   0001A0   2413         ADD     A,#0x13
   \   0001A2   F582         MOV     DPL,A
   \   0001A4   E4           CLR     A
   \   0001A5   35..         ADDC    A,?V1
   \   0001A7   F583         MOV     DPH,A
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   6403         XRL     A,#0x3
   \   0001AC   7037         JNZ     ??ZDO_ParseMgmtBindRsp_5
   2914                {
   2915                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   \   0001AE                ; Setup parameters for call to function sAddrExtCpy
   \   0001AE   EE           MOV     A,R6
   \   0001AF   FC           MOV     R4,A
   \   0001B0   EF           MOV     A,R7
   \   0001B1   FD           MOV     R5,A
   \   0001B2   E5..         MOV     A,?V0
   \   0001B4   240B         ADD     A,#0xb
   \   0001B6   FA           MOV     R2,A
   \   0001B7   E4           CLR     A
   \   0001B8   35..         ADDC    A,?V1
   \   0001BA   FB           MOV     R3,A
   \   0001BB   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   2916                  msg += Z_EXTADDR_LEN;
   \   0001BE   EE           MOV     A,R6
   \   0001BF   2408         ADD     A,#0x8
   \   0001C1   FE           MOV     R6,A
   \   0001C2   5001         JNC     ??ZDO_ParseMgmtBindRsp_6
   \   0001C4   0F           INC     R7
   2917                  pList->dstEP = *msg++;
   \                     ??ZDO_ParseMgmtBindRsp_6:
   \   0001C5   8E82         MOV     DPL,R6
   \   0001C7   8F83         MOV     DPH,R7
   \   0001C9   E0           MOVX    A,@DPTR
   \   0001CA   C0E0         PUSH    A
   \   0001CC   E5..         MOV     A,?V0
   \   0001CE   2414         ADD     A,#0x14
   \   0001D0   F582         MOV     DPL,A
   \   0001D2   E4           CLR     A
   \   0001D3   35..         ADDC    A,?V1
   \   0001D5   F583         MOV     DPH,A
   \   0001D7   D0E0         POP     A
   \   0001D9   F0           MOVX    @DPTR,A
   \   0001DA   8E82         MOV     DPL,R6
   \   0001DC   8F83         MOV     DPH,R7
   \   0001DE   A3           INC     DPTR
   \   0001DF   AE82         MOV     R6,DPL
   \   0001E1   AF83         MOV     R7,DPH
   \   0001E3   8031         SJMP    ??ZDO_ParseMgmtBindRsp_7
   2918                }
   2919                else
   2920                {
   2921                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_5:
   \   0001E5   8E82         MOV     DPL,R6
   \   0001E7   8F83         MOV     DPH,R7
   \   0001E9   E0           MOVX    A,@DPTR
   \   0001EA   F8           MOV     R0,A
   \   0001EB   7900         MOV     R1,#0x0
   \   0001ED   8E82         MOV     DPL,R6
   \   0001EF   8F83         MOV     DPH,R7
   \   0001F1   A3           INC     DPTR
   \   0001F2   E0           MOVX    A,@DPTR
   \   0001F3   FA           MOV     R2,A
   \   0001F4   7B00         MOV     R3,#0x0
   \   0001F6   E4           CLR     A
   \   0001F7   CA           XCH     A,R2
   \   0001F8   FB           MOV     R3,A
   \   0001F9   E8           MOV     A,R0
   \   0001FA   2A           ADD     A,R2
   \   0001FB   F8           MOV     R0,A
   \   0001FC   E9           MOV     A,R1
   \   0001FD   3B           ADDC    A,R3
   \   0001FE   F9           MOV     R1,A
   \   0001FF   E5..         MOV     A,?V0
   \   000201   240B         ADD     A,#0xb
   \   000203   F582         MOV     DPL,A
   \   000205   E4           CLR     A
   \   000206   35..         ADDC    A,?V1
   \   000208   F583         MOV     DPH,A
   \   00020A   E8           MOV     A,R0
   \   00020B   F0           MOVX    @DPTR,A
   \   00020C   A3           INC     DPTR
   \   00020D   E9           MOV     A,R1
   \   00020E   F0           MOVX    @DPTR,A
   2922                  msg += 2;
   \   00020F   EE           MOV     A,R6
   \   000210   2402         ADD     A,#0x2
   \   000212   FE           MOV     R6,A
   \   000213   5001         JNC     ??ZDO_ParseMgmtBindRsp_7
   \   000215   0F           INC     R7
   2923                }
   2924          
   2925                pList++;
   \                     ??ZDO_ParseMgmtBindRsp_7:
   \   000216   E5..         MOV     A,?V0
   \   000218   2415         ADD     A,#0x15
   \   00021A   F5..         MOV     ?V0,A
   \   00021C   5002         JNC     ??ZDO_ParseMgmtBindRsp_8
   \   00021E   05..         INC     ?V1
   2926              }
   \                     ??ZDO_ParseMgmtBindRsp_8:
   \   000220   05..         INC     ?V7
   \   000222   02....       LJMP    ??ZDO_ParseMgmtBindRsp_2 & 0xFFFF
   2927            }
   2928          
   2929            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   000225   AA..         MOV     R2,?V2
   \   000227   AB..         MOV     R3,?V3
   \   000229   7403         MOV     A,#0x3
   \   00022B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00022E   7F08         MOV     R7,#0x8
   \   000230   02....       LJMP    ?BANKED_LEAVE_XDATA
   2930          }
   2931          
   2932          /*********************************************************************
   2933           * @fn          ZDO_ParseUserDescRsp
   2934           *
   2935           * @brief       This function parses the incoming User
   2936           *              Descriptor Response.
   2937           *
   2938           * @param       inMsg - incoming response message
   2939           *
   2940           * @return      a pointer to parsed response structure (NULL if not allocated).
   2941           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2942           *          by the calling function [osal_mem_free()].
   2943           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2944          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   2945          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   2946            ZDO_UserDescRsp_t *pRsp;
   2947            uint8 *msg;
   2948            uint8 descLen = 0;
   \   000015   7E00         MOV     R6,#0x0
   2949          
   2950            msg = inMsg->asdu;
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F8           MOV     R0,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   C8           XCH     A,R0
   \   000022   2413         ADD     A,#0x13
   \   000024   F582         MOV     DPL,A
   \   000026   C8           XCH     A,R0
   \   000027   3400         ADDC    A,#0x0
   \   000029   F583         MOV     DPH,A
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   88..         MOV     ?V4,R0
   \   000032   89..         MOV     ?V5,R1
   2951          
   2952            if ( msg[0] == ZSuccess )
   \   000034   85..82       MOV     DPL,?V4
   \   000037   85..83       MOV     DPH,?V5
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   700B         JNZ     ??ZDO_ParseUserDescRsp_0
   2953              descLen = msg[3];
   \   00003D   85..82       MOV     DPL,?V4
   \   000040   85..83       MOV     DPH,?V5
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   FE           MOV     R6,A
   2954          
   2955            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   000048                ; Setup parameters for call to function osal_mem_alloc
   \   000048   EE           MOV     A,R6
   \   000049   F8           MOV     R0,A
   \   00004A   7900         MOV     R1,#0x0
   \   00004C   E8           MOV     A,R0
   \   00004D   2404         ADD     A,#0x4
   \   00004F   FA           MOV     R2,A
   \   000050   E4           CLR     A
   \   000051   39           ADDC    A,R1
   \   000052   FB           MOV     R3,A
   \   000053   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000056   8A..         MOV     ?V0,R2
   \   000058   8B..         MOV     ?V1,R3
   \   00005A   85....       MOV     ?V6,?V0
   \   00005D   85....       MOV     ?V7,?V1
   2956            if ( pRsp )
   \   000060   E5..         MOV     A,?V6
   \   000062   45..         ORL     A,?V7
   \   000064   6078         JZ      ??ZDO_ParseUserDescRsp_1
   2957            {
   2958              pRsp->status = msg[0];
   \   000066   85..82       MOV     DPL,?V4
   \   000069   85..83       MOV     DPH,?V5
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   C0E0         PUSH    A
   \   00006F   85..82       MOV     DPL,?V6
   \   000072   85..83       MOV     DPH,?V7
   \   000075   D0E0         POP     A
   \   000077   F0           MOVX    @DPTR,A
   2959              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \   000078   85..82       MOV     DPL,?V4
   \   00007B   85..83       MOV     DPH,?V5
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   FA           MOV     R2,A
   \   000081   7B00         MOV     R3,#0x0
   \   000083   85..82       MOV     DPL,?V4
   \   000086   85..83       MOV     DPH,?V5
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F8           MOV     R0,A
   \   00008D   7900         MOV     R1,#0x0
   \   00008F   E4           CLR     A
   \   000090   C8           XCH     A,R0
   \   000091   F9           MOV     R1,A
   \   000092   EA           MOV     A,R2
   \   000093   28           ADD     A,R0
   \   000094   F8           MOV     R0,A
   \   000095   EB           MOV     A,R3
   \   000096   39           ADDC    A,R1
   \   000097   F9           MOV     R1,A
   \   000098   85..82       MOV     DPL,?V6
   \   00009B   85..83       MOV     DPH,?V7
   \   00009E   A3           INC     DPTR
   \   00009F   E8           MOV     A,R0
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   A3           INC     DPTR
   \   0000A2   E9           MOV     A,R1
   \   0000A3   F0           MOVX    @DPTR,A
   2960              pRsp->length = descLen;
   \   0000A4   EE           MOV     A,R6
   \   0000A5   C0E0         PUSH    A
   \   0000A7   85..82       MOV     DPL,?V6
   \   0000AA   85..83       MOV     DPH,?V7
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   D0E0         POP     A
   \   0000B2   F0           MOVX    @DPTR,A
   2961              if ( descLen )
   \   0000B3   EE           MOV     A,R6
   \   0000B4   6028         JZ      ??ZDO_ParseUserDescRsp_1
   2962                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   0000B6                ; Setup parameters for call to function osal_memcpy
   \   0000B6   E5..         MOV     A,?V4
   \   0000B8   2404         ADD     A,#0x4
   \   0000BA   F5..         MOV     ?V0,A
   \   0000BC   E4           CLR     A
   \   0000BD   35..         ADDC    A,?V5
   \   0000BF   F5..         MOV     ?V1,A
   \   0000C1   75..00       MOV     ?V2,#0x0
   \   0000C4   78..         MOV     R0,#?V0
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C9   EE           MOV     A,R6
   \   0000CA   FC           MOV     R4,A
   \   0000CB   7D00         MOV     R5,#0x0
   \   0000CD   E5..         MOV     A,?V6
   \   0000CF   2404         ADD     A,#0x4
   \   0000D1   FA           MOV     R2,A
   \   0000D2   E4           CLR     A
   \   0000D3   35..         ADDC    A,?V7
   \   0000D5   FB           MOV     R3,A
   \   0000D6   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000D9   7403         MOV     A,#0x3
   \   0000DB   12....       LCALL   ?DEALLOC_XSTACK8
   2963            }
   2964          
   2965            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_1:
   \   0000DE   AA..         MOV     R2,?V6
   \   0000E0   AB..         MOV     R3,?V7
   \   0000E2   7402         MOV     A,#0x2
   \   0000E4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E7   7F08         MOV     R7,#0x8
   \   0000E9   02....       LJMP    ?BANKED_LEAVE_XDATA
   2966          }
   2967          
   2968          /*********************************************************************
   2969           * @fn          ZDO_ParseSimpleDescBuf
   2970           *
   2971           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   2972           *
   2973           * @param       buf  - pointer to a byte array representing a Simple Desc.
   2974           * @param       desc - SimpleDescriptionFormat_t *
   2975           *
   2976           *              This routine allocates storage for the cluster IDs because
   2977           *              they are 16-bit and need to be aligned to be properly processed.
   2978           *              This routine returns non-zero if an allocation fails.
   2979           *
   2980           *              NOTE: This means that the caller or user of the input structure
   2981           *                    is responsible for freeing the memory
   2982           *
   2983           * @return      0: success
   2984           *              1: failure due to malloc failure.
   2985           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2986          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   2987          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   2988            uint8 num, i;
   2989          
   2990            desc->EndPoint = *buf++;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   E0           MOVX    A,@DPTR
   \   000012   C0E0         PUSH    A
   \   000014   85..82       MOV     DPL,?V0
   \   000017   85..83       MOV     DPH,?V1
   \   00001A   D0E0         POP     A
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
   \   000021   A3           INC     DPTR
   \   000022   AE82         MOV     R6,DPL
   \   000024   AF83         MOV     R7,DPH
   2991            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   7900         MOV     R1,#0x0
   \   000037   E4           CLR     A
   \   000038   C8           XCH     A,R0
   \   000039   F9           MOV     R1,A
   \   00003A   EA           MOV     A,R2
   \   00003B   28           ADD     A,R0
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   39           ADDC    A,R1
   \   00003F   F9           MOV     R1,A
   \   000040   85..82       MOV     DPL,?V0
   \   000043   85..83       MOV     DPH,?V1
   \   000046   A3           INC     DPTR
   \   000047   E8           MOV     A,R0
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   E9           MOV     A,R1
   \   00004B   F0           MOVX    @DPTR,A
   2992            buf += 2;
   \   00004C   EE           MOV     A,R6
   \   00004D   2402         ADD     A,#0x2
   \   00004F   FE           MOV     R6,A
   \   000050   5001         JNC     ??ZDO_ParseSimpleDescBuf_0
   \   000052   0F           INC     R7
   2993            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   E0           MOVX    A,@DPTR
   \   000058   FA           MOV     R2,A
   \   000059   7B00         MOV     R3,#0x0
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F8           MOV     R0,A
   \   000062   7900         MOV     R1,#0x0
   \   000064   E4           CLR     A
   \   000065   C8           XCH     A,R0
   \   000066   F9           MOV     R1,A
   \   000067   EA           MOV     A,R2
   \   000068   28           ADD     A,R0
   \   000069   F8           MOV     R0,A
   \   00006A   EB           MOV     A,R3
   \   00006B   39           ADDC    A,R1
   \   00006C   F9           MOV     R1,A
   \   00006D   85..82       MOV     DPL,?V0
   \   000070   85..83       MOV     DPH,?V1
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   E8           MOV     A,R0
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   \   000079   E9           MOV     A,R1
   \   00007A   F0           MOVX    @DPTR,A
   2994            buf += 2;
   \   00007B   EE           MOV     A,R6
   \   00007C   2402         ADD     A,#0x2
   \   00007E   FE           MOV     R6,A
   \   00007F   5001         JNC     ??ZDO_ParseSimpleDescBuf_1
   \   000081   0F           INC     R7
   2995            desc->AppDevVer = *buf >> 4;
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   E0           MOVX    A,@DPTR
   \   000087   C4           SWAP    A
   \   000088   540F         ANL     A,#0xf
   \   00008A   F8           MOV     R0,A
   \   00008B   740F         MOV     A,#0xf
   \   00008D   58           ANL     A,R0
   \   00008E   F8           MOV     R0,A
   \   00008F   85..82       MOV     DPL,?V0
   \   000092   85..83       MOV     DPH,?V1
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   54F0         ANL     A,#0xf0
   \   00009D   48           ORL     A,R0
   \   00009E   C0E0         PUSH    A
   \   0000A0   85..82       MOV     DPL,?V0
   \   0000A3   85..83       MOV     DPH,?V1
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   D0E0         POP     A
   \   0000AD   F0           MOVX    @DPTR,A
   2996          
   2997            desc->Reserved = 0;
   \   0000AE   85..82       MOV     DPL,?V0
   \   0000B1   85..83       MOV     DPH,?V1
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   540F         ANL     A,#0xf
   \   0000BC   F0           MOVX    @DPTR,A
   2998            buf++;
   \   0000BD   8E82         MOV     DPL,R6
   \   0000BF   8F83         MOV     DPH,R7
   \   0000C1   A3           INC     DPTR
   \   0000C2   AE82         MOV     R6,DPL
   \   0000C4   AF83         MOV     R7,DPH
   2999          
   3000            // move in input cluster list (if any). allocate aligned memory.
   3001            num = desc->AppNumInClusters = *buf++;
   \   0000C6   8E82         MOV     DPL,R6
   \   0000C8   8F83         MOV     DPH,R7
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   F8           MOV     R0,A
   \   0000CC   8E82         MOV     DPL,R6
   \   0000CE   8F83         MOV     DPH,R7
   \   0000D0   A3           INC     DPTR
   \   0000D1   AE82         MOV     R6,DPL
   \   0000D3   AF83         MOV     R7,DPH
   \   0000D5   E8           MOV     A,R0
   \   0000D6   C0E0         PUSH    A
   \   0000D8   85..82       MOV     DPL,?V0
   \   0000DB   85..83       MOV     DPH,?V1
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   D0E0         POP     A
   \   0000E6   F0           MOVX    @DPTR,A
   \   0000E7   88..         MOV     ?V3,R0
   3002            if ( num )
   \   0000E9   E5..         MOV     A,?V3
   \   0000EB   7003         JNZ     $+5
   \   0000ED   02....       LJMP    ??ZDO_ParseSimpleDescBuf_2 & 0xFFFF
   3003            {
   3004              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0000F0                ; Setup parameters for call to function osal_mem_alloc
   \   0000F0   AA..         MOV     R2,?V3
   \   0000F2   7B00         MOV     R3,#0x0
   \   0000F4   EA           MOV     A,R2
   \   0000F5   75F002       MOV     B,#0x2
   \   0000F8   A4           MUL     AB
   \   0000F9   CA           XCH     A,R2
   \   0000FA   A8F0         MOV     R0,B
   \   0000FC   75F000       MOV     B,#0x0
   \   0000FF   A4           MUL     AB
   \   000100   28           ADD     A,R0
   \   000101   F8           MOV     R0,A
   \   000102   75F002       MOV     B,#0x2
   \   000105   EB           MOV     A,R3
   \   000106   A4           MUL     AB
   \   000107   28           ADD     A,R0
   \   000108   FB           MOV     R3,A
   \   000109   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00010C   8A..         MOV     ?V4,R2
   \   00010E   8B..         MOV     ?V5,R3
   \   000110   A8..         MOV     R0,?V4
   \   000112   A9..         MOV     R1,?V5
   \   000114   85..82       MOV     DPL,?V0
   \   000117   85..83       MOV     DPH,?V1
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   A3           INC     DPTR
   \   00011F   A3           INC     DPTR
   \   000120   A3           INC     DPTR
   \   000121   E8           MOV     A,R0
   \   000122   F0           MOVX    @DPTR,A
   \   000123   A3           INC     DPTR
   \   000124   E9           MOV     A,R1
   \   000125   F0           MOVX    @DPTR,A
   \   000126   E8           MOV     A,R0
   \   000127   49           ORL     A,R1
   \   000128   7005         JNZ     ??ZDO_ParseSimpleDescBuf_3
   3005              {
   3006                // malloc failed. we're done.
   3007                return 1;
   \   00012A   7901         MOV     R1,#0x1
   \   00012C   02....       LJMP    ??ZDO_ParseSimpleDescBuf_4 & 0xFFFF
   3008              }
   3009              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   00012F   75..00       MOV     ?V2,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   000132   E5..         MOV     A,?V2
   \   000134   C3           CLR     C
   \   000135   95..         SUBB    A,?V3
   \   000137   505A         JNC     ??ZDO_ParseSimpleDescBuf_2
   3010              {
   3011                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \   000139   8E82         MOV     DPL,R6
   \   00013B   8F83         MOV     DPH,R7
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   FA           MOV     R2,A
   \   00013F   7B00         MOV     R3,#0x0
   \   000141   8E82         MOV     DPL,R6
   \   000143   8F83         MOV     DPH,R7
   \   000145   A3           INC     DPTR
   \   000146   E0           MOVX    A,@DPTR
   \   000147   F8           MOV     R0,A
   \   000148   7900         MOV     R1,#0x0
   \   00014A   E4           CLR     A
   \   00014B   C8           XCH     A,R0
   \   00014C   F9           MOV     R1,A
   \   00014D   EA           MOV     A,R2
   \   00014E   28           ADD     A,R0
   \   00014F   FA           MOV     R2,A
   \   000150   EB           MOV     A,R3
   \   000151   39           ADDC    A,R1
   \   000152   FB           MOV     R3,A
   \   000153   A8..         MOV     R0,?V2
   \   000155   7900         MOV     R1,#0x0
   \   000157   E8           MOV     A,R0
   \   000158   75F002       MOV     B,#0x2
   \   00015B   A4           MUL     AB
   \   00015C   C8           XCH     A,R0
   \   00015D   ACF0         MOV     R4,B
   \   00015F   75F000       MOV     B,#0x0
   \   000162   A4           MUL     AB
   \   000163   2C           ADD     A,R4
   \   000164   FC           MOV     R4,A
   \   000165   75F002       MOV     B,#0x2
   \   000168   E9           MOV     A,R1
   \   000169   A4           MUL     AB
   \   00016A   2C           ADD     A,R4
   \   00016B   F9           MOV     R1,A
   \   00016C   85..82       MOV     DPL,?V0
   \   00016F   85..83       MOV     DPH,?V1
   \   000172   A3           INC     DPTR
   \   000173   A3           INC     DPTR
   \   000174   A3           INC     DPTR
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   A3           INC     DPTR
   \   000178   A3           INC     DPTR
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   28           ADD     A,R0
   \   00017B   FC           MOV     R4,A
   \   00017C   A3           INC     DPTR
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   39           ADDC    A,R1
   \   00017F   8C82         MOV     DPL,R4
   \   000181   F583         MOV     DPH,A
   \   000183   EA           MOV     A,R2
   \   000184   F0           MOVX    @DPTR,A
   \   000185   A3           INC     DPTR
   \   000186   EB           MOV     A,R3
   \   000187   F0           MOVX    @DPTR,A
   3012                buf += 2;
   \   000188   EE           MOV     A,R6
   \   000189   2402         ADD     A,#0x2
   \   00018B   FE           MOV     R6,A
   \   00018C   5001         JNC     ??ZDO_ParseSimpleDescBuf_6
   \   00018E   0F           INC     R7
   3013              }
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   00018F   05..         INC     ?V2
   \   000191   809F         SJMP    ??ZDO_ParseSimpleDescBuf_5
   3014            }
   3015          
   3016            // move in output cluster list (if any). allocate aligned memory.
   3017            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   000193   8E82         MOV     DPL,R6
   \   000195   8F83         MOV     DPH,R7
   \   000197   E0           MOVX    A,@DPTR
   \   000198   F8           MOV     R0,A
   \   000199   8E82         MOV     DPL,R6
   \   00019B   8F83         MOV     DPH,R7
   \   00019D   A3           INC     DPTR
   \   00019E   AE82         MOV     R6,DPL
   \   0001A0   AF83         MOV     R7,DPH
   \   0001A2   E8           MOV     A,R0
   \   0001A3   C0E0         PUSH    A
   \   0001A5   85..82       MOV     DPL,?V0
   \   0001A8   85..83       MOV     DPH,?V1
   \   0001AB   A3           INC     DPTR
   \   0001AC   A3           INC     DPTR
   \   0001AD   A3           INC     DPTR
   \   0001AE   A3           INC     DPTR
   \   0001AF   A3           INC     DPTR
   \   0001B0   A3           INC     DPTR
   \   0001B1   A3           INC     DPTR
   \   0001B2   A3           INC     DPTR
   \   0001B3   A3           INC     DPTR
   \   0001B4   D0E0         POP     A
   \   0001B6   F0           MOVX    @DPTR,A
   \   0001B7   88..         MOV     ?V3,R0
   3018            if (num)
   \   0001B9   E5..         MOV     A,?V3
   \   0001BB   7003         JNZ     $+5
   \   0001BD   02....       LJMP    ??ZDO_ParseSimpleDescBuf_7 & 0xFFFF
   3019            {
   3020              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0001C0                ; Setup parameters for call to function osal_mem_alloc
   \   0001C0   AA..         MOV     R2,?V3
   \   0001C2   7B00         MOV     R3,#0x0
   \   0001C4   EA           MOV     A,R2
   \   0001C5   75F002       MOV     B,#0x2
   \   0001C8   A4           MUL     AB
   \   0001C9   CA           XCH     A,R2
   \   0001CA   A8F0         MOV     R0,B
   \   0001CC   75F000       MOV     B,#0x0
   \   0001CF   A4           MUL     AB
   \   0001D0   28           ADD     A,R0
   \   0001D1   F8           MOV     R0,A
   \   0001D2   75F002       MOV     B,#0x2
   \   0001D5   EB           MOV     A,R3
   \   0001D6   A4           MUL     AB
   \   0001D7   28           ADD     A,R0
   \   0001D8   FB           MOV     R3,A
   \   0001D9   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0001DC   8A..         MOV     ?V4,R2
   \   0001DE   8B..         MOV     ?V5,R3
   \   0001E0   A8..         MOV     R0,?V4
   \   0001E2   A9..         MOV     R1,?V5
   \   0001E4   85..82       MOV     DPL,?V0
   \   0001E7   85..83       MOV     DPH,?V1
   \   0001EA   A3           INC     DPTR
   \   0001EB   A3           INC     DPTR
   \   0001EC   A3           INC     DPTR
   \   0001ED   A3           INC     DPTR
   \   0001EE   A3           INC     DPTR
   \   0001EF   A3           INC     DPTR
   \   0001F0   A3           INC     DPTR
   \   0001F1   A3           INC     DPTR
   \   0001F2   A3           INC     DPTR
   \   0001F3   A3           INC     DPTR
   \   0001F4   E8           MOV     A,R0
   \   0001F5   F0           MOVX    @DPTR,A
   \   0001F6   A3           INC     DPTR
   \   0001F7   E9           MOV     A,R1
   \   0001F8   F0           MOVX    @DPTR,A
   \   0001F9   E8           MOV     A,R0
   \   0001FA   49           ORL     A,R1
   \   0001FB   7043         JNZ     ??ZDO_ParseSimpleDescBuf_8
   3021              {
   3022                // malloc failed. free input cluster list memory if there is any
   3023                if ( desc->pAppInClusterList != NULL )
   \   0001FD   85..82       MOV     DPL,?V0
   \   000200   85..83       MOV     DPH,?V1
   \   000203   A3           INC     DPTR
   \   000204   A3           INC     DPTR
   \   000205   A3           INC     DPTR
   \   000206   A3           INC     DPTR
   \   000207   A3           INC     DPTR
   \   000208   A3           INC     DPTR
   \   000209   A3           INC     DPTR
   \   00020A   E0           MOVX    A,@DPTR
   \   00020B   F8           MOV     R0,A
   \   00020C   A3           INC     DPTR
   \   00020D   E0           MOVX    A,@DPTR
   \   00020E   F9           MOV     R1,A
   \   00020F   E8           MOV     A,R0
   \   000210   49           ORL     A,R1
   \   000211   6029         JZ      ??ZDO_ParseSimpleDescBuf_9
   3024                {
   3025                  osal_mem_free(desc->pAppInClusterList);
   \   000213                ; Setup parameters for call to function osal_mem_free
   \   000213   85..82       MOV     DPL,?V0
   \   000216   85..83       MOV     DPH,?V1
   \   000219   A3           INC     DPTR
   \   00021A   A3           INC     DPTR
   \   00021B   A3           INC     DPTR
   \   00021C   A3           INC     DPTR
   \   00021D   A3           INC     DPTR
   \   00021E   A3           INC     DPTR
   \   00021F   A3           INC     DPTR
   \   000220   E0           MOVX    A,@DPTR
   \   000221   FA           MOV     R2,A
   \   000222   A3           INC     DPTR
   \   000223   E0           MOVX    A,@DPTR
   \   000224   FB           MOV     R3,A
   \   000225   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   3026                  
   3027                  desc->pAppInClusterList = NULL;
   \   000228   85..82       MOV     DPL,?V0
   \   00022B   85..83       MOV     DPH,?V1
   \   00022E   A3           INC     DPTR
   \   00022F   A3           INC     DPTR
   \   000230   A3           INC     DPTR
   \   000231   A3           INC     DPTR
   \   000232   A3           INC     DPTR
   \   000233   A3           INC     DPTR
   \   000234   A3           INC     DPTR
   \   000235   7400         MOV     A,#0x0
   \   000237   F0           MOVX    @DPTR,A
   \   000238   A3           INC     DPTR
   \   000239   7400         MOV     A,#0x0
   \   00023B   F0           MOVX    @DPTR,A
   3028                }
   3029                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_9:
   \   00023C   7901         MOV     R1,#0x1
   \   00023E   8069         SJMP    ??ZDO_ParseSimpleDescBuf_4
   3030              }
   3031              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_8:
   \   000240   75..00       MOV     ?V2,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_10:
   \   000243   E5..         MOV     A,?V2
   \   000245   C3           CLR     C
   \   000246   95..         SUBB    A,?V3
   \   000248   505D         JNC     ??ZDO_ParseSimpleDescBuf_7
   3032              {
   3033                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \   00024A   8E82         MOV     DPL,R6
   \   00024C   8F83         MOV     DPH,R7
   \   00024E   E0           MOVX    A,@DPTR
   \   00024F   FA           MOV     R2,A
   \   000250   7B00         MOV     R3,#0x0
   \   000252   8E82         MOV     DPL,R6
   \   000254   8F83         MOV     DPH,R7
   \   000256   A3           INC     DPTR
   \   000257   E0           MOVX    A,@DPTR
   \   000258   F8           MOV     R0,A
   \   000259   7900         MOV     R1,#0x0
   \   00025B   E4           CLR     A
   \   00025C   C8           XCH     A,R0
   \   00025D   F9           MOV     R1,A
   \   00025E   EA           MOV     A,R2
   \   00025F   28           ADD     A,R0
   \   000260   FA           MOV     R2,A
   \   000261   EB           MOV     A,R3
   \   000262   39           ADDC    A,R1
   \   000263   FB           MOV     R3,A
   \   000264   A8..         MOV     R0,?V2
   \   000266   7900         MOV     R1,#0x0
   \   000268   E8           MOV     A,R0
   \   000269   75F002       MOV     B,#0x2
   \   00026C   A4           MUL     AB
   \   00026D   C8           XCH     A,R0
   \   00026E   ACF0         MOV     R4,B
   \   000270   75F000       MOV     B,#0x0
   \   000273   A4           MUL     AB
   \   000274   2C           ADD     A,R4
   \   000275   FC           MOV     R4,A
   \   000276   75F002       MOV     B,#0x2
   \   000279   E9           MOV     A,R1
   \   00027A   A4           MUL     AB
   \   00027B   2C           ADD     A,R4
   \   00027C   F9           MOV     R1,A
   \   00027D   85..82       MOV     DPL,?V0
   \   000280   85..83       MOV     DPH,?V1
   \   000283   A3           INC     DPTR
   \   000284   A3           INC     DPTR
   \   000285   A3           INC     DPTR
   \   000286   A3           INC     DPTR
   \   000287   A3           INC     DPTR
   \   000288   A3           INC     DPTR
   \   000289   A3           INC     DPTR
   \   00028A   A3           INC     DPTR
   \   00028B   A3           INC     DPTR
   \   00028C   A3           INC     DPTR
   \   00028D   E0           MOVX    A,@DPTR
   \   00028E   28           ADD     A,R0
   \   00028F   FC           MOV     R4,A
   \   000290   A3           INC     DPTR
   \   000291   E0           MOVX    A,@DPTR
   \   000292   39           ADDC    A,R1
   \   000293   8C82         MOV     DPL,R4
   \   000295   F583         MOV     DPH,A
   \   000297   EA           MOV     A,R2
   \   000298   F0           MOVX    @DPTR,A
   \   000299   A3           INC     DPTR
   \   00029A   EB           MOV     A,R3
   \   00029B   F0           MOVX    @DPTR,A
   3034                buf += 2;
   \   00029C   EE           MOV     A,R6
   \   00029D   2402         ADD     A,#0x2
   \   00029F   FE           MOV     R6,A
   \   0002A0   5001         JNC     ??ZDO_ParseSimpleDescBuf_11
   \   0002A2   0F           INC     R7
   3035              }
   \                     ??ZDO_ParseSimpleDescBuf_11:
   \   0002A3   05..         INC     ?V2
   \   0002A5   809C         SJMP    ??ZDO_ParseSimpleDescBuf_10
   3036            }
   3037            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   0002A7   7900         MOV     R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   0002A9   7F06         MOV     R7,#0x6
   \   0002AB   02....       LJMP    ?BANKED_LEAVE_XDATA
   3038          }
   3039          
   3040          /*********************************************************************
   3041           * @fn          ZDO_ParseDeviceAnnce
   3042           *
   3043           * @brief       Parse a Device Announce message.
   3044           *
   3045           * @param       inMsg - Incoming message
   3046           * @param       pAnnce - place to put the parsed information
   3047           *
   3048           * @return      none
   3049           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3050          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   3051          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   3052            uint8 *msg;
   3053          
   3054            // Parse incoming message
   3055            msg = inMsg->asdu;
   \   00000D   E5..         MOV     A,?V2
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   35..         ADDC    A,?V3
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   E8           MOV     A,R0
   \   00001E   FE           MOV     R6,A
   \   00001F   E9           MOV     A,R1
   \   000020   FF           MOV     R7,A
   3056            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FA           MOV     R2,A
   \   000027   7B00         MOV     R3,#0x0
   \   000029   8E82         MOV     DPL,R6
   \   00002B   8F83         MOV     DPH,R7
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F8           MOV     R0,A
   \   000030   7900         MOV     R1,#0x0
   \   000032   E4           CLR     A
   \   000033   C8           XCH     A,R0
   \   000034   F9           MOV     R1,A
   \   000035   EA           MOV     A,R2
   \   000036   28           ADD     A,R0
   \   000037   F8           MOV     R0,A
   \   000038   EB           MOV     A,R3
   \   000039   39           ADDC    A,R1
   \   00003A   F9           MOV     R1,A
   \   00003B   85..82       MOV     DPL,?V0
   \   00003E   85..83       MOV     DPH,?V1
   \   000041   E8           MOV     A,R0
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   E9           MOV     A,R1
   \   000045   F0           MOVX    @DPTR,A
   3057            msg += 2;
   \   000046   EE           MOV     A,R6
   \   000047   2402         ADD     A,#0x2
   \   000049   FE           MOV     R6,A
   \   00004A   5001         JNC     ??ZDO_ParseDeviceAnnce_0
   \   00004C   0F           INC     R7
   3058            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??ZDO_ParseDeviceAnnce_0:
   \   00004D                ; Setup parameters for call to function sAddrExtCpy
   \   00004D   EE           MOV     A,R6
   \   00004E   FC           MOV     R4,A
   \   00004F   EF           MOV     A,R7
   \   000050   FD           MOV     R5,A
   \   000051   E5..         MOV     A,?V0
   \   000053   2402         ADD     A,#0x2
   \   000055   FA           MOV     R2,A
   \   000056   E4           CLR     A
   \   000057   35..         ADDC    A,?V1
   \   000059   FB           MOV     R3,A
   \   00005A   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   3059            msg += Z_EXTADDR_LEN;
   \   00005D   EE           MOV     A,R6
   \   00005E   2408         ADD     A,#0x8
   \   000060   FE           MOV     R6,A
   \   000061   5001         JNC     ??ZDO_ParseDeviceAnnce_1
   \   000063   0F           INC     R7
   3060            pAnnce->capabilities = *msg;
   \                     ??ZDO_ParseDeviceAnnce_1:
   \   000064   8E82         MOV     DPL,R6
   \   000066   8F83         MOV     DPH,R7
   \   000068   E0           MOVX    A,@DPTR
   \   000069   C0E0         PUSH    A
   \   00006B   85..82       MOV     DPL,?V0
   \   00006E   85..83       MOV     DPH,?V1
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   D0E0         POP     A
   \   00007D   F0           MOVX    @DPTR,A
   3061          }
   \   00007E   7F04         MOV     R7,#0x4
   \   000080   02....       LJMP    ?BANKED_LEAVE_XDATA
   3062          
   3063          /*********************************************************************
   3064           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   3065           *
   3066           * @brief       This function handles parsing of the incoming Management
   3067           *              Network Update notify.
   3068           *
   3069           * @param       inMsg - incoming message (request)
   3070           *
   3071           * @return      a pointer to parsed response structure (NULL if not allocated).
   3072           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3073           *          by the calling function [osal_mem_free()].
   3074           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3075          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3076          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7408         MOV     A,#0x8
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   3077            uint8 status;
   3078            uint32 scannedChannels = 0;
   \   000014   75..00       MOV     ?V4,#0x0
   \   000017   75..00       MOV     ?V5,#0x0
   \   00001A   75..00       MOV     ?V6,#0x0
   \   00001D   75..00       MOV     ?V7,#0x0
   3079            uint16 totalTransmissions = 0;
   \   000020   7406         MOV     A,#0x6
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   7400         MOV     A,#0x0
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   7400         MOV     A,#0x0
   \   00002B   F0           MOVX    @DPTR,A
   3080            uint16 transmissionFailures = 0;
   \   00002C   7404         MOV     A,#0x4
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   7400         MOV     A,#0x0
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   7400         MOV     A,#0x0
   \   000037   F0           MOVX    @DPTR,A
   3081            uint8 listCount = 0;
   \   000038   85..82       MOV     DPL,?XSP + 0
   \   00003B   85..83       MOV     DPH,?XSP + 1
   \   00003E   7400         MOV     A,#0x0
   \   000040   F0           MOVX    @DPTR,A
   3082            uint8 *msg = inMsg->asdu;
   \   000041   7408         MOV     A,#0x8
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F8           MOV     R0,A
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   C8           XCH     A,R0
   \   00004B   2413         ADD     A,#0x13
   \   00004D   F582         MOV     DPL,A
   \   00004F   C8           XCH     A,R0
   \   000050   3400         ADDC    A,#0x0
   \   000052   F583         MOV     DPH,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   FE           MOV     R6,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   FF           MOV     R7,A
   3083            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3084          
   3085            status = *msg++;
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   C0E0         PUSH    A
   \   000060   7403         MOV     A,#0x3
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   D0E0         POP     A
   \   000067   F0           MOVX    @DPTR,A
   \   000068   8E82         MOV     DPL,R6
   \   00006A   8F83         MOV     DPH,R7
   \   00006C   A3           INC     DPTR
   \   00006D   AE82         MOV     R6,DPL
   \   00006F   AF83         MOV     R7,DPH
   3086            if ( status == ZSuccess )
   \   000071   7403         MOV     A,#0x3
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   E0           MOVX    A,@DPTR
   \   000077   6003         JZ      $+5
   \   000079   02....       LJMP    ??ZDO_ParseMgmtNwkUpdateNotify_0 & 0xFFFF
   3087            {
   3088              scannedChannels = osal_build_uint32( msg, 4 );
   \   00007C                ; Setup parameters for call to function osal_build_uint32
   \   00007C   7904         MOV     R1,#0x4
   \   00007E   EE           MOV     A,R6
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   FB           MOV     R3,A
   \   000082   12....       LCALL   ??osal_build_uint32?relay; Banked call to: osal_build_uint32
   \   000085   8A..         MOV     ?V0,R2
   \   000087   8B..         MOV     ?V1,R3
   \   000089   8C..         MOV     ?V2,R4
   \   00008B   8D..         MOV     ?V3,R5
   \   00008D   85....       MOV     ?V4,?V0
   \   000090   85....       MOV     ?V5,?V1
   \   000093   85....       MOV     ?V6,?V2
   \   000096   85....       MOV     ?V7,?V3
   3089              msg += 4;
   \   000099   EE           MOV     A,R6
   \   00009A   2404         ADD     A,#0x4
   \   00009C   FE           MOV     R6,A
   \   00009D   5001         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_1
   \   00009F   0F           INC     R7
   3090              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_1:
   \   0000A0   8E82         MOV     DPL,R6
   \   0000A2   8F83         MOV     DPH,R7
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FA           MOV     R2,A
   \   0000A6   7B00         MOV     R3,#0x0
   \   0000A8   8E82         MOV     DPL,R6
   \   0000AA   8F83         MOV     DPH,R7
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   F8           MOV     R0,A
   \   0000AF   7900         MOV     R1,#0x0
   \   0000B1   E4           CLR     A
   \   0000B2   C8           XCH     A,R0
   \   0000B3   F9           MOV     R1,A
   \   0000B4   EA           MOV     A,R2
   \   0000B5   28           ADD     A,R0
   \   0000B6   F8           MOV     R0,A
   \   0000B7   EB           MOV     A,R3
   \   0000B8   39           ADDC    A,R1
   \   0000B9   F9           MOV     R1,A
   \   0000BA   7406         MOV     A,#0x6
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   E8           MOV     A,R0
   \   0000C0   F0           MOVX    @DPTR,A
   \   0000C1   A3           INC     DPTR
   \   0000C2   E9           MOV     A,R1
   \   0000C3   F0           MOVX    @DPTR,A
   3091              msg += 2;
   \   0000C4   EE           MOV     A,R6
   \   0000C5   2402         ADD     A,#0x2
   \   0000C7   FE           MOV     R6,A
   \   0000C8   5001         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_2
   \   0000CA   0F           INC     R7
   3092              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_2:
   \   0000CB   8E82         MOV     DPL,R6
   \   0000CD   8F83         MOV     DPH,R7
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   FA           MOV     R2,A
   \   0000D1   7B00         MOV     R3,#0x0
   \   0000D3   8E82         MOV     DPL,R6
   \   0000D5   8F83         MOV     DPH,R7
   \   0000D7   A3           INC     DPTR
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   F8           MOV     R0,A
   \   0000DA   7900         MOV     R1,#0x0
   \   0000DC   E4           CLR     A
   \   0000DD   C8           XCH     A,R0
   \   0000DE   F9           MOV     R1,A
   \   0000DF   EA           MOV     A,R2
   \   0000E0   28           ADD     A,R0
   \   0000E1   F8           MOV     R0,A
   \   0000E2   EB           MOV     A,R3
   \   0000E3   39           ADDC    A,R1
   \   0000E4   F9           MOV     R1,A
   \   0000E5   7404         MOV     A,#0x4
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   E8           MOV     A,R0
   \   0000EB   F0           MOVX    @DPTR,A
   \   0000EC   A3           INC     DPTR
   \   0000ED   E9           MOV     A,R1
   \   0000EE   F0           MOVX    @DPTR,A
   3093              msg += 2;
   \   0000EF   EE           MOV     A,R6
   \   0000F0   2402         ADD     A,#0x2
   \   0000F2   FE           MOV     R6,A
   \   0000F3   5001         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_3
   \   0000F5   0F           INC     R7
   3094              listCount = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_3:
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   C0E0         PUSH    A
   \   0000FD   85..82       MOV     DPL,?XSP + 0
   \   000100   85..83       MOV     DPH,?XSP + 1
   \   000103   D0E0         POP     A
   \   000105   F0           MOVX    @DPTR,A
   \   000106   8E82         MOV     DPL,R6
   \   000108   8F83         MOV     DPH,R7
   \   00010A   A3           INC     DPTR
   \   00010B   AE82         MOV     R6,DPL
   \   00010D   AF83         MOV     R7,DPH
   3095            }
   3096          
   3097            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   00010F                ; Setup parameters for call to function osal_mem_alloc
   \   00010F   85..82       MOV     DPL,?XSP + 0
   \   000112   85..83       MOV     DPH,?XSP + 1
   \   000115   E0           MOVX    A,@DPTR
   \   000116   F8           MOV     R0,A
   \   000117   7900         MOV     R1,#0x0
   \   000119   E8           MOV     A,R0
   \   00011A   240A         ADD     A,#0xa
   \   00011C   FA           MOV     R2,A
   \   00011D   E4           CLR     A
   \   00011E   39           ADDC    A,R1
   \   00011F   FB           MOV     R3,A
   \   000120   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000123   7401         MOV     A,#0x1
   \   000125   12....       LCALL   ?XSTACK_DISP0_8
   \   000128   EA           MOV     A,R2
   \   000129   F0           MOVX    @DPTR,A
   \   00012A   A3           INC     DPTR
   \   00012B   EB           MOV     A,R3
   \   00012C   F0           MOVX    @DPTR,A
   3098          
   3099            if ( pRsp )
   \   00012D   7401         MOV     A,#0x1
   \   00012F   12....       LCALL   ?XSTACK_DISP0_8
   \   000132   E0           MOVX    A,@DPTR
   \   000133   F8           MOV     R0,A
   \   000134   A3           INC     DPTR
   \   000135   E0           MOVX    A,@DPTR
   \   000136   F9           MOV     R1,A
   \   000137   E8           MOV     A,R0
   \   000138   49           ORL     A,R1
   \   000139   7003         JNZ     $+5
   \   00013B   02....       LJMP    ??ZDO_ParseMgmtNwkUpdateNotify_4 & 0xFFFF
   3100            {
   3101              pRsp->status = status;
   \   00013E   7403         MOV     A,#0x3
   \   000140   12....       LCALL   ?XSTACK_DISP0_8
   \   000143   E0           MOVX    A,@DPTR
   \   000144   C0E0         PUSH    A
   \   000146   7401         MOV     A,#0x1
   \   000148   12....       LCALL   ?XSTACK_DISP0_8
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   F8           MOV     R0,A
   \   00014D   A3           INC     DPTR
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   F583         MOV     DPH,A
   \   000151   8882         MOV     DPL,R0
   \   000153   D0E0         POP     A
   \   000155   F0           MOVX    @DPTR,A
   3102              pRsp->scannedChannels = scannedChannels;
   \   000156   7401         MOV     A,#0x1
   \   000158   12....       LCALL   ?XSTACK_DISP0_8
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   F8           MOV     R0,A
   \   00015D   A3           INC     DPTR
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   F583         MOV     DPH,A
   \   000161   8882         MOV     DPL,R0
   \   000163   A3           INC     DPTR
   \   000164   78..         MOV     R0,#?V4
   \   000166   12....       LCALL   ?L_MOV_TO_X
   3103              pRsp->totalTransmissions = totalTransmissions;
   \   000169   7406         MOV     A,#0x6
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   F8           MOV     R0,A
   \   000170   A3           INC     DPTR
   \   000171   E0           MOVX    A,@DPTR
   \   000172   F9           MOV     R1,A
   \   000173   7401         MOV     A,#0x1
   \   000175   12....       LCALL   ?XSTACK_DISP0_8
   \   000178   E0           MOVX    A,@DPTR
   \   000179   FA           MOV     R2,A
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   F583         MOV     DPH,A
   \   00017E   8A82         MOV     DPL,R2
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   A3           INC     DPTR
   \   000184   A3           INC     DPTR
   \   000185   E8           MOV     A,R0
   \   000186   F0           MOVX    @DPTR,A
   \   000187   A3           INC     DPTR
   \   000188   E9           MOV     A,R1
   \   000189   F0           MOVX    @DPTR,A
   3104              pRsp->transmissionFailures = transmissionFailures;
   \   00018A   7404         MOV     A,#0x4
   \   00018C   12....       LCALL   ?XSTACK_DISP0_8
   \   00018F   E0           MOVX    A,@DPTR
   \   000190   F8           MOV     R0,A
   \   000191   A3           INC     DPTR
   \   000192   E0           MOVX    A,@DPTR
   \   000193   F9           MOV     R1,A
   \   000194   7401         MOV     A,#0x1
   \   000196   12....       LCALL   ?XSTACK_DISP0_8
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   FA           MOV     R2,A
   \   00019B   A3           INC     DPTR
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   CA           XCH     A,R2
   \   00019E   2407         ADD     A,#0x7
   \   0001A0   F582         MOV     DPL,A
   \   0001A2   CA           XCH     A,R2
   \   0001A3   3400         ADDC    A,#0x0
   \   0001A5   F583         MOV     DPH,A
   \   0001A7   E8           MOV     A,R0
   \   0001A8   F0           MOVX    @DPTR,A
   \   0001A9   A3           INC     DPTR
   \   0001AA   E9           MOV     A,R1
   \   0001AB   F0           MOVX    @DPTR,A
   3105              pRsp->listCount = listCount;
   \   0001AC   85..82       MOV     DPL,?XSP + 0
   \   0001AF   85..83       MOV     DPH,?XSP + 1
   \   0001B2   E0           MOVX    A,@DPTR
   \   0001B3   C0E0         PUSH    A
   \   0001B5   7401         MOV     A,#0x1
   \   0001B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BA   E0           MOVX    A,@DPTR
   \   0001BB   F8           MOV     R0,A
   \   0001BC   A3           INC     DPTR
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   C8           XCH     A,R0
   \   0001BF   2409         ADD     A,#0x9
   \   0001C1   F582         MOV     DPL,A
   \   0001C3   C8           XCH     A,R0
   \   0001C4   3400         ADDC    A,#0x0
   \   0001C6   F583         MOV     DPH,A
   \   0001C8   D0E0         POP     A
   \   0001CA   F0           MOVX    @DPTR,A
   3106          
   3107              // Allocate a buffer big enough to handle the list.
   3108              if ( listCount > 0 )
   \   0001CB   85..82       MOV     DPL,?XSP + 0
   \   0001CE   85..83       MOV     DPH,?XSP + 1
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   602B         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_4
   3109                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   0001D4                ; Setup parameters for call to function osal_memcpy
   \   0001D4   8E..         MOV     ?V0,R6
   \   0001D6   8F..         MOV     ?V1,R7
   \   0001D8   75..00       MOV     ?V2,#0x0
   \   0001DB   78..         MOV     R0,#?V0
   \   0001DD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001E0   7403         MOV     A,#0x3
   \   0001E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E5   E0           MOVX    A,@DPTR
   \   0001E6   FC           MOV     R4,A
   \   0001E7   7D00         MOV     R5,#0x0
   \   0001E9   7404         MOV     A,#0x4
   \   0001EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EE   E0           MOVX    A,@DPTR
   \   0001EF   240A         ADD     A,#0xa
   \   0001F1   FA           MOV     R2,A
   \   0001F2   A3           INC     DPTR
   \   0001F3   E0           MOVX    A,@DPTR
   \   0001F4   3400         ADDC    A,#0x0
   \   0001F6   FB           MOV     R3,A
   \   0001F7   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0001FA   7403         MOV     A,#0x3
   \   0001FC   12....       LCALL   ?DEALLOC_XSTACK8
   3110            }
   3111          
   3112            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_4:
   \   0001FF   7401         MOV     A,#0x1
   \   000201   12....       LCALL   ?XSTACK_DISP0_8
   \   000204   E0           MOVX    A,@DPTR
   \   000205   FA           MOV     R2,A
   \   000206   A3           INC     DPTR
   \   000207   E0           MOVX    A,@DPTR
   \   000208   FB           MOV     R3,A
   \   000209   740A         MOV     A,#0xa
   \   00020B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00020E   7F08         MOV     R7,#0x8
   \   000210   02....       LJMP    ?BANKED_LEAVE_XDATA
   3113          }
   3114          
   3115          /*********************************************************************
   3116           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3117           *
   3118           * @brief       This function handles parsing the incoming Management
   3119           *              Network Update request and starts the request (if needed).
   3120           *
   3121           * @param       inMsg - incoming message (request)
   3122           * @param       pReq - pointer to place to parse message to
   3123           *
   3124           * @return      none
   3125           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3126          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3127          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   3128            uint8 *msg = inMsg->asdu;
   \   00000D   E5..         MOV     A,?V2
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   35..         ADDC    A,?V3
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FE           MOV     R6,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FF           MOV     R7,A
   3129          
   3130            pReq->channelMask = osal_build_uint32( msg, 4 );
   \   00001D                ; Setup parameters for call to function osal_build_uint32
   \   00001D   7904         MOV     R1,#0x4
   \   00001F   EE           MOV     A,R6
   \   000020   FA           MOV     R2,A
   \   000021   EF           MOV     A,R7
   \   000022   FB           MOV     R3,A
   \   000023   12....       LCALL   ??osal_build_uint32?relay; Banked call to: osal_build_uint32
   \   000026   EA           MOV     A,R2
   \   000027   F8           MOV     R0,A
   \   000028   EB           MOV     A,R3
   \   000029   F9           MOV     R1,A
   \   00002A   EC           MOV     A,R4
   \   00002B   FA           MOV     R2,A
   \   00002C   ED           MOV     A,R5
   \   00002D   FB           MOV     R3,A
   \   00002E   85..82       MOV     DPL,?V0
   \   000031   85..83       MOV     DPH,?V1
   \   000034   12....       LCALL   ?XSTORE_R0123
   3131            msg += 4;
   \   000037   EE           MOV     A,R6
   \   000038   2404         ADD     A,#0x4
   \   00003A   FE           MOV     R6,A
   \   00003B   5001         JNC     ??ZDO_ParseMgmtNwkUpdateReq_0
   \   00003D   0F           INC     R7
   3132            pReq->scanDuration = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   E0           MOVX    A,@DPTR
   \   000043   C0E0         PUSH    A
   \   000045   85..82       MOV     DPL,?V0
   \   000048   85..83       MOV     DPH,?V1
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   D0E0         POP     A
   \   000051   F0           MOVX    @DPTR,A
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   A3           INC     DPTR
   \   000057   AE82         MOV     R6,DPL
   \   000059   AF83         MOV     R7,DPH
   3133          
   3134            if ( pReq->scanDuration <= 0x05 )
   \   00005B   85..82       MOV     DPL,?V0
   \   00005E   85..83       MOV     DPH,?V1
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   C3           CLR     C
   \   000067   9406         SUBB    A,#0x6
   \   000069   5017         JNC     ??ZDO_ParseMgmtNwkUpdateReq_1
   3135            {
   3136              // Request is to scan over channelMask
   3137              pReq->scanCount = *msg;
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   C0E0         PUSH    A
   \   000072   85..82       MOV     DPL,?V0
   \   000075   85..83       MOV     DPH,?V1
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   D0E0         POP     A
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   8078         SJMP    ??ZDO_ParseMgmtNwkUpdateReq_2
   3138            }
   3139            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   000082   85..82       MOV     DPL,?V0
   \   000085   85..83       MOV     DPH,?V1
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   64FE         XRL     A,#0xfe
   \   00008F   600F         JZ      ??ZDO_ParseMgmtNwkUpdateReq_3
   \   000091   85..82       MOV     DPL,?V0
   \   000094   85..83       MOV     DPH,?V1
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   64FF         XRL     A,#0xff
   \   00009E   705A         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_2
   3140            {
   3141              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3142              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   0000A0   8E82         MOV     DPL,R6
   \   0000A2   8F83         MOV     DPH,R7
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   C0E0         PUSH    A
   \   0000A7   85..82       MOV     DPL,?V0
   \   0000AA   85..83       MOV     DPH,?V1
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   D0E0         POP     A
   \   0000B5   F0           MOVX    @DPTR,A
   \   0000B6   8E82         MOV     DPL,R6
   \   0000B8   8F83         MOV     DPH,R7
   \   0000BA   A3           INC     DPTR
   \   0000BB   AE82         MOV     R6,DPL
   \   0000BD   AF83         MOV     R7,DPH
   3143          
   3144              if ( pReq->scanDuration == 0xFF )
   \   0000BF   85..82       MOV     DPL,?V0
   \   0000C2   85..83       MOV     DPH,?V1
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   64FF         XRL     A,#0xff
   \   0000CC   702C         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_2
   3145              {
   3146                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   0000CE   8E82         MOV     DPL,R6
   \   0000D0   8F83         MOV     DPH,R7
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   FA           MOV     R2,A
   \   0000D4   7B00         MOV     R3,#0x0
   \   0000D6   8E82         MOV     DPL,R6
   \   0000D8   8F83         MOV     DPH,R7
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F8           MOV     R0,A
   \   0000DD   7900         MOV     R1,#0x0
   \   0000DF   E4           CLR     A
   \   0000E0   C8           XCH     A,R0
   \   0000E1   F9           MOV     R1,A
   \   0000E2   EA           MOV     A,R2
   \   0000E3   28           ADD     A,R0
   \   0000E4   F8           MOV     R0,A
   \   0000E5   EB           MOV     A,R3
   \   0000E6   39           ADDC    A,R1
   \   0000E7   F9           MOV     R1,A
   \   0000E8   85..82       MOV     DPL,?V0
   \   0000EB   85..83       MOV     DPH,?V1
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   E8           MOV     A,R0
   \   0000F6   F0           MOVX    @DPTR,A
   \   0000F7   A3           INC     DPTR
   \   0000F8   E9           MOV     A,R1
   \   0000F9   F0           MOVX    @DPTR,A
   3147              }
   3148            }
   3149          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   0000FA   7F04         MOV     R7,#0x4
   \   0000FC   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDODeviceSetup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDODeviceSetup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_StartDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zdoSendStateChangeMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdoSendStateChangeMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateNwkStatus?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateNwkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RemoveEndDeviceBind?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveEndDeviceBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SendEDBindRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendEDBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_CompareClusterLists?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CompareClusterLists

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_AnyClusterMatches?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AnyClusterMatches

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessNodeDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessPowerDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessPowerDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessSimpleDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessActiveEPReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessActiveEPReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ConvertOTAClusters?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConvertOTAClusters

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMatchDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessBindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateAddrManager?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateAddrManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessServerDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_EndDeviceTimeoutCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtLqiReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLqiReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtNwkDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtRtgReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtRtgReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtDirectJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtLeaveReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtPermitJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??NLME_PermitJoiningTimeout?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NLME_PermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessUserDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessUserDescSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessDeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_BuildSimpleDescBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_BuildSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_MatchEndDeviceBind?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_MatchEndDeviceBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RemoveMatchMemory?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveMatchMemory

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_CopyMatchInfo?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CopyMatchInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDMatchSendState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDMatchSendState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_EndDeviceBindMatchTimeoutCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceBindMatchTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseEndDeviceBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseBindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseAddrRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseNodeDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParsePowerDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParsePowerDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseSimpleDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseEPListRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEPListRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseServerDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtLqiRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmNwkDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtRtgRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtBindRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseUserDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseUserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseSimpleDescBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseDeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtNwkUpdateNotify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtNwkUpdateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateReq
   3150          
   3151          /*********************************************************************
   3152          *********************************************************************/
   3153          
   3154          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   NLME_PermitJoiningTimeout
      1     71   ZDMatchSendState
        0     39   -> APS_SetEndDeviceBindTimeout
        0     39   -> ZDO_RemoveMatchMemory
        0     47   -> ZDP_BindUnbindReq
        0     44   -> ZDP_SendData
        0     39   -> sAddrExtCpy
      2      0   ZDODeviceSetup
        2      0   -> APS_ReflectorInit
        2      0   -> NLME_CoordinatorInit
        2      0   -> NLME_DeviceJoiningInit
      0     49   ZDO_AnyClusterMatches
      1     10   ZDO_BuildSimpleDescBuf
      0     44   ZDO_CompareClusterLists
      0     45   ZDO_ConvertOTAClusters
      0     41   ZDO_CopyMatchInfo
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     17   -> osal_memcpy
      2      0   ZDO_EndDeviceBindMatchTimeoutCB
        2      0   -> ZDMatchSendState
      0      9   ZDO_EndDeviceTimeoutCB
        0      9   -> ZDO_RemoveEndDeviceBind
        0      9   -> ZDO_SendEDBindRsp
      2      0   ZDO_Init
        2      0   -> ZDODeviceSetup
        2      0   -> sAddrExtCpy
      1     29   ZDO_MatchEndDeviceBind
        0     24   -> APS_SetEndDeviceBindTimeout
        0     24   -> ZDMatchSendState
        0     28   -> ZDO_CompareClusterLists
        0     24   -> ZDO_CopyMatchInfo
        0     24   -> ZDO_RemoveMatchMemory
        0     29   -> ZDP_SendData
        0     24   -> osal_mem_alloc
        0     27   -> osal_memcpy
        0     24   -> osal_memset
      1     16   ZDO_ParseAddrRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     12   ZDO_ParseBindUnbindReq
        0     12   -> sAddrExtCpy
      1     56   ZDO_ParseDeviceAnnce
        0     12   -> sAddrExtCpy
      1     20   ZDO_ParseEPListRsp
        0     17   -> osal_mem_alloc
        0     20   -> osal_memcpy
      1     14   ZDO_ParseEndDeviceBindReq
        0     14   -> ZDO_ConvertOTAClusters
        0     14   -> osal_mem_alloc
        0     14   -> sAddrExtCpy
      1     19   ZDO_ParseMgmNwkDiscRsp
        0     19   -> osal_mem_alloc
        0     19   -> sAddrExtCpy
      1     19   ZDO_ParseMgmtBindRsp
        0     19   -> osal_mem_alloc
        0     19   -> sAddrExtCpy
      1     19   ZDO_ParseMgmtLqiRsp
        0     19   -> osal_mem_alloc
        0     19   -> sAddrExtCpy
      1     29   ZDO_ParseMgmtNwkUpdateNotify
        0     26   -> osal_build_uint32
        0     26   -> osal_mem_alloc
        0     29   -> osal_memcpy
      1     12   ZDO_ParseMgmtNwkUpdateReq
        0     12   -> osal_build_uint32
      1     18   ZDO_ParseMgmtRtgRsp
        0     18   -> osal_mem_alloc
      1     11   ZDO_ParseNodeDescRsp
      1     12   ZDO_ParsePowerDescRsp
      1      9   ZDO_ParseServerDiscRsp
      1     26   ZDO_ParseSimpleDescBuf
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
      1     12   ZDO_ParseSimpleDescRsp
        0     12   -> ZDO_ParseSimpleDescBuf
      1     21   ZDO_ParseUserDescRsp
        0     18   -> osal_mem_alloc
        0     21   -> osal_memcpy
      0     21   ZDO_ProcessActiveEPReq
        0     14   -> NLME_GetShortAddr
        0     21   -> ZDP_EPRsp
        0     14   -> afEndPoints
        0     14   -> afNumEndPoints
      0     29   ZDO_ProcessBindUnbindReq
        0     25   -> APSME_BindRequest
        0     24   -> APSME_LookupNwkAddr
        0     25   -> APSME_UnBindRequest
        0     24   -> NLME_GetExtAddr
        0     24   -> ZDApp_NVUpdate
        0     24   -> ZDP_NwkAddrReq
        0     29   -> ZDP_SendData
        0     24   -> bindNumOfEntries
        0     24   -> sAddrExtCmp
        0     24   -> sAddrExtCpy
      0     44   ZDO_ProcessDeviceAnnce
        0     44   -> AddrMgrEntryLookupNwk
        0     44   -> AddrMgrEntryUpdate
        0     44   -> AddrMgrExtAddrSet
        0     44   -> AssocChangeNwkAddr
        0     44   -> AssocGetWithExt
        0     44   -> AssocRemove
        0     44   -> NLME_CheckNewAddrSet
        0     44   -> NLME_GetCoordExtAddr
        0     44   -> NLME_GetCoordShortAddr
        0     44   -> NLME_GetExtAddr
        0     44   -> NLME_GetShortAddr
        0     44   -> RTG_RemoveRtgEntry
        0     44   -> ZDApp_NVUpdate
        0     44   -> ZDO_ParseDeviceAnnce
        0     44   -> ZMacSetReq
        0     44   -> nwkNeighborRemoveAllStranded
        0     44   -> nwkNeighborUpdateNwkAddr
        0     44   -> osal_memset
        0     44   -> sAddrExtCmp
      1     41   ZDO_ProcessMatchDescReq
        0     34   -> NLME_IsAddressBroadcast
        0     36   -> ZDO_AnyClusterMatches
        0     34   -> ZDO_ConvertOTAClusters
        0     41   -> ZDP_EPRsp
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     37   -> osal_memcpy
        0     34   -> osal_msg_allocate
        0     34   -> osal_msg_send
      0     27   ZDO_ProcessMgmtBindReq
        0     22   -> APSME_GetRequest
        0     27   -> ZDP_MgmtBindRsp
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
      1     20   ZDO_ProcessMgmtDirectJoinReq
        0     15   -> NLME_DirectJoinRequest
        0     20   -> ZDP_SendData
      1     25   ZDO_ProcessMgmtLeaveReq
        0     20   -> AddrMgrExtAddrValid
        0     20   -> NLME_GetExtAddr
        0     20   -> NLME_LeaveReq
        0     25   -> ZDP_SendData
        0     20   -> sAddrExtCmp
      1     63   ZDO_ProcessMgmtLqiReq
        0     58   -> AddrMgrEntryLookupNwk
        0     58   -> AssocCount
        0     58   -> AssocFindDevice
        0     58   -> NLME_GetRequest
        0     63   -> ZDP_MgmtLqiRsp
        0     58   -> osal_mem_alloc
        0     58   -> osal_mem_free
        0     58   -> osal_memset
        0     58   -> sAddrExtCpy
      1     18   ZDO_ProcessMgmtNwkDiscReq
        0     18   -> NLME_NwkDiscReq2
        0     18   -> NLME_NwkDiscTerm
        0     18   -> osal_build_uint32
      1     18   ZDO_ProcessMgmtPermitJoinReq
        0     13   -> NLME_PermitJoiningRequest
        0     18   -> ZDP_SendData
      0     24   ZDO_ProcessMgmtRtgReq
        0     19   -> NLME_GetRequest
        0     24   -> ZDP_MgmtRtgRsp
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
      0     18   ZDO_ProcessNodeDescReq
        0     18   -> ZDP_GenericRsp
        0     16   -> ZDP_NodeDescMsg
      0     18   ZDO_ProcessPowerDescReq
        0     18   -> ZDP_GenericRsp
        0     16   -> ZDP_PowerDescMsg
      0     16   ZDO_ProcessServerDiscReq
        0     16   -> ZDP_ServerDiscRsp
      0     16   ZDO_ProcessSimpleDescReq
        0     16   -> ZDP_SimpleDescMsg
        0     16   -> afFindSimpleDesc
        0     16   -> osal_mem_free
      0     33   ZDO_ProcessUserDescReq
        0     33   -> ZDP_GenericRsp
        0     32   -> ZDP_UserDescRsp
        0     33   -> osal_nv_read
      1     42   ZDO_ProcessUserDescSet
        0     42   -> ZDP_SendData
        0     40   -> osal_memcpy
        0     41   -> osal_nv_write
      2      9   ZDO_RemoveEndDeviceBind
        2      0   -> osal_mem_free
      2     39   ZDO_RemoveMatchMemory
        2      0   -> osal_mem_free
      1     28   ZDO_SendEDBindRsp
        0     19   -> ZDP_SendData
      0     30   ZDO_StartDevice
        0     23   -> NLME_NetworkDiscoveryRequest
        0     30   -> NLME_NetworkFormationRequest
        0     23   -> NLME_OrphanJoinRequest
        0     23   -> NLME_StartRouterRequest
        0     23   -> nwk_ScanJoiningOrphan
        0     23   -> osal_start_timerEx
      0     23   ZDO_UpdateAddrManager
        0     23   -> AddrMgrEntryUpdate
        0     23   -> AddrMgrExtAddrSet
      0     12   ZDO_UpdateNwkStatus
        0     12   -> NLME_GetExtAddr
        0     12   -> NLME_GetShortAddr
        0     12   -> zdoSendStateChangeMsg
      1     25   zdoSendStateChangeMsg
        0     13   -> osal_msg_allocate
        0     13   -> osal_msg_find
        0     13   -> osal_msg_send
        0     13   -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??NLME_PermitJoiningTimeout?relay
       6  ??ZDMatchSendState?relay
       6  ??ZDODeviceSetup?relay
       6  ??ZDO_AnyClusterMatches?relay
       6  ??ZDO_BuildSimpleDescBuf?relay
       6  ??ZDO_CompareClusterLists?relay
       6  ??ZDO_ConvertOTAClusters?relay
       6  ??ZDO_CopyMatchInfo?relay
       6  ??ZDO_EndDeviceBindMatchTimeoutCB?relay
       6  ??ZDO_EndDeviceTimeoutCB?relay
       6  ??ZDO_Init?relay
       6  ??ZDO_MatchEndDeviceBind?relay
       6  ??ZDO_ParseAddrRsp?relay
       6  ??ZDO_ParseBindUnbindReq?relay
       6  ??ZDO_ParseDeviceAnnce?relay
       6  ??ZDO_ParseEPListRsp?relay
       6  ??ZDO_ParseEndDeviceBindReq?relay
       6  ??ZDO_ParseMgmNwkDiscRsp?relay
       6  ??ZDO_ParseMgmtBindRsp?relay
       6  ??ZDO_ParseMgmtLqiRsp?relay
       6  ??ZDO_ParseMgmtNwkUpdateNotify?relay
       6  ??ZDO_ParseMgmtNwkUpdateReq?relay
       6  ??ZDO_ParseMgmtRtgRsp?relay
       6  ??ZDO_ParseNodeDescRsp?relay
       6  ??ZDO_ParsePowerDescRsp?relay
       6  ??ZDO_ParseServerDiscRsp?relay
       6  ??ZDO_ParseSimpleDescBuf?relay
       6  ??ZDO_ParseSimpleDescRsp?relay
       6  ??ZDO_ParseUserDescRsp?relay
       6  ??ZDO_ProcessActiveEPReq?relay
       6  ??ZDO_ProcessBindUnbindReq?relay
       6  ??ZDO_ProcessDeviceAnnce?relay
       6  ??ZDO_ProcessMatchDescReq?relay
       6  ??ZDO_ProcessMgmtBindReq?relay
       6  ??ZDO_ProcessMgmtDirectJoinReq?relay
       6  ??ZDO_ProcessMgmtLeaveReq?relay
       6  ??ZDO_ProcessMgmtLqiReq?relay
       6  ??ZDO_ProcessMgmtNwkDiscReq?relay
       6  ??ZDO_ProcessMgmtPermitJoinReq?relay
       6  ??ZDO_ProcessMgmtRtgReq?relay
       6  ??ZDO_ProcessNodeDescReq?relay
       6  ??ZDO_ProcessPowerDescReq?relay
       6  ??ZDO_ProcessServerDiscReq?relay
       6  ??ZDO_ProcessSimpleDescReq?relay
       6  ??ZDO_ProcessUserDescReq?relay
       6  ??ZDO_ProcessUserDescSet?relay
       6  ??ZDO_RemoveEndDeviceBind?relay
       6  ??ZDO_RemoveMatchMemory?relay
       6  ??ZDO_SendEDBindRsp?relay
       6  ??ZDO_StartDevice?relay
       6  ??ZDO_UpdateAddrManager?relay
       6  ??ZDO_UpdateNwkStatus?relay
       6  ??zdoSendStateChangeMsg?relay
       3  NLME_PermitJoiningTimeout
    1204  ZDMatchSendState
      52  ZDOBuildBuf
      32  ZDODeviceSetup
     150  ZDO_AnyClusterMatches
     513  ZDO_BuildSimpleDescBuf
     214  ZDO_CompareClusterLists
     105  ZDO_ConvertOTAClusters
     513  ZDO_CopyMatchInfo
       2  ZDO_EDBind
      21  ZDO_EndDeviceBindMatchTimeoutCB
      93  ZDO_EndDeviceTimeoutCB
      35  ZDO_Init
    1209  ZDO_MatchEndDeviceBind
     401  ZDO_ParseAddrRsp
     276  ZDO_ParseBindUnbindReq
     131  ZDO_ParseDeviceAnnce
     235  ZDO_ParseEPListRsp
     621  ZDO_ParseEndDeviceBindReq
     551  ZDO_ParseMgmNwkDiscRsp
     563  ZDO_ParseMgmtBindRsp
     427  ZDO_ParseMgmtLqiRsp
     531  ZDO_ParseMgmtNwkUpdateNotify
     255  ZDO_ParseMgmtNwkUpdateReq
     410  ZDO_ParseMgmtRtgRsp
     624  ZDO_ParseNodeDescRsp
     385  ZDO_ParsePowerDescRsp
     101  ZDO_ParseServerDiscRsp
     686  ZDO_ParseSimpleDescBuf
     143  ZDO_ParseSimpleDescRsp
     236  ZDO_ParseUserDescRsp
     211  ZDO_ProcessActiveEPReq
     573  ZDO_ProcessBindUnbindReq
     525  ZDO_ProcessDeviceAnnce
    1825  ZDO_ProcessMatchDescReq
     398  ZDO_ProcessMgmtBindReq
     147  ZDO_ProcessMgmtDirectJoinReq
     230  ZDO_ProcessMgmtLeaveReq
    1121  ZDO_ProcessMgmtLqiReq
     192  ZDO_ProcessMgmtNwkDiscReq
     157  ZDO_ProcessMgmtPermitJoinReq
     401  ZDO_ProcessMgmtRtgReq
     180  ZDO_ProcessNodeDescReq
     180  ZDO_ProcessPowerDescReq
     145  ZDO_ProcessServerDiscReq
     267  ZDO_ProcessSimpleDescReq
     246  ZDO_ProcessUserDescReq
     400  ZDO_ProcessUserDescSet
     146  ZDO_RemoveEndDeviceBind
     353  ZDO_RemoveMatchMemory
     103  ZDO_SendEDBindRsp
     391  ZDO_StartDevice
      71  ZDO_UpdateAddrManager
     107  ZDO_UpdateNwkStatus
       4  apsChannelMask
       1  discRetries
       2  matchED
       1  scanCnt
     135  zdoSendStateChangeMsg

 
 19 172 bytes in segment BANKED_CODE
    318 bytes in segment BANK_RELAYS
     62 bytes in segment XDATA_Z
 
 19 490 bytes of CODE  memory
     62 bytes of XDATA memory

Errors: none
Warnings: none
