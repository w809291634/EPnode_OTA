###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:39
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mac\low_level\srf04\mac_radio.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mac\low_level\srf04\mac_radio.c"
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        XLAB -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\mac_radio.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\mac_radio.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mac\low_level\srf04\mac_radio.c
      1          /**************************************************************************************************
      2            Filename:       mac_radio.c
      3            Revised:        $Date: 2007-09-11 10:58:41 -0700 (Tue, 11 Sep 2007) $
      4            Revision:       $Revision: 15371 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          
     45          /* hal */
     46          #include "hal_types.h"
     47          
     48          /* high-level */
     49          #include "mac_pib.h"
     50          
     51          /* exported low-level */
     52          #include "mac_low_level.h"
     53          
     54          /* low-level specific */
     55          #include "mac_radio.h"
     56          #include "mac_tx.h"
     57          #include "mac_rx.h"
     58          #include "mac_rx_onoff.h"
     59          #include "mac_sleep.h"
     60          #include "mac_backoff_timer.h"
     61          
     62          /* target specific */
     63          #include "mac_radio_defs.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     64          
     65          /* debug */
     66          #include "mac_assert.h"
     67          
     68          
     69          /* ------------------------------------------------------------------------------------------------
     70           *                                          Includes
     71           * ------------------------------------------------------------------------------------------------
     72           */
     73          #define ED_RF_POWER_MIN_DBM   (MAC_RADIO_RECEIVER_SENSITIVITY_DBM + MAC_SPEC_ED_MIN_DBM_ABOVE_RECEIVER_SENSITIVITY)
     74          #define ED_RF_POWER_MAX_DBM   MAC_RADIO_RECEIVER_SATURATION_DBM
     75          
     76          
     77          /* ------------------------------------------------------------------------------------------------
     78           *                                        Global Variables
     79           * ------------------------------------------------------------------------------------------------
     80           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     81          uint8 macPhyTxPower;
   \                     macPhyTxPower:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     82          uint8 macPhyChannel;
   \                     macPhyChannel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     83          
     84          
     85          /* ------------------------------------------------------------------------------------------------
     86           *                                        Local Variables
     87           * ------------------------------------------------------------------------------------------------
     88           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          static uint8 reqChannel;
   \                     reqChannel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     90          static uint8 reqTxPower;
   \                     reqTxPower:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     91          
     92          
     93          /* ------------------------------------------------------------------------------------------------
     94           *                                        Local Functions
     95           * ------------------------------------------------------------------------------------------------
     96           */
     97          static uint8 radioComputeED(int8 rssiDbm);
     98          
     99          
    100          /**************************************************************************************************
    101           * @fn          macRadioInit
    102           *
    103           * @brief       Initialize radio software.
    104           *
    105           * @param       none
    106           *
    107           * @return      none
    108           **************************************************************************************************
    109           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    110          MAC_INTERNAL_API void macRadioInit(void)
   \                     macRadioInit:
    111          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    112            /* variable initialization for this module */
    113            reqChannel    = MAC_RADIO_CHANNEL_DEFAULT;
   \   000004   90....       MOV     DPTR,#reqChannel
   \   000007   740B         MOV     A,#0xb
   \   000009   F0           MOVX    @DPTR,A
    114            macPhyChannel = MAC_RADIO_CHANNEL_DEFAULT;
   \   00000A   90....       MOV     DPTR,#macPhyChannel
   \   00000D   740B         MOV     A,#0xb
   \   00000F   F0           MOVX    @DPTR,A
    115            reqTxPower    = MAC_RADIO_TX_POWER_INVALID;
   \   000010   90....       MOV     DPTR,#reqTxPower
   \   000013   74FF         MOV     A,#-0x1
   \   000015   F0           MOVX    @DPTR,A
    116            macPhyTxPower = MAC_RADIO_TX_POWER_INVALID;
   \   000016   90....       MOV     DPTR,#macPhyTxPower
   \   000019   74FF         MOV     A,#-0x1
   \   00001B   F0           MOVX    @DPTR,A
    117          }
   \   00001C   D083         POP     DPH
   \   00001E   D082         POP     DPL
   \   000020   02....       LJMP    ?BRET
    118          
    119          
    120          /**************************************************************************************************
    121           * @fn          macRadioReset
    122           *
    123           * @brief       Resets the radio module.
    124           *
    125           * @param       none
    126           *
    127           * @return      none
    128           **************************************************************************************************
    129           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    130          MAC_INTERNAL_API void macRadioReset(void)
   \                     macRadioReset:
    131          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    132            macRadioStopScan();
   \   000004                ; Setup parameters for call to function macRadioStopScan
   \   000004   12....       LCALL   ??macRadioStopScan?relay; Banked call to: macRadioStopScan
    133            macRadioEnergyDetectStop();
   \   000007                ; Setup parameters for call to function macRadioEnergyDetectStop
   \   000007   12....       LCALL   ??macRadioEnergyDetectStop?relay; Banked call to: macRadioEnergyDetectStop
   \   00000A   E9           MOV     A,R1
    134          }
   \   00000B   D083         POP     DPH
   \   00000D   D082         POP     DPL
   \   00000F   02....       LJMP    ?BRET
    135          
    136          
    137          /**************************************************************************************************
    138           * @fn          macRadioRandomByte
    139           *
    140           * @brief       Return a random byte derived from previously set random seed.
    141           *
    142           * @param       none
    143           *
    144           * @return      a random byte
    145           **************************************************************************************************
    146           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    147          MAC_INTERNAL_API uint8 macRadioRandomByte(void)
   \                     macRadioRandomByte:
    148          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    149            return(MAC_RADIO_RANDOM_BYTE());
   \   000004                ; Setup parameters for call to function macMcuRandomByte
   \   000004   12....       LCALL   ??macMcuRandomByte?relay; Banked call to: macMcuRandomByte
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    150          }
    151          
    152          
    153          /**************************************************************************************************
    154           * @fn          macRadioSetPanCoordinator
    155           *
    156           * @brief       Configure the pan coordinator status of the radio
    157           *
    158           * @param       panCoordFlag - non-zero to configure radio to be pan coordinator
    159           *                             zero to configure radio as NON pan coordinator
    160           *
    161           * @return      none
    162           **************************************************************************************************
    163           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    164          MAC_INTERNAL_API void macRadioSetPanCoordinator(uint8 panCoordFlag)
   \                     macRadioSetPanCoordinator:
    165          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    166            /* abstracted radio configuration */
    167            MAC_RADIO_SET_PAN_COORDINATOR(panCoordFlag);
   \   000005   906180       MOV     DPTR,#0x6180
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   E9           MOV     A,R1
   \   00000B   6004         JZ      ??macRadioSetPanCoordinator_0
   \   00000D   D2..         SETB    ?VB.0
   \   00000F   8002         SJMP    ??macRadioSetPanCoordinator_1
   \                     ??macRadioSetPanCoordinator_0:
   \   000011   C2..         CLR     ?VB.0
   \                     ??macRadioSetPanCoordinator_1:
   \   000013   75F002       MOV     B,#0x2
   \   000016   A2..         MOV     C,?VB.0
   \   000018   E4           CLR     A
   \   000019   33           RLC     A
   \   00001A   A4           MUL     AB
   \   00001B   FA           MOV     R2,A
   \   00001C   74FD         MOV     A,#-0x3
   \   00001E   58           ANL     A,R0
   \   00001F   4A           ORL     A,R2
   \   000020   906180       MOV     DPTR,#0x6180
   \   000023   F0           MOVX    @DPTR,A
    168          }
   \   000024   7F01         MOV     R7,#0x1
   \   000026   02....       LJMP    ?BANKED_LEAVE_XDATA
    169          
    170          
    171          /**************************************************************************************************
    172           * @fn          macRadioSetPanID
    173           *
    174           * @brief       Set the pan ID on the radio.
    175           *
    176           * @param       panID - 16 bit PAN identifier
    177           *
    178           * @return      none
    179           **************************************************************************************************
    180           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    181          void macRadioSetPanID(uint16 panID)
   \                     macRadioSetPanID:
    182          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    183            /* abstracted radio configuration */
    184            MAC_RADIO_SET_PAN_ID(panID);
   \   000004   EA           MOV     A,R2
   \   000005   906172       MOV     DPTR,#0x6172
   \   000008   F0           MOVX    @DPTR,A
   \   000009   EA           MOV     A,R2
   \   00000A   F8           MOV     R0,A
   \   00000B   EB           MOV     A,R3
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   C9           XCH     A,R1
   \   00000F   F8           MOV     R0,A
   \   000010   E8           MOV     A,R0
   \   000011   906173       MOV     DPTR,#0x6173
   \   000014   F0           MOVX    @DPTR,A
    185          }
   \   000015   D083         POP     DPH
   \   000017   D082         POP     DPL
   \   000019   02....       LJMP    ?BRET
    186          
    187          
    188          /**************************************************************************************************
    189           * @fn          macRadioSetShortAddr
    190           *
    191           * @brief       Set the short addrss on the radio.
    192           *
    193           * @param       shortAddr - 16 bit short address
    194           *
    195           * @return      none
    196           **************************************************************************************************
    197           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    198          MAC_INTERNAL_API void macRadioSetShortAddr(uint16 shortAddr)
   \                     macRadioSetShortAddr:
    199          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    200            /* abstracted radio configuration */
    201            MAC_RADIO_SET_SHORT_ADDR(shortAddr);
   \   000004   EA           MOV     A,R2
   \   000005   906174       MOV     DPTR,#0x6174
   \   000008   F0           MOVX    @DPTR,A
   \   000009   EA           MOV     A,R2
   \   00000A   F8           MOV     R0,A
   \   00000B   EB           MOV     A,R3
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   C9           XCH     A,R1
   \   00000F   F8           MOV     R0,A
   \   000010   E8           MOV     A,R0
   \   000011   906175       MOV     DPTR,#0x6175
   \   000014   F0           MOVX    @DPTR,A
    202          }
   \   000015   D083         POP     DPH
   \   000017   D082         POP     DPL
   \   000019   02....       LJMP    ?BRET
    203          
    204          
    205          /**************************************************************************************************
    206           * @fn          macRadioSetIEEEAddr
    207           *
    208           * @brief       Set the IEEE address on the radio.
    209           *
    210           * @param       pIEEEAddr - pointer to array holding 64 bit IEEE address; array must be little
    211           *                          endian format (starts with lowest signficant byte)
    212           *
    213           * @return      none
    214           **************************************************************************************************
    215           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    216          MAC_INTERNAL_API void macRadioSetIEEEAddr(uint8 * pIEEEAddr)
   \                     macRadioSetIEEEAddr:
    217          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    218            /* abstracted radio configuration */
    219            MAC_RADIO_SET_IEEE_ADDR(pIEEEAddr);
   \   000009                ; Setup parameters for call to function macMemWriteRam
   \   000009   7908         MOV     R1,#0x8
   \   00000B   EE           MOV     A,R6
   \   00000C   FC           MOV     R4,A
   \   00000D   EF           MOV     A,R7
   \   00000E   FD           MOV     R5,A
   \   00000F   7A6A         MOV     R2,#0x6a
   \   000011   7B61         MOV     R3,#0x61
   \   000013   12....       LCALL   ??macMemWriteRam?relay; Banked call to: macMemWriteRam
    220          }
   \   000016   7F01         MOV     R7,#0x1
   \   000018   02....       LJMP    ?BANKED_LEAVE_XDATA
    221          
    222          
    223          /**************************************************************************************************
    224           * @fn          macRadioSetTxPower
    225           *
    226           * @brief       Set transmitter power of the radio.
    227           *
    228           * @param       txPower - the minus dBm for power but as a postive integer (or if configured
    229           *                        for it, txPower is the raw register value). If PA/LNA is installed
    230           *                        then txPower becomes positive dBm.
    231           *
    232           * @return      none
    233           **************************************************************************************************
    234           */
    235          #ifndef HAL_MAC_USE_REGISTER_POWER_VALUES
    236          /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    237          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    238          MAC_INTERNAL_API void macRadioSetTxPower(uint8 txPower)
   \                     macRadioSetTxPower:
    239          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    240            halIntState_t  s;
    241          #if defined MAC_RUNTIME_CC2591 || defined MAC_RUNTIME_CC2590
    242            const uint8 CODE *pTable = macRadioDefsTxPwrTables[macRadioDefsRefTableId >> 4];
    243          #elif defined HAL_PA_LNA || defined HAL_PA_LNA_CC2590
    244            const uint8 CODE *pTable = macRadioDefsTxPwrTables[0];
    245          #else
    246            const uint8 CODE *pTable = macRadioDefsTxPwrBare;
   \   000007   7E..         MOV     R6,#macRadioDefsTxPwrBare & 0xff
   \   000009   7F..         MOV     R7,#(macRadioDefsTxPwrBare >> 8) & 0xff
    247          #endif
    248          
    249            /* if the selected dBm is out of range, use the closest available */
    250            if ((int8)txPower > (int8)pTable[MAC_RADIO_DEFS_TBL_TXPWR_FIRST_ENTRY])
   \   00000B   8E82         MOV     DPL,R6
   \   00000D   8F83         MOV     DPH,R7
   \   00000F   E4           CLR     A
   \   000010   93           MOVC    A,@A+DPTR
   \   000011   C3           CLR     C
   \   000012   95..         SUBB    A,?V0
   \   000014   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000016   65D0         XRL     A,PSW
   \   000018   33           RLC     A
   \   000019   500A         JNC     ??macRadioSetTxPower_0
    251            {
    252              /* greater than base value -- out of table range */
    253              txPower = pTable[MAC_RADIO_DEFS_TBL_TXPWR_FIRST_ENTRY];
   \   00001B   8E82         MOV     DPL,R6
   \   00001D   8F83         MOV     DPH,R7
   \   00001F   E4           CLR     A
   \   000020   93           MOVC    A,@A+DPTR
   \   000021   F5..         MOV     ?V0,A
   \   000023   801C         SJMP    ??macRadioSetTxPower_1
    254            }
    255            else if ((int8)txPower < (int8)pTable[MAC_RADIO_DEFS_TBL_TXPWR_LAST_ENTRY])
   \                     ??macRadioSetTxPower_0:
   \   000025   8E82         MOV     DPL,R6
   \   000027   8F83         MOV     DPH,R7
   \   000029   A3           INC     DPTR
   \   00002A   E4           CLR     A
   \   00002B   93           MOVC    A,@A+DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   E5..         MOV     A,?V0
   \   00002F   C3           CLR     C
   \   000030   98           SUBB    A,R0
   \   000031   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000033   65D0         XRL     A,PSW
   \   000035   33           RLC     A
   \   000036   5009         JNC     ??macRadioSetTxPower_1
    256            {
    257              /* smaller than the lowest power level -- out of table range */
    258              txPower = pTable[MAC_RADIO_DEFS_TBL_TXPWR_LAST_ENTRY];
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   A3           INC     DPTR
   \   00003D   E4           CLR     A
   \   00003E   93           MOVC    A,@A+DPTR
   \   00003F   F5..         MOV     ?V0,A
    259            }
    260          
    261            /*
    262             *  Set the global variable reqTxPower.  This variable is referenced
    263             *  by the function macRadioUpdateTxPower() to write the radio register.
    264             *
    265             *  A lookup table is used to translate the power level to the register
    266             *  value.
    267             */
    268            HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macRadioSetTxPower_1:
   \   000041   A2AF         MOV     C,0xa8.7
   \   000043   E4           CLR     A
   \   000044   33           RLC     A
   \   000045   F5..         MOV     ?V1,A
   \   000047   C2AF         CLR     0xa8.7
    269            /* When calculating index to the power register value table,
    270             * either txPower (of uint8 type) has to be explicitly type-casted to int8
    271             * or the subtraction expression has to be type-casted to uint8 to work
    272             * with the integral promotions.
    273             * The latter is more code size efficient and hence the latter is used.
    274             */
    275            {
    276              uint8 index = pTable[MAC_RADIO_DEFS_TBL_TXPWR_FIRST_ENTRY] - txPower
    277                + MAC_RADIO_DEFS_TBL_TXPWR_ENTRIES;
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   E4           CLR     A
   \   00004E   93           MOVC    A,@A+DPTR
   \   00004F   C3           CLR     C
   \   000050   95..         SUBB    A,?V0
   \   000052   2402         ADD     A,#0x2
   \   000054   F8           MOV     R0,A
    278              reqTxPower = pTable[index];
   \   000055   7900         MOV     R1,#0x0
   \   000057   EE           MOV     A,R6
   \   000058   28           ADD     A,R0
   \   000059   F582         MOV     DPL,A
   \   00005B   EF           MOV     A,R7
   \   00005C   39           ADDC    A,R1
   \   00005D   F583         MOV     DPH,A
   \   00005F   E4           CLR     A
   \   000060   93           MOVC    A,@A+DPTR
   \   000061   90....       MOV     DPTR,#reqTxPower
   \   000064   F0           MOVX    @DPTR,A
    279            }
    280            HAL_EXIT_CRITICAL_SECTION(s);
   \   000065   85....       MOV     ?V2,?V1
   \   000068   E5..         MOV     A,?V1
   \   00006A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00006C   92AF         MOV     0xa8.7,C
    281          
    282            /* update the radio power setting */
    283            macRadioUpdateTxPower();
   \   00006E                ; Setup parameters for call to function macRadioUpdateTxPower
   \   00006E   12....       LCALL   ??macRadioUpdateTxPower?relay; Banked call to: macRadioUpdateTxPower
    284          }
   \   000071   7F03         MOV     R7,#0x3
   \   000073   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000076                REQUIRE _A_IEN0
    285          
    286          #else
    287          /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    288          
    289          MAC_INTERNAL_API void macRadioSetTxPower(uint8 txPower)
    290          {
    291            halIntState_t  s;
    292          
    293            /* same as above but with no lookup table, use raw register value */
    294            HAL_ENTER_CRITICAL_SECTION(s);
    295            reqTxPower = txPower;
    296            HAL_EXIT_CRITICAL_SECTION(s);
    297          
    298            /* update the radio power setting */
    299            macRadioUpdateTxPower();
    300          }
    301          
    302          #endif
    303          
    304          
    305          /**************************************************************************************************
    306           * @fn          macRadioUpdateTxPower
    307           *
    308           * @brief       Update the radio's transmit power if a new power level has been requested
    309           *
    310           * @param       reqTxPower - file scope variable that holds the last request power level
    311           *              macPhyTxPower - global variable that holds radio's set power level
    312           *
    313           * @return      none
    314           **************************************************************************************************
    315           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    316          MAC_INTERNAL_API void macRadioUpdateTxPower(void)
   \                     macRadioUpdateTxPower:
    317          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    318            halIntState_t  s;
    319          
    320            /*
    321             *  If the requested power setting is different from the actual radio setting,
    322             *  attempt to udpate to the new power setting.
    323             */
    324            HAL_ENTER_CRITICAL_SECTION(s);
   \   000004   A2AF         MOV     C,0xa8.7
   \   000006   E4           CLR     A
   \   000007   33           RLC     A
   \   000008   F8           MOV     R0,A
   \   000009   C2AF         CLR     0xa8.7
    325            if (reqTxPower != macPhyTxPower)
   \   00000B   90....       MOV     DPTR,#reqTxPower
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   \   000010   90....       MOV     DPTR,#macPhyTxPower
   \   000013   E0           MOVX    A,@DPTR
   \   000014   69           XRL     A,R1
   \   000015   601E         JZ      ??macRadioUpdateTxPower_0
    326            {
    327              /*
    328               *  Radio power cannot be updated when the radio is physically transmitting.
    329               *  If there is a possibility radio is transmitting, do not change the power
    330               *  setting.  This function will be called again after the current transmit
    331               *  completes.
    332               */
    333              if (!macRxOutgoingAckFlag && !MAC_TX_IS_PHYSICALLY_ACTIVE())
   \   000017   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   7018         JNZ     ??macRadioUpdateTxPower_0
   \   00001D   90....       MOV     DPTR,#macTxActive
   \   000020   E0           MOVX    A,@DPTR
   \   000021   A2E7         MOV     C,0xE0 /* A   */.7
   \   000023   4010         JC      ??macRadioUpdateTxPower_0
    334              {
    335                /*
    336                 *  Set new power level;  update the shadow value and write
    337                 *  the new value to the radio hardware.
    338                 */
    339                macPhyTxPower = reqTxPower;
   \   000025   90....       MOV     DPTR,#reqTxPower
   \   000028   E0           MOVX    A,@DPTR
   \   000029   90....       MOV     DPTR,#macPhyTxPower
   \   00002C   F0           MOVX    @DPTR,A
    340                MAC_RADIO_SET_TX_POWER(macPhyTxPower);
   \   00002D   90....       MOV     DPTR,#macPhyTxPower
   \   000030   E0           MOVX    A,@DPTR
   \   000031   906190       MOV     DPTR,#0x6190
   \   000034   F0           MOVX    @DPTR,A
    341              }
    342            }
    343            HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macRadioUpdateTxPower_0:
   \   000035   E8           MOV     A,R0
   \   000036   F9           MOV     R1,A
   \   000037   E8           MOV     A,R0
   \   000038   A2E0         MOV     C,0xE0 /* A   */.0
   \   00003A   92AF         MOV     0xa8.7,C
    344          }
   \   00003C   D083         POP     DPH
   \   00003E   D082         POP     DPL
   \   000040   02....       LJMP    ?BRET
   \   000043                REQUIRE _A_IEN0
    345          
    346          
    347          /**************************************************************************************************
    348           * @fn          macRadioSetChannel
    349           *
    350           * @brief       Set radio channel.
    351           *
    352           * @param       channel - channel number, valid range is 11 through 26. Allow
    353           *              channels 27 and 28 for some Japanese customers.
    354           *
    355           * @return      none
    356           **************************************************************************************************
    357           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    358          MAC_INTERNAL_API void macRadioSetChannel(uint8 channel)
   \                     macRadioSetChannel:
    359          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    360            halIntState_t  s;
    361          
    362            MAC_ASSERT((channel >= 11) && (channel <= 28));  /* illegal channel */
   \   000007   EF           MOV     A,R7
   \   000008   C3           CLR     C
   \   000009   940B         SUBB    A,#0xb
   \   00000B   4006         JC      ??macRadioSetChannel_0
   \   00000D   EF           MOV     A,R7
   \   00000E   C3           CLR     C
   \   00000F   941D         SUBB    A,#0x1d
   \   000011   4003         JC      ??macRadioSetChannel_1
   \                     ??macRadioSetChannel_0:
   \   000013                ; Setup parameters for call to function halAssertHandler
   \   000013   12....       LCALL   ??halAssertHandler?relay; Banked call to: halAssertHandler
    363          
    364            /* critical section to make sure transmit does not start while updating channel */
    365            HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macRadioSetChannel_1:
   \   000016   A2AF         MOV     C,0xa8.7
   \   000018   E4           CLR     A
   \   000019   33           RLC     A
   \   00001A   FE           MOV     R6,A
   \   00001B   C2AF         CLR     0xa8.7
    366          
    367            /* set requested channel */
    368            reqChannel = channel;
   \   00001D   EF           MOV     A,R7
   \   00001E   90....       MOV     DPTR,#reqChannel
   \   000021   F0           MOVX    @DPTR,A
    369          
    370            /*
    371             *  If transmit is not active, update the radio hardware immediately.  If transmit is active,
    372             *  the channel will be updated at the end of the current transmit.
    373             */
    374            if (!macTxActive)
   \   000022   90....       MOV     DPTR,#macTxActive
   \   000025   E0           MOVX    A,@DPTR
   \   000026   7003         JNZ     ??macRadioSetChannel_2
    375            {
    376              macRadioUpdateChannel();
   \   000028                ; Setup parameters for call to function macRadioUpdateChannel
   \   000028   12....       LCALL   ??macRadioUpdateChannel?relay; Banked call to: macRadioUpdateChannel
    377            }
    378          
    379            HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macRadioSetChannel_2:
   \   00002B   EE           MOV     A,R6
   \   00002C   F8           MOV     R0,A
   \   00002D   EE           MOV     A,R6
   \   00002E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000030   92AF         MOV     0xa8.7,C
    380          }
   \   000032   7F01         MOV     R7,#0x1
   \   000034   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000037                REQUIRE _A_IEN0
    381          
    382          
    383          /**************************************************************************************************
    384           * @fn          macRadioUpdateChannel
    385           *
    386           * @brief       Update the radio channel if a new channel has been requested.
    387           *
    388           * @param       none
    389           *
    390           * @return      none
    391           **************************************************************************************************
    392           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    393          MAC_INTERNAL_API void macRadioUpdateChannel(void)
   \                     macRadioUpdateChannel:
    394          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    395            halIntState_t  s;
    396          
    397            MAC_ASSERT(!macTxActive); /* cannot change channel during a transmit */
   \   000005   90....       MOV     DPTR,#macTxActive
   \   000008   E0           MOVX    A,@DPTR
   \   000009   6003         JZ      ??macRadioUpdateChannel_0
   \   00000B                ; Setup parameters for call to function halAssertHandler
   \   00000B   12....       LCALL   ??halAssertHandler?relay; Banked call to: halAssertHandler
    398          
    399            /* if the channel has changed, set the radio to the new channel */
    400            HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macRadioUpdateChannel_0:
   \   00000E   A2AF         MOV     C,0xa8.7
   \   000010   E4           CLR     A
   \   000011   33           RLC     A
   \   000012   FE           MOV     R6,A
   \   000013   C2AF         CLR     0xa8.7
    401            if (reqChannel != macPhyChannel)
   \   000015   90....       MOV     DPTR,#reqChannel
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   90....       MOV     DPTR,#macPhyChannel
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   68           XRL     A,R0
   \   00001F   6028         JZ      ??macRadioUpdateChannel_1
    402            {
    403              macPhyChannel = reqChannel;
   \   000021   90....       MOV     DPTR,#reqChannel
   \   000024   E0           MOVX    A,@DPTR
   \   000025   90....       MOV     DPTR,#macPhyChannel
   \   000028   F0           MOVX    @DPTR,A
    404              HAL_EXIT_CRITICAL_SECTION(s);
   \   000029   EE           MOV     A,R6
   \   00002A   FF           MOV     R7,A
   \   00002B   EE           MOV     A,R6
   \   00002C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00002E   92AF         MOV     0xa8.7,C
    405          
    406              /* changing the channel stops any receive in progress */
    407              macRxOff();
   \   000030                ; Setup parameters for call to function macRxOff
   \   000030   12....       LCALL   ??macRxOff?relay     ; Banked call to: macRxOff
    408              MAC_RADIO_SET_CHANNEL(macPhyChannel);
   \   000033   75F005       MOV     B,#0x5
   \   000036   90....       MOV     DPTR,#macPhyChannel
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   A4           MUL     AB
   \   00003B   24D4         ADD     A,#-0x2c
   \   00003D   90618F       MOV     DPTR,#0x618f
   \   000040   F0           MOVX    @DPTR,A
    409          
    410              /* If the channel is updated in the middle of receiving a frame, we must
    411               * clean up the Rx logic.
    412               */
    413              macRxHaltCleanup();
   \   000041                ; Setup parameters for call to function macRxHaltCleanup
   \   000041   12....       LCALL   ??macRxHaltCleanup?relay; Banked call to: macRxHaltCleanup
    414          
    415              macRxOnRequest();
   \   000044                ; Setup parameters for call to function macRxOnRequest
   \   000044   12....       LCALL   ??macRxOnRequest?relay; Banked call to: macRxOnRequest
   \   000047   8007         SJMP    ??macRadioUpdateChannel_2
    416            }
    417            else
    418            {
    419              HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macRadioUpdateChannel_1:
   \   000049   EE           MOV     A,R6
   \   00004A   F8           MOV     R0,A
   \   00004B   EE           MOV     A,R6
   \   00004C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00004E   92AF         MOV     0xa8.7,C
    420            }
    421          }
   \                     ??macRadioUpdateChannel_2:
   \   000050   7F01         MOV     R7,#0x1
   \   000052   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000055                REQUIRE _A_IEN0
    422          
    423          
    424          /**************************************************************************************************
    425           * @fn          macRadioStartScan
    426           *
    427           * @brief       Puts radio into selected scan mode.
    428           *
    429           * @param       scanMode - scan mode, see #defines in .h file
    430           *
    431           * @return      none
    432           **************************************************************************************************
    433           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    434          MAC_INTERNAL_API void macRadioStartScan(uint8 scanMode)
   \                     macRadioStartScan:
    435          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    436            MAC_ASSERT(macSleepState == MAC_SLEEP_STATE_AWAKE); /* radio must be awake */
   \   000007   90....       MOV     DPTR,#macSleepState
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6003         JZ      ??macRadioStartScan_0
   \   00000D                ; Setup parameters for call to function halAssertHandler
   \   00000D   12....       LCALL   ??halAssertHandler?relay; Banked call to: halAssertHandler
    437            MAC_ASSERT(macRxFilter == RX_FILTER_OFF); /* all filtering must be off to start scan */
   \                     ??macRadioStartScan_0:
   \   000010   90....       MOV     DPTR,#macRxFilter
   \   000013   E0           MOVX    A,@DPTR
   \   000014   6003         JZ      ??macRadioStartScan_1
   \   000016                ; Setup parameters for call to function halAssertHandler
   \   000016   12....       LCALL   ??halAssertHandler?relay; Banked call to: halAssertHandler
    438          
    439            /* set the receive filter based on the selected scan mode */
    440            if (scanMode == MAC_SCAN_ED)
   \                     ??macRadioStartScan_1:
   \   000019   EE           MOV     A,R6
   \   00001A   7008         JNZ     ??macRadioStartScan_2
    441            {
    442              macRxFilter = RX_FILTER_ALL;
   \   00001C   90....       MOV     DPTR,#macRxFilter
   \   00001F   7401         MOV     A,#0x1
   \   000021   F0           MOVX    @DPTR,A
   \   000022   802C         SJMP    ??macRadioStartScan_3
    443            }
    444            else if (scanMode == MAC_SCAN_ORPHAN)
   \                     ??macRadioStartScan_2:
   \   000024   7403         MOV     A,#0x3
   \   000026   6E           XRL     A,R6
   \   000027   7008         JNZ     ??macRadioStartScan_4
    445            {
    446              macRxFilter = RX_FILTER_NON_COMMAND_FRAMES;
   \   000029   90....       MOV     DPTR,#macRxFilter
   \   00002C   7403         MOV     A,#0x3
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   801F         SJMP    ??macRadioStartScan_3
    447            }
    448            else
    449            {
    450              MAC_ASSERT((scanMode == MAC_SCAN_ACTIVE) || (scanMode == MAC_SCAN_PASSIVE)); /* invalid scan type */
   \                     ??macRadioStartScan_4:
   \   000031   7401         MOV     A,#0x1
   \   000033   6E           XRL     A,R6
   \   000034   6008         JZ      ??macRadioStartScan_5
   \   000036   7402         MOV     A,#0x2
   \   000038   6E           XRL     A,R6
   \   000039   6003         JZ      ??macRadioStartScan_5
   \   00003B                ; Setup parameters for call to function halAssertHandler
   \   00003B   12....       LCALL   ??halAssertHandler?relay; Banked call to: halAssertHandler
    451              macRxFilter = RX_FILTER_NON_BEACON_FRAMES;
   \                     ??macRadioStartScan_5:
   \   00003E   90....       MOV     DPTR,#macRxFilter
   \   000041   7402         MOV     A,#0x2
   \   000043   F0           MOVX    @DPTR,A
    452          
    453              /* for active and passive scans, per spec the pan ID must be 0xFFFF */
    454              MAC_RADIO_SET_PAN_ID(0xFFFF);
   \   000044   906172       MOV     DPTR,#0x6172
   \   000047   74FF         MOV     A,#-0x1
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   906173       MOV     DPTR,#0x6173
   \   00004D   74FF         MOV     A,#-0x1
   \   00004F   F0           MOVX    @DPTR,A
    455            }
    456          }
   \                     ??macRadioStartScan_3:
   \   000050   7F01         MOV     R7,#0x1
   \   000052   02....       LJMP    ?BANKED_LEAVE_XDATA
    457          
    458          
    459          /**************************************************************************************************
    460           * @fn          macRadioStopScan
    461           *
    462           * @brief       Takes radio out of scan mode.  Note can be called if
    463           *
    464           * @param       none
    465           *
    466           * @return      none
    467           **************************************************************************************************
    468           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    469          MAC_INTERNAL_API void macRadioStopScan(void)
   \                     macRadioStopScan:
    470          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    471            macRxFilter = RX_FILTER_OFF;
   \   000004   90....       MOV     DPTR,#macRxFilter
   \   000007   7400         MOV     A,#0x0
   \   000009   F0           MOVX    @DPTR,A
    472          
    473            /* restore the pan ID (passive and active scans set pan ID to 0xFFFF) */
    474            MAC_RADIO_SET_PAN_ID(macPib.panId);
   \   00000A   90....       MOV     DPTR,#macPib + 29
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   E8           MOV     A,R0
   \   000013   906172       MOV     DPTR,#0x6172
   \   000016   F0           MOVX    @DPTR,A
   \   000017   90....       MOV     DPTR,#macPib + 29
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F8           MOV     R0,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F9           MOV     R1,A
   \   00001F   E4           CLR     A
   \   000020   C9           XCH     A,R1
   \   000021   F8           MOV     R0,A
   \   000022   E8           MOV     A,R0
   \   000023   906173       MOV     DPTR,#0x6173
   \   000026   F0           MOVX    @DPTR,A
    475          }
   \   000027   D083         POP     DPH
   \   000029   D082         POP     DPL
   \   00002B   02....       LJMP    ?BRET
    476          
    477          
    478          /**************************************************************************************************
    479           * @fn          macRadioEnergyDetectStart
    480           *
    481           * @brief       Initiates energy detect.  The highest energy detected is recorded from the time
    482           *              when this function is called until the energy detect is stopped.
    483           *
    484           * @param       none
    485           *
    486           * @return      none
    487           **************************************************************************************************
    488           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    489          void macRadioEnergyDetectStart(void)
   \                     macRadioEnergyDetectStart:
    490          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    491            /* Energy Detection Scan should be run with CC2591 compresson workaround off */
    492            COMPRESSION_WORKAROUND_OFF();
    493          
    494            MAC_RADIO_RECORD_MAX_RSSI_START();
   \   000004                ; Setup parameters for call to function macMcuRecordMaxRssiStart
   \   000004   12....       LCALL   ??macMcuRecordMaxRssiStart?relay; Banked call to: macMcuRecordMaxRssiStart
    495          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    496          
    497          
    498          /**************************************************************************************************
    499           * @fn          macRadioEnergyDetectStop
    500           *
    501           * @brief       Called at completion of an energy detect.  Note: can be called even if energy
    502           *              detect is already stopped (needed by reset).
    503           *
    504           * @param       none
    505           *
    506           * @return      highest energy detect measurement
    507           **************************************************************************************************
    508           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    509          uint8 macRadioEnergyDetectStop(void)
   \                     macRadioEnergyDetectStop:
    510          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    511            uint8 rssiDbm;
    512            uint8 energyDetectMeasurement;
    513          
    514            rssiDbm = MAC_RADIO_RECORD_MAX_RSSI_STOP() + MAC_RADIO_RSSI_OFFSET;
   \   000005                ; Setup parameters for call to function macMcuRecordMaxRssiStop
   \   000005   12....       LCALL   ??macMcuRecordMaxRssiStop?relay; Banked call to: macMcuRecordMaxRssiStop
   \   000008   E9           MOV     A,R1
   \   000009   24B7         ADD     A,#-0x49
   \   00000B   FF           MOV     R7,A
    515            MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
    516            energyDetectMeasurement = radioComputeED(rssiDbm);
   \   00000C                ; Setup parameters for call to function radioComputeED
   \   00000C   EF           MOV     A,R7
   \   00000D   F9           MOV     R1,A
   \   00000E   12....       LCALL   ??radioComputeED?relay; Banked call to: radioComputeED
   \   000011   E9           MOV     A,R1
   \   000012   FE           MOV     R6,A
    517          
    518            /* Trun on CC2591 compresson workaround */
    519            COMPRESSION_WORKAROUND_ON();
    520          
    521            return(energyDetectMeasurement);
   \   000013   EE           MOV     A,R6
   \   000014   F9           MOV     R1,A
   \   000015   7F01         MOV     R7,#0x1
   \   000017   02....       LJMP    ?BANKED_LEAVE_XDATA
    522          }
    523          
    524          /*=================================================================================================
    525           * @fn          radioComputeED
    526           *
    527           * @brief       Compute energy detect measurement.
    528           *
    529           * @param       rssi - raw RSSI value from radio hardware
    530           *
    531           * @return      energy detect measurement in the range of 0x00-0xFF
    532           *=================================================================================================
    533           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    534          static uint8 radioComputeED(int8 rssiDbm)
   \                     radioComputeED:
    535          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV     A,R1
   \   000001   FC           MOV     R4,A
    536            uint8 ed;
    537          
    538            /*
    539             *  Keep RF power between minimum and maximum values.
    540             *  This min/max range is derived from datasheet and specification.
    541             */
    542            if (rssiDbm < ED_RF_POWER_MIN_DBM)
   \   000002   EC           MOV     A,R4
   \   000003   C3           CLR     C
   \   000004   94A9         SUBB    A,#-0x57
   \   000006   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000008   65D0         XRL     A,PSW
   \   00000A   33           RLC     A
   \   00000B   5004         JNC     ??radioComputeED_0
    543            {
    544              rssiDbm = ED_RF_POWER_MIN_DBM;
   \   00000D   7CA9         MOV     R4,#-0x57
   \   00000F   800D         SJMP    ??radioComputeED_1
    545            }
    546            else if (rssiDbm > ED_RF_POWER_MAX_DBM)
   \                     ??radioComputeED_0:
   \   000011   EC           MOV     A,R4
   \   000012   C3           CLR     C
   \   000013   940B         SUBB    A,#0xb
   \   000015   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000017   65D0         XRL     A,PSW
   \   000019   33           RLC     A
   \   00001A   4002         JC      ??radioComputeED_1
    547            {
    548              rssiDbm = ED_RF_POWER_MAX_DBM;
   \   00001C   7C0A         MOV     R4,#0xa
    549            }
    550          
    551            /*
    552             *  Create energy detect measurement by normalizing and scaling RF power level.
    553             *
    554             *  Note : The division operation below is designed for maximum accuracy and
    555             *         best granularity.  This is done by grouping the math operations to
    556             *         compute the entire numerator before doing any division.
    557             */
    558            ed = (MAC_SPEC_ED_MAX * (rssiDbm - ED_RF_POWER_MIN_DBM)) / (ED_RF_POWER_MAX_DBM - ED_RF_POWER_MIN_DBM);
   \                     ??radioComputeED_1:
   \   00001E   EC           MOV     A,R4
   \   00001F   F8           MOV     R0,A
   \   000020   33           RLC     A
   \   000021   95E0         SUBB    A,0xE0 /* A   */
   \   000023   F9           MOV     R1,A
   \   000024   E8           MOV     A,R0
   \   000025   2457         ADD     A,#0x57
   \   000027   F8           MOV     R0,A
   \   000028   5001         JNC     ??radioComputeED_2
   \   00002A   09           INC     R1
   \                     ??radioComputeED_2:
   \   00002B   E8           MOV     A,R0
   \   00002C   75F0FF       MOV     B,#-0x1
   \   00002F   A4           MUL     AB
   \   000030   C8           XCH     A,R0
   \   000031   AAF0         MOV     R2,B
   \   000033   75F000       MOV     B,#0x0
   \   000036   A4           MUL     AB
   \   000037   2A           ADD     A,R2
   \   000038   FA           MOV     R2,A
   \   000039   75F0FF       MOV     B,#-0x1
   \   00003C   E9           MOV     A,R1
   \   00003D   A4           MUL     AB
   \   00003E   2A           ADD     A,R2
   \   00003F   F9           MOV     R1,A
   \   000040   7A61         MOV     R2,#0x61
   \   000042   7B00         MOV     R3,#0x0
   \   000044   12....       LCALL   ?S_DIV_MOD
   \   000047   E8           MOV     A,R0
   \   000048   FD           MOV     R5,A
    559          
    560            return(ed);
   \   000049   ED           MOV     A,R5
   \   00004A   F9           MOV     R1,A
   \   00004B   02....       LJMP    ?BRET
    561          }
    562          
    563          
    564          /**************************************************************************************************
    565           * @fn          macRadioComputeLQI
    566           *
    567           * @brief       Compute link quality indication.
    568           *
    569           * @param       rssi - raw RSSI value from radio hardware
    570           *              corr - correlation value from radio hardware
    571           *
    572           * @return      link quality indicator value
    573           **************************************************************************************************
    574           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    575          MAC_INTERNAL_API uint8 macRadioComputeLQI(int8 rssiDbm, uint8 corr)
   \                     macRadioComputeLQI:
    576          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    577            (void) corr; /* suppress compiler warning of unused parameter */
    578          
    579            /*
    580             *  Note : Currently the LQI value is simply the energy detect measurement.
    581             *         A more accurate value could be derived by using the correlation
    582             *         value along with the RSSI value.
    583             */
    584            return(radioComputeED(rssiDbm));
   \   000009                ; Setup parameters for call to function radioComputeED
   \   000009   EE           MOV     A,R6
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   ??radioComputeED?relay; Banked call to: radioComputeED
   \   00000E   7F01         MOV     R7,#0x1
   \   000010   02....       LJMP    ?BANKED_LEAVE_XDATA
    585          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRadioInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRadioReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRadioRandomByte?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioRandomByte

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRadioSetPanCoordinator?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioSetPanCoordinator

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRadioSetPanID?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioSetPanID

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRadioSetShortAddr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioSetShortAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRadioSetIEEEAddr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioSetIEEEAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRadioSetTxPower?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioSetTxPower

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRadioUpdateTxPower?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioUpdateTxPower

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRadioSetChannel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioSetChannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRadioUpdateChannel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioUpdateChannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRadioStartScan?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioStartScan

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRadioStopScan?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioStopScan

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRadioEnergyDetectStart?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioEnergyDetectStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRadioEnergyDetectStop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioEnergyDetectStop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??radioComputeED?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    radioComputeED

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRadioComputeLQI?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioComputeLQI
    586          
    587          
    588          /**************************************************************************************************
    589          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   macRadioComputeLQI
        0      9   -> radioComputeED
      2      0   macRadioEnergyDetectStart
        2      0   -> macMcuRecordMaxRssiStart
      0      9   macRadioEnergyDetectStop
        0      9   -> macMcuRecordMaxRssiStop
        0      9   -> radioComputeED
      2      0   macRadioInit
      2      0   macRadioRandomByte
        2      0   -> macMcuRandomByte
      2      0   macRadioReset
        2      0   -> macRadioEnergyDetectStop
        2      0   -> macRadioStopScan
      0      9   macRadioSetChannel
        0      9   -> halAssertHandler
        0      9   -> macRadioUpdateChannel
      0      9   macRadioSetIEEEAddr
        0      9   -> macMemWriteRam
      0      9   macRadioSetPanCoordinator
      2      0   macRadioSetPanID
      2      0   macRadioSetShortAddr
      0     11   macRadioSetTxPower
        0     11   -> macRadioUpdateTxPower
      0      9   macRadioStartScan
        0      9   -> halAssertHandler
      2      0   macRadioStopScan
      0     18   macRadioUpdateChannel
        0      9   -> halAssertHandler
        0      9   -> macRxHaltCleanup
        0      9   -> macRxOff
        0      9   -> macRxOnRequest
      2     11   macRadioUpdateTxPower
      0      9   radioComputeED


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??macRadioComputeLQI?relay
       6  ??macRadioEnergyDetectStart?relay
       6  ??macRadioEnergyDetectStop?relay
       6  ??macRadioInit?relay
       6  ??macRadioRandomByte?relay
       6  ??macRadioReset?relay
       6  ??macRadioSetChannel?relay
       6  ??macRadioSetIEEEAddr?relay
       6  ??macRadioSetPanCoordinator?relay
       6  ??macRadioSetPanID?relay
       6  ??macRadioSetShortAddr?relay
       6  ??macRadioSetTxPower?relay
       6  ??macRadioStartScan?relay
       6  ??macRadioStopScan?relay
       6  ??macRadioUpdateChannel?relay
       6  ??macRadioUpdateTxPower?relay
       6  ??radioComputeED?relay
       1  _A_IEN0
       1  macPhyChannel
       1  macPhyTxPower
      19  macRadioComputeLQI
      14  macRadioEnergyDetectStart
      26  macRadioEnergyDetectStop
      35  macRadioInit
      14  macRadioRandomByte
      18  macRadioReset
      55  macRadioSetChannel
      27  macRadioSetIEEEAddr
      41  macRadioSetPanCoordinator
      28  macRadioSetPanID
      28  macRadioSetShortAddr
     118  macRadioSetTxPower
      85  macRadioStartScan
      46  macRadioStopScan
      85  macRadioUpdateChannel
      67  macRadioUpdateTxPower
      78  radioComputeED
       1  reqChannel
       1  reqTxPower

 
 784 bytes in segment BANKED_CODE
 102 bytes in segment BANK_RELAYS
   1 byte  in segment SFR_AN
   4 bytes in segment XDATA_Z
 
 886 bytes of CODE  memory
   0 bytes of DATA  memory (+ 1 byte shared)
   4 bytes of XDATA memory

Errors: none
Warnings: none
