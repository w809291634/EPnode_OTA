###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:39
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mac\low_level\srf04\mac_rx.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mac\low_level\srf04\mac_rx.c"
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        XLAB -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\mac_rx.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\mac_rx.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mac\low_level\srf04\mac_rx.c
      1          /**************************************************************************************************
      2            Filename:       mac_rx.c
      3            Revised:        $Date: 2007-10-08 14:05:36 -0700 (Mon, 08 Oct 2007) $
      4            Revision:       $Revision: 15624 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          
     45          /* hal */
     46          #include "hal_defs.h"
     47          #include "hal_types.h"
     48          
     49          /* high-level */
     50          #include "mac_high_level.h"
     51          #include "mac_spec.h"
     52          
     53          /* exported low-level */
     54          #include "mac_low_level.h"
     55          
     56          /* low-level specific */
     57          #include "mac_rx.h"
     58          #include "mac_tx.h"
     59          #include "mac_rx_onoff.h"
     60          #include "mac_radio.h"
     61          
     62          /* target specific */
     63          #include "mac_radio_defs.h"

   \                                 In  segment SFR_AN, at 0x91
   \   unsigned char volatile __sfr RFIRQF1
   \                     RFIRQF1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9b
   \   unsigned char volatile __sfr S1CON
   \                     S1CON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe1
   \   unsigned char volatile __sfr RFST
   \                     RFST:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe9
   \   unsigned char volatile __sfr RFIRQF0
   \                     RFIRQF0:
   \   000000                DS 1
     64          #include "mac_autopend.h"
     65          
     66          /* debug */
     67          #include "mac_assert.h"
     68          
     69          
     70          /* ------------------------------------------------------------------------------------------------
     71           *                                            Defines
     72           * ------------------------------------------------------------------------------------------------
     73           */
     74          #define MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT   16   /* adjustable to tune performance */
     75          
     76          /* receive FIFO bytes needed to start a valid receive (see function rxStartIsr for details) */
     77          #define RX_THRESHOLD_START_LEN    (MAC_PHY_PHR_LEN        +  \
     78                                             MAC_FCF_FIELD_LEN      +  \
     79                                             MAC_SEQ_NUM_FIELD_LEN  +  \
     80                                             MAC_FCS_FIELD_LEN)
     81          
     82          /* maximum size of addressing fields (note: command frame identifier processed as part of address) */
     83          #define MAX_ADDR_FIELDS_LEN  ((MAC_EXT_ADDR_FIELD_LEN + MAC_PAN_ID_FIELD_LEN) * 2)
     84          
     85          /* addressing mode reserved value */
     86          #define ADDR_MODE_RESERVERED  1
     87          
     88          /* length of command frame identifier */
     89          #define CMD_FRAME_ID_LEN      1
     90          
     91          /* packet size mask is equal to the maximum value */
     92          #define PHY_PACKET_SIZE_MASK  0x7F
     93          
     94          /* value for promiscuous off, must not conflict with other mode variants from separate include files */
     95          #define PROMISCUOUS_MODE_OFF  0x00
     96          
     97          /* bit of proprietary FCS format that indicates if the CRC is OK */
     98          #define PROPRIETARY_FCS_CRC_OK_BIT  0x80
     99          
    100          /* dummy length value for unused entry in lookup table */
    101          #define DUMMY_LEN   0xBE
    102          
    103          /* value for rxThresholdIntState */
    104          #define RX_THRESHOLD_INT_STATE_INACTIVE   0
    105          #define RX_THRESHOLD_INT_STATE_ACTIVE     1
    106          #define RX_THRESHOLD_INT_STATE_RESET      2
    107          
    108          
    109          /* ------------------------------------------------------------------------------------------------
    110           *                                             Macros
    111           * ------------------------------------------------------------------------------------------------
    112           */
    113          #define MEM_ALLOC(x)   macDataRxMemAlloc(x)
    114          #define MEM_FREE(x)    macDataRxMemFree((uint8 **)x)
    115          
    116          /*
    117           *  Macro for encoding frame control information into internal flags format.
    118           *  Parameter is pointer to the frame.  NOTE!  If either the internal frame
    119           *  format *or* the specification changes, this macro will need to be modified.
    120           */
    121          #define INTERNAL_FCF_FLAGS(p)  ((((p)[1] >> 4) & 0x03) | ((p)[0] & 0x78))
    122          
    123          /*
    124           *  The radio replaces the actual FCS with different information.  This proprietary FCS is
    125           *  the same length as the original and includes:
    126           *    1) the RSSI value
    127           *    2) the average correlation value (used for LQI)
    128           *    3) a CRC passed bit
    129           *
    130           *  These macros decode the proprietary FCS.  The macro parameter is a pointer to the two byte FCS.
    131           */
    132          #define PROPRIETARY_FCS_RSSI(p)                 ((int8)((p)[0]))
    133          #define PROPRIETARY_FCS_CRC_OK(p)               ((p)[1] & PROPRIETARY_FCS_CRC_OK_BIT)
    134          #define PROPRIETARY_FCS_CORRELATION_VALUE(p)    ((p)[1] & ~PROPRIETARY_FCS_CRC_OK_BIT)
    135          
    136          
    137          /* ------------------------------------------------------------------------------------------------
    138           *                                       Global Variables
    139           * ------------------------------------------------------------------------------------------------
    140           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint8 macRxActive;
   \                     macRxActive:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          uint8 macRxFilter;
   \                     macRxFilter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          uint8 macRxOutgoingAckFlag;
   \                     macRxOutgoingAckFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    144          
    145          
    146          /* ------------------------------------------------------------------------------------------------
    147           *                                       Local Constants
    148           * ------------------------------------------------------------------------------------------------
    149           */

   \                                 In  segment CODE_C, align 1
    150          static const uint8 CODE macRxAddrLen[] =
   \                     macRxAddrLen:
   \   000000   00           DB 0
   \   000001   BE           DB 190
   \   000002   04           DB 4
   \   000003   0A           DB 10
    151          {
    152            0,                                                /* no address */
    153            DUMMY_LEN,                                        /* reserved */
    154            MAC_PAN_ID_FIELD_LEN + MAC_SHORT_ADDR_FIELD_LEN,  /* short address + pan id */
    155            MAC_PAN_ID_FIELD_LEN + MAC_EXT_ADDR_FIELD_LEN     /* extended address + pan id */
    156          };
    157          
    158          
    159          /* ------------------------------------------------------------------------------------------------
    160           *                                       Local Prototypes
    161           * ------------------------------------------------------------------------------------------------
    162           */
    163          static void rxHaltCleanupFinalStep(void);
    164          
    165          static void rxStartIsr(void);
    166          static void rxAddrIsr(void);
    167          static void rxPayloadIsr(void);
    168          static void rxDiscardIsr(void);
    169          static void rxFcsIsr(void);
    170          
    171          static void rxPrepPayload(void);
    172          static void rxDiscardFrame(void);
    173          static void rxDone(void);
    174          static void rxPostRxUpdates(void);
    175          
    176          
    177          /* ------------------------------------------------------------------------------------------------
    178           *                                         Local Variables
    179           * ------------------------------------------------------------------------------------------------
    180           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181          static void    (* pFuncRxState)(void);
   \                     pFuncRxState:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          static macRx_t  * pRxBuf;
   \                     pRxBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    183          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          static uint8  rxBuf[MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN];
   \                     rxBuf:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          static uint8  rxUnreadLen;
   \                     rxUnreadLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    186          static uint8  rxNextLen;
   \                     rxNextLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          static uint8  rxPayloadLen;
   \                     rxPayloadLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          static uint8  rxFilter;
   \                     rxFilter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          static uint8  rxPromiscuousMode;
   \                     rxPromiscuousMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          static uint8  rxIsrActiveFlag;
   \                     rxIsrActiveFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    191          static uint8  rxResetFlag;
   \                     rxResetFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    192          static uint8  rxFifoOverflowCount;
   \                     rxFifoOverflowCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    193          
    194          #ifdef PACKET_FILTER_STATS
    195            uint32      rxCrcFailure = 0;
    196            uint32      rxCrcSuccess = 0;
    197          #endif /* PACKET_FILTER_STATS */
    198          
    199          #ifdef CC2591_COMPRESSION_WORKAROUND
    200            void macRxResetRssi(void);
    201          #endif
    202          
    203          /**************************************************************************************************
    204           * @fn          macRxInit
    205           *
    206           * @brief       Initialize receive variable states.
    207           *
    208           * @param       none
    209           *
    210           * @return      none
    211           **************************************************************************************************
    212           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    213          MAC_INTERNAL_API void macRxInit(void)
   \                     macRxInit:
    214          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    215            macRxFilter          = RX_FILTER_OFF;
   \   000004   90....       MOV     DPTR,#macRxFilter
   \   000007   7400         MOV     A,#0x0
   \   000009   F0           MOVX    @DPTR,A
    216            rxPromiscuousMode    = PROMISCUOUS_MODE_OFF;
   \   00000A   90....       MOV     DPTR,#rxPromiscuousMode
   \   00000D   7400         MOV     A,#0x0
   \   00000F   F0           MOVX    @DPTR,A
    217            pRxBuf               = NULL; /* required for macRxReset() to function correctly */
   \   000010   90....       MOV     DPTR,#pRxBuf
   \   000013   7400         MOV     A,#0x0
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   7400         MOV     A,#0x0
   \   000019   F0           MOVX    @DPTR,A
    218            macRxActive          = MAC_RX_ACTIVE_NO_ACTIVITY;
   \   00001A   90....       MOV     DPTR,#macRxActive
   \   00001D   7400         MOV     A,#0x0
   \   00001F   F0           MOVX    @DPTR,A
    219            pFuncRxState         = &rxStartIsr;
   \   000020   90....       MOV     DPTR,#pFuncRxState
   \   000023   74..         MOV     A,#??rxStartIsr?relay & 0xff
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   74..         MOV     A,#(??rxStartIsr?relay >> 8) & 0xff
   \   000029   F0           MOVX    @DPTR,A
    220            macRxOutgoingAckFlag = 0;
   \   00002A   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00002D   7400         MOV     A,#0x0
   \   00002F   F0           MOVX    @DPTR,A
    221            rxIsrActiveFlag      = 0;
   \   000030   90....       MOV     DPTR,#rxIsrActiveFlag
   \   000033   7400         MOV     A,#0x0
   \   000035   F0           MOVX    @DPTR,A
    222            rxResetFlag          = 0;
   \   000036   90....       MOV     DPTR,#rxResetFlag
   \   000039   7400         MOV     A,#0x0
   \   00003B   F0           MOVX    @DPTR,A
    223            rxFifoOverflowCount  = 0;
   \   00003C   90....       MOV     DPTR,#rxFifoOverflowCount
   \   00003F   7400         MOV     A,#0x0
   \   000041   F0           MOVX    @DPTR,A
    224          }
   \   000042   D083         POP     DPH
   \   000044   D082         POP     DPL
   \   000046   02....       LJMP    ?BRET
    225          
    226          
    227          /**************************************************************************************************
    228           * @fn          macRxRadioPowerUpInit
    229           *
    230           * @brief       Initialization for after radio first powers up.
    231           *
    232           * @param       none
    233           *
    234           * @return      none
    235           **************************************************************************************************
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          MAC_INTERNAL_API void macRxRadioPowerUpInit(void)
   \                     macRxRadioPowerUpInit:
    238          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    239            /* set threshold at initial value */
    240            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   000004   906194       MOV     DPTR,#0x6194
   \   000007   7405         MOV     A,#0x5
   \   000009   F0           MOVX    @DPTR,A
    241          
    242            /* clear any accidental threshold interrupt that happened as part of power up sequence */
    243            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   \   00000A   A2AF         MOV     C,0xa8.7
   \   00000C   E4           CLR     A
   \   00000D   33           RLC     A
   \   00000E   F8           MOV     R0,A
   \   00000F   C2AF         CLR     0xa8.7
   \   000011   759B00       MOV     0x9b,#0x0
   \   000014   75E9FB       MOV     0xe9,#-0x5
   \   000017   E8           MOV     A,R0
   \   000018   F9           MOV     R1,A
   \   000019   E8           MOV     A,R0
   \   00001A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001C   92AF         MOV     0xa8.7,C
    244          
    245            /* enable threshold interrupts */
    246            MAC_RADIO_ENABLE_RX_THRESHOLD_INTERRUPT();
   \   00001E   9061A3       MOV     DPTR,#0x61a3
   \   000021   E0           MOVX    A,@DPTR
   \   000022   D2E2         SETB    0xE0 /* A   */.2
   \   000024   F0           MOVX    @DPTR,A
    247          }
   \   000025   D083         POP     DPH
   \   000027   D082         POP     DPL
   \   000029   02....       LJMP    ?BRET
   \   00002C                REQUIRE _A_IEN0
   \   00002C                REQUIRE S1CON
   \   00002C                REQUIRE RFIRQF0
    248          
    249          
    250          /**************************************************************************************************
    251           * @fn          macRxTxReset
    252           *
    253           * @brief       Reset the receive state.
    254           *
    255           * @param       none
    256           *
    257           * @return      none
    258           **************************************************************************************************
    259           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    260          MAC_INTERNAL_API void macRxTxReset(void)
   \                     macRxTxReset:
    261          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    262            /* forces receiver off, cleans up by calling macRxHaltCleanup() and macTxHaltCleanup() */
    263            macRxHardDisable();
   \   000004                ; Setup parameters for call to function macRxHardDisable
   \   000004   12....       LCALL   ??macRxHardDisable?relay; Banked call to: macRxHardDisable
    264          
    265            /*
    266             *   Note : transmit does not require any reset logic
    267             *          beyond what macRxHardDisable() provides.
    268             */
    269          
    270            /* restore deault filter mode to off */
    271            macRxFilter = RX_FILTER_OFF;
   \   000007   90....       MOV     DPTR,#macRxFilter
   \   00000A   7400         MOV     A,#0x0
   \   00000C   F0           MOVX    @DPTR,A
    272          
    273            /* return promiscuous mode to default off state */
    274            macRxPromiscuousMode(MAC_PROMISCUOUS_MODE_OFF);
   \   00000D                ; Setup parameters for call to function macRxPromiscuousMode
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   ??macRxPromiscuousMode?relay; Banked call to: macRxPromiscuousMode
    275          }
   \   000012   D083         POP     DPH
   \   000014   D082         POP     DPL
   \   000016   02....       LJMP    ?BRET
    276          
    277          
    278          /**************************************************************************************************
    279           * @fn          macRxHaltCleanup
    280           *
    281           * @brief       Cleanup up the receive logic after receiver is forced off.
    282           *
    283           * @param       none
    284           *
    285           * @return      none
    286           **************************************************************************************************
    287           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    288          MAC_INTERNAL_API void macRxHaltCleanup(void)
   \                     macRxHaltCleanup:
    289          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    290            rxResetFlag = 1;
   \   000004   90....       MOV     DPTR,#rxResetFlag
   \   000007   7401         MOV     A,#0x1
   \   000009   F0           MOVX    @DPTR,A
    291            if (!rxIsrActiveFlag)
   \   00000A   90....       MOV     DPTR,#rxIsrActiveFlag
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7009         JNZ     ??macRxHaltCleanup_0
    292            {
    293              rxHaltCleanupFinalStep();
   \   000010                ; Setup parameters for call to function rxHaltCleanupFinalStep
   \   000010   12....       LCALL   ??rxHaltCleanupFinalStep?relay; Banked call to: rxHaltCleanupFinalStep
    294              rxResetFlag = 0;
   \   000013   90....       MOV     DPTR,#rxResetFlag
   \   000016   7400         MOV     A,#0x0
   \   000018   F0           MOVX    @DPTR,A
    295            }
    296          }
   \                     ??macRxHaltCleanup_0:
   \   000019   D083         POP     DPH
   \   00001B   D082         POP     DPL
   \   00001D   02....       LJMP    ?BRET
    297          
    298          
    299          /*=================================================================================================
    300           * @fn          rxHaltCleanupFinalStep
    301           *
    302           * @brief       Required cleanup if receiver is halted in the middle of a receive.
    303           *
    304           * @param       none
    305           *
    306           * @return      none
    307           *=================================================================================================
    308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    309          static void rxHaltCleanupFinalStep(void)
   \                     rxHaltCleanupFinalStep:
    310          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    311            /* cancel any upcoming ACK transmit complete callback */
    312            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   000005   9061A4       MOV     DPTR,#0x61a4
   \   000008   E0           MOVX    A,@DPTR
   \   000009   C2E0         CLR     0xE0 /* A   */.0
   \   00000B   F0           MOVX    @DPTR,A
    313          
    314            /* set start of frame threshold */
    315            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   00000C   906194       MOV     DPTR,#0x6194
   \   00000F   7405         MOV     A,#0x5
   \   000011   F0           MOVX    @DPTR,A
    316          
    317            /* flush the receive FIFO */
    318            MAC_RADIO_FLUSH_RX_FIFO();
   \   000012   75E1ED       MOV     0xe1,#-0x13
   \   000015   75E1ED       MOV     0xe1,#-0x13
    319          
    320            /* clear any receive interrupt that happened to squeak through */
    321            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   \   000018   A2AF         MOV     C,0xa8.7
   \   00001A   E4           CLR     A
   \   00001B   33           RLC     A
   \   00001C   FA           MOV     R2,A
   \   00001D   C2AF         CLR     0xa8.7
   \   00001F   759B00       MOV     0x9b,#0x0
   \   000022   75E9FB       MOV     0xe9,#-0x5
   \   000025   EA           MOV     A,R2
   \   000026   FE           MOV     R6,A
   \   000027   EA           MOV     A,R2
   \   000028   A2E0         MOV     C,0xE0 /* A   */.0
   \   00002A   92AF         MOV     0xa8.7,C
    322          
    323            /* if data buffer has been allocated, free it */
    324            if (pRxBuf != NULL)
   \   00002C   90....       MOV     DPTR,#pRxBuf
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F8           MOV     R0,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   E8           MOV     A,R0
   \   000035   49           ORL     A,R1
   \   000036   6008         JZ      ??rxHaltCleanupFinalStep_0
    325            {
    326              MEM_FREE((uint8 **)&pRxBuf);
   \   000038                ; Setup parameters for call to function macDataRxMemFree
   \   000038   7A..         MOV     R2,#pRxBuf & 0xff
   \   00003A   7B..         MOV     R3,#(pRxBuf >> 8) & 0xff
   \   00003C   12....       LCALL   ??macDataRxMemFree?relay; Banked call to: macDataRxMemFree
   \   00003F   E9           MOV     A,R1
    327            }
    328            pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
   \                     ??rxHaltCleanupFinalStep_0:
   \   000040   90....       MOV     DPTR,#pRxBuf
   \   000043   7400         MOV     A,#0x0
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   7400         MOV     A,#0x0
   \   000049   F0           MOVX    @DPTR,A
    329          
    330            pFuncRxState = &rxStartIsr;
   \   00004A   90....       MOV     DPTR,#pFuncRxState
   \   00004D   74..         MOV     A,#??rxStartIsr?relay & 0xff
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   74..         MOV     A,#(??rxStartIsr?relay >> 8) & 0xff
   \   000053   F0           MOVX    @DPTR,A
    331          
    332            /* if receive was active, perform the post receive updates */
    333            if (macRxActive || macRxOutgoingAckFlag)
   \   000054   90....       MOV     DPTR,#macRxActive
   \   000057   E0           MOVX    A,@DPTR
   \   000058   7006         JNZ     ??rxHaltCleanupFinalStep_1
   \   00005A   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   600F         JZ      ??rxHaltCleanupFinalStep_2
    334            {
    335              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxHaltCleanupFinalStep_1:
   \   000060   90....       MOV     DPTR,#macRxActive
   \   000063   7400         MOV     A,#0x0
   \   000065   F0           MOVX    @DPTR,A
    336              macRxOutgoingAckFlag = 0;
   \   000066   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000069   7400         MOV     A,#0x0
   \   00006B   F0           MOVX    @DPTR,A
    337          
    338              rxPostRxUpdates();
   \   00006C                ; Setup parameters for call to function rxPostRxUpdates
   \   00006C   12....       LCALL   ??rxPostRxUpdates?relay; Banked call to: rxPostRxUpdates
    339            }
    340          }
   \                     ??rxHaltCleanupFinalStep_2:
   \   00006F   7F01         MOV     R7,#0x1
   \   000071   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000074                REQUIRE RFST
   \   000074                REQUIRE _A_IEN0
   \   000074                REQUIRE S1CON
   \   000074                REQUIRE RFIRQF0
    341          
    342          
    343          /**************************************************************************************************
    344           * @fn          macRxThresholdIsr
    345           *
    346           * @brief       Interrupt service routine called when bytes in FIFO reach threshold value.
    347           *              It implements a state machine for receiving a packet.
    348           *
    349           * @param       none
    350           *
    351           * @return      none
    352           **************************************************************************************************
    353           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    354          MAC_INTERNAL_API void macRxThresholdIsr(void)
   \                     macRxThresholdIsr:
    355          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    356            /* if currently reseting, do not execute receive ISR logic */
    357            if (rxResetFlag)
   \   000004   90....       MOV     DPTR,#rxResetFlag
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7029         JNZ     ??macRxThresholdIsr_0
    358            {
    359              return;
    360            }
    361          
    362            /*
    363             *  Call the function that handles the current receive state.
    364             *  A flag is set for the duration of the call to indicate
    365             *  the ISR is executing.  This is necessary for the reset
    366             *  logic so it does not perform a reset in the middle of
    367             *  executing the ISR.
    368             */
    369            rxIsrActiveFlag = 1;
   \   00000A   90....       MOV     DPTR,#rxIsrActiveFlag
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    370            (*pFuncRxState)();
   \   000010                ; Setup parameters for indirect call
   \   000010   90....       MOV     DPTR,#pFuncRxState
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F583         MOV     DPH,A
   \   000019   8882         MOV     DPL,R0
   \   00001B   12....       LCALL   ?CALL_IND
    371            rxIsrActiveFlag = 0;
   \   00001E   90....       MOV     DPTR,#rxIsrActiveFlag
   \   000021   7400         MOV     A,#0x0
   \   000023   F0           MOVX    @DPTR,A
    372          
    373            /* if a reset occurred during the ISR, peform cleanup here */
    374            if (rxResetFlag)
   \   000024   90....       MOV     DPTR,#rxResetFlag
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6009         JZ      ??macRxThresholdIsr_0
    375            {
    376              rxHaltCleanupFinalStep();
   \   00002A                ; Setup parameters for call to function rxHaltCleanupFinalStep
   \   00002A   12....       LCALL   ??rxHaltCleanupFinalStep?relay; Banked call to: rxHaltCleanupFinalStep
    377              rxResetFlag = 0;
   \   00002D   90....       MOV     DPTR,#rxResetFlag
   \   000030   7400         MOV     A,#0x0
   \   000032   F0           MOVX    @DPTR,A
    378            }
    379          }
   \                     ??macRxThresholdIsr_0:
   \   000033   D083         POP     DPH
   \   000035   D082         POP     DPL
   \   000037   02....       LJMP    ?BRET
    380          
    381          
    382          /*=================================================================================================
    383           * @fn          rxStartIsr
    384           *
    385           * @brief       First ISR state for receiving a packet - compute packet length, allocate
    386           *              buffer, initialize buffer.  Acknowledgements are handled immediately without
    387           *              allocating a buffer.
    388           *
    389           * @param       none
    390           *
    391           * @return      none
    392           *=================================================================================================
    393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    394          static void rxStartIsr(void)
   \                     rxStartIsr:
    395          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    396            uint8  addrLen;
    397            uint8  ackWithPending;
    398            uint8  dstAddrMode;
    399            uint8  srcAddrMode;
    400          
    401            MAC_ASSERT(!macRxActive); /* receive on top of receive */
   \   00000A   90....       MOV     DPTR,#macRxActive
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6003         JZ      ??rxStartIsr_0
   \   000010                ; Setup parameters for call to function halAssertHandler
   \   000010   12....       LCALL   ??halAssertHandler?relay; Banked call to: halAssertHandler
    402          
    403            /* indicate rx is active */
    404            macRxActive = MAC_RX_ACTIVE_STARTED;
   \                     ??rxStartIsr_0:
   \   000013   90....       MOV     DPTR,#macRxActive
   \   000016   7481         MOV     A,#-0x7f
   \   000018   F0           MOVX    @DPTR,A
    405          
    406            /*
    407             *  For bullet proof functionality, need to see if the receiver was just turned off.
    408             *  The logic to request turning off the receiver, disables interrupts and then checks
    409             *  the value of macRxActive.  If it is TRUE, the receiver will not be turned off.
    410             *
    411             *  There is a small hole though.  It's possible to attempt turning off the receiver
    412             *  in the window from when the receive interrupt fires and the point where macRxActive
    413             *  is set to TRUE.  To plug this hole, the on/off status must be tested *after*
    414             *  macRxActive has been set.  If the receiver is off at this point, there is nothing
    415             *  in the RX fifo and the receive is simply aborted.
    416             *
    417             *  Also, there are some considerations in case a hard disable just happened.  Usually,
    418             *  the receiver will just be off at this point after a hard disable.  The check described
    419             *  above will account for this case too.  However, if a hard disable were immediately
    420             *  followed by an enable, the receiver would be on.  To catch this case, the receive
    421             *  FIFO is also tested to see if it is empty.  Recovery is identical to the other cases.
    422             */
    423            if (!macRxOnFlag || MAC_RADIO_RX_FIFO_IS_EMPTY())
   \   000019   90....       MOV     DPTR,#macRxOnFlag
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6010         JZ      ??rxStartIsr_1
   \   00001F   906193       MOV     DPTR,#0x6193
   \   000022   E0           MOVX    A,@DPTR
   \   000023   A2E7         MOV     C,0xE0 /* A   */.7
   \   000025   4014         JC      ??rxStartIsr_2
   \   000027   906193       MOV     DPTR,#0x6193
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   A2E6         MOV     C,0xE0 /* A   */.6
   \   00002D   400C         JC      ??rxStartIsr_2
    424            {
    425              /* reset active flag */
    426              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxStartIsr_1:
   \   00002F   90....       MOV     DPTR,#macRxActive
   \   000032   7400         MOV     A,#0x0
   \   000034   F0           MOVX    @DPTR,A
    427          
    428              /*
    429               *  To be absolutely bulletproof, must make sure no transmit queue'ed up during
    430               *  the tiny, tiny window when macRxActive was not zero.
    431               */
    432              rxPostRxUpdates();
   \   000035                ; Setup parameters for call to function rxPostRxUpdates
   \   000035   12....       LCALL   ??rxPostRxUpdates?relay; Banked call to: rxPostRxUpdates
    433          
    434              /* return immediately from here */
    435              return;
   \   000038   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    436            }
    437          
    438            /*
    439             *  If interrupts are held off for too long it's possible the previous "transmit done"
    440             *  callback is pending.  If this is the case, it needs to be completed before
    441             *  continuing with the receive logic.
    442             */
    443            MAC_RADIO_FORCE_TX_DONE_IF_PENDING();
   \                     ??rxStartIsr_2:
   \   00003B                ; Setup parameters for call to function macCspForceTxDoneIfPending
   \   00003B   12....       LCALL   ??macCspForceTxDoneIfPending?relay; Banked call to: macCspForceTxDoneIfPending
    444          
    445            /*
    446             *  It's possible receive logic is still waiting for confirmation of an ACK that went out
    447             *  for the previous receive.  This is OK but the callback needs to be canceled at this point.
    448             *  That callback execute receive cleanup logic that will run at the completion
    449             *  of *this* receive.  Also, it is important the flag for the outgoing ACK to be cleared.
    450             */
    451            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   00003E   9061A4       MOV     DPTR,#0x61a4
   \   000041   E0           MOVX    A,@DPTR
   \   000042   C2E0         CLR     0xE0 /* A   */.0
   \   000044   F0           MOVX    @DPTR,A
    452            macRxOutgoingAckFlag = 0;
   \   000045   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000048   7400         MOV     A,#0x0
   \   00004A   F0           MOVX    @DPTR,A
    453          
    454            /*
    455             *  Make a module-local copy of macRxFilter.  This prevents the selected
    456             *  filter from changing in the middle of a receive.
    457             */
    458            rxFilter = macRxFilter;
   \   00004B   90....       MOV     DPTR,#macRxFilter
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   90....       MOV     DPTR,#rxFilter
   \   000052   F0           MOVX    @DPTR,A
    459          
    460            /*-------------------------------------------------------------------------------
    461             *  Read initial frame information from FIFO.
    462             *
    463             *   This code is not triggered until the following are in the RX FIFO:
    464             *     frame length          - one byte containing length of MAC frame (excludes this field)
    465             *     frame control field   - two bytes defining frame type, addressing fields, control flags
    466             *     sequence number       - one byte unique sequence identifier
    467             *     additional two bytes  - these bytes are available in case the received frame is an ACK,
    468             *                             if so, the frame can be verified and responded to immediately,
    469             *                             if not an ACK, these bytes will be processed normally
    470             */
    471          
    472            /* read frame length, frame control field, and sequence number from FIFO */
    473            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN);
   \   000053                ; Setup parameters for call to function macMemReadRxFifo
   \   000053   7904         MOV     R1,#0x4
   \   000055   7A..         MOV     R2,#rxBuf & 0xff
   \   000057   7B..         MOV     R3,#(rxBuf >> 8) & 0xff
   \   000059   12....       LCALL   ??macMemReadRxFifo?relay; Banked call to: macMemReadRxFifo
    474          
    475            /* bytes to read from FIFO equals frame length minus length of MHR fields just read from FIFO */
    476            rxUnreadLen = (rxBuf[0] & PHY_PACKET_SIZE_MASK) - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN;
   \   00005C   90....       MOV     DPTR,#rxBuf
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   547F         ANL     A,#0x7f
   \   000062   24FD         ADD     A,#-0x3
   \   000064   90....       MOV     DPTR,#rxUnreadLen
   \   000067   F0           MOVX    @DPTR,A
    477          
    478            /*
    479             *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    480             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    481             *  the entire receive buffer is flushed.
    482             *
    483             *  In the case that this workaround is not needed, an assert is used to make sure the
    484             *  receive length field is not corrupted.  This is important because a corrupted receive
    485             *  length field is utterly fatal and, if not caught here, extremely hard to track down.
    486             */
    487            if (macChipVersion == REV_A)
   \   000068   90....       MOV     DPTR,#macChipVersion
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   7020         JNZ     ??rxStartIsr_4
    488            {
    489              if ((rxUnreadLen > (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN)) ||
    490                  (MAC_FRAME_TYPE(&rxBuf[1]) > MAC_FRAME_TYPE_MAX_VALID))
   \   00006E   90....       MOV     DPTR,#rxUnreadLen
   \   000071   E0           MOVX    A,@DPTR
   \   000072   C3           CLR     C
   \   000073   947D         SUBB    A,#0x7d
   \   000075   500B         JNC     ??rxStartIsr_5
   \   000077   90....       MOV     DPTR,#rxBuf + 1
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   5407         ANL     A,#0x7
   \   00007D   C3           CLR     C
   \   00007E   9404         SUBB    A,#0x4
   \   000080   4018         JC      ??rxStartIsr_6
    491              {
    492                MAC_RADIO_FLUSH_RX_FIFO();
   \                     ??rxStartIsr_5:
   \   000082   75E1ED       MOV     0xe1,#-0x13
   \   000085   75E1ED       MOV     0xe1,#-0x13
    493                rxDone();
   \   000088                ; Setup parameters for call to function rxDone
   \   000088   12....       LCALL   ??rxDone?relay       ; Banked call to: rxDone
    494                return;
   \   00008B   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    495              }
    496            }
    497            else
    498            {
    499              /* radio supplied a corrupted receive buffer length */
    500              MAC_ASSERT(rxUnreadLen <= (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN));
   \                     ??rxStartIsr_4:
   \   00008E   90....       MOV     DPTR,#rxUnreadLen
   \   000091   E0           MOVX    A,@DPTR
   \   000092   C3           CLR     C
   \   000093   947D         SUBB    A,#0x7d
   \   000095   4003         JC      ??rxStartIsr_6
   \   000097                ; Setup parameters for call to function halAssertHandler
   \   000097   12....       LCALL   ??halAssertHandler?relay; Banked call to: halAssertHandler
    501            }
    502          
    503          
    504          
    505            /*-------------------------------------------------------------------------------
    506             *  Process ACKs.
    507             *
    508             *  If this frame is an ACK, process it immediately and exit from here.
    509             *  If this frame is not an ACK and transmit is listening for an ACK, let
    510             *  the transmit logic know an non-ACK was received so transmit can complete.
    511             *
    512             *  In promiscuous mode ACKs are treated like any other frame.
    513             */
    514            if ((MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_ACK) && (rxPromiscuousMode == PROMISCUOUS_MODE_OFF))
   \                     ??rxStartIsr_6:
   \   00009A   90....       MOV     DPTR,#rxBuf + 1
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   5407         ANL     A,#0x7
   \   0000A0   6402         XRL     A,#0x2
   \   0000A2   6003         JZ      $+5
   \   0000A4   02....       LJMP    ??rxStartIsr_7 & 0xFFFF
   \   0000A7   90....       MOV     DPTR,#rxPromiscuousMode
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   6003         JZ      $+5
   \   0000AD   02....       LJMP    ??rxStartIsr_7 & 0xFFFF
    515            {
    516              halIntState_t  s;
    517              uint8 fcsBuf[MAC_FCF_FIELD_LEN];
    518              /*
    519               *  There are guaranteed to be two unread bytes in the FIFO.  By defintion, for ACK frames
    520               *  these two bytes will be the FCS.
    521               */
    522          
    523              /* read FCS from FIFO (threshold set so bytes are guaranteed to be there) */
    524              MAC_RADIO_READ_RX_FIFO(fcsBuf, MAC_FCS_FIELD_LEN);
   \   0000B0                ; Setup parameters for call to function macMemReadRxFifo
   \   0000B0   7902         MOV     R1,#0x2
   \   0000B2   AA..         MOV     R2,?XSP + 0
   \   0000B4   AB..         MOV     R3,?XSP + 1
   \   0000B6   12....       LCALL   ??macMemReadRxFifo?relay; Banked call to: macMemReadRxFifo
    525          
    526              /*
    527               *  This critical section ensures that the ACK timeout won't be triggered in the
    528               *  millde of receiving the ACK frame.
    529               */
    530              HAL_ENTER_CRITICAL_SECTION(s);
   \   0000B9   A2AF         MOV     C,0xa8.7
   \   0000BB   E4           CLR     A
   \   0000BC   33           RLC     A
   \   0000BD   F5..         MOV     ?V0,A
   \   0000BF   C2AF         CLR     0xa8.7
    531          
    532              /* see if transmit is listening for an ACK */
    533              if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \   0000C1   90....       MOV     DPTR,#macTxActive
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   6486         XRL     A,#0x86
   \   0000C7   6003         JZ      $+5
   \   0000C9   02....       LJMP    ??rxStartIsr_8 & 0xFFFF
    534              {
    535                MAC_ASSERT(pMacDataTx != NULL); /* transmit buffer must be present */
   \   0000CC   90....       MOV     DPTR,#pMacDataTx
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   F8           MOV     R0,A
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F9           MOV     R1,A
   \   0000D4   E8           MOV     A,R0
   \   0000D5   49           ORL     A,R1
   \   0000D6   7003         JNZ     ??rxStartIsr_9
   \   0000D8                ; Setup parameters for call to function halAssertHandler
   \   0000D8   12....       LCALL   ??halAssertHandler?relay; Banked call to: halAssertHandler
    536          
    537                /* record link quality metrics for the receive ACK */
    538                {
    539                  int8 rssiDbm;
    540                  uint8 corr;
    541          
    542                  rssiDbm = PROPRIETARY_FCS_RSSI(fcsBuf) + MAC_RADIO_RSSI_OFFSET;
   \                     ??rxStartIsr_9:
   \   0000DB   85..82       MOV     DPL,?XSP + 0
   \   0000DE   85..83       MOV     DPH,?XSP + 1
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   24B7         ADD     A,#-0x49
   \   0000E4   F5..         MOV     ?V2,A
    543                  MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
    544                  corr = PROPRIETARY_FCS_CORRELATION_VALUE(fcsBuf);
   \   0000E6   7401         MOV     A,#0x1
   \   0000E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   547F         ANL     A,#0x7f
   \   0000EE   F5..         MOV     ?V1,A
    545          
    546                  pMacDataTx->internal.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
   \   0000F0                ; Setup parameters for call to function macRadioComputeLQI
   \   0000F0   AA..         MOV     R2,?V1
   \   0000F2   A9..         MOV     R1,?V2
   \   0000F4   12....       LCALL   ??macRadioComputeLQI?relay; Banked call to: macRadioComputeLQI
   \   0000F7   E9           MOV     A,R1
   \   0000F8   C0E0         PUSH    A
   \   0000FA   90....       MOV     DPTR,#pMacDataTx
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   F8           MOV     R0,A
   \   0000FF   A3           INC     DPTR
   \   000100   E0           MOVX    A,@DPTR
   \   000101   C8           XCH     A,R0
   \   000102   2414         ADD     A,#0x14
   \   000104   F582         MOV     DPL,A
   \   000106   C8           XCH     A,R0
   \   000107   3400         ADDC    A,#0x0
   \   000109   F583         MOV     DPH,A
   \   00010B   D0E0         POP     A
   \   00010D   F0           MOVX    @DPTR,A
    547                  pMacDataTx->internal.correlation = corr;
   \   00010E   E5..         MOV     A,?V1
   \   000110   C0E0         PUSH    A
   \   000112   90....       MOV     DPTR,#pMacDataTx
   \   000115   E0           MOVX    A,@DPTR
   \   000116   F8           MOV     R0,A
   \   000117   A3           INC     DPTR
   \   000118   E0           MOVX    A,@DPTR
   \   000119   C8           XCH     A,R0
   \   00011A   2415         ADD     A,#0x15
   \   00011C   F582         MOV     DPL,A
   \   00011E   C8           XCH     A,R0
   \   00011F   3400         ADDC    A,#0x0
   \   000121   F583         MOV     DPH,A
   \   000123   D0E0         POP     A
   \   000125   F0           MOVX    @DPTR,A
    548                  pMacDataTx->internal.rssi= rssiDbm;
   \   000126   E5..         MOV     A,?V2
   \   000128   C0E0         PUSH    A
   \   00012A   90....       MOV     DPTR,#pMacDataTx
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   F8           MOV     R0,A
   \   00012F   A3           INC     DPTR
   \   000130   E0           MOVX    A,@DPTR
   \   000131   C8           XCH     A,R0
   \   000132   2416         ADD     A,#0x16
   \   000134   F582         MOV     DPL,A
   \   000136   C8           XCH     A,R0
   \   000137   3400         ADDC    A,#0x0
   \   000139   F583         MOV     DPH,A
   \   00013B   D0E0         POP     A
   \   00013D   F0           MOVX    @DPTR,A
    549                }
    550          
    551                /*
    552                 *  It's okay if the ACK timeout is triggered here. The callbacks for ACK received
    553                 *  or ACK not received will check "macTxActive" flag before taking any actions.
    554                 */
    555                HAL_EXIT_CRITICAL_SECTION(s);
   \   00013E   E5..         MOV     A,?V0
   \   000140   C0E0         PUSH    A
   \   000142   7402         MOV     A,#0x2
   \   000144   12....       LCALL   ?XSTACK_DISP0_8
   \   000147   D0E0         POP     A
   \   000149   F0           MOVX    @DPTR,A
   \   00014A   E5..         MOV     A,?V0
   \   00014C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00014E   92AF         MOV     0xa8.7,C
    556          
    557                /*
    558                 *  An ACK was received so transmit logic needs to know.  If the FCS failed,
    559                 *  the transmit logic still needs to know.  In that case, treat the frame
    560                 *  as a non-ACK to complete the active transmit.
    561                 */
    562                if (PROPRIETARY_FCS_CRC_OK(fcsBuf))
   \   000150   7401         MOV     A,#0x1
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   E0           MOVX    A,@DPTR
   \   000156   A2E7         MOV     C,0xE0 /* A   */.7
   \   000158   5011         JNC     ??rxStartIsr_10
    563                {
    564                  /* call transmit logic to indicate ACK was received */
    565                  macTxAckReceivedCallback(MAC_SEQ_NUMBER(&rxBuf[1]), MAC_FRAME_PENDING(&rxBuf[1]));
   \   00015A                ; Setup parameters for call to function macTxAckReceivedCallback
   \   00015A   90....       MOV     DPTR,#rxBuf + 1
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   5410         ANL     A,#0x10
   \   000160   FA           MOV     R2,A
   \   000161   90....       MOV     DPTR,#rxBuf + 3
   \   000164   E0           MOVX    A,@DPTR
   \   000165   F9           MOV     R1,A
   \   000166   12....       LCALL   ??macTxAckReceivedCallback?relay; Banked call to: macTxAckReceivedCallback
   \   000169   8017         SJMP    ??rxStartIsr_11
    566                }
    567                else
    568                {
    569                  macTxAckNotReceivedCallback();
   \                     ??rxStartIsr_10:
   \   00016B                ; Setup parameters for call to function macTxAckNotReceivedCallback
   \   00016B   12....       LCALL   ??macTxAckNotReceivedCallback?relay; Banked call to: macTxAckNotReceivedCallback
   \   00016E   8012         SJMP    ??rxStartIsr_11
    570                }
    571              }
    572              else
    573              {
    574                HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??rxStartIsr_8:
   \   000170   E5..         MOV     A,?V0
   \   000172   C0E0         PUSH    A
   \   000174   7402         MOV     A,#0x2
   \   000176   12....       LCALL   ?XSTACK_DISP0_8
   \   000179   D0E0         POP     A
   \   00017B   F0           MOVX    @DPTR,A
   \   00017C   E5..         MOV     A,?V0
   \   00017E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000180   92AF         MOV     0xa8.7,C
    575              }
    576          
    577              /* receive is done, exit from here */
    578              rxDone();
   \                     ??rxStartIsr_11:
   \   000182                ; Setup parameters for call to function rxDone
   \   000182   12....       LCALL   ??rxDone?relay       ; Banked call to: rxDone
    579              return;
   \   000185   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    580            }
    581            else if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \                     ??rxStartIsr_7:
   \   000188   90....       MOV     DPTR,#macTxActive
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   6486         XRL     A,#0x86
   \   00018E   7003         JNZ     ??rxStartIsr_12
    582            {
    583              macTxAckNotReceivedCallback();
   \   000190                ; Setup parameters for call to function macTxAckNotReceivedCallback
   \   000190   12....       LCALL   ??macTxAckNotReceivedCallback?relay; Banked call to: macTxAckNotReceivedCallback
    584            }
    585          
    586            /*-------------------------------------------------------------------------------
    587             *  Apply filtering.
    588             *
    589             *  For efficiency, see if filtering is even 'on' before processing.  Also test
    590             *  to make sure promiscuous mode is disabled.  If promiscuous mode is enabled,
    591             *  do not apply filtering.
    592             */
    593            if ((rxFilter != RX_FILTER_OFF) && !rxPromiscuousMode)
   \                     ??rxStartIsr_12:
   \   000193   90....       MOV     DPTR,#rxFilter
   \   000196   E0           MOVX    A,@DPTR
   \   000197   6036         JZ      ??rxStartIsr_13
   \   000199   90....       MOV     DPTR,#rxPromiscuousMode
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   7030         JNZ     ??rxStartIsr_13
    594            {
    595              if (/* filter all frames */
    596                   (rxFilter == RX_FILTER_ALL) ||
    597          
    598                   /* filter non-beacon frames */
    599                   ((rxFilter == RX_FILTER_NON_BEACON_FRAMES) &&
    600                    (MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_BEACON)) ||
    601          
    602                   /* filter non-command frames */
    603                   ((rxFilter == RX_FILTER_NON_COMMAND_FRAMES) &&
    604                    ((MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_COMMAND))))
   \   00019F   90....       MOV     DPTR,#rxFilter
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   6401         XRL     A,#0x1
   \   0001A5   6022         JZ      ??rxStartIsr_14
   \   0001A7   90....       MOV     DPTR,#rxFilter
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   6402         XRL     A,#0x2
   \   0001AD   7008         JNZ     ??rxStartIsr_15
   \   0001AF   90....       MOV     DPTR,#rxBuf + 1
   \   0001B2   E0           MOVX    A,@DPTR
   \   0001B3   5407         ANL     A,#0x7
   \   0001B5   7012         JNZ     ??rxStartIsr_14
   \                     ??rxStartIsr_15:
   \   0001B7   90....       MOV     DPTR,#rxFilter
   \   0001BA   E0           MOVX    A,@DPTR
   \   0001BB   6403         XRL     A,#0x3
   \   0001BD   7010         JNZ     ??rxStartIsr_13
   \   0001BF   90....       MOV     DPTR,#rxBuf + 1
   \   0001C2   E0           MOVX    A,@DPTR
   \   0001C3   5407         ANL     A,#0x7
   \   0001C5   6403         XRL     A,#0x3
   \   0001C7   6006         JZ      ??rxStartIsr_13
    605              {
    606                /* discard rest of frame */
    607                rxDiscardFrame();
   \                     ??rxStartIsr_14:
   \   0001C9                ; Setup parameters for call to function rxDiscardFrame
   \   0001C9   12....       LCALL   ??rxDiscardFrame?relay; Banked call to: rxDiscardFrame
    608                return;
   \   0001CC   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    609              }
    610            }
    611          
    612            /*-------------------------------------------------------------------------------
    613             *  Compute length of addressing fields.  Compute payload length.
    614             */
    615          
    616            /* decode addressing modes */
    617            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
   \                     ??rxStartIsr_13:
   \   0001CF   90....       MOV     DPTR,#rxBuf + 2
   \   0001D2   E0           MOVX    A,@DPTR
   \   0001D3   13           RRC     A
   \   0001D4   13           RRC     A
   \   0001D5   543F         ANL     A,#0x3f
   \   0001D7   5403         ANL     A,#0x3
   \   0001D9   F5..         MOV     ?V5,A
    618            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
   \   0001DB   90....       MOV     DPTR,#rxBuf + 2
   \   0001DE   E0           MOVX    A,@DPTR
   \   0001DF   C4           SWAP    A
   \   0001E0   13           RRC     A
   \   0001E1   13           RRC     A
   \   0001E2   5403         ANL     A,#0x3
   \   0001E4   F5..         MOV     ?V4,A
    619          
    620            /*
    621            *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    622             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    623             *  the entire receive buffer is flushed.
    624             */
    625            if (macChipVersion == REV_A)
   \   0001E6   90....       MOV     DPTR,#macChipVersion
   \   0001E9   E0           MOVX    A,@DPTR
   \   0001EA   7018         JNZ     ??rxStartIsr_16
    626            {
    627              if ((srcAddrMode == ADDR_MODE_RESERVERED) || (dstAddrMode == ADDR_MODE_RESERVERED))
   \   0001EC   7401         MOV     A,#0x1
   \   0001EE   65..         XRL     A,?V4
   \   0001F0   6006         JZ      ??rxStartIsr_17
   \   0001F2   7401         MOV     A,#0x1
   \   0001F4   65..         XRL     A,?V5
   \   0001F6   700C         JNZ     ??rxStartIsr_16
    628              {
    629                MAC_RADIO_FLUSH_RX_FIFO();
   \                     ??rxStartIsr_17:
   \   0001F8   75E1ED       MOV     0xe1,#-0x13
   \   0001FB   75E1ED       MOV     0xe1,#-0x13
    630                rxDone();
   \   0001FE                ; Setup parameters for call to function rxDone
   \   0001FE   12....       LCALL   ??rxDone?relay       ; Banked call to: rxDone
    631                return;
   \   000201   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    632              }
    633            }
    634          
    635            /*
    636             *  Compute the addressing field length.  A lookup table based on addressing
    637             *  mode is used for efficiency.  If the source address is present and the
    638             *  frame is intra-PAN, the PAN Id is not repeated.  In this case, the address
    639             *  length is adjusted to match the smaller length.
    640             */
    641            addrLen = macRxAddrLen[dstAddrMode] + macRxAddrLen[srcAddrMode];
   \                     ??rxStartIsr_16:
   \   000204   A8..         MOV     R0,?V4
   \   000206   7900         MOV     R1,#0x0
   \   000208   74..         MOV     A,#macRxAddrLen & 0xff
   \   00020A   28           ADD     A,R0
   \   00020B   F582         MOV     DPL,A
   \   00020D   74..         MOV     A,#(macRxAddrLen >> 8) & 0xff
   \   00020F   39           ADDC    A,R1
   \   000210   F583         MOV     DPH,A
   \   000212   E4           CLR     A
   \   000213   93           MOVC    A,@A+DPTR
   \   000214   FA           MOV     R2,A
   \   000215   A8..         MOV     R0,?V5
   \   000217   7900         MOV     R1,#0x0
   \   000219   74..         MOV     A,#macRxAddrLen & 0xff
   \   00021B   28           ADD     A,R0
   \   00021C   F582         MOV     DPL,A
   \   00021E   74..         MOV     A,#(macRxAddrLen >> 8) & 0xff
   \   000220   39           ADDC    A,R1
   \   000221   F583         MOV     DPH,A
   \   000223   E4           CLR     A
   \   000224   93           MOVC    A,@A+DPTR
   \   000225   2A           ADD     A,R2
   \   000226   FF           MOV     R7,A
    642            if ((srcAddrMode != SADDR_MODE_NONE) && MAC_INTRA_PAN(&rxBuf[1]))
   \   000227   E5..         MOV     A,?V4
   \   000229   600C         JZ      ??rxStartIsr_18
   \   00022B   90....       MOV     DPTR,#rxBuf + 1
   \   00022E   E0           MOVX    A,@DPTR
   \   00022F   A2E6         MOV     C,0xE0 /* A   */.6
   \   000231   5004         JNC     ??rxStartIsr_18
    643            {
    644              addrLen -= MAC_PAN_ID_FIELD_LEN;
   \   000233   74FE         MOV     A,#-0x2
   \   000235   2F           ADD     A,R7
   \   000236   FF           MOV     R7,A
    645            }
    646          
    647            /*
    648             *  If there are not enough unread bytes to include the computed address
    649             *  plus FCS field, the frame is corrupted and must be discarded.
    650             */
    651            if ((addrLen + MAC_FCS_FIELD_LEN) > rxUnreadLen)
   \                     ??rxStartIsr_18:
   \   000237   90....       MOV     DPTR,#rxUnreadLen
   \   00023A   E0           MOVX    A,@DPTR
   \   00023B   FA           MOV     R2,A
   \   00023C   7B00         MOV     R3,#0x0
   \   00023E   EF           MOV     A,R7
   \   00023F   F8           MOV     R0,A
   \   000240   7900         MOV     R1,#0x0
   \   000242   E8           MOV     A,R0
   \   000243   2402         ADD     A,#0x2
   \   000245   F8           MOV     R0,A
   \   000246   5001         JNC     ??rxStartIsr_19
   \   000248   09           INC     R1
   \                     ??rxStartIsr_19:
   \   000249   C3           CLR     C
   \   00024A   EA           MOV     A,R2
   \   00024B   98           SUBB    A,R0
   \   00024C   EB           MOV     A,R3
   \   00024D   99           SUBB    A,R1
   \   00024E   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000250   65D0         XRL     A,PSW
   \   000252   33           RLC     A
   \   000253   5006         JNC     ??rxStartIsr_20
    652            {
    653              /* discard frame and exit */
    654              rxDiscardFrame();
   \   000255                ; Setup parameters for call to function rxDiscardFrame
   \   000255   12....       LCALL   ??rxDiscardFrame?relay; Banked call to: rxDiscardFrame
    655              return;
   \   000258   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    656            }
    657          
    658            /* payload length is equal to unread bytes minus address length, minus the FCS */
    659            rxPayloadLen = rxUnreadLen - addrLen - MAC_FCS_FIELD_LEN;
   \                     ??rxStartIsr_20:
   \   00025B   90....       MOV     DPTR,#rxUnreadLen
   \   00025E   E0           MOVX    A,@DPTR
   \   00025F   C3           CLR     C
   \   000260   9F           SUBB    A,R7
   \   000261   24FE         ADD     A,#-0x2
   \   000263   90....       MOV     DPTR,#rxPayloadLen
   \   000266   F0           MOVX    @DPTR,A
    660          
    661            /*-------------------------------------------------------------------------------
    662             *  Allocate memory for the incoming frame.
    663             */
    664            pRxBuf = (macRx_t *) MEM_ALLOC(sizeof(macRx_t) + rxPayloadLen);
   \   000267                ; Setup parameters for call to function macDataRxMemAlloc
   \   000267   90....       MOV     DPTR,#rxPayloadLen
   \   00026A   E0           MOVX    A,@DPTR
   \   00026B   F8           MOV     R0,A
   \   00026C   7900         MOV     R1,#0x0
   \   00026E   E8           MOV     A,R0
   \   00026F   2432         ADD     A,#0x32
   \   000271   FA           MOV     R2,A
   \   000272   E4           CLR     A
   \   000273   39           ADDC    A,R1
   \   000274   FB           MOV     R3,A
   \   000275   12....       LCALL   ??macDataRxMemAlloc?relay; Banked call to: macDataRxMemAlloc
   \   000278   90....       MOV     DPTR,#pRxBuf
   \   00027B   EA           MOV     A,R2
   \   00027C   F0           MOVX    @DPTR,A
   \   00027D   A3           INC     DPTR
   \   00027E   EB           MOV     A,R3
   \   00027F   F0           MOVX    @DPTR,A
    665            if (pRxBuf == NULL)
   \   000280   90....       MOV     DPTR,#pRxBuf
   \   000283   E0           MOVX    A,@DPTR
   \   000284   F8           MOV     R0,A
   \   000285   A3           INC     DPTR
   \   000286   E0           MOVX    A,@DPTR
   \   000287   F9           MOV     R1,A
   \   000288   E8           MOV     A,R0
   \   000289   49           ORL     A,R1
   \   00028A   7009         JNZ     ??rxStartIsr_21
    666            {
    667              /* Cancel the outgoing TX ACK */
    668              MAC_RADIO_CANCEL_TX_ACK();
   \   00028C   75E1E8       MOV     0xe1,#-0x18
    669          
    670              /* buffer allocation failed, discard the frame and exit*/
    671              rxDiscardFrame();
   \   00028F                ; Setup parameters for call to function rxDiscardFrame
   \   00028F   12....       LCALL   ??rxDiscardFrame?relay; Banked call to: rxDiscardFrame
    672              return;
   \   000292   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    673            }
    674          
    675            /*-------------------------------------------------------------------------------
    676             *  Set up to process ACK request.  Do not ACK if in promiscuous mode.
    677             */
    678            ackWithPending = 0;
   \                     ??rxStartIsr_21:
   \   000295   7E00         MOV     R6,#0x0
    679            if (!rxPromiscuousMode)
   \   000297   90....       MOV     DPTR,#rxPromiscuousMode
   \   00029A   E0           MOVX    A,@DPTR
   \   00029B   700A         JNZ     ??rxStartIsr_22
    680            {
    681              macRxOutgoingAckFlag = MAC_ACK_REQUEST(&rxBuf[1]);
   \   00029D   90....       MOV     DPTR,#rxBuf + 1
   \   0002A0   E0           MOVX    A,@DPTR
   \   0002A1   5420         ANL     A,#0x20
   \   0002A3   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   0002A6   F0           MOVX    @DPTR,A
    682            }
    683          
    684            /*-------------------------------------------------------------------------------
    685             *  Process any ACK request.
    686             */
    687            if (macRxOutgoingAckFlag)
   \                     ??rxStartIsr_22:
   \   0002A7   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   0002AA   E0           MOVX    A,@DPTR
   \   0002AB   606F         JZ      ??rxStartIsr_23
    688            {
    689              halIntState_t  s;
    690          
    691              /*
    692               *  This critical section ensures that the callback ISR is initiated within time
    693               *  to guarantee correlation with the strobe.
    694               */
    695              HAL_ENTER_CRITICAL_SECTION(s);
   \   0002AD   A2AF         MOV     C,0xa8.7
   \   0002AF   E4           CLR     A
   \   0002B0   33           RLC     A
   \   0002B1   F5..         MOV     ?V0,A
   \   0002B3   C2AF         CLR     0xa8.7
    696          
    697              /* Do not ack data packet with pending more data */
    698              if( MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_COMMAND )
   \   0002B5   90....       MOV     DPTR,#rxBuf + 1
   \   0002B8   E0           MOVX    A,@DPTR
   \   0002B9   5407         ANL     A,#0x7
   \   0002BB   6403         XRL     A,#0x3
   \   0002BD   7024         JNZ     ??rxStartIsr_24
    699              {
    700                if( macRxCheckMACPendingCallback())
   \   0002BF                ; Setup parameters for call to function macRxCheckMACPendingCallback
   \   0002BF   12....       LCALL   ??macRxCheckMACPendingCallback?relay; Banked call to: macRxCheckMACPendingCallback
   \   0002C2   E9           MOV     A,R1
   \   0002C3   6004         JZ      ??rxStartIsr_25
    701                {
    702                  /* Check is any mac data pending for end devices */
    703                  ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   0002C5   7E04         MOV     R6,#0x4
   \   0002C7   801A         SJMP    ??rxStartIsr_24
    704                }
    705                else
    706                {
    707                  if( macSrcMatchIsEnabled )
   \                     ??rxStartIsr_25:
   \   0002C9   90....       MOV     DPTR,#macSrcMatchIsEnabled
   \   0002CC   E0           MOVX    A,@DPTR
   \   0002CD   600C         JZ      ??rxStartIsr_26
    708                  {
    709                    /* When autopend is enabled, check if allpending is set to true */
    710                    if( MAC_SrcMatchCheckAllPending() == MAC_AUTOACK_PENDING_ALL_ON )
   \   0002CF                ; Setup parameters for call to function MAC_SrcMatchCheckAllPending
   \   0002CF   12....       LCALL   ??MAC_SrcMatchCheckAllPending?relay; Banked call to: MAC_SrcMatchCheckAllPending
   \   0002D2   E9           MOV     A,R1
   \   0002D3   64FE         XRL     A,#0xfe
   \   0002D5   700C         JNZ     ??rxStartIsr_24
    711                    {
    712                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   0002D7   7E04         MOV     R6,#0x4
   \   0002D9   8008         SJMP    ??rxStartIsr_24
    713                    }
    714                  }
    715                  else
    716                  {
    717                    /* When autopend is disabled, check the application pending callback */
    718                    if( macRxCheckPendingCallback() )
   \                     ??rxStartIsr_26:
   \   0002DB                ; Setup parameters for call to function macRxCheckPendingCallback
   \   0002DB   12....       LCALL   ??macRxCheckPendingCallback?relay; Banked call to: macRxCheckPendingCallback
   \   0002DE   E9           MOV     A,R1
   \   0002DF   6002         JZ      ??rxStartIsr_24
    719                    {
    720                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   0002E1   7E04         MOV     R6,#0x4
    721                    }
    722                  }
    723                }
    724              }
    725          
    726              if( ackWithPending == MAC_RX_FLAG_ACK_PENDING )
   \                     ??rxStartIsr_24:
   \   0002E3   7404         MOV     A,#0x4
   \   0002E5   6E           XRL     A,R6
   \   0002E6   7009         JNZ     ??rxStartIsr_27
    727              {
    728                MAC_RADIO_TX_ACK_PEND();
   \   0002E8   90618A       MOV     DPTR,#0x618a
   \   0002EB   E0           MOVX    A,@DPTR
   \   0002EC   D2E2         SETB    0xE0 /* A   */.2
   \   0002EE   F0           MOVX    @DPTR,A
   \   0002EF   8007         SJMP    ??rxStartIsr_28
    729              }
    730              else
    731              {
    732                MAC_RADIO_TX_ACK();
   \                     ??rxStartIsr_27:
   \   0002F1   90618A       MOV     DPTR,#0x618a
   \   0002F4   E0           MOVX    A,@DPTR
   \   0002F5   C2E2         CLR     0xE0 /* A   */.2
   \   0002F7   F0           MOVX    @DPTR,A
    733              }
    734          
    735          
    736              /* request a callback to macRxAckTxDoneCallback() when the ACK transmit has finished */
    737              MAC_RADIO_REQUEST_ACK_TX_DONE_CALLBACK();
   \                     ??rxStartIsr_28:
   \   0002F8   A2AF         MOV     C,0xa8.7
   \   0002FA   E4           CLR     A
   \   0002FB   33           RLC     A
   \   0002FC   F8           MOV     R0,A
   \   0002FD   C2AF         CLR     0xa8.7
   \   0002FF   759B00       MOV     0x9b,#0x0
   \   000302   7591FE       MOV     0x91,#-0x2
   \   000305   88..         MOV     ?V7,R0
   \   000307   E8           MOV     A,R0
   \   000308   A2E0         MOV     C,0xE0 /* A   */.0
   \   00030A   92AF         MOV     0xa8.7,C
   \   00030C   9061A4       MOV     DPTR,#0x61a4
   \   00030F   E0           MOVX    A,@DPTR
   \   000310   D2E0         SETB    0xE0 /* A   */.0
   \   000312   F0           MOVX    @DPTR,A
    738              HAL_EXIT_CRITICAL_SECTION(s);
   \   000313   85....       MOV     ?V6,?V0
   \   000316   E5..         MOV     A,?V0
   \   000318   A2E0         MOV     C,0xE0 /* A   */.0
   \   00031A   92AF         MOV     0xa8.7,C
    739            }
    740          
    741           /*-------------------------------------------------------------------------------
    742            *  Populate the receive buffer going up to high-level.
    743            */
    744          
    745            /* configure the payload buffer */
    746            pRxBuf->msdu.p = (uint8 *) (pRxBuf + 1);
   \                     ??rxStartIsr_23:
   \   00031C   90....       MOV     DPTR,#pRxBuf
   \   00031F   E0           MOVX    A,@DPTR
   \   000320   2432         ADD     A,#0x32
   \   000322   FA           MOV     R2,A
   \   000323   A3           INC     DPTR
   \   000324   E0           MOVX    A,@DPTR
   \   000325   3400         ADDC    A,#0x0
   \   000327   FB           MOV     R3,A
   \   000328   90....       MOV     DPTR,#pRxBuf
   \   00032B   E0           MOVX    A,@DPTR
   \   00032C   F8           MOV     R0,A
   \   00032D   A3           INC     DPTR
   \   00032E   E0           MOVX    A,@DPTR
   \   00032F   F583         MOV     DPH,A
   \   000331   8882         MOV     DPL,R0
   \   000333   A3           INC     DPTR
   \   000334   A3           INC     DPTR
   \   000335   EA           MOV     A,R2
   \   000336   F0           MOVX    @DPTR,A
   \   000337   A3           INC     DPTR
   \   000338   EB           MOV     A,R3
   \   000339   F0           MOVX    @DPTR,A
    747            pRxBuf->msdu.len = rxPayloadLen;
   \   00033A   90....       MOV     DPTR,#rxPayloadLen
   \   00033D   E0           MOVX    A,@DPTR
   \   00033E   C0E0         PUSH    A
   \   000340   90....       MOV     DPTR,#pRxBuf
   \   000343   E0           MOVX    A,@DPTR
   \   000344   F8           MOV     R0,A
   \   000345   A3           INC     DPTR
   \   000346   E0           MOVX    A,@DPTR
   \   000347   F583         MOV     DPH,A
   \   000349   8882         MOV     DPL,R0
   \   00034B   A3           INC     DPTR
   \   00034C   A3           INC     DPTR
   \   00034D   A3           INC     DPTR
   \   00034E   A3           INC     DPTR
   \   00034F   D0E0         POP     A
   \   000351   F0           MOVX    @DPTR,A
    748          
    749            /* set internal values */
    750            pRxBuf->mac.srcAddr.addrMode  = srcAddrMode;
   \   000352   E5..         MOV     A,?V4
   \   000354   C0E0         PUSH    A
   \   000356   90....       MOV     DPTR,#pRxBuf
   \   000359   E0           MOVX    A,@DPTR
   \   00035A   F8           MOV     R0,A
   \   00035B   A3           INC     DPTR
   \   00035C   E0           MOVX    A,@DPTR
   \   00035D   C8           XCH     A,R0
   \   00035E   241A         ADD     A,#0x1a
   \   000360   F582         MOV     DPL,A
   \   000362   C8           XCH     A,R0
   \   000363   3400         ADDC    A,#0x0
   \   000365   F583         MOV     DPH,A
   \   000367   D0E0         POP     A
   \   000369   F0           MOVX    @DPTR,A
    751            pRxBuf->mac.dstAddr.addrMode  = dstAddrMode;
   \   00036A   E5..         MOV     A,?V5
   \   00036C   C0E0         PUSH    A
   \   00036E   90....       MOV     DPTR,#pRxBuf
   \   000371   E0           MOVX    A,@DPTR
   \   000372   F8           MOV     R0,A
   \   000373   A3           INC     DPTR
   \   000374   E0           MOVX    A,@DPTR
   \   000375   C8           XCH     A,R0
   \   000376   2423         ADD     A,#0x23
   \   000378   F582         MOV     DPL,A
   \   00037A   C8           XCH     A,R0
   \   00037B   3400         ADDC    A,#0x0
   \   00037D   F583         MOV     DPH,A
   \   00037F   D0E0         POP     A
   \   000381   F0           MOVX    @DPTR,A
    752            pRxBuf->mac.timestamp         = MAC_RADIO_BACKOFF_CAPTURE();
   \   000382                ; Setup parameters for call to function macMcuOverflowCapture
   \   000382   12....       LCALL   ??macMcuOverflowCapture?relay; Banked call to: macMcuOverflowCapture
   \   000385   8A..         MOV     ?V0,R2
   \   000387   8B..         MOV     ?V1,R3
   \   000389   8C..         MOV     ?V2,R4
   \   00038B   8D..         MOV     ?V3,R5
   \   00038D   90....       MOV     DPTR,#pRxBuf
   \   000390   E0           MOVX    A,@DPTR
   \   000391   F8           MOV     R0,A
   \   000392   A3           INC     DPTR
   \   000393   E0           MOVX    A,@DPTR
   \   000394   C8           XCH     A,R0
   \   000395   2424         ADD     A,#0x24
   \   000397   F582         MOV     DPL,A
   \   000399   C8           XCH     A,R0
   \   00039A   3400         ADDC    A,#0x0
   \   00039C   F583         MOV     DPH,A
   \   00039E   78..         MOV     R0,#?V0
   \   0003A0   12....       LCALL   ?L_MOV_TO_X
    753            pRxBuf->mac.timestamp2        = MAC_RADIO_TIMER_CAPTURE();
   \   0003A3                ; Setup parameters for call to function macMcuTimerCapture
   \   0003A3   12....       LCALL   ??macMcuTimerCapture?relay; Banked call to: macMcuTimerCapture
   \   0003A6   8A..         MOV     ?V0,R2
   \   0003A8   8B..         MOV     ?V1,R3
   \   0003AA   A8..         MOV     R0,?V0
   \   0003AC   A9..         MOV     R1,?V1
   \   0003AE   90....       MOV     DPTR,#pRxBuf
   \   0003B1   E0           MOVX    A,@DPTR
   \   0003B2   FA           MOV     R2,A
   \   0003B3   A3           INC     DPTR
   \   0003B4   E0           MOVX    A,@DPTR
   \   0003B5   CA           XCH     A,R2
   \   0003B6   2428         ADD     A,#0x28
   \   0003B8   F582         MOV     DPL,A
   \   0003BA   CA           XCH     A,R2
   \   0003BB   3400         ADDC    A,#0x0
   \   0003BD   F583         MOV     DPH,A
   \   0003BF   E8           MOV     A,R0
   \   0003C0   F0           MOVX    @DPTR,A
   \   0003C1   A3           INC     DPTR
   \   0003C2   E9           MOV     A,R1
   \   0003C3   F0           MOVX    @DPTR,A
    754            pRxBuf->internal.frameType    = MAC_FRAME_TYPE(&rxBuf[1]);
   \   0003C4   90....       MOV     DPTR,#rxBuf + 1
   \   0003C7   E0           MOVX    A,@DPTR
   \   0003C8   5407         ANL     A,#0x7
   \   0003CA   C0E0         PUSH    A
   \   0003CC   90....       MOV     DPTR,#pRxBuf
   \   0003CF   E0           MOVX    A,@DPTR
   \   0003D0   F8           MOV     R0,A
   \   0003D1   A3           INC     DPTR
   \   0003D2   E0           MOVX    A,@DPTR
   \   0003D3   F583         MOV     DPH,A
   \   0003D5   8882         MOV     DPL,R0
   \   0003D7   A3           INC     DPTR
   \   0003D8   A3           INC     DPTR
   \   0003D9   A3           INC     DPTR
   \   0003DA   A3           INC     DPTR
   \   0003DB   A3           INC     DPTR
   \   0003DC   D0E0         POP     A
   \   0003DE   F0           MOVX    @DPTR,A
    755            pRxBuf->mac.dsn               = MAC_SEQ_NUMBER(&rxBuf[1]);
   \   0003DF   90....       MOV     DPTR,#rxBuf + 3
   \   0003E2   E0           MOVX    A,@DPTR
   \   0003E3   C0E0         PUSH    A
   \   0003E5   90....       MOV     DPTR,#pRxBuf
   \   0003E8   E0           MOVX    A,@DPTR
   \   0003E9   F8           MOV     R0,A
   \   0003EA   A3           INC     DPTR
   \   0003EB   E0           MOVX    A,@DPTR
   \   0003EC   C8           XCH     A,R0
   \   0003ED   2431         ADD     A,#0x31
   \   0003EF   F582         MOV     DPL,A
   \   0003F1   C8           XCH     A,R0
   \   0003F2   3400         ADDC    A,#0x0
   \   0003F4   F583         MOV     DPH,A
   \   0003F6   D0E0         POP     A
   \   0003F8   F0           MOVX    @DPTR,A
    756            pRxBuf->internal.flags        = INTERNAL_FCF_FLAGS(&rxBuf[1]) | ackWithPending;
   \   0003F9   90....       MOV     DPTR,#rxBuf + 1
   \   0003FC   E0           MOVX    A,@DPTR
   \   0003FD   5478         ANL     A,#0x78
   \   0003FF   F8           MOV     R0,A
   \   000400   90....       MOV     DPTR,#rxBuf + 2
   \   000403   E0           MOVX    A,@DPTR
   \   000404   C4           SWAP    A
   \   000405   540F         ANL     A,#0xf
   \   000407   5403         ANL     A,#0x3
   \   000409   48           ORL     A,R0
   \   00040A   4E           ORL     A,R6
   \   00040B   C0E0         PUSH    A
   \   00040D   90....       MOV     DPTR,#pRxBuf
   \   000410   E0           MOVX    A,@DPTR
   \   000411   F8           MOV     R0,A
   \   000412   A3           INC     DPTR
   \   000413   E0           MOVX    A,@DPTR
   \   000414   C8           XCH     A,R0
   \   000415   2406         ADD     A,#0x6
   \   000417   F582         MOV     DPL,A
   \   000419   C8           XCH     A,R0
   \   00041A   3400         ADDC    A,#0x0
   \   00041C   F583         MOV     DPH,A
   \   00041E   D0E0         POP     A
   \   000420   F0           MOVX    @DPTR,A
    757            pRxBuf->sec.securityLevel     = MAC_SEC_LEVEL_NONE;
   \   000421   90....       MOV     DPTR,#pRxBuf
   \   000424   E0           MOVX    A,@DPTR
   \   000425   F8           MOV     R0,A
   \   000426   A3           INC     DPTR
   \   000427   E0           MOVX    A,@DPTR
   \   000428   C8           XCH     A,R0
   \   000429   240F         ADD     A,#0xf
   \   00042B   F582         MOV     DPL,A
   \   00042D   C8           XCH     A,R0
   \   00042E   3400         ADDC    A,#0x0
   \   000430   F583         MOV     DPH,A
   \   000432   7400         MOV     A,#0x0
   \   000434   F0           MOVX    @DPTR,A
    758          
    759            /*-------------------------------------------------------------------------------
    760             *  If the processing the addressing fields does not require more bytes from
    761             *  the FIFO go directly address processing function.  Otherwise, configure
    762             *  interrupt to jump there once bytes are received.
    763             */
    764            if (addrLen == 0)
   \   000435   EF           MOV     A,R7
   \   000436   700F         JNZ     ??rxStartIsr_29
    765            {
    766              /* no addressing fields to read, prepare for payload interrupts */
    767              pFuncRxState = &rxPayloadIsr;
   \   000438   90....       MOV     DPTR,#pFuncRxState
   \   00043B   74..         MOV     A,#??rxPayloadIsr?relay & 0xff
   \   00043D   F0           MOVX    @DPTR,A
   \   00043E   A3           INC     DPTR
   \   00043F   74..         MOV     A,#(??rxPayloadIsr?relay >> 8) & 0xff
   \   000441   F0           MOVX    @DPTR,A
    768              rxPrepPayload();
   \   000442                ; Setup parameters for call to function rxPrepPayload
   \   000442   12....       LCALL   ??rxPrepPayload?relay; Banked call to: rxPrepPayload
   \   000445   8019         SJMP    ??rxStartIsr_3
    769            }
    770            else
    771            {
    772              /* need to read and process addressing fields, prepare for address interrupt */
    773              rxNextLen = addrLen;
   \                     ??rxStartIsr_29:
   \   000447   EF           MOV     A,R7
   \   000448   90....       MOV     DPTR,#rxNextLen
   \   00044B   F0           MOVX    @DPTR,A
    774              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   00044C   90....       MOV     DPTR,#rxNextLen
   \   00044F   E0           MOVX    A,@DPTR
   \   000450   24FF         ADD     A,#-0x1
   \   000452   906194       MOV     DPTR,#0x6194
   \   000455   F0           MOVX    @DPTR,A
    775              pFuncRxState = &rxAddrIsr;
   \   000456   90....       MOV     DPTR,#pFuncRxState
   \   000459   74..         MOV     A,#??rxAddrIsr?relay & 0xff
   \   00045B   F0           MOVX    @DPTR,A
   \   00045C   A3           INC     DPTR
   \   00045D   74..         MOV     A,#(??rxAddrIsr?relay >> 8) & 0xff
   \   00045F   F0           MOVX    @DPTR,A
    776            }
    777          }
   \                     ??rxStartIsr_3:
   \   000460   7403         MOV     A,#0x3
   \   000462   12....       LCALL   ?DEALLOC_XSTACK8
   \   000465   7F08         MOV     R7,#0x8
   \   000467   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00046A                REQUIRE RFST
   \   00046A                REQUIRE _A_IEN0
   \   00046A                REQUIRE S1CON
   \   00046A                REQUIRE RFIRQF1
    778          
    779          
    780          /*=================================================================================================
    781           * @fn          rxAddrIsr
    782           *
    783           * @brief       Receive ISR state for decoding address.  Reads and stores the address information
    784           *              from the incoming packet.
    785           *
    786           * @param       none
    787           *
    788           * @return      none
    789           *=================================================================================================
    790           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    791          static void rxAddrIsr(void)
   \                     rxAddrIsr:
    792          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    793            uint8 buf[MAX_ADDR_FIELDS_LEN];
    794            uint8 dstAddrMode;
    795            uint8 srcAddrMode;
    796            uint8  * p;
    797          
    798            MAC_ASSERT(rxNextLen != 0); /* logic assumes at least one address byte in buffer */
   \   00000A   90....       MOV     DPTR,#rxNextLen
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7003         JNZ     ??rxAddrIsr_0
   \   000010                ; Setup parameters for call to function halAssertHandler
   \   000010   12....       LCALL   ??halAssertHandler?relay; Banked call to: halAssertHandler
    799          
    800            /*  read out address fields into local buffer in one shot */
    801            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
   \                     ??rxAddrIsr_0:
   \   000013                ; Setup parameters for call to function macMemReadRxFifo
   \   000013   90....       MOV     DPTR,#rxNextLen
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   AA..         MOV     R2,?XSP + 0
   \   00001A   AB..         MOV     R3,?XSP + 1
   \   00001C   12....       LCALL   ??macMemReadRxFifo?relay; Banked call to: macMemReadRxFifo
    802          
    803            /* set pointer to buffer with addressing fields */
    804            p = buf;
   \   00001F   A8..         MOV     R0,?XSP + 0
   \   000021   A9..         MOV     R1,?XSP + 1
   \   000023   88..         MOV     ?V2,R0
   \   000025   89..         MOV     ?V3,R1
   \   000027   AE..         MOV     R6,?V2
   \   000029   AF..         MOV     R7,?V3
    805          
    806            /* destination address */
    807            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
   \   00002B   90....       MOV     DPTR,#rxBuf + 2
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   13           RRC     A
   \   000030   13           RRC     A
   \   000031   543F         ANL     A,#0x3f
   \   000033   5403         ANL     A,#0x3
   \   000035   F5..         MOV     ?V0,A
    808            if (dstAddrMode != SADDR_MODE_NONE)
   \   000037   E5..         MOV     A,?V0
   \   000039   7003         JNZ     $+5
   \   00003B   02....       LJMP    ??rxAddrIsr_1 & 0xFFFF
    809            {
    810              pRxBuf->mac.srcPanId = pRxBuf->mac.dstPanId = BUILD_UINT16(p[0], p[1]);
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FA           MOV     R2,A
   \   000044   7B00         MOV     R3,#0x0
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F8           MOV     R0,A
   \   00004D   7900         MOV     R1,#0x0
   \   00004F   E4           CLR     A
   \   000050   C8           XCH     A,R0
   \   000051   F9           MOV     R1,A
   \   000052   EA           MOV     A,R2
   \   000053   28           ADD     A,R0
   \   000054   F8           MOV     R0,A
   \   000055   EB           MOV     A,R3
   \   000056   39           ADDC    A,R1
   \   000057   F9           MOV     R1,A
   \   000058   90....       MOV     DPTR,#pRxBuf
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FA           MOV     R2,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   CA           XCH     A,R2
   \   000060   242C         ADD     A,#0x2c
   \   000062   F582         MOV     DPL,A
   \   000064   CA           XCH     A,R2
   \   000065   3400         ADDC    A,#0x0
   \   000067   F583         MOV     DPH,A
   \   000069   E8           MOV     A,R0
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   E9           MOV     A,R1
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   90....       MOV     DPTR,#pRxBuf
   \   000071   E0           MOVX    A,@DPTR
   \   000072   FA           MOV     R2,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   CA           XCH     A,R2
   \   000076   242A         ADD     A,#0x2a
   \   000078   F582         MOV     DPL,A
   \   00007A   CA           XCH     A,R2
   \   00007B   3400         ADDC    A,#0x0
   \   00007D   F583         MOV     DPH,A
   \   00007F   E8           MOV     A,R0
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   E9           MOV     A,R1
   \   000083   F0           MOVX    @DPTR,A
    811              p += MAC_PAN_ID_FIELD_LEN;
   \   000084   EE           MOV     A,R6
   \   000085   2402         ADD     A,#0x2
   \   000087   FE           MOV     R6,A
   \   000088   5001         JNC     ??rxAddrIsr_2
   \   00008A   0F           INC     R7
    812              if (dstAddrMode == SADDR_MODE_EXT)
   \                     ??rxAddrIsr_2:
   \   00008B   7403         MOV     A,#0x3
   \   00008D   65..         XRL     A,?V0
   \   00008F   701C         JNZ     ??rxAddrIsr_3
    813              {
    814                sAddrExtCpy(pRxBuf->mac.dstAddr.addr.extAddr, p);
   \   000091                ; Setup parameters for call to function sAddrExtCpy
   \   000091   EE           MOV     A,R6
   \   000092   FC           MOV     R4,A
   \   000093   EF           MOV     A,R7
   \   000094   FD           MOV     R5,A
   \   000095   90....       MOV     DPTR,#pRxBuf
   \   000098   E0           MOVX    A,@DPTR
   \   000099   241B         ADD     A,#0x1b
   \   00009B   FA           MOV     R2,A
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   3400         ADDC    A,#0x0
   \   0000A0   FB           MOV     R3,A
   \   0000A1   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
    815                p += MAC_EXT_ADDR_FIELD_LEN;
   \   0000A4   EE           MOV     A,R6
   \   0000A5   2408         ADD     A,#0x8
   \   0000A7   FE           MOV     R6,A
   \   0000A8   503A         JNC     ??rxAddrIsr_1
   \   0000AA   0F           INC     R7
   \   0000AB   8037         SJMP    ??rxAddrIsr_1
    816              }
    817              else
    818              {
    819                pRxBuf->mac.dstAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
   \                     ??rxAddrIsr_3:
   \   0000AD   8E82         MOV     DPL,R6
   \   0000AF   8F83         MOV     DPH,R7
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   FA           MOV     R2,A
   \   0000B3   7B00         MOV     R3,#0x0
   \   0000B5   8E82         MOV     DPL,R6
   \   0000B7   8F83         MOV     DPH,R7
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   F8           MOV     R0,A
   \   0000BC   7900         MOV     R1,#0x0
   \   0000BE   E4           CLR     A
   \   0000BF   C8           XCH     A,R0
   \   0000C0   F9           MOV     R1,A
   \   0000C1   EA           MOV     A,R2
   \   0000C2   28           ADD     A,R0
   \   0000C3   F8           MOV     R0,A
   \   0000C4   EB           MOV     A,R3
   \   0000C5   39           ADDC    A,R1
   \   0000C6   F9           MOV     R1,A
   \   0000C7   90....       MOV     DPTR,#pRxBuf
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   FA           MOV     R2,A
   \   0000CC   A3           INC     DPTR
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   CA           XCH     A,R2
   \   0000CF   241B         ADD     A,#0x1b
   \   0000D1   F582         MOV     DPL,A
   \   0000D3   CA           XCH     A,R2
   \   0000D4   3400         ADDC    A,#0x0
   \   0000D6   F583         MOV     DPH,A
   \   0000D8   E8           MOV     A,R0
   \   0000D9   F0           MOVX    @DPTR,A
   \   0000DA   A3           INC     DPTR
   \   0000DB   E9           MOV     A,R1
   \   0000DC   F0           MOVX    @DPTR,A
    820                p += MAC_SHORT_ADDR_FIELD_LEN;
   \   0000DD   EE           MOV     A,R6
   \   0000DE   2402         ADD     A,#0x2
   \   0000E0   FE           MOV     R6,A
   \   0000E1   5001         JNC     ??rxAddrIsr_1
   \   0000E3   0F           INC     R7
    821              }
    822            }
    823          
    824            /* sources address */
    825            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
   \                     ??rxAddrIsr_1:
   \   0000E4   90....       MOV     DPTR,#rxBuf + 2
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   C4           SWAP    A
   \   0000E9   13           RRC     A
   \   0000EA   13           RRC     A
   \   0000EB   5403         ANL     A,#0x3
   \   0000ED   F5..         MOV     ?V1,A
    826            if (srcAddrMode != SADDR_MODE_NONE)
   \   0000EF   E5..         MOV     A,?V1
   \   0000F1   7003         JNZ     $+5
   \   0000F3   02....       LJMP    ??rxAddrIsr_4 & 0xFFFF
    827            {
    828              if (!(pRxBuf->internal.flags & MAC_RX_FLAG_INTRA_PAN))
   \   0000F6   90....       MOV     DPTR,#pRxBuf
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F8           MOV     R0,A
   \   0000FB   A3           INC     DPTR
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   C8           XCH     A,R0
   \   0000FE   2406         ADD     A,#0x6
   \   000100   F582         MOV     DPL,A
   \   000102   C8           XCH     A,R0
   \   000103   3400         ADDC    A,#0x0
   \   000105   F583         MOV     DPH,A
   \   000107   E0           MOVX    A,@DPTR
   \   000108   A2E6         MOV     C,0xE0 /* A   */.6
   \   00010A   4037         JC      ??rxAddrIsr_5
    829              {
    830                pRxBuf->mac.srcPanId = BUILD_UINT16(p[0], p[1]);
   \   00010C   8E82         MOV     DPL,R6
   \   00010E   8F83         MOV     DPH,R7
   \   000110   E0           MOVX    A,@DPTR
   \   000111   FA           MOV     R2,A
   \   000112   7B00         MOV     R3,#0x0
   \   000114   8E82         MOV     DPL,R6
   \   000116   8F83         MOV     DPH,R7
   \   000118   A3           INC     DPTR
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   F8           MOV     R0,A
   \   00011B   7900         MOV     R1,#0x0
   \   00011D   E4           CLR     A
   \   00011E   C8           XCH     A,R0
   \   00011F   F9           MOV     R1,A
   \   000120   EA           MOV     A,R2
   \   000121   28           ADD     A,R0
   \   000122   F8           MOV     R0,A
   \   000123   EB           MOV     A,R3
   \   000124   39           ADDC    A,R1
   \   000125   F9           MOV     R1,A
   \   000126   90....       MOV     DPTR,#pRxBuf
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   FA           MOV     R2,A
   \   00012B   A3           INC     DPTR
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   CA           XCH     A,R2
   \   00012E   242A         ADD     A,#0x2a
   \   000130   F582         MOV     DPL,A
   \   000132   CA           XCH     A,R2
   \   000133   3400         ADDC    A,#0x0
   \   000135   F583         MOV     DPH,A
   \   000137   E8           MOV     A,R0
   \   000138   F0           MOVX    @DPTR,A
   \   000139   A3           INC     DPTR
   \   00013A   E9           MOV     A,R1
   \   00013B   F0           MOVX    @DPTR,A
    831                p += MAC_PAN_ID_FIELD_LEN;
   \   00013C   EE           MOV     A,R6
   \   00013D   2402         ADD     A,#0x2
   \   00013F   FE           MOV     R6,A
   \   000140   5001         JNC     ??rxAddrIsr_5
   \   000142   0F           INC     R7
    832              }
    833              if (srcAddrMode == SADDR_MODE_EXT)
   \                     ??rxAddrIsr_5:
   \   000143   7403         MOV     A,#0x3
   \   000145   65..         XRL     A,?V1
   \   000147   7015         JNZ     ??rxAddrIsr_6
    834              {
    835                sAddrExtCpy(pRxBuf->mac.srcAddr.addr.extAddr, p);
   \   000149                ; Setup parameters for call to function sAddrExtCpy
   \   000149   EE           MOV     A,R6
   \   00014A   FC           MOV     R4,A
   \   00014B   EF           MOV     A,R7
   \   00014C   FD           MOV     R5,A
   \   00014D   90....       MOV     DPTR,#pRxBuf
   \   000150   E0           MOVX    A,@DPTR
   \   000151   2412         ADD     A,#0x12
   \   000153   FA           MOV     R2,A
   \   000154   A3           INC     DPTR
   \   000155   E0           MOVX    A,@DPTR
   \   000156   3400         ADDC    A,#0x0
   \   000158   FB           MOV     R3,A
   \   000159   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   00015C   8030         SJMP    ??rxAddrIsr_4
    836              }
    837              else
    838              {
    839                pRxBuf->mac.srcAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
   \                     ??rxAddrIsr_6:
   \   00015E   8E82         MOV     DPL,R6
   \   000160   8F83         MOV     DPH,R7
   \   000162   E0           MOVX    A,@DPTR
   \   000163   FA           MOV     R2,A
   \   000164   7B00         MOV     R3,#0x0
   \   000166   8E82         MOV     DPL,R6
   \   000168   8F83         MOV     DPH,R7
   \   00016A   A3           INC     DPTR
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   F8           MOV     R0,A
   \   00016D   7900         MOV     R1,#0x0
   \   00016F   E4           CLR     A
   \   000170   C8           XCH     A,R0
   \   000171   F9           MOV     R1,A
   \   000172   EA           MOV     A,R2
   \   000173   28           ADD     A,R0
   \   000174   F8           MOV     R0,A
   \   000175   EB           MOV     A,R3
   \   000176   39           ADDC    A,R1
   \   000177   F9           MOV     R1,A
   \   000178   90....       MOV     DPTR,#pRxBuf
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   FA           MOV     R2,A
   \   00017D   A3           INC     DPTR
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   CA           XCH     A,R2
   \   000180   2412         ADD     A,#0x12
   \   000182   F582         MOV     DPL,A
   \   000184   CA           XCH     A,R2
   \   000185   3400         ADDC    A,#0x0
   \   000187   F583         MOV     DPH,A
   \   000189   E8           MOV     A,R0
   \   00018A   F0           MOVX    @DPTR,A
   \   00018B   A3           INC     DPTR
   \   00018C   E9           MOV     A,R1
   \   00018D   F0           MOVX    @DPTR,A
    840              }
    841            }
    842          
    843            /*-------------------------------------------------------------------------------
    844             *  Prepare for payload interrupts.
    845             */
    846            pFuncRxState = &rxPayloadIsr;
   \                     ??rxAddrIsr_4:
   \   00018E   90....       MOV     DPTR,#pFuncRxState
   \   000191   74..         MOV     A,#??rxPayloadIsr?relay & 0xff
   \   000193   F0           MOVX    @DPTR,A
   \   000194   A3           INC     DPTR
   \   000195   74..         MOV     A,#(??rxPayloadIsr?relay >> 8) & 0xff
   \   000197   F0           MOVX    @DPTR,A
    847            rxPrepPayload();
   \   000198                ; Setup parameters for call to function rxPrepPayload
   \   000198   12....       LCALL   ??rxPrepPayload?relay; Banked call to: rxPrepPayload
    848          }
   \   00019B   7414         MOV     A,#0x14
   \   00019D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A0   7F04         MOV     R7,#0x4
   \   0001A2   02....       LJMP    ?BANKED_LEAVE_XDATA
    849          
    850          
    851          /*=================================================================================================
    852           * @fn          rxPrepPayload
    853           *
    854           * @brief       Common code to prepare for the payload ISR.
    855           *
    856           * @param       none
    857           *
    858           * @return      none
    859           *=================================================================================================
    860           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    861          static void rxPrepPayload(void)
   \                     rxPrepPayload:
    862          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    863            if (rxPayloadLen == 0)
   \   000004   90....       MOV     DPTR,#rxPayloadLen
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7012         JNZ     ??rxPrepPayload_0
    864            {
    865              MAC_RADIO_SET_RX_THRESHOLD(MAC_FCS_FIELD_LEN);
   \   00000A   906194       MOV     DPTR,#0x6194
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    866              pFuncRxState = &rxFcsIsr;
   \   000010   90....       MOV     DPTR,#pFuncRxState
   \   000013   74..         MOV     A,#??rxFcsIsr?relay & 0xff
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   74..         MOV     A,#(??rxFcsIsr?relay >> 8) & 0xff
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   801F         SJMP    ??rxPrepPayload_1
    867            }
    868            else
    869            {
    870              rxNextLen = MIN(rxPayloadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
   \                     ??rxPrepPayload_0:
   \   00001C   90....       MOV     DPTR,#rxPayloadLen
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   C3           CLR     C
   \   000021   9410         SUBB    A,#0x10
   \   000023   5006         JNC     ??rxPrepPayload_2
   \   000025   90....       MOV     DPTR,#rxPayloadLen
   \   000028   E0           MOVX    A,@DPTR
   \   000029   8002         SJMP    ??rxPrepPayload_3
   \                     ??rxPrepPayload_2:
   \   00002B   7410         MOV     A,#0x10
   \                     ??rxPrepPayload_3:
   \   00002D   90....       MOV     DPTR,#rxNextLen
   \   000030   F0           MOVX    @DPTR,A
    871              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   000031   90....       MOV     DPTR,#rxNextLen
   \   000034   E0           MOVX    A,@DPTR
   \   000035   24FF         ADD     A,#-0x1
   \   000037   906194       MOV     DPTR,#0x6194
   \   00003A   F0           MOVX    @DPTR,A
    872            }
    873          }
   \                     ??rxPrepPayload_1:
   \   00003B   D083         POP     DPH
   \   00003D   D082         POP     DPL
   \   00003F   02....       LJMP    ?BRET
    874          
    875          
    876          /*=================================================================================================
    877           * @fn          rxPayloadIsr
    878           *
    879           * @brief       Receive ISR state for reading out and storing the packet payload.
    880           *
    881           * @param       none
    882           *
    883           * @return      none
    884           *=================================================================================================
    885           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    886          static void rxPayloadIsr(void)
   \                     rxPayloadIsr:
    887          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    888            MAC_RADIO_READ_RX_FIFO(pRxBuf->msdu.p, rxNextLen);
   \   000004                ; Setup parameters for call to function macMemReadRxFifo
   \   000004   90....       MOV     DPTR,#rxNextLen
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   90....       MOV     DPTR,#pRxBuf
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F583         MOV     DPH,A
   \   000012   8882         MOV     DPL,R0
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FA           MOV     R2,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FB           MOV     R3,A
   \   00001B   12....       LCALL   ??macMemReadRxFifo?relay; Banked call to: macMemReadRxFifo
    889            pRxBuf->msdu.p += rxNextLen;
   \   00001E   90....       MOV     DPTR,#rxNextLen
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   7900         MOV     R1,#0x0
   \   000025   90....       MOV     DPTR,#pRxBuf
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FA           MOV     R2,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F583         MOV     DPH,A
   \   00002E   8A82         MOV     DPL,R2
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   28           ADD     A,R0
   \   000034   F8           MOV     R0,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   39           ADDC    A,R1
   \   000038   F9           MOV     R1,A
   \   000039   90....       MOV     DPTR,#pRxBuf
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   FA           MOV     R2,A
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F583         MOV     DPH,A
   \   000042   8A82         MOV     DPL,R2
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   E8           MOV     A,R0
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   E9           MOV     A,R1
   \   00004A   F0           MOVX    @DPTR,A
    890            rxPayloadLen -= rxNextLen;
   \   00004B   90....       MOV     DPTR,#rxNextLen
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F8           MOV     R0,A
   \   000050   90....       MOV     DPTR,#rxPayloadLen
   \   000053   E0           MOVX    A,@DPTR
   \   000054   C3           CLR     C
   \   000055   98           SUBB    A,R0
   \   000056   F0           MOVX    @DPTR,A
    891          
    892            rxPrepPayload();
   \   000057                ; Setup parameters for call to function rxPrepPayload
   \   000057   12....       LCALL   ??rxPrepPayload?relay; Banked call to: rxPrepPayload
    893          }
   \   00005A   D083         POP     DPH
   \   00005C   D082         POP     DPL
   \   00005E   02....       LJMP    ?BRET
    894          
    895          
    896          /*=================================================================================================
    897           * @fn          rxFcsIsr
    898           *
    899           * @brief       Receive ISR state for handling the FCS.
    900           *
    901           * @param       none
    902           *
    903           * @return      none
    904           *=================================================================================================
    905           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    906          static void rxFcsIsr(void)
   \                     rxFcsIsr:
    907          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    908            uint8 crcOK;
    909            uint8 ackWithPending = 0;
   \   000005   7E00         MOV     R6,#0x0
    910          
    911            /* read FCS, rxBuf is now available storage */
    912            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_FCS_FIELD_LEN);
   \   000007                ; Setup parameters for call to function macMemReadRxFifo
   \   000007   7902         MOV     R1,#0x2
   \   000009   7A..         MOV     R2,#rxBuf & 0xff
   \   00000B   7B..         MOV     R3,#(rxBuf >> 8) & 0xff
   \   00000D   12....       LCALL   ??macMemReadRxFifo?relay; Banked call to: macMemReadRxFifo
    913          
    914            /*
    915             *  The FCS has actually been replaced within the radio by a proprietary version of the FCS.
    916             *  This proprietary FCS is two bytes (same length as the real FCS) and contains:
    917             *    1) the RSSI value
    918             *    2) the average correlation value (used for LQI)
    919             *    3) a CRC passed bit
    920             */
    921          
    922            /* save the "CRC-is-OK" status */
    923            crcOK = PROPRIETARY_FCS_CRC_OK(rxBuf);
   \   000010   90....       MOV     DPTR,#rxBuf + 1
   \   000013   E0           MOVX    A,@DPTR
   \   000014   5480         ANL     A,#0x80
   \   000016   F5..         MOV     ?V1,A
    924          
    925            /*
    926             *  See if the frame should be passed up to high-level MAC.  If the CRC is OK, the
    927             *  the frame is always passed up.  Frames with a bad CRC are also passed up *if*
    928             *  a special variant of promiscuous mode is active.
    929             */
    930            if (crcOK || (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC))
   \   000018   E5..         MOV     A,?V1
   \   00001A   700B         JNZ     ??rxFcsIsr_0
   \   00001C   90....       MOV     DPTR,#rxPromiscuousMode
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6402         XRL     A,#0x2
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??rxFcsIsr_1 & 0xFFFF
    931            {
    932              int8 rssiDbm;
    933              uint8 corr;
    934          
    935          #ifdef PACKET_FILTER_STATS
    936              rxCrcSuccess++;
    937          #endif /* PACKET_FILTER_STATS */
    938          
    939              /*
    940               *  As power saving optimization, set state variable to indicate physical receive
    941               *  has completed and then request turning of the receiver.  This means the receiver
    942               *  can be off (if other conditions permit) during execution of the callback function.
    943               *
    944               *  The receiver will be requested to turn off once again at the end of the receive
    945               *  logic.  There is no harm in doing this.
    946               */
    947              macRxActive = MAC_RX_ACTIVE_DONE;
   \                     ??rxFcsIsr_0:
   \   000027   90....       MOV     DPTR,#macRxActive
   \   00002A   7402         MOV     A,#0x2
   \   00002C   F0           MOVX    @DPTR,A
    948              macRxOffRequest();
   \   00002D                ; Setup parameters for call to function macRxOffRequest
   \   00002D   12....       LCALL   ??macRxOffRequest?relay; Banked call to: macRxOffRequest
    949          
    950              /* decode RSSI and correlation values */
    951              rssiDbm = PROPRIETARY_FCS_RSSI(rxBuf) + MAC_RADIO_RSSI_OFFSET;
   \   000030   90....       MOV     DPTR,#rxBuf
   \   000033   E0           MOVX    A,@DPTR
   \   000034   24B7         ADD     A,#-0x49
   \   000036   FF           MOV     R7,A
    952              MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
    953              corr = PROPRIETARY_FCS_CORRELATION_VALUE(rxBuf);
   \   000037   90....       MOV     DPTR,#rxBuf + 1
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   547F         ANL     A,#0x7f
   \   00003D   F5..         MOV     ?V0,A
    954          
    955              /* Read the source matching result back */
    956              if( macSrcMatchIsEnabled && MAC_RADIO_SRC_MATCH_RESULT() )
   \   00003F   90....       MOV     DPTR,#macSrcMatchIsEnabled
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6008         JZ      ??rxFcsIsr_2
   \   000045                ; Setup parameters for call to function MAC_SrcMatchCheckResult
   \   000045   12....       LCALL   ??MAC_SrcMatchCheckResult?relay; Banked call to: MAC_SrcMatchCheckResult
   \   000048   E9           MOV     A,R1
   \   000049   6002         JZ      ??rxFcsIsr_2
    957              {
    958                /* This result will not overwrite the previously determined pRxBuf->internal.flags */
    959                ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   00004B   7E04         MOV     R6,#0x4
    960              }
    961          
    962              /* record parameters that get passed up to high-level */
    963              pRxBuf->internal.flags |= ( crcOK | ackWithPending );
   \                     ??rxFcsIsr_2:
   \   00004D   E5..         MOV     A,?V1
   \   00004F   4E           ORL     A,R6
   \   000050   F8           MOV     R0,A
   \   000051   90....       MOV     DPTR,#pRxBuf
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F9           MOV     R1,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   C9           XCH     A,R1
   \   000059   2406         ADD     A,#0x6
   \   00005B   F582         MOV     DPL,A
   \   00005D   C9           XCH     A,R1
   \   00005E   3400         ADDC    A,#0x0
   \   000060   F583         MOV     DPH,A
   \   000062   E0           MOVX    A,@DPTR
   \   000063   48           ORL     A,R0
   \   000064   F0           MOVX    @DPTR,A
    964              pRxBuf->mac.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
   \   000065                ; Setup parameters for call to function macRadioComputeLQI
   \   000065   AA..         MOV     R2,?V0
   \   000067   EF           MOV     A,R7
   \   000068   F9           MOV     R1,A
   \   000069   12....       LCALL   ??macRadioComputeLQI?relay; Banked call to: macRadioComputeLQI
   \   00006C   E9           MOV     A,R1
   \   00006D   C0E0         PUSH    A
   \   00006F   90....       MOV     DPTR,#pRxBuf
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F8           MOV     R0,A
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   C8           XCH     A,R0
   \   000077   242E         ADD     A,#0x2e
   \   000079   F582         MOV     DPL,A
   \   00007B   C8           XCH     A,R0
   \   00007C   3400         ADDC    A,#0x0
   \   00007E   F583         MOV     DPH,A
   \   000080   D0E0         POP     A
   \   000082   F0           MOVX    @DPTR,A
    965              pRxBuf->mac.rssi = rssiDbm;
   \   000083   EF           MOV     A,R7
   \   000084   C0E0         PUSH    A
   \   000086   90....       MOV     DPTR,#pRxBuf
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F8           MOV     R0,A
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   C8           XCH     A,R0
   \   00008E   2430         ADD     A,#0x30
   \   000090   F582         MOV     DPL,A
   \   000092   C8           XCH     A,R0
   \   000093   3400         ADDC    A,#0x0
   \   000095   F583         MOV     DPH,A
   \   000097   D0E0         POP     A
   \   000099   F0           MOVX    @DPTR,A
    966              pRxBuf->mac.correlation = corr;
   \   00009A   E5..         MOV     A,?V0
   \   00009C   C0E0         PUSH    A
   \   00009E   90....       MOV     DPTR,#pRxBuf
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   F8           MOV     R0,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   C8           XCH     A,R0
   \   0000A6   242F         ADD     A,#0x2f
   \   0000A8   F582         MOV     DPL,A
   \   0000AA   C8           XCH     A,R0
   \   0000AB   3400         ADDC    A,#0x0
   \   0000AD   F583         MOV     DPH,A
   \   0000AF   D0E0         POP     A
   \   0000B1   F0           MOVX    @DPTR,A
    967          
    968              /* set the MSDU pointer to point at start of data */
    969              pRxBuf->msdu.p = (uint8 *) (pRxBuf + 1);
   \   0000B2   90....       MOV     DPTR,#pRxBuf
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   2432         ADD     A,#0x32
   \   0000B8   F8           MOV     R0,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   3400         ADDC    A,#0x0
   \   0000BD   F9           MOV     R1,A
   \   0000BE   90....       MOV     DPTR,#pRxBuf
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   FA           MOV     R2,A
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F583         MOV     DPH,A
   \   0000C7   8A82         MOV     DPL,R2
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   E8           MOV     A,R0
   \   0000CC   F0           MOVX    @DPTR,A
   \   0000CD   A3           INC     DPTR
   \   0000CE   E9           MOV     A,R1
   \   0000CF   F0           MOVX    @DPTR,A
    970          
    971              /* finally... execute callback function */
    972              macRxCompleteCallback(pRxBuf);
   \   0000D0                ; Setup parameters for call to function macRxCompleteCallback
   \   0000D0   90....       MOV     DPTR,#pRxBuf
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   FA           MOV     R2,A
   \   0000D5   A3           INC     DPTR
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   FB           MOV     R3,A
   \   0000D8   12....       LCALL   ??macRxCompleteCallback?relay; Banked call to: macRxCompleteCallback
    973              pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
   \   0000DB   90....       MOV     DPTR,#pRxBuf
   \   0000DE   7400         MOV     A,#0x0
   \   0000E0   F0           MOVX    @DPTR,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   7400         MOV     A,#0x0
   \   0000E4   F0           MOVX    @DPTR,A
   \   0000E5   801F         SJMP    ??rxFcsIsr_3
    974            }
    975            else
    976            {
    977          #ifdef PACKET_FILTER_STATS
    978              rxCrcFailure++;
    979          #endif /* PACKET_FILTER_STATS */
    980          
    981              /*
    982               *  The CRC is bad so no ACK was sent.  Cancel any callback and clear the flag.
    983               *  (It's OK to cancel the outgoing ACK even if an ACK was not requested.  It's
    984               *  slightly more efficient to do so.)
    985               */
    986              MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \                     ??rxFcsIsr_1:
   \   0000E7   9061A4       MOV     DPTR,#0x61a4
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   C2E0         CLR     0xE0 /* A   */.0
   \   0000ED   F0           MOVX    @DPTR,A
    987              macRxOutgoingAckFlag = 0;
   \   0000EE   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   0000F1   7400         MOV     A,#0x0
   \   0000F3   F0           MOVX    @DPTR,A
    988          
    989              /* the CRC failed so the packet must be discarded */
    990              MEM_FREE((uint8 **)&pRxBuf);
   \   0000F4                ; Setup parameters for call to function macDataRxMemFree
   \   0000F4   7A..         MOV     R2,#pRxBuf & 0xff
   \   0000F6   7B..         MOV     R3,#(pRxBuf >> 8) & 0xff
   \   0000F8   12....       LCALL   ??macDataRxMemFree?relay; Banked call to: macDataRxMemFree
   \   0000FB   E9           MOV     A,R1
    991              pRxBuf = NULL;  /* needed to indicate buffer is no longer allocated */
   \   0000FC   90....       MOV     DPTR,#pRxBuf
   \   0000FF   7400         MOV     A,#0x0
   \   000101   F0           MOVX    @DPTR,A
   \   000102   A3           INC     DPTR
   \   000103   7400         MOV     A,#0x0
   \   000105   F0           MOVX    @DPTR,A
    992            }
    993          
    994            /* reset threshold level, reset receive state, and complete receive logic */
    995            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \                     ??rxFcsIsr_3:
   \   000106   906194       MOV     DPTR,#0x6194
   \   000109   7405         MOV     A,#0x5
   \   00010B   F0           MOVX    @DPTR,A
    996            pFuncRxState = &rxStartIsr;
   \   00010C   90....       MOV     DPTR,#pFuncRxState
   \   00010F   74..         MOV     A,#??rxStartIsr?relay & 0xff
   \   000111   F0           MOVX    @DPTR,A
   \   000112   A3           INC     DPTR
   \   000113   74..         MOV     A,#(??rxStartIsr?relay >> 8) & 0xff
   \   000115   F0           MOVX    @DPTR,A
    997            rxDone();
   \   000116                ; Setup parameters for call to function rxDone
   \   000116   12....       LCALL   ??rxDone?relay       ; Banked call to: rxDone
    998          }
   \   000119   7F02         MOV     R7,#0x2
   \   00011B   02....       LJMP    ?BANKED_LEAVE_XDATA
    999          
   1000          
   1001          /*=================================================================================================
   1002           * @fn          rxDone
   1003           *
   1004           * @brief       Common exit point for receive.
   1005           *
   1006           * @param       none
   1007           *
   1008           * @return      none
   1009           *=================================================================================================
   1010           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1011          static void rxDone(void)
   \                     rxDone:
   1012          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1013            /* Make sure the peak RSSI is reset */
   1014            COMPRESSION_WORKAROUND_RESET_RSSI();
   1015            
   1016            /* if the receive FIFO has overflowed, flush it here */
   1017            if (MAC_RADIO_RX_FIFO_HAS_OVERFLOWED())
   \   000004   906193       MOV     DPTR,#0x6193
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000A   500E         JNC     ??rxDone_0
   \   00000C   906193       MOV     DPTR,#0x6193
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   A2E7         MOV     C,0xE0 /* A   */.7
   \   000012   4006         JC      ??rxDone_0
   1018            {
   1019              MAC_RADIO_FLUSH_RX_FIFO();
   \   000014   75E1ED       MOV     0xe1,#-0x13
   \   000017   75E1ED       MOV     0xe1,#-0x13
   1020            }
   1021          
   1022            /* mark receive as inactive */
   1023            macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxDone_0:
   \   00001A   90....       MOV     DPTR,#macRxActive
   \   00001D   7400         MOV     A,#0x0
   \   00001F   F0           MOVX    @DPTR,A
   1024          
   1025            /* if there is no outgoing ACK, run the post receive updates */
   1026            if (!macRxOutgoingAckFlag)
   \   000020   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000023   E0           MOVX    A,@DPTR
   \   000024   7003         JNZ     ??rxDone_1
   1027            {
   1028              rxPostRxUpdates();
   \   000026                ; Setup parameters for call to function rxPostRxUpdates
   \   000026   12....       LCALL   ??rxPostRxUpdates?relay; Banked call to: rxPostRxUpdates
   1029            }
   1030          }
   \                     ??rxDone_1:
   \   000029   D083         POP     DPH
   \   00002B   D082         POP     DPL
   \   00002D   02....       LJMP    ?BRET
   \   000030                REQUIRE RFST
   1031          
   1032          
   1033          /**************************************************************************************************
   1034           * @fn          macRxAckTxDoneCallback
   1035           *
   1036           * @brief       Function called when the outoing ACK has completed transmitting.
   1037           *
   1038           * @param       none
   1039           *
   1040           * @return      none
   1041           **************************************************************************************************
   1042           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1043          void macRxAckTxDoneCallback(void)
   \                     macRxAckTxDoneCallback:
   1044          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1045            macRxOutgoingAckFlag = 0;
   \   000004   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000007   7400         MOV     A,#0x0
   \   000009   F0           MOVX    @DPTR,A
   1046          
   1047            /*
   1048             *  With certain interrupt priorities and timing conditions, it is possible this callback
   1049             *  could be executed before the primary receive logic completes.  To prevent this, the
   1050             *  post updates are only executed if receive logic is no longer active.  In the case the
   1051             *  post updates are not executed here, they will execute when the main receive logic
   1052             *  completes.
   1053             */
   1054            if (!macRxActive)
   \   00000A   90....       MOV     DPTR,#macRxActive
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7003         JNZ     ??macRxAckTxDoneCallback_0
   1055            {
   1056              rxPostRxUpdates();
   \   000010                ; Setup parameters for call to function rxPostRxUpdates
   \   000010   12....       LCALL   ??rxPostRxUpdates?relay; Banked call to: rxPostRxUpdates
   1057            }
   1058          }
   \                     ??macRxAckTxDoneCallback_0:
   \   000013   D083         POP     DPH
   \   000015   D082         POP     DPL
   \   000017   02....       LJMP    ?BRET
   1059          
   1060          
   1061          /*=================================================================================================
   1062           * @fn          rxPostRxUpdates
   1063           *
   1064           * @brief       Updates that need to be performed once receive is complete.
   1065           *
   1066           *              It is not fatal to execute this function if somehow receive is active.  Under
   1067           *              certain timing/interrupt conditions a new receive may have started before this
   1068           *              function executes.  This should happen very rarely (if it happens at all) and
   1069           *              would cause no problems.
   1070           *
   1071           * @param       none
   1072           *
   1073           * @return      none
   1074           *=================================================================================================
   1075           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1076          static void rxPostRxUpdates(void)
   \                     rxPostRxUpdates:
   1077          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1078            /* turn off receiver if permitted */
   1079            macRxOffRequest();
   \   000004                ; Setup parameters for call to function macRxOffRequest
   \   000004   12....       LCALL   ??macRxOffRequest?relay; Banked call to: macRxOffRequest
   1080          
   1081            /* update the transmit power, update may have been blocked by transmit of outgoing ACK */
   1082            macRadioUpdateTxPower();
   \   000007                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000007   12....       LCALL   ??macRadioUpdateTxPower?relay; Banked call to: macRadioUpdateTxPower
   1083          
   1084            /* initiate and transmit that was queued during receive */
   1085            macTxStartQueuedFrame();
   \   00000A                ; Setup parameters for call to function macTxStartQueuedFrame
   \   00000A   12....       LCALL   ??macTxStartQueuedFrame?relay; Banked call to: macTxStartQueuedFrame
   1086          }
   \   00000D   D083         POP     DPH
   \   00000F   D082         POP     DPL
   \   000011   02....       LJMP    ?BRET
   1087          
   1088          
   1089          /*=================================================================================================
   1090           * @fn          rxDiscardFrame
   1091           *
   1092           * @brief       Initializes for discarding a packet.  Must be called before ACK is strobed.
   1093           *
   1094           * @param       none
   1095           *
   1096           * @return      none
   1097           *=================================================================================================
   1098           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1099          static void rxDiscardFrame(void)
   \                     rxDiscardFrame:
   1100          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1101            MAC_ASSERT(pFuncRxState == &rxStartIsr); /* illegal state for calling discard frame function */
   \   000004   90....       MOV     DPTR,#pFuncRxState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   64..         XRL     A,#??rxStartIsr?relay & 0xff
   \   00000A   7004         JNZ     ??rxDiscardFrame_0
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   64..         XRL     A,#(??rxStartIsr?relay >> 8) & 0xff
   \                     ??rxDiscardFrame_0:
   \   000010   6003         JZ      ??rxDiscardFrame_1
   \   000012                ; Setup parameters for call to function halAssertHandler
   \   000012   12....       LCALL   ??halAssertHandler?relay; Banked call to: halAssertHandler
   1102          
   1103            if (rxUnreadLen == 0)
   \                     ??rxDiscardFrame_1:
   \   000015   90....       MOV     DPTR,#rxUnreadLen
   \   000018   E0           MOVX    A,@DPTR
   \   000019   7005         JNZ     ??rxDiscardFrame_2
   1104            {
   1105              rxDone();
   \   00001B                ; Setup parameters for call to function rxDone
   \   00001B   12....       LCALL   ??rxDone?relay       ; Banked call to: rxDone
   \   00001E   8029         SJMP    ??rxDiscardFrame_3
   1106            }
   1107            else
   1108            {
   1109              rxNextLen = MIN(rxUnreadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
   \                     ??rxDiscardFrame_2:
   \   000020   90....       MOV     DPTR,#rxUnreadLen
   \   000023   E0           MOVX    A,@DPTR
   \   000024   C3           CLR     C
   \   000025   9410         SUBB    A,#0x10
   \   000027   5006         JNC     ??rxDiscardFrame_4
   \   000029   90....       MOV     DPTR,#rxUnreadLen
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   8002         SJMP    ??rxDiscardFrame_5
   \                     ??rxDiscardFrame_4:
   \   00002F   7410         MOV     A,#0x10
   \                     ??rxDiscardFrame_5:
   \   000031   90....       MOV     DPTR,#rxNextLen
   \   000034   F0           MOVX    @DPTR,A
   1110              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   000035   90....       MOV     DPTR,#rxNextLen
   \   000038   E0           MOVX    A,@DPTR
   \   000039   24FF         ADD     A,#-0x1
   \   00003B   906194       MOV     DPTR,#0x6194
   \   00003E   F0           MOVX    @DPTR,A
   1111              pFuncRxState = &rxDiscardIsr;
   \   00003F   90....       MOV     DPTR,#pFuncRxState
   \   000042   74..         MOV     A,#??rxDiscardIsr?relay & 0xff
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   74..         MOV     A,#(??rxDiscardIsr?relay >> 8) & 0xff
   \   000048   F0           MOVX    @DPTR,A
   1112            }
   1113          }
   \                     ??rxDiscardFrame_3:
   \   000049   D083         POP     DPH
   \   00004B   D082         POP     DPL
   \   00004D   02....       LJMP    ?BRET
   1114          
   1115          
   1116          /*=================================================================================================
   1117           * @fn          rxDiscardIsr
   1118           *
   1119           * @brief       Receive ISR state for discarding a packet.
   1120           *
   1121           * @param       none
   1122           *
   1123           * @return      none
   1124           *=================================================================================================
   1125           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1126          static void rxDiscardIsr(void)
   \                     rxDiscardIsr:
   1127          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 16
   \   000004   74F0         MOV     A,#-0x10
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1128            uint8 buf[MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT];
   1129          
   1130            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
   \   000009                ; Setup parameters for call to function macMemReadRxFifo
   \   000009   90....       MOV     DPTR,#rxNextLen
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   AA..         MOV     R2,?XSP + 0
   \   000010   AB..         MOV     R3,?XSP + 1
   \   000012   12....       LCALL   ??macMemReadRxFifo?relay; Banked call to: macMemReadRxFifo
   1131            rxUnreadLen -= rxNextLen;
   \   000015   90....       MOV     DPTR,#rxNextLen
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   90....       MOV     DPTR,#rxUnreadLen
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   C3           CLR     C
   \   00001F   98           SUBB    A,R0
   \   000020   F0           MOVX    @DPTR,A
   1132          
   1133            /* read out and discard bytes until all bytes of packet are disposed of */
   1134            if (rxUnreadLen != 0)
   \   000021   90....       MOV     DPTR,#rxUnreadLen
   \   000024   E0           MOVX    A,@DPTR
   \   000025   601D         JZ      ??rxDiscardIsr_0
   1135            {
   1136              if (rxUnreadLen < MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT)
   \   000027   90....       MOV     DPTR,#rxUnreadLen
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   C3           CLR     C
   \   00002C   9410         SUBB    A,#0x10
   \   00002E   5027         JNC     ??rxDiscardIsr_1
   1137              {
   1138                rxNextLen = rxUnreadLen;
   \   000030   90....       MOV     DPTR,#rxUnreadLen
   \   000033   E0           MOVX    A,@DPTR
   \   000034   90....       MOV     DPTR,#rxNextLen
   \   000037   F0           MOVX    @DPTR,A
   1139                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   000038   90....       MOV     DPTR,#rxNextLen
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   24FF         ADD     A,#-0x1
   \   00003E   906194       MOV     DPTR,#0x6194
   \   000041   F0           MOVX    @DPTR,A
   \   000042   8013         SJMP    ??rxDiscardIsr_1
   1140              }
   1141            }
   1142            else
   1143            {
   1144              /* reset threshold level, reset receive state, and complete receive logic */
   1145              MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \                     ??rxDiscardIsr_0:
   \   000044   906194       MOV     DPTR,#0x6194
   \   000047   7405         MOV     A,#0x5
   \   000049   F0           MOVX    @DPTR,A
   1146              pFuncRxState = &rxStartIsr;
   \   00004A   90....       MOV     DPTR,#pFuncRxState
   \   00004D   74..         MOV     A,#??rxStartIsr?relay & 0xff
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   74..         MOV     A,#(??rxStartIsr?relay >> 8) & 0xff
   \   000053   F0           MOVX    @DPTR,A
   1147              rxDone();
   \   000054                ; Setup parameters for call to function rxDone
   \   000054   12....       LCALL   ??rxDone?relay       ; Banked call to: rxDone
   1148            }
   1149          }
   \                     ??rxDiscardIsr_1:
   \   000057   7410         MOV     A,#0x10
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005C   D083         POP     DPH
   \   00005E   D082         POP     DPL
   \   000060   02....       LJMP    ?BRET
   1150          
   1151          
   1152          /**************************************************************************************************
   1153           * @fn          maxRxRifoOverflowIsr
   1154           *
   1155           * @brief       This interrupt service routine is called when RX FIFO overflow. Note that this
   1156           *              exception does not retrieve the good frames that are trapped in the RX FIFO.
   1157           *              It simply halts and cleanup the RX.
   1158           *
   1159           * @param       none
   1160           *
   1161           * @return      none
   1162           **************************************************************************************************
   1163           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1164          MAC_INTERNAL_API void macRxFifoOverflowIsr(void)
   \                     macRxFifoOverflowIsr:
   1165          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1166            rxFifoOverflowCount++; /* This flag is used for debug purpose only */
   \   000004   90....       MOV     DPTR,#rxFifoOverflowCount
   \   000007   E0           MOVX    A,@DPTR
   \   000008   2401         ADD     A,#0x1
   \   00000A   F0           MOVX    @DPTR,A
   1167            macRxHaltCleanup();
   \   00000B                ; Setup parameters for call to function macRxHaltCleanup
   \   00000B   12....       LCALL   ??macRxHaltCleanup?relay; Banked call to: macRxHaltCleanup
   1168          }
   \   00000E   D083         POP     DPH
   \   000010   D082         POP     DPL
   \   000012   02....       LJMP    ?BRET
   1169          
   1170          
   1171          /**************************************************************************************************
   1172           * @fn          macRxPromiscuousMode
   1173           *
   1174           * @brief       Sets promiscuous mode - enabling or disabling it.
   1175           *
   1176           * @param       none
   1177           *
   1178           * @return      none
   1179           **************************************************************************************************
   1180           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1181          MAC_INTERNAL_API void macRxPromiscuousMode(uint8 mode)
   \                     macRxPromiscuousMode:
   1182          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1183            rxPromiscuousMode = mode;
   \   000007   EE           MOV     A,R6
   \   000008   90....       MOV     DPTR,#rxPromiscuousMode
   \   00000B   F0           MOVX    @DPTR,A
   1184          
   1185            if (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_OFF)
   \   00000C   90....       MOV     DPTR,#rxPromiscuousMode
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   700F         JNZ     ??macRxPromiscuousMode_0
   1186            {
   1187                MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
   \   000012   906180       MOV     DPTR,#0x6180
   \   000015   7400         MOV     A,#0x0
   \   000017   F0           MOVX    @DPTR,A
   \   000018   906180       MOV     DPTR,#0x6180
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   4405         ORL     A,#0x5
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   8014         SJMP    ??macRxPromiscuousMode_1
   1188            }
   1189            else
   1190            {
   1191              MAC_ASSERT((mode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC)   ||
   1192                         (mode == MAC_PROMISCUOUS_MODE_COMPLIANT));  /* invalid mode */
   \                     ??macRxPromiscuousMode_0:
   \   000021   7402         MOV     A,#0x2
   \   000023   6E           XRL     A,R6
   \   000024   6008         JZ      ??macRxPromiscuousMode_2
   \   000026   7401         MOV     A,#0x1
   \   000028   6E           XRL     A,R6
   \   000029   6003         JZ      ??macRxPromiscuousMode_2
   \   00002B                ; Setup parameters for call to function halAssertHandler
   \   00002B   12....       LCALL   ??halAssertHandler?relay; Banked call to: halAssertHandler
   1193          
   1194              MAC_RADIO_TURN_OFF_RX_FRAME_FILTERING();
   \                     ??macRxPromiscuousMode_2:
   \   00002E   906180       MOV     DPTR,#0x6180
   \   000031   E0           MOVX    A,@DPTR
   \   000032   C2E0         CLR     0xE0 /* A   */.0
   \   000034   F0           MOVX    @DPTR,A
   1195            }
   1196          }
   \                     ??macRxPromiscuousMode_1:
   \   000035   7F01         MOV     R7,#0x1
   \   000037   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxRadioPowerUpInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxRadioPowerUpInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxTxReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxTxReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxHaltCleanup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxHaltCleanup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxHaltCleanupFinalStep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxHaltCleanupFinalStep

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxThresholdIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxThresholdIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxStartIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxStartIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxAddrIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxAddrIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxPrepPayload?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxPrepPayload

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxPayloadIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxPayloadIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxFcsIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxFcsIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxDone?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxDone

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxAckTxDoneCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxAckTxDoneCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxPostRxUpdates?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxPostRxUpdates

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxDiscardFrame?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxDiscardFrame

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxDiscardIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxDiscardIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxFifoOverflowIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxFifoOverflowIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxPromiscuousMode?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxPromiscuousMode
   1197          
   1198          #ifdef CC2591_COMPRESSION_WORKAROUND
   1199          /**************************************************************************************************
   1200           * @fn          macRxResetRssi
   1201           *
   1202           * @brief       This function reset RSSI peak if the device is not actively in TX or RX.
   1203           *
   1204           * @param       none
   1205           *
   1206           * @return      none
   1207           **************************************************************************************************
   1208           */
   1209          void macRxResetRssi(void)
   1210          {
   1211            if ( !(macRxActive || macRxOutgoingAckFlag || macTxActive) )
   1212            {
   1213              COMPRESSION_WORKAROUND_RESET_RSSI();
   1214            }
   1215          }
   1216          #endif /* CC2591_COMPRESSION_WORKAROUND */
   1217          
   1218          /**************************************************************************************************
   1219           *                                  Compile Time Integrity Checks
   1220           **************************************************************************************************
   1221           */
   1222          
   1223          /* check for changes to the spec that would affect the source code */
   1224          #if ((MAC_A_MAX_PHY_PACKET_SIZE   !=  0x7F )   ||  \
   1225               (MAC_FCF_FIELD_LEN           !=  2    )   ||  \
   1226               (MAC_FCF_FRAME_TYPE_POS      !=  0    )   ||  \
   1227               (MAC_FCF_FRAME_PENDING_POS   !=  4    )   ||  \
   1228               (MAC_FCF_ACK_REQUEST_POS     !=  5    )   ||  \
   1229               (MAC_FCF_INTRA_PAN_POS       !=  6    )   ||  \
   1230               (MAC_FCF_DST_ADDR_MODE_POS   !=  10   )   ||  \
   1231               (MAC_FCF_FRAME_VERSION_POS   !=  12   )   ||  \
   1232               (MAC_FCF_SRC_ADDR_MODE_POS   !=  14   ))
   1233          #error "ERROR!  Change to the spec that requires modification of source code."
   1234          #endif
   1235          
   1236          /* check for changes to the internal flags format */
   1237          #if ((MAC_RX_FLAG_VERSION      !=  0x03)  ||  \
   1238               (MAC_RX_FLAG_ACK_PENDING  !=  0x04)  ||  \
   1239               (MAC_RX_FLAG_SECURITY     !=  0x08)  ||  \
   1240               (MAC_RX_FLAG_PENDING      !=  0x10)  ||  \
   1241               (MAC_RX_FLAG_ACK_REQUEST  !=  0x20)  ||  \
   1242               (MAC_RX_FLAG_INTRA_PAN    !=  0x40))
   1243          #error "ERROR!  Change to the internal RX flags format.  Requires modification of source code."
   1244          #endif
   1245          
   1246          /* validate CRC OK bit optimization */
   1247          #if (MAC_RX_FLAG_CRC_OK != PROPRIETARY_FCS_CRC_OK_BIT)
   1248          #error "ERROR!  Optimization relies on these bits having the same position."
   1249          #endif
   1250          
   1251          #if (MAC_RX_ACTIVE_NO_ACTIVITY != 0x00)
   1252          #error "ERROR! Zero is reserved value of macRxActive. Allows boolean operations, e.g !macRxActive."
   1253          #endif
   1254          
   1255          #if (MAC_PROMISCUOUS_MODE_OFF != 0x00)
   1256          #error "ERROR! Zero is reserved value of rxPromiscuousMode. Allows boolean operations, e.g !rxPromiscuousMode."
   1257          #endif
   1258          
   1259          
   1260          /**************************************************************************************************
   1261          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   macRxAckTxDoneCallback
        2      0   -> rxPostRxUpdates
      2      0   macRxFifoOverflowIsr
        2      0   -> macRxHaltCleanup
      2      0   macRxHaltCleanup
        2      0   -> rxHaltCleanupFinalStep
      2      0   macRxInit
      0      9   macRxPromiscuousMode
        0      9   -> halAssertHandler
      2      0   macRxRadioPowerUpInit
      2      0   macRxThresholdIsr
        2      0   -> rxHaltCleanupFinalStep
      2      0   macRxTxReset
        2      0   -> macRxHardDisable
        2      0   -> macRxPromiscuousMode
      0     32   rxAddrIsr
        0     32   -> halAssertHandler
        0     32   -> macMemReadRxFifo
        0     32   -> rxPrepPayload
        0     32   -> sAddrExtCpy
      2     19   rxDiscardFrame
        2      0   -> halAssertHandler
        2      0   -> rxDone
      2     16   rxDiscardIsr
        2     16   -> macMemReadRxFifo
        2     16   -> rxDone
      2     19   rxDone
        2      0   -> rxPostRxUpdates
      1     10   rxFcsIsr
        0     10   -> MAC_SrcMatchCheckResult
        0     10   -> macDataRxMemFree
        0     10   -> macMemReadRxFifo
        0     10   -> macRadioComputeLQI
        0     10   -> macRxCompleteCallback
        0     10   -> macRxOffRequest
        0     10   -> rxDone
      0      9   rxHaltCleanupFinalStep
        0      9   -> macDataRxMemFree
        0      9   -> rxPostRxUpdates
      2      0   rxPayloadIsr
        2      0   -> macMemReadRxFifo
        2      0   -> rxPrepPayload
      2     19   rxPostRxUpdates
        2      0   -> macRadioUpdateTxPower
        2      0   -> macRxOffRequest
        2      0   -> macTxStartQueuedFrame
      2     32   rxPrepPayload
      1     19   rxStartIsr
        0     19   -> MAC_SrcMatchCheckAllPending
        0     19   -> halAssertHandler
        0     19   -> macCspForceTxDoneIfPending
        0     19   -> macDataRxMemAlloc
        0     19   -> macMcuOverflowCapture
        0     19   -> macMcuTimerCapture
        0     19   -> macMemReadRxFifo
        0     19   -> macRadioComputeLQI
        0     19   -> macRxCheckMACPendingCallback
        0     19   -> macRxCheckPendingCallback
        0     19   -> macTxAckNotReceivedCallback
        0     19   -> macTxAckReceivedCallback
        0     19   -> rxDiscardFrame
        0     19   -> rxDone
        0     19   -> rxPostRxUpdates
        0     19   -> rxPrepPayload


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??macRxAckTxDoneCallback?relay
       6  ??macRxFifoOverflowIsr?relay
       6  ??macRxHaltCleanup?relay
       6  ??macRxInit?relay
       6  ??macRxPromiscuousMode?relay
       6  ??macRxRadioPowerUpInit?relay
       6  ??macRxThresholdIsr?relay
       6  ??macRxTxReset?relay
       6  ??rxAddrIsr?relay
       6  ??rxDiscardFrame?relay
       6  ??rxDiscardIsr?relay
       6  ??rxDone?relay
       6  ??rxFcsIsr?relay
       6  ??rxHaltCleanupFinalStep?relay
       6  ??rxPayloadIsr?relay
       6  ??rxPostRxUpdates?relay
       6  ??rxPrepPayload?relay
       6  ??rxStartIsr?relay
       1  RFIRQF0
       1  RFIRQF1
       1  RFST
       1  S1CON
       1  _A_IEN0
      26  macRxAckTxDoneCallback
       1  macRxActive
       4  macRxAddrLen
      21  macRxFifoOverflowIsr
       1  macRxFilter
      32  macRxHaltCleanup
      73  macRxInit
       1  macRxOutgoingAckFlag
      58  macRxPromiscuousMode
      44  macRxRadioPowerUpInit
      58  macRxThresholdIsr
      25  macRxTxReset
       2  pFuncRxState
       2  pRxBuf
     421  rxAddrIsr
       4  rxBuf
      80  rxDiscardFrame
      99  rxDiscardIsr
      48  rxDone
     286  rxFcsIsr
       1  rxFifoOverflowCount
       1  rxFilter
     116  rxHaltCleanupFinalStep
       1  rxIsrActiveFlag
       1  rxNextLen
      97  rxPayloadIsr
       1  rxPayloadLen
      20  rxPostRxUpdates
      66  rxPrepPayload
       1  rxPromiscuousMode
       1  rxResetFlag
    1130  rxStartIsr
       1  rxUnreadLen

 
 2 700 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
     4 bytes in segment CODE_C
     5 bytes in segment SFR_AN
    19 bytes in segment XDATA_Z
 
 2 812 bytes of CODE  memory
     0 bytes of DATA  memory (+ 5 bytes shared)
    19 bytes of XDATA memory

Errors: none
Warnings: none
