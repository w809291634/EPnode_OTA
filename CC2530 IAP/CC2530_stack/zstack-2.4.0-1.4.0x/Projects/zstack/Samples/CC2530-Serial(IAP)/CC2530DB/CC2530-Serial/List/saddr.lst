###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:43
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\services\saddr\saddr.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\services\saddr\saddr.c"
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        XLAB -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\saddr.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\saddr.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\services\saddr\saddr.c
      1          /****************************************************************************
      2            Filename:       saddr.c
      3            Revised:        $Date: 2009-12-10 08:32:15 -0800 (Thu, 10 Dec 2009) $
      4            Revision:       $Revision: 21311 $
      5          
      6            Description:    Zigbee and 802.15.4 device address utility functions.
      7          
      8          
      9            Copyright 2005-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ****************************************************************************/
     39          
     40          /****************************************************************************
     41           * INCLUDES
     42           */
     43          #include "hal_types.h"
     44          #include "OSAL.h"
     45          #include "saddr.h"
     46          
     47          /****************************************************************************
     48           * @fn          sAddrCmp
     49           *
     50           * @brief       Compare two device addresses.
     51           *
     52           * input parameters
     53           *
     54           * @param       pAddr1        - Pointer to first address.
     55           * @param       pAddr2        - Pointer to second address.
     56           *
     57           * output parameters
     58           *
     59           * @return      TRUE if addresses are equal, FALSE otherwise
     60           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     61          bool sAddrCmp(const sAddr_t *pAddr1, const sAddr_t *pAddr2)
   \                     sAddrCmp:
     62          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
     63            if (pAddr1->addrMode != pAddr2->addrMode)
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   85..82       MOV     DPL,?V0
   \   00001E   85..83       MOV     DPH,?V1
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   68           XRL     A,R0
   \   00002B   6004         JZ      ??sAddrCmp_0
     64            {
     65              return FALSE;
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   8064         SJMP    ??sAddrCmp_1
     66            }
     67            else if (pAddr1->addrMode == SADDR_MODE_NONE)
   \                     ??sAddrCmp_0:
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   7004         JNZ     ??sAddrCmp_2
     68            {
     69              return FALSE;
   \   000040   7900         MOV     R1,#0x0
   \   000042   8051         SJMP    ??sAddrCmp_1
     70            }
     71            else if (pAddr1->addrMode == SADDR_MODE_SHORT)
   \                     ??sAddrCmp_2:
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   6402         XRL     A,#0x2
   \   000053   7020         JNZ     ??sAddrCmp_3
     72            {
     73              return (bool) (pAddr1->addr.shortAddr == pAddr2->addr.shortAddr);
   \   000055   8E82         MOV     DPL,R6
   \   000057   8F83         MOV     DPH,R7
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F8           MOV     R0,A
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F9           MOV     R1,A
   \   00005E   85..82       MOV     DPL,?V0
   \   000061   85..83       MOV     DPH,?V1
   \   000064   E0           MOVX    A,@DPTR
   \   000065   68           XRL     A,R0
   \   000066   7003         JNZ     ??sAddrCmp_4
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   69           XRL     A,R1
   \                     ??sAddrCmp_4:
   \   00006B   7004         JNZ     ??sAddrCmp_5
   \   00006D   7901         MOV     R1,#0x1
   \   00006F   8024         SJMP    ??sAddrCmp_1
   \                     ??sAddrCmp_5:
   \   000071   7900         MOV     R1,#0x0
   \   000073   8020         SJMP    ??sAddrCmp_1
     74            }
     75            else if (pAddr1->addrMode == SADDR_MODE_EXT)
   \                     ??sAddrCmp_3:
   \   000075   8E82         MOV     DPL,R6
   \   000077   8F83         MOV     DPH,R7
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   6403         XRL     A,#0x3
   \   000084   700D         JNZ     ??sAddrCmp_6
     76            {
     77              return (sAddrExtCmp(pAddr1->addr.extAddr, pAddr2->addr.extAddr));
   \   000086                ; Setup parameters for call to function sAddrExtCmp
   \   000086   AC..         MOV     R4,?V0
   \   000088   AD..         MOV     R5,?V1
   \   00008A   EE           MOV     A,R6
   \   00008B   FA           MOV     R2,A
   \   00008C   EF           MOV     A,R7
   \   00008D   FB           MOV     R3,A
   \   00008E   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   000091   8002         SJMP    ??sAddrCmp_1
     78            }
     79            else
     80            {
     81              return FALSE;
   \                     ??sAddrCmp_6:
   \   000093   7900         MOV     R1,#0x0
   \                     ??sAddrCmp_1:
   \   000095   7F02         MOV     R7,#0x2
   \   000097   02....       LJMP    ?BANKED_LEAVE_XDATA
     82            }
     83          }
     84          
     85          /****************************************************************************
     86           * @fn          sAddrIden
     87           *
     88           * @brief       Check if two device addresses are identical.
     89           *
     90           *              This routine is virtually the same as sAddrCmp, which is used
     91           *              to determine if two different addresses are the same. However,
     92           *              this routine can be used to determine if an address is the
     93           *              same as a previously stored address. The key difference is in
     94           *              the former case, if the address mode is "none", then the
     95           *              assumption is that the two addresses can not be the same. But
     96           *              in the latter case, the address mode itself is being compared.
     97           *              So two addresses can be identical even if the address mode is
     98           *              "none", as long as the address mode of both addresses being
     99           *              compared is "none".
    100           *
    101           * input parameters
    102           *
    103           * @param       pAddr1        - Pointer to first address.
    104           * @param       pAddr2        - Pointer to second address.
    105           *
    106           * output parameters
    107           *
    108           * @return      TRUE if addresses are identical, FALSE otherwise
    109           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    110          bool sAddrIden(const sAddr_t *pAddr1, const sAddr_t *pAddr2)
   \                     sAddrIden:
    111          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
    112            // first check if the address modes are the same
    113            if (pAddr1->addrMode != pAddr2->addrMode)
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   85..82       MOV     DPL,?V0
   \   00001E   85..83       MOV     DPH,?V1
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   68           XRL     A,R0
   \   00002B   6004         JZ      ??sAddrIden_0
    114            {
    115              // no, so no point in comparing any further
    116              return FALSE;
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   8064         SJMP    ??sAddrIden_1
    117            }
    118            // the address modes are the same; check if there is no address
    119            else if (pAddr1->addrMode == SADDR_MODE_NONE)
   \                     ??sAddrIden_0:
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   7004         JNZ     ??sAddrIden_2
    120            {
    121              // no address, so no need to compare any further as both addresses have the
    122              // same address mode but no address, so they are identical
    123              return TRUE;
   \   000040   7901         MOV     R1,#0x1
   \   000042   8051         SJMP    ??sAddrIden_1
    124            }
    125            // there's an address; check if it is short
    126            else if (pAddr1->addrMode == SADDR_MODE_SHORT)
   \                     ??sAddrIden_2:
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   6402         XRL     A,#0x2
   \   000053   7020         JNZ     ??sAddrIden_3
    127            {
    128              // compare short addresses
    129              return (bool) (pAddr1->addr.shortAddr == pAddr2->addr.shortAddr);
   \   000055   8E82         MOV     DPL,R6
   \   000057   8F83         MOV     DPH,R7
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F8           MOV     R0,A
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F9           MOV     R1,A
   \   00005E   85..82       MOV     DPL,?V0
   \   000061   85..83       MOV     DPH,?V1
   \   000064   E0           MOVX    A,@DPTR
   \   000065   68           XRL     A,R0
   \   000066   7003         JNZ     ??sAddrIden_4
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   69           XRL     A,R1
   \                     ??sAddrIden_4:
   \   00006B   7004         JNZ     ??sAddrIden_5
   \   00006D   7901         MOV     R1,#0x1
   \   00006F   8024         SJMP    ??sAddrIden_1
   \                     ??sAddrIden_5:
   \   000071   7900         MOV     R1,#0x0
   \   000073   8020         SJMP    ??sAddrIden_1
    130            }
    131            // there's an address; check if it is extended
    132            else if (pAddr1->addrMode == SADDR_MODE_EXT)
   \                     ??sAddrIden_3:
   \   000075   8E82         MOV     DPL,R6
   \   000077   8F83         MOV     DPH,R7
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   6403         XRL     A,#0x3
   \   000084   700D         JNZ     ??sAddrIden_6
    133            {
    134              // compare extended addresses
    135              return (sAddrExtCmp(pAddr1->addr.extAddr, pAddr2->addr.extAddr));
   \   000086                ; Setup parameters for call to function sAddrExtCmp
   \   000086   AC..         MOV     R4,?V0
   \   000088   AD..         MOV     R5,?V1
   \   00008A   EE           MOV     A,R6
   \   00008B   FA           MOV     R2,A
   \   00008C   EF           MOV     A,R7
   \   00008D   FB           MOV     R3,A
   \   00008E   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   000091   8002         SJMP    ??sAddrIden_1
    136            }
    137            else // unknown error
    138            {
    139              return FALSE;
   \                     ??sAddrIden_6:
   \   000093   7900         MOV     R1,#0x0
   \                     ??sAddrIden_1:
   \   000095   7F02         MOV     R7,#0x2
   \   000097   02....       LJMP    ?BANKED_LEAVE_XDATA
    140            }
    141          }
    142          
    143          /****************************************************************************
    144           * @fn          sAddrCpy
    145           *
    146           * @brief       Copy a device address.
    147           *
    148           * input parameters
    149           *
    150           * @param       pSrc         - Pointer to address to copy.
    151           *
    152           * output parameters
    153           *
    154           * @param       pDest        - Pointer to address of copy.
    155           *
    156           * @return      None.
    157           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    158          void sAddrCpy(sAddr_t *pDest, const sAddr_t *pSrc)
   \                     sAddrCpy:
    159          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
    160            pDest->addrMode = pSrc->addrMode;
   \   00000D   85..82       MOV     DPL,?V0
   \   000010   85..83       MOV     DPH,?V1
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   C0E0         PUSH    A
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   D0E0         POP     A
   \   00002C   F0           MOVX    @DPTR,A
    161          
    162            if (pDest->addrMode == SADDR_MODE_EXT)
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6403         XRL     A,#0x3
   \   00003C   700D         JNZ     ??sAddrCpy_0
    163            {
    164              sAddrExtCpy(pDest->addr.extAddr, pSrc->addr.extAddr);
   \   00003E                ; Setup parameters for call to function sAddrExtCpy
   \   00003E   AC..         MOV     R4,?V0
   \   000040   AD..         MOV     R5,?V1
   \   000042   EE           MOV     A,R6
   \   000043   FA           MOV     R2,A
   \   000044   EF           MOV     A,R7
   \   000045   FB           MOV     R3,A
   \   000046   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   000049   8014         SJMP    ??sAddrCpy_1
    165            }
    166            else
    167            {
    168              pDest->addr.shortAddr = pSrc->addr.shortAddr;
   \                     ??sAddrCpy_0:
   \   00004B   85..82       MOV     DPL,?V0
   \   00004E   85..83       MOV     DPH,?V1
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F8           MOV     R0,A
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F9           MOV     R1,A
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   E8           MOV     A,R0
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \   00005D   E9           MOV     A,R1
   \   00005E   F0           MOVX    @DPTR,A
    169            }
    170          }
   \                     ??sAddrCpy_1:
   \   00005F   7F02         MOV     R7,#0x2
   \   000061   02....       LJMP    ?BANKED_LEAVE_XDATA
    171          
    172          /****************************************************************************
    173           * @fn          sAddrExtCmp
    174           *
    175           * @brief       Compare two extended addresses.
    176           *
    177           * input parameters
    178           *
    179           * @param       pAddr1        - Pointer to first address.
    180           * @param       pAddr2        - Pointer to second address.
    181           *
    182           * output parameters
    183           *
    184           * @return      TRUE if addresses are equal, FALSE otherwise
    185           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    186          bool sAddrExtCmp(const uint8 * pAddr1, const uint8 * pAddr2)
   \                     sAddrExtCmp:
    187          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    188            uint8 i;
    189          
    190            for (i = SADDR_EXT_LEN; i != 0; i--)
   \   000005   75..08       MOV     ?V0,#0x8
   \                     ??sAddrExtCmp_0:
   \   000008   E5..         MOV     A,?V0
   \   00000A   6030         JZ      ??sAddrExtCmp_1
    191            {
    192              if (*pAddr1++ != *pAddr2++)
   \   00000C   EA           MOV     A,R2
   \   00000D   F8           MOV     R0,A
   \   00000E   EB           MOV     A,R3
   \   00000F   F9           MOV     R1,A
   \   000010   8882         MOV     DPL,R0
   \   000012   8983         MOV     DPH,R1
   \   000014   A3           INC     DPTR
   \   000015   AA82         MOV     R2,DPL
   \   000017   AB83         MOV     R3,DPH
   \   000019   EC           MOV     A,R4
   \   00001A   FE           MOV     R6,A
   \   00001B   ED           MOV     A,R5
   \   00001C   FF           MOV     R7,A
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
   \   000021   A3           INC     DPTR
   \   000022   AC82         MOV     R4,DPL
   \   000024   AD83         MOV     R5,DPH
   \   000026   8882         MOV     DPL,R0
   \   000028   8983         MOV     DPH,R1
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F8           MOV     R0,A
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   E0           MOVX    A,@DPTR
   \   000031   68           XRL     A,R0
   \   000032   6004         JZ      ??sAddrExtCmp_2
    193              {
    194                return FALSE;
   \   000034   7900         MOV     R1,#0x0
   \   000036   8006         SJMP    ??sAddrExtCmp_3
    195              }
    196            }
   \                     ??sAddrExtCmp_2:
   \   000038   15..         DEC     ?V0
   \   00003A   80CC         SJMP    ??sAddrExtCmp_0
    197            return TRUE;
   \                     ??sAddrExtCmp_1:
   \   00003C   7901         MOV     R1,#0x1
   \                     ??sAddrExtCmp_3:
   \   00003E   7F02         MOV     R7,#0x2
   \   000040   02....       LJMP    ?BANKED_LEAVE_XDATA
    198          }
    199          
    200          /****************************************************************************
    201           * @fn          sAddrExtCpy
    202           *
    203           * @brief       Copy an extended address.
    204           *
    205           * input parameters
    206           *
    207           * @param       pSrc         - Pointer to address to copy.
    208           *
    209           * output parameters
    210           *
    211           * @param       pDest        - Pointer to address of copy.
    212           *
    213           * @return      pDest + SADDR_EXT_LEN.
    214           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    215          void *sAddrExtCpy(uint8 * pDest, const uint8 * pSrc)
   \                     sAddrExtCpy:
    216          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    217            return osal_memcpy(pDest, pSrc, SADDR_EXT_LEN);
   \   00000D                ; Setup parameters for call to function osal_memcpy
   \   00000D   8E..         MOV     ?V0,R6
   \   00000F   8F..         MOV     ?V1,R7
   \   000011   75..00       MOV     ?V2,#0x0
   \   000014   78..         MOV     R0,#?V0
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000019   7C08         MOV     R4,#0x8
   \   00001B   7D00         MOV     R5,#0x0
   \   00001D   AA..         MOV     R2,?V4
   \   00001F   AB..         MOV     R3,?V5
   \   000021   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000024   7403         MOV     A,#0x3
   \   000026   12....       LCALL   ?DEALLOC_XSTACK8
   \   000029   7F06         MOV     R7,#0x6
   \   00002B   02....       LJMP    ?BANKED_LEAVE_XDATA
    218          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sAddrCmp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sAddrCmp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sAddrIden?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sAddrIden

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sAddrCpy?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sAddrCpy

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sAddrExtCmp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sAddrExtCmp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sAddrExtCpy?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sAddrExtCpy
    219          
    220          
    221          
    222          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     10   sAddrCmp
        0     10   -> sAddrExtCmp
      1     10   sAddrCpy
        0     10   -> sAddrExtCpy
      0     20   sAddrExtCmp
      0     27   sAddrExtCpy
        0     17   -> osal_memcpy
      0     10   sAddrIden
        0     10   -> sAddrExtCmp


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??sAddrCmp?relay
       6  ??sAddrCpy?relay
       6  ??sAddrExtCmp?relay
       6  ??sAddrExtCpy?relay
       6  ??sAddrIden?relay
     154  sAddrCmp
     100  sAddrCpy
      67  sAddrExtCmp
      46  sAddrExtCpy
     154  sAddrIden

 
 521 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
 
 551 bytes of CODE memory

Errors: none
Warnings: none
