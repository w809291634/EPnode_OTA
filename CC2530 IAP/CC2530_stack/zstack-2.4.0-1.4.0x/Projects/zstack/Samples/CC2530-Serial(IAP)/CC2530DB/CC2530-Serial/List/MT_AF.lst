###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:40
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mt\MT_AF.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mt\MT_AF.c" -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D XLAB
#        -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\MT_AF.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\MT_AF.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mt\MT_AF.c
      1          /**************************************************************************************************
      2            Filename:       MT_AF.c
      3            Revised:        $Date: 2010-08-13 18:15:16 -0700 (Fri, 13 Aug 2010) $
      4            Revision:       $Revision: 23412 $
      5          
      6          
      7            Description:    MonitorTest functions for the AF layer.
      8          
      9          
     10            Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          
     40          **************************************************************************************************/
     41          
     42          /***************************************************************************************************
     43           * INCLUDES
     44           ***************************************************************************************************/
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "MT.h"
     48          #include "MT_AF.h"
     49          #include "MT_ZDO.h"
     50          #include "nwk.h"
     51          #include "OnBoard.h"
     52          #include "MT_UART.h"
     53          
     54          #if defined INTER_PAN
     55          #include "stub_aps.h"
     56          #endif
     57          
     58          /* ------------------------------------------------------------------------------------------------
     59           *                                          Constants
     60           * ------------------------------------------------------------------------------------------------
     61           */
     62          
     63          #if !defined MT_AF_EXEC_CNT
     64          #define MT_AF_EXEC_CNT  15
     65          #endif
     66          
     67          #if !defined MT_AF_EXEC_DLY
     68          #define MT_AF_EXEC_DLY  1000
     69          #endif
     70          
     71          /* ------------------------------------------------------------------------------------------------
     72           *                                           Typedefs
     73           * ------------------------------------------------------------------------------------------------
     74           */
     75          
     76          /*
     77          typedef struct
     78          {
     79            union
     80            {
     81              uint16      shortAddr;
     82              ZLongAddr_t extAddr;
     83            } addr;
     84            afAddrMode_t addrMode;
     85            byte endPoint;
     86            uint16 panId;  // used for the INTER_PAN feature
     87          } afAddrType_t;
     88          
     89          typedef struct
     90          {
     91            byte   TransSeqNumber;
     92            uint16 DataLength;               // Number of bytes in TransData
     93            byte  *Data;
     94          } afMSGCommandFormat_t;
     95           */
     96          
     97          typedef struct
     98          {
     99            uint8 *data;
    100            afAddrType_t dstAddr;
    101            endPointDesc_t *epDesc;
    102            uint16 cId;
    103            uint16 dataLen;
    104            uint8 transId;
    105            uint8 txOpts;
    106            uint8 radius;
    107            uint8 tick;
    108          } mtAfDataReq_t;
    109          
    110          struct _mtAfInMsgList_t
    111          {
    112            struct _mtAfInMsgList_t *next;
    113            uint8 *data;
    114            uint32 timestamp;         // Receipt timestamp from MAC.
    115            uint8 tick;
    116          };
    117          typedef struct _mtAfInMsgList_t mtAfInMsgList_t;
    118          
    119          /* ------------------------------------------------------------------------------------------------
    120           *                                        Local Variables
    121           * ------------------------------------------------------------------------------------------------
    122           */
    123          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    124          mtAfInMsgList_t *pMtAfInMsgList = NULL;
   \                     pMtAfInMsgList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          mtAfDataReq_t *pMtAfDataReq = NULL;
   \                     pMtAfDataReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    126          
    127          /* ------------------------------------------------------------------------------------------------
    128           *                                        Global Variables
    129           * ------------------------------------------------------------------------------------------------
    130           */
    131          
    132          #if defined ( MT_AF_CB_FUNC )
    133          uint16 _afCallbackSub;
    134          #endif
    135          
    136          /* ------------------------------------------------------------------------------------------------
    137           *                                        Local Functions
    138           * ------------------------------------------------------------------------------------------------
    139           */
    140          
    141          void MT_AfRegister(uint8 *pBuf);
    142          void MT_AfDataRequest(uint8 *pBuf);
    143          
    144          #if defined ( ZIGBEE_SOURCE_ROUTING )
    145          void MT_AfDataRequestSrcRtg(uint8 *pBuf);
    146          #endif
    147          
    148          #if defined INTER_PAN
    149          static void MT_AfInterPanCtl(uint8 *pBuf);
    150          #endif
    151          
    152          static void MT_AfDataRetrieve(uint8 *pBuf);
    153          static void MT_AfDataStore(uint8 *pBuf);
    154          
    155          /**************************************************************************************************
    156           * @fn          MT_AfExec
    157           *
    158           * @brief       This function is invoked by an MT timer event.
    159           *
    160           * input parameters
    161           *
    162           * None.
    163           *
    164           * output parameters
    165           *
    166           * None.
    167           *
    168           * @return      None.
    169           **************************************************************************************************
    170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    171          void MT_AfExec(void)
   \                     MT_AfExec:
    172          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    173            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \   000005   90....       MOV     DPTR,#pMtAfInMsgList
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FE           MOV     R6,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   FF           MOV     R7,A
    174          
    175            while (pItem != NULL)
   \                     ??MT_AfExec_0:
   \   00000D   EE           MOV     A,R6
   \   00000E   4F           ORL     A,R7
   \   00000F   7003         JNZ     $+5
   \   000011   02....       LJMP    ??MT_AfExec_1 & 0xFFFF
    176            {
    177              if (--(pItem->tick) == 0)
   \   000014   8E82         MOV     DPL,R6
   \   000016   8F83         MOV     DPH,R7
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   24FF         ADD     A,#-0x1
   \   000023   F8           MOV     R0,A
   \   000024   E8           MOV     A,R0
   \   000025   C0E0         PUSH    A
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   D0E0         POP     A
   \   000035   F0           MOVX    @DPTR,A
   \   000036   E8           MOV     A,R0
   \   000037   7063         JNZ     ??MT_AfExec_2
    178              {
    179                if (pMtAfInMsgList == pItem)
   \   000039   90....       MOV     DPTR,#pMtAfInMsgList
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F8           MOV     R0,A
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   EE           MOV     A,R6
   \   000042   68           XRL     A,R0
   \   000043   7002         JNZ     ??MT_AfExec_3
   \   000045   EF           MOV     A,R7
   \   000046   69           XRL     A,R1
   \                     ??MT_AfExec_3:
   \   000047   7026         JNZ     ??MT_AfExec_4
    180                {
    181                  pMtAfInMsgList = pItem->next;
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F8           MOV     R0,A
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F9           MOV     R1,A
   \   000052   90....       MOV     DPTR,#pMtAfInMsgList
   \   000055   E8           MOV     A,R0
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   E9           MOV     A,R1
   \   000059   F0           MOVX    @DPTR,A
    182                  (void)osal_mem_free(pItem);
   \   00005A                ; Setup parameters for call to function osal_mem_free
   \   00005A   EE           MOV     A,R6
   \   00005B   FA           MOV     R2,A
   \   00005C   EF           MOV     A,R7
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    183                  pItem = pMtAfInMsgList;
   \   000061   90....       MOV     DPTR,#pMtAfInMsgList
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F8           MOV     R0,A
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F9           MOV     R1,A
   \   000069   E8           MOV     A,R0
   \   00006A   FE           MOV     R6,A
   \   00006B   E9           MOV     A,R1
   \   00006C   FF           MOV     R7,A
   \   00006D   809E         SJMP    ??MT_AfExec_0
    184                }
    185                else
    186                {
    187                  pPrev->next = pItem->next;
   \                     ??MT_AfExec_4:
   \   00006F   8E82         MOV     DPL,R6
   \   000071   8F83         MOV     DPH,R7
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F8           MOV     R0,A
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F9           MOV     R1,A
   \   000078   85..82       MOV     DPL,?V0
   \   00007B   85..83       MOV     DPH,?V1
   \   00007E   E8           MOV     A,R0
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   \   000081   E9           MOV     A,R1
   \   000082   F0           MOVX    @DPTR,A
    188                  (void)osal_mem_free(pItem);
   \   000083                ; Setup parameters for call to function osal_mem_free
   \   000083   EE           MOV     A,R6
   \   000084   FA           MOV     R2,A
   \   000085   EF           MOV     A,R7
   \   000086   FB           MOV     R3,A
   \   000087   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    189                  pItem = pPrev->next;
   \   00008A   85..82       MOV     DPL,?V0
   \   00008D   85..83       MOV     DPH,?V1
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F8           MOV     R0,A
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F9           MOV     R1,A
   \   000095   E8           MOV     A,R0
   \   000096   FE           MOV     R6,A
   \   000097   E9           MOV     A,R1
   \   000098   FF           MOV     R7,A
   \   000099   02....       LJMP    ??MT_AfExec_0 & 0xFFFF
    190                }
    191              }
    192              else
    193              {
    194                pPrev = pItem;
   \                     ??MT_AfExec_2:
   \   00009C   8E..         MOV     ?V0,R6
   \   00009E   8F..         MOV     ?V1,R7
    195                pItem = pItem->next;
   \   0000A0   8E82         MOV     DPL,R6
   \   0000A2   8F83         MOV     DPH,R7
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FE           MOV     R6,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   FF           MOV     R7,A
   \   0000A9   02....       LJMP    ??MT_AfExec_0 & 0xFFFF
    196              }
    197            }
    198          
    199            if (pMtAfDataReq != NULL)
   \                     ??MT_AfExec_1:
   \   0000AC   90....       MOV     DPTR,#pMtAfDataReq
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F8           MOV     R0,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F9           MOV     R1,A
   \   0000B4   E8           MOV     A,R0
   \   0000B5   49           ORL     A,R1
   \   0000B6   6044         JZ      ??MT_AfExec_5
    200            {
    201              if (--(pMtAfDataReq->tick) == 0)
   \   0000B8   90....       MOV     DPTR,#pMtAfDataReq
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   F8           MOV     R0,A
   \   0000BD   A3           INC     DPTR
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   C8           XCH     A,R0
   \   0000C0   2417         ADD     A,#0x17
   \   0000C2   F582         MOV     DPL,A
   \   0000C4   C8           XCH     A,R0
   \   0000C5   3400         ADDC    A,#0x0
   \   0000C7   F583         MOV     DPH,A
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   24FF         ADD     A,#-0x1
   \   0000CC   F8           MOV     R0,A
   \   0000CD   E8           MOV     A,R0
   \   0000CE   C0E0         PUSH    A
   \   0000D0   90....       MOV     DPTR,#pMtAfDataReq
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   F9           MOV     R1,A
   \   0000D5   A3           INC     DPTR
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   C9           XCH     A,R1
   \   0000D8   2417         ADD     A,#0x17
   \   0000DA   F582         MOV     DPL,A
   \   0000DC   C9           XCH     A,R1
   \   0000DD   3400         ADDC    A,#0x0
   \   0000DF   F583         MOV     DPH,A
   \   0000E1   D0E0         POP     A
   \   0000E3   F0           MOVX    @DPTR,A
   \   0000E4   E8           MOV     A,R0
   \   0000E5   7015         JNZ     ??MT_AfExec_5
    202              {
    203                (void)osal_mem_free(pMtAfDataReq);
   \   0000E7                ; Setup parameters for call to function osal_mem_free
   \   0000E7   90....       MOV     DPTR,#pMtAfDataReq
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   FA           MOV     R2,A
   \   0000EC   A3           INC     DPTR
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   FB           MOV     R3,A
   \   0000EF   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    204                pMtAfDataReq = NULL;
   \   0000F2   90....       MOV     DPTR,#pMtAfDataReq
   \   0000F5   7400         MOV     A,#0x0
   \   0000F7   F0           MOVX    @DPTR,A
   \   0000F8   A3           INC     DPTR
   \   0000F9   7400         MOV     A,#0x0
   \   0000FB   F0           MOVX    @DPTR,A
    205              }
    206            }
    207          
    208            if ((pMtAfInMsgList != NULL) || (pMtAfDataReq != NULL))
   \                     ??MT_AfExec_5:
   \   0000FC   90....       MOV     DPTR,#pMtAfInMsgList
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   F8           MOV     R0,A
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   F9           MOV     R1,A
   \   000104   E8           MOV     A,R0
   \   000105   49           ORL     A,R1
   \   000106   700C         JNZ     ??MT_AfExec_6
   \   000108   90....       MOV     DPTR,#pMtAfDataReq
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   F8           MOV     R0,A
   \   00010D   A3           INC     DPTR
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   F9           MOV     R1,A
   \   000110   E8           MOV     A,R0
   \   000111   49           ORL     A,R1
   \   000112   6020         JZ      ??MT_AfExec_7
    209            {
    210              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??MT_AfExec_6:
   \   000114                ; Setup parameters for call to function osal_start_timerEx
   \   000114   7CE8         MOV     R4,#-0x18
   \   000116   7D03         MOV     R5,#0x3
   \   000118   7A08         MOV     R2,#0x8
   \   00011A   7B00         MOV     R3,#0x0
   \   00011C   90....       MOV     DPTR,#MT_TaskID
   \   00011F   E0           MOVX    A,@DPTR
   \   000120   F9           MOV     R1,A
   \   000121   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   000124   E9           MOV     A,R1
   \   000125   600D         JZ      ??MT_AfExec_7
    211              {
    212                osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000127                ; Setup parameters for call to function osal_set_event
   \   000127   7A08         MOV     R2,#0x8
   \   000129   7B00         MOV     R3,#0x0
   \   00012B   90....       MOV     DPTR,#MT_TaskID
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   F9           MOV     R1,A
   \   000130   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   000133   E9           MOV     A,R1
    213              }
    214            }
    215          }
   \                     ??MT_AfExec_7:
   \   000134   7F02         MOV     R7,#0x2
   \   000136   02....       LJMP    ?BANKED_LEAVE_XDATA
    216          
    217          /***************************************************************************************************
    218           * @fn      MT_AfCommandProcessing
    219           *
    220           * @brief   Process all the AF commands that are issued by test tool
    221           *
    222           * @param   pBuf - pointer to the received buffer
    223           *
    224           * @return  status
    225           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    226          uint8 MT_AfCommandProcessing(uint8 *pBuf)
   \                     MT_AfCommandProcessing:
    227          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    228            uint8 status = MT_RPC_SUCCESS;
   \   000009   75..00       MOV     ?V0,#0x0
    229          
    230            switch (pBuf[MT_RPC_POS_CMD1])
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6012         JZ      ??MT_AfCommandProcessing_0
   \   000015   14           DEC     A
   \   000016   6018         JZ      ??MT_AfCommandProcessing_1
   \   000018   14           DEC     A
   \   000019   6015         JZ      ??MT_AfCommandProcessing_1
   \   00001B   14           DEC     A
   \   00001C   602D         JZ      ??MT_AfCommandProcessing_2
   \   00001E   24F2         ADD     A,#-0xe
   \   000020   6020         JZ      ??MT_AfCommandProcessing_3
   \   000022   14           DEC     A
   \   000023   6014         JZ      ??MT_AfCommandProcessing_4
   \   000025   802D         SJMP    ??MT_AfCommandProcessing_5
    231            {
    232              case MT_AF_REGISTER:
    233                MT_AfRegister(pBuf);
   \                     ??MT_AfCommandProcessing_0:
   \   000027                ; Setup parameters for call to function MT_AfRegister
   \   000027   EE           MOV     A,R6
   \   000028   FA           MOV     R2,A
   \   000029   EF           MOV     A,R7
   \   00002A   FB           MOV     R3,A
   \   00002B   12....       LCALL   ??MT_AfRegister?relay; Banked call to: MT_AfRegister
    234                break;
   \   00002E   8027         SJMP    ??MT_AfCommandProcessing_6
    235          
    236              case MT_AF_DATA_REQUEST:
    237              case MT_AF_DATA_REQUEST_EXT:
    238                MT_AfDataRequest(pBuf);
   \                     ??MT_AfCommandProcessing_1:
   \   000030                ; Setup parameters for call to function MT_AfDataRequest
   \   000030   EE           MOV     A,R6
   \   000031   FA           MOV     R2,A
   \   000032   EF           MOV     A,R7
   \   000033   FB           MOV     R3,A
   \   000034   12....       LCALL   ??MT_AfDataRequest?relay; Banked call to: MT_AfDataRequest
    239                break;
   \   000037   801E         SJMP    ??MT_AfCommandProcessing_6
    240          
    241              case MT_AF_DATA_RETRIEVE:
    242                MT_AfDataRetrieve(pBuf);
   \                     ??MT_AfCommandProcessing_4:
   \   000039                ; Setup parameters for call to function MT_AfDataRetrieve
   \   000039   EE           MOV     A,R6
   \   00003A   FA           MOV     R2,A
   \   00003B   EF           MOV     A,R7
   \   00003C   FB           MOV     R3,A
   \   00003D   12....       LCALL   ??MT_AfDataRetrieve?relay; Banked call to: MT_AfDataRetrieve
    243                break;
   \   000040   8015         SJMP    ??MT_AfCommandProcessing_6
    244                
    245              case MT_AF_DATA_STORE:
    246                MT_AfDataStore(pBuf);
   \                     ??MT_AfCommandProcessing_3:
   \   000042                ; Setup parameters for call to function MT_AfDataStore
   \   000042   EE           MOV     A,R6
   \   000043   FA           MOV     R2,A
   \   000044   EF           MOV     A,R7
   \   000045   FB           MOV     R3,A
   \   000046   12....       LCALL   ??MT_AfDataStore?relay; Banked call to: MT_AfDataStore
    247                break;
   \   000049   800C         SJMP    ??MT_AfCommandProcessing_6
    248                
    249          #if defined ( ZIGBEE_SOURCE_ROUTING )
    250              case MT_AF_DATA_REQUEST_SRCRTG:
    251                MT_AfDataRequestSrcRtg(pBuf);
   \                     ??MT_AfCommandProcessing_2:
   \   00004B                ; Setup parameters for call to function MT_AfDataRequestSrcRtg
   \   00004B   EE           MOV     A,R6
   \   00004C   FA           MOV     R2,A
   \   00004D   EF           MOV     A,R7
   \   00004E   FB           MOV     R3,A
   \   00004F   12....       LCALL   ??MT_AfDataRequestSrcRtg?relay; Banked call to: MT_AfDataRequestSrcRtg
    252                break;
   \   000052   8003         SJMP    ??MT_AfCommandProcessing_6
    253          #endif
    254                
    255          #if defined INTER_PAN
    256              case MT_AF_INTER_PAN_CTL:
    257                MT_AfInterPanCtl(pBuf);
    258                break; 
    259          #endif
    260                
    261              default:
    262                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_AfCommandProcessing_5:
   \   000054   75..02       MOV     ?V0,#0x2
    263                break;
    264            }
    265          
    266            return status;
   \                     ??MT_AfCommandProcessing_6:
   \   000057   A9..         MOV     R1,?V0
   \   000059   7F01         MOV     R7,#0x1
   \   00005B   02....       LJMP    ?BANKED_LEAVE_XDATA
    267          }
    268          
    269          /***************************************************************************************************
    270           * @fn      MT_AfRegister
    271           *
    272           * @brief   Process AF Register command
    273           *
    274           * @param   pBuf - pointer to the received buffer
    275           *
    276           * @return  none
    277           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    278          void MT_AfRegister(uint8 *pBuf)
   \                     MT_AfRegister:
    279          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
    280            uint8 cmdId;
    281            uint8 retValue = ZMemError;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7410         MOV     A,#0x10
   \   000016   F0           MOVX    @DPTR,A
    282            endPointDesc_t *epDesc;
    283          
    284            /* parse header */
    285            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000017   85..82       MOV     DPL,?V0
   \   00001A   85..83       MOV     DPH,?V1
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V2,A
    286            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000022   E5..         MOV     A,?V0
   \   000024   2403         ADD     A,#0x3
   \   000026   F5..         MOV     ?V0,A
   \   000028   5002         JNC     ??MT_AfRegister_0
   \   00002A   05..         INC     ?V1
    287          
    288            epDesc = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
   \                     ??MT_AfRegister_0:
   \   00002C                ; Setup parameters for call to function osal_mem_alloc
   \   00002C   7A06         MOV     R2,#0x6
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000033   8A..         MOV     ?V4,R2
   \   000035   8B..         MOV     ?V5,R3
   \   000037   AE..         MOV     R6,?V4
   \   000039   AF..         MOV     R7,?V5
    289            if ( epDesc )
   \   00003B   EE           MOV     A,R6
   \   00003C   4F           ORL     A,R7
   \   00003D   604F         JZ      ??MT_AfRegister_1
    290            {
    291              epDesc->task_id = &MT_TaskID;
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   A3           INC     DPTR
   \   000044   74..         MOV     A,#MT_TaskID & 0xff
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   74..         MOV     A,#(MT_TaskID >> 8) & 0xff
   \   00004A   F0           MOVX    @DPTR,A
    292              retValue = MT_BuildEndpointDesc( pBuf, epDesc );
   \   00004B                ; Setup parameters for call to function MT_BuildEndpointDesc
   \   00004B   EE           MOV     A,R6
   \   00004C   FC           MOV     R4,A
   \   00004D   EF           MOV     A,R7
   \   00004E   FD           MOV     R5,A
   \   00004F   AA..         MOV     R2,?V0
   \   000051   AB..         MOV     R3,?V1
   \   000053   12....       LCALL   ??MT_BuildEndpointDesc?relay; Banked call to: MT_BuildEndpointDesc
   \   000056   E9           MOV     A,R1
   \   000057   C0E0         PUSH    A
   \   000059   85..82       MOV     DPL,?XSP + 0
   \   00005C   85..83       MOV     DPH,?XSP + 1
   \   00005F   D0E0         POP     A
   \   000061   F0           MOVX    @DPTR,A
    293              if ( retValue == ZSuccess )
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   E0           MOVX    A,@DPTR
   \   000069   7013         JNZ     ??MT_AfRegister_2
    294              {
    295                retValue = afRegister( epDesc );
   \   00006B                ; Setup parameters for call to function afRegister
   \   00006B   EE           MOV     A,R6
   \   00006C   FA           MOV     R2,A
   \   00006D   EF           MOV     A,R7
   \   00006E   FB           MOV     R3,A
   \   00006F   12....       LCALL   ??afRegister?relay   ; Banked call to: afRegister
   \   000072   E9           MOV     A,R1
   \   000073   C0E0         PUSH    A
   \   000075   85..82       MOV     DPL,?XSP + 0
   \   000078   85..83       MOV     DPH,?XSP + 1
   \   00007B   D0E0         POP     A
   \   00007D   F0           MOVX    @DPTR,A
    296              }
    297          
    298              if ( retValue != ZSuccess )
   \                     ??MT_AfRegister_2:
   \   00007E   85..82       MOV     DPL,?XSP + 0
   \   000081   85..83       MOV     DPH,?XSP + 1
   \   000084   E0           MOVX    A,@DPTR
   \   000085   6007         JZ      ??MT_AfRegister_1
    299              {
    300                osal_mem_free( epDesc );
   \   000087                ; Setup parameters for call to function osal_mem_free
   \   000087   EE           MOV     A,R6
   \   000088   FA           MOV     R2,A
   \   000089   EF           MOV     A,R7
   \   00008A   FB           MOV     R3,A
   \   00008B   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    301              }
    302            }
    303          
    304            /* Build and send back the response */
    305            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfRegister_1:
   \   00008E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00008E   AC..         MOV     R4,?XSP + 0
   \   000090   AD..         MOV     R5,?XSP + 1
   \   000092   7B01         MOV     R3,#0x1
   \   000094   AA..         MOV     R2,?V2
   \   000096   7964         MOV     R1,#0x64
   \   000098   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    306          }
   \   00009B   7401         MOV     A,#0x1
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A0   7F06         MOV     R7,#0x6
   \   0000A2   02....       LJMP    ?BANKED_LEAVE_XDATA
    307          
    308          /***************************************************************************************************
    309           * @fn      MT_AfDataRequest
    310           *
    311           * @brief   Process AF Register command
    312           *
    313           * @param   pBuf - pointer to the received buffer
    314           *
    315           * @return  none
    316           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    317          void MT_AfDataRequest(uint8 *pBuf)
   \                     MT_AfDataRequest:
    318          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV     A,#-0x18
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    319            #define MT_AF_REQ_MSG_LEN  10
    320            #define MT_AF_REQ_MSG_EXT  10
    321          
    322            endPointDesc_t *epDesc;
    323            afAddrType_t dstAddr;
    324            cId_t cId;
    325            uint8 transId, txOpts, radius;
    326            uint8 cmd0, cmd1;
    327            uint8 retValue = ZFailure;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
    328            uint16 dataLen, tempLen;
    329          
    330            /* Parse header */
    331            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   C0E0         PUSH    A
   \   00001F   7404         MOV     A,#0x4
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   D0E0         POP     A
   \   000026   F0           MOVX    @DPTR,A
    332            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V3,A
    333            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000030   EE           MOV     A,R6
   \   000031   2403         ADD     A,#0x3
   \   000033   FE           MOV     R6,A
   \   000034   5001         JNC     ??MT_AfDataRequest_0
   \   000036   0F           INC     R7
    334          
    335            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_0:
   \   000037   7402         MOV     A,#0x2
   \   000039   65..         XRL     A,?V3
   \   00003B   6003         JZ      $+5
   \   00003D   02....       LJMP    ??MT_AfDataRequest_1 & 0xFFFF
    336            {
    337              dstAddr.addrMode = (afAddrMode_t)*pBuf++;
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   E0           MOVX    A,@DPTR
   \   000045   C0E0         PUSH    A
   \   000047   7412         MOV     A,#0x12
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   D0E0         POP     A
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   A3           INC     DPTR
   \   000054   AE82         MOV     R6,DPL
   \   000056   AF83         MOV     R7,DPH
    338          
    339              if (dstAddr.addrMode == afAddr64Bit)
   \   000058   7412         MOV     A,#0x12
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   6403         XRL     A,#0x3
   \   000060   7029         JNZ     ??MT_AfDataRequest_2
    340              {
    341                (void)osal_memcpy(dstAddr.addr.extAddr, pBuf, Z_EXTADDR_LEN);
   \   000062                ; Setup parameters for call to function osal_memcpy
   \   000062   8E..         MOV     ?V0,R6
   \   000064   8F..         MOV     ?V1,R7
   \   000066   75..00       MOV     ?V2,#0x0
   \   000069   78..         MOV     R0,#?V0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006E   7C08         MOV     R4,#0x8
   \   000070   7D00         MOV     R5,#0x0
   \   000072   740D         MOV     A,#0xd
   \   000074   12....       LCALL   ?XSTACK_DISP101_8
   \   000077   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00007A   7403         MOV     A,#0x3
   \   00007C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007F   8A..         MOV     ?V0,R2
   \   000081   8B..         MOV     ?V1,R3
   \   000083   85..82       MOV     DPL,?V0
   \   000086   85..83       MOV     DPH,?V1
   \   000089   8024         SJMP    ??MT_AfDataRequest_3
    342              }
    343              else
    344              {
    345                dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRequest_2:
   \   00008B   8E82         MOV     DPL,R6
   \   00008D   8F83         MOV     DPH,R7
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   FA           MOV     R2,A
   \   000091   7B00         MOV     R3,#0x0
   \   000093   8E82         MOV     DPL,R6
   \   000095   8F83         MOV     DPH,R7
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F8           MOV     R0,A
   \   00009A   7900         MOV     R1,#0x0
   \   00009C   E4           CLR     A
   \   00009D   C8           XCH     A,R0
   \   00009E   F9           MOV     R1,A
   \   00009F   EA           MOV     A,R2
   \   0000A0   28           ADD     A,R0
   \   0000A1   F8           MOV     R0,A
   \   0000A2   EB           MOV     A,R3
   \   0000A3   39           ADDC    A,R1
   \   0000A4   F9           MOV     R1,A
   \   0000A5   740A         MOV     A,#0xa
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   E8           MOV     A,R0
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   E9           MOV     A,R1
   \   0000AE   F0           MOVX    @DPTR,A
    346              }
    347              pBuf += Z_EXTADDR_LEN;
   \                     ??MT_AfDataRequest_3:
   \   0000AF   EE           MOV     A,R6
   \   0000B0   2408         ADD     A,#0x8
   \   0000B2   FE           MOV     R6,A
   \   0000B3   5001         JNC     ??MT_AfDataRequest_4
   \   0000B5   0F           INC     R7
    348          
    349              dstAddr.endPoint = *pBuf++;
   \                     ??MT_AfDataRequest_4:
   \   0000B6   8E82         MOV     DPL,R6
   \   0000B8   8F83         MOV     DPH,R7
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   C0E0         PUSH    A
   \   0000BD   7413         MOV     A,#0x13
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   D0E0         POP     A
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   8E82         MOV     DPL,R6
   \   0000C7   8F83         MOV     DPH,R7
   \   0000C9   A3           INC     DPTR
   \   0000CA   AE82         MOV     R6,DPL
   \   0000CC   AF83         MOV     R7,DPH
    350              dstAddr.panId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000CE   8E82         MOV     DPL,R6
   \   0000D0   8F83         MOV     DPH,R7
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   FA           MOV     R2,A
   \   0000D4   7B00         MOV     R3,#0x0
   \   0000D6   8E82         MOV     DPL,R6
   \   0000D8   8F83         MOV     DPH,R7
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F8           MOV     R0,A
   \   0000DD   7900         MOV     R1,#0x0
   \   0000DF   E4           CLR     A
   \   0000E0   C8           XCH     A,R0
   \   0000E1   F9           MOV     R1,A
   \   0000E2   EA           MOV     A,R2
   \   0000E3   28           ADD     A,R0
   \   0000E4   F8           MOV     R0,A
   \   0000E5   EB           MOV     A,R3
   \   0000E6   39           ADDC    A,R1
   \   0000E7   F9           MOV     R1,A
   \   0000E8   7414         MOV     A,#0x14
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   E8           MOV     A,R0
   \   0000EE   F0           MOVX    @DPTR,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   E9           MOV     A,R1
   \   0000F1   F0           MOVX    @DPTR,A
    351              pBuf += 2;
   \   0000F2   EE           MOV     A,R6
   \   0000F3   2402         ADD     A,#0x2
   \   0000F5   FE           MOV     R6,A
   \   0000F6   505A         JNC     ??MT_AfDataRequest_5
   \   0000F8   0F           INC     R7
   \   0000F9   8057         SJMP    ??MT_AfDataRequest_5
    352            }
    353            else
    354            {
    355              /* Destination address */
    356              dstAddr.addrMode = afAddr16Bit;
   \                     ??MT_AfDataRequest_1:
   \   0000FB   7412         MOV     A,#0x12
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   7402         MOV     A,#0x2
   \   000102   F0           MOVX    @DPTR,A
    357              dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000103   8E82         MOV     DPL,R6
   \   000105   8F83         MOV     DPH,R7
   \   000107   E0           MOVX    A,@DPTR
   \   000108   FA           MOV     R2,A
   \   000109   7B00         MOV     R3,#0x0
   \   00010B   8E82         MOV     DPL,R6
   \   00010D   8F83         MOV     DPH,R7
   \   00010F   A3           INC     DPTR
   \   000110   E0           MOVX    A,@DPTR
   \   000111   F8           MOV     R0,A
   \   000112   7900         MOV     R1,#0x0
   \   000114   E4           CLR     A
   \   000115   C8           XCH     A,R0
   \   000116   F9           MOV     R1,A
   \   000117   EA           MOV     A,R2
   \   000118   28           ADD     A,R0
   \   000119   F8           MOV     R0,A
   \   00011A   EB           MOV     A,R3
   \   00011B   39           ADDC    A,R1
   \   00011C   F9           MOV     R1,A
   \   00011D   740A         MOV     A,#0xa
   \   00011F   12....       LCALL   ?XSTACK_DISP0_8
   \   000122   E8           MOV     A,R0
   \   000123   F0           MOVX    @DPTR,A
   \   000124   A3           INC     DPTR
   \   000125   E9           MOV     A,R1
   \   000126   F0           MOVX    @DPTR,A
    358              pBuf += 2;
   \   000127   EE           MOV     A,R6
   \   000128   2402         ADD     A,#0x2
   \   00012A   FE           MOV     R6,A
   \   00012B   5001         JNC     ??MT_AfDataRequest_6
   \   00012D   0F           INC     R7
    359          
    360              /* Destination endpoint */
    361              dstAddr.endPoint = *pBuf++;
   \                     ??MT_AfDataRequest_6:
   \   00012E   8E82         MOV     DPL,R6
   \   000130   8F83         MOV     DPH,R7
   \   000132   E0           MOVX    A,@DPTR
   \   000133   C0E0         PUSH    A
   \   000135   7413         MOV     A,#0x13
   \   000137   12....       LCALL   ?XSTACK_DISP0_8
   \   00013A   D0E0         POP     A
   \   00013C   F0           MOVX    @DPTR,A
   \   00013D   8E82         MOV     DPL,R6
   \   00013F   8F83         MOV     DPH,R7
   \   000141   A3           INC     DPTR
   \   000142   AE82         MOV     R6,DPL
   \   000144   AF83         MOV     R7,DPH
    362              dstAddr.panId = 0;
   \   000146   7414         MOV     A,#0x14
   \   000148   12....       LCALL   ?XSTACK_DISP0_8
   \   00014B   7400         MOV     A,#0x0
   \   00014D   F0           MOVX    @DPTR,A
   \   00014E   A3           INC     DPTR
   \   00014F   7400         MOV     A,#0x0
   \   000151   F0           MOVX    @DPTR,A
    363            }
    364          
    365            /* Source endpoint */
    366            epDesc = afFindEndPointDesc(*pBuf++);
   \                     ??MT_AfDataRequest_5:
   \   000152                ; Setup parameters for call to function afFindEndPointDesc
   \   000152   8E82         MOV     DPL,R6
   \   000154   8F83         MOV     DPH,R7
   \   000156   E0           MOVX    A,@DPTR
   \   000157   F9           MOV     R1,A
   \   000158   12....       LCALL   ??afFindEndPointDesc?relay; Banked call to: afFindEndPointDesc
   \   00015B   7405         MOV     A,#0x5
   \   00015D   12....       LCALL   ?XSTACK_DISP0_8
   \   000160   EA           MOV     A,R2
   \   000161   F0           MOVX    @DPTR,A
   \   000162   A3           INC     DPTR
   \   000163   EB           MOV     A,R3
   \   000164   F0           MOVX    @DPTR,A
   \   000165   8E82         MOV     DPL,R6
   \   000167   8F83         MOV     DPH,R7
   \   000169   A3           INC     DPTR
   \   00016A   AE82         MOV     R6,DPL
   \   00016C   AF83         MOV     R7,DPH
    367          
    368            /* ClusterId */
    369            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   00016E   8E82         MOV     DPL,R6
   \   000170   8F83         MOV     DPH,R7
   \   000172   E0           MOVX    A,@DPTR
   \   000173   FA           MOV     R2,A
   \   000174   7B00         MOV     R3,#0x0
   \   000176   8E82         MOV     DPL,R6
   \   000178   8F83         MOV     DPH,R7
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   F8           MOV     R0,A
   \   00017D   7900         MOV     R1,#0x0
   \   00017F   E4           CLR     A
   \   000180   C8           XCH     A,R0
   \   000181   F9           MOV     R1,A
   \   000182   EA           MOV     A,R2
   \   000183   28           ADD     A,R0
   \   000184   F8           MOV     R0,A
   \   000185   EB           MOV     A,R3
   \   000186   39           ADDC    A,R1
   \   000187   F9           MOV     R1,A
   \   000188   88..         MOV     ?V6,R0
   \   00018A   89..         MOV     ?V7,R1
    370            pBuf +=2;
   \   00018C   EE           MOV     A,R6
   \   00018D   2402         ADD     A,#0x2
   \   00018F   FE           MOV     R6,A
   \   000190   5001         JNC     ??MT_AfDataRequest_7
   \   000192   0F           INC     R7
    371          
    372            /* TransId */
    373            transId = *pBuf++;
   \                     ??MT_AfDataRequest_7:
   \   000193   8E82         MOV     DPL,R6
   \   000195   8F83         MOV     DPH,R7
   \   000197   E0           MOVX    A,@DPTR
   \   000198   C0E0         PUSH    A
   \   00019A   7403         MOV     A,#0x3
   \   00019C   12....       LCALL   ?XSTACK_DISP0_8
   \   00019F   D0E0         POP     A
   \   0001A1   F0           MOVX    @DPTR,A
   \   0001A2   8E82         MOV     DPL,R6
   \   0001A4   8F83         MOV     DPH,R7
   \   0001A6   A3           INC     DPTR
   \   0001A7   AE82         MOV     R6,DPL
   \   0001A9   AF83         MOV     R7,DPH
    374          
    375            /* TxOption */
    376            txOpts = *pBuf++;
   \   0001AB   8E82         MOV     DPL,R6
   \   0001AD   8F83         MOV     DPH,R7
   \   0001AF   E0           MOVX    A,@DPTR
   \   0001B0   C0E0         PUSH    A
   \   0001B2   7402         MOV     A,#0x2
   \   0001B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B7   D0E0         POP     A
   \   0001B9   F0           MOVX    @DPTR,A
   \   0001BA   8E82         MOV     DPL,R6
   \   0001BC   8F83         MOV     DPH,R7
   \   0001BE   A3           INC     DPTR
   \   0001BF   AE82         MOV     R6,DPL
   \   0001C1   AF83         MOV     R7,DPH
    377          
    378            /* Radius */
    379            radius = *pBuf++;
   \   0001C3   8E82         MOV     DPL,R6
   \   0001C5   8F83         MOV     DPH,R7
   \   0001C7   E0           MOVX    A,@DPTR
   \   0001C8   C0E0         PUSH    A
   \   0001CA   7401         MOV     A,#0x1
   \   0001CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CF   D0E0         POP     A
   \   0001D1   F0           MOVX    @DPTR,A
   \   0001D2   8E82         MOV     DPL,R6
   \   0001D4   8F83         MOV     DPH,R7
   \   0001D6   A3           INC     DPTR
   \   0001D7   AE82         MOV     R6,DPL
   \   0001D9   AF83         MOV     R7,DPH
    380          
    381            /* Length */
    382            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \   0001DB   7402         MOV     A,#0x2
   \   0001DD   65..         XRL     A,?V3
   \   0001DF   703A         JNZ     ??MT_AfDataRequest_8
    383            {
    384              dataLen = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0001E1   8E82         MOV     DPL,R6
   \   0001E3   8F83         MOV     DPH,R7
   \   0001E5   E0           MOVX    A,@DPTR
   \   0001E6   FA           MOV     R2,A
   \   0001E7   7B00         MOV     R3,#0x0
   \   0001E9   8E82         MOV     DPL,R6
   \   0001EB   8F83         MOV     DPH,R7
   \   0001ED   A3           INC     DPTR
   \   0001EE   E0           MOVX    A,@DPTR
   \   0001EF   F8           MOV     R0,A
   \   0001F0   7900         MOV     R1,#0x0
   \   0001F2   E4           CLR     A
   \   0001F3   C8           XCH     A,R0
   \   0001F4   F9           MOV     R1,A
   \   0001F5   EA           MOV     A,R2
   \   0001F6   28           ADD     A,R0
   \   0001F7   F8           MOV     R0,A
   \   0001F8   EB           MOV     A,R3
   \   0001F9   39           ADDC    A,R1
   \   0001FA   F9           MOV     R1,A
   \   0001FB   88..         MOV     ?V4,R0
   \   0001FD   89..         MOV     ?V5,R1
    385              tempLen = dataLen + MT_AF_REQ_MSG_LEN + MT_AF_REQ_MSG_EXT;
   \   0001FF   E5..         MOV     A,?V4
   \   000201   2414         ADD     A,#0x14
   \   000203   F8           MOV     R0,A
   \   000204   E4           CLR     A
   \   000205   35..         ADDC    A,?V5
   \   000207   F9           MOV     R1,A
   \   000208   7407         MOV     A,#0x7
   \   00020A   12....       LCALL   ?XSTACK_DISP0_8
   \   00020D   E8           MOV     A,R0
   \   00020E   F0           MOVX    @DPTR,A
   \   00020F   A3           INC     DPTR
   \   000210   E9           MOV     A,R1
   \   000211   F0           MOVX    @DPTR,A
    386              pBuf += 2;
   \   000212   EE           MOV     A,R6
   \   000213   2402         ADD     A,#0x2
   \   000215   FE           MOV     R6,A
   \   000216   502B         JNC     ??MT_AfDataRequest_9
   \   000218   0F           INC     R7
   \   000219   8028         SJMP    ??MT_AfDataRequest_9
    387            }
    388            else
    389            {
    390              dataLen = *pBuf++;
   \                     ??MT_AfDataRequest_8:
   \   00021B   8E82         MOV     DPL,R6
   \   00021D   8F83         MOV     DPH,R7
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   F8           MOV     R0,A
   \   000221   7900         MOV     R1,#0x0
   \   000223   88..         MOV     ?V4,R0
   \   000225   89..         MOV     ?V5,R1
   \   000227   8E82         MOV     DPL,R6
   \   000229   8F83         MOV     DPH,R7
   \   00022B   A3           INC     DPTR
   \   00022C   AE82         MOV     R6,DPL
   \   00022E   AF83         MOV     R7,DPH
    391              tempLen = dataLen + MT_AF_REQ_MSG_LEN;
   \   000230   E5..         MOV     A,?V4
   \   000232   240A         ADD     A,#0xa
   \   000234   F8           MOV     R0,A
   \   000235   E4           CLR     A
   \   000236   35..         ADDC    A,?V5
   \   000238   F9           MOV     R1,A
   \   000239   7407         MOV     A,#0x7
   \   00023B   12....       LCALL   ?XSTACK_DISP0_8
   \   00023E   E8           MOV     A,R0
   \   00023F   F0           MOVX    @DPTR,A
   \   000240   A3           INC     DPTR
   \   000241   E9           MOV     A,R1
   \   000242   F0           MOVX    @DPTR,A
    392            }
    393          
    394            if ( epDesc == NULL )
   \                     ??MT_AfDataRequest_9:
   \   000243   7405         MOV     A,#0x5
   \   000245   12....       LCALL   ?XSTACK_DISP0_8
   \   000248   E0           MOVX    A,@DPTR
   \   000249   F8           MOV     R0,A
   \   00024A   A3           INC     DPTR
   \   00024B   E0           MOVX    A,@DPTR
   \   00024C   F9           MOV     R1,A
   \   00024D   E8           MOV     A,R0
   \   00024E   49           ORL     A,R1
   \   00024F   700C         JNZ     ??MT_AfDataRequest_10
    395            {
    396              retValue = afStatus_INVALID_PARAMETER;
   \   000251   85..82       MOV     DPL,?XSP + 0
   \   000254   85..83       MOV     DPH,?XSP + 1
   \   000257   7402         MOV     A,#0x2
   \   000259   F0           MOVX    @DPTR,A
   \   00025A   02....       LJMP    ??MT_AfDataRequest_11 & 0xFFFF
    397            }
    398            else if (tempLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfDataRequest_10:
   \   00025D   7407         MOV     A,#0x7
   \   00025F   12....       LCALL   ?XSTACK_DISP0_8
   \   000262   C3           CLR     C
   \   000263   E0           MOVX    A,@DPTR
   \   000264   94FB         SUBB    A,#-0x5
   \   000266   A3           INC     DPTR
   \   000267   E0           MOVX    A,@DPTR
   \   000268   9400         SUBB    A,#0x0
   \   00026A   5003         JNC     $+5
   \   00026C   02....       LJMP    ??MT_AfDataRequest_12 & 0xFFFF
    399            {
    400              if (pMtAfDataReq != NULL)
   \   00026F   90....       MOV     DPTR,#pMtAfDataReq
   \   000272   E0           MOVX    A,@DPTR
   \   000273   F8           MOV     R0,A
   \   000274   A3           INC     DPTR
   \   000275   E0           MOVX    A,@DPTR
   \   000276   F9           MOV     R1,A
   \   000277   E8           MOV     A,R0
   \   000278   49           ORL     A,R1
   \   000279   600C         JZ      ??MT_AfDataRequest_13
    401              {
    402                retValue = afStatus_INVALID_PARAMETER;
   \   00027B   85..82       MOV     DPL,?XSP + 0
   \   00027E   85..83       MOV     DPH,?XSP + 1
   \   000281   7402         MOV     A,#0x2
   \   000283   F0           MOVX    @DPTR,A
   \   000284   02....       LJMP    ??MT_AfDataRequest_11 & 0xFFFF
    403              }
    404              else if ((pMtAfDataReq = osal_mem_alloc(sizeof(mtAfDataReq_t) + dataLen)) == NULL)
   \                     ??MT_AfDataRequest_13:
   \   000287                ; Setup parameters for call to function osal_mem_alloc
   \   000287   E5..         MOV     A,?V4
   \   000289   2418         ADD     A,#0x18
   \   00028B   FA           MOV     R2,A
   \   00028C   E4           CLR     A
   \   00028D   35..         ADDC    A,?V5
   \   00028F   FB           MOV     R3,A
   \   000290   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000293   8A..         MOV     ?V0,R2
   \   000295   8B..         MOV     ?V1,R3
   \   000297   A8..         MOV     R0,?V0
   \   000299   A9..         MOV     R1,?V1
   \   00029B   90....       MOV     DPTR,#pMtAfDataReq
   \   00029E   E8           MOV     A,R0
   \   00029F   F0           MOVX    @DPTR,A
   \   0002A0   A3           INC     DPTR
   \   0002A1   E9           MOV     A,R1
   \   0002A2   F0           MOVX    @DPTR,A
   \   0002A3   E8           MOV     A,R0
   \   0002A4   49           ORL     A,R1
   \   0002A5   700C         JNZ     ??MT_AfDataRequest_14
    405              {
    406                retValue = afStatus_MEM_FAIL;
   \   0002A7   85..82       MOV     DPL,?XSP + 0
   \   0002AA   85..83       MOV     DPH,?XSP + 1
   \   0002AD   7410         MOV     A,#0x10
   \   0002AF   F0           MOVX    @DPTR,A
   \   0002B0   02....       LJMP    ??MT_AfDataRequest_11 & 0xFFFF
    407              }
    408              else
    409              {
    410                retValue = afStatus_SUCCESS;
   \                     ??MT_AfDataRequest_14:
   \   0002B3   85..82       MOV     DPL,?XSP + 0
   \   0002B6   85..83       MOV     DPH,?XSP + 1
   \   0002B9   7400         MOV     A,#0x0
   \   0002BB   F0           MOVX    @DPTR,A
    411          
    412                pMtAfDataReq->data = (uint8 *)(pMtAfDataReq+1);
   \   0002BC   90....       MOV     DPTR,#pMtAfDataReq
   \   0002BF   E0           MOVX    A,@DPTR
   \   0002C0   2418         ADD     A,#0x18
   \   0002C2   FA           MOV     R2,A
   \   0002C3   A3           INC     DPTR
   \   0002C4   E0           MOVX    A,@DPTR
   \   0002C5   3400         ADDC    A,#0x0
   \   0002C7   FB           MOV     R3,A
   \   0002C8   90....       MOV     DPTR,#pMtAfDataReq
   \   0002CB   E0           MOVX    A,@DPTR
   \   0002CC   F8           MOV     R0,A
   \   0002CD   A3           INC     DPTR
   \   0002CE   E0           MOVX    A,@DPTR
   \   0002CF   F583         MOV     DPH,A
   \   0002D1   8882         MOV     DPL,R0
   \   0002D3   EA           MOV     A,R2
   \   0002D4   F0           MOVX    @DPTR,A
   \   0002D5   A3           INC     DPTR
   \   0002D6   EB           MOV     A,R3
   \   0002D7   F0           MOVX    @DPTR,A
    413                (void)osal_memcpy(&(pMtAfDataReq->dstAddr), &dstAddr, sizeof(afAddrType_t));
   \   0002D8                ; Setup parameters for call to function osal_memcpy
   \   0002D8   740A         MOV     A,#0xa
   \   0002DA   12....       LCALL   ?XSTACK_DISP100_8
   \   0002DD   88..         MOV     ?V0,R0
   \   0002DF   89..         MOV     ?V1,R1
   \   0002E1   75..00       MOV     ?V2,#0x0
   \   0002E4   78..         MOV     R0,#?V0
   \   0002E6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0002E9   7C0C         MOV     R4,#0xc
   \   0002EB   7D00         MOV     R5,#0x0
   \   0002ED   90....       MOV     DPTR,#pMtAfDataReq
   \   0002F0   E0           MOVX    A,@DPTR
   \   0002F1   2402         ADD     A,#0x2
   \   0002F3   FA           MOV     R2,A
   \   0002F4   A3           INC     DPTR
   \   0002F5   E0           MOVX    A,@DPTR
   \   0002F6   3400         ADDC    A,#0x0
   \   0002F8   FB           MOV     R3,A
   \   0002F9   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0002FC   7403         MOV     A,#0x3
   \   0002FE   12....       LCALL   ?DEALLOC_XSTACK8
   \   000301   7416         MOV     A,#0x16
   \   000303   12....       LCALL   ?XSTACK_DISP0_8
   \   000306   EA           MOV     A,R2
   \   000307   F0           MOVX    @DPTR,A
   \   000308   A3           INC     DPTR
   \   000309   EB           MOV     A,R3
   \   00030A   F0           MOVX    @DPTR,A
    414                pMtAfDataReq->epDesc = epDesc;
   \   00030B   7405         MOV     A,#0x5
   \   00030D   12....       LCALL   ?XSTACK_DISP0_8
   \   000310   E0           MOVX    A,@DPTR
   \   000311   FA           MOV     R2,A
   \   000312   A3           INC     DPTR
   \   000313   E0           MOVX    A,@DPTR
   \   000314   FB           MOV     R3,A
   \   000315   90....       MOV     DPTR,#pMtAfDataReq
   \   000318   E0           MOVX    A,@DPTR
   \   000319   F8           MOV     R0,A
   \   00031A   A3           INC     DPTR
   \   00031B   E0           MOVX    A,@DPTR
   \   00031C   C8           XCH     A,R0
   \   00031D   240E         ADD     A,#0xe
   \   00031F   F582         MOV     DPL,A
   \   000321   C8           XCH     A,R0
   \   000322   3400         ADDC    A,#0x0
   \   000324   F583         MOV     DPH,A
   \   000326   EA           MOV     A,R2
   \   000327   F0           MOVX    @DPTR,A
   \   000328   A3           INC     DPTR
   \   000329   EB           MOV     A,R3
   \   00032A   F0           MOVX    @DPTR,A
    415                pMtAfDataReq->cId = cId;
   \   00032B   90....       MOV     DPTR,#pMtAfDataReq
   \   00032E   E0           MOVX    A,@DPTR
   \   00032F   F8           MOV     R0,A
   \   000330   A3           INC     DPTR
   \   000331   E0           MOVX    A,@DPTR
   \   000332   C8           XCH     A,R0
   \   000333   2410         ADD     A,#0x10
   \   000335   F582         MOV     DPL,A
   \   000337   C8           XCH     A,R0
   \   000338   3400         ADDC    A,#0x0
   \   00033A   F583         MOV     DPH,A
   \   00033C   E5..         MOV     A,?V6
   \   00033E   F0           MOVX    @DPTR,A
   \   00033F   A3           INC     DPTR
   \   000340   E5..         MOV     A,?V7
   \   000342   F0           MOVX    @DPTR,A
    416                pMtAfDataReq->dataLen = dataLen;
   \   000343   90....       MOV     DPTR,#pMtAfDataReq
   \   000346   E0           MOVX    A,@DPTR
   \   000347   F8           MOV     R0,A
   \   000348   A3           INC     DPTR
   \   000349   E0           MOVX    A,@DPTR
   \   00034A   C8           XCH     A,R0
   \   00034B   2412         ADD     A,#0x12
   \   00034D   F582         MOV     DPL,A
   \   00034F   C8           XCH     A,R0
   \   000350   3400         ADDC    A,#0x0
   \   000352   F583         MOV     DPH,A
   \   000354   E5..         MOV     A,?V4
   \   000356   F0           MOVX    @DPTR,A
   \   000357   A3           INC     DPTR
   \   000358   E5..         MOV     A,?V5
   \   00035A   F0           MOVX    @DPTR,A
    417                pMtAfDataReq->transId = transId;
   \   00035B   7403         MOV     A,#0x3
   \   00035D   12....       LCALL   ?XSTACK_DISP0_8
   \   000360   E0           MOVX    A,@DPTR
   \   000361   C0E0         PUSH    A
   \   000363   90....       MOV     DPTR,#pMtAfDataReq
   \   000366   E0           MOVX    A,@DPTR
   \   000367   F8           MOV     R0,A
   \   000368   A3           INC     DPTR
   \   000369   E0           MOVX    A,@DPTR
   \   00036A   C8           XCH     A,R0
   \   00036B   2414         ADD     A,#0x14
   \   00036D   F582         MOV     DPL,A
   \   00036F   C8           XCH     A,R0
   \   000370   3400         ADDC    A,#0x0
   \   000372   F583         MOV     DPH,A
   \   000374   D0E0         POP     A
   \   000376   F0           MOVX    @DPTR,A
    418                pMtAfDataReq->txOpts = txOpts;
   \   000377   7402         MOV     A,#0x2
   \   000379   12....       LCALL   ?XSTACK_DISP0_8
   \   00037C   E0           MOVX    A,@DPTR
   \   00037D   C0E0         PUSH    A
   \   00037F   90....       MOV     DPTR,#pMtAfDataReq
   \   000382   E0           MOVX    A,@DPTR
   \   000383   F8           MOV     R0,A
   \   000384   A3           INC     DPTR
   \   000385   E0           MOVX    A,@DPTR
   \   000386   C8           XCH     A,R0
   \   000387   2415         ADD     A,#0x15
   \   000389   F582         MOV     DPL,A
   \   00038B   C8           XCH     A,R0
   \   00038C   3400         ADDC    A,#0x0
   \   00038E   F583         MOV     DPH,A
   \   000390   D0E0         POP     A
   \   000392   F0           MOVX    @DPTR,A
    419                pMtAfDataReq->radius = radius;
   \   000393   7401         MOV     A,#0x1
   \   000395   12....       LCALL   ?XSTACK_DISP0_8
   \   000398   E0           MOVX    A,@DPTR
   \   000399   C0E0         PUSH    A
   \   00039B   90....       MOV     DPTR,#pMtAfDataReq
   \   00039E   E0           MOVX    A,@DPTR
   \   00039F   F8           MOV     R0,A
   \   0003A0   A3           INC     DPTR
   \   0003A1   E0           MOVX    A,@DPTR
   \   0003A2   C8           XCH     A,R0
   \   0003A3   2416         ADD     A,#0x16
   \   0003A5   F582         MOV     DPL,A
   \   0003A7   C8           XCH     A,R0
   \   0003A8   3400         ADDC    A,#0x0
   \   0003AA   F583         MOV     DPH,A
   \   0003AC   D0E0         POP     A
   \   0003AE   F0           MOVX    @DPTR,A
    420          
    421                // Setup to time-out the huge outgoing item if host does not MT_AF_DATA_STORE it.
    422                pMtAfDataReq->tick = MT_AF_EXEC_CNT;
   \   0003AF   90....       MOV     DPTR,#pMtAfDataReq
   \   0003B2   E0           MOVX    A,@DPTR
   \   0003B3   F8           MOV     R0,A
   \   0003B4   A3           INC     DPTR
   \   0003B5   E0           MOVX    A,@DPTR
   \   0003B6   C8           XCH     A,R0
   \   0003B7   2417         ADD     A,#0x17
   \   0003B9   F582         MOV     DPL,A
   \   0003BB   C8           XCH     A,R0
   \   0003BC   3400         ADDC    A,#0x0
   \   0003BE   F583         MOV     DPH,A
   \   0003C0   740F         MOV     A,#0xf
   \   0003C2   F0           MOVX    @DPTR,A
    423                if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   0003C3                ; Setup parameters for call to function osal_start_timerEx
   \   0003C3   7CE8         MOV     R4,#-0x18
   \   0003C5   7D03         MOV     R5,#0x3
   \   0003C7   7A08         MOV     R2,#0x8
   \   0003C9   7B00         MOV     R3,#0x0
   \   0003CB   90....       MOV     DPTR,#MT_TaskID
   \   0003CE   E0           MOVX    A,@DPTR
   \   0003CF   F9           MOV     R1,A
   \   0003D0   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   0003D3   E9           MOV     A,R1
   \   0003D4   6071         JZ      ??MT_AfDataRequest_11
    424                {
    425                  (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   0003D6                ; Setup parameters for call to function osal_set_event
   \   0003D6   7A08         MOV     R2,#0x8
   \   0003D8   7B00         MOV     R3,#0x0
   \   0003DA   90....       MOV     DPTR,#MT_TaskID
   \   0003DD   E0           MOVX    A,@DPTR
   \   0003DE   F9           MOV     R1,A
   \   0003DF   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   0003E2   E9           MOV     A,R1
   \   0003E3   C0E0         PUSH    A
   \   0003E5   7409         MOV     A,#0x9
   \   0003E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0003EA   D0E0         POP     A
   \   0003EC   F0           MOVX    @DPTR,A
   \   0003ED   8058         SJMP    ??MT_AfDataRequest_11
    426                }
    427              }
    428            }
    429            else
    430            {
    431              retValue = AF_DataRequest(&dstAddr, epDesc, cId, dataLen, pBuf, &transId, txOpts, radius);
   \                     ??MT_AfDataRequest_12:
   \   0003EF                ; Setup parameters for call to function AF_DataRequest
   \   0003EF   7401         MOV     A,#0x1
   \   0003F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F4   E0           MOVX    A,@DPTR
   \   0003F5   F5..         MOV     ?V0,A
   \   0003F7   78..         MOV     R0,#?V0
   \   0003F9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003FC   7404         MOV     A,#0x4
   \   0003FE   12....       LCALL   ?XSTACK_DISP100_8
   \   000401   88..         MOV     ?V0,R0
   \   000403   89..         MOV     ?V1,R1
   \   000405   78..         MOV     R0,#?V0
   \   000407   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00040A   8E..         MOV     ?V0,R6
   \   00040C   8F..         MOV     ?V1,R7
   \   00040E   78..         MOV     R0,#?V0
   \   000410   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000413   78..         MOV     R0,#?V4
   \   000415   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000418   78..         MOV     R0,#?V6
   \   00041A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00041D   740B         MOV     A,#0xb
   \   00041F   12....       LCALL   ?XSTACK_DISP0_8
   \   000422   E0           MOVX    A,@DPTR
   \   000423   F9           MOV     R1,A
   \   000424   740E         MOV     A,#0xe
   \   000426   12....       LCALL   ?XSTACK_DISP0_8
   \   000429   E0           MOVX    A,@DPTR
   \   00042A   FC           MOV     R4,A
   \   00042B   A3           INC     DPTR
   \   00042C   E0           MOVX    A,@DPTR
   \   00042D   FD           MOV     R5,A
   \   00042E   7413         MOV     A,#0x13
   \   000430   12....       LCALL   ?XSTACK_DISP101_8
   \   000433   12....       LCALL   ??AF_DataRequest?relay; Banked call to: AF_DataRequest
   \   000436   7409         MOV     A,#0x9
   \   000438   12....       LCALL   ?DEALLOC_XSTACK8
   \   00043B   E9           MOV     A,R1
   \   00043C   C0E0         PUSH    A
   \   00043E   85..82       MOV     DPL,?XSP + 0
   \   000441   85..83       MOV     DPH,?XSP + 1
   \   000444   D0E0         POP     A
   \   000446   F0           MOVX    @DPTR,A
    432            }
    433          
    434            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??MT_AfDataRequest_11:
   \   000447   7404         MOV     A,#0x4
   \   000449   12....       LCALL   ?XSTACK_DISP0_8
   \   00044C   E0           MOVX    A,@DPTR
   \   00044D   54E0         ANL     A,#0xe0
   \   00044F   6420         XRL     A,#0x20
   \   000451   700D         JNZ     ??MT_AfDataRequest_15
    435            {
    436              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_AF), cmd1, 1, &retValue);
   \   000453                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000453   AC..         MOV     R4,?XSP + 0
   \   000455   AD..         MOV     R5,?XSP + 1
   \   000457   7B01         MOV     R3,#0x1
   \   000459   AA..         MOV     R2,?V3
   \   00045B   7964         MOV     R1,#0x64
   \   00045D   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    437            }
    438          }
   \                     ??MT_AfDataRequest_15:
   \   000460   7418         MOV     A,#0x18
   \   000462   12....       LCALL   ?DEALLOC_XSTACK8
   \   000465   7F08         MOV     R7,#0x8
   \   000467   02....       LJMP    ?BANKED_LEAVE_XDATA
    439          
    440          #if defined ( ZIGBEE_SOURCE_ROUTING )
    441          
    442          /***************************************************************************************************
    443           * @fn      MT_AfDataRequestSrcRtg
    444           *
    445           * @brief   Process AF Register command
    446           *
    447           * @param   pBuf - pointer to the received buffer
    448           *
    449           * @return  none
    450           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    451          void MT_AfDataRequestSrcRtg(uint8 *pBuf)
   \                     MT_AfDataRequestSrcRtg:
    452          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    453            uint8 cmdId, dataLen = 0;
   \   00000E   75..00       MOV     ?V3,#0x0
    454            uint8 retValue = ZFailure;
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   7401         MOV     A,#0x1
   \   000019   F0           MOVX    @DPTR,A
    455            endPointDesc_t *epDesc;
    456            byte transId;
    457            afAddrType_t dstAddr;
    458            cId_t cId;
    459            byte txOpts, radius, srcEP, relayCnt;
    460            uint16 *pRelayList;
    461            uint8 i;
    462          
    463            /* parse header */
    464            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V7,A
    465            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000023   EE           MOV     A,R6
   \   000024   2403         ADD     A,#0x3
   \   000026   FE           MOV     R6,A
   \   000027   5001         JNC     ??MT_AfDataRequestSrcRtg_0
   \   000029   0F           INC     R7
    466          
    467            /* Destination address */
    468            /* Initialize the panID field to zero to avoid inter-pan */
    469            osal_memset( &dstAddr, 0, sizeof(afAddrType_t) ); 
   \                     ??MT_AfDataRequestSrcRtg_0:
   \   00002A                ; Setup parameters for call to function osal_memset
   \   00002A   7C0C         MOV     R4,#0xc
   \   00002C   7D00         MOV     R5,#0x0
   \   00002E   7900         MOV     R1,#0x0
   \   000030   7409         MOV     A,#0x9
   \   000032   12....       LCALL   ?XSTACK_DISP101_8
   \   000035   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
    470            dstAddr.addrMode = afAddr16Bit;
   \   000038   7411         MOV     A,#0x11
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   7402         MOV     A,#0x2
   \   00003F   F0           MOVX    @DPTR,A
    471            dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FA           MOV     R2,A
   \   000046   7B00         MOV     R3,#0x0
   \   000048   8E82         MOV     DPL,R6
   \   00004A   8F83         MOV     DPH,R7
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F8           MOV     R0,A
   \   00004F   7900         MOV     R1,#0x0
   \   000051   E4           CLR     A
   \   000052   C8           XCH     A,R0
   \   000053   F9           MOV     R1,A
   \   000054   EA           MOV     A,R2
   \   000055   28           ADD     A,R0
   \   000056   F8           MOV     R0,A
   \   000057   EB           MOV     A,R3
   \   000058   39           ADDC    A,R1
   \   000059   F9           MOV     R1,A
   \   00005A   7409         MOV     A,#0x9
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   E8           MOV     A,R0
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   E9           MOV     A,R1
   \   000063   F0           MOVX    @DPTR,A
    472            pBuf += 2;
   \   000064   EE           MOV     A,R6
   \   000065   2402         ADD     A,#0x2
   \   000067   FE           MOV     R6,A
   \   000068   5001         JNC     ??MT_AfDataRequestSrcRtg_1
   \   00006A   0F           INC     R7
    473          
    474            /* Destination endpoint */
    475            dstAddr.endPoint = *pBuf++;
   \                     ??MT_AfDataRequestSrcRtg_1:
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   C0E0         PUSH    A
   \   000072   7412         MOV     A,#0x12
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   D0E0         POP     A
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   8E82         MOV     DPL,R6
   \   00007C   8F83         MOV     DPH,R7
   \   00007E   A3           INC     DPTR
   \   00007F   AE82         MOV     R6,DPL
   \   000081   AF83         MOV     R7,DPH
    476          
    477            /* Source endpoint */
    478            srcEP = *pBuf++;
   \   000083   8E82         MOV     DPL,R6
   \   000085   8F83         MOV     DPH,R7
   \   000087   E0           MOVX    A,@DPTR
   \   000088   C0E0         PUSH    A
   \   00008A   7401         MOV     A,#0x1
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   D0E0         POP     A
   \   000091   F0           MOVX    @DPTR,A
   \   000092   8E82         MOV     DPL,R6
   \   000094   8F83         MOV     DPH,R7
   \   000096   A3           INC     DPTR
   \   000097   AE82         MOV     R6,DPL
   \   000099   AF83         MOV     R7,DPH
    479            epDesc = afFindEndPointDesc( srcEP );
   \   00009B                ; Setup parameters for call to function afFindEndPointDesc
   \   00009B   7401         MOV     A,#0x1
   \   00009D   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F9           MOV     R1,A
   \   0000A2   12....       LCALL   ??afFindEndPointDesc?relay; Banked call to: afFindEndPointDesc
   \   0000A5   7407         MOV     A,#0x7
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   EA           MOV     A,R2
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   EB           MOV     A,R3
   \   0000AE   F0           MOVX    @DPTR,A
    480          
    481            /* ClusterId */
    482            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000AF   8E82         MOV     DPL,R6
   \   0000B1   8F83         MOV     DPH,R7
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   FA           MOV     R2,A
   \   0000B5   7B00         MOV     R3,#0x0
   \   0000B7   8E82         MOV     DPL,R6
   \   0000B9   8F83         MOV     DPH,R7
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F8           MOV     R0,A
   \   0000BE   7900         MOV     R1,#0x0
   \   0000C0   E4           CLR     A
   \   0000C1   C8           XCH     A,R0
   \   0000C2   F9           MOV     R1,A
   \   0000C3   EA           MOV     A,R2
   \   0000C4   28           ADD     A,R0
   \   0000C5   F8           MOV     R0,A
   \   0000C6   EB           MOV     A,R3
   \   0000C7   39           ADDC    A,R1
   \   0000C8   F9           MOV     R1,A
   \   0000C9   88..         MOV     ?V0,R0
   \   0000CB   89..         MOV     ?V1,R1
    483            pBuf +=2;
   \   0000CD   EE           MOV     A,R6
   \   0000CE   2402         ADD     A,#0x2
   \   0000D0   FE           MOV     R6,A
   \   0000D1   5001         JNC     ??MT_AfDataRequestSrcRtg_2
   \   0000D3   0F           INC     R7
    484          
    485            /* TransId */
    486            transId = *pBuf++;
   \                     ??MT_AfDataRequestSrcRtg_2:
   \   0000D4   8E82         MOV     DPL,R6
   \   0000D6   8F83         MOV     DPH,R7
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   C0E0         PUSH    A
   \   0000DB   7404         MOV     A,#0x4
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   D0E0         POP     A
   \   0000E2   F0           MOVX    @DPTR,A
   \   0000E3   8E82         MOV     DPL,R6
   \   0000E5   8F83         MOV     DPH,R7
   \   0000E7   A3           INC     DPTR
   \   0000E8   AE82         MOV     R6,DPL
   \   0000EA   AF83         MOV     R7,DPH
    487          
    488            /* TxOption */
    489            txOpts = *pBuf++;
   \   0000EC   8E82         MOV     DPL,R6
   \   0000EE   8F83         MOV     DPH,R7
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   C0E0         PUSH    A
   \   0000F3   7403         MOV     A,#0x3
   \   0000F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F8   D0E0         POP     A
   \   0000FA   F0           MOVX    @DPTR,A
   \   0000FB   8E82         MOV     DPL,R6
   \   0000FD   8F83         MOV     DPH,R7
   \   0000FF   A3           INC     DPTR
   \   000100   AE82         MOV     R6,DPL
   \   000102   AF83         MOV     R7,DPH
    490          
    491            /* Radius */
    492            radius = *pBuf++;
   \   000104   8E82         MOV     DPL,R6
   \   000106   8F83         MOV     DPH,R7
   \   000108   E0           MOVX    A,@DPTR
   \   000109   C0E0         PUSH    A
   \   00010B   7402         MOV     A,#0x2
   \   00010D   12....       LCALL   ?XSTACK_DISP0_8
   \   000110   D0E0         POP     A
   \   000112   F0           MOVX    @DPTR,A
   \   000113   8E82         MOV     DPL,R6
   \   000115   8F83         MOV     DPH,R7
   \   000117   A3           INC     DPTR
   \   000118   AE82         MOV     R6,DPL
   \   00011A   AF83         MOV     R7,DPH
    493            
    494            /* Source route relay count */
    495            relayCnt = *pBuf++;
   \   00011C   8E82         MOV     DPL,R6
   \   00011E   8F83         MOV     DPH,R7
   \   000120   E0           MOVX    A,@DPTR
   \   000121   F5..         MOV     ?V6,A
   \   000123   8E82         MOV     DPL,R6
   \   000125   8F83         MOV     DPH,R7
   \   000127   A3           INC     DPTR
   \   000128   AE82         MOV     R6,DPL
   \   00012A   AF83         MOV     R7,DPH
    496            
    497            /* Convert the source route relay list */
    498            if( (pRelayList = osal_mem_alloc( relayCnt * sizeof( uint16 ))) != NULL )
   \   00012C                ; Setup parameters for call to function osal_mem_alloc
   \   00012C   AA..         MOV     R2,?V6
   \   00012E   7B00         MOV     R3,#0x0
   \   000130   EA           MOV     A,R2
   \   000131   75F002       MOV     B,#0x2
   \   000134   A4           MUL     AB
   \   000135   CA           XCH     A,R2
   \   000136   A8F0         MOV     R0,B
   \   000138   75F000       MOV     B,#0x0
   \   00013B   A4           MUL     AB
   \   00013C   28           ADD     A,R0
   \   00013D   F8           MOV     R0,A
   \   00013E   75F002       MOV     B,#0x2
   \   000141   EB           MOV     A,R3
   \   000142   A4           MUL     AB
   \   000143   28           ADD     A,R0
   \   000144   FB           MOV     R3,A
   \   000145   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000148   8A..         MOV     ?V4,R2
   \   00014A   8B..         MOV     ?V5,R3
   \   00014C   A8..         MOV     R0,?V4
   \   00014E   A9..         MOV     R1,?V5
   \   000150   7405         MOV     A,#0x5
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   E8           MOV     A,R0
   \   000156   F0           MOVX    @DPTR,A
   \   000157   A3           INC     DPTR
   \   000158   E9           MOV     A,R1
   \   000159   F0           MOVX    @DPTR,A
   \   00015A   E8           MOV     A,R0
   \   00015B   49           ORL     A,R1
   \   00015C   7003         JNZ     $+5
   \   00015E   02....       LJMP    ??MT_AfDataRequestSrcRtg_3 & 0xFFFF
    499            {
    500              for( i = 0; i < relayCnt; i++ )
   \   000161   75..00       MOV     ?V2,#0x0
   \                     ??MT_AfDataRequestSrcRtg_4:
   \   000164   E5..         MOV     A,?V2
   \   000166   C3           CLR     C
   \   000167   95..         SUBB    A,?V6
   \   000169   5052         JNC     ??MT_AfDataRequestSrcRtg_5
    501              {
    502                pRelayList[i]  = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   00016B   8E82         MOV     DPL,R6
   \   00016D   8F83         MOV     DPH,R7
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   FA           MOV     R2,A
   \   000171   7B00         MOV     R3,#0x0
   \   000173   8E82         MOV     DPL,R6
   \   000175   8F83         MOV     DPH,R7
   \   000177   A3           INC     DPTR
   \   000178   E0           MOVX    A,@DPTR
   \   000179   F8           MOV     R0,A
   \   00017A   7900         MOV     R1,#0x0
   \   00017C   E4           CLR     A
   \   00017D   C8           XCH     A,R0
   \   00017E   F9           MOV     R1,A
   \   00017F   EA           MOV     A,R2
   \   000180   28           ADD     A,R0
   \   000181   FA           MOV     R2,A
   \   000182   EB           MOV     A,R3
   \   000183   39           ADDC    A,R1
   \   000184   FB           MOV     R3,A
   \   000185   A8..         MOV     R0,?V2
   \   000187   7900         MOV     R1,#0x0
   \   000189   E8           MOV     A,R0
   \   00018A   75F002       MOV     B,#0x2
   \   00018D   A4           MUL     AB
   \   00018E   C8           XCH     A,R0
   \   00018F   ACF0         MOV     R4,B
   \   000191   75F000       MOV     B,#0x0
   \   000194   A4           MUL     AB
   \   000195   2C           ADD     A,R4
   \   000196   FC           MOV     R4,A
   \   000197   75F002       MOV     B,#0x2
   \   00019A   E9           MOV     A,R1
   \   00019B   A4           MUL     AB
   \   00019C   2C           ADD     A,R4
   \   00019D   F9           MOV     R1,A
   \   00019E   7405         MOV     A,#0x5
   \   0001A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A3   E0           MOVX    A,@DPTR
   \   0001A4   28           ADD     A,R0
   \   0001A5   FC           MOV     R4,A
   \   0001A6   A3           INC     DPTR
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   39           ADDC    A,R1
   \   0001A9   8C82         MOV     DPL,R4
   \   0001AB   F583         MOV     DPH,A
   \   0001AD   EA           MOV     A,R2
   \   0001AE   F0           MOVX    @DPTR,A
   \   0001AF   A3           INC     DPTR
   \   0001B0   EB           MOV     A,R3
   \   0001B1   F0           MOVX    @DPTR,A
    503                pBuf += 2;
   \   0001B2   EE           MOV     A,R6
   \   0001B3   2402         ADD     A,#0x2
   \   0001B5   FE           MOV     R6,A
   \   0001B6   5001         JNC     ??MT_AfDataRequestSrcRtg_6
   \   0001B8   0F           INC     R7
    504              }
   \                     ??MT_AfDataRequestSrcRtg_6:
   \   0001B9   05..         INC     ?V2
   \   0001BB   80A7         SJMP    ??MT_AfDataRequestSrcRtg_4
    505            
    506              /* Data payload Length */
    507              dataLen = *pBuf++;
   \                     ??MT_AfDataRequestSrcRtg_5:
   \   0001BD   8E82         MOV     DPL,R6
   \   0001BF   8F83         MOV     DPH,R7
   \   0001C1   E0           MOVX    A,@DPTR
   \   0001C2   F5..         MOV     ?V3,A
   \   0001C4   8E82         MOV     DPL,R6
   \   0001C6   8F83         MOV     DPH,R7
   \   0001C8   A3           INC     DPTR
   \   0001C9   AE82         MOV     R6,DPL
   \   0001CB   AF83         MOV     R7,DPH
    508          
    509              if ( epDesc == NULL )
   \   0001CD   7407         MOV     A,#0x7
   \   0001CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D2   E0           MOVX    A,@DPTR
   \   0001D3   F8           MOV     R0,A
   \   0001D4   A3           INC     DPTR
   \   0001D5   E0           MOVX    A,@DPTR
   \   0001D6   F9           MOV     R1,A
   \   0001D7   E8           MOV     A,R0
   \   0001D8   49           ORL     A,R1
   \   0001D9   700B         JNZ     ??MT_AfDataRequestSrcRtg_7
    510              {
    511                retValue = afStatus_INVALID_PARAMETER;
   \   0001DB   85..82       MOV     DPL,?XSP + 0
   \   0001DE   85..83       MOV     DPH,?XSP + 1
   \   0001E1   7402         MOV     A,#0x2
   \   0001E3   F0           MOVX    @DPTR,A
   \   0001E4   806F         SJMP    ??MT_AfDataRequestSrcRtg_8
    512              }
    513              else
    514              {
    515                retValue = AF_DataRequestSrcRtg( &dstAddr, epDesc, cId, dataLen, pBuf, 
    516                                               &transId, txOpts, radius, relayCnt, pRelayList );
   \                     ??MT_AfDataRequestSrcRtg_7:
   \   0001E6                ; Setup parameters for call to function AF_DataRequestSrcRtg
   \   0001E6   7405         MOV     A,#0x5
   \   0001E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EB   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001EE   E5..         MOV     A,?V6
   \   0001F0   F5..         MOV     ?V4,A
   \   0001F2   78..         MOV     R0,#?V4
   \   0001F4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001F7   7405         MOV     A,#0x5
   \   0001F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FC   E0           MOVX    A,@DPTR
   \   0001FD   F5..         MOV     ?V4,A
   \   0001FF   78..         MOV     R0,#?V4
   \   000201   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000204   7408         MOV     A,#0x8
   \   000206   12....       LCALL   ?XSTACK_DISP100_8
   \   000209   88..         MOV     ?V4,R0
   \   00020B   89..         MOV     ?V5,R1
   \   00020D   78..         MOV     R0,#?V4
   \   00020F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000212   8E..         MOV     ?V4,R6
   \   000214   8F..         MOV     ?V5,R7
   \   000216   78..         MOV     R0,#?V4
   \   000218   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00021B   85....       MOV     ?V4,?V3
   \   00021E   75..00       MOV     ?V5,#0x0
   \   000221   78..         MOV     R0,#?V4
   \   000223   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000226   78..         MOV     R0,#?V0
   \   000228   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00022B   740F         MOV     A,#0xf
   \   00022D   12....       LCALL   ?XSTACK_DISP0_8
   \   000230   E0           MOVX    A,@DPTR
   \   000231   F9           MOV     R1,A
   \   000232   7413         MOV     A,#0x13
   \   000234   12....       LCALL   ?XSTACK_DISP0_8
   \   000237   E0           MOVX    A,@DPTR
   \   000238   FC           MOV     R4,A
   \   000239   A3           INC     DPTR
   \   00023A   E0           MOVX    A,@DPTR
   \   00023B   FD           MOV     R5,A
   \   00023C   7415         MOV     A,#0x15
   \   00023E   12....       LCALL   ?XSTACK_DISP101_8
   \   000241   12....       LCALL   ??AF_DataRequestSrcRtg?relay; Banked call to: AF_DataRequestSrcRtg
   \   000244   740C         MOV     A,#0xc
   \   000246   12....       LCALL   ?DEALLOC_XSTACK8
   \   000249   E9           MOV     A,R1
   \   00024A   C0E0         PUSH    A
   \   00024C   85..82       MOV     DPL,?XSP + 0
   \   00024F   85..83       MOV     DPH,?XSP + 1
   \   000252   D0E0         POP     A
   \   000254   F0           MOVX    @DPTR,A
    517              }
    518              
    519              /* Free the memory allocated */
    520              osal_mem_free( pRelayList );
   \                     ??MT_AfDataRequestSrcRtg_8:
   \   000255                ; Setup parameters for call to function osal_mem_free
   \   000255   7405         MOV     A,#0x5
   \   000257   12....       LCALL   ?XSTACK_DISP0_8
   \   00025A   E0           MOVX    A,@DPTR
   \   00025B   FA           MOV     R2,A
   \   00025C   A3           INC     DPTR
   \   00025D   E0           MOVX    A,@DPTR
   \   00025E   FB           MOV     R3,A
   \   00025F   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   000262   8009         SJMP    ??MT_AfDataRequestSrcRtg_9
    521            }
    522            else
    523            {
    524              retValue = afStatus_MEM_FAIL;
   \                     ??MT_AfDataRequestSrcRtg_3:
   \   000264   85..82       MOV     DPL,?XSP + 0
   \   000267   85..83       MOV     DPH,?XSP + 1
   \   00026A   7410         MOV     A,#0x10
   \   00026C   F0           MOVX    @DPTR,A
    525            }
    526              
    527          
    528            /* Build and send back the response */
    529            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfDataRequestSrcRtg_9:
   \   00026D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00026D   AC..         MOV     R4,?XSP + 0
   \   00026F   AD..         MOV     R5,?XSP + 1
   \   000271   7B01         MOV     R3,#0x1
   \   000273   AA..         MOV     R2,?V7
   \   000275   7964         MOV     R1,#0x64
   \   000277   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    530          }
   \   00027A   7415         MOV     A,#0x15
   \   00027C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00027F   7F08         MOV     R7,#0x8
   \   000281   02....       LJMP    ?BANKED_LEAVE_XDATA
    531          #endif
    532          
    533          #if defined INTER_PAN
    534          /***************************************************************************************************
    535           * @fn      MT_AfInterPanCtl
    536           *
    537           * @brief   Process the AF Inter Pan control command.
    538           *
    539           * @param   pBuf - pointer to the received buffer
    540           *
    541           * @return  none
    542           ***************************************************************************************************/
    543          static void MT_AfInterPanCtl(uint8 *pBuf)
    544          {
    545            uint8 cmd, rtrn;
    546            uint16 panId;
    547            endPointDesc_t *pEP;
    548            
    549            cmd = pBuf[MT_RPC_POS_CMD1];
    550            pBuf += MT_RPC_FRAME_HDR_SZ;
    551          
    552            switch (*pBuf++)  // Inter-pan request parameter.
    553            {
    554            case InterPanClr:
    555              rtrn = StubAPS_SetIntraPanChannel();           // Switch channel back to the NIB channel.
    556              break;
    557          
    558            case InterPanSet:
    559              rtrn = StubAPS_SetInterPanChannel(*pBuf);      // Set channel for inter-pan communication.
    560              break;
    561          
    562            case InterPanReg:
    563              if ((pEP = afFindEndPointDesc(*pBuf)))
    564              {
    565                StubAPS_RegisterApp(pEP);
    566                rtrn = SUCCESS;
    567              }
    568              else
    569              {
    570                rtrn = FAILURE;
    571              }
    572              break;
    573          
    574            case InterPanChk:
    575              panId = BUILD_UINT16(pBuf[0], pBuf[1]);
    576              rtrn = (StubAPS_InterPan(panId, pBuf[2])) ? ZSuccess : ZFailure;
    577              break;
    578          
    579            default:
    580              rtrn = afStatus_INVALID_PARAMETER;
    581              break;
    582            }
    583          
    584            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmd, 1, &rtrn);
    585          }
    586          #endif
    587          
    588          /***************************************************************************************************
    589           * @fn      MT_AfDataConfirm
    590           *
    591           * @brief   Process
    592           *
    593           * @param   pBuf - pointer to the received buffer
    594           *
    595           * @return  none
    596           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    597          void MT_AfDataConfirm(afDataConfirm_t *pMsg)
   \                     MT_AfDataConfirm:
    598          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    599            uint8 retArray[3];
    600          
    601            retArray[0] = pMsg->hdr.status;
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   C0E0         PUSH    A
   \   000016   85..82       MOV     DPL,?XSP + 0
   \   000019   85..83       MOV     DPH,?XSP + 1
   \   00001C   D0E0         POP     A
   \   00001E   F0           MOVX    @DPTR,A
    602            retArray[1] = pMsg->endpoint;
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   C0E0         PUSH    A
   \   000028   7401         MOV     A,#0x1
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   D0E0         POP     A
   \   00002F   F0           MOVX    @DPTR,A
    603            retArray[2] = pMsg->transID;
   \   000030   8E82         MOV     DPL,R6
   \   000032   8F83         MOV     DPH,R7
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   C0E0         PUSH    A
   \   00003A   7402         MOV     A,#0x2
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   D0E0         POP     A
   \   000041   F0           MOVX    @DPTR,A
    604          
    605            /* Build and send back the response */
    606            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_DATA_CONFIRM, 3, retArray);
   \   000042                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000042   AC..         MOV     R4,?XSP + 0
   \   000044   AD..         MOV     R5,?XSP + 1
   \   000046   7B03         MOV     R3,#0x3
   \   000048   7A80         MOV     R2,#-0x80
   \   00004A   7944         MOV     R1,#0x44
   \   00004C   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    607          }
   \   00004F   7403         MOV     A,#0x3
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   \   000054   7F01         MOV     R7,#0x1
   \   000056   02....       LJMP    ?BANKED_LEAVE_XDATA
    608          
    609          /***************************************************************************************************
    610           * @fn          MT_AfIncomingMsg
    611           *
    612           * @brief       Process the callback subscription for AF Incoming data.
    613           *
    614           * @param       pkt - Incoming AF data.
    615           *
    616           * @return      none
    617           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    618          void MT_AfIncomingMsg(afIncomingMSGPacket_t *pMsg)
   \                     MT_AfIncomingMsg:
    619          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
    620            #define MT_AF_INC_MSG_LEN  17
    621            #define MT_AF_INC_MSG_EXT  10
    622          
    623            uint16 dataLen = pMsg->cmd.DataLength;  // Length of the data section in the response packet.
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   C8           XCH     A,R0
   \   000020   241F         ADD     A,#0x1f
   \   000022   F582         MOV     DPL,A
   \   000024   C8           XCH     A,R0
   \   000025   3400         ADDC    A,#0x0
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V6,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V7,A
    624            uint16 respLen = MT_AF_INC_MSG_LEN + dataLen;
   \   000030   E5..         MOV     A,?V6
   \   000032   2411         ADD     A,#0x11
   \   000034   F5..         MOV     ?V4,A
   \   000036   E4           CLR     A
   \   000037   35..         ADDC    A,?V7
   \   000039   F5..         MOV     ?V5,A
    625            uint8 cmd = MT_AF_INCOMING_MSG;
   \   00003B   7402         MOV     A,#0x2
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   7481         MOV     A,#-0x7f
   \   000042   F0           MOVX    @DPTR,A
    626            uint8 *pRsp, *pTmp;
    627            mtAfInMsgList_t *pItem = NULL;
   \   000043   7403         MOV     A,#0x3
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   7400         MOV     A,#0x0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   7400         MOV     A,#0x0
   \   00004E   F0           MOVX    @DPTR,A
    628          
    629          #if defined INTER_PAN
    630            if (StubAPS_InterPan(pMsg->srcAddr.panId, pMsg->srcAddr.endPoint))
    631            {
    632              cmd = MT_AF_INCOMING_MSG_EXT;
    633            }
    634            else
    635          #endif
    636            if ((pMsg->srcAddr.addrMode == afAddr64Bit) ||
    637                (respLen > (uint16)(MT_RPC_DATA_MAX - MT_AF_INC_MSG_EXT)))
   \   00004F   85..82       MOV     DPL,?XSP + 0
   \   000052   85..83       MOV     DPH,?XSP + 1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F8           MOV     R0,A
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   C8           XCH     A,R0
   \   00005A   240E         ADD     A,#0xe
   \   00005C   F582         MOV     DPL,A
   \   00005E   C8           XCH     A,R0
   \   00005F   3400         ADDC    A,#0x0
   \   000061   F583         MOV     DPH,A
   \   000063   E0           MOVX    A,@DPTR
   \   000064   6403         XRL     A,#0x3
   \   000066   600B         JZ      ??MT_AfIncomingMsg_0
   \   000068   C3           CLR     C
   \   000069   E5..         MOV     A,?V4
   \   00006B   94F1         SUBB    A,#-0xf
   \   00006D   E5..         MOV     A,?V5
   \   00006F   9400         SUBB    A,#0x0
   \   000071   4008         JC      ??MT_AfIncomingMsg_1
    638            {
    639              cmd = MT_AF_INCOMING_MSG_EXT;
   \                     ??MT_AfIncomingMsg_0:
   \   000073   7402         MOV     A,#0x2
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   7482         MOV     A,#-0x7e
   \   00007A   F0           MOVX    @DPTR,A
    640            }
    641          
    642            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \                     ??MT_AfIncomingMsg_1:
   \   00007B   7402         MOV     A,#0x2
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   E0           MOVX    A,@DPTR
   \   000081   6482         XRL     A,#0x82
   \   000083   700C         JNZ     ??MT_AfIncomingMsg_2
    643            {
    644              respLen += MT_AF_INC_MSG_EXT;
   \   000085   E5..         MOV     A,?V4
   \   000087   240A         ADD     A,#0xa
   \   000089   F5..         MOV     ?V4,A
   \   00008B   E5..         MOV     A,?V5
   \   00008D   3400         ADDC    A,#0x0
   \   00008F   F5..         MOV     ?V5,A
    645            }
    646          
    647            if (respLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfIncomingMsg_2:
   \   000091   C3           CLR     C
   \   000092   E5..         MOV     A,?V4
   \   000094   94FB         SUBB    A,#-0x5
   \   000096   E5..         MOV     A,?V5
   \   000098   9400         SUBB    A,#0x0
   \   00009A   4054         JC      ??MT_AfIncomingMsg_3
    648            {
    649              if ((pItem = (mtAfInMsgList_t *)osal_mem_alloc(sizeof(mtAfInMsgList_t) + dataLen)) == NULL)
   \   00009C                ; Setup parameters for call to function osal_mem_alloc
   \   00009C   E5..         MOV     A,?V6
   \   00009E   2409         ADD     A,#0x9
   \   0000A0   FA           MOV     R2,A
   \   0000A1   E4           CLR     A
   \   0000A2   35..         ADDC    A,?V7
   \   0000A4   FB           MOV     R3,A
   \   0000A5   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0000A8   8A..         MOV     ?V0,R2
   \   0000AA   8B..         MOV     ?V1,R3
   \   0000AC   A8..         MOV     R0,?V0
   \   0000AE   A9..         MOV     R1,?V1
   \   0000B0   7403         MOV     A,#0x3
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   E8           MOV     A,R0
   \   0000B6   F0           MOVX    @DPTR,A
   \   0000B7   A3           INC     DPTR
   \   0000B8   E9           MOV     A,R1
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   E8           MOV     A,R0
   \   0000BB   49           ORL     A,R1
   \   0000BC   7003         JNZ     $+5
   \   0000BE   02....       LJMP    ??MT_AfIncomingMsg_4 & 0xFFFF
    650              {
    651                return;  // If cannot hold a huge message, cannot give indication at all.
    652              }
    653          
    654              pItem->data = (uint8 *)(pItem+1);
   \   0000C1   7403         MOV     A,#0x3
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   2409         ADD     A,#0x9
   \   0000C9   FA           MOV     R2,A
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   3400         ADDC    A,#0x0
   \   0000CE   FB           MOV     R3,A
   \   0000CF   7403         MOV     A,#0x3
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   F8           MOV     R0,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   F583         MOV     DPH,A
   \   0000DA   8882         MOV     DPL,R0
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   EA           MOV     A,R2
   \   0000DF   F0           MOVX    @DPTR,A
   \   0000E0   A3           INC     DPTR
   \   0000E1   EB           MOV     A,R3
   \   0000E2   F0           MOVX    @DPTR,A
    655              respLen -= dataLen;  // Zero data bytes are sent with an over-sized incoming indication.
   \   0000E3   C3           CLR     C
   \   0000E4   E5..         MOV     A,?V4
   \   0000E6   95..         SUBB    A,?V6
   \   0000E8   F5..         MOV     ?V4,A
   \   0000EA   E5..         MOV     A,?V5
   \   0000EC   95..         SUBB    A,?V7
   \   0000EE   F5..         MOV     ?V5,A
    656            }
    657          
    658            // Attempt to allocate memory for the response packet.
    659            if ((pRsp = osal_mem_alloc(respLen)) == NULL)
   \                     ??MT_AfIncomingMsg_3:
   \   0000F0                ; Setup parameters for call to function osal_mem_alloc
   \   0000F0   AA..         MOV     R2,?V4
   \   0000F2   AB..         MOV     R3,?V5
   \   0000F4   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0000F7   8A..         MOV     ?V0,R2
   \   0000F9   8B..         MOV     ?V1,R3
   \   0000FB   A8..         MOV     R0,?V0
   \   0000FD   A9..         MOV     R1,?V1
   \   0000FF   7405         MOV     A,#0x5
   \   000101   12....       LCALL   ?XSTACK_DISP0_8
   \   000104   E8           MOV     A,R0
   \   000105   F0           MOVX    @DPTR,A
   \   000106   A3           INC     DPTR
   \   000107   E9           MOV     A,R1
   \   000108   F0           MOVX    @DPTR,A
   \   000109   E8           MOV     A,R0
   \   00010A   49           ORL     A,R1
   \   00010B   701E         JNZ     ??MT_AfIncomingMsg_5
    660            {
    661              if (pItem != NULL)
   \   00010D   7403         MOV     A,#0x3
   \   00010F   12....       LCALL   ?XSTACK_DISP0_8
   \   000112   E0           MOVX    A,@DPTR
   \   000113   F8           MOV     R0,A
   \   000114   A3           INC     DPTR
   \   000115   E0           MOVX    A,@DPTR
   \   000116   F9           MOV     R1,A
   \   000117   E8           MOV     A,R0
   \   000118   49           ORL     A,R1
   \   000119   600D         JZ      ??MT_AfIncomingMsg_6
    662              {
    663                (void)osal_mem_free(pItem);
   \   00011B                ; Setup parameters for call to function osal_mem_free
   \   00011B   7403         MOV     A,#0x3
   \   00011D   12....       LCALL   ?XSTACK_DISP0_8
   \   000120   E0           MOVX    A,@DPTR
   \   000121   FA           MOV     R2,A
   \   000122   A3           INC     DPTR
   \   000123   E0           MOVX    A,@DPTR
   \   000124   FB           MOV     R3,A
   \   000125   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    664              }
    665              return;
   \                     ??MT_AfIncomingMsg_6:
   \   000128   02....       LJMP    ??MT_AfIncomingMsg_4 & 0xFFFF
    666            }
    667            pTmp = pRsp;
   \                     ??MT_AfIncomingMsg_5:
   \   00012B   7405         MOV     A,#0x5
   \   00012D   12....       LCALL   ?XSTACK_DISP0_8
   \   000130   E0           MOVX    A,@DPTR
   \   000131   F8           MOV     R0,A
   \   000132   A3           INC     DPTR
   \   000133   E0           MOVX    A,@DPTR
   \   000134   F9           MOV     R1,A
   \   000135   E8           MOV     A,R0
   \   000136   FE           MOV     R6,A
   \   000137   E9           MOV     A,R1
   \   000138   FF           MOV     R7,A
    668          
    669            /* Group ID */
    670            *pTmp++ = LO_UINT16(pMsg->groupId);
   \   000139   85..82       MOV     DPL,?XSP + 0
   \   00013C   85..83       MOV     DPH,?XSP + 1
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   F8           MOV     R0,A
   \   000141   A3           INC     DPTR
   \   000142   E0           MOVX    A,@DPTR
   \   000143   F583         MOV     DPH,A
   \   000145   8882         MOV     DPL,R0
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   F8           MOV     R0,A
   \   00014B   A3           INC     DPTR
   \   00014C   E0           MOVX    A,@DPTR
   \   00014D   F9           MOV     R1,A
   \   00014E   E8           MOV     A,R0
   \   00014F   C0E0         PUSH    A
   \   000151   8E82         MOV     DPL,R6
   \   000153   8F83         MOV     DPH,R7
   \   000155   D0E0         POP     A
   \   000157   F0           MOVX    @DPTR,A
   \   000158   8E82         MOV     DPL,R6
   \   00015A   8F83         MOV     DPH,R7
   \   00015C   A3           INC     DPTR
   \   00015D   AE82         MOV     R6,DPL
   \   00015F   AF83         MOV     R7,DPH
    671            *pTmp++ = HI_UINT16(pMsg->groupId);
   \   000161   85..82       MOV     DPL,?XSP + 0
   \   000164   85..83       MOV     DPH,?XSP + 1
   \   000167   E0           MOVX    A,@DPTR
   \   000168   F8           MOV     R0,A
   \   000169   A3           INC     DPTR
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   F583         MOV     DPH,A
   \   00016D   8882         MOV     DPL,R0
   \   00016F   A3           INC     DPTR
   \   000170   A3           INC     DPTR
   \   000171   E0           MOVX    A,@DPTR
   \   000172   F8           MOV     R0,A
   \   000173   A3           INC     DPTR
   \   000174   E0           MOVX    A,@DPTR
   \   000175   F9           MOV     R1,A
   \   000176   E4           CLR     A
   \   000177   C9           XCH     A,R1
   \   000178   F8           MOV     R0,A
   \   000179   E8           MOV     A,R0
   \   00017A   C0E0         PUSH    A
   \   00017C   8E82         MOV     DPL,R6
   \   00017E   8F83         MOV     DPH,R7
   \   000180   D0E0         POP     A
   \   000182   F0           MOVX    @DPTR,A
   \   000183   8E82         MOV     DPL,R6
   \   000185   8F83         MOV     DPH,R7
   \   000187   A3           INC     DPTR
   \   000188   AE82         MOV     R6,DPL
   \   00018A   AF83         MOV     R7,DPH
    672          
    673            /* Cluster ID */
    674            *pTmp++ = LO_UINT16(pMsg->clusterId);
   \   00018C   85..82       MOV     DPL,?XSP + 0
   \   00018F   85..83       MOV     DPH,?XSP + 1
   \   000192   E0           MOVX    A,@DPTR
   \   000193   F8           MOV     R0,A
   \   000194   A3           INC     DPTR
   \   000195   E0           MOVX    A,@DPTR
   \   000196   F583         MOV     DPH,A
   \   000198   8882         MOV     DPL,R0
   \   00019A   A3           INC     DPTR
   \   00019B   A3           INC     DPTR
   \   00019C   A3           INC     DPTR
   \   00019D   A3           INC     DPTR
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   F8           MOV     R0,A
   \   0001A0   A3           INC     DPTR
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   F9           MOV     R1,A
   \   0001A3   E8           MOV     A,R0
   \   0001A4   C0E0         PUSH    A
   \   0001A6   8E82         MOV     DPL,R6
   \   0001A8   8F83         MOV     DPH,R7
   \   0001AA   D0E0         POP     A
   \   0001AC   F0           MOVX    @DPTR,A
   \   0001AD   8E82         MOV     DPL,R6
   \   0001AF   8F83         MOV     DPH,R7
   \   0001B1   A3           INC     DPTR
   \   0001B2   AE82         MOV     R6,DPL
   \   0001B4   AF83         MOV     R7,DPH
    675            *pTmp++ = HI_UINT16(pMsg->clusterId);
   \   0001B6   85..82       MOV     DPL,?XSP + 0
   \   0001B9   85..83       MOV     DPH,?XSP + 1
   \   0001BC   E0           MOVX    A,@DPTR
   \   0001BD   F8           MOV     R0,A
   \   0001BE   A3           INC     DPTR
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   F583         MOV     DPH,A
   \   0001C2   8882         MOV     DPL,R0
   \   0001C4   A3           INC     DPTR
   \   0001C5   A3           INC     DPTR
   \   0001C6   A3           INC     DPTR
   \   0001C7   A3           INC     DPTR
   \   0001C8   E0           MOVX    A,@DPTR
   \   0001C9   F8           MOV     R0,A
   \   0001CA   A3           INC     DPTR
   \   0001CB   E0           MOVX    A,@DPTR
   \   0001CC   F9           MOV     R1,A
   \   0001CD   E4           CLR     A
   \   0001CE   C9           XCH     A,R1
   \   0001CF   F8           MOV     R0,A
   \   0001D0   E8           MOV     A,R0
   \   0001D1   C0E0         PUSH    A
   \   0001D3   8E82         MOV     DPL,R6
   \   0001D5   8F83         MOV     DPH,R7
   \   0001D7   D0E0         POP     A
   \   0001D9   F0           MOVX    @DPTR,A
   \   0001DA   8E82         MOV     DPL,R6
   \   0001DC   8F83         MOV     DPH,R7
   \   0001DE   A3           INC     DPTR
   \   0001DF   AE82         MOV     R6,DPL
   \   0001E1   AF83         MOV     R7,DPH
    676          
    677            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   0001E3   7402         MOV     A,#0x2
   \   0001E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E8   E0           MOVX    A,@DPTR
   \   0001E9   6482         XRL     A,#0x82
   \   0001EB   6003         JZ      $+5
   \   0001ED   02....       LJMP    ??MT_AfIncomingMsg_7 & 0xFFFF
    678            {
    679              *pTmp++ = pMsg->srcAddr.addrMode;
   \   0001F0   85..82       MOV     DPL,?XSP + 0
   \   0001F3   85..83       MOV     DPH,?XSP + 1
   \   0001F6   E0           MOVX    A,@DPTR
   \   0001F7   F8           MOV     R0,A
   \   0001F8   A3           INC     DPTR
   \   0001F9   E0           MOVX    A,@DPTR
   \   0001FA   C8           XCH     A,R0
   \   0001FB   240E         ADD     A,#0xe
   \   0001FD   F582         MOV     DPL,A
   \   0001FF   C8           XCH     A,R0
   \   000200   3400         ADDC    A,#0x0
   \   000202   F583         MOV     DPH,A
   \   000204   E0           MOVX    A,@DPTR
   \   000205   C0E0         PUSH    A
   \   000207   8E82         MOV     DPL,R6
   \   000209   8F83         MOV     DPH,R7
   \   00020B   D0E0         POP     A
   \   00020D   F0           MOVX    @DPTR,A
   \   00020E   8E82         MOV     DPL,R6
   \   000210   8F83         MOV     DPH,R7
   \   000212   A3           INC     DPTR
   \   000213   AE82         MOV     R6,DPL
   \   000215   AF83         MOV     R7,DPH
    680          
    681              if (pMsg->srcAddr.addrMode == afAddr64Bit)
   \   000217   85..82       MOV     DPL,?XSP + 0
   \   00021A   85..83       MOV     DPH,?XSP + 1
   \   00021D   E0           MOVX    A,@DPTR
   \   00021E   F8           MOV     R0,A
   \   00021F   A3           INC     DPTR
   \   000220   E0           MOVX    A,@DPTR
   \   000221   C8           XCH     A,R0
   \   000222   240E         ADD     A,#0xe
   \   000224   F582         MOV     DPL,A
   \   000226   C8           XCH     A,R0
   \   000227   3400         ADDC    A,#0x0
   \   000229   F583         MOV     DPH,A
   \   00022B   E0           MOVX    A,@DPTR
   \   00022C   6403         XRL     A,#0x3
   \   00022E   7035         JNZ     ??MT_AfIncomingMsg_8
    682              {
    683                (void)osal_memcpy(pTmp, pMsg->srcAddr.addr.extAddr, Z_EXTADDR_LEN);
   \   000230                ; Setup parameters for call to function osal_memcpy
   \   000230   85..82       MOV     DPL,?XSP + 0
   \   000233   85..83       MOV     DPH,?XSP + 1
   \   000236   E0           MOVX    A,@DPTR
   \   000237   2406         ADD     A,#0x6
   \   000239   F5..         MOV     ?V0,A
   \   00023B   A3           INC     DPTR
   \   00023C   E0           MOVX    A,@DPTR
   \   00023D   3400         ADDC    A,#0x0
   \   00023F   F5..         MOV     ?V1,A
   \   000241   75..00       MOV     ?V2,#0x0
   \   000244   78..         MOV     R0,#?V0
   \   000246   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000249   7C08         MOV     R4,#0x8
   \   00024B   7D00         MOV     R5,#0x0
   \   00024D   EE           MOV     A,R6
   \   00024E   FA           MOV     R2,A
   \   00024F   EF           MOV     A,R7
   \   000250   FB           MOV     R3,A
   \   000251   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000254   7403         MOV     A,#0x3
   \   000256   12....       LCALL   ?DEALLOC_XSTACK8
   \   000259   8A..         MOV     ?V0,R2
   \   00025B   8B..         MOV     ?V1,R3
   \   00025D   85..82       MOV     DPL,?V0
   \   000260   85..83       MOV     DPH,?V1
   \   000263   804A         SJMP    ??MT_AfIncomingMsg_9
    684              }
    685              else
    686              {
    687                pTmp[0] = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_8:
   \   000265   85..82       MOV     DPL,?XSP + 0
   \   000268   85..83       MOV     DPH,?XSP + 1
   \   00026B   E0           MOVX    A,@DPTR
   \   00026C   F8           MOV     R0,A
   \   00026D   A3           INC     DPTR
   \   00026E   E0           MOVX    A,@DPTR
   \   00026F   C8           XCH     A,R0
   \   000270   2406         ADD     A,#0x6
   \   000272   F582         MOV     DPL,A
   \   000274   C8           XCH     A,R0
   \   000275   3400         ADDC    A,#0x0
   \   000277   F583         MOV     DPH,A
   \   000279   E0           MOVX    A,@DPTR
   \   00027A   F8           MOV     R0,A
   \   00027B   A3           INC     DPTR
   \   00027C   E0           MOVX    A,@DPTR
   \   00027D   F9           MOV     R1,A
   \   00027E   E8           MOV     A,R0
   \   00027F   C0E0         PUSH    A
   \   000281   8E82         MOV     DPL,R6
   \   000283   8F83         MOV     DPH,R7
   \   000285   D0E0         POP     A
   \   000287   F0           MOVX    @DPTR,A
    688                pTmp[1] = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   000288   85..82       MOV     DPL,?XSP + 0
   \   00028B   85..83       MOV     DPH,?XSP + 1
   \   00028E   E0           MOVX    A,@DPTR
   \   00028F   F8           MOV     R0,A
   \   000290   A3           INC     DPTR
   \   000291   E0           MOVX    A,@DPTR
   \   000292   C8           XCH     A,R0
   \   000293   2406         ADD     A,#0x6
   \   000295   F582         MOV     DPL,A
   \   000297   C8           XCH     A,R0
   \   000298   3400         ADDC    A,#0x0
   \   00029A   F583         MOV     DPH,A
   \   00029C   E0           MOVX    A,@DPTR
   \   00029D   F8           MOV     R0,A
   \   00029E   A3           INC     DPTR
   \   00029F   E0           MOVX    A,@DPTR
   \   0002A0   F9           MOV     R1,A
   \   0002A1   E4           CLR     A
   \   0002A2   C9           XCH     A,R1
   \   0002A3   F8           MOV     R0,A
   \   0002A4   E8           MOV     A,R0
   \   0002A5   C0E0         PUSH    A
   \   0002A7   8E82         MOV     DPL,R6
   \   0002A9   8F83         MOV     DPH,R7
   \   0002AB   A3           INC     DPTR
   \   0002AC   D0E0         POP     A
   \   0002AE   F0           MOVX    @DPTR,A
    689              }
    690              pTmp += Z_EXTADDR_LEN;
   \                     ??MT_AfIncomingMsg_9:
   \   0002AF   EE           MOV     A,R6
   \   0002B0   2408         ADD     A,#0x8
   \   0002B2   FE           MOV     R6,A
   \   0002B3   5001         JNC     ??MT_AfIncomingMsg_10
   \   0002B5   0F           INC     R7
    691          
    692              *pTmp++ = pMsg->srcAddr.endPoint;
   \                     ??MT_AfIncomingMsg_10:
   \   0002B6   85..82       MOV     DPL,?XSP + 0
   \   0002B9   85..83       MOV     DPH,?XSP + 1
   \   0002BC   E0           MOVX    A,@DPTR
   \   0002BD   F8           MOV     R0,A
   \   0002BE   A3           INC     DPTR
   \   0002BF   E0           MOVX    A,@DPTR
   \   0002C0   C8           XCH     A,R0
   \   0002C1   240F         ADD     A,#0xf
   \   0002C3   F582         MOV     DPL,A
   \   0002C5   C8           XCH     A,R0
   \   0002C6   3400         ADDC    A,#0x0
   \   0002C8   F583         MOV     DPH,A
   \   0002CA   E0           MOVX    A,@DPTR
   \   0002CB   C0E0         PUSH    A
   \   0002CD   8E82         MOV     DPL,R6
   \   0002CF   8F83         MOV     DPH,R7
   \   0002D1   D0E0         POP     A
   \   0002D3   F0           MOVX    @DPTR,A
   \   0002D4   8E82         MOV     DPL,R6
   \   0002D6   8F83         MOV     DPH,R7
   \   0002D8   A3           INC     DPTR
   \   0002D9   AE82         MOV     R6,DPL
   \   0002DB   AF83         MOV     R7,DPH
    693          #if defined INTER_PAN
    694              *pTmp++ = LO_UINT16(pMsg->srcAddr.panId);
    695              *pTmp++ = HI_UINT16(pMsg->srcAddr.panId);
    696          #else
    697              *pTmp++ = 0;
   \   0002DD   8E82         MOV     DPL,R6
   \   0002DF   8F83         MOV     DPH,R7
   \   0002E1   7400         MOV     A,#0x0
   \   0002E3   F0           MOVX    @DPTR,A
   \   0002E4   8E82         MOV     DPL,R6
   \   0002E6   8F83         MOV     DPH,R7
   \   0002E8   A3           INC     DPTR
   \   0002E9   AE82         MOV     R6,DPL
   \   0002EB   AF83         MOV     R7,DPH
    698              *pTmp++ = 0;
   \   0002ED   8E82         MOV     DPL,R6
   \   0002EF   8F83         MOV     DPH,R7
   \   0002F1   7400         MOV     A,#0x0
   \   0002F3   F0           MOVX    @DPTR,A
   \   0002F4   8E82         MOV     DPL,R6
   \   0002F6   8F83         MOV     DPH,R7
   \   0002F8   A3           INC     DPTR
   \   0002F9   AE82         MOV     R6,DPL
   \   0002FB   AF83         MOV     R7,DPH
   \   0002FD   02....       LJMP    ??MT_AfIncomingMsg_11 & 0xFFFF
    699          #endif
    700            }
    701            else
    702            {
    703              /* Source Address */
    704              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_7:
   \   000300   85..82       MOV     DPL,?XSP + 0
   \   000303   85..83       MOV     DPH,?XSP + 1
   \   000306   E0           MOVX    A,@DPTR
   \   000307   F8           MOV     R0,A
   \   000308   A3           INC     DPTR
   \   000309   E0           MOVX    A,@DPTR
   \   00030A   C8           XCH     A,R0
   \   00030B   2406         ADD     A,#0x6
   \   00030D   F582         MOV     DPL,A
   \   00030F   C8           XCH     A,R0
   \   000310   3400         ADDC    A,#0x0
   \   000312   F583         MOV     DPH,A
   \   000314   E0           MOVX    A,@DPTR
   \   000315   F8           MOV     R0,A
   \   000316   A3           INC     DPTR
   \   000317   E0           MOVX    A,@DPTR
   \   000318   F9           MOV     R1,A
   \   000319   E8           MOV     A,R0
   \   00031A   C0E0         PUSH    A
   \   00031C   8E82         MOV     DPL,R6
   \   00031E   8F83         MOV     DPH,R7
   \   000320   D0E0         POP     A
   \   000322   F0           MOVX    @DPTR,A
   \   000323   8E82         MOV     DPL,R6
   \   000325   8F83         MOV     DPH,R7
   \   000327   A3           INC     DPTR
   \   000328   AE82         MOV     R6,DPL
   \   00032A   AF83         MOV     R7,DPH
    705              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   00032C   85..82       MOV     DPL,?XSP + 0
   \   00032F   85..83       MOV     DPH,?XSP + 1
   \   000332   E0           MOVX    A,@DPTR
   \   000333   F8           MOV     R0,A
   \   000334   A3           INC     DPTR
   \   000335   E0           MOVX    A,@DPTR
   \   000336   C8           XCH     A,R0
   \   000337   2406         ADD     A,#0x6
   \   000339   F582         MOV     DPL,A
   \   00033B   C8           XCH     A,R0
   \   00033C   3400         ADDC    A,#0x0
   \   00033E   F583         MOV     DPH,A
   \   000340   E0           MOVX    A,@DPTR
   \   000341   F8           MOV     R0,A
   \   000342   A3           INC     DPTR
   \   000343   E0           MOVX    A,@DPTR
   \   000344   F9           MOV     R1,A
   \   000345   E4           CLR     A
   \   000346   C9           XCH     A,R1
   \   000347   F8           MOV     R0,A
   \   000348   E8           MOV     A,R0
   \   000349   C0E0         PUSH    A
   \   00034B   8E82         MOV     DPL,R6
   \   00034D   8F83         MOV     DPH,R7
   \   00034F   D0E0         POP     A
   \   000351   F0           MOVX    @DPTR,A
   \   000352   8E82         MOV     DPL,R6
   \   000354   8F83         MOV     DPH,R7
   \   000356   A3           INC     DPTR
   \   000357   AE82         MOV     R6,DPL
   \   000359   AF83         MOV     R7,DPH
    706          
    707              /* Source EP */
    708              *pTmp++ = pMsg->srcAddr.endPoint;
   \   00035B   85..82       MOV     DPL,?XSP + 0
   \   00035E   85..83       MOV     DPH,?XSP + 1
   \   000361   E0           MOVX    A,@DPTR
   \   000362   F8           MOV     R0,A
   \   000363   A3           INC     DPTR
   \   000364   E0           MOVX    A,@DPTR
   \   000365   C8           XCH     A,R0
   \   000366   240F         ADD     A,#0xf
   \   000368   F582         MOV     DPL,A
   \   00036A   C8           XCH     A,R0
   \   00036B   3400         ADDC    A,#0x0
   \   00036D   F583         MOV     DPH,A
   \   00036F   E0           MOVX    A,@DPTR
   \   000370   C0E0         PUSH    A
   \   000372   8E82         MOV     DPL,R6
   \   000374   8F83         MOV     DPH,R7
   \   000376   D0E0         POP     A
   \   000378   F0           MOVX    @DPTR,A
   \   000379   8E82         MOV     DPL,R6
   \   00037B   8F83         MOV     DPH,R7
   \   00037D   A3           INC     DPTR
   \   00037E   AE82         MOV     R6,DPL
   \   000380   AF83         MOV     R7,DPH
    709            }
    710          
    711            /* Destination EP */
    712            *pTmp++ = pMsg->endPoint;
   \                     ??MT_AfIncomingMsg_11:
   \   000382   85..82       MOV     DPL,?XSP + 0
   \   000385   85..83       MOV     DPH,?XSP + 1
   \   000388   E0           MOVX    A,@DPTR
   \   000389   F8           MOV     R0,A
   \   00038A   A3           INC     DPTR
   \   00038B   E0           MOVX    A,@DPTR
   \   00038C   C8           XCH     A,R0
   \   00038D   2414         ADD     A,#0x14
   \   00038F   F582         MOV     DPL,A
   \   000391   C8           XCH     A,R0
   \   000392   3400         ADDC    A,#0x0
   \   000394   F583         MOV     DPH,A
   \   000396   E0           MOVX    A,@DPTR
   \   000397   C0E0         PUSH    A
   \   000399   8E82         MOV     DPL,R6
   \   00039B   8F83         MOV     DPH,R7
   \   00039D   D0E0         POP     A
   \   00039F   F0           MOVX    @DPTR,A
   \   0003A0   8E82         MOV     DPL,R6
   \   0003A2   8F83         MOV     DPH,R7
   \   0003A4   A3           INC     DPTR
   \   0003A5   AE82         MOV     R6,DPL
   \   0003A7   AF83         MOV     R7,DPH
    713          
    714            /* WasBroadCast */
    715            *pTmp++ = pMsg->wasBroadcast;
   \   0003A9   85..82       MOV     DPL,?XSP + 0
   \   0003AC   85..83       MOV     DPH,?XSP + 1
   \   0003AF   E0           MOVX    A,@DPTR
   \   0003B0   F8           MOV     R0,A
   \   0003B1   A3           INC     DPTR
   \   0003B2   E0           MOVX    A,@DPTR
   \   0003B3   C8           XCH     A,R0
   \   0003B4   2415         ADD     A,#0x15
   \   0003B6   F582         MOV     DPL,A
   \   0003B8   C8           XCH     A,R0
   \   0003B9   3400         ADDC    A,#0x0
   \   0003BB   F583         MOV     DPH,A
   \   0003BD   E0           MOVX    A,@DPTR
   \   0003BE   C0E0         PUSH    A
   \   0003C0   8E82         MOV     DPL,R6
   \   0003C2   8F83         MOV     DPH,R7
   \   0003C4   D0E0         POP     A
   \   0003C6   F0           MOVX    @DPTR,A
   \   0003C7   8E82         MOV     DPL,R6
   \   0003C9   8F83         MOV     DPH,R7
   \   0003CB   A3           INC     DPTR
   \   0003CC   AE82         MOV     R6,DPL
   \   0003CE   AF83         MOV     R7,DPH
    716          
    717            /* LinkQuality */
    718            *pTmp++ = pMsg->LinkQuality;
   \   0003D0   85..82       MOV     DPL,?XSP + 0
   \   0003D3   85..83       MOV     DPH,?XSP + 1
   \   0003D6   E0           MOVX    A,@DPTR
   \   0003D7   F8           MOV     R0,A
   \   0003D8   A3           INC     DPTR
   \   0003D9   E0           MOVX    A,@DPTR
   \   0003DA   C8           XCH     A,R0
   \   0003DB   2416         ADD     A,#0x16
   \   0003DD   F582         MOV     DPL,A
   \   0003DF   C8           XCH     A,R0
   \   0003E0   3400         ADDC    A,#0x0
   \   0003E2   F583         MOV     DPH,A
   \   0003E4   E0           MOVX    A,@DPTR
   \   0003E5   C0E0         PUSH    A
   \   0003E7   8E82         MOV     DPL,R6
   \   0003E9   8F83         MOV     DPH,R7
   \   0003EB   D0E0         POP     A
   \   0003ED   F0           MOVX    @DPTR,A
   \   0003EE   8E82         MOV     DPL,R6
   \   0003F0   8F83         MOV     DPH,R7
   \   0003F2   A3           INC     DPTR
   \   0003F3   AE82         MOV     R6,DPL
   \   0003F5   AF83         MOV     R7,DPH
    719          
    720            /* SecurityUse */
    721            *pTmp++ = pMsg->SecurityUse;
   \   0003F7   85..82       MOV     DPL,?XSP + 0
   \   0003FA   85..83       MOV     DPH,?XSP + 1
   \   0003FD   E0           MOVX    A,@DPTR
   \   0003FE   F8           MOV     R0,A
   \   0003FF   A3           INC     DPTR
   \   000400   E0           MOVX    A,@DPTR
   \   000401   C8           XCH     A,R0
   \   000402   2419         ADD     A,#0x19
   \   000404   F582         MOV     DPL,A
   \   000406   C8           XCH     A,R0
   \   000407   3400         ADDC    A,#0x0
   \   000409   F583         MOV     DPH,A
   \   00040B   E0           MOVX    A,@DPTR
   \   00040C   C0E0         PUSH    A
   \   00040E   8E82         MOV     DPL,R6
   \   000410   8F83         MOV     DPH,R7
   \   000412   D0E0         POP     A
   \   000414   F0           MOVX    @DPTR,A
   \   000415   8E82         MOV     DPL,R6
   \   000417   8F83         MOV     DPH,R7
   \   000419   A3           INC     DPTR
   \   00041A   AE82         MOV     R6,DPL
   \   00041C   AF83         MOV     R7,DPH
    722          
    723            /* Timestamp */
    724            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 0);
   \   00041E   85..82       MOV     DPL,?XSP + 0
   \   000421   85..83       MOV     DPH,?XSP + 1
   \   000424   E0           MOVX    A,@DPTR
   \   000425   F8           MOV     R0,A
   \   000426   A3           INC     DPTR
   \   000427   E0           MOVX    A,@DPTR
   \   000428   C8           XCH     A,R0
   \   000429   241A         ADD     A,#0x1a
   \   00042B   F582         MOV     DPL,A
   \   00042D   C8           XCH     A,R0
   \   00042E   3400         ADDC    A,#0x0
   \   000430   F583         MOV     DPH,A
   \   000432   78..         MOV     R0,#?V0
   \   000434   12....       LCALL   ?L_MOV_X
   \   000437   E5..         MOV     A,?V0
   \   000439   C0E0         PUSH    A
   \   00043B   8E82         MOV     DPL,R6
   \   00043D   8F83         MOV     DPH,R7
   \   00043F   D0E0         POP     A
   \   000441   F0           MOVX    @DPTR,A
   \   000442   8E82         MOV     DPL,R6
   \   000444   8F83         MOV     DPH,R7
   \   000446   A3           INC     DPTR
   \   000447   AE82         MOV     R6,DPL
   \   000449   AF83         MOV     R7,DPH
    725            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 1);
   \   00044B   85..82       MOV     DPL,?XSP + 0
   \   00044E   85..83       MOV     DPH,?XSP + 1
   \   000451   E0           MOVX    A,@DPTR
   \   000452   F8           MOV     R0,A
   \   000453   A3           INC     DPTR
   \   000454   E0           MOVX    A,@DPTR
   \   000455   C8           XCH     A,R0
   \   000456   241A         ADD     A,#0x1a
   \   000458   F582         MOV     DPL,A
   \   00045A   C8           XCH     A,R0
   \   00045B   3400         ADDC    A,#0x0
   \   00045D   F583         MOV     DPH,A
   \   00045F   78..         MOV     R0,#?V0
   \   000461   12....       LCALL   ?L_MOV_X
   \   000464   E4           CLR     A
   \   000465   C5..         XCH     A,?V1
   \   000467   F5..         MOV     ?V0,A
   \   000469   E5..         MOV     A,?V0
   \   00046B   C0E0         PUSH    A
   \   00046D   8E82         MOV     DPL,R6
   \   00046F   8F83         MOV     DPH,R7
   \   000471   D0E0         POP     A
   \   000473   F0           MOVX    @DPTR,A
   \   000474   8E82         MOV     DPL,R6
   \   000476   8F83         MOV     DPH,R7
   \   000478   A3           INC     DPTR
   \   000479   AE82         MOV     R6,DPL
   \   00047B   AF83         MOV     R7,DPH
    726            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 2);
   \   00047D   85..82       MOV     DPL,?XSP + 0
   \   000480   85..83       MOV     DPH,?XSP + 1
   \   000483   E0           MOVX    A,@DPTR
   \   000484   F8           MOV     R0,A
   \   000485   A3           INC     DPTR
   \   000486   E0           MOVX    A,@DPTR
   \   000487   C8           XCH     A,R0
   \   000488   241A         ADD     A,#0x1a
   \   00048A   F582         MOV     DPL,A
   \   00048C   C8           XCH     A,R0
   \   00048D   3400         ADDC    A,#0x0
   \   00048F   F583         MOV     DPH,A
   \   000491   78..         MOV     R0,#?V0
   \   000493   12....       LCALL   ?L_MOV_X
   \   000496   7410         MOV     A,#0x10
   \   000498   78..         MOV     R0,#?V0
   \   00049A   12....       LCALL   ?UL_SHR
   \   00049D   E5..         MOV     A,?V0
   \   00049F   C0E0         PUSH    A
   \   0004A1   8E82         MOV     DPL,R6
   \   0004A3   8F83         MOV     DPH,R7
   \   0004A5   D0E0         POP     A
   \   0004A7   F0           MOVX    @DPTR,A
   \   0004A8   8E82         MOV     DPL,R6
   \   0004AA   8F83         MOV     DPH,R7
   \   0004AC   A3           INC     DPTR
   \   0004AD   AE82         MOV     R6,DPL
   \   0004AF   AF83         MOV     R7,DPH
    727            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 3);
   \   0004B1   85..82       MOV     DPL,?XSP + 0
   \   0004B4   85..83       MOV     DPH,?XSP + 1
   \   0004B7   E0           MOVX    A,@DPTR
   \   0004B8   F8           MOV     R0,A
   \   0004B9   A3           INC     DPTR
   \   0004BA   E0           MOVX    A,@DPTR
   \   0004BB   C8           XCH     A,R0
   \   0004BC   241A         ADD     A,#0x1a
   \   0004BE   F582         MOV     DPL,A
   \   0004C0   C8           XCH     A,R0
   \   0004C1   3400         ADDC    A,#0x0
   \   0004C3   F583         MOV     DPH,A
   \   0004C5   78..         MOV     R0,#?V0
   \   0004C7   12....       LCALL   ?L_MOV_X
   \   0004CA   7418         MOV     A,#0x18
   \   0004CC   78..         MOV     R0,#?V0
   \   0004CE   12....       LCALL   ?UL_SHR
   \   0004D1   E5..         MOV     A,?V0
   \   0004D3   C0E0         PUSH    A
   \   0004D5   8E82         MOV     DPL,R6
   \   0004D7   8F83         MOV     DPH,R7
   \   0004D9   D0E0         POP     A
   \   0004DB   F0           MOVX    @DPTR,A
   \   0004DC   8E82         MOV     DPL,R6
   \   0004DE   8F83         MOV     DPH,R7
   \   0004E0   A3           INC     DPTR
   \   0004E1   AE82         MOV     R6,DPL
   \   0004E3   AF83         MOV     R7,DPH
    728          
    729          
    730            /* Data Length */
    731            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   0004E5   7402         MOV     A,#0x2
   \   0004E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0004EA   E0           MOVX    A,@DPTR
   \   0004EB   6482         XRL     A,#0x82
   \   0004ED   7040         JNZ     ??MT_AfIncomingMsg_12
    732            {
    733              /* Z-Tool apparently takes the last Byte before the data buffer as the dynamic length and
    734               * ignores the bigger UInt16 length of an EXT incoming message. But no data bytes will be sent
    735               * with a huge message, so it's necessary to work-around and fake-out Z-Tool with a zero here.
    736               */
    737              *pTmp++ = 0;  // TODO - workaround Z-Tool shortcoming; should be: = pMsg->cmd.TransSeqNumber;
   \   0004EF   8E82         MOV     DPL,R6
   \   0004F1   8F83         MOV     DPH,R7
   \   0004F3   7400         MOV     A,#0x0
   \   0004F5   F0           MOVX    @DPTR,A
   \   0004F6   8E82         MOV     DPL,R6
   \   0004F8   8F83         MOV     DPH,R7
   \   0004FA   A3           INC     DPTR
   \   0004FB   AE82         MOV     R6,DPL
   \   0004FD   AF83         MOV     R7,DPH
    738              *pTmp++ = LO_UINT16(dataLen);
   \   0004FF   E5..         MOV     A,?V6
   \   000501   C0E0         PUSH    A
   \   000503   8E82         MOV     DPL,R6
   \   000505   8F83         MOV     DPH,R7
   \   000507   D0E0         POP     A
   \   000509   F0           MOVX    @DPTR,A
   \   00050A   8E82         MOV     DPL,R6
   \   00050C   8F83         MOV     DPH,R7
   \   00050E   A3           INC     DPTR
   \   00050F   AE82         MOV     R6,DPL
   \   000511   AF83         MOV     R7,DPH
    739              *pTmp++ = HI_UINT16(dataLen);
   \   000513   A8..         MOV     R0,?V6
   \   000515   A9..         MOV     R1,?V7
   \   000517   E4           CLR     A
   \   000518   C9           XCH     A,R1
   \   000519   F8           MOV     R0,A
   \   00051A   E8           MOV     A,R0
   \   00051B   C0E0         PUSH    A
   \   00051D   8E82         MOV     DPL,R6
   \   00051F   8F83         MOV     DPH,R7
   \   000521   D0E0         POP     A
   \   000523   F0           MOVX    @DPTR,A
   \   000524   8E82         MOV     DPL,R6
   \   000526   8F83         MOV     DPH,R7
   \   000528   A3           INC     DPTR
   \   000529   AE82         MOV     R6,DPL
   \   00052B   AF83         MOV     R7,DPH
   \   00052D   803B         SJMP    ??MT_AfIncomingMsg_13
    740            }
    741            else
    742            {
    743              *pTmp++ = pMsg->cmd.TransSeqNumber;
   \                     ??MT_AfIncomingMsg_12:
   \   00052F   85..82       MOV     DPL,?XSP + 0
   \   000532   85..83       MOV     DPH,?XSP + 1
   \   000535   E0           MOVX    A,@DPTR
   \   000536   F8           MOV     R0,A
   \   000537   A3           INC     DPTR
   \   000538   E0           MOVX    A,@DPTR
   \   000539   C8           XCH     A,R0
   \   00053A   241E         ADD     A,#0x1e
   \   00053C   F582         MOV     DPL,A
   \   00053E   C8           XCH     A,R0
   \   00053F   3400         ADDC    A,#0x0
   \   000541   F583         MOV     DPH,A
   \   000543   E0           MOVX    A,@DPTR
   \   000544   C0E0         PUSH    A
   \   000546   8E82         MOV     DPL,R6
   \   000548   8F83         MOV     DPH,R7
   \   00054A   D0E0         POP     A
   \   00054C   F0           MOVX    @DPTR,A
   \   00054D   8E82         MOV     DPL,R6
   \   00054F   8F83         MOV     DPH,R7
   \   000551   A3           INC     DPTR
   \   000552   AE82         MOV     R6,DPL
   \   000554   AF83         MOV     R7,DPH
    744              *pTmp++ = dataLen;
   \   000556   E5..         MOV     A,?V6
   \   000558   C0E0         PUSH    A
   \   00055A   8E82         MOV     DPL,R6
   \   00055C   8F83         MOV     DPH,R7
   \   00055E   D0E0         POP     A
   \   000560   F0           MOVX    @DPTR,A
   \   000561   8E82         MOV     DPL,R6
   \   000563   8F83         MOV     DPH,R7
   \   000565   A3           INC     DPTR
   \   000566   AE82         MOV     R6,DPL
   \   000568   AF83         MOV     R7,DPH
    745            }
    746          
    747            /* Data */
    748            if (pItem != NULL)
   \                     ??MT_AfIncomingMsg_13:
   \   00056A   7403         MOV     A,#0x3
   \   00056C   12....       LCALL   ?XSTACK_DISP0_8
   \   00056F   E0           MOVX    A,@DPTR
   \   000570   F8           MOV     R0,A
   \   000571   A3           INC     DPTR
   \   000572   E0           MOVX    A,@DPTR
   \   000573   F9           MOV     R1,A
   \   000574   E8           MOV     A,R0
   \   000575   49           ORL     A,R1
   \   000576   7003         JNZ     $+5
   \   000578   02....       LJMP    ??MT_AfIncomingMsg_14 & 0xFFFF
    749            {
    750              // Enqueue the new huge incoming item.
    751              pItem->next = pMtAfInMsgList;
   \   00057B   90....       MOV     DPTR,#pMtAfInMsgList
   \   00057E   E0           MOVX    A,@DPTR
   \   00057F   FA           MOV     R2,A
   \   000580   A3           INC     DPTR
   \   000581   E0           MOVX    A,@DPTR
   \   000582   FB           MOV     R3,A
   \   000583   7403         MOV     A,#0x3
   \   000585   12....       LCALL   ?XSTACK_DISP0_8
   \   000588   E0           MOVX    A,@DPTR
   \   000589   F8           MOV     R0,A
   \   00058A   A3           INC     DPTR
   \   00058B   E0           MOVX    A,@DPTR
   \   00058C   F583         MOV     DPH,A
   \   00058E   8882         MOV     DPL,R0
   \   000590   EA           MOV     A,R2
   \   000591   F0           MOVX    @DPTR,A
   \   000592   A3           INC     DPTR
   \   000593   EB           MOV     A,R3
   \   000594   F0           MOVX    @DPTR,A
    752              pMtAfInMsgList = pItem;
   \   000595   7403         MOV     A,#0x3
   \   000597   12....       LCALL   ?XSTACK_DISP0_8
   \   00059A   E0           MOVX    A,@DPTR
   \   00059B   F8           MOV     R0,A
   \   00059C   A3           INC     DPTR
   \   00059D   E0           MOVX    A,@DPTR
   \   00059E   F9           MOV     R1,A
   \   00059F   90....       MOV     DPTR,#pMtAfInMsgList
   \   0005A2   E8           MOV     A,R0
   \   0005A3   F0           MOVX    @DPTR,A
   \   0005A4   A3           INC     DPTR
   \   0005A5   E9           MOV     A,R1
   \   0005A6   F0           MOVX    @DPTR,A
    753          
    754              // Setup to time-out the huge incoming item if host does not MT_AF_DATA_RETRIEVE it.
    755              pItem->tick = MT_AF_EXEC_CNT;
   \   0005A7   7403         MOV     A,#0x3
   \   0005A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0005AC   E0           MOVX    A,@DPTR
   \   0005AD   F8           MOV     R0,A
   \   0005AE   A3           INC     DPTR
   \   0005AF   E0           MOVX    A,@DPTR
   \   0005B0   C8           XCH     A,R0
   \   0005B1   2408         ADD     A,#0x8
   \   0005B3   F582         MOV     DPL,A
   \   0005B5   C8           XCH     A,R0
   \   0005B6   3400         ADDC    A,#0x0
   \   0005B8   F583         MOV     DPH,A
   \   0005BA   740F         MOV     A,#0xf
   \   0005BC   F0           MOVX    @DPTR,A
    756              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   0005BD                ; Setup parameters for call to function osal_start_timerEx
   \   0005BD   7CE8         MOV     R4,#-0x18
   \   0005BF   7D03         MOV     R5,#0x3
   \   0005C1   7A08         MOV     R2,#0x8
   \   0005C3   7B00         MOV     R3,#0x0
   \   0005C5   90....       MOV     DPTR,#MT_TaskID
   \   0005C8   E0           MOVX    A,@DPTR
   \   0005C9   F9           MOV     R1,A
   \   0005CA   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   0005CD   E9           MOV     A,R1
   \   0005CE   6017         JZ      ??MT_AfIncomingMsg_15
    757              {
    758                (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   0005D0                ; Setup parameters for call to function osal_set_event
   \   0005D0   7A08         MOV     R2,#0x8
   \   0005D2   7B00         MOV     R3,#0x0
   \   0005D4   90....       MOV     DPTR,#MT_TaskID
   \   0005D7   E0           MOVX    A,@DPTR
   \   0005D8   F9           MOV     R1,A
   \   0005D9   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   0005DC   E9           MOV     A,R1
   \   0005DD   C0E0         PUSH    A
   \   0005DF   7407         MOV     A,#0x7
   \   0005E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0005E4   D0E0         POP     A
   \   0005E6   F0           MOVX    @DPTR,A
    759              }
    760          
    761              pItem->timestamp = pMsg->timestamp;
   \                     ??MT_AfIncomingMsg_15:
   \   0005E7   85..82       MOV     DPL,?XSP + 0
   \   0005EA   85..83       MOV     DPH,?XSP + 1
   \   0005ED   E0           MOVX    A,@DPTR
   \   0005EE   F8           MOV     R0,A
   \   0005EF   A3           INC     DPTR
   \   0005F0   E0           MOVX    A,@DPTR
   \   0005F1   C8           XCH     A,R0
   \   0005F2   241A         ADD     A,#0x1a
   \   0005F4   F582         MOV     DPL,A
   \   0005F6   C8           XCH     A,R0
   \   0005F7   3400         ADDC    A,#0x0
   \   0005F9   F583         MOV     DPH,A
   \   0005FB   12....       LCALL   ?XLOAD_R0123
   \   0005FE   7403         MOV     A,#0x3
   \   000600   12....       LCALL   ?XSTACK_DISP0_8
   \   000603   E0           MOVX    A,@DPTR
   \   000604   FC           MOV     R4,A
   \   000605   A3           INC     DPTR
   \   000606   E0           MOVX    A,@DPTR
   \   000607   F583         MOV     DPH,A
   \   000609   8C82         MOV     DPL,R4
   \   00060B   A3           INC     DPTR
   \   00060C   A3           INC     DPTR
   \   00060D   A3           INC     DPTR
   \   00060E   A3           INC     DPTR
   \   00060F   12....       LCALL   ?XSTORE_R0123
    762              (void)osal_memcpy(pItem->data, pMsg->cmd.Data, dataLen);
   \   000612                ; Setup parameters for call to function osal_memcpy
   \   000612   85..82       MOV     DPL,?XSP + 0
   \   000615   85..83       MOV     DPH,?XSP + 1
   \   000618   E0           MOVX    A,@DPTR
   \   000619   F8           MOV     R0,A
   \   00061A   A3           INC     DPTR
   \   00061B   E0           MOVX    A,@DPTR
   \   00061C   C8           XCH     A,R0
   \   00061D   2421         ADD     A,#0x21
   \   00061F   F582         MOV     DPL,A
   \   000621   C8           XCH     A,R0
   \   000622   3400         ADDC    A,#0x0
   \   000624   F583         MOV     DPH,A
   \   000626   E0           MOVX    A,@DPTR
   \   000627   F5..         MOV     ?V0,A
   \   000629   A3           INC     DPTR
   \   00062A   E0           MOVX    A,@DPTR
   \   00062B   F5..         MOV     ?V1,A
   \   00062D   75..00       MOV     ?V2,#0x0
   \   000630   78..         MOV     R0,#?V0
   \   000632   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000635   AC..         MOV     R4,?V6
   \   000637   AD..         MOV     R5,?V7
   \   000639   7406         MOV     A,#0x6
   \   00063B   12....       LCALL   ?XSTACK_DISP0_8
   \   00063E   E0           MOVX    A,@DPTR
   \   00063F   F8           MOV     R0,A
   \   000640   A3           INC     DPTR
   \   000641   E0           MOVX    A,@DPTR
   \   000642   F583         MOV     DPH,A
   \   000644   8882         MOV     DPL,R0
   \   000646   A3           INC     DPTR
   \   000647   A3           INC     DPTR
   \   000648   E0           MOVX    A,@DPTR
   \   000649   FA           MOV     R2,A
   \   00064A   A3           INC     DPTR
   \   00064B   E0           MOVX    A,@DPTR
   \   00064C   FB           MOV     R3,A
   \   00064D   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000650   7403         MOV     A,#0x3
   \   000652   12....       LCALL   ?DEALLOC_XSTACK8
   \   000655   8A..         MOV     ?V0,R2
   \   000657   8B..         MOV     ?V1,R3
   \   000659   85..82       MOV     DPL,?V0
   \   00065C   85..83       MOV     DPH,?V1
   \   00065F   803D         SJMP    ??MT_AfIncomingMsg_16
    763            }
    764            else
    765            {
    766              (void)osal_memcpy(pTmp, pMsg->cmd.Data, dataLen);
   \                     ??MT_AfIncomingMsg_14:
   \   000661                ; Setup parameters for call to function osal_memcpy
   \   000661   85..82       MOV     DPL,?XSP + 0
   \   000664   85..83       MOV     DPH,?XSP + 1
   \   000667   E0           MOVX    A,@DPTR
   \   000668   F8           MOV     R0,A
   \   000669   A3           INC     DPTR
   \   00066A   E0           MOVX    A,@DPTR
   \   00066B   C8           XCH     A,R0
   \   00066C   2421         ADD     A,#0x21
   \   00066E   F582         MOV     DPL,A
   \   000670   C8           XCH     A,R0
   \   000671   3400         ADDC    A,#0x0
   \   000673   F583         MOV     DPH,A
   \   000675   E0           MOVX    A,@DPTR
   \   000676   F5..         MOV     ?V0,A
   \   000678   A3           INC     DPTR
   \   000679   E0           MOVX    A,@DPTR
   \   00067A   F5..         MOV     ?V1,A
   \   00067C   75..00       MOV     ?V2,#0x0
   \   00067F   78..         MOV     R0,#?V0
   \   000681   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000684   AC..         MOV     R4,?V6
   \   000686   AD..         MOV     R5,?V7
   \   000688   EE           MOV     A,R6
   \   000689   FA           MOV     R2,A
   \   00068A   EF           MOV     A,R7
   \   00068B   FB           MOV     R3,A
   \   00068C   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00068F   7403         MOV     A,#0x3
   \   000691   12....       LCALL   ?DEALLOC_XSTACK8
   \   000694   8A..         MOV     ?V0,R2
   \   000696   8B..         MOV     ?V1,R3
   \   000698   85..82       MOV     DPL,?V0
   \   00069B   85..83       MOV     DPH,?V1
    767            }
    768          
    769            /* Build and send back the response */
    770            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_AF), cmd, respLen, pRsp);
   \                     ??MT_AfIncomingMsg_16:
   \   00069E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00069E   7405         MOV     A,#0x5
   \   0006A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0006A3   E0           MOVX    A,@DPTR
   \   0006A4   FC           MOV     R4,A
   \   0006A5   A3           INC     DPTR
   \   0006A6   E0           MOVX    A,@DPTR
   \   0006A7   FD           MOV     R5,A
   \   0006A8   AB..         MOV     R3,?V4
   \   0006AA   7402         MOV     A,#0x2
   \   0006AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0006AF   E0           MOVX    A,@DPTR
   \   0006B0   FA           MOV     R2,A
   \   0006B1   7944         MOV     R1,#0x44
   \   0006B3   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    771          
    772            (void)osal_mem_free(pRsp);
   \   0006B6                ; Setup parameters for call to function osal_mem_free
   \   0006B6   7405         MOV     A,#0x5
   \   0006B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0006BB   E0           MOVX    A,@DPTR
   \   0006BC   FA           MOV     R2,A
   \   0006BD   A3           INC     DPTR
   \   0006BE   E0           MOVX    A,@DPTR
   \   0006BF   FB           MOV     R3,A
   \   0006C0   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    773          }
   \                     ??MT_AfIncomingMsg_4:
   \   0006C3   7408         MOV     A,#0x8
   \   0006C5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0006C8   7F08         MOV     R7,#0x8
   \   0006CA   02....       LJMP    ?BANKED_LEAVE_XDATA
    774          
    775          /**************************************************************************************************
    776           * @fn          MT_AfDataRetrieve
    777           *
    778           * @brief   Process AF Data Retrieve command to incrementally read out a very large
    779           *          incoming AF message.
    780           *
    781           * input parameters
    782           *
    783           * @param pBuf - pointer to the received buffer
    784           *
    785           * output parameters
    786           *
    787           * @param rtrn - AF-Status of the operation.
    788           *
    789           * @return      None.
    790           **************************************************************************************************
    791           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    792          void MT_AfDataRetrieve(uint8 *pBuf)
   \                     MT_AfDataRetrieve:
    793          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    794            #define MT_AF_RTV_HDR_SZ  2
    795          
    796            uint32 timestamp;
    797            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \   00000E   90....       MOV     DPTR,#pMtAfInMsgList
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E8           MOV     A,R0
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   E9           MOV     A,R1
   \   00001F   F0           MOVX    @DPTR,A
    798            uint8 rtrn = afStatus_FAILED;
   \   000020   7403         MOV     A,#0x3
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   7401         MOV     A,#0x1
   \   000027   F0           MOVX    @DPTR,A
    799            uint8 len = 0;
   \   000028   85..82       MOV     DPL,?XSP + 0
   \   00002B   85..83       MOV     DPH,?XSP + 1
   \   00002E   7400         MOV     A,#0x0
   \   000030   F0           MOVX    @DPTR,A
    800          
    801            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000031   EE           MOV     A,R6
   \   000032   2403         ADD     A,#0x3
   \   000034   FE           MOV     R6,A
   \   000035   5001         JNC     ??MT_AfDataRetrieve_0
   \   000037   0F           INC     R7
    802            timestamp = BUILD_UINT32(pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   \                     ??MT_AfDataRetrieve_0:
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F5..         MOV     ?V0,A
   \   00003F   E4           CLR     A
   \   000040   F5..         MOV     ?V1,A
   \   000042   F5..         MOV     ?V2,A
   \   000044   F5..         MOV     ?V3,A
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F5..         MOV     ?V4,A
   \   00004E   E4           CLR     A
   \   00004F   F5..         MOV     ?V5,A
   \   000051   F5..         MOV     ?V6,A
   \   000053   F5..         MOV     ?V7,A
   \   000055   7408         MOV     A,#0x8
   \   000057   78..         MOV     R0,#?V4
   \   000059   12....       LCALL   ?L_SHL
   \   00005C   78..         MOV     R0,#?V0
   \   00005E   79..         MOV     R1,#?V4
   \   000060   12....       LCALL   ?L_ADD
   \   000063   8E82         MOV     DPL,R6
   \   000065   8F83         MOV     DPH,R7
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F5..         MOV     ?V4,A
   \   00006C   E4           CLR     A
   \   00006D   F5..         MOV     ?V5,A
   \   00006F   F5..         MOV     ?V6,A
   \   000071   F5..         MOV     ?V7,A
   \   000073   7410         MOV     A,#0x10
   \   000075   78..         MOV     R0,#?V4
   \   000077   12....       LCALL   ?L_SHL
   \   00007A   78..         MOV     R0,#?V0
   \   00007C   79..         MOV     R1,#?V4
   \   00007E   12....       LCALL   ?L_ADD
   \   000081   8E82         MOV     DPL,R6
   \   000083   8F83         MOV     DPH,R7
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F5..         MOV     ?V4,A
   \   00008B   E4           CLR     A
   \   00008C   F5..         MOV     ?V5,A
   \   00008E   F5..         MOV     ?V6,A
   \   000090   F5..         MOV     ?V7,A
   \   000092   7418         MOV     A,#0x18
   \   000094   78..         MOV     R0,#?V4
   \   000096   12....       LCALL   ?L_SHL
   \   000099   78..         MOV     R0,#?V0
   \   00009B   79..         MOV     R1,#?V4
   \   00009D   12....       LCALL   ?L_ADD
   \   0000A0   7406         MOV     A,#0x6
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   78..         MOV     R0,#?V0
   \   0000A7   12....       LCALL   ?L_MOV_TO_X
    803          
    804            while (pItem != NULL)
   \                     ??MT_AfDataRetrieve_1:
   \   0000AA   7401         MOV     A,#0x1
   \   0000AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F8           MOV     R0,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F9           MOV     R1,A
   \   0000B4   E8           MOV     A,R0
   \   0000B5   49           ORL     A,R1
   \   0000B6   6054         JZ      ??MT_AfDataRetrieve_2
    805            {
    806              pPrev = pItem;
   \   0000B8   7401         MOV     A,#0x1
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F8           MOV     R0,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F9           MOV     R1,A
   \   0000C2   7404         MOV     A,#0x4
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   E8           MOV     A,R0
   \   0000C8   F0           MOVX    @DPTR,A
   \   0000C9   A3           INC     DPTR
   \   0000CA   E9           MOV     A,R1
   \   0000CB   F0           MOVX    @DPTR,A
    807              if (pItem->timestamp == timestamp)
   \   0000CC   7406         MOV     A,#0x6
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   78..         MOV     R0,#?V0
   \   0000D3   12....       LCALL   ?L_MOV_X
   \   0000D6   7401         MOV     A,#0x1
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F8           MOV     R0,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   F583         MOV     DPH,A
   \   0000E1   8882         MOV     DPL,R0
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   78..         MOV     R0,#?V0
   \   0000E9   12....       LCALL   ?L_EQ_X
   \   0000EC   601E         JZ      ??MT_AfDataRetrieve_2
    808              {
    809                break;
    810              }
    811              pItem = pItem->next;
   \   0000EE   7401         MOV     A,#0x1
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   F8           MOV     R0,A
   \   0000F5   A3           INC     DPTR
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   F583         MOV     DPH,A
   \   0000F9   8882         MOV     DPL,R0
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   F8           MOV     R0,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   F9           MOV     R1,A
   \   000100   7401         MOV     A,#0x1
   \   000102   12....       LCALL   ?XSTACK_DISP0_8
   \   000105   E8           MOV     A,R0
   \   000106   F0           MOVX    @DPTR,A
   \   000107   A3           INC     DPTR
   \   000108   E9           MOV     A,R1
   \   000109   F0           MOVX    @DPTR,A
   \   00010A   809E         SJMP    ??MT_AfDataRetrieve_1
    812            }
    813          
    814            if (pItem != NULL)
   \                     ??MT_AfDataRetrieve_2:
   \   00010C   7401         MOV     A,#0x1
   \   00010E   12....       LCALL   ?XSTACK_DISP0_8
   \   000111   E0           MOVX    A,@DPTR
   \   000112   F8           MOV     R0,A
   \   000113   A3           INC     DPTR
   \   000114   E0           MOVX    A,@DPTR
   \   000115   F9           MOV     R1,A
   \   000116   E8           MOV     A,R0
   \   000117   49           ORL     A,R1
   \   000118   7003         JNZ     $+5
   \   00011A   02....       LJMP    ??MT_AfDataRetrieve_3 & 0xFFFF
    815            {
    816              uint16 idx;
    817              uint8 *pRsp;
    818          
    819              pBuf += 4;
   \   00011D   EE           MOV     A,R6
   \   00011E   2404         ADD     A,#0x4
   \   000120   FE           MOV     R6,A
   \   000121   5001         JNC     ??MT_AfDataRetrieve_4
   \   000123   0F           INC     R7
    820              idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRetrieve_4:
   \   000124   8E82         MOV     DPL,R6
   \   000126   8F83         MOV     DPH,R7
   \   000128   E0           MOVX    A,@DPTR
   \   000129   FA           MOV     R2,A
   \   00012A   7B00         MOV     R3,#0x0
   \   00012C   8E82         MOV     DPL,R6
   \   00012E   8F83         MOV     DPH,R7
   \   000130   A3           INC     DPTR
   \   000131   E0           MOVX    A,@DPTR
   \   000132   F8           MOV     R0,A
   \   000133   7900         MOV     R1,#0x0
   \   000135   E4           CLR     A
   \   000136   C8           XCH     A,R0
   \   000137   F9           MOV     R1,A
   \   000138   EA           MOV     A,R2
   \   000139   28           ADD     A,R0
   \   00013A   F8           MOV     R0,A
   \   00013B   EB           MOV     A,R3
   \   00013C   39           ADDC    A,R1
   \   00013D   F9           MOV     R1,A
   \   00013E   88..         MOV     ?V6,R0
   \   000140   89..         MOV     ?V7,R1
    821              len = pBuf[2];
   \   000142   8E82         MOV     DPL,R6
   \   000144   8F83         MOV     DPH,R7
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   C0E0         PUSH    A
   \   00014B   85..82       MOV     DPL,?XSP + 0
   \   00014E   85..83       MOV     DPH,?XSP + 1
   \   000151   D0E0         POP     A
   \   000153   F0           MOVX    @DPTR,A
    822          
    823              if (len == 0)  // Indication to delete the afIncomingMSGPacket.
   \   000154   85..82       MOV     DPL,?XSP + 0
   \   000157   85..83       MOV     DPH,?XSP + 1
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   706E         JNZ     ??MT_AfDataRetrieve_5
    824              {
    825                if (pMtAfInMsgList == pItem)
   \   00015D   90....       MOV     DPTR,#pMtAfInMsgList
   \   000160   E0           MOVX    A,@DPTR
   \   000161   F8           MOV     R0,A
   \   000162   A3           INC     DPTR
   \   000163   E0           MOVX    A,@DPTR
   \   000164   F9           MOV     R1,A
   \   000165   7401         MOV     A,#0x1
   \   000167   12....       LCALL   ?XSTACK_DISP0_8
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   68           XRL     A,R0
   \   00016C   7003         JNZ     ??MT_AfDataRetrieve_6
   \   00016E   A3           INC     DPTR
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   69           XRL     A,R1
   \                     ??MT_AfDataRetrieve_6:
   \   000171   701C         JNZ     ??MT_AfDataRetrieve_7
    826                {
    827                  pMtAfInMsgList = pItem->next;
   \   000173   7401         MOV     A,#0x1
   \   000175   12....       LCALL   ?XSTACK_DISP0_8
   \   000178   E0           MOVX    A,@DPTR
   \   000179   F8           MOV     R0,A
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   F583         MOV     DPH,A
   \   00017E   8882         MOV     DPL,R0
   \   000180   E0           MOVX    A,@DPTR
   \   000181   F8           MOV     R0,A
   \   000182   A3           INC     DPTR
   \   000183   E0           MOVX    A,@DPTR
   \   000184   F9           MOV     R1,A
   \   000185   90....       MOV     DPTR,#pMtAfInMsgList
   \   000188   E8           MOV     A,R0
   \   000189   F0           MOVX    @DPTR,A
   \   00018A   A3           INC     DPTR
   \   00018B   E9           MOV     A,R1
   \   00018C   F0           MOVX    @DPTR,A
   \   00018D   8024         SJMP    ??MT_AfDataRetrieve_8
    828                }
    829                else
    830                {
    831                  pPrev->next = pItem->next;
   \                     ??MT_AfDataRetrieve_7:
   \   00018F   7401         MOV     A,#0x1
   \   000191   12....       LCALL   ?XSTACK_DISP0_8
   \   000194   E0           MOVX    A,@DPTR
   \   000195   F8           MOV     R0,A
   \   000196   A3           INC     DPTR
   \   000197   E0           MOVX    A,@DPTR
   \   000198   F583         MOV     DPH,A
   \   00019A   8882         MOV     DPL,R0
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   FA           MOV     R2,A
   \   00019E   A3           INC     DPTR
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   FB           MOV     R3,A
   \   0001A1   7404         MOV     A,#0x4
   \   0001A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   F8           MOV     R0,A
   \   0001A8   A3           INC     DPTR
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   F583         MOV     DPH,A
   \   0001AC   8882         MOV     DPL,R0
   \   0001AE   EA           MOV     A,R2
   \   0001AF   F0           MOVX    @DPTR,A
   \   0001B0   A3           INC     DPTR
   \   0001B1   EB           MOV     A,R3
   \   0001B2   F0           MOVX    @DPTR,A
    832                }
    833                (void)osal_mem_free(pItem);
   \                     ??MT_AfDataRetrieve_8:
   \   0001B3                ; Setup parameters for call to function osal_mem_free
   \   0001B3   7401         MOV     A,#0x1
   \   0001B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   FA           MOV     R2,A
   \   0001BA   A3           INC     DPTR
   \   0001BB   E0           MOVX    A,@DPTR
   \   0001BC   FB           MOV     R3,A
   \   0001BD   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    834                rtrn = afStatus_SUCCESS;
   \   0001C0   7403         MOV     A,#0x3
   \   0001C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C5   7400         MOV     A,#0x0
   \   0001C7   F0           MOVX    @DPTR,A
   \   0001C8   02....       LJMP    ??MT_AfDataRetrieve_3 & 0xFFFF
    835              }
    836              else if ((pRsp = osal_mem_alloc(len + MT_AF_RTV_HDR_SZ)) == NULL)
   \                     ??MT_AfDataRetrieve_5:
   \   0001CB                ; Setup parameters for call to function osal_mem_alloc
   \   0001CB   85..82       MOV     DPL,?XSP + 0
   \   0001CE   85..83       MOV     DPH,?XSP + 1
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   F8           MOV     R0,A
   \   0001D3   7900         MOV     R1,#0x0
   \   0001D5   E8           MOV     A,R0
   \   0001D6   2402         ADD     A,#0x2
   \   0001D8   FA           MOV     R2,A
   \   0001D9   E4           CLR     A
   \   0001DA   39           ADDC    A,R1
   \   0001DB   FB           MOV     R3,A
   \   0001DC   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0001DF   8A..         MOV     ?V0,R2
   \   0001E1   8B..         MOV     ?V1,R3
   \   0001E3   A8..         MOV     R0,?V0
   \   0001E5   A9..         MOV     R1,?V1
   \   0001E7   88..         MOV     ?V4,R0
   \   0001E9   89..         MOV     ?V5,R1
   \   0001EB   E8           MOV     A,R0
   \   0001EC   49           ORL     A,R1
   \   0001ED   7014         JNZ     ??MT_AfDataRetrieve_9
    837              {
    838                rtrn = afStatus_MEM_FAIL;
   \   0001EF   7403         MOV     A,#0x3
   \   0001F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F4   7410         MOV     A,#0x10
   \   0001F6   F0           MOVX    @DPTR,A
    839                len = 0;
   \   0001F7   85..82       MOV     DPL,?XSP + 0
   \   0001FA   85..83       MOV     DPH,?XSP + 1
   \   0001FD   7400         MOV     A,#0x0
   \   0001FF   F0           MOVX    @DPTR,A
   \   000200   02....       LJMP    ??MT_AfDataRetrieve_3 & 0xFFFF
    840              }
    841              else
    842              {
    843                pRsp[0] = ZSuccess;
   \                     ??MT_AfDataRetrieve_9:
   \   000203   85..82       MOV     DPL,?V4
   \   000206   85..83       MOV     DPH,?V5
   \   000209   7400         MOV     A,#0x0
   \   00020B   F0           MOVX    @DPTR,A
    844                pRsp[1] = len;
   \   00020C   85..82       MOV     DPL,?XSP + 0
   \   00020F   85..83       MOV     DPH,?XSP + 1
   \   000212   E0           MOVX    A,@DPTR
   \   000213   C0E0         PUSH    A
   \   000215   85..82       MOV     DPL,?V4
   \   000218   85..83       MOV     DPH,?V5
   \   00021B   A3           INC     DPTR
   \   00021C   D0E0         POP     A
   \   00021E   F0           MOVX    @DPTR,A
    845                (void)osal_memcpy(pRsp + MT_AF_RTV_HDR_SZ, pItem->data+idx, len);
   \   00021F                ; Setup parameters for call to function osal_memcpy
   \   00021F   7401         MOV     A,#0x1
   \   000221   12....       LCALL   ?XSTACK_DISP0_8
   \   000224   E0           MOVX    A,@DPTR
   \   000225   F8           MOV     R0,A
   \   000226   A3           INC     DPTR
   \   000227   E0           MOVX    A,@DPTR
   \   000228   F583         MOV     DPH,A
   \   00022A   8882         MOV     DPL,R0
   \   00022C   A3           INC     DPTR
   \   00022D   A3           INC     DPTR
   \   00022E   E0           MOVX    A,@DPTR
   \   00022F   25..         ADD     A,?V6
   \   000231   F5..         MOV     ?V0,A
   \   000233   A3           INC     DPTR
   \   000234   E0           MOVX    A,@DPTR
   \   000235   35..         ADDC    A,?V7
   \   000237   F5..         MOV     ?V1,A
   \   000239   75..00       MOV     ?V2,#0x0
   \   00023C   78..         MOV     R0,#?V0
   \   00023E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000241   7403         MOV     A,#0x3
   \   000243   12....       LCALL   ?XSTACK_DISP0_8
   \   000246   E0           MOVX    A,@DPTR
   \   000247   FC           MOV     R4,A
   \   000248   7D00         MOV     R5,#0x0
   \   00024A   E5..         MOV     A,?V4
   \   00024C   2402         ADD     A,#0x2
   \   00024E   FA           MOV     R2,A
   \   00024F   E4           CLR     A
   \   000250   35..         ADDC    A,?V5
   \   000252   FB           MOV     R3,A
   \   000253   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000256   7403         MOV     A,#0x3
   \   000258   12....       LCALL   ?DEALLOC_XSTACK8
   \   00025B   8A..         MOV     ?V0,R2
   \   00025D   8B..         MOV     ?V1,R3
   \   00025F   85....       MOV     ?V2,?V0
   \   000262   85....       MOV     ?V3,?V1
    846                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), 
    847                                                     MT_AF_DATA_RETRIEVE, len + MT_AF_RTV_HDR_SZ, pRsp);
   \   000265                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000265   AC..         MOV     R4,?V4
   \   000267   AD..         MOV     R5,?V5
   \   000269   85..82       MOV     DPL,?XSP + 0
   \   00026C   85..83       MOV     DPH,?XSP + 1
   \   00026F   E0           MOVX    A,@DPTR
   \   000270   2402         ADD     A,#0x2
   \   000272   FB           MOV     R3,A
   \   000273   7A12         MOV     R2,#0x12
   \   000275   7964         MOV     R1,#0x64
   \   000277   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    848                (void)osal_mem_free(pRsp);
   \   00027A                ; Setup parameters for call to function osal_mem_free
   \   00027A   AA..         MOV     R2,?V4
   \   00027C   AB..         MOV     R3,?V5
   \   00027E   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    849                return;
   \   000281   802D         SJMP    ??MT_AfDataRetrieve_10
    850              }
    851            }
    852          
    853            pBuf[0] = rtrn;
   \                     ??MT_AfDataRetrieve_3:
   \   000283   7403         MOV     A,#0x3
   \   000285   12....       LCALL   ?XSTACK_DISP0_8
   \   000288   E0           MOVX    A,@DPTR
   \   000289   C0E0         PUSH    A
   \   00028B   8E82         MOV     DPL,R6
   \   00028D   8F83         MOV     DPH,R7
   \   00028F   D0E0         POP     A
   \   000291   F0           MOVX    @DPTR,A
    854            pBuf[1] = len;
   \   000292   85..82       MOV     DPL,?XSP + 0
   \   000295   85..83       MOV     DPH,?XSP + 1
   \   000298   E0           MOVX    A,@DPTR
   \   000299   C0E0         PUSH    A
   \   00029B   8E82         MOV     DPL,R6
   \   00029D   8F83         MOV     DPH,R7
   \   00029F   A3           INC     DPTR
   \   0002A0   D0E0         POP     A
   \   0002A2   F0           MOVX    @DPTR,A
    855            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), 
    856                                                 MT_AF_DATA_RETRIEVE, MT_AF_RTV_HDR_SZ, pBuf);
   \   0002A3                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0002A3   EE           MOV     A,R6
   \   0002A4   FC           MOV     R4,A
   \   0002A5   EF           MOV     A,R7
   \   0002A6   FD           MOV     R5,A
   \   0002A7   7B02         MOV     R3,#0x2
   \   0002A9   7A12         MOV     R2,#0x12
   \   0002AB   7964         MOV     R1,#0x64
   \   0002AD   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    857          }
   \                     ??MT_AfDataRetrieve_10:
   \   0002B0   740A         MOV     A,#0xa
   \   0002B2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002B5   7F08         MOV     R7,#0x8
   \   0002B7   02....       LJMP    ?BANKED_LEAVE_XDATA
    858          
    859          /**************************************************************************************************
    860           * @fn          MT_AfDataStore
    861           *
    862           * @brief   Process AF Data Store command to incrementally store the data buffer for very large
    863           *          outgoing AF message.
    864           *
    865           * input parameters
    866           *
    867           * @param pBuf - pointer to the received buffer
    868           *
    869           * output parameters
    870           *
    871           * @param rtrn - AF-Status of the operation.
    872           *
    873           * @return      None.
    874           **************************************************************************************************
    875           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    876          void MT_AfDataStore(uint8 *pBuf)
   \                     MT_AfDataStore:
    877          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    878            uint16 idx;
    879            uint8 len, rtrn = afStatus_FAILED;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
    880          
    881            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_AfDataStore_0
   \   00001D   0F           INC     R7
    882            idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataStore_0:
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   7B00         MOV     R3,#0x0
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   E4           CLR     A
   \   000030   C8           XCH     A,R0
   \   000031   F9           MOV     R1,A
   \   000032   EA           MOV     A,R2
   \   000033   28           ADD     A,R0
   \   000034   F8           MOV     R0,A
   \   000035   EB           MOV     A,R3
   \   000036   39           ADDC    A,R1
   \   000037   F9           MOV     R1,A
   \   000038   88..         MOV     ?V4,R0
   \   00003A   89..         MOV     ?V5,R1
    883            len = pBuf[2];
   \   00003C   8E82         MOV     DPL,R6
   \   00003E   8F83         MOV     DPH,R7
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F5..         MOV     ?V3,A
    884            pBuf += 3;
   \   000045   EE           MOV     A,R6
   \   000046   2403         ADD     A,#0x3
   \   000048   FE           MOV     R6,A
   \   000049   5001         JNC     ??MT_AfDataStore_1
   \   00004B   0F           INC     R7
    885          
    886            if (pMtAfDataReq == NULL)
   \                     ??MT_AfDataStore_1:
   \   00004C   90....       MOV     DPTR,#pMtAfDataReq
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F8           MOV     R0,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   E8           MOV     A,R0
   \   000055   49           ORL     A,R1
   \   000056   700C         JNZ     ??MT_AfDataStore_2
    887            {
    888              rtrn = afStatus_MEM_FAIL;
   \   000058   85..82       MOV     DPL,?XSP + 0
   \   00005B   85..83       MOV     DPH,?XSP + 1
   \   00005E   7410         MOV     A,#0x10
   \   000060   F0           MOVX    @DPTR,A
   \   000061   02....       LJMP    ??MT_AfDataStore_3 & 0xFFFF
    889            }
    890            else if (len == 0)  // Indication to send the message.
   \                     ??MT_AfDataStore_2:
   \   000064   E5..         MOV     A,?V3
   \   000066   6003         JZ      $+5
   \   000068   02....       LJMP    ??MT_AfDataStore_4 & 0xFFFF
    891            {
    892              rtrn = AF_DataRequest(&(pMtAfDataReq->dstAddr), pMtAfDataReq->epDesc, pMtAfDataReq->cId, 
    893                                      pMtAfDataReq->dataLen,  pMtAfDataReq->data, 
    894                                    &(pMtAfDataReq->transId), pMtAfDataReq->txOpts, pMtAfDataReq->radius);
   \   00006B                ; Setup parameters for call to function AF_DataRequest
   \   00006B   90....       MOV     DPTR,#pMtAfDataReq
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F8           MOV     R0,A
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   C8           XCH     A,R0
   \   000073   2416         ADD     A,#0x16
   \   000075   F582         MOV     DPL,A
   \   000077   C8           XCH     A,R0
   \   000078   3400         ADDC    A,#0x0
   \   00007A   F583         MOV     DPH,A
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F5..         MOV     ?V0,A
   \   00007F   78..         MOV     R0,#?V0
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000084   90....       MOV     DPTR,#pMtAfDataReq
   \   000087   E0           MOVX    A,@DPTR
   \   000088   2414         ADD     A,#0x14
   \   00008A   F5..         MOV     ?V0,A
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   3400         ADDC    A,#0x0
   \   000090   F5..         MOV     ?V1,A
   \   000092   78..         MOV     R0,#?V0
   \   000094   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000097   90....       MOV     DPTR,#pMtAfDataReq
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   F8           MOV     R0,A
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   F583         MOV     DPH,A
   \   0000A0   8882         MOV     DPL,R0
   \   0000A2   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000A5   90....       MOV     DPTR,#pMtAfDataReq
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   F8           MOV     R0,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   C8           XCH     A,R0
   \   0000AD   2412         ADD     A,#0x12
   \   0000AF   F582         MOV     DPL,A
   \   0000B1   C8           XCH     A,R0
   \   0000B2   3400         ADDC    A,#0x0
   \   0000B4   F583         MOV     DPH,A
   \   0000B6   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000B9   90....       MOV     DPTR,#pMtAfDataReq
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F8           MOV     R0,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   C8           XCH     A,R0
   \   0000C1   2410         ADD     A,#0x10
   \   0000C3   F582         MOV     DPL,A
   \   0000C5   C8           XCH     A,R0
   \   0000C6   3400         ADDC    A,#0x0
   \   0000C8   F583         MOV     DPH,A
   \   0000CA   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000CD   90....       MOV     DPTR,#pMtAfDataReq
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   F8           MOV     R0,A
   \   0000D2   A3           INC     DPTR
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   C8           XCH     A,R0
   \   0000D5   2415         ADD     A,#0x15
   \   0000D7   F582         MOV     DPL,A
   \   0000D9   C8           XCH     A,R0
   \   0000DA   3400         ADDC    A,#0x0
   \   0000DC   F583         MOV     DPH,A
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   F9           MOV     R1,A
   \   0000E0   90....       MOV     DPTR,#pMtAfDataReq
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   F8           MOV     R0,A
   \   0000E5   A3           INC     DPTR
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   C8           XCH     A,R0
   \   0000E8   240E         ADD     A,#0xe
   \   0000EA   F582         MOV     DPL,A
   \   0000EC   C8           XCH     A,R0
   \   0000ED   3400         ADDC    A,#0x0
   \   0000EF   F583         MOV     DPH,A
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   FC           MOV     R4,A
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   FD           MOV     R5,A
   \   0000F6   90....       MOV     DPTR,#pMtAfDataReq
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   2402         ADD     A,#0x2
   \   0000FC   FA           MOV     R2,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   3400         ADDC    A,#0x0
   \   000101   FB           MOV     R3,A
   \   000102   12....       LCALL   ??AF_DataRequest?relay; Banked call to: AF_DataRequest
   \   000105   7409         MOV     A,#0x9
   \   000107   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010A   E9           MOV     A,R1
   \   00010B   C0E0         PUSH    A
   \   00010D   85..82       MOV     DPL,?XSP + 0
   \   000110   85..83       MOV     DPH,?XSP + 1
   \   000113   D0E0         POP     A
   \   000115   F0           MOVX    @DPTR,A
    895              (void)osal_mem_free(pMtAfDataReq);
   \   000116                ; Setup parameters for call to function osal_mem_free
   \   000116   90....       MOV     DPTR,#pMtAfDataReq
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   FA           MOV     R2,A
   \   00011B   A3           INC     DPTR
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   FB           MOV     R3,A
   \   00011E   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    896              pMtAfDataReq = NULL;
   \   000121   90....       MOV     DPTR,#pMtAfDataReq
   \   000124   7400         MOV     A,#0x0
   \   000126   F0           MOVX    @DPTR,A
   \   000127   A3           INC     DPTR
   \   000128   7400         MOV     A,#0x0
   \   00012A   F0           MOVX    @DPTR,A
   \   00012B   803D         SJMP    ??MT_AfDataStore_3
    897            }
    898            else
    899            {
    900              (void)osal_memcpy(pMtAfDataReq->data+idx, pBuf, len);
   \                     ??MT_AfDataStore_4:
   \   00012D                ; Setup parameters for call to function osal_memcpy
   \   00012D   8E..         MOV     ?V0,R6
   \   00012F   8F..         MOV     ?V1,R7
   \   000131   75..00       MOV     ?V2,#0x0
   \   000134   78..         MOV     R0,#?V0
   \   000136   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000139   AC..         MOV     R4,?V3
   \   00013B   7D00         MOV     R5,#0x0
   \   00013D   90....       MOV     DPTR,#pMtAfDataReq
   \   000140   E0           MOVX    A,@DPTR
   \   000141   F8           MOV     R0,A
   \   000142   A3           INC     DPTR
   \   000143   E0           MOVX    A,@DPTR
   \   000144   F583         MOV     DPH,A
   \   000146   8882         MOV     DPL,R0
   \   000148   E0           MOVX    A,@DPTR
   \   000149   25..         ADD     A,?V4
   \   00014B   FA           MOV     R2,A
   \   00014C   A3           INC     DPTR
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   35..         ADDC    A,?V5
   \   000150   FB           MOV     R3,A
   \   000151   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000154   7403         MOV     A,#0x3
   \   000156   12....       LCALL   ?DEALLOC_XSTACK8
   \   000159   8A..         MOV     ?V0,R2
   \   00015B   8B..         MOV     ?V1,R3
   \   00015D   A8..         MOV     R0,?V0
   \   00015F   A9..         MOV     R1,?V1
    901              rtrn = afStatus_SUCCESS;
   \   000161   85..82       MOV     DPL,?XSP + 0
   \   000164   85..83       MOV     DPH,?XSP + 1
   \   000167   7400         MOV     A,#0x0
   \   000169   F0           MOVX    @DPTR,A
    902            }
    903          
    904            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), 
    905                                                                          MT_AF_DATA_STORE, 1, &rtrn);
   \                     ??MT_AfDataStore_3:
   \   00016A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00016A   AC..         MOV     R4,?XSP + 0
   \   00016C   AD..         MOV     R5,?XSP + 1
   \   00016E   7B01         MOV     R3,#0x1
   \   000170   7A11         MOV     R2,#0x11
   \   000172   7964         MOV     R1,#0x64
   \   000174   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    906          }
   \   000177   7401         MOV     A,#0x1
   \   000179   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017C   7F06         MOV     R7,#0x6
   \   00017E   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfExec?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfExec

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfCommandProcessing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfRegister?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataRequestSrcRtg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfIncomingMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfIncomingMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataRetrieve?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRetrieve

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataStore?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataStore
    907          
    908          /***************************************************************************************************
    909          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   MT_AfCommandProcessing
        0      9   -> MT_AfDataRequest
        0      9   -> MT_AfDataRequestSrcRtg
        0      9   -> MT_AfDataRetrieve
        0      9   -> MT_AfDataStore
        0      9   -> MT_AfRegister
      1     12   MT_AfDataConfirm
        0     12   -> MT_BuildAndSendZToolResponse
      1     58   MT_AfDataRequest
        0     49   -> AF_DataRequest
        0     40   -> MT_BuildAndSendZToolResponse
        0     40   -> afFindEndPointDesc
        0     40   -> osal_mem_alloc
        0     43   -> osal_memcpy
        0     40   -> osal_set_event
        0     40   -> osal_start_timerEx
      1     58   MT_AfDataRequestSrcRtg
        0     49   -> AF_DataRequestSrcRtg
        0     37   -> MT_BuildAndSendZToolResponse
        0     37   -> afFindEndPointDesc
        0     37   -> osal_mem_alloc
        0     37   -> osal_mem_free
        0     37   -> osal_memset
      1     38   MT_AfDataRetrieve
        0     26   -> MT_BuildAndSendZToolResponse
        0     26   -> osal_mem_alloc
        0     26   -> osal_mem_free
        0     29   -> osal_memcpy
      1     33   MT_AfDataStore
        0     24   -> AF_DataRequest
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> osal_mem_free
        0     18   -> osal_memcpy
      1     10   MT_AfExec
        0     10   -> osal_mem_free
        0     10   -> osal_set_event
        0     10   -> osal_start_timerEx
      1     27   MT_AfIncomingMsg
        0     24   -> MT_BuildAndSendZToolResponse
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     27   -> osal_memcpy
        0     24   -> osal_set_event
        0     24   -> osal_start_timerEx
      1     24   MT_AfRegister
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> MT_BuildEndpointDesc
        0     15   -> afRegister
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??MT_AfCommandProcessing?relay
       6  ??MT_AfDataConfirm?relay
       6  ??MT_AfDataRequest?relay
       6  ??MT_AfDataRequestSrcRtg?relay
       6  ??MT_AfDataRetrieve?relay
       6  ??MT_AfDataStore?relay
       6  ??MT_AfExec?relay
       6  ??MT_AfIncomingMsg?relay
       6  ??MT_AfRegister?relay
      94  MT_AfCommandProcessing
      89  MT_AfDataConfirm
    1130  MT_AfDataRequest
     644  MT_AfDataRequestSrcRtg
     698  MT_AfDataRetrieve
     385  MT_AfDataStore
     313  MT_AfExec
    1741  MT_AfIncomingMsg
     165  MT_AfRegister
       2  pMtAfDataReq
       2  pMtAfInMsgList

 
 5 259 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
     4 bytes in segment XDATA_Z
 
 5 313 bytes of CODE  memory
     4 bytes of XDATA memory

Errors: none
Warnings: none
