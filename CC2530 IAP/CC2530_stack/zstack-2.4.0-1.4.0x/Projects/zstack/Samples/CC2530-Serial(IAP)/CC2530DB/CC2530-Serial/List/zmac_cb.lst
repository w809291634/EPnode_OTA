###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:47
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\zmac\f8w\zmac_cb.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\zmac\f8w\zmac_cb.c" -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D XLAB
#        -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\zmac_cb.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\zmac_cb.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\zmac\f8w\zmac_cb.c
      1          /**************************************************************************************************
      2            Filename:       zmac_cb.c
      3            Revised:        $Date: 2010-05-18 18:54:25 -0700 (Tue, 18 May 2010) $
      4            Revision:       $Revision: 22542 $
      5          
      6            Description:    This file contains the NWK functions that the ZMAC calls
      7          
      8          
      9            Copyright 2005-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /********************************************************************************************************
     41           *                                               INCLUDES
     42           ********************************************************************************************************/
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "ZMAC.h"
     47          #include "MT_MAC.h"
     48          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     49          
     50          #if !defined NONWK
     51          #include "nwk.h"
     52          #include "nwk_bufs.h"
     53          #include "ZGlobals.h"
     54          #endif
     55          
     56          #if defined( MACSIM )
     57            #include "mac_sim.h"
     58          #endif
     59          
     60          #include "mac_main.h"
     61          extern void *ZMac_ScanBuf;
     62          
     63          /********************************************************************************************************
     64           *                                               CONSTANTS
     65           ********************************************************************************************************/
     66          
     67          #if !defined NONWK
     68          /* Lookup table for size of structures. Must match with the order of MAC callback events */

   \                                 In  segment CODE_C, align 1
     69          const uint8 CODE zmacCBSizeTable [] = {
   \                     zmacCBSizeTable:
   \   000000   00           DB 0
   \   000001   16           DB 22
   \   000002   0F           DB 15
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   0B           DB 11
   \   000006   15           DB 21
   \   000007   0B           DB 11
   \   000008   02           DB 2
   \   000009   00           DB 0
   \   00000A   02           DB 2
   \   00000B   22           DB 34
   \   00000C   0F           DB 15
   \   00000D   32           DB 50
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   06           DB 6
     70            0,
     71            sizeof(ZMacAssociateInd_t),       // MAC_MLME_ASSOCIATE_IND      1   Associate indication
     72            sizeof(ZMacAssociateCnf_t),       // MAC_MLME_ASSOCIATE_CNF      2   Associate confirm
     73            0,                                // MAC_MLME_DISASSOCIATE_IND   3   Disassociate indication
     74            0,                                // MAC_MLME_DISASSOCIATE_CNF   4   Disassociate confirm
     75            sizeof(macMlmeBeaconNotifyInd_t), // MAC_MLME_BEACON_NOTIFY_IND  5   con notify indication
     76            sizeof(ZMacOrphanInd_t),          // MAC_MLME_ORPHAN_IND         6   Orphan indication
     77            sizeof(ZMacScanCnf_t),            // MAC_MLME_SCAN_CNF           7   Scan confirm
     78            sizeof(ZMacStartCnf_t),           // MAC_MLME_START_CNF          8   Start confirm
     79            0,                                // MAC_MLME_SYNC_LOSS_IND      9   Sync loss indication
     80            sizeof(ZMacPollCnf_t),            // MAC_MLME_POLL_CNF           10  Poll confirm
     81            sizeof(ZMacCommStatusInd_t),      // MAC_MLME_COMM_STATUS_IND    11  Comm status indication
     82            sizeof(ZMacDataCnf_t),            // MAC_MCPS_DATA_CNF           12  Data confirm
     83            sizeof(macMcpsDataInd_t),         // MAC_MCPS_DATA_IND           13  Data indication
     84            0,                                // MAC_MCPS_PURGE_CNF          14  Purge confirm
     85            0,                                // MAC_PWR_ON_CNF              15  Power on confirm
     86            sizeof(ZMacPollInd_t)             // MAC_MLME_POLL_IND           16  Poll indication
     87          };
     88          #endif /* !defined NONWK */
     89          
     90          /********************************************************************************************************
     91           *                                               LOCALS
     92           ********************************************************************************************************/
     93          
     94          /* LQI Adjustment Mode */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          static ZMacLqiAdjust_t lqiAdjMode = LQI_ADJ_OFF;
   \                     lqiAdjMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     96          
     97          /* LQI Adjustment Function */
     98          static void ZMacLqiAdjust( uint8 corr, uint8* lqi );
     99          
    100          /*********************************************************************
    101           * ZMAC Function Pointers
    102           */
    103          
    104          /*
    105           * ZMac Application callback function. This function will be called
    106           * for every MAC message that is received over-the-air or generated
    107           * locally by MAC for the application.
    108           *
    109           * The callback function should return TRUE if it has handled the
    110           * MAC message and no further action should be taken with it. It
    111           * should return FALSE if it has not handled the MAC message and
    112           * normal processing should take place.
    113           *
    114           * NOTE: The processing in this function should be kept to the
    115           *       minimum.
    116           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          uint8 (*pZMac_AppCallback)( uint8 *msgPtr ) = (void*)NULL;
   \                     pZMac_AppCallback:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    118          
    119          
    120          /*********************************************************************
    121           * ZMAC Functions
    122           */
    123          
    124          /**************************************************************************************************
    125           * @fn       MAC_CbackEvent()
    126           *
    127           * @brief    convert MAC data confirm and indication to ZMac and send to NWK
    128           *
    129           * @param    pData - pointer to macCbackEvent_t
    130           *
    131           * @return   none
    132           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    133          void MAC_CbackEvent(macCbackEvent_t *pData)
   \                     MAC_CbackEvent:
    134          #ifndef MT_MAC_CB_FUNC
    135          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
    136          #if !defined NONWK
    137            uint8 event = pData->hdr.event;
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F583         MOV     DPH,A
   \   000021   8882         MOV     DPL,R0
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V3,A
    138            uint16 tmp = zmacCBSizeTable[event];
   \   000026   A8..         MOV     R0,?V3
   \   000028   7900         MOV     R1,#0x0
   \   00002A   74..         MOV     A,#zmacCBSizeTable & 0xff
   \   00002C   28           ADD     A,R0
   \   00002D   F582         MOV     DPL,A
   \   00002F   74..         MOV     A,#(zmacCBSizeTable >> 8) & 0xff
   \   000031   39           ADDC    A,R1
   \   000032   F583         MOV     DPH,A
   \   000034   E4           CLR     A
   \   000035   93           MOVC    A,@A+DPTR
   \   000036   F8           MOV     R0,A
   \   000037   7900         MOV     R1,#0x0
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   E8           MOV     A,R0
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   E9           MOV     A,R1
   \   000042   F0           MOVX    @DPTR,A
    139            macCbackEvent_t *msgPtr;
    140          
    141            /* If the Network layer will handle a new MAC callback, a non-zero value must be entered in the
    142             * corresponding location in the zmacCBSizeTable[] - thus the table acts as "should handle"?
    143             */
    144            if (tmp == 0)
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F8           MOV     R0,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   E8           MOV     A,R0
   \   00004E   49           ORL     A,R1
   \   00004F   7003         JNZ     $+5
   \   000051   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    145            {
    146              return;
    147            }
    148          
    149            // MAC_MCPS_DATA_IND is very special - it is the only event where the MAC does not free *pData.
    150            if ( event == MAC_MCPS_DATA_IND )
   \   000054   740D         MOV     A,#0xd
   \   000056   65..         XRL     A,?V3
   \   000058   705C         JNZ     ??MAC_CbackEvent_1
    151            {
    152              MAC_MlmeGetReq( MAC_SHORT_ADDRESS, &tmp );
   \   00005A                ; Setup parameters for call to function MAC_MlmeGetReq
   \   00005A   7402         MOV     A,#0x2
   \   00005C   12....       LCALL   ?XSTACK_DISP101_8
   \   00005F   7953         MOV     R1,#0x53
   \   000061   12....       LCALL   ??MAC_MlmeGetReq?relay; Banked call to: MAC_MlmeGetReq
   \   000064   E9           MOV     A,R1
    153              if ((tmp == INVALID_NODE_ADDR) || (tmp == NWK_BROADCAST_SHORTADDR_DEVALL) ||
    154                  (pData->dataInd.msdu.len == 0))
   \   000065   7402         MOV     A,#0x2
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   64FE         XRL     A,#0xfe
   \   00006D   7004         JNZ     ??MAC_CbackEvent_2
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   64FF         XRL     A,#0xff
   \                     ??MAC_CbackEvent_2:
   \   000073   6025         JZ      ??MAC_CbackEvent_3
   \   000075   7402         MOV     A,#0x2
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   64FF         XRL     A,#0xff
   \   00007D   7004         JNZ     ??MAC_CbackEvent_4
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   64FF         XRL     A,#0xff
   \                     ??MAC_CbackEvent_4:
   \   000083   6015         JZ      ??MAC_CbackEvent_3
   \   000085   85..82       MOV     DPL,?XSP + 0
   \   000088   85..83       MOV     DPH,?XSP + 1
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F8           MOV     R0,A
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   F583         MOV     DPH,A
   \   000091   8882         MOV     DPL,R0
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   700A         JNZ     ??MAC_CbackEvent_5
    155              {
    156                mac_msg_deallocate( (uint8 **)&pData );
   \                     ??MAC_CbackEvent_3:
   \   00009A                ; Setup parameters for call to function mac_msg_deallocate
   \   00009A   AA..         MOV     R2,?XSP + 0
   \   00009C   AB..         MOV     R3,?XSP + 1
   \   00009E   12....       LCALL   ??mac_msg_deallocate?relay; Banked call to: mac_msg_deallocate
    157                return;
   \   0000A1   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    158              }
    159              msgPtr = pData;
   \                     ??MAC_CbackEvent_5:
   \   0000A4   85..82       MOV     DPL,?XSP + 0
   \   0000A7   85..83       MOV     DPH,?XSP + 1
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F8           MOV     R0,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   F9           MOV     R1,A
   \   0000AF   E8           MOV     A,R0
   \   0000B0   FE           MOV     R6,A
   \   0000B1   E9           MOV     A,R1
   \   0000B2   FF           MOV     R7,A
   \   0000B3   02....       LJMP    ??MAC_CbackEvent_6 & 0xFFFF
    160            }
    161            else
    162            {
    163              if (event == MAC_MLME_BEACON_NOTIFY_IND )
   \                     ??MAC_CbackEvent_1:
   \   0000B6   7405         MOV     A,#0x5
   \   0000B8   65..         XRL     A,?V3
   \   0000BA   702D         JNZ     ??MAC_CbackEvent_7
    164              {
    165                tmp += sizeof(macPanDesc_t) + pData->beaconNotifyInd.sduLength;
   \   0000BC   85..82       MOV     DPL,?XSP + 0
   \   0000BF   85..83       MOV     DPH,?XSP + 1
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F8           MOV     R0,A
   \   0000C4   A3           INC     DPTR
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   C8           XCH     A,R0
   \   0000C7   2408         ADD     A,#0x8
   \   0000C9   F582         MOV     DPL,A
   \   0000CB   C8           XCH     A,R0
   \   0000CC   3400         ADDC    A,#0x0
   \   0000CE   F583         MOV     DPH,A
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   F8           MOV     R0,A
   \   0000D2   7900         MOV     R1,#0x0
   \   0000D4   E8           MOV     A,R0
   \   0000D5   2421         ADD     A,#0x21
   \   0000D7   F8           MOV     R0,A
   \   0000D8   5001         JNC     ??MAC_CbackEvent_8
   \   0000DA   09           INC     R1
   \                     ??MAC_CbackEvent_8:
   \   0000DB   7402         MOV     A,#0x2
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   28           ADD     A,R0
   \   0000E2   F0           MOVX    @DPTR,A
   \   0000E3   A3           INC     DPTR
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   39           ADDC    A,R1
   \   0000E6   F0           MOVX    @DPTR,A
   \   0000E7   8062         SJMP    ??MAC_CbackEvent_9
    166              }
    167              else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_7:
   \   0000E9   7407         MOV     A,#0x7
   \   0000EB   65..         XRL     A,?V3
   \   0000ED   705C         JNZ     ??MAC_CbackEvent_9
    168              {
    169                if (pData->scanCnf.scanType == ZMAC_ED_SCAN)
   \   0000EF   85..82       MOV     DPL,?XSP + 0
   \   0000F2   85..83       MOV     DPH,?XSP + 1
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   F8           MOV     R0,A
   \   0000F7   A3           INC     DPTR
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   F583         MOV     DPH,A
   \   0000FB   8882         MOV     DPL,R0
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   7010         JNZ     ??MAC_CbackEvent_10
    170                {
    171                  tmp += ZMAC_ED_SCAN_MAXCHANNELS;
   \   000102   7402         MOV     A,#0x2
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   E0           MOVX    A,@DPTR
   \   000108   241B         ADD     A,#0x1b
   \   00010A   F0           MOVX    @DPTR,A
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   3400         ADDC    A,#0x0
   \   00010F   F0           MOVX    @DPTR,A
   \   000110   8039         SJMP    ??MAC_CbackEvent_9
    172                }
    173                else
    174                {
    175                  tmp += sizeof( ZMacPanDesc_t ) * pData->scanCnf.resultListSize;
   \                     ??MAC_CbackEvent_10:
   \   000112   85..82       MOV     DPL,?XSP + 0
   \   000115   85..83       MOV     DPH,?XSP + 1
   \   000118   E0           MOVX    A,@DPTR
   \   000119   F8           MOV     R0,A
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   C8           XCH     A,R0
   \   00011D   2408         ADD     A,#0x8
   \   00011F   F582         MOV     DPL,A
   \   000121   C8           XCH     A,R0
   \   000122   3400         ADDC    A,#0x0
   \   000124   F583         MOV     DPH,A
   \   000126   E0           MOVX    A,@DPTR
   \   000127   F8           MOV     R0,A
   \   000128   7900         MOV     R1,#0x0
   \   00012A   E8           MOV     A,R0
   \   00012B   75F021       MOV     B,#0x21
   \   00012E   A4           MUL     AB
   \   00012F   C8           XCH     A,R0
   \   000130   AAF0         MOV     R2,B
   \   000132   75F000       MOV     B,#0x0
   \   000135   A4           MUL     AB
   \   000136   2A           ADD     A,R2
   \   000137   FA           MOV     R2,A
   \   000138   75F021       MOV     B,#0x21
   \   00013B   E9           MOV     A,R1
   \   00013C   A4           MUL     AB
   \   00013D   2A           ADD     A,R2
   \   00013E   F9           MOV     R1,A
   \   00013F   7402         MOV     A,#0x2
   \   000141   12....       LCALL   ?XSTACK_DISP0_8
   \   000144   E0           MOVX    A,@DPTR
   \   000145   28           ADD     A,R0
   \   000146   F0           MOVX    @DPTR,A
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   39           ADDC    A,R1
   \   00014A   F0           MOVX    @DPTR,A
    176                }
    177              }
    178          
    179              if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \                     ??MAC_CbackEvent_9:
   \   00014B                ; Setup parameters for call to function osal_msg_allocate
   \   00014B   7402         MOV     A,#0x2
   \   00014D   12....       LCALL   ?XSTACK_DISP0_8
   \   000150   E0           MOVX    A,@DPTR
   \   000151   FA           MOV     R2,A
   \   000152   A3           INC     DPTR
   \   000153   E0           MOVX    A,@DPTR
   \   000154   FB           MOV     R3,A
   \   000155   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
   \   000158   8A..         MOV     ?V0,R2
   \   00015A   8B..         MOV     ?V1,R3
   \   00015C   A8..         MOV     R0,?V0
   \   00015E   A9..         MOV     R1,?V1
   \   000160   E8           MOV     A,R0
   \   000161   FE           MOV     R6,A
   \   000162   E9           MOV     A,R1
   \   000163   FF           MOV     R7,A
   \   000164   E8           MOV     A,R0
   \   000165   49           ORL     A,R1
   \   000166   6003         JZ      $+5
   \   000168   02....       LJMP    ??MAC_CbackEvent_11 & 0xFFFF
    180              {
    181                // Not enough memory. If data confirm - try again
    182                if ( event == MAC_MCPS_DATA_CNF )
   \   00016B   740C         MOV     A,#0xc
   \   00016D   65..         XRL     A,?V3
   \   00016F   7078         JNZ     ??MAC_CbackEvent_12
    183                {
    184                  halIntState_t intState;
    185          
    186                  // This is not normally deallocated here because the pZMac_AppCallback()
    187                  // application may need it.
    188                  HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000171   A2AF         MOV     C,0xa8.7
   \   000173   E4           CLR     A
   \   000174   33           RLC     A
   \   000175   F5..         MOV     ?V0,A
   \   000177   C2AF         CLR     0xa8.7
    189          
    190                  mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   000179                ; Setup parameters for call to function mac_msg_deallocate
   \   000179   85..82       MOV     DPL,?XSP + 0
   \   00017C   85..83       MOV     DPH,?XSP + 1
   \   00017F   E0           MOVX    A,@DPTR
   \   000180   2403         ADD     A,#0x3
   \   000182   FA           MOV     R2,A
   \   000183   A3           INC     DPTR
   \   000184   E0           MOVX    A,@DPTR
   \   000185   3400         ADDC    A,#0x0
   \   000187   FB           MOV     R3,A
   \   000188   12....       LCALL   ??mac_msg_deallocate?relay; Banked call to: mac_msg_deallocate
    191                  if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \   00018B                ; Setup parameters for call to function osal_msg_allocate
   \   00018B   7402         MOV     A,#0x2
   \   00018D   12....       LCALL   ?XSTACK_DISP0_8
   \   000190   E0           MOVX    A,@DPTR
   \   000191   FA           MOV     R2,A
   \   000192   A3           INC     DPTR
   \   000193   E0           MOVX    A,@DPTR
   \   000194   FB           MOV     R3,A
   \   000195   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
   \   000198   8A..         MOV     ?V4,R2
   \   00019A   8B..         MOV     ?V5,R3
   \   00019C   A8..         MOV     R0,?V4
   \   00019E   A9..         MOV     R1,?V5
   \   0001A0   E8           MOV     A,R0
   \   0001A1   FE           MOV     R6,A
   \   0001A2   E9           MOV     A,R1
   \   0001A3   FF           MOV     R7,A
   \   0001A4   E8           MOV     A,R0
   \   0001A5   49           ORL     A,R1
   \   0001A6   7015         JNZ     ??MAC_CbackEvent_13
    192                  {
    193                    // Still no allocation, something is wrong
    194                    HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   0001A8   E5..         MOV     A,?V0
   \   0001AA   C0E0         PUSH    A
   \   0001AC   7406         MOV     A,#0x6
   \   0001AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B1   D0E0         POP     A
   \   0001B3   F0           MOVX    @DPTR,A
   \   0001B4   E5..         MOV     A,?V0
   \   0001B6   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001B8   92AF         MOV     0xa8.7,C
    195                    return;
   \   0001BA   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    196                  }
    197                  HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??MAC_CbackEvent_13:
   \   0001BD   E5..         MOV     A,?V0
   \   0001BF   C0E0         PUSH    A
   \   0001C1   7406         MOV     A,#0x6
   \   0001C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C6   D0E0         POP     A
   \   0001C8   F0           MOVX    @DPTR,A
   \   0001C9   E5..         MOV     A,?V0
   \   0001CB   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001CD   92AF         MOV     0xa8.7,C
    198                  pData->dataCnf.pDataReq = NULL;
   \   0001CF   85..82       MOV     DPL,?XSP + 0
   \   0001D2   85..83       MOV     DPH,?XSP + 1
   \   0001D5   E0           MOVX    A,@DPTR
   \   0001D6   F8           MOV     R0,A
   \   0001D7   A3           INC     DPTR
   \   0001D8   E0           MOVX    A,@DPTR
   \   0001D9   F583         MOV     DPH,A
   \   0001DB   8882         MOV     DPL,R0
   \   0001DD   A3           INC     DPTR
   \   0001DE   A3           INC     DPTR
   \   0001DF   A3           INC     DPTR
   \   0001E0   7400         MOV     A,#0x0
   \   0001E2   F0           MOVX    @DPTR,A
   \   0001E3   A3           INC     DPTR
   \   0001E4   7400         MOV     A,#0x0
   \   0001E6   F0           MOVX    @DPTR,A
   \   0001E7   8003         SJMP    ??MAC_CbackEvent_11
    199                }
    200                else
    201                {
    202                  // This message is dropped
    203                  return;
   \                     ??MAC_CbackEvent_12:
   \   0001E9   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    204                }
    205              }
    206              osal_memcpy(msgPtr, pData, zmacCBSizeTable[event]);
   \                     ??MAC_CbackEvent_11:
   \   0001EC                ; Setup parameters for call to function osal_memcpy
   \   0001EC   85..82       MOV     DPL,?XSP + 0
   \   0001EF   85..83       MOV     DPH,?XSP + 1
   \   0001F2   E0           MOVX    A,@DPTR
   \   0001F3   F5..         MOV     ?V0,A
   \   0001F5   A3           INC     DPTR
   \   0001F6   E0           MOVX    A,@DPTR
   \   0001F7   F5..         MOV     ?V1,A
   \   0001F9   75..00       MOV     ?V2,#0x0
   \   0001FC   78..         MOV     R0,#?V0
   \   0001FE   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000201   A8..         MOV     R0,?V3
   \   000203   7900         MOV     R1,#0x0
   \   000205   74..         MOV     A,#zmacCBSizeTable & 0xff
   \   000207   28           ADD     A,R0
   \   000208   F582         MOV     DPL,A
   \   00020A   74..         MOV     A,#(zmacCBSizeTable >> 8) & 0xff
   \   00020C   39           ADDC    A,R1
   \   00020D   F583         MOV     DPH,A
   \   00020F   E4           CLR     A
   \   000210   93           MOVC    A,@A+DPTR
   \   000211   FC           MOV     R4,A
   \   000212   7D00         MOV     R5,#0x0
   \   000214   EE           MOV     A,R6
   \   000215   FA           MOV     R2,A
   \   000216   EF           MOV     A,R7
   \   000217   FB           MOV     R3,A
   \   000218   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00021B   7403         MOV     A,#0x3
   \   00021D   12....       LCALL   ?DEALLOC_XSTACK8
    207            }
    208          
    209            if ( event == MAC_MLME_BEACON_NOTIFY_IND )
   \                     ??MAC_CbackEvent_6:
   \   000220   7405         MOV     A,#0x5
   \   000222   65..         XRL     A,?V3
   \   000224   6003         JZ      $+5
   \   000226   02....       LJMP    ??MAC_CbackEvent_14 & 0xFFFF
    210            {
    211              macMlmeBeaconNotifyInd_t *pBeacon = (macMlmeBeaconNotifyInd_t*)msgPtr;
   \   000229   8E..         MOV     ?V4,R6
   \   00022B   8F..         MOV     ?V5,R7
    212          
    213              osal_memcpy(pBeacon+1, pBeacon->pPanDesc, sizeof(macPanDesc_t));
   \   00022D                ; Setup parameters for call to function osal_memcpy
   \   00022D   85..82       MOV     DPL,?V4
   \   000230   85..83       MOV     DPH,?V5
   \   000233   A3           INC     DPTR
   \   000234   A3           INC     DPTR
   \   000235   A3           INC     DPTR
   \   000236   E0           MOVX    A,@DPTR
   \   000237   F5..         MOV     ?V0,A
   \   000239   A3           INC     DPTR
   \   00023A   E0           MOVX    A,@DPTR
   \   00023B   F5..         MOV     ?V1,A
   \   00023D   75..00       MOV     ?V2,#0x0
   \   000240   78..         MOV     R0,#?V0
   \   000242   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000245   7C21         MOV     R4,#0x21
   \   000247   7D00         MOV     R5,#0x0
   \   000249   E5..         MOV     A,?V4
   \   00024B   240B         ADD     A,#0xb
   \   00024D   FA           MOV     R2,A
   \   00024E   E4           CLR     A
   \   00024F   35..         ADDC    A,?V5
   \   000251   FB           MOV     R3,A
   \   000252   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000255   7403         MOV     A,#0x3
   \   000257   12....       LCALL   ?DEALLOC_XSTACK8
    214              pBeacon->pPanDesc = (macPanDesc_t *)(pBeacon+1);
   \   00025A   E5..         MOV     A,?V4
   \   00025C   240B         ADD     A,#0xb
   \   00025E   F8           MOV     R0,A
   \   00025F   E4           CLR     A
   \   000260   35..         ADDC    A,?V5
   \   000262   F9           MOV     R1,A
   \   000263   85..82       MOV     DPL,?V4
   \   000266   85..83       MOV     DPH,?V5
   \   000269   A3           INC     DPTR
   \   00026A   A3           INC     DPTR
   \   00026B   A3           INC     DPTR
   \   00026C   E8           MOV     A,R0
   \   00026D   F0           MOVX    @DPTR,A
   \   00026E   A3           INC     DPTR
   \   00026F   E9           MOV     A,R1
   \   000270   F0           MOVX    @DPTR,A
    215              osal_memcpy(pBeacon->pPanDesc+1, pBeacon->pSdu, pBeacon->sduLength);
   \   000271                ; Setup parameters for call to function osal_memcpy
   \   000271   85..82       MOV     DPL,?V4
   \   000274   85..83       MOV     DPH,?V5
   \   000277   A3           INC     DPTR
   \   000278   A3           INC     DPTR
   \   000279   A3           INC     DPTR
   \   00027A   A3           INC     DPTR
   \   00027B   A3           INC     DPTR
   \   00027C   A3           INC     DPTR
   \   00027D   A3           INC     DPTR
   \   00027E   A3           INC     DPTR
   \   00027F   A3           INC     DPTR
   \   000280   E0           MOVX    A,@DPTR
   \   000281   F5..         MOV     ?V0,A
   \   000283   A3           INC     DPTR
   \   000284   E0           MOVX    A,@DPTR
   \   000285   F5..         MOV     ?V1,A
   \   000287   75..00       MOV     ?V2,#0x0
   \   00028A   78..         MOV     R0,#?V0
   \   00028C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00028F   85..82       MOV     DPL,?V4
   \   000292   85..83       MOV     DPH,?V5
   \   000295   A3           INC     DPTR
   \   000296   A3           INC     DPTR
   \   000297   A3           INC     DPTR
   \   000298   A3           INC     DPTR
   \   000299   A3           INC     DPTR
   \   00029A   A3           INC     DPTR
   \   00029B   A3           INC     DPTR
   \   00029C   A3           INC     DPTR
   \   00029D   E0           MOVX    A,@DPTR
   \   00029E   FC           MOV     R4,A
   \   00029F   7D00         MOV     R5,#0x0
   \   0002A1   85..82       MOV     DPL,?V4
   \   0002A4   85..83       MOV     DPH,?V5
   \   0002A7   A3           INC     DPTR
   \   0002A8   A3           INC     DPTR
   \   0002A9   A3           INC     DPTR
   \   0002AA   E0           MOVX    A,@DPTR
   \   0002AB   2421         ADD     A,#0x21
   \   0002AD   FA           MOV     R2,A
   \   0002AE   A3           INC     DPTR
   \   0002AF   E0           MOVX    A,@DPTR
   \   0002B0   3400         ADDC    A,#0x0
   \   0002B2   FB           MOV     R3,A
   \   0002B3   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0002B6   7403         MOV     A,#0x3
   \   0002B8   12....       LCALL   ?DEALLOC_XSTACK8
    216              pBeacon->pSdu = (uint8 *)(pBeacon->pPanDesc+1);
   \   0002BB   85..82       MOV     DPL,?V4
   \   0002BE   85..83       MOV     DPH,?V5
   \   0002C1   A3           INC     DPTR
   \   0002C2   A3           INC     DPTR
   \   0002C3   A3           INC     DPTR
   \   0002C4   E0           MOVX    A,@DPTR
   \   0002C5   2421         ADD     A,#0x21
   \   0002C7   F8           MOV     R0,A
   \   0002C8   A3           INC     DPTR
   \   0002C9   E0           MOVX    A,@DPTR
   \   0002CA   3400         ADDC    A,#0x0
   \   0002CC   F9           MOV     R1,A
   \   0002CD   85..82       MOV     DPL,?V4
   \   0002D0   85..83       MOV     DPH,?V5
   \   0002D3   A3           INC     DPTR
   \   0002D4   A3           INC     DPTR
   \   0002D5   A3           INC     DPTR
   \   0002D6   A3           INC     DPTR
   \   0002D7   A3           INC     DPTR
   \   0002D8   A3           INC     DPTR
   \   0002D9   A3           INC     DPTR
   \   0002DA   A3           INC     DPTR
   \   0002DB   A3           INC     DPTR
   \   0002DC   E8           MOV     A,R0
   \   0002DD   F0           MOVX    @DPTR,A
   \   0002DE   A3           INC     DPTR
   \   0002DF   E9           MOV     A,R1
   \   0002E0   F0           MOVX    @DPTR,A
   \   0002E1   02....       LJMP    ??MAC_CbackEvent_15 & 0xFFFF
    217            }
    218            else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_14:
   \   0002E4   7407         MOV     A,#0x7
   \   0002E6   65..         XRL     A,?V3
   \   0002E8   6003         JZ      $+5
   \   0002EA   02....       LJMP    ??MAC_CbackEvent_15 & 0xFFFF
    219            {
    220              macMlmeScanCnf_t *pScan = (macMlmeScanCnf_t*)msgPtr;
   \   0002ED   8E..         MOV     ?V4,R6
   \   0002EF   8F..         MOV     ?V5,R7
    221          
    222              if (ZMac_ScanBuf != NULL)
   \   0002F1   90....       MOV     DPTR,#ZMac_ScanBuf
   \   0002F4   E0           MOVX    A,@DPTR
   \   0002F5   F8           MOV     R0,A
   \   0002F6   A3           INC     DPTR
   \   0002F7   E0           MOVX    A,@DPTR
   \   0002F8   F9           MOV     R1,A
   \   0002F9   E8           MOV     A,R0
   \   0002FA   49           ORL     A,R1
   \   0002FB   7003         JNZ     $+5
   \   0002FD   02....       LJMP    ??MAC_CbackEvent_15 & 0xFFFF
    223              {
    224                void *pTmp = ZMac_ScanBuf;
   \   000300   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000303   E0           MOVX    A,@DPTR
   \   000304   F8           MOV     R0,A
   \   000305   A3           INC     DPTR
   \   000306   E0           MOVX    A,@DPTR
   \   000307   F9           MOV     R1,A
   \   000308   7404         MOV     A,#0x4
   \   00030A   12....       LCALL   ?XSTACK_DISP0_8
   \   00030D   E8           MOV     A,R0
   \   00030E   F0           MOVX    @DPTR,A
   \   00030F   A3           INC     DPTR
   \   000310   E9           MOV     A,R1
   \   000311   F0           MOVX    @DPTR,A
    225                ZMac_ScanBuf = NULL;
   \   000312   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000315   7400         MOV     A,#0x0
   \   000317   F0           MOVX    @DPTR,A
   \   000318   A3           INC     DPTR
   \   000319   7400         MOV     A,#0x0
   \   00031B   F0           MOVX    @DPTR,A
    226          
    227                if (pScan->scanType == ZMAC_ED_SCAN)
   \   00031C   85..82       MOV     DPL,?V4
   \   00031F   85..83       MOV     DPH,?V5
   \   000322   A3           INC     DPTR
   \   000323   A3           INC     DPTR
   \   000324   E0           MOVX    A,@DPTR
   \   000325   7053         JNZ     ??MAC_CbackEvent_16
    228                {
    229                  pScan->result.pEnergyDetect = (uint8*) (pScan + 1);
   \   000327   E5..         MOV     A,?V4
   \   000329   240B         ADD     A,#0xb
   \   00032B   F8           MOV     R0,A
   \   00032C   E4           CLR     A
   \   00032D   35..         ADDC    A,?V5
   \   00032F   F9           MOV     R1,A
   \   000330   85..82       MOV     DPL,?V4
   \   000333   85..83       MOV     DPH,?V5
   \   000336   A3           INC     DPTR
   \   000337   A3           INC     DPTR
   \   000338   A3           INC     DPTR
   \   000339   A3           INC     DPTR
   \   00033A   A3           INC     DPTR
   \   00033B   A3           INC     DPTR
   \   00033C   A3           INC     DPTR
   \   00033D   A3           INC     DPTR
   \   00033E   A3           INC     DPTR
   \   00033F   E8           MOV     A,R0
   \   000340   F0           MOVX    @DPTR,A
   \   000341   A3           INC     DPTR
   \   000342   E9           MOV     A,R1
   \   000343   F0           MOVX    @DPTR,A
    230                  osal_memcpy(pScan->result.pEnergyDetect, pTmp, ZMAC_ED_SCAN_MAXCHANNELS);
   \   000344                ; Setup parameters for call to function osal_memcpy
   \   000344   7404         MOV     A,#0x4
   \   000346   12....       LCALL   ?XSTACK_DISP0_8
   \   000349   E0           MOVX    A,@DPTR
   \   00034A   F5..         MOV     ?V0,A
   \   00034C   A3           INC     DPTR
   \   00034D   E0           MOVX    A,@DPTR
   \   00034E   F5..         MOV     ?V1,A
   \   000350   75..00       MOV     ?V2,#0x0
   \   000353   78..         MOV     R0,#?V0
   \   000355   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000358   7C1B         MOV     R4,#0x1b
   \   00035A   7D00         MOV     R5,#0x0
   \   00035C   85..82       MOV     DPL,?V4
   \   00035F   85..83       MOV     DPH,?V5
   \   000362   A3           INC     DPTR
   \   000363   A3           INC     DPTR
   \   000364   A3           INC     DPTR
   \   000365   A3           INC     DPTR
   \   000366   A3           INC     DPTR
   \   000367   A3           INC     DPTR
   \   000368   A3           INC     DPTR
   \   000369   A3           INC     DPTR
   \   00036A   A3           INC     DPTR
   \   00036B   E0           MOVX    A,@DPTR
   \   00036C   FA           MOV     R2,A
   \   00036D   A3           INC     DPTR
   \   00036E   E0           MOVX    A,@DPTR
   \   00036F   FB           MOV     R3,A
   \   000370   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000373   7403         MOV     A,#0x3
   \   000375   12....       LCALL   ?DEALLOC_XSTACK8
   \   000378   8069         SJMP    ??MAC_CbackEvent_17
    231                }
    232                else
    233                {
    234                  pScan->result.pPanDescriptor = (macPanDesc_t*) (pScan + 1);
   \                     ??MAC_CbackEvent_16:
   \   00037A   E5..         MOV     A,?V4
   \   00037C   240B         ADD     A,#0xb
   \   00037E   F8           MOV     R0,A
   \   00037F   E4           CLR     A
   \   000380   35..         ADDC    A,?V5
   \   000382   F9           MOV     R1,A
   \   000383   85..82       MOV     DPL,?V4
   \   000386   85..83       MOV     DPH,?V5
   \   000389   A3           INC     DPTR
   \   00038A   A3           INC     DPTR
   \   00038B   A3           INC     DPTR
   \   00038C   A3           INC     DPTR
   \   00038D   A3           INC     DPTR
   \   00038E   A3           INC     DPTR
   \   00038F   A3           INC     DPTR
   \   000390   A3           INC     DPTR
   \   000391   A3           INC     DPTR
   \   000392   E8           MOV     A,R0
   \   000393   F0           MOVX    @DPTR,A
   \   000394   A3           INC     DPTR
   \   000395   E9           MOV     A,R1
   \   000396   F0           MOVX    @DPTR,A
    235                  osal_memcpy(pScan + 1, pTmp, sizeof( ZMacPanDesc_t ) * pScan->resultListSize);
   \   000397                ; Setup parameters for call to function osal_memcpy
   \   000397   7404         MOV     A,#0x4
   \   000399   12....       LCALL   ?XSTACK_DISP0_8
   \   00039C   E0           MOVX    A,@DPTR
   \   00039D   F5..         MOV     ?V0,A
   \   00039F   A3           INC     DPTR
   \   0003A0   E0           MOVX    A,@DPTR
   \   0003A1   F5..         MOV     ?V1,A
   \   0003A3   75..00       MOV     ?V2,#0x0
   \   0003A6   78..         MOV     R0,#?V0
   \   0003A8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0003AB   85..82       MOV     DPL,?V4
   \   0003AE   85..83       MOV     DPH,?V5
   \   0003B1   A3           INC     DPTR
   \   0003B2   A3           INC     DPTR
   \   0003B3   A3           INC     DPTR
   \   0003B4   A3           INC     DPTR
   \   0003B5   A3           INC     DPTR
   \   0003B6   A3           INC     DPTR
   \   0003B7   A3           INC     DPTR
   \   0003B8   A3           INC     DPTR
   \   0003B9   E0           MOVX    A,@DPTR
   \   0003BA   FC           MOV     R4,A
   \   0003BB   7D00         MOV     R5,#0x0
   \   0003BD   EC           MOV     A,R4
   \   0003BE   75F021       MOV     B,#0x21
   \   0003C1   A4           MUL     AB
   \   0003C2   CC           XCH     A,R4
   \   0003C3   A8F0         MOV     R0,B
   \   0003C5   75F000       MOV     B,#0x0
   \   0003C8   A4           MUL     AB
   \   0003C9   28           ADD     A,R0
   \   0003CA   F8           MOV     R0,A
   \   0003CB   75F021       MOV     B,#0x21
   \   0003CE   ED           MOV     A,R5
   \   0003CF   A4           MUL     AB
   \   0003D0   28           ADD     A,R0
   \   0003D1   FD           MOV     R5,A
   \   0003D2   E5..         MOV     A,?V4
   \   0003D4   240B         ADD     A,#0xb
   \   0003D6   FA           MOV     R2,A
   \   0003D7   E4           CLR     A
   \   0003D8   35..         ADDC    A,?V5
   \   0003DA   FB           MOV     R3,A
   \   0003DB   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0003DE   7403         MOV     A,#0x3
   \   0003E0   12....       LCALL   ?DEALLOC_XSTACK8
    236                }
    237          
    238                osal_mem_free(pTmp);
   \                     ??MAC_CbackEvent_17:
   \   0003E3                ; Setup parameters for call to function osal_mem_free
   \   0003E3   7404         MOV     A,#0x4
   \   0003E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E8   E0           MOVX    A,@DPTR
   \   0003E9   FA           MOV     R2,A
   \   0003EA   A3           INC     DPTR
   \   0003EB   E0           MOVX    A,@DPTR
   \   0003EC   FB           MOV     R3,A
   \   0003ED   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    239              }
    240            }
    241          
    242            if ( ( pZMac_AppCallback == NULL ) || ( pZMac_AppCallback( (uint8 *)msgPtr ) == FALSE ) )
   \                     ??MAC_CbackEvent_15:
   \   0003F0   90....       MOV     DPTR,#pZMac_AppCallback
   \   0003F3   E0           MOVX    A,@DPTR
   \   0003F4   F8           MOV     R0,A
   \   0003F5   A3           INC     DPTR
   \   0003F6   E0           MOVX    A,@DPTR
   \   0003F7   F9           MOV     R1,A
   \   0003F8   E8           MOV     A,R0
   \   0003F9   49           ORL     A,R1
   \   0003FA   6018         JZ      ??MAC_CbackEvent_18
   \   0003FC                ; Setup parameters for indirect call
   \   0003FC   EE           MOV     A,R6
   \   0003FD   FA           MOV     R2,A
   \   0003FE   EF           MOV     A,R7
   \   0003FF   FB           MOV     R3,A
   \   000400   90....       MOV     DPTR,#pZMac_AppCallback
   \   000403   E0           MOVX    A,@DPTR
   \   000404   F8           MOV     R0,A
   \   000405   A3           INC     DPTR
   \   000406   E0           MOVX    A,@DPTR
   \   000407   F583         MOV     DPH,A
   \   000409   8882         MOV     DPL,R0
   \   00040B   12....       LCALL   ?CALL_IND
   \   00040E   E9           MOV     A,R1
   \   00040F   6003         JZ      $+5
   \   000411   02....       LJMP    ??MAC_CbackEvent_19 & 0xFFFF
    243            {
    244              // Filter out non-zigbee packets
    245              if ( event == MAC_MCPS_DATA_IND )
   \                     ??MAC_CbackEvent_18:
   \   000414   740D         MOV     A,#0xd
   \   000416   65..         XRL     A,?V3
   \   000418   6003         JZ      $+5
   \   00041A   02....       LJMP    ??MAC_CbackEvent_20 & 0xFFFF
    246              {
    247                uint8 fcFrameType = (pData->dataInd.msdu.p[0] & 0x03);
   \   00041D   85..82       MOV     DPL,?XSP + 0
   \   000420   85..83       MOV     DPH,?XSP + 1
   \   000423   E0           MOVX    A,@DPTR
   \   000424   F8           MOV     R0,A
   \   000425   A3           INC     DPTR
   \   000426   E0           MOVX    A,@DPTR
   \   000427   F583         MOV     DPH,A
   \   000429   8882         MOV     DPL,R0
   \   00042B   A3           INC     DPTR
   \   00042C   A3           INC     DPTR
   \   00042D   E0           MOVX    A,@DPTR
   \   00042E   F8           MOV     R0,A
   \   00042F   A3           INC     DPTR
   \   000430   E0           MOVX    A,@DPTR
   \   000431   F583         MOV     DPH,A
   \   000433   8882         MOV     DPL,R0
   \   000435   E0           MOVX    A,@DPTR
   \   000436   5403         ANL     A,#0x3
   \   000438   F5..         MOV     ?V0,A
    248                uint8 fcProtoVer = ((pData->dataInd.msdu.p[0] >> 2) & 0x0F);
   \   00043A   85..82       MOV     DPL,?XSP + 0
   \   00043D   85..83       MOV     DPH,?XSP + 1
   \   000440   E0           MOVX    A,@DPTR
   \   000441   F8           MOV     R0,A
   \   000442   A3           INC     DPTR
   \   000443   E0           MOVX    A,@DPTR
   \   000444   F583         MOV     DPH,A
   \   000446   8882         MOV     DPL,R0
   \   000448   A3           INC     DPTR
   \   000449   A3           INC     DPTR
   \   00044A   E0           MOVX    A,@DPTR
   \   00044B   F8           MOV     R0,A
   \   00044C   A3           INC     DPTR
   \   00044D   E0           MOVX    A,@DPTR
   \   00044E   F583         MOV     DPH,A
   \   000450   8882         MOV     DPL,R0
   \   000452   E0           MOVX    A,@DPTR
   \   000453   13           RRC     A
   \   000454   13           RRC     A
   \   000455   543F         ANL     A,#0x3f
   \   000457   540F         ANL     A,#0xf
   \   000459   F5..         MOV     ?V1,A
    249                uint8 fcReserve = (pData->dataInd.msdu.p[1] & 0xE0);
   \   00045B   85..82       MOV     DPL,?XSP + 0
   \   00045E   85..83       MOV     DPH,?XSP + 1
   \   000461   E0           MOVX    A,@DPTR
   \   000462   F8           MOV     R0,A
   \   000463   A3           INC     DPTR
   \   000464   E0           MOVX    A,@DPTR
   \   000465   F583         MOV     DPH,A
   \   000467   8882         MOV     DPL,R0
   \   000469   A3           INC     DPTR
   \   00046A   A3           INC     DPTR
   \   00046B   E0           MOVX    A,@DPTR
   \   00046C   F8           MOV     R0,A
   \   00046D   A3           INC     DPTR
   \   00046E   E0           MOVX    A,@DPTR
   \   00046F   F583         MOV     DPH,A
   \   000471   8882         MOV     DPL,R0
   \   000473   A3           INC     DPTR
   \   000474   E0           MOVX    A,@DPTR
   \   000475   54E0         ANL     A,#0xe0
   \   000477   F5..         MOV     ?V2,A
    250                if ( (fcFrameType > 0x01) || (fcProtoVer != _NIB.nwkProtocolVersion) || (fcReserve != 0)
    251                    || (pData->dataInd.mac.srcAddr.addrMode != SADDR_MODE_SHORT) )
   \   000479   E5..         MOV     A,?V0
   \   00047B   C3           CLR     C
   \   00047C   9402         SUBB    A,#0x2
   \   00047E   5025         JNC     ??MAC_CbackEvent_21
   \   000480   90....       MOV     DPTR,#_NIB + 17
   \   000483   E0           MOVX    A,@DPTR
   \   000484   65..         XRL     A,?V1
   \   000486   701D         JNZ     ??MAC_CbackEvent_21
   \   000488   E5..         MOV     A,?V2
   \   00048A   7019         JNZ     ??MAC_CbackEvent_21
   \   00048C   85..82       MOV     DPL,?XSP + 0
   \   00048F   85..83       MOV     DPH,?XSP + 1
   \   000492   E0           MOVX    A,@DPTR
   \   000493   F8           MOV     R0,A
   \   000494   A3           INC     DPTR
   \   000495   E0           MOVX    A,@DPTR
   \   000496   C8           XCH     A,R0
   \   000497   241A         ADD     A,#0x1a
   \   000499   F582         MOV     DPL,A
   \   00049B   C8           XCH     A,R0
   \   00049C   3400         ADDC    A,#0x0
   \   00049E   F583         MOV     DPH,A
   \   0004A0   E0           MOVX    A,@DPTR
   \   0004A1   6402         XRL     A,#0x2
   \   0004A3   600A         JZ      ??MAC_CbackEvent_22
    252                {
    253                  // Drop the message
    254                  mac_msg_deallocate( (uint8 **)&pData );
   \                     ??MAC_CbackEvent_21:
   \   0004A5                ; Setup parameters for call to function mac_msg_deallocate
   \   0004A5   AA..         MOV     R2,?XSP + 0
   \   0004A7   AB..         MOV     R3,?XSP + 1
   \   0004A9   12....       LCALL   ??mac_msg_deallocate?relay; Banked call to: mac_msg_deallocate
    255                  return;
   \   0004AC   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    256                }
    257                else
    258                {
    259                  macDataInd_t *pInd = &msgPtr->dataInd.mac;
   \                     ??MAC_CbackEvent_22:
   \   0004AF   EE           MOV     A,R6
   \   0004B0   2412         ADD     A,#0x12
   \   0004B2   F5..         MOV     ?V4,A
   \   0004B4   E4           CLR     A
   \   0004B5   3F           ADDC    A,R7
   \   0004B6   F5..         MOV     ?V5,A
    260                  // See if LQI needs adjustment due to frame correlation
    261                  ZMacLqiAdjust( pInd->correlation, &pInd->mpduLinkQuality );
   \   0004B8                ; Setup parameters for call to function ZMacLqiAdjust
   \   0004B8   E5..         MOV     A,?V4
   \   0004BA   241C         ADD     A,#0x1c
   \   0004BC   FA           MOV     R2,A
   \   0004BD   E4           CLR     A
   \   0004BE   35..         ADDC    A,?V5
   \   0004C0   FB           MOV     R3,A
   \   0004C1   E5..         MOV     A,?V4
   \   0004C3   241D         ADD     A,#0x1d
   \   0004C5   F582         MOV     DPL,A
   \   0004C7   E4           CLR     A
   \   0004C8   35..         ADDC    A,?V5
   \   0004CA   F583         MOV     DPH,A
   \   0004CC   E0           MOVX    A,@DPTR
   \   0004CD   F9           MOV     R1,A
   \   0004CE   12....       LCALL   ??ZMacLqiAdjust?relay; Banked call to: ZMacLqiAdjust
    262          
    263                  // Look for broadcast message that has a radius of greater 1
    264                  if ( (pData->dataInd.mac.dstAddr.addr.shortAddr == 0xFFFF)
    265                         && (pData->dataInd.msdu.p[6] > 1) )
   \   0004D1   85..82       MOV     DPL,?XSP + 0
   \   0004D4   85..83       MOV     DPH,?XSP + 1
   \   0004D7   E0           MOVX    A,@DPTR
   \   0004D8   F8           MOV     R0,A
   \   0004D9   A3           INC     DPTR
   \   0004DA   E0           MOVX    A,@DPTR
   \   0004DB   C8           XCH     A,R0
   \   0004DC   241B         ADD     A,#0x1b
   \   0004DE   F582         MOV     DPL,A
   \   0004E0   C8           XCH     A,R0
   \   0004E1   3400         ADDC    A,#0x0
   \   0004E3   F583         MOV     DPH,A
   \   0004E5   E0           MOVX    A,@DPTR
   \   0004E6   64FF         XRL     A,#0xff
   \   0004E8   7004         JNZ     ??MAC_CbackEvent_23
   \   0004EA   A3           INC     DPTR
   \   0004EB   E0           MOVX    A,@DPTR
   \   0004EC   64FF         XRL     A,#0xff
   \                     ??MAC_CbackEvent_23:
   \   0004EE   705A         JNZ     ??MAC_CbackEvent_24
   \   0004F0   85..82       MOV     DPL,?XSP + 0
   \   0004F3   85..83       MOV     DPH,?XSP + 1
   \   0004F6   E0           MOVX    A,@DPTR
   \   0004F7   F8           MOV     R0,A
   \   0004F8   A3           INC     DPTR
   \   0004F9   E0           MOVX    A,@DPTR
   \   0004FA   F583         MOV     DPH,A
   \   0004FC   8882         MOV     DPL,R0
   \   0004FE   A3           INC     DPTR
   \   0004FF   A3           INC     DPTR
   \   000500   E0           MOVX    A,@DPTR
   \   000501   F8           MOV     R0,A
   \   000502   A3           INC     DPTR
   \   000503   E0           MOVX    A,@DPTR
   \   000504   C8           XCH     A,R0
   \   000505   2406         ADD     A,#0x6
   \   000507   F582         MOV     DPL,A
   \   000509   C8           XCH     A,R0
   \   00050A   3400         ADDC    A,#0x0
   \   00050C   F583         MOV     DPH,A
   \   00050E   E0           MOVX    A,@DPTR
   \   00050F   C3           CLR     C
   \   000510   9402         SUBB    A,#0x2
   \   000512   4036         JC      ??MAC_CbackEvent_24
    266                  {
    267                    // Send the messsage to a special broadcast queue
    268                    if ( nwk_broadcastSend( (uint8 *)msgPtr ) != SUCCESS )
   \   000514                ; Setup parameters for call to function nwk_broadcastSend
   \   000514   EE           MOV     A,R6
   \   000515   FA           MOV     R2,A
   \   000516   EF           MOV     A,R7
   \   000517   FB           MOV     R3,A
   \   000518   12....       LCALL   ??nwk_broadcastSend?relay; Banked call to: nwk_broadcastSend
   \   00051B   E9           MOV     A,R1
   \   00051C   6051         JZ      ??MAC_CbackEvent_0
    269                    {
    270                      // Drop the message, too many broadcast messages to process
    271                      mac_msg_deallocate( (uint8 **)&pData );
   \   00051E                ; Setup parameters for call to function mac_msg_deallocate
   \   00051E   AA..         MOV     R2,?XSP + 0
   \   000520   AB..         MOV     R3,?XSP + 1
   \   000522   12....       LCALL   ??mac_msg_deallocate?relay; Banked call to: mac_msg_deallocate
    272                    }
    273                    return;
   \   000525   8048         SJMP    ??MAC_CbackEvent_0
    274                  }
    275                }
    276              }
    277              else if ( event == MAC_MCPS_DATA_CNF )
   \                     ??MAC_CbackEvent_20:
   \   000527   740C         MOV     A,#0xc
   \   000529   65..         XRL     A,?V3
   \   00052B   701D         JNZ     ??MAC_CbackEvent_24
    278              {
    279                macMcpsDataCnf_t *pCnf = &msgPtr->dataCnf;
   \   00052D   8E..         MOV     ?V0,R6
   \   00052F   8F..         MOV     ?V1,R7
    280                // See if LQI needs adjustment due to frame correlation
    281                ZMacLqiAdjust( pCnf->correlation, &pCnf->mpduLinkQuality );
   \   000531                ; Setup parameters for call to function ZMacLqiAdjust
   \   000531   E5..         MOV     A,?V0
   \   000533   240C         ADD     A,#0xc
   \   000535   FA           MOV     R2,A
   \   000536   E4           CLR     A
   \   000537   35..         ADDC    A,?V1
   \   000539   FB           MOV     R3,A
   \   00053A   E5..         MOV     A,?V0
   \   00053C   240D         ADD     A,#0xd
   \   00053E   F582         MOV     DPL,A
   \   000540   E4           CLR     A
   \   000541   35..         ADDC    A,?V1
   \   000543   F583         MOV     DPH,A
   \   000545   E0           MOVX    A,@DPTR
   \   000546   F9           MOV     R1,A
   \   000547   12....       LCALL   ??ZMacLqiAdjust?relay; Banked call to: ZMacLqiAdjust
    282              }
    283          
    284              // Application hasn't already processed this message. Send it to NWK task.
    285              osal_msg_send( NWK_TaskID, (uint8 *)msgPtr );
   \                     ??MAC_CbackEvent_24:
   \   00054A                ; Setup parameters for call to function osal_msg_send
   \   00054A   EE           MOV     A,R6
   \   00054B   FA           MOV     R2,A
   \   00054C   EF           MOV     A,R7
   \   00054D   FB           MOV     R3,A
   \   00054E   90....       MOV     DPTR,#NWK_TaskID
   \   000551   E0           MOVX    A,@DPTR
   \   000552   F9           MOV     R1,A
   \   000553   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
   \   000556   E9           MOV     A,R1
    286            }
    287          
    288            if ( event == MAC_MCPS_DATA_CNF )
   \                     ??MAC_CbackEvent_19:
   \   000557   740C         MOV     A,#0xc
   \   000559   65..         XRL     A,?V3
   \   00055B   7012         JNZ     ??MAC_CbackEvent_0
    289            {
    290              // If the application needs 'pDataReq' then we cannot free it here.
    291              // The application must free it after using it. Note that 'pDataReq'
    292              // is of macMcpsDataReq_t (and not ZMacDataReq_t) type.
    293          
    294              mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   00055D                ; Setup parameters for call to function mac_msg_deallocate
   \   00055D   85..82       MOV     DPL,?XSP + 0
   \   000560   85..83       MOV     DPH,?XSP + 1
   \   000563   E0           MOVX    A,@DPTR
   \   000564   2403         ADD     A,#0x3
   \   000566   FA           MOV     R2,A
   \   000567   A3           INC     DPTR
   \   000568   E0           MOVX    A,@DPTR
   \   000569   3400         ADDC    A,#0x0
   \   00056B   FB           MOV     R3,A
   \   00056C   12....       LCALL   ??mac_msg_deallocate?relay; Banked call to: mac_msg_deallocate
    295            }
    296          #endif
    297          }
   \                     ??MAC_CbackEvent_0:
   \   00056F   7407         MOV     A,#0x7
   \   000571   12....       LCALL   ?DEALLOC_XSTACK8
   \   000574   7F06         MOV     R7,#0x6
   \   000576   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000579                REQUIRE _A_IEN0
    298          #else  // ifdef MT_MAC_CB_FUNC
    299          {
    300            /* Check if MT has subscribed for this callback If so, pass it as an event to MonitorTest */
    301            switch (pData->hdr.event)
    302            {
    303              case MAC_MLME_ASSOCIATE_IND:
    304                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
    305                  nwk_MTCallbackSubNwkAssociateInd ( (ZMacAssociateInd_t *)pData );
    306                break;
    307          
    308              case MAC_MLME_ASSOCIATE_CNF:
    309                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_CNF )
    310                  nwk_MTCallbackSubNwkAssociateCnf ( (ZMacAssociateCnf_t *)pData );
    311                break;
    312          
    313              case MAC_MLME_DISASSOCIATE_IND:
    314                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_IND )
    315                  nwk_MTCallbackSubNwkDisassociateInd ( (ZMacDisassociateInd_t *)pData );
    316                break;
    317          
    318              case MAC_MLME_DISASSOCIATE_CNF:
    319                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_CNF )
    320                  nwk_MTCallbackSubNwkDisassociateCnf ( (ZMacDisassociateCnf_t *)pData );
    321                break;
    322          
    323              case MAC_MLME_BEACON_NOTIFY_IND:
    324                if ( _macCallbackSub & CB_ID_NWK_BEACON_NOTIFY_IND )
    325                  nwk_MTCallbackSubNwkBeaconNotifyInd( (ZMacBeaconNotifyInd_t *)pData );
    326                break;
    327          
    328              case MAC_MLME_ORPHAN_IND:
    329                if ( _macCallbackSub & CB_ID_NWK_ORPHAN_IND )
    330                  nwk_MTCallbackSubNwkOrphanInd( (ZMacOrphanInd_t *) pData );
    331                break;
    332          
    333              case MAC_MLME_SCAN_CNF:
    334                if ( _macCallbackSub & CB_ID_NWK_SCAN_CNF )
    335                {
    336                  pData->scanCnf.result.pEnergyDetect = ZMac_ScanBuf;
    337                  nwk_MTCallbackSubNwkScanCnf ( (ZMacScanCnf_t *) pData );
    338                }
    339          
    340                if (ZMac_ScanBuf != NULL)
    341                {
    342                  void *pTmp = ZMac_ScanBuf;
    343                  ZMac_ScanBuf = NULL;
    344                  osal_mem_free(pTmp);
    345                }
    346                break;
    347          
    348              case MAC_MLME_START_CNF:
    349                if ( _macCallbackSub & CB_ID_NWK_START_CNF )
    350                  nwk_MTCallbackSubNwkStartCnf ( pData->hdr.status );
    351                break;
    352          
    353              case MAC_MLME_SYNC_LOSS_IND:
    354                if ( _macCallbackSub & CB_ID_NWK_SYNC_LOSS_IND )
    355                 nwk_MTCallbackSubNwkSyncLossInd( (ZMacSyncLossInd_t *) pData );
    356                break;
    357          
    358              case MAC_MLME_POLL_CNF:
    359                if ( _macCallbackSub & CB_ID_NWK_POLL_CNF )
    360                   nwk_MTCallbackSubNwkPollCnf( pData->hdr.status );
    361                break;
    362          
    363              case MAC_MLME_COMM_STATUS_IND:
    364                if ( _macCallbackSub & CB_ID_NWK_COMM_STATUS_IND )
    365                  nwk_MTCallbackSubCommStatusInd ( (ZMacCommStatusInd_t *) pData );
    366                break;
    367          
    368              case MAC_MCPS_DATA_CNF:
    369                mac_msg_deallocate((uint8**)&pData->dataCnf.pDataReq);
    370          
    371                if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
    372                  nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
    373                break;
    374          
    375              case MAC_MCPS_DATA_IND:
    376                  {
    377                    /*
    378                       Data Ind is unconventional: to save an alloc/copy, reuse the MAC
    379                       buffer and re-organize the contents into ZMAC format.
    380                    */
    381                    ZMacDataInd_t *pDataInd = (ZMacDataInd_t *) pData;
    382                    uint8 event, status, len, *msdu;
    383          
    384                    /* Store parameters */
    385                    event = pData->hdr.event;
    386                    status = pData->hdr.status;
    387                    len = pData->dataInd.msdu.len;
    388                    msdu = pData->dataInd.msdu.p;
    389          
    390                    /* Copy header */
    391                    osal_memcpy(&pDataInd->SrcAddr, &pData->dataInd.mac, sizeof(ZMacDataInd_t) - sizeof(ZMacEventHdr_t));
    392          
    393                    /* Security - set to zero for now*/
    394                    pDataInd->Sec.SecurityLevel = false;
    395          
    396                    /* Restore parameters */
    397                    pDataInd->hdr.Status = status;
    398                    pDataInd->hdr.Event = event;
    399                    pDataInd->msduLength = len;
    400          
    401                    if (len)
    402                      pDataInd->msdu = msdu;
    403                    else
    404                      pDataInd->msdu = NULL;
    405          
    406                    if ( _macCallbackSub & CB_ID_NWK_DATA_IND )
    407                      nwk_MTCallbackSubNwkDataInd ( pDataInd );
    408          
    409                    /* free buffer */
    410                    mac_msg_deallocate( (uint8 **)&pData );
    411                  }
    412                  break;
    413          
    414              case MAC_MCPS_PURGE_CNF:
    415                if ( _macCallbackSub & CB_ID_NWK_PURGE_CNF )
    416                  nwk_MTCallbackSubNwkPurgeCnf( (ZMacPurgeCnf_t *) pData);
    417                break;
    418          
    419              default:
    420                break;
    421            }
    422          }
    423          #endif
    424          
    425          /********************************************************************************************************
    426           * @fn      MAC_CbackCheckPending
    427           *
    428           * @brief   Return number of pending indirect msg
    429           *
    430           * @param   None
    431           *
    432           * @return  Number of indirect msg holding
    433           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    434          uint8 MAC_CbackCheckPending(void)
   \                     MAC_CbackCheckPending:
    435          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    436          #if !defined (NONWK)
    437            if ( ZSTACK_ROUTER_BUILD )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6008         JZ      ??MAC_CbackCheckPending_0
   \   00000A   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6401         XRL     A,#0x1
   \   000010   7005         JNZ     ??MAC_CbackCheckPending_1
    438            {
    439              return (nwkDB_ReturnIndirectHoldingCnt());
   \                     ??MAC_CbackCheckPending_0:
   \   000012                ; Setup parameters for call to function nwkDB_ReturnIndirectHoldingCnt
   \   000012   12....       LCALL   ??nwkDB_ReturnIndirectHoldingCnt?relay; Banked call to: nwkDB_ReturnIndirectHoldingCnt
   \   000015   8002         SJMP    ??MAC_CbackCheckPending_2
    440            }
    441            else
    442            {
    443              return (0);
   \                     ??MAC_CbackCheckPending_1:
   \   000017   7900         MOV     R1,#0x0
   \                     ??MAC_CbackCheckPending_2:
   \   000019   D083         POP     DPH
   \   00001B   D082         POP     DPL
   \   00001D   02....       LJMP    ?BRET
    444            }
    445          #else
    446            return (0);
    447          #endif
    448          }
    449          
    450          /********************************************************************************************************
    451           * @fn      ZMacLqiAdjustMode
    452           *
    453           * @brief   Sets/return LQI adjust mode
    454           *
    455           * @param   mode - LQI_ADJ_GET = return current mode only
    456           *                 LQI_ADJ_OFF = disable LQI adjusts
    457           *                 LQI_ADJ_MODEx = set to LQI adjust MODEx
    458           *
    459           * @return  current LQI adjust mode
    460           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    461          ZMacLqiAdjust_t ZMacLqiAdjustMode( ZMacLqiAdjust_t mode )
   \                     ZMacLqiAdjustMode:
    462          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
    463            if ( mode != LQI_ADJ_GET )
   \   000006   74FF         MOV     A,#-0x1
   \   000008   68           XRL     A,R0
   \   000009   6005         JZ      ??ZMacLqiAdjustMode_0
    464            {
    465              lqiAdjMode = mode;
   \   00000B   E8           MOV     A,R0
   \   00000C   90....       MOV     DPTR,#lqiAdjMode
   \   00000F   F0           MOVX    @DPTR,A
    466            }
    467            return ( lqiAdjMode );
   \                     ??ZMacLqiAdjustMode_0:
   \   000010   90....       MOV     DPTR,#lqiAdjMode
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   D083         POP     DPH
   \   000017   D082         POP     DPL
   \   000019   02....       LJMP    ?BRET
    468          }
    469          
    470          /********************************************************************************************************
    471           * @fn      ZMacLqiAdjust
    472           *
    473           * @brief   Adjust LQI according to correlation value
    474           *
    475           * @notes - the IEEE 802.15.4 specification provides some general statements on
    476           *          the subject of LQI. Section 6.7.8: "The minimum and maximum LQI values
    477           *          (0x00 and 0xFF) should be associated with the lowest and highest IEEE
    478           *          802.15.4 signals detectable by the receiver, and LQ values should be
    479           *          uniformly distributed between these two limits." Section E.2.3: "The
    480           *          LQI (see 6.7.8) measures the received energy and/or SNR for each
    481           *          received packet. When energy level and SNR information are combined,
    482           *          they can indicate whether a corrupt packet resulted from low signal
    483           *          strength or from high signal strength plus interference."
    484           *        - LQI Adjustment Mode1 provided below is a simple algorithm to use the
    485           *          packet correlation value (related to SNR) to scale incoming LQI value
    486           *          (related to signal strength) to 'derate' noisy packets.
    487           *        - LQI Adjustment Mode2 provided below is a location for a developer to
    488           *          implement their own proprietary LQI adjustment algorithm.
    489           *
    490           * @param   corr - packet correlation value
    491           * @param   lqi  - ptr to link quality (scaled rssi)
    492           *
    493           * @return  *lqi - adjusted link quality
    494           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          static void ZMacLqiAdjust( uint8 corr, uint8 *lqi )
   \                     ZMacLqiAdjust:
    496          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FC           MOV     R4,A
   \   000009   EB           MOV     A,R3
   \   00000A   FD           MOV     R5,A
    497            if ( lqiAdjMode != LQI_ADJ_OFF )
   \   00000B   90....       MOV     DPTR,#lqiAdjMode
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   606B         JZ      ??ZMacLqiAdjust_0
    498            {
    499              uint16 adjLqi = *lqi;
   \   000011   8C82         MOV     DPL,R4
   \   000013   8D83         MOV     DPH,R5
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F8           MOV     R0,A
   \   000017   7900         MOV     R1,#0x0
    500          
    501              // Keep correlation within theoretical limits
    502              if ( corr < LQI_CORR_MIN )
   \   000019   EE           MOV     A,R6
   \   00001A   C3           CLR     C
   \   00001B   9432         SUBB    A,#0x32
   \   00001D   5004         JNC     ??ZMacLqiAdjust_1
    503              {
    504                 corr = LQI_CORR_MIN;
   \   00001F   7E32         MOV     R6,#0x32
   \   000021   8008         SJMP    ??ZMacLqiAdjust_2
    505              }
    506              else if ( corr > LQI_CORR_MAX )
   \                     ??ZMacLqiAdjust_1:
   \   000023   EE           MOV     A,R6
   \   000024   C3           CLR     C
   \   000025   946F         SUBB    A,#0x6f
   \   000027   4002         JC      ??ZMacLqiAdjust_2
    507              {
    508                 corr = LQI_CORR_MAX;
   \   000029   7E6E         MOV     R6,#0x6e
    509              }
    510          
    511              if ( lqiAdjMode == LQI_ADJ_MODE1 )
   \                     ??ZMacLqiAdjust_2:
   \   00002B   90....       MOV     DPTR,#lqiAdjMode
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6401         XRL     A,#0x1
   \   000031   7032         JNZ     ??ZMacLqiAdjust_3
    512              {
    513                /* MODE1 - linear scaling of incoming LQI with a "correlation percentage"
    514                           which is computed from the incoming correlation value between
    515                           theorectical minimum/maximum values. This is a very simple way
    516                           of 'derating' the incoming LQI as correlation value drops. */
    517                adjLqi = (adjLqi * (corr - LQI_CORR_MIN)) / (LQI_CORR_MAX - LQI_CORR_MIN);
   \   000033   EE           MOV     A,R6
   \   000034   FA           MOV     R2,A
   \   000035   7B00         MOV     R3,#0x0
   \   000037   EA           MOV     A,R2
   \   000038   24CE         ADD     A,#-0x32
   \   00003A   F5..         MOV     ?V0,A
   \   00003C   EB           MOV     A,R3
   \   00003D   34FF         ADDC    A,#-0x1
   \   00003F   F5..         MOV     ?V1,A
   \   000041   E8           MOV     A,R0
   \   000042   85..F0       MOV     B,?V0
   \   000045   A4           MUL     AB
   \   000046   C8           XCH     A,R0
   \   000047   AAF0         MOV     R2,B
   \   000049   85..F0       MOV     B,?V1
   \   00004C   A4           MUL     AB
   \   00004D   2A           ADD     A,R2
   \   00004E   FA           MOV     R2,A
   \   00004F   85..F0       MOV     B,?V0
   \   000052   E9           MOV     A,R1
   \   000053   A4           MUL     AB
   \   000054   2A           ADD     A,R2
   \   000055   F9           MOV     R1,A
   \   000056   7A3C         MOV     R2,#0x3c
   \   000058   7B00         MOV     R3,#0x0
   \   00005A   12....       LCALL   ?US_DIV_MOD
   \   00005D   88..         MOV     ?V0,R0
   \   00005F   89..         MOV     ?V1,R1
   \   000061   A8..         MOV     R0,?V0
   \   000063   A9..         MOV     R1,?V1
    518              }
    519              else if ( lqiAdjMode == LQI_ADJ_MODE2 )
    520              {
    521                /* MODE2 - location for developer to implement a proprietary algorithm */
    522              }
    523          
    524              // Replace incoming LQI with scaled value
    525              *lqi = (adjLqi > 255) ? 255 : (uint8)adjLqi;
   \                     ??ZMacLqiAdjust_3:
   \   000065   C3           CLR     C
   \   000066   E8           MOV     A,R0
   \   000067   9400         SUBB    A,#0x0
   \   000069   E9           MOV     A,R1
   \   00006A   9401         SUBB    A,#0x1
   \   00006C   4004         JC      ??ZMacLqiAdjust_4
   \   00006E   74FF         MOV     A,#-0x1
   \   000070   8001         SJMP    ??ZMacLqiAdjust_5
   \                     ??ZMacLqiAdjust_4:
   \   000072   E8           MOV     A,R0
   \                     ??ZMacLqiAdjust_5:
   \   000073   C0E0         PUSH    A
   \   000075   8C82         MOV     DPL,R4
   \   000077   8D83         MOV     DPH,R5
   \   000079   D0E0         POP     A
   \   00007B   F0           MOVX    @DPTR,A
    526            }
    527          }
   \                     ??ZMacLqiAdjust_0:
   \   00007C   7F02         MOV     R7,#0x2
   \   00007E   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_CbackEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_CbackEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_CbackCheckPending?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_CbackCheckPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacLqiAdjustMode?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacLqiAdjustMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZMacLqiAdjust?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacLqiAdjust

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   MAC_CbackCheckPending
        2      0   -> nwkDB_ReturnIndirectHoldingCnt
      1     24   MAC_CbackEvent
        0     21   -> MAC_MlmeGetReq
        0     21   -> ZMacLqiAdjust
        0     21   -> mac_msg_deallocate
        0     21   -> nwk_broadcastSend
        0     21   -> osal_mem_free
        0     24   -> osal_memcpy
        0     21   -> osal_msg_allocate
        0     21   -> osal_msg_send
      1     31   ZMacLqiAdjust
      2      0   ZMacLqiAdjustMode


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??MAC_CbackCheckPending?relay
       6  ??MAC_CbackEvent?relay
       6  ??ZMacLqiAdjust?relay
       6  ??ZMacLqiAdjustMode?relay
      32  MAC_CbackCheckPending
    1401  MAC_CbackEvent
     129  ZMacLqiAdjust
      28  ZMacLqiAdjustMode
       1  _A_IEN0
       1  lqiAdjMode
       2  pZMac_AppCallback
      17  zmacCBSizeTable

 
 1 590 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
    17 bytes in segment CODE_C
     1 byte  in segment SFR_AN
     3 bytes in segment XDATA_Z
 
 1 631 bytes of CODE  memory
     0 bytes of DATA  memory (+ 1 byte shared)
     3 bytes of XDATA memory

Errors: none
Warnings: none
