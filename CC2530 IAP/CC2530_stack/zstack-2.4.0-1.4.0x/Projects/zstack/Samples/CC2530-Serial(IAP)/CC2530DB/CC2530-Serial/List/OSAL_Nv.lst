###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:42
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\osal\mcu\cc2530\OSAL_Nv.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\osal\mcu\cc2530\OSAL_Nv.c"
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        XLAB -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\OSAL_Nv.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\OSAL_Nv.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\osal\mcu\cc2530\OSAL_Nv.c
      1          /**************************************************************************************************
      2            Filename:       OSAL_Nv.c
      3            Revised:        $Date: 2010-08-19 11:25:03 -0700 (Thu, 19 Aug 2010) $
      4            Revision:       $Revision: 23457 $
      5          
      6            Description:    This module contains the OSAL non-volatile memory functions.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /**************************************************************************************************
     41            Notes:
     42              - A trick buried deep in initPage() requires that the MSB of the NV Item Id is to
     43                be reserved for use by this module.
     44          **************************************************************************************************/
     45          
     46          /*********************************************************************
     47           * INCLUDES
     48           */
     49          
     50          #include "hal_adc.h"
     51          #include "hal_flash.h"
     52          #include "hal_types.h"
     53          #include "OSAL_Nv.h"
     54          #include "ZComDef.h"
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          #define OSAL_NV_PAGE_SIZE       HAL_FLASH_PAGE_SIZE
     61          #define OSAL_NV_PAGES_USED      HAL_NV_PAGE_CNT
     62          #define OSAL_NV_PAGE_BEG        HAL_NV_PAGE_BEG
     63          #define OSAL_NV_PAGE_END       (OSAL_NV_PAGE_BEG + OSAL_NV_PAGES_USED - 1)
     64          
     65          #define OSAL_NV_ACTIVE          0x00
     66          #define OSAL_NV_ERASED          0xFF
     67          #define OSAL_NV_ERASED_ID       0xFFFF
     68          #define OSAL_NV_ZEROED_ID       0x0000
     69          // Reserve MSB of Id to signal a search for the "old" source copy (new write interrupted/failed.)
     70          #define OSAL_NV_SOURCE_ID       0x8000
     71          
     72          // In case pages 0-1 are ever used, define a null page value.
     73          #define OSAL_NV_PAGE_NULL       0
     74          
     75          // In case item Id 0 is ever used, define a null item value.
     76          #define OSAL_NV_ITEM_NULL       0
     77          
     78          #define OSAL_NV_WORD_SIZE       HAL_FLASH_WORD_SIZE
     79          
     80          #define OSAL_NV_PAGE_HDR_OFFSET 0
     81          
     82          #define OSAL_NV_MAX_HOT         3

   \                                 In  segment XDATA_ROM_C, align 1
     83          static const uint16 hotIds[OSAL_NV_MAX_HOT] = {
   \                     hotIds:
   \   000000   8200         DW 130
   \   000002   3A00         DW 58
   \   000004   3B00         DW 59
     84            ZCD_NV_NWKKEY,
     85            ZCD_NV_NWK_ACTIVE_KEY_INFO,
     86            ZCD_NV_NWK_ALTERN_KEY_INFO,
     87          };  
     88          
     89          /*********************************************************************
     90           * MACROS
     91           */
     92          
     93          #define OSAL_NV_CHECK_BUS_VOLTAGE  HalAdcCheckVdd(VDD_MIN_NV)
     94          
     95          #define OSAL_NV_DATA_SIZE( LEN )                      \
     96            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE))) ? \
     97                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))  : \
     98                       ((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE))
     99          
    100          #define OSAL_NV_ITEM_SIZE( LEN )                                         \
    101            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE - OSAL_NV_HDR_SIZE))) ? \
    102                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))                     : \
    103            (((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE) + OSAL_NV_HDR_SIZE))
    104          
    105          #define COMPACT_PAGE_CLEANUP( COM_PG ) st ( \
    106            /* In order to recover from a page compaction that is interrupted,\
    107             * the logic in osal_nv_init() depends upon the following order:\
    108             * 1. State of the target of compaction is changed to ePgInUse.\
    109             * 2. Compacted page is erased.\
    110             */\
    111            setPageUse( pgRes, TRUE );  /* Mark the reserve page as being in use. */\
    112            erasePage( (COM_PG) ); \
    113            \
    114            pgRes = (COM_PG);           /* Set the reserve page to be the newly erased page. */\
    115          )
    116          
    117          /*********************************************************************
    118           * TYPEDEFS
    119           */
    120          
    121          typedef struct
    122          {
    123            uint16 id;
    124            uint16 len;   // Enforce Flash-WORD size on len.
    125            uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
    126            uint16 stat;  // Item status.
    127          } osalNvHdr_t;
    128          // Struct member offsets.
    129          #define OSAL_NV_HDR_ID    0
    130          #define OSAL_NV_HDR_LEN   2
    131          #define OSAL_NV_HDR_CHK   4
    132          #define OSAL_NV_HDR_STAT  6
    133          
    134          #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
    135          #define OSAL_NV_HDR_SIZE  8
    136          #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
    137          
    138          typedef struct
    139          {
    140            uint16 active;
    141            uint16 inUse;
    142            uint16 xfer;
    143            uint16 spare;
    144          } osalNvPgHdr_t;
    145          // Struct member offsets.
    146          #define OSAL_NV_PG_ACTIVE 0
    147          #define OSAL_NV_PG_INUSE  2
    148          #define OSAL_NV_PG_XFER   4
    149          #define OSAL_NV_PG_SPARE  6
    150          
    151          #define OSAL_NV_PAGE_HDR_SIZE  8
    152          #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
    153          
    154          typedef enum
    155          {
    156            eNvXfer,
    157            eNvZero
    158          } eNvHdrEnum;
    159          
    160          typedef enum
    161          {
    162            ePgActive,
    163            ePgInUse,
    164            ePgXfer,
    165            ePgSpare
    166          } ePgHdrEnum;
    167          
    168          /*********************************************************************
    169           * GLOBAL VARIABLES
    170           */
    171          
    172          #ifndef OAD_KEEP_NV_PAGES
    173          // When NV pages are to remain intact during OAD download,
    174          // the image itself should not include NV pages.
    175          #pragma location="ZIGNV_ADDRESS_SPACE"

   \                                 In  segment ZIGNV_ADDRESS_SPACE, align 1
    176          __no_init uint8 _nvBuf[OSAL_NV_PAGES_USED * OSAL_NV_PAGE_SIZE];
   \                     _nvBuf:
   \   000000                DS 12288
    177          #pragma required=_nvBuf
    178          #endif // OAD_KEEP_NV_PAGES
    179          
    180          /*********************************************************************
    181           * LOCAL VARIABLES
    182           */
    183          
    184          // Offset into the page of the first available erased space.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          static uint16 pgOff[OSAL_NV_PAGES_USED];
   \                     pgOff:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
   \   00000C                REQUIRE _nvBuf
    186          
    187          // Count of the bytes lost for the zeroed-out items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          static uint16 pgLost[OSAL_NV_PAGES_USED];
   \                     pgLost:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    189          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          static uint8 pgRes;  // Page reserved for item compacting transfer.
   \                     pgRes:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    191          
    192          // Saving ~100 code bytes to move a uint8* parameter/return value from findItem() to a global.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          static uint8 findPg;
   \                     findPg:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    194          
    195          // NV page and offsets for hot items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          static uint8 hotPg[OSAL_NV_MAX_HOT];
   \                     hotPg:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    197          static uint16 hotOff[OSAL_NV_MAX_HOT];
   \                     hotOff:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    198          
    199          /*********************************************************************
    200           * LOCAL FUNCTIONS
    201           */
    202          
    203          static uint8  initNV( void );
    204          
    205          static void   setPageUse( uint8 pg, uint8 inUse );
    206          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups );
    207          static void   erasePage( uint8 pg );
    208          static uint8  compactPage( uint8 srcPg, uint16 skipId );
    209          
    210          static uint16 findItem( uint16 id );
    211          static uint8  initItem( uint8 flag, uint16 id, uint16 len, void *buf );
    212          static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
    213          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk );
    214          
    215          static uint16 calcChkB( uint16 len, uint8 *buf );
    216          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len );
    217          
    218          static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
    219          static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
    220          static void   writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt );
    221          static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
    222          static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
    223          
    224          static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag );
    225          static uint8  hotItem(uint16 id);
    226          static void   hotItemUpdate(uint8 pg, uint16 off, uint16 id);
    227          
    228          /*********************************************************************
    229           * @fn      initNV
    230           *
    231           * @brief   Initialize the NV flash pages.
    232           *
    233           * @param   none
    234           *
    235           * @return  TRUE
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          static uint8 initNV( void )
   \                     initNV:
    238          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    239            osalNvPgHdr_t pgHdr;
    240            uint8 oldPg = OSAL_NV_PAGE_NULL;
   \   00000A   75..00       MOV     ?V0,#0x0
    241            uint8 findDups = FALSE;
   \   00000D   7F00         MOV     R7,#0x0
    242            uint8 pg;
    243          
    244            pgRes = OSAL_NV_PAGE_NULL;
   \   00000F   90....       MOV     DPTR,#pgRes
   \   000012   7400         MOV     A,#0x0
   \   000014   F0           MOVX    @DPTR,A
    245          
    246            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   000015   7E79         MOV     R6,#0x79
   \                     ??initNV_0:
   \   000017   EE           MOV     A,R6
   \   000018   C3           CLR     C
   \   000019   947F         SUBB    A,#0x7f
   \   00001B   505A         JNC     ??initNV_1
    247            {
    248              HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_HDR_SIZE);
   \   00001D                ; Setup parameters for call to function HalFlashRead
   \   00001D   75..08       MOV     ?V2,#0x8
   \   000020   75..00       MOV     ?V3,#0x0
   \   000023   78..         MOV     R0,#?V2
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   7402         MOV     A,#0x2
   \   00002A   12....       LCALL   ?XSTACK_DISP102_8
   \   00002D   7A00         MOV     R2,#0x0
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   EE           MOV     A,R6
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   000036   7402         MOV     A,#0x2
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
    249          
    250              if ( pgHdr.active == OSAL_NV_ERASED_ID )
   \   00003B   85..82       MOV     DPL,?XSP + 0
   \   00003E   85..83       MOV     DPH,?XSP + 1
   \   000041   E0           MOVX    A,@DPTR
   \   000042   64FF         XRL     A,#0xff
   \   000044   7004         JNZ     ??initNV_2
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   64FF         XRL     A,#0xff
   \                     ??initNV_2:
   \   00004A   7016         JNZ     ??initNV_3
    251              {
    252                if ( pgRes == OSAL_NV_PAGE_NULL )
   \   00004C   90....       MOV     DPTR,#pgRes
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   7007         JNZ     ??initNV_4
    253                {
    254                  pgRes = pg;
   \   000052   EE           MOV     A,R6
   \   000053   90....       MOV     DPTR,#pgRes
   \   000056   F0           MOVX    @DPTR,A
   \   000057   801B         SJMP    ??initNV_5
    255                }
    256                else
    257                {
    258                  setPageUse( pg, TRUE );
   \                     ??initNV_4:
   \   000059                ; Setup parameters for call to function setPageUse
   \   000059   7A01         MOV     R2,#0x1
   \   00005B   EE           MOV     A,R6
   \   00005C   F9           MOV     R1,A
   \   00005D   12....       LCALL   ??setPageUse?relay   ; Banked call to: setPageUse
   \   000060   8012         SJMP    ??initNV_5
    259                }
    260              }
    261              // An Xfer from this page was in progress.
    262              else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
   \                     ??initNV_3:
   \   000062   7404         MOV     A,#0x4
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   E0           MOVX    A,@DPTR
   \   000068   64FF         XRL     A,#0xff
   \   00006A   7004         JNZ     ??initNV_6
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   64FF         XRL     A,#0xff
   \                     ??initNV_6:
   \   000070   6002         JZ      ??initNV_5
    263              {
    264                oldPg = pg;
   \   000072   8E..         MOV     ?V0,R6
    265              }
    266            }
   \                     ??initNV_5:
   \   000074   0E           INC     R6
   \   000075   80A0         SJMP    ??initNV_0
    267          
    268            // If a page compaction was interrupted before the old page was erased.
    269            if ( oldPg != OSAL_NV_PAGE_NULL )
   \                     ??initNV_1:
   \   000077   E5..         MOV     A,?V0
   \   000079   6027         JZ      ??initNV_7
    270            {
    271              /* Interrupted compaction before the target of compaction was put in use;
    272               * so erase the target of compaction and start again.
    273               */
    274              if ( pgRes != OSAL_NV_PAGE_NULL )
   \   00007B   90....       MOV     DPTR,#pgRes
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   6014         JZ      ??initNV_8
    275              {
    276                erasePage( pgRes );
   \   000081                ; Setup parameters for call to function erasePage
   \   000081   90....       MOV     DPTR,#pgRes
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F9           MOV     R1,A
   \   000086   12....       LCALL   ??erasePage?relay    ; Banked call to: erasePage
    277                (void)compactPage( oldPg, OSAL_NV_ITEM_NULL );
   \   000089                ; Setup parameters for call to function compactPage
   \   000089   7A00         MOV     R2,#0x0
   \   00008B   7B00         MOV     R3,#0x0
   \   00008D   A9..         MOV     R1,?V0
   \   00008F   12....       LCALL   ??compactPage?relay  ; Banked call to: compactPage
   \   000092   E9           MOV     A,R1
   \   000093   801B         SJMP    ??initNV_9
    278              }
    279              /* Interrupted compaction after the target of compaction was put in use,
    280               * but before the old page was erased; so erase it now and create a new reserve page.
    281               */
    282              else
    283              {
    284                erasePage( oldPg );
   \                     ??initNV_8:
   \   000095                ; Setup parameters for call to function erasePage
   \   000095   A9..         MOV     R1,?V0
   \   000097   12....       LCALL   ??erasePage?relay    ; Banked call to: erasePage
    285                pgRes = oldPg;
   \   00009A   E5..         MOV     A,?V0
   \   00009C   90....       MOV     DPTR,#pgRes
   \   00009F   F0           MOVX    @DPTR,A
   \   0000A0   800E         SJMP    ??initNV_9
    286              }
    287            }
    288            else if ( pgRes != OSAL_NV_PAGE_NULL )
   \                     ??initNV_7:
   \   0000A2   90....       MOV     DPTR,#pgRes
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   6008         JZ      ??initNV_9
    289            {
    290              erasePage( pgRes );  // The last page erase could have been interrupted by a power-cycle.
   \   0000A8                ; Setup parameters for call to function erasePage
   \   0000A8   90....       MOV     DPTR,#pgRes
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   F9           MOV     R1,A
   \   0000AD   12....       LCALL   ??erasePage?relay    ; Banked call to: erasePage
    291            }
    292            /* else if there is no reserve page, COMPACT_PAGE_CLEANUP() must have succeeded to put the old
    293             * reserve page (i.e. the target of the compacted items) into use but got interrupted by a reset
    294             * while trying to erase the page to be compacted. Such a page should only contain duplicate items
    295             * (i.e. all items will be marked 'Xfer') and thus should have the lost count equal to the page
    296             * size less the page header.
    297             */
    298          
    299            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_9:
   \   0000B0   7E79         MOV     R6,#0x79
   \                     ??initNV_10:
   \   0000B2   EE           MOV     A,R6
   \   0000B3   C3           CLR     C
   \   0000B4   947F         SUBB    A,#0x7f
   \   0000B6   501C         JNC     ??initNV_11
    300            {
    301              // Calculate page offset and lost bytes - any "old" item triggers an N^2 re-scan from start.
    302              if ( initPage( pg, OSAL_NV_ITEM_NULL, findDups ) != OSAL_NV_ITEM_NULL )
   \   0000B8                ; Setup parameters for call to function initPage
   \   0000B8   EF           MOV     A,R7
   \   0000B9   FC           MOV     R4,A
   \   0000BA   7A00         MOV     R2,#0x0
   \   0000BC   7B00         MOV     R3,#0x0
   \   0000BE   EE           MOV     A,R6
   \   0000BF   F9           MOV     R1,A
   \   0000C0   12....       LCALL   ??initPage?relay     ; Banked call to: initPage
   \   0000C3   8A..         MOV     ?V2,R2
   \   0000C5   8B..         MOV     ?V3,R3
   \   0000C7   E5..         MOV     A,?V2
   \   0000C9   45..         ORL     A,?V3
   \   0000CB   6004         JZ      ??initNV_12
    303              {
    304                findDups = TRUE;
   \   0000CD   7F01         MOV     R7,#0x1
    305                pg = (OSAL_NV_PAGE_BEG - 1);  // Pre-decrement so that loop increment will start over at zero.
   \   0000CF   7E78         MOV     R6,#0x78
    306                continue;
    307              }
    308            }
   \                     ??initNV_12:
   \   0000D1   0E           INC     R6
   \   0000D2   80DE         SJMP    ??initNV_10
    309          
    310            if (findDups)
   \                     ??initNV_11:
   \   0000D4   EF           MOV     A,R7
   \   0000D5   601E         JZ      ??initNV_13
    311            {
    312              // Final pass to calculate page lost after invalidating duplicate items.
    313              for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   0000D7   7E79         MOV     R6,#0x79
   \                     ??initNV_14:
   \   0000D9   EE           MOV     A,R6
   \   0000DA   C3           CLR     C
   \   0000DB   947F         SUBB    A,#0x7f
   \   0000DD   5016         JNC     ??initNV_13
    314              {
    315                (void)initPage( pg, OSAL_NV_ITEM_NULL, FALSE );
   \   0000DF                ; Setup parameters for call to function initPage
   \   0000DF   7C00         MOV     R4,#0x0
   \   0000E1   7A00         MOV     R2,#0x0
   \   0000E3   7B00         MOV     R3,#0x0
   \   0000E5   EE           MOV     A,R6
   \   0000E6   F9           MOV     R1,A
   \   0000E7   12....       LCALL   ??initPage?relay     ; Banked call to: initPage
   \   0000EA   8A..         MOV     ?V2,R2
   \   0000EC   8B..         MOV     ?V3,R3
   \   0000EE   A8..         MOV     R0,?V2
   \   0000F0   A9..         MOV     R1,?V3
    316              }
   \   0000F2   0E           INC     R6
   \   0000F3   80E4         SJMP    ??initNV_14
    317            }
    318          
    319            if ( pgRes == OSAL_NV_PAGE_NULL )
   \                     ??initNV_13:
   \   0000F5   90....       MOV     DPTR,#pgRes
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   6003         JZ      $+5
   \   0000FB   02....       LJMP    ??initNV_15 & 0xFFFF
    320            {
    321              uint8 idx, mostLost = 0;
   \   0000FE   75..00       MOV     ?V1,#0x0
    322          
    323              for ( idx = 0; idx < OSAL_NV_PAGES_USED; idx++ )
   \   000101   75..00       MOV     ?V2,#0x0
   \                     ??initNV_16:
   \   000104   E5..         MOV     A,?V2
   \   000106   C3           CLR     C
   \   000107   9406         SUBB    A,#0x6
   \   000109   4003         JC      $+5
   \   00010B   02....       LJMP    ??initNV_17 & 0xFFFF
    324              {
    325                // Is this the page that was compacted?
    326                if (pgLost[idx] == (OSAL_NV_PAGE_SIZE - OSAL_NV_PAGE_HDR_SIZE))
   \   00010E   A8..         MOV     R0,?V2
   \   000110   7900         MOV     R1,#0x0
   \   000112   E8           MOV     A,R0
   \   000113   75F002       MOV     B,#0x2
   \   000116   A4           MUL     AB
   \   000117   C8           XCH     A,R0
   \   000118   AAF0         MOV     R2,B
   \   00011A   75F000       MOV     B,#0x0
   \   00011D   A4           MUL     AB
   \   00011E   2A           ADD     A,R2
   \   00011F   FA           MOV     R2,A
   \   000120   75F002       MOV     B,#0x2
   \   000123   E9           MOV     A,R1
   \   000124   A4           MUL     AB
   \   000125   2A           ADD     A,R2
   \   000126   F9           MOV     R1,A
   \   000127   74..         MOV     A,#pgLost & 0xff
   \   000129   28           ADD     A,R0
   \   00012A   F582         MOV     DPL,A
   \   00012C   74..         MOV     A,#(pgLost >> 8) & 0xff
   \   00012E   39           ADDC    A,R1
   \   00012F   F583         MOV     DPH,A
   \   000131   E0           MOVX    A,@DPTR
   \   000132   64F8         XRL     A,#0xf8
   \   000134   7004         JNZ     ??initNV_18
   \   000136   A3           INC     DPTR
   \   000137   E0           MOVX    A,@DPTR
   \   000138   6407         XRL     A,#0x7
   \                     ??initNV_18:
   \   00013A   7005         JNZ     ??initNV_19
    327                {
    328                  mostLost = idx;
   \   00013C   85....       MOV     ?V1,?V2
    329                  break;
   \   00013F   8063         SJMP    ??initNV_17
    330                }
    331                /* This check is not expected to be necessary because the above test should always succeed
    332                 * with an early loop exit.
    333                 */
    334                else if (pgLost[idx] > pgLost[mostLost]) 
   \                     ??initNV_19:
   \   000141   A8..         MOV     R0,?V1
   \   000143   7900         MOV     R1,#0x0
   \   000145   E8           MOV     A,R0
   \   000146   75F002       MOV     B,#0x2
   \   000149   A4           MUL     AB
   \   00014A   C8           XCH     A,R0
   \   00014B   AAF0         MOV     R2,B
   \   00014D   75F000       MOV     B,#0x0
   \   000150   A4           MUL     AB
   \   000151   2A           ADD     A,R2
   \   000152   FA           MOV     R2,A
   \   000153   75F002       MOV     B,#0x2
   \   000156   E9           MOV     A,R1
   \   000157   A4           MUL     AB
   \   000158   2A           ADD     A,R2
   \   000159   F9           MOV     R1,A
   \   00015A   74..         MOV     A,#pgLost & 0xff
   \   00015C   28           ADD     A,R0
   \   00015D   F582         MOV     DPL,A
   \   00015F   74..         MOV     A,#(pgLost >> 8) & 0xff
   \   000161   39           ADDC    A,R1
   \   000162   F583         MOV     DPH,A
   \   000164   C082         PUSH    DPL
   \   000166   C083         PUSH    DPH
   \   000168   A8..         MOV     R0,?V2
   \   00016A   7900         MOV     R1,#0x0
   \   00016C   E8           MOV     A,R0
   \   00016D   75F002       MOV     B,#0x2
   \   000170   A4           MUL     AB
   \   000171   C8           XCH     A,R0
   \   000172   AAF0         MOV     R2,B
   \   000174   75F000       MOV     B,#0x0
   \   000177   A4           MUL     AB
   \   000178   2A           ADD     A,R2
   \   000179   FA           MOV     R2,A
   \   00017A   75F002       MOV     B,#0x2
   \   00017D   E9           MOV     A,R1
   \   00017E   A4           MUL     AB
   \   00017F   2A           ADD     A,R2
   \   000180   F9           MOV     R1,A
   \   000181   74..         MOV     A,#pgLost & 0xff
   \   000183   28           ADD     A,R0
   \   000184   F582         MOV     DPL,A
   \   000186   74..         MOV     A,#(pgLost >> 8) & 0xff
   \   000188   39           ADDC    A,R1
   \   000189   F583         MOV     DPH,A
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   F8           MOV     R0,A
   \   00018D   A3           INC     DPTR
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   F9           MOV     R1,A
   \   000190   D083         POP     DPH
   \   000192   D082         POP     DPL
   \   000194   C3           CLR     C
   \   000195   E0           MOVX    A,@DPTR
   \   000196   98           SUBB    A,R0
   \   000197   A3           INC     DPTR
   \   000198   E0           MOVX    A,@DPTR
   \   000199   99           SUBB    A,R1
   \   00019A   5003         JNC     ??initNV_20
    335                {
    336                  mostLost = idx;
   \   00019C   85....       MOV     ?V1,?V2
    337                }
    338              }
   \                     ??initNV_20:
   \   00019F   05..         INC     ?V2
   \   0001A1   02....       LJMP    ??initNV_16 & 0xFFFF
    339          
    340              pgRes = mostLost + OSAL_NV_PAGE_BEG;
   \                     ??initNV_17:
   \   0001A4   7479         MOV     A,#0x79
   \   0001A6   25..         ADD     A,?V1
   \   0001A8   90....       MOV     DPTR,#pgRes
   \   0001AB   F0           MOVX    @DPTR,A
    341              erasePage( pgRes );  // The last page erase had been interrupted by a power-cycle.
   \   0001AC                ; Setup parameters for call to function erasePage
   \   0001AC   90....       MOV     DPTR,#pgRes
   \   0001AF   E0           MOVX    A,@DPTR
   \   0001B0   F9           MOV     R1,A
   \   0001B1   12....       LCALL   ??erasePage?relay    ; Banked call to: erasePage
    342            }
    343          
    344            return TRUE;
   \                     ??initNV_15:
   \   0001B4   7901         MOV     R1,#0x1
   \   0001B6   7408         MOV     A,#0x8
   \   0001B8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001BB   7F04         MOV     R7,#0x4
   \   0001BD   02....       LJMP    ?BANKED_LEAVE_XDATA
    345          }
    346          
    347          /*********************************************************************
    348           * @fn      setPageUse
    349           *
    350           * @brief   Set page header active/inUse state according to 'inUse'.
    351           *
    352           * @param   pg - Valid NV page to verify and init.
    353           * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
    354           *
    355           * @return  none
    356           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    357          static void setPageUse( uint8 pg, uint8 inUse )
   \                     setPageUse:
    358          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    359            osalNvPgHdr_t pgHdr;
    360          
    361            pgHdr.active = OSAL_NV_ZEROED_ID;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   7400         MOV     A,#0x0
   \   00001A   F0           MOVX    @DPTR,A
    362          
    363            if ( inUse )
   \   00001B   EF           MOV     A,R7
   \   00001C   600E         JZ      ??setPageUse_0
    364            {
    365              pgHdr.inUse = OSAL_NV_ZEROED_ID;
   \   00001E   7402         MOV     A,#0x2
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   7400         MOV     A,#0x0
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   7400         MOV     A,#0x0
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   800C         SJMP    ??setPageUse_1
    366            }
    367            else
    368            {
    369              pgHdr.inUse = OSAL_NV_ERASED_ID;
   \                     ??setPageUse_0:
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   74FF         MOV     A,#-0x1
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   74FF         MOV     A,#-0x1
   \   000037   F0           MOVX    @DPTR,A
    370            }
    371          
    372            writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
   \                     ??setPageUse_1:
   \   000038                ; Setup parameters for call to function writeWord
   \   000038   AC..         MOV     R4,?XSP + 0
   \   00003A   AD..         MOV     R5,?XSP + 1
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   EE           MOV     A,R6
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   ??writeWord?relay    ; Banked call to: writeWord
    373          }
   \   000045   7408         MOV     A,#0x8
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004A   7F01         MOV     R7,#0x1
   \   00004C   02....       LJMP    ?BANKED_LEAVE_XDATA
    374          
    375          /*********************************************************************
    376           * @fn      initPage
    377           *
    378           * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
    379           *
    380           * @param   pg - Valid NV page to verify and init.
    381           * @param   id - Valid NV item Id to use function as a "findItem".
    382           *               If set to NULL then just perform the page initialization.
    383           * @param   findDups - TRUE on recursive call from initNV() to find and zero-out duplicate items
    384           *                     left from a write that is interrupted by a reset/power-cycle.
    385           *                     FALSE otherwise.
    386           *
    387           * @return  If 'id' is non-NULL and good checksums are found, return the offset
    388           *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
    389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    390          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups )
   \                     initPage:
    391          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   89..         MOV     ?V6,R1
   \   000017   8C..         MOV     ?V7,R4
    392            uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
   \   000019   75..08       MOV     ?V2,#0x8
   \   00001C   75..00       MOV     ?V3,#0x0
    393            uint16 sz, lost = 0;
   \   00001F   75..00       MOV     ?V0,#0x0
   \   000022   75..00       MOV     ?V1,#0x0
    394            osalNvHdr_t hdr;
    395          
    396            do
    397            {
    398              HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??initPage_0:
   \   000025                ; Setup parameters for call to function HalFlashRead
   \   000025   75..08       MOV     ?V4,#0x8
   \   000028   75..00       MOV     ?V5,#0x0
   \   00002B   78..         MOV     R0,#?V4
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   7406         MOV     A,#0x6
   \   000032   12....       LCALL   ?XSTACK_DISP102_8
   \   000035   AA..         MOV     R2,?V2
   \   000037   AB..         MOV     R3,?V3
   \   000039   A9..         MOV     R1,?V6
   \   00003B   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   00003E   7402         MOV     A,#0x2
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
    399          
    400              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   64FF         XRL     A,#0xff
   \   00004B   7004         JNZ     ??initPage_1
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   64FF         XRL     A,#0xff
   \                     ??initPage_1:
   \   000051   7003         JNZ     $+5
   \   000053   02....       LJMP    ??initPage_2 & 0xFFFF
    401              {
    402                break;
    403              }
    404          
    405              // Get the actual size in bytes which is the ceiling(hdr.len)
    406              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   000056   7406         MOV     A,#0x6
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   C3           CLR     C
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   94FC         SUBB    A,#-0x4
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   94FF         SUBB    A,#-0x1
   \   000063   4006         JC      ??initPage_3
   \   000065   7EFC         MOV     R6,#-0x4
   \   000067   7FFF         MOV     R7,#-0x1
   \   000069   8030         SJMP    ??initPage_4
   \                     ??initPage_3:
   \   00006B   7406         MOV     A,#0x6
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   E0           MOVX    A,@DPTR
   \   000071   2403         ADD     A,#0x3
   \   000073   F5..         MOV     ?V4,A
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   3400         ADDC    A,#0x0
   \   000079   F5..         MOV     ?V5,A
   \   00007B   7402         MOV     A,#0x2
   \   00007D   78..         MOV     R0,#?V4
   \   00007F   12....       LCALL   ?US_SHR
   \   000082   AE..         MOV     R6,?V4
   \   000084   AF..         MOV     R7,?V5
   \   000086   EE           MOV     A,R6
   \   000087   75F004       MOV     B,#0x4
   \   00008A   A4           MUL     AB
   \   00008B   CE           XCH     A,R6
   \   00008C   A8F0         MOV     R0,B
   \   00008E   75F000       MOV     B,#0x0
   \   000091   A4           MUL     AB
   \   000092   28           ADD     A,R0
   \   000093   F8           MOV     R0,A
   \   000094   75F004       MOV     B,#0x4
   \   000097   EF           MOV     A,R7
   \   000098   A4           MUL     AB
   \   000099   28           ADD     A,R0
   \   00009A   FF           MOV     R7,A
    407          
    408              // A bad 'len' write has blown away the rest of the page.
    409              if (sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - offset))
   \                     ??initPage_4:
   \   00009B   74F8         MOV     A,#-0x8
   \   00009D   C3           CLR     C
   \   00009E   95..         SUBB    A,?V2
   \   0000A0   F8           MOV     R0,A
   \   0000A1   7407         MOV     A,#0x7
   \   0000A3   95..         SUBB    A,?V3
   \   0000A5   F9           MOV     R1,A
   \   0000A6   C3           CLR     C
   \   0000A7   E8           MOV     A,R0
   \   0000A8   9E           SUBB    A,R6
   \   0000A9   E9           MOV     A,R1
   \   0000AA   9F           SUBB    A,R7
   \   0000AB   501E         JNC     ??initPage_5
    410              {
    411                lost += (OSAL_NV_PAGE_SIZE - offset);
   \   0000AD   E5..         MOV     A,?V0
   \   0000AF   2400         ADD     A,#0x0
   \   0000B1   F8           MOV     R0,A
   \   0000B2   E5..         MOV     A,?V1
   \   0000B4   3408         ADDC    A,#0x8
   \   0000B6   F9           MOV     R1,A
   \   0000B7   E8           MOV     A,R0
   \   0000B8   C3           CLR     C
   \   0000B9   95..         SUBB    A,?V2
   \   0000BB   F5..         MOV     ?V0,A
   \   0000BD   E9           MOV     A,R1
   \   0000BE   95..         SUBB    A,?V3
   \   0000C0   F5..         MOV     ?V1,A
    412                offset = OSAL_NV_PAGE_SIZE;
   \   0000C2   75..00       MOV     ?V2,#0x0
   \   0000C5   75..08       MOV     ?V3,#0x8
    413                break;
   \   0000C8   02....       LJMP    ??initPage_2 & 0xFFFF
    414              }
    415          
    416              offset += OSAL_NV_HDR_SIZE;
   \                     ??initPage_5:
   \   0000CB   E5..         MOV     A,?V2
   \   0000CD   2408         ADD     A,#0x8
   \   0000CF   F5..         MOV     ?V2,A
   \   0000D1   E5..         MOV     A,?V3
   \   0000D3   3400         ADDC    A,#0x0
   \   0000D5   F5..         MOV     ?V3,A
    417          
    418              if ( hdr.id != OSAL_NV_ZEROED_ID )
   \   0000D7   7404         MOV     A,#0x4
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   F8           MOV     R0,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   F9           MOV     R1,A
   \   0000E1   E8           MOV     A,R0
   \   0000E2   49           ORL     A,R1
   \   0000E3   7003         JNZ     $+5
   \   0000E5   02....       LJMP    ??initPage_6 & 0xFFFF
    419              {
    420                /* This trick allows function to do double duty for findItem() without
    421                 * compromising its essential functionality at powerup initialization.
    422                 */
    423                if ( id != OSAL_NV_ITEM_NULL )
   \   0000E8   85..82       MOV     DPL,?XSP + 0
   \   0000EB   85..83       MOV     DPH,?XSP + 1
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F8           MOV     R0,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   F9           MOV     R1,A
   \   0000F3   E8           MOV     A,R0
   \   0000F4   49           ORL     A,R1
   \   0000F5   6073         JZ      ??initPage_7
    424                {
    425                  /* This trick allows asking to find the old/transferred item in case
    426                   * of a successful new item write that gets interrupted before the
    427                   * old item can be zeroed out.
    428                   */
    429                  if ( (id & 0x7fff) == hdr.id )
   \   0000F7   85..82       MOV     DPL,?XSP + 0
   \   0000FA   85..83       MOV     DPH,?XSP + 1
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   54FF         ANL     A,#0xff
   \   000100   F8           MOV     R0,A
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   547F         ANL     A,#0x7f
   \   000105   F9           MOV     R1,A
   \   000106   7404         MOV     A,#0x4
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   68           XRL     A,R0
   \   00010D   7003         JNZ     ??initPage_8
   \   00010F   A3           INC     DPTR
   \   000110   E0           MOVX    A,@DPTR
   \   000111   69           XRL     A,R1
   \                     ??initPage_8:
   \   000112   6003         JZ      $+5
   \   000114   02....       LJMP    ??initPage_9 & 0xFFFF
    430                  {
    431                    if ( (((id & OSAL_NV_SOURCE_ID) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
    432                         (((id & OSAL_NV_SOURCE_ID) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
   \   000117   85..82       MOV     DPL,?XSP + 0
   \   00011A   85..83       MOV     DPH,?XSP + 1
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   5400         ANL     A,#0x0
   \   000120   F8           MOV     R0,A
   \   000121   A3           INC     DPTR
   \   000122   E0           MOVX    A,@DPTR
   \   000123   5480         ANL     A,#0x80
   \   000125   F9           MOV     R1,A
   \   000126   E8           MOV     A,R0
   \   000127   49           ORL     A,R1
   \   000128   7010         JNZ     ??initPage_10
   \   00012A   740A         MOV     A,#0xa
   \   00012C   12....       LCALL   ?XSTACK_DISP0_8
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   64FF         XRL     A,#0xff
   \   000132   7004         JNZ     ??initPage_11
   \   000134   A3           INC     DPTR
   \   000135   E0           MOVX    A,@DPTR
   \   000136   64FF         XRL     A,#0xff
   \                     ??initPage_11:
   \   000138   6029         JZ      ??initPage_12
   \                     ??initPage_10:
   \   00013A   85..82       MOV     DPL,?XSP + 0
   \   00013D   85..83       MOV     DPH,?XSP + 1
   \   000140   E0           MOVX    A,@DPTR
   \   000141   5400         ANL     A,#0x0
   \   000143   F8           MOV     R0,A
   \   000144   A3           INC     DPTR
   \   000145   E0           MOVX    A,@DPTR
   \   000146   5480         ANL     A,#0x80
   \   000148   F9           MOV     R1,A
   \   000149   E8           MOV     A,R0
   \   00014A   49           ORL     A,R1
   \   00014B   7003         JNZ     $+5
   \   00014D   02....       LJMP    ??initPage_9 & 0xFFFF
   \   000150   740A         MOV     A,#0xa
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   E0           MOVX    A,@DPTR
   \   000156   64FF         XRL     A,#0xff
   \   000158   7004         JNZ     ??initPage_13
   \   00015A   A3           INC     DPTR
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   64FF         XRL     A,#0xff
   \                     ??initPage_13:
   \   00015E   7003         JNZ     $+5
   \   000160   02....       LJMP    ??initPage_9 & 0xFFFF
    433                    {
    434                      return offset;
   \                     ??initPage_12:
   \   000163   AA..         MOV     R2,?V2
   \   000165   AB..         MOV     R3,?V3
   \   000167   02....       LJMP    ??initPage_14 & 0xFFFF
    435                    }
    436                  }
    437                }
    438                // When invoked from the osal_nv_init(), verify checksums and find & zero any duplicates.
    439                else
    440                {
    441                  if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
   \                     ??initPage_7:
   \   00016A                ; Setup parameters for call to function calcChkF
   \   00016A   7406         MOV     A,#0x6
   \   00016C   12....       LCALL   ?XSTACK_DISP0_8
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   FC           MOV     R4,A
   \   000171   A3           INC     DPTR
   \   000172   E0           MOVX    A,@DPTR
   \   000173   FD           MOV     R5,A
   \   000174   AA..         MOV     R2,?V2
   \   000176   AB..         MOV     R3,?V3
   \   000178   A9..         MOV     R1,?V6
   \   00017A   12....       LCALL   ??calcChkF?relay     ; Banked call to: calcChkF
   \   00017D   8A..         MOV     ?V4,R2
   \   00017F   8B..         MOV     ?V5,R3
   \   000181   A8..         MOV     R0,?V4
   \   000183   A9..         MOV     R1,?V5
   \   000185   7408         MOV     A,#0x8
   \   000187   12....       LCALL   ?XSTACK_DISP0_8
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   68           XRL     A,R0
   \   00018C   7003         JNZ     ??initPage_15
   \   00018E   A3           INC     DPTR
   \   00018F   E0           MOVX    A,@DPTR
   \   000190   69           XRL     A,R1
   \                     ??initPage_15:
   \   000191   706D         JNZ     ??initPage_16
    442                  {
    443                    if ( findDups )
   \   000193   E5..         MOV     A,?V7
   \   000195   6052         JZ      ??initPage_17
    444                    {
    445                      if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   000197   740A         MOV     A,#0xa
   \   000199   12....       LCALL   ?XSTACK_DISP0_8
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   64FF         XRL     A,#0xff
   \   00019F   7004         JNZ     ??initPage_18
   \   0001A1   A3           INC     DPTR
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   64FF         XRL     A,#0xff
   \                     ??initPage_18:
   \   0001A5   6003         JZ      $+5
   \   0001A7   02....       LJMP    ??initPage_9 & 0xFFFF
    446                      {
    447                        /* The trick of setting the MSB of the item Id causes the logic
    448                         * immediately above to return a valid page only if the header 'stat'
    449                         * indicates that it was the older item being transferred.
    450                         */
    451                        uint16 off = findItem( (hdr.id | OSAL_NV_SOURCE_ID) );
   \   0001AA                ; Setup parameters for call to function findItem
   \   0001AA   7404         MOV     A,#0x4
   \   0001AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AF   E0           MOVX    A,@DPTR
   \   0001B0   4400         ORL     A,#0x0
   \   0001B2   FA           MOV     R2,A
   \   0001B3   A3           INC     DPTR
   \   0001B4   E0           MOVX    A,@DPTR
   \   0001B5   4480         ORL     A,#0x80
   \   0001B7   FB           MOV     R3,A
   \   0001B8   12....       LCALL   ??findItem?relay     ; Banked call to: findItem
   \   0001BB   7402         MOV     A,#0x2
   \   0001BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C0   EA           MOV     A,R2
   \   0001C1   F0           MOVX    @DPTR,A
   \   0001C2   A3           INC     DPTR
   \   0001C3   EB           MOV     A,R3
   \   0001C4   F0           MOVX    @DPTR,A
    452          
    453                        if ( off != OSAL_NV_ITEM_NULL )
   \   0001C5   7402         MOV     A,#0x2
   \   0001C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CA   E0           MOVX    A,@DPTR
   \   0001CB   F8           MOV     R0,A
   \   0001CC   A3           INC     DPTR
   \   0001CD   E0           MOVX    A,@DPTR
   \   0001CE   F9           MOV     R1,A
   \   0001CF   E8           MOV     A,R0
   \   0001D0   49           ORL     A,R1
   \   0001D1   605C         JZ      ??initPage_9
    454                        {
    455                          setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
   \   0001D3                ; Setup parameters for call to function setItem
   \   0001D3   7C01         MOV     R4,#0x1
   \   0001D5   7402         MOV     A,#0x2
   \   0001D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DA   E0           MOVX    A,@DPTR
   \   0001DB   FA           MOV     R2,A
   \   0001DC   A3           INC     DPTR
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   FB           MOV     R3,A
   \   0001DF   90....       MOV     DPTR,#findPg
   \   0001E2   E0           MOVX    A,@DPTR
   \   0001E3   F9           MOV     R1,A
   \   0001E4   12....       LCALL   ??setItem?relay      ; Banked call to: setItem
   \   0001E7   8046         SJMP    ??initPage_9
    456                        }
    457                      }
    458                    }
    459                    // Any "old" item immediately exits and triggers the N^2 exhaustive initialization.
    460                    else if ( hdr.stat != OSAL_NV_ERASED_ID )
   \                     ??initPage_17:
   \   0001E9   740A         MOV     A,#0xa
   \   0001EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EE   E0           MOVX    A,@DPTR
   \   0001EF   64FF         XRL     A,#0xff
   \   0001F1   7004         JNZ     ??initPage_19
   \   0001F3   A3           INC     DPTR
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   64FF         XRL     A,#0xff
   \                     ??initPage_19:
   \   0001F7   6036         JZ      ??initPage_9
    461                    {
    462                      return OSAL_NV_ERASED_ID;
   \   0001F9   7AFF         MOV     R2,#-0x1
   \   0001FB   7BFF         MOV     R3,#-0x1
   \   0001FD   02....       LJMP    ??initPage_14 & 0xFFFF
    463                    }
    464                  }
    465                  else
    466                  {
    467                    setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
   \                     ??initPage_16:
   \   000200                ; Setup parameters for call to function setItem
   \   000200   7C01         MOV     R4,#0x1
   \   000202   AA..         MOV     R2,?V2
   \   000204   AB..         MOV     R3,?V3
   \   000206   A9..         MOV     R1,?V6
   \   000208   12....       LCALL   ??setItem?relay      ; Banked call to: setItem
    468                    lost += (OSAL_NV_HDR_SIZE + sz);
   \   00020B   EE           MOV     A,R6
   \   00020C   2408         ADD     A,#0x8
   \   00020E   F8           MOV     R0,A
   \   00020F   E4           CLR     A
   \   000210   3F           ADDC    A,R7
   \   000211   F9           MOV     R1,A
   \   000212   E5..         MOV     A,?V0
   \   000214   28           ADD     A,R0
   \   000215   F5..         MOV     ?V0,A
   \   000217   E5..         MOV     A,?V1
   \   000219   39           ADDC    A,R1
   \   00021A   F5..         MOV     ?V1,A
   \   00021C   8011         SJMP    ??initPage_9
    469                  }
    470                }
    471              }
    472              else
    473              {
    474                lost += (OSAL_NV_HDR_SIZE + sz);
   \                     ??initPage_6:
   \   00021E   EE           MOV     A,R6
   \   00021F   2408         ADD     A,#0x8
   \   000221   F8           MOV     R0,A
   \   000222   E4           CLR     A
   \   000223   3F           ADDC    A,R7
   \   000224   F9           MOV     R1,A
   \   000225   E5..         MOV     A,?V0
   \   000227   28           ADD     A,R0
   \   000228   F5..         MOV     ?V0,A
   \   00022A   E5..         MOV     A,?V1
   \   00022C   39           ADDC    A,R1
   \   00022D   F5..         MOV     ?V1,A
    475              }
    476              offset += sz;
   \                     ??initPage_9:
   \   00022F   E5..         MOV     A,?V2
   \   000231   2E           ADD     A,R6
   \   000232   F5..         MOV     ?V2,A
   \   000234   E5..         MOV     A,?V3
   \   000236   3F           ADDC    A,R7
   \   000237   F5..         MOV     ?V3,A
    477          
    478            } while (offset < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE));
   \   000239   C3           CLR     C
   \   00023A   E5..         MOV     A,?V2
   \   00023C   94F8         SUBB    A,#-0x8
   \   00023E   E5..         MOV     A,?V3
   \   000240   9407         SUBB    A,#0x7
   \   000242   5003         JNC     $+5
   \   000244   02....       LJMP    ??initPage_0 & 0xFFFF
    479          
    480            pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
   \                     ??initPage_2:
   \   000247   A8..         MOV     R0,?V6
   \   000249   7900         MOV     R1,#0x0
   \   00024B   E8           MOV     A,R0
   \   00024C   75F002       MOV     B,#0x2
   \   00024F   A4           MUL     AB
   \   000250   C8           XCH     A,R0
   \   000251   AAF0         MOV     R2,B
   \   000253   75F000       MOV     B,#0x0
   \   000256   A4           MUL     AB
   \   000257   2A           ADD     A,R2
   \   000258   FA           MOV     R2,A
   \   000259   75F002       MOV     B,#0x2
   \   00025C   E9           MOV     A,R1
   \   00025D   A4           MUL     AB
   \   00025E   2A           ADD     A,R2
   \   00025F   F9           MOV     R1,A
   \   000260   74..         MOV     A,#(pgOff + 14) & 0xff
   \   000262   28           ADD     A,R0
   \   000263   F582         MOV     DPL,A
   \   000265   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   000267   39           ADDC    A,R1
   \   000268   F583         MOV     DPH,A
   \   00026A   E5..         MOV     A,?V2
   \   00026C   F0           MOVX    @DPTR,A
   \   00026D   A3           INC     DPTR
   \   00026E   E5..         MOV     A,?V3
   \   000270   F0           MOVX    @DPTR,A
    481            pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
   \   000271   A8..         MOV     R0,?V6
   \   000273   7900         MOV     R1,#0x0
   \   000275   E8           MOV     A,R0
   \   000276   75F002       MOV     B,#0x2
   \   000279   A4           MUL     AB
   \   00027A   C8           XCH     A,R0
   \   00027B   AAF0         MOV     R2,B
   \   00027D   75F000       MOV     B,#0x0
   \   000280   A4           MUL     AB
   \   000281   2A           ADD     A,R2
   \   000282   FA           MOV     R2,A
   \   000283   75F002       MOV     B,#0x2
   \   000286   E9           MOV     A,R1
   \   000287   A4           MUL     AB
   \   000288   2A           ADD     A,R2
   \   000289   F9           MOV     R1,A
   \   00028A   74..         MOV     A,#(pgLost + 14) & 0xff
   \   00028C   28           ADD     A,R0
   \   00028D   F582         MOV     DPL,A
   \   00028F   74..         MOV     A,#((pgLost - 242) >> 8) & 0xff
   \   000291   39           ADDC    A,R1
   \   000292   F583         MOV     DPH,A
   \   000294   E5..         MOV     A,?V0
   \   000296   F0           MOVX    @DPTR,A
   \   000297   A3           INC     DPTR
   \   000298   E5..         MOV     A,?V1
   \   00029A   F0           MOVX    @DPTR,A
    482          
    483            return OSAL_NV_ITEM_NULL;
   \   00029B   7A00         MOV     R2,#0x0
   \   00029D   7B00         MOV     R3,#0x0
   \                     ??initPage_14:
   \   00029F   740C         MOV     A,#0xc
   \   0002A1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002A4   7F08         MOV     R7,#0x8
   \   0002A6   02....       LJMP    ?BANKED_LEAVE_XDATA
    484          }
    485          
    486          /*********************************************************************
    487           * @fn      erasePage
    488           *
    489           * @brief   Erases a page in Flash.
    490           *
    491           * @param   pg - Valid NV page to erase.
    492           *
    493           * @return  none
    494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          static void erasePage( uint8 pg )
   \                     erasePage:
    496          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    497            HalFlashErase(pg);
   \   000007                ; Setup parameters for call to function HalFlashErase
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   ??HalFlashErase?relay; Banked call to: HalFlashErase
    498          
    499            pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
   \   00000C   EE           MOV     A,R6
   \   00000D   F8           MOV     R0,A
   \   00000E   7900         MOV     R1,#0x0
   \   000010   E8           MOV     A,R0
   \   000011   75F002       MOV     B,#0x2
   \   000014   A4           MUL     AB
   \   000015   C8           XCH     A,R0
   \   000016   AAF0         MOV     R2,B
   \   000018   75F000       MOV     B,#0x0
   \   00001B   A4           MUL     AB
   \   00001C   2A           ADD     A,R2
   \   00001D   FA           MOV     R2,A
   \   00001E   75F002       MOV     B,#0x2
   \   000021   E9           MOV     A,R1
   \   000022   A4           MUL     AB
   \   000023   2A           ADD     A,R2
   \   000024   F9           MOV     R1,A
   \   000025   74..         MOV     A,#(pgOff + 14) & 0xff
   \   000027   28           ADD     A,R0
   \   000028   F582         MOV     DPL,A
   \   00002A   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   00002C   39           ADDC    A,R1
   \   00002D   F583         MOV     DPH,A
   \   00002F   7408         MOV     A,#0x8
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   7400         MOV     A,#0x0
   \   000035   F0           MOVX    @DPTR,A
    500            pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
   \   000036   EE           MOV     A,R6
   \   000037   F8           MOV     R0,A
   \   000038   7900         MOV     R1,#0x0
   \   00003A   E8           MOV     A,R0
   \   00003B   75F002       MOV     B,#0x2
   \   00003E   A4           MUL     AB
   \   00003F   C8           XCH     A,R0
   \   000040   AAF0         MOV     R2,B
   \   000042   75F000       MOV     B,#0x0
   \   000045   A4           MUL     AB
   \   000046   2A           ADD     A,R2
   \   000047   FA           MOV     R2,A
   \   000048   75F002       MOV     B,#0x2
   \   00004B   E9           MOV     A,R1
   \   00004C   A4           MUL     AB
   \   00004D   2A           ADD     A,R2
   \   00004E   F9           MOV     R1,A
   \   00004F   74..         MOV     A,#(pgLost + 14) & 0xff
   \   000051   28           ADD     A,R0
   \   000052   F582         MOV     DPL,A
   \   000054   74..         MOV     A,#((pgLost - 242) >> 8) & 0xff
   \   000056   39           ADDC    A,R1
   \   000057   F583         MOV     DPH,A
   \   000059   7400         MOV     A,#0x0
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \   00005D   7400         MOV     A,#0x0
   \   00005F   F0           MOVX    @DPTR,A
    501          }
   \   000060   7F01         MOV     R7,#0x1
   \   000062   02....       LJMP    ?BANKED_LEAVE_XDATA
    502          
    503          /*********************************************************************
    504           * @fn      compactPage
    505           *
    506           * @brief   Compacts the page specified.
    507           *
    508           * @param   srcPg - Valid NV page to erase.
    509           * @param   skipId - Item Id to not compact.
    510           *
    511           * @return  TRUE if valid items from 'srcPg' are successully compacted onto the 'pgRes';
    512           *          FALSE otherwise.
    513           *          Note that on a failure, this could loop, re-erasing the 'pgRes' and re-compacting with
    514           *          the risk of infinitely looping on HAL flash failure.
    515           *          Worst case scenario: HAL flash starts failing in general, perhaps low Vdd?
    516           *          All page compactions will fail which will cause all osal_nv_write() calls to return
    517           *          NV_OPER_FAILED.
    518           *          Eventually, all pages in use may also be in the state of "pending compaction" where
    519           *          the page header member OSAL_NV_PG_XFER is zeroed out.
    520           *          During this "HAL flash brown-out", the code will run and OTA should work (until low Vdd
    521           *          causes an actual chip brown-out, of course.) Although no new NV items will be created
    522           *          or written, the last value written with a return value of SUCCESS can continue to be
    523           *          read successfully.
    524           *          If eventually HAL flash starts working again, all of the pages marked as
    525           *          "pending compaction" may or may not be eventually compacted. But, initNV() will
    526           *          deterministically clean-up one page pending compaction per power-cycle
    527           *          (if HAL flash is working.) Nevertheless, one erased reserve page will be maintained
    528           *          through such a scenario.
    529           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    530          static uint8 compactPage( uint8 srcPg, uint16 skipId )
   \                     compactPage:
    531          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7409         MOV     A,#0x9
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   89..         MOV     ?V6,R1
    532            uint16 srcOff;
    533            uint8 rtrn;
    534          
    535            // To minimize code size, only check for a clean page here where it's absolutely required.
    536            for (srcOff = 0; srcOff < OSAL_NV_PAGE_SIZE; srcOff++)
   \   000016   75..00       MOV     ?V0,#0x0
   \   000019   75..00       MOV     ?V1,#0x0
   \                     ??compactPage_0:
   \   00001C   C3           CLR     C
   \   00001D   E5..         MOV     A,?V0
   \   00001F   9400         SUBB    A,#0x0
   \   000021   E5..         MOV     A,?V1
   \   000023   9408         SUBB    A,#0x8
   \   000025   5043         JNC     ??compactPage_1
    537            {
    538              HalFlashRead(pgRes, srcOff, &rtrn, 1);
   \   000027                ; Setup parameters for call to function HalFlashRead
   \   000027   75..01       MOV     ?V2,#0x1
   \   00002A   75..00       MOV     ?V3,#0x0
   \   00002D   78..         MOV     R0,#?V2
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?XSTACK_DISP102_8
   \   000037   AA..         MOV     R2,?V0
   \   000039   AB..         MOV     R3,?V1
   \   00003B   90....       MOV     DPTR,#pgRes
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F9           MOV     R1,A
   \   000040   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
    539              if (rtrn != OSAL_NV_ERASED)
   \   000048   85..82       MOV     DPL,?XSP + 0
   \   00004B   85..83       MOV     DPH,?XSP + 1
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   64FF         XRL     A,#0xff
   \   000051   600D         JZ      ??compactPage_2
    540              {
    541                erasePage(pgRes);
   \   000053                ; Setup parameters for call to function erasePage
   \   000053   90....       MOV     DPTR,#pgRes
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F9           MOV     R1,A
   \   000058   12....       LCALL   ??erasePage?relay    ; Banked call to: erasePage
    542                return FALSE;
   \   00005B   7900         MOV     R1,#0x0
   \   00005D   02....       LJMP    ??compactPage_3 & 0xFFFF
    543              }
    544            }
   \                     ??compactPage_2:
   \   000060   05..         INC     ?V0
   \   000062   E5..         MOV     A,?V0
   \   000064   70B6         JNZ     ??compactPage_0
   \   000066   05..         INC     ?V1
   \   000068   80B2         SJMP    ??compactPage_0
    545          
    546            srcOff = OSAL_NV_PAGE_HDR_SIZE;
   \                     ??compactPage_1:
   \   00006A   75..08       MOV     ?V0,#0x8
   \   00006D   75..00       MOV     ?V1,#0x0
    547            rtrn = TRUE;
   \   000070   85..82       MOV     DPL,?XSP + 0
   \   000073   85..83       MOV     DPH,?XSP + 1
   \   000076   7401         MOV     A,#0x1
   \   000078   F0           MOVX    @DPTR,A
    548          
    549            while ( srcOff < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE ) )
   \                     ??compactPage_4:
   \   000079   C3           CLR     C
   \   00007A   E5..         MOV     A,?V0
   \   00007C   94F8         SUBB    A,#-0x8
   \   00007E   E5..         MOV     A,?V1
   \   000080   9407         SUBB    A,#0x7
   \   000082   4003         JC      $+5
   \   000084   02....       LJMP    ??compactPage_5 & 0xFFFF
    550            {
    551              osalNvHdr_t hdr;
    552              uint16 sz, dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
   \   000087   90....       MOV     DPTR,#pgRes
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F8           MOV     R0,A
   \   00008C   7900         MOV     R1,#0x0
   \   00008E   E8           MOV     A,R0
   \   00008F   75F002       MOV     B,#0x2
   \   000092   A4           MUL     AB
   \   000093   C8           XCH     A,R0
   \   000094   AAF0         MOV     R2,B
   \   000096   75F000       MOV     B,#0x0
   \   000099   A4           MUL     AB
   \   00009A   2A           ADD     A,R2
   \   00009B   FA           MOV     R2,A
   \   00009C   75F002       MOV     B,#0x2
   \   00009F   E9           MOV     A,R1
   \   0000A0   A4           MUL     AB
   \   0000A1   2A           ADD     A,R2
   \   0000A2   F9           MOV     R1,A
   \   0000A3   74..         MOV     A,#(pgOff + 14) & 0xff
   \   0000A5   28           ADD     A,R0
   \   0000A6   F582         MOV     DPL,A
   \   0000A8   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   0000AA   39           ADDC    A,R1
   \   0000AB   F583         MOV     DPH,A
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   F5..         MOV     ?V2,A
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F5..         MOV     ?V3,A
    553          
    554              HalFlashRead(srcPg, srcOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   0000B4                ; Setup parameters for call to function HalFlashRead
   \   0000B4   75..08       MOV     ?V4,#0x8
   \   0000B7   75..00       MOV     ?V5,#0x0
   \   0000BA   78..         MOV     R0,#?V4
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BF   7403         MOV     A,#0x3
   \   0000C1   12....       LCALL   ?XSTACK_DISP102_8
   \   0000C4   AA..         MOV     R2,?V0
   \   0000C6   AB..         MOV     R3,?V1
   \   0000C8   A9..         MOV     R1,?V6
   \   0000CA   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   0000CD   7402         MOV     A,#0x2
   \   0000CF   12....       LCALL   ?DEALLOC_XSTACK8
    555          
    556              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   0000D2   7401         MOV     A,#0x1
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   64FF         XRL     A,#0xff
   \   0000DA   7004         JNZ     ??compactPage_6
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   64FF         XRL     A,#0xff
   \                     ??compactPage_6:
   \   0000E0   7003         JNZ     $+5
   \   0000E2   02....       LJMP    ??compactPage_5 & 0xFFFF
    557              {
    558                break;
    559              }
    560          
    561              // Get the actual size in bytes which is the ceiling(hdr.len)
    562              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   0000E5   7403         MOV     A,#0x3
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   C3           CLR     C
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   94FC         SUBB    A,#-0x4
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   94FF         SUBB    A,#-0x1
   \   0000F2   4006         JC      ??compactPage_7
   \   0000F4   7EFC         MOV     R6,#-0x4
   \   0000F6   7FFF         MOV     R7,#-0x1
   \   0000F8   8030         SJMP    ??compactPage_8
   \                     ??compactPage_7:
   \   0000FA   7403         MOV     A,#0x3
   \   0000FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   2403         ADD     A,#0x3
   \   000102   F5..         MOV     ?V4,A
   \   000104   A3           INC     DPTR
   \   000105   E0           MOVX    A,@DPTR
   \   000106   3400         ADDC    A,#0x0
   \   000108   F5..         MOV     ?V5,A
   \   00010A   7402         MOV     A,#0x2
   \   00010C   78..         MOV     R0,#?V4
   \   00010E   12....       LCALL   ?US_SHR
   \   000111   AE..         MOV     R6,?V4
   \   000113   AF..         MOV     R7,?V5
   \   000115   EE           MOV     A,R6
   \   000116   75F004       MOV     B,#0x4
   \   000119   A4           MUL     AB
   \   00011A   CE           XCH     A,R6
   \   00011B   A8F0         MOV     R0,B
   \   00011D   75F000       MOV     B,#0x0
   \   000120   A4           MUL     AB
   \   000121   28           ADD     A,R0
   \   000122   F8           MOV     R0,A
   \   000123   75F004       MOV     B,#0x4
   \   000126   EF           MOV     A,R7
   \   000127   A4           MUL     AB
   \   000128   28           ADD     A,R0
   \   000129   FF           MOV     R7,A
    563          
    564              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - srcOff) )
   \                     ??compactPage_8:
   \   00012A   74F8         MOV     A,#-0x8
   \   00012C   C3           CLR     C
   \   00012D   95..         SUBB    A,?V0
   \   00012F   F8           MOV     R0,A
   \   000130   7407         MOV     A,#0x7
   \   000132   95..         SUBB    A,?V1
   \   000134   F9           MOV     R1,A
   \   000135   C3           CLR     C
   \   000136   E8           MOV     A,R0
   \   000137   9E           SUBB    A,R6
   \   000138   E9           MOV     A,R1
   \   000139   9F           SUBB    A,R7
   \   00013A   5003         JNC     $+5
   \   00013C   02....       LJMP    ??compactPage_5 & 0xFFFF
    565              {
    566                break;
    567              }
    568          
    569              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - dstOff) )
   \   00013F   74F8         MOV     A,#-0x8
   \   000141   C3           CLR     C
   \   000142   95..         SUBB    A,?V2
   \   000144   F8           MOV     R0,A
   \   000145   7407         MOV     A,#0x7
   \   000147   95..         SUBB    A,?V3
   \   000149   F9           MOV     R1,A
   \   00014A   C3           CLR     C
   \   00014B   E8           MOV     A,R0
   \   00014C   9E           SUBB    A,R6
   \   00014D   E9           MOV     A,R1
   \   00014E   9F           SUBB    A,R7
   \   00014F   500C         JNC     ??compactPage_9
    570              {
    571                rtrn = FALSE;
   \   000151   85..82       MOV     DPL,?XSP + 0
   \   000154   85..83       MOV     DPH,?XSP + 1
   \   000157   7400         MOV     A,#0x0
   \   000159   F0           MOVX    @DPTR,A
    572                break;
   \   00015A   02....       LJMP    ??compactPage_5 & 0xFFFF
    573              }
    574          
    575              srcOff += OSAL_NV_HDR_SIZE;
   \                     ??compactPage_9:
   \   00015D   E5..         MOV     A,?V0
   \   00015F   2408         ADD     A,#0x8
   \   000161   F5..         MOV     ?V0,A
   \   000163   E5..         MOV     A,?V1
   \   000165   3400         ADDC    A,#0x0
   \   000167   F5..         MOV     ?V1,A
    576          
    577              if ( (hdr.id != OSAL_NV_ZEROED_ID) && (hdr.id != skipId) )
   \   000169   7401         MOV     A,#0x1
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   F8           MOV     R0,A
   \   000170   A3           INC     DPTR
   \   000171   E0           MOVX    A,@DPTR
   \   000172   F9           MOV     R1,A
   \   000173   E8           MOV     A,R0
   \   000174   49           ORL     A,R1
   \   000175   7003         JNZ     $+5
   \   000177   02....       LJMP    ??compactPage_10 & 0xFFFF
   \   00017A   7401         MOV     A,#0x1
   \   00017C   12....       LCALL   ?XSTACK_DISP0_8
   \   00017F   E0           MOVX    A,@DPTR
   \   000180   F8           MOV     R0,A
   \   000181   A3           INC     DPTR
   \   000182   E0           MOVX    A,@DPTR
   \   000183   F9           MOV     R1,A
   \   000184   7409         MOV     A,#0x9
   \   000186   12....       LCALL   ?XSTACK_DISP0_8
   \   000189   E0           MOVX    A,@DPTR
   \   00018A   68           XRL     A,R0
   \   00018B   7003         JNZ     ??compactPage_11
   \   00018D   A3           INC     DPTR
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   69           XRL     A,R1
   \                     ??compactPage_11:
   \   000190   7003         JNZ     $+5
   \   000192   02....       LJMP    ??compactPage_10 & 0xFFFF
    578              {
    579                if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
   \   000195                ; Setup parameters for call to function calcChkF
   \   000195   7403         MOV     A,#0x3
   \   000197   12....       LCALL   ?XSTACK_DISP0_8
   \   00019A   E0           MOVX    A,@DPTR
   \   00019B   FC           MOV     R4,A
   \   00019C   A3           INC     DPTR
   \   00019D   E0           MOVX    A,@DPTR
   \   00019E   FD           MOV     R5,A
   \   00019F   AA..         MOV     R2,?V0
   \   0001A1   AB..         MOV     R3,?V1
   \   0001A3   A9..         MOV     R1,?V6
   \   0001A5   12....       LCALL   ??calcChkF?relay     ; Banked call to: calcChkF
   \   0001A8   8A..         MOV     ?V4,R2
   \   0001AA   8B..         MOV     ?V5,R3
   \   0001AC   A8..         MOV     R0,?V4
   \   0001AE   A9..         MOV     R1,?V5
   \   0001B0   7405         MOV     A,#0x5
   \   0001B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B5   E0           MOVX    A,@DPTR
   \   0001B6   68           XRL     A,R0
   \   0001B7   7003         JNZ     ??compactPage_12
   \   0001B9   A3           INC     DPTR
   \   0001BA   E0           MOVX    A,@DPTR
   \   0001BB   69           XRL     A,R1
   \                     ??compactPage_12:
   \   0001BC   6003         JZ      $+5
   \   0001BE   02....       LJMP    ??compactPage_10 & 0xFFFF
    580                {
    581                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
    582                   * OSAL_Nv interruptions caused by resets.
    583                   */
    584                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   0001C1   7407         MOV     A,#0x7
   \   0001C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C6   E0           MOVX    A,@DPTR
   \   0001C7   64FF         XRL     A,#0xff
   \   0001C9   7004         JNZ     ??compactPage_13
   \   0001CB   A3           INC     DPTR
   \   0001CC   E0           MOVX    A,@DPTR
   \   0001CD   64FF         XRL     A,#0xff
   \                     ??compactPage_13:
   \   0001CF   700B         JNZ     ??compactPage_14
    585                  {
    586                    setItem( srcPg, srcOff, eNvXfer );
   \   0001D1                ; Setup parameters for call to function setItem
   \   0001D1   7C00         MOV     R4,#0x0
   \   0001D3   AA..         MOV     R2,?V0
   \   0001D5   AB..         MOV     R3,?V1
   \   0001D7   A9..         MOV     R1,?V6
   \   0001D9   12....       LCALL   ??setItem?relay      ; Banked call to: setItem
    587                  }
    588          
    589                  if ( writeItem( pgRes, hdr.id, hdr.len, NULL, FALSE ) )
   \                     ??compactPage_14:
   \   0001DC                ; Setup parameters for call to function writeItem
   \   0001DC   75..00       MOV     ?V4,#0x0
   \   0001DF   78..         MOV     R0,#?V4
   \   0001E1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001E4   E4           CLR     A
   \   0001E5   F5..         MOV     ?V4,A
   \   0001E7   F5..         MOV     ?V5,A
   \   0001E9   78..         MOV     R0,#?V4
   \   0001EB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001EE   7406         MOV     A,#0x6
   \   0001F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F3   E0           MOVX    A,@DPTR
   \   0001F4   FC           MOV     R4,A
   \   0001F5   A3           INC     DPTR
   \   0001F6   E0           MOVX    A,@DPTR
   \   0001F7   FD           MOV     R5,A
   \   0001F8   7404         MOV     A,#0x4
   \   0001FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FD   E0           MOVX    A,@DPTR
   \   0001FE   FA           MOV     R2,A
   \   0001FF   A3           INC     DPTR
   \   000200   E0           MOVX    A,@DPTR
   \   000201   FB           MOV     R3,A
   \   000202   90....       MOV     DPTR,#pgRes
   \   000205   E0           MOVX    A,@DPTR
   \   000206   F9           MOV     R1,A
   \   000207   12....       LCALL   ??writeItem?relay    ; Banked call to: writeItem
   \   00020A   7403         MOV     A,#0x3
   \   00020C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00020F   E9           MOV     A,R1
   \   000210   7003         JNZ     $+5
   \   000212   02....       LJMP    ??compactPage_15 & 0xFFFF
    590                  {
    591                    dstOff += OSAL_NV_HDR_SIZE;
   \   000215   E5..         MOV     A,?V2
   \   000217   2408         ADD     A,#0x8
   \   000219   F5..         MOV     ?V2,A
   \   00021B   E5..         MOV     A,?V3
   \   00021D   3400         ADDC    A,#0x0
   \   00021F   F5..         MOV     ?V3,A
    592                    xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
   \   000221                ; Setup parameters for call to function xferBuf
   \   000221   8E..         MOV     ?V4,R6
   \   000223   8F..         MOV     ?V5,R7
   \   000225   78..         MOV     R0,#?V4
   \   000227   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00022A   78..         MOV     R0,#?V2
   \   00022C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00022F   90....       MOV     DPTR,#pgRes
   \   000232   E0           MOVX    A,@DPTR
   \   000233   FC           MOV     R4,A
   \   000234   AA..         MOV     R2,?V0
   \   000236   AB..         MOV     R3,?V1
   \   000238   A9..         MOV     R1,?V6
   \   00023A   12....       LCALL   ??xferBuf?relay      ; Banked call to: xferBuf
   \   00023D   7404         MOV     A,#0x4
   \   00023F   12....       LCALL   ?DEALLOC_XSTACK8
    593                    // Calculate and write the new checksum.
    594                    if (hdr.chk == calcChkF(pgRes, dstOff, hdr.len))
   \   000242                ; Setup parameters for call to function calcChkF
   \   000242   7403         MOV     A,#0x3
   \   000244   12....       LCALL   ?XSTACK_DISP0_8
   \   000247   E0           MOVX    A,@DPTR
   \   000248   FC           MOV     R4,A
   \   000249   A3           INC     DPTR
   \   00024A   E0           MOVX    A,@DPTR
   \   00024B   FD           MOV     R5,A
   \   00024C   AA..         MOV     R2,?V2
   \   00024E   AB..         MOV     R3,?V3
   \   000250   90....       MOV     DPTR,#pgRes
   \   000253   E0           MOVX    A,@DPTR
   \   000254   F9           MOV     R1,A
   \   000255   12....       LCALL   ??calcChkF?relay     ; Banked call to: calcChkF
   \   000258   8A..         MOV     ?V4,R2
   \   00025A   8B..         MOV     ?V5,R3
   \   00025C   A8..         MOV     R0,?V4
   \   00025E   A9..         MOV     R1,?V5
   \   000260   7405         MOV     A,#0x5
   \   000262   12....       LCALL   ?XSTACK_DISP0_8
   \   000265   E0           MOVX    A,@DPTR
   \   000266   68           XRL     A,R0
   \   000267   7003         JNZ     ??compactPage_16
   \   000269   A3           INC     DPTR
   \   00026A   E0           MOVX    A,@DPTR
   \   00026B   69           XRL     A,R1
   \                     ??compactPage_16:
   \   00026C   704F         JNZ     ??compactPage_17
    595                    {
    596                      if ( hdr.chk != setChk( pgRes, dstOff, hdr.chk ) )
   \   00026E                ; Setup parameters for call to function setChk
   \   00026E   7405         MOV     A,#0x5
   \   000270   12....       LCALL   ?XSTACK_DISP0_8
   \   000273   E0           MOVX    A,@DPTR
   \   000274   FC           MOV     R4,A
   \   000275   A3           INC     DPTR
   \   000276   E0           MOVX    A,@DPTR
   \   000277   FD           MOV     R5,A
   \   000278   AA..         MOV     R2,?V2
   \   00027A   AB..         MOV     R3,?V3
   \   00027C   90....       MOV     DPTR,#pgRes
   \   00027F   E0           MOVX    A,@DPTR
   \   000280   F9           MOV     R1,A
   \   000281   12....       LCALL   ??setChk?relay       ; Banked call to: setChk
   \   000284   8A..         MOV     ?V4,R2
   \   000286   8B..         MOV     ?V5,R3
   \   000288   A8..         MOV     R0,?V4
   \   00028A   A9..         MOV     R1,?V5
   \   00028C   7405         MOV     A,#0x5
   \   00028E   12....       LCALL   ?XSTACK_DISP0_8
   \   000291   E0           MOVX    A,@DPTR
   \   000292   68           XRL     A,R0
   \   000293   7003         JNZ     ??compactPage_18
   \   000295   A3           INC     DPTR
   \   000296   E0           MOVX    A,@DPTR
   \   000297   69           XRL     A,R1
   \                     ??compactPage_18:
   \   000298   600B         JZ      ??compactPage_19
    597                      {
    598                        rtrn = FALSE;
   \   00029A   85..82       MOV     DPL,?XSP + 0
   \   00029D   85..83       MOV     DPH,?XSP + 1
   \   0002A0   7400         MOV     A,#0x0
   \   0002A2   F0           MOVX    @DPTR,A
    599                        break;
   \   0002A3   803B         SJMP    ??compactPage_5
    600                      }
    601                      else
    602                      {
    603                        hotItemUpdate(pgRes, dstOff, hdr.id);
   \                     ??compactPage_19:
   \   0002A5                ; Setup parameters for call to function hotItemUpdate
   \   0002A5   7401         MOV     A,#0x1
   \   0002A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AA   E0           MOVX    A,@DPTR
   \   0002AB   FC           MOV     R4,A
   \   0002AC   A3           INC     DPTR
   \   0002AD   E0           MOVX    A,@DPTR
   \   0002AE   FD           MOV     R5,A
   \   0002AF   AA..         MOV     R2,?V2
   \   0002B1   AB..         MOV     R3,?V3
   \   0002B3   90....       MOV     DPTR,#pgRes
   \   0002B6   E0           MOVX    A,@DPTR
   \   0002B7   F9           MOV     R1,A
   \   0002B8   12....       LCALL   ??hotItemUpdate?relay; Banked call to: hotItemUpdate
   \   0002BB   8016         SJMP    ??compactPage_10
    604                      }
    605                    }
    606                    else
    607                    {
    608                      rtrn = FALSE;
   \                     ??compactPage_17:
   \   0002BD   85..82       MOV     DPL,?XSP + 0
   \   0002C0   85..83       MOV     DPH,?XSP + 1
   \   0002C3   7400         MOV     A,#0x0
   \   0002C5   F0           MOVX    @DPTR,A
    609                      break;
   \   0002C6   8018         SJMP    ??compactPage_5
    610                    }
    611                  }
    612                  else
    613                  {
    614                    rtrn = FALSE;
   \                     ??compactPage_15:
   \   0002C8   85..82       MOV     DPL,?XSP + 0
   \   0002CB   85..83       MOV     DPH,?XSP + 1
   \   0002CE   7400         MOV     A,#0x0
   \   0002D0   F0           MOVX    @DPTR,A
    615                    break;
   \   0002D1   800D         SJMP    ??compactPage_5
    616                  }
    617                }
    618              }
    619          
    620              srcOff += sz;
   \                     ??compactPage_10:
   \   0002D3   E5..         MOV     A,?V0
   \   0002D5   2E           ADD     A,R6
   \   0002D6   F5..         MOV     ?V0,A
   \   0002D8   E5..         MOV     A,?V1
   \   0002DA   3F           ADDC    A,R7
   \   0002DB   F5..         MOV     ?V1,A
   \   0002DD   02....       LJMP    ??compactPage_4 & 0xFFFF
    621            }
    622          
    623            if (rtrn == FALSE)
   \                     ??compactPage_5:
   \   0002E0   85..82       MOV     DPL,?XSP + 0
   \   0002E3   85..83       MOV     DPH,?XSP + 1
   \   0002E6   E0           MOVX    A,@DPTR
   \   0002E7   700A         JNZ     ??compactPage_20
    624            {
    625              erasePage(pgRes);
   \   0002E9                ; Setup parameters for call to function erasePage
   \   0002E9   90....       MOV     DPTR,#pgRes
   \   0002EC   E0           MOVX    A,@DPTR
   \   0002ED   F9           MOV     R1,A
   \   0002EE   12....       LCALL   ??erasePage?relay    ; Banked call to: erasePage
   \   0002F1   8023         SJMP    ??compactPage_21
    626            }
    627            else if (skipId == OSAL_NV_ITEM_NULL)
   \                     ??compactPage_20:
   \   0002F3   7409         MOV     A,#0x9
   \   0002F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F8   E0           MOVX    A,@DPTR
   \   0002F9   F8           MOV     R0,A
   \   0002FA   A3           INC     DPTR
   \   0002FB   E0           MOVX    A,@DPTR
   \   0002FC   F9           MOV     R1,A
   \   0002FD   E8           MOV     A,R0
   \   0002FE   49           ORL     A,R1
   \   0002FF   7015         JNZ     ??compactPage_21
    628            {
    629              COMPACT_PAGE_CLEANUP(srcPg);
   \   000301                ; Setup parameters for call to function setPageUse
   \   000301   7A01         MOV     R2,#0x1
   \   000303   90....       MOV     DPTR,#pgRes
   \   000306   E0           MOVX    A,@DPTR
   \   000307   F9           MOV     R1,A
   \   000308   12....       LCALL   ??setPageUse?relay   ; Banked call to: setPageUse
   \   00030B                ; Setup parameters for call to function erasePage
   \   00030B   A9..         MOV     R1,?V6
   \   00030D   12....       LCALL   ??erasePage?relay    ; Banked call to: erasePage
   \   000310   E5..         MOV     A,?V6
   \   000312   90....       MOV     DPTR,#pgRes
   \   000315   F0           MOVX    @DPTR,A
    630            }
    631            // else invoking function must cleanup.
    632          
    633            return rtrn;
   \                     ??compactPage_21:
   \   000316   85..82       MOV     DPL,?XSP + 0
   \   000319   85..83       MOV     DPH,?XSP + 1
   \   00031C   E0           MOVX    A,@DPTR
   \   00031D   F9           MOV     R1,A
   \                     ??compactPage_3:
   \   00031E   740B         MOV     A,#0xb
   \   000320   12....       LCALL   ?DEALLOC_XSTACK8
   \   000323   7F07         MOV     R7,#0x7
   \   000325   02....       LJMP    ?BANKED_LEAVE_XDATA
    634          }
    635          
    636          /*********************************************************************
    637           * @fn      findItem
    638           *
    639           * @brief   Find an item Id in NV and return the page and offset to its data.
    640           *
    641           * @param   id - Valid NV item Id.
    642           *
    643           * @return  Offset of data corresponding to item Id, if found;
    644           *          otherwise OSAL_NV_ITEM_NULL.
    645           *
    646           *          The page containing the item, if found;
    647           *          otherwise no valid assignment made - left equal to item Id.
    648           *
    649           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    650          static uint16 findItem( uint16 id )
   \                     findItem:
    651          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    652            uint16 off;
    653            uint8 pg;
    654          
    655            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   000009   75..79       MOV     ?V0,#0x79
   \                     ??findItem_0:
   \   00000C   E5..         MOV     A,?V0
   \   00000E   C3           CLR     C
   \   00000F   947F         SUBB    A,#0x7f
   \   000011   502B         JNC     ??findItem_1
    656            {
    657              if ( (off = initPage( pg, id, FALSE )) != OSAL_NV_ITEM_NULL )
   \   000013                ; Setup parameters for call to function initPage
   \   000013   7C00         MOV     R4,#0x0
   \   000015   EE           MOV     A,R6
   \   000016   FA           MOV     R2,A
   \   000017   EF           MOV     A,R7
   \   000018   FB           MOV     R3,A
   \   000019   A9..         MOV     R1,?V0
   \   00001B   12....       LCALL   ??initPage?relay     ; Banked call to: initPage
   \   00001E   8A..         MOV     ?V4,R2
   \   000020   8B..         MOV     ?V5,R3
   \   000022   A8..         MOV     R0,?V4
   \   000024   A9..         MOV     R1,?V5
   \   000026   88..         MOV     ?V2,R0
   \   000028   89..         MOV     ?V3,R1
   \   00002A   E8           MOV     A,R0
   \   00002B   49           ORL     A,R1
   \   00002C   600C         JZ      ??findItem_2
    658              {
    659                findPg = pg;
   \   00002E   E5..         MOV     A,?V0
   \   000030   90....       MOV     DPTR,#findPg
   \   000033   F0           MOVX    @DPTR,A
    660                return off;
   \   000034   AA..         MOV     R2,?V2
   \   000036   AB..         MOV     R3,?V3
   \   000038   8027         SJMP    ??findItem_3
    661              }
    662            }
   \                     ??findItem_2:
   \   00003A   05..         INC     ?V0
   \   00003C   80CE         SJMP    ??findItem_0
    663          
    664            // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
    665            if ( (id & OSAL_NV_SOURCE_ID) == 0 )
   \                     ??findItem_1:
   \   00003E   EE           MOV     A,R6
   \   00003F   5400         ANL     A,#0x0
   \   000041   F8           MOV     R0,A
   \   000042   EF           MOV     A,R7
   \   000043   5480         ANL     A,#0x80
   \   000045   F9           MOV     R1,A
   \   000046   E8           MOV     A,R0
   \   000047   49           ORL     A,R1
   \   000048   700D         JNZ     ??findItem_4
    666            {
    667              return findItem( id | OSAL_NV_SOURCE_ID );
   \   00004A                ; Setup parameters for call to function findItem
   \   00004A   EE           MOV     A,R6
   \   00004B   4400         ORL     A,#0x0
   \   00004D   FA           MOV     R2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   4480         ORL     A,#0x80
   \   000051   FB           MOV     R3,A
   \   000052   12....       LCALL   ??findItem?relay     ; Banked call to: findItem
   \   000055   800A         SJMP    ??findItem_3
    668            }
    669            else
    670            {
    671              findPg = OSAL_NV_PAGE_NULL;
   \                     ??findItem_4:
   \   000057   90....       MOV     DPTR,#findPg
   \   00005A   7400         MOV     A,#0x0
   \   00005C   F0           MOVX    @DPTR,A
    672              return OSAL_NV_ITEM_NULL;
   \   00005D   7A00         MOV     R2,#0x0
   \   00005F   7B00         MOV     R3,#0x0
   \                     ??findItem_3:
   \   000061   7F06         MOV     R7,#0x6
   \   000063   02....       LJMP    ?BANKED_LEAVE_XDATA
    673            }
    674          }
    675          
    676          /*********************************************************************
    677           * @fn      initItem
    678           *
    679           * @brief   An NV item is created and initialized with the data passed to the function, if any.
    680           *
    681           * @param   flag - TRUE if the 'buf' parameter contains data for the call to writeItem().
    682           *                 (i.e. if invoked from osal_nv_item_init() ).
    683           *                 FALSE if writeItem() should just write the header and the 'buf' parameter
    684           *                 is ok to use as a return value of the page number to be cleaned with
    685           *                 COMPACT_PAGE_CLEANUP().
    686           *                 (i.e. if invoked from osal_nv_write() ).
    687           * @param   id  - Valid NV item Id.
    688           * @param   len - Item data length.
    689           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
    690           *
    691           * @return  The OSAL Nv page number if item write and read back checksums ok; 
    692           *          OSAL_NV_PAGE_NULL otherwise.
    693           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    694          static uint8 initItem( uint8 flag, uint16 id, uint16 len, void *buf )
   \                     initItem:
    695          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V1,R1
   \   00000C   8A..         MOV     ?V6,R2
   \   00000E   8B..         MOV     ?V7,R3
   \   000010   8C..         MOV     ?V4,R4
   \   000012   8D..         MOV     ?V5,R5
    696            uint16 sz = OSAL_NV_ITEM_SIZE( len );
   \   000014   C3           CLR     C
   \   000015   E5..         MOV     A,?V4
   \   000017   94F4         SUBB    A,#-0xc
   \   000019   E5..         MOV     A,?V5
   \   00001B   94FF         SUBB    A,#-0x1
   \   00001D   400F         JC      ??initItem_0
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   74FC         MOV     A,#-0x4
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   74FF         MOV     A,#-0x1
   \   00002B   F0           MOVX    @DPTR,A
   \   00002C   803F         SJMP    ??initItem_1
   \                     ??initItem_0:
   \   00002E   E5..         MOV     A,?V4
   \   000030   2403         ADD     A,#0x3
   \   000032   F5..         MOV     ?V2,A
   \   000034   E4           CLR     A
   \   000035   35..         ADDC    A,?V5
   \   000037   F5..         MOV     ?V3,A
   \   000039   7402         MOV     A,#0x2
   \   00003B   78..         MOV     R0,#?V2
   \   00003D   12....       LCALL   ?US_SHR
   \   000040   E5..         MOV     A,?V2
   \   000042   75F004       MOV     B,#0x4
   \   000045   A4           MUL     AB
   \   000046   C5..         XCH     A,?V2
   \   000048   A8F0         MOV     R0,B
   \   00004A   75F000       MOV     B,#0x0
   \   00004D   A4           MUL     AB
   \   00004E   28           ADD     A,R0
   \   00004F   F8           MOV     R0,A
   \   000050   75F004       MOV     B,#0x4
   \   000053   E5..         MOV     A,?V3
   \   000055   A4           MUL     AB
   \   000056   28           ADD     A,R0
   \   000057   F5..         MOV     ?V3,A
   \   000059   E5..         MOV     A,?V2
   \   00005B   2408         ADD     A,#0x8
   \   00005D   F8           MOV     R0,A
   \   00005E   E4           CLR     A
   \   00005F   35..         ADDC    A,?V3
   \   000061   F9           MOV     R1,A
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   E8           MOV     A,R0
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   E9           MOV     A,R1
   \   00006C   F0           MOVX    @DPTR,A
    697            uint8 rtrn = OSAL_NV_PAGE_NULL;
   \                     ??initItem_1:
   \   00006D   7F00         MOV     R7,#0x0
    698            uint8 cnt = OSAL_NV_PAGES_USED;
   \   00006F   75..06       MOV     ?V0,#0x6
    699            uint8 pg = pgRes+1;  // Set to 1 after the reserve page to even wear across all available pages.
   \   000072   90....       MOV     DPTR,#pgRes
   \   000075   E0           MOVX    A,@DPTR
   \   000076   2401         ADD     A,#0x1
   \   000078   FE           MOV     R6,A
    700          
    701            do {
    702              if (pg >= OSAL_NV_PAGE_BEG+OSAL_NV_PAGES_USED)
   \                     ??initItem_2:
   \   000079   EE           MOV     A,R6
   \   00007A   C3           CLR     C
   \   00007B   947F         SUBB    A,#0x7f
   \   00007D   4002         JC      ??initItem_3
    703              {
    704                pg = OSAL_NV_PAGE_BEG;
   \   00007F   7E79         MOV     R6,#0x79
    705              }
    706              if ( pg != pgRes )
   \                     ??initItem_3:
   \   000081   90....       MOV     DPTR,#pgRes
   \   000084   E0           MOVX    A,@DPTR
   \   000085   6E           XRL     A,R6
   \   000086   6071         JZ      ??initItem_4
    707              {
    708                uint8 idx = pg - OSAL_NV_PAGE_BEG;
   \   000088   7487         MOV     A,#-0x79
   \   00008A   2E           ADD     A,R6
   \   00008B   FC           MOV     R4,A
    709                if ( sz <= (OSAL_NV_PAGE_SIZE - pgOff[idx] + pgLost[idx]) )
   \   00008C   EC           MOV     A,R4
   \   00008D   F8           MOV     R0,A
   \   00008E   7900         MOV     R1,#0x0
   \   000090   E8           MOV     A,R0
   \   000091   75F002       MOV     B,#0x2
   \   000094   A4           MUL     AB
   \   000095   C8           XCH     A,R0
   \   000096   AAF0         MOV     R2,B
   \   000098   75F000       MOV     B,#0x0
   \   00009B   A4           MUL     AB
   \   00009C   2A           ADD     A,R2
   \   00009D   FA           MOV     R2,A
   \   00009E   75F002       MOV     B,#0x2
   \   0000A1   E9           MOV     A,R1
   \   0000A2   A4           MUL     AB
   \   0000A3   2A           ADD     A,R2
   \   0000A4   F9           MOV     R1,A
   \   0000A5   74..         MOV     A,#pgOff & 0xff
   \   0000A7   28           ADD     A,R0
   \   0000A8   F582         MOV     DPL,A
   \   0000AA   74..         MOV     A,#(pgOff >> 8) & 0xff
   \   0000AC   39           ADDC    A,R1
   \   0000AD   F583         MOV     DPH,A
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F8           MOV     R0,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F9           MOV     R1,A
   \   0000B4   7400         MOV     A,#0x0
   \   0000B6   C3           CLR     C
   \   0000B7   98           SUBB    A,R0
   \   0000B8   F8           MOV     R0,A
   \   0000B9   7408         MOV     A,#0x8
   \   0000BB   99           SUBB    A,R1
   \   0000BC   F9           MOV     R1,A
   \   0000BD   EC           MOV     A,R4
   \   0000BE   FA           MOV     R2,A
   \   0000BF   7B00         MOV     R3,#0x0
   \   0000C1   EA           MOV     A,R2
   \   0000C2   75F002       MOV     B,#0x2
   \   0000C5   A4           MUL     AB
   \   0000C6   CA           XCH     A,R2
   \   0000C7   ADF0         MOV     R5,B
   \   0000C9   75F000       MOV     B,#0x0
   \   0000CC   A4           MUL     AB
   \   0000CD   2D           ADD     A,R5
   \   0000CE   FD           MOV     R5,A
   \   0000CF   75F002       MOV     B,#0x2
   \   0000D2   EB           MOV     A,R3
   \   0000D3   A4           MUL     AB
   \   0000D4   2D           ADD     A,R5
   \   0000D5   FB           MOV     R3,A
   \   0000D6   74..         MOV     A,#pgLost & 0xff
   \   0000D8   2A           ADD     A,R2
   \   0000D9   F582         MOV     DPL,A
   \   0000DB   74..         MOV     A,#(pgLost >> 8) & 0xff
   \   0000DD   3B           ADDC    A,R3
   \   0000DE   F583         MOV     DPH,A
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   28           ADD     A,R0
   \   0000E2   FA           MOV     R2,A
   \   0000E3   A3           INC     DPTR
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   39           ADDC    A,R1
   \   0000E6   FB           MOV     R3,A
   \   0000E7   85..82       MOV     DPL,?XSP + 0
   \   0000EA   85..83       MOV     DPH,?XSP + 1
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   F8           MOV     R0,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F9           MOV     R1,A
   \   0000F2   C3           CLR     C
   \   0000F3   EA           MOV     A,R2
   \   0000F4   98           SUBB    A,R0
   \   0000F5   EB           MOV     A,R3
   \   0000F6   99           SUBB    A,R1
   \   0000F7   500E         JNC     ??initItem_5
    710                {
    711                  break;
    712                }
    713              }
    714              pg++;
   \                     ??initItem_4:
   \   0000F9   0E           INC     R6
    715            } while (--cnt);
   \   0000FA   74FF         MOV     A,#-0x1
   \   0000FC   25..         ADD     A,?V0
   \   0000FE   F8           MOV     R0,A
   \   0000FF   88..         MOV     ?V0,R0
   \   000101   E8           MOV     A,R0
   \   000102   6003         JZ      $+5
   \   000104   02....       LJMP    ??initItem_2 & 0xFFFF
    716          
    717            if (cnt)
   \                     ??initItem_5:
   \   000107   E5..         MOV     A,?V0
   \   000109   7003         JNZ     $+5
   \   00010B   02....       LJMP    ??initItem_6 & 0xFFFF
    718            {
    719              // Item fits if an old page is compacted.
    720              if ( sz > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]) )
   \   00010E   EE           MOV     A,R6
   \   00010F   F8           MOV     R0,A
   \   000110   7900         MOV     R1,#0x0
   \   000112   E8           MOV     A,R0
   \   000113   75F002       MOV     B,#0x2
   \   000116   A4           MUL     AB
   \   000117   C8           XCH     A,R0
   \   000118   AAF0         MOV     R2,B
   \   00011A   75F000       MOV     B,#0x0
   \   00011D   A4           MUL     AB
   \   00011E   2A           ADD     A,R2
   \   00011F   FA           MOV     R2,A
   \   000120   75F002       MOV     B,#0x2
   \   000123   E9           MOV     A,R1
   \   000124   A4           MUL     AB
   \   000125   2A           ADD     A,R2
   \   000126   F9           MOV     R1,A
   \   000127   74..         MOV     A,#(pgOff + 14) & 0xff
   \   000129   28           ADD     A,R0
   \   00012A   F582         MOV     DPL,A
   \   00012C   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   00012E   39           ADDC    A,R1
   \   00012F   F583         MOV     DPH,A
   \   000131   E0           MOVX    A,@DPTR
   \   000132   F8           MOV     R0,A
   \   000133   A3           INC     DPTR
   \   000134   E0           MOVX    A,@DPTR
   \   000135   F9           MOV     R1,A
   \   000136   7400         MOV     A,#0x0
   \   000138   C3           CLR     C
   \   000139   98           SUBB    A,R0
   \   00013A   FA           MOV     R2,A
   \   00013B   7408         MOV     A,#0x8
   \   00013D   99           SUBB    A,R1
   \   00013E   FB           MOV     R3,A
   \   00013F   85..82       MOV     DPL,?XSP + 0
   \   000142   85..83       MOV     DPH,?XSP + 1
   \   000145   E0           MOVX    A,@DPTR
   \   000146   F8           MOV     R0,A
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   F9           MOV     R1,A
   \   00014A   C3           CLR     C
   \   00014B   EA           MOV     A,R2
   \   00014C   98           SUBB    A,R0
   \   00014D   EB           MOV     A,R3
   \   00014E   99           SUBB    A,R1
   \   00014F   4003         JC      $+5
   \   000151   02....       LJMP    ??initItem_7 & 0xFFFF
    721              {
    722                osalNvPgHdr_t pgHdr;
    723          
    724                /* Prevent excessive re-writes to page header caused by numerous, rapid, & successive
    725                 * OSAL_Nv interruptions caused by resets.
    726                 */
    727                HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_PAGE_HDR_SIZE);
   \   000154                ; Setup parameters for call to function HalFlashRead
   \   000154   75..08       MOV     ?V2,#0x8
   \   000157   75..00       MOV     ?V3,#0x0
   \   00015A   78..         MOV     R0,#?V2
   \   00015C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015F   7404         MOV     A,#0x4
   \   000161   12....       LCALL   ?XSTACK_DISP102_8
   \   000164   7A00         MOV     R2,#0x0
   \   000166   7B00         MOV     R3,#0x0
   \   000168   EE           MOV     A,R6
   \   000169   F9           MOV     R1,A
   \   00016A   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   00016D   7402         MOV     A,#0x2
   \   00016F   12....       LCALL   ?DEALLOC_XSTACK8
    728                if ( pgHdr.xfer == OSAL_NV_ERASED_ID )
   \   000172   7406         MOV     A,#0x6
   \   000174   12....       LCALL   ?XSTACK_DISP0_8
   \   000177   E0           MOVX    A,@DPTR
   \   000178   64FF         XRL     A,#0xff
   \   00017A   7004         JNZ     ??initItem_8
   \   00017C   A3           INC     DPTR
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   64FF         XRL     A,#0xff
   \                     ??initItem_8:
   \   000180   701A         JNZ     ??initItem_9
    729                {
    730                  // Mark the old page as being in process of compaction.
    731                  sz = OSAL_NV_ZEROED_ID;
   \   000182   85..82       MOV     DPL,?XSP + 0
   \   000185   85..83       MOV     DPH,?XSP + 1
   \   000188   7400         MOV     A,#0x0
   \   00018A   F0           MOVX    @DPTR,A
   \   00018B   A3           INC     DPTR
   \   00018C   7400         MOV     A,#0x0
   \   00018E   F0           MOVX    @DPTR,A
    732                  writeWordH( pg, OSAL_NV_PG_XFER, (uint8*)(&sz) );
   \   00018F                ; Setup parameters for call to function writeWordH
   \   00018F   AC..         MOV     R4,?XSP + 0
   \   000191   AD..         MOV     R5,?XSP + 1
   \   000193   7A04         MOV     R2,#0x4
   \   000195   7B00         MOV     R3,#0x0
   \   000197   EE           MOV     A,R6
   \   000198   F9           MOV     R1,A
   \   000199   12....       LCALL   ??writeWordH?relay   ; Banked call to: writeWordH
    733                }
    734          
    735                /* First the old page is compacted, then the new item will be the last one written to what
    736                 * had been the reserved page. 
    737                 */
    738                if (compactPage( pg, id ))
   \                     ??initItem_9:
   \   00019C                ; Setup parameters for call to function compactPage
   \   00019C   AA..         MOV     R2,?V6
   \   00019E   AB..         MOV     R3,?V7
   \   0001A0   EE           MOV     A,R6
   \   0001A1   F9           MOV     R1,A
   \   0001A2   12....       LCALL   ??compactPage?relay  ; Banked call to: compactPage
   \   0001A5   E9           MOV     A,R1
   \   0001A6   7003         JNZ     $+5
   \   0001A8   02....       LJMP    ??initItem_6 & 0xFFFF
    739                {
    740                  if ( writeItem( pgRes, id, len, buf, flag ) )
   \   0001AB                ; Setup parameters for call to function writeItem
   \   0001AB   E5..         MOV     A,?V1
   \   0001AD   F5..         MOV     ?V2,A
   \   0001AF   78..         MOV     R0,#?V2
   \   0001B1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001B4   741B         MOV     A,#0x1b
   \   0001B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B9   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001BC   AC..         MOV     R4,?V4
   \   0001BE   AD..         MOV     R5,?V5
   \   0001C0   AA..         MOV     R2,?V6
   \   0001C2   AB..         MOV     R3,?V7
   \   0001C4   90....       MOV     DPTR,#pgRes
   \   0001C7   E0           MOVX    A,@DPTR
   \   0001C8   F9           MOV     R1,A
   \   0001C9   12....       LCALL   ??writeItem?relay    ; Banked call to: writeItem
   \   0001CC   7403         MOV     A,#0x3
   \   0001CE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D1   E9           MOV     A,R1
   \   0001D2   6005         JZ      ??initItem_10
    741                  {
    742                    rtrn = pgRes;
   \   0001D4   90....       MOV     DPTR,#pgRes
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   FF           MOV     R7,A
    743                  }
    744          
    745                  if ( flag == FALSE )
   \                     ??initItem_10:
   \   0001D9   E5..         MOV     A,?V1
   \   0001DB   7015         JNZ     ??initItem_11
    746                  {
    747                    /* Overload 'buf' as an OUT parameter to pass back to the calling function
    748                     * the old page to be cleaned up.
    749                     */
    750                    *(uint8 *)buf = pg;
   \   0001DD   EE           MOV     A,R6
   \   0001DE   C0E0         PUSH    A
   \   0001E0   741A         MOV     A,#0x1a
   \   0001E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E5   E0           MOVX    A,@DPTR
   \   0001E6   F8           MOV     R0,A
   \   0001E7   A3           INC     DPTR
   \   0001E8   E0           MOVX    A,@DPTR
   \   0001E9   F583         MOV     DPH,A
   \   0001EB   8882         MOV     DPL,R0
   \   0001ED   D0E0         POP     A
   \   0001EF   F0           MOVX    @DPTR,A
   \   0001F0   803E         SJMP    ??initItem_6
    751                  }
    752                  else
    753                  {
    754                    /* Safe to do the compacted page cleanup even if writeItem() above failed because the
    755                     * item does not yet exist since this call with flag==TRUE is from osal_nv_item_init().
    756                     */
    757                    COMPACT_PAGE_CLEANUP( pg );
   \                     ??initItem_11:
   \   0001F2                ; Setup parameters for call to function setPageUse
   \   0001F2   7A01         MOV     R2,#0x1
   \   0001F4   90....       MOV     DPTR,#pgRes
   \   0001F7   E0           MOVX    A,@DPTR
   \   0001F8   F9           MOV     R1,A
   \   0001F9   12....       LCALL   ??setPageUse?relay   ; Banked call to: setPageUse
   \   0001FC                ; Setup parameters for call to function erasePage
   \   0001FC   EE           MOV     A,R6
   \   0001FD   F9           MOV     R1,A
   \   0001FE   12....       LCALL   ??erasePage?relay    ; Banked call to: erasePage
   \   000201   EE           MOV     A,R6
   \   000202   90....       MOV     DPTR,#pgRes
   \   000205   F0           MOVX    @DPTR,A
   \   000206   8028         SJMP    ??initItem_6
    758                  }
    759                }
    760              }
    761              else
    762              {
    763                if ( writeItem( pg, id, len, buf, flag ) )
   \                     ??initItem_7:
   \   000208                ; Setup parameters for call to function writeItem
   \   000208   E5..         MOV     A,?V1
   \   00020A   F5..         MOV     ?V2,A
   \   00020C   78..         MOV     R0,#?V2
   \   00020E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000211   741B         MOV     A,#0x1b
   \   000213   12....       LCALL   ?XSTACK_DISP0_8
   \   000216   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000219   AC..         MOV     R4,?V4
   \   00021B   AD..         MOV     R5,?V5
   \   00021D   AA..         MOV     R2,?V6
   \   00021F   AB..         MOV     R3,?V7
   \   000221   EE           MOV     A,R6
   \   000222   F9           MOV     R1,A
   \   000223   12....       LCALL   ??writeItem?relay    ; Banked call to: writeItem
   \   000226   7403         MOV     A,#0x3
   \   000228   12....       LCALL   ?DEALLOC_XSTACK8
   \   00022B   E9           MOV     A,R1
   \   00022C   6002         JZ      ??initItem_6
    764                {
    765                  rtrn = pg;
   \   00022E   EE           MOV     A,R6
   \   00022F   FF           MOV     R7,A
    766                }
    767              }
    768            }
    769          
    770            return rtrn;
   \                     ??initItem_6:
   \   000230   EF           MOV     A,R7
   \   000231   F9           MOV     R1,A
   \   000232   740A         MOV     A,#0xa
   \   000234   12....       LCALL   ?DEALLOC_XSTACK8
   \   000237   7F08         MOV     R7,#0x8
   \   000239   02....       LJMP    ?BANKED_LEAVE_XDATA
    771          }
    772          
    773          /*********************************************************************
    774           * @fn      setItem
    775           *
    776           * @brief   Set an item Id or status to mark its state.
    777           *
    778           * @param   pg - Valid NV page.
    779           * @param   offset - Valid offset into the page of the item data - the header
    780           *                   offset is calculated from this.
    781           * @param   stat - Valid enum value for the item status.
    782           *
    783           * @return  none
    784           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    785          static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
   \                     setItem:
    786          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   \   00000C   8A..         MOV     ?V2,R2
   \   00000E   8B..         MOV     ?V3,R3
   \   000010   8C..         MOV     ?V1,R4
    787            osalNvHdr_t hdr;
    788          
    789            offset -= OSAL_NV_HDR_SIZE;
   \   000012   E5..         MOV     A,?V2
   \   000014   24F8         ADD     A,#-0x8
   \   000016   F5..         MOV     ?V2,A
   \   000018   E5..         MOV     A,?V3
   \   00001A   34FF         ADDC    A,#-0x1
   \   00001C   F5..         MOV     ?V3,A
    790            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   00001E                ; Setup parameters for call to function HalFlashRead
   \   00001E   75..08       MOV     ?V4,#0x8
   \   000021   75..00       MOV     ?V5,#0x0
   \   000024   78..         MOV     R0,#?V4
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7402         MOV     A,#0x2
   \   00002B   12....       LCALL   ?XSTACK_DISP102_8
   \   00002E   AA..         MOV     R2,?V2
   \   000030   AB..         MOV     R3,?V3
   \   000032   A9..         MOV     R1,?V0
   \   000034   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   000037   7402         MOV     A,#0x2
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
    791          
    792            if ( stat == eNvXfer )
   \   00003C   E5..         MOV     A,?V1
   \   00003E   7025         JNZ     ??setItem_0
    793            {
    794              hdr.stat = OSAL_NV_ACTIVE;
   \   000040   7406         MOV     A,#0x6
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   7400         MOV     A,#0x0
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   7400         MOV     A,#0x0
   \   00004B   F0           MOVX    @DPTR,A
    795              writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
   \   00004C                ; Setup parameters for call to function writeWord
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   AC82         MOV     R4,DPL
   \   000053   AD83         MOV     R5,DPH
   \   000055   E5..         MOV     A,?V2
   \   000057   2404         ADD     A,#0x4
   \   000059   FA           MOV     R2,A
   \   00005A   E4           CLR     A
   \   00005B   35..         ADDC    A,?V3
   \   00005D   FB           MOV     R3,A
   \   00005E   A9..         MOV     R1,?V0
   \   000060   12....       LCALL   ??writeWord?relay    ; Banked call to: writeWord
   \   000063   807D         SJMP    ??setItem_1
    796            }
    797            else // if ( stat == eNvZero )
    798            {
    799              uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
    800                                                                                    OSAL_NV_HDR_SIZE;
   \                     ??setItem_0:
   \   000065   7402         MOV     A,#0x2
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   2403         ADD     A,#0x3
   \   00006D   F5..         MOV     ?V4,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   3400         ADDC    A,#0x0
   \   000073   F5..         MOV     ?V5,A
   \   000075   7402         MOV     A,#0x2
   \   000077   78..         MOV     R0,#?V4
   \   000079   12....       LCALL   ?US_SHR
   \   00007C   E5..         MOV     A,?V4
   \   00007E   75F004       MOV     B,#0x4
   \   000081   A4           MUL     AB
   \   000082   C5..         XCH     A,?V4
   \   000084   A8F0         MOV     R0,B
   \   000086   75F000       MOV     B,#0x0
   \   000089   A4           MUL     AB
   \   00008A   28           ADD     A,R0
   \   00008B   F8           MOV     R0,A
   \   00008C   75F004       MOV     B,#0x4
   \   00008F   E5..         MOV     A,?V5
   \   000091   A4           MUL     AB
   \   000092   28           ADD     A,R0
   \   000093   F5..         MOV     ?V5,A
   \   000095   E5..         MOV     A,?V4
   \   000097   2408         ADD     A,#0x8
   \   000099   FE           MOV     R6,A
   \   00009A   E4           CLR     A
   \   00009B   35..         ADDC    A,?V5
   \   00009D   FF           MOV     R7,A
    801              hdr.id = 0;
   \   00009E   85..82       MOV     DPL,?XSP + 0
   \   0000A1   85..83       MOV     DPH,?XSP + 1
   \   0000A4   7400         MOV     A,#0x0
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   7400         MOV     A,#0x0
   \   0000AA   F0           MOVX    @DPTR,A
    802              writeWord( pg, offset, (uint8 *)(&hdr) );
   \   0000AB                ; Setup parameters for call to function writeWord
   \   0000AB   AC..         MOV     R4,?XSP + 0
   \   0000AD   AD..         MOV     R5,?XSP + 1
   \   0000AF   AA..         MOV     R2,?V2
   \   0000B1   AB..         MOV     R3,?V3
   \   0000B3   A9..         MOV     R1,?V0
   \   0000B5   12....       LCALL   ??writeWord?relay    ; Banked call to: writeWord
    803              pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
   \   0000B8   A8..         MOV     R0,?V0
   \   0000BA   7900         MOV     R1,#0x0
   \   0000BC   E8           MOV     A,R0
   \   0000BD   75F002       MOV     B,#0x2
   \   0000C0   A4           MUL     AB
   \   0000C1   C8           XCH     A,R0
   \   0000C2   AAF0         MOV     R2,B
   \   0000C4   75F000       MOV     B,#0x0
   \   0000C7   A4           MUL     AB
   \   0000C8   2A           ADD     A,R2
   \   0000C9   FA           MOV     R2,A
   \   0000CA   75F002       MOV     B,#0x2
   \   0000CD   E9           MOV     A,R1
   \   0000CE   A4           MUL     AB
   \   0000CF   2A           ADD     A,R2
   \   0000D0   F9           MOV     R1,A
   \   0000D1   74..         MOV     A,#(pgLost + 14) & 0xff
   \   0000D3   28           ADD     A,R0
   \   0000D4   F582         MOV     DPL,A
   \   0000D6   74..         MOV     A,#((pgLost - 242) >> 8) & 0xff
   \   0000D8   39           ADDC    A,R1
   \   0000D9   F583         MOV     DPH,A
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   2E           ADD     A,R6
   \   0000DD   F0           MOVX    @DPTR,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   3F           ADDC    A,R7
   \   0000E1   F0           MOVX    @DPTR,A
    804            }
    805          }
   \                     ??setItem_1:
   \   0000E2   7408         MOV     A,#0x8
   \   0000E4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E7   7F06         MOV     R7,#0x6
   \   0000E9   02....       LJMP    ?BANKED_LEAVE_XDATA
    806          
    807          /*********************************************************************
    808           * @fn      setChk
    809           *
    810           * @brief   Set the item header checksum given the data buffer offset.
    811           *
    812           * @param   pg - Valid NV page.
    813           * @param   offset - Valid offset into the page of the item data - the header
    814           *                   offset is calculated from this.
    815           * @param   chk - The checksum to set.
    816           *
    817           * @return  The checksum read back.
    818           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    819          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk )
   \                     setChk:
    820          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EC           MOV     A,R4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   ED           MOV     A,R5
   \   000014   F0           MOVX    @DPTR,A
   \   000015   89..         MOV     ?V0,R1
   \   000017   EA           MOV     A,R2
   \   000018   FE           MOV     R6,A
   \   000019   EB           MOV     A,R3
   \   00001A   FF           MOV     R7,A
    821            offset -= OSAL_NV_WORD_SIZE;
   \   00001B   EE           MOV     A,R6
   \   00001C   24FC         ADD     A,#-0x4
   \   00001E   FE           MOV     R6,A
   \   00001F   EF           MOV     A,R7
   \   000020   34FF         ADDC    A,#-0x1
   \   000022   FF           MOV     R7,A
    822            writeWordH( pg, offset, (uint8 *)&chk );
   \   000023                ; Setup parameters for call to function writeWordH
   \   000023   AC..         MOV     R4,?XSP + 0
   \   000025   AD..         MOV     R5,?XSP + 1
   \   000027   EE           MOV     A,R6
   \   000028   FA           MOV     R2,A
   \   000029   EF           MOV     A,R7
   \   00002A   FB           MOV     R3,A
   \   00002B   A9..         MOV     R1,?V0
   \   00002D   12....       LCALL   ??writeWordH?relay   ; Banked call to: writeWordH
    823            HalFlashRead( pg, offset, (uint8 *)(&chk), sizeof( chk ) );
   \   000030                ; Setup parameters for call to function HalFlashRead
   \   000030   75..02       MOV     ?V2,#0x2
   \   000033   75..00       MOV     ?V3,#0x0
   \   000036   78..         MOV     R0,#?V2
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   7402         MOV     A,#0x2
   \   00003D   12....       LCALL   ?XSTACK_DISP102_8
   \   000040   EE           MOV     A,R6
   \   000041   FA           MOV     R2,A
   \   000042   EF           MOV     A,R7
   \   000043   FB           MOV     R3,A
   \   000044   A9..         MOV     R1,?V0
   \   000046   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   000049   7402         MOV     A,#0x2
   \   00004B   12....       LCALL   ?DEALLOC_XSTACK8
    824          
    825            return chk;
   \   00004E   85..82       MOV     DPL,?XSP + 0
   \   000051   85..83       MOV     DPH,?XSP + 1
   \   000054   E0           MOVX    A,@DPTR
   \   000055   FA           MOV     R2,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   FB           MOV     R3,A
   \   000059   7402         MOV     A,#0x2
   \   00005B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005E   7F04         MOV     R7,#0x4
   \   000060   02....       LJMP    ?BANKED_LEAVE_XDATA
    826          }
    827          
    828          /*********************************************************************
    829           * @fn      calcChkB
    830           *
    831           * @brief   Calculates the data checksum over the 'buf' parameter.
    832           *
    833           * @param   len - Byte count of the data to be checksummed.
    834           * @param   buf - Data buffer to be checksummed.
    835           *
    836           * @return  Calculated checksum of the data bytes.
    837           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    838          static uint16 calcChkB( uint16 len, uint8 *buf )
   \                     calcChkB:
    839          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
    840            uint8 fill = len % OSAL_NV_WORD_SIZE;
   \   00000D   EE           MOV     A,R6
   \   00000E   F8           MOV     R0,A
   \   00000F   EF           MOV     A,R7
   \   000010   F9           MOV     R1,A
   \   000011   7A04         MOV     R2,#0x4
   \   000013   7B00         MOV     R3,#0x0
   \   000015   12....       LCALL   ?US_DIV_MOD
   \   000018   EA           MOV     A,R2
   \   000019   FC           MOV     R4,A
    841            uint16 chk;
    842          
    843            if ( !buf )
   \   00001A   E582         MOV     A,DPL
   \   00001C   4583         ORL     A,DPH
   \   00001E   701F         JNZ     ??calcChkB_0
    844            {
    845              chk = len * OSAL_NV_ERASED;
   \   000020   EE           MOV     A,R6
   \   000021   F8           MOV     R0,A
   \   000022   EF           MOV     A,R7
   \   000023   F9           MOV     R1,A
   \   000024   E8           MOV     A,R0
   \   000025   75F0FF       MOV     B,#-0x1
   \   000028   A4           MUL     AB
   \   000029   C8           XCH     A,R0
   \   00002A   ADF0         MOV     R5,B
   \   00002C   75F000       MOV     B,#0x0
   \   00002F   A4           MUL     AB
   \   000030   2D           ADD     A,R5
   \   000031   FD           MOV     R5,A
   \   000032   75F0FF       MOV     B,#-0x1
   \   000035   E9           MOV     A,R1
   \   000036   A4           MUL     AB
   \   000037   2D           ADD     A,R5
   \   000038   F9           MOV     R1,A
   \   000039   E8           MOV     A,R0
   \   00003A   FA           MOV     R2,A
   \   00003B   E9           MOV     A,R1
   \   00003C   FB           MOV     R3,A
   \   00003D   8021         SJMP    ??calcChkB_1
    846            }
    847            else
    848            {
    849              chk = 0;
   \                     ??calcChkB_0:
   \   00003F   7A00         MOV     R2,#0x0
   \   000041   7B00         MOV     R3,#0x0
    850              while ( len-- )
   \                     ??calcChkB_2:
   \   000043   EE           MOV     A,R6
   \   000044   F8           MOV     R0,A
   \   000045   EF           MOV     A,R7
   \   000046   F9           MOV     R1,A
   \   000047   E8           MOV     A,R0
   \   000048   24FF         ADD     A,#-0x1
   \   00004A   FE           MOV     R6,A
   \   00004B   E9           MOV     A,R1
   \   00004C   34FF         ADDC    A,#-0x1
   \   00004E   FF           MOV     R7,A
   \   00004F   E8           MOV     A,R0
   \   000050   49           ORL     A,R1
   \   000051   600D         JZ      ??calcChkB_1
    851              {
    852                chk += *buf++;
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F8           MOV     R0,A
   \   000055   7900         MOV     R1,#0x0
   \   000057   EA           MOV     A,R2
   \   000058   28           ADD     A,R0
   \   000059   FA           MOV     R2,A
   \   00005A   EB           MOV     A,R3
   \   00005B   39           ADDC    A,R1
   \   00005C   FB           MOV     R3,A
   \   00005D   A3           INC     DPTR
   \   00005E   80E3         SJMP    ??calcChkB_2
    853              }
    854            }
    855          
    856            // calcChkF() will calculate over OSAL_NV_WORD_SIZE alignment.
    857            if ( fill )
   \                     ??calcChkB_1:
   \   000060   EC           MOV     A,R4
   \   000061   6028         JZ      ??calcChkB_3
    858            {
    859              chk += (OSAL_NV_WORD_SIZE - fill) * OSAL_NV_ERASED;
   \   000063   EC           MOV     A,R4
   \   000064   F8           MOV     R0,A
   \   000065   7900         MOV     R1,#0x0
   \   000067   7404         MOV     A,#0x4
   \   000069   C3           CLR     C
   \   00006A   98           SUBB    A,R0
   \   00006B   F8           MOV     R0,A
   \   00006C   7400         MOV     A,#0x0
   \   00006E   99           SUBB    A,R1
   \   00006F   F9           MOV     R1,A
   \   000070   E8           MOV     A,R0
   \   000071   75F0FF       MOV     B,#-0x1
   \   000074   A4           MUL     AB
   \   000075   C8           XCH     A,R0
   \   000076   ADF0         MOV     R5,B
   \   000078   75F000       MOV     B,#0x0
   \   00007B   A4           MUL     AB
   \   00007C   2D           ADD     A,R5
   \   00007D   FD           MOV     R5,A
   \   00007E   75F0FF       MOV     B,#-0x1
   \   000081   E9           MOV     A,R1
   \   000082   A4           MUL     AB
   \   000083   2D           ADD     A,R5
   \   000084   F9           MOV     R1,A
   \   000085   EA           MOV     A,R2
   \   000086   28           ADD     A,R0
   \   000087   FA           MOV     R2,A
   \   000088   EB           MOV     A,R3
   \   000089   39           ADDC    A,R1
   \   00008A   FB           MOV     R3,A
    860            }
    861          
    862            return chk;
   \                     ??calcChkB_3:
   \   00008B   7F01         MOV     R7,#0x1
   \   00008D   02....       LJMP    ?BANKED_LEAVE_XDATA
    863          }
    864          
    865          /*********************************************************************
    866           * @fn      calcChkF
    867           *
    868           * @brief   Calculates the data checksum by reading the data bytes from NV.
    869           *
    870           * @param   pg - A valid NV Flash page.
    871           * @param   offset - A valid offset into the page.
    872           * @param   len - Byte count of the data to be checksummed.
    873           *
    874           * @return  Calculated checksum of the data bytes.
    875           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    876          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len )
   \                     calcChkF:
    877          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8A..         MOV     ?V2,R2
   \   000018   8B..         MOV     ?V3,R3
   \   00001A   EC           MOV     A,R4
   \   00001B   FE           MOV     R6,A
   \   00001C   ED           MOV     A,R5
   \   00001D   FF           MOV     R7,A
    878            uint16 chk = 0;
   \   00001E   75..00       MOV     ?V6,#0x0
   \   000021   75..00       MOV     ?V7,#0x0
    879          
    880            len = (len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE;
   \   000024   EE           MOV     A,R6
   \   000025   2403         ADD     A,#0x3
   \   000027   F5..         MOV     ?V0,A
   \   000029   E4           CLR     A
   \   00002A   3F           ADDC    A,R7
   \   00002B   F5..         MOV     ?V1,A
   \   00002D   7402         MOV     A,#0x2
   \   00002F   78..         MOV     R0,#?V0
   \   000031   12....       LCALL   ?US_SHR
   \   000034   AE..         MOV     R6,?V0
   \   000036   AF..         MOV     R7,?V1
    881          
    882            while ( len-- )
   \                     ??calcChkF_0:
   \   000038   EE           MOV     A,R6
   \   000039   F8           MOV     R0,A
   \   00003A   EF           MOV     A,R7
   \   00003B   F9           MOV     R1,A
   \   00003C   E8           MOV     A,R0
   \   00003D   24FF         ADD     A,#-0x1
   \   00003F   FE           MOV     R6,A
   \   000040   E9           MOV     A,R1
   \   000041   34FF         ADDC    A,#-0x1
   \   000043   FF           MOV     R7,A
   \   000044   E8           MOV     A,R0
   \   000045   49           ORL     A,R1
   \   000046   605E         JZ      ??calcChkF_1
    883            {
    884              uint8 cnt, tmp[OSAL_NV_WORD_SIZE];
    885          
    886              HalFlashRead(pg, offset, tmp, OSAL_NV_WORD_SIZE);
   \   000048                ; Setup parameters for call to function HalFlashRead
   \   000048   75..04       MOV     ?V4,#0x4
   \   00004B   75..00       MOV     ?V5,#0x0
   \   00004E   78..         MOV     R0,#?V4
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000053   7403         MOV     A,#0x3
   \   000055   12....       LCALL   ?XSTACK_DISP102_8
   \   000058   AA..         MOV     R2,?V2
   \   00005A   AB..         MOV     R3,?V3
   \   00005C   7402         MOV     A,#0x2
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F9           MOV     R1,A
   \   000063   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   000066   7402         MOV     A,#0x2
   \   000068   12....       LCALL   ?DEALLOC_XSTACK8
    887              offset += OSAL_NV_WORD_SIZE;
   \   00006B   E5..         MOV     A,?V2
   \   00006D   2404         ADD     A,#0x4
   \   00006F   F5..         MOV     ?V2,A
   \   000071   E5..         MOV     A,?V3
   \   000073   3400         ADDC    A,#0x0
   \   000075   F5..         MOV     ?V3,A
    888          
    889              for ( cnt = 0; cnt < OSAL_NV_WORD_SIZE; cnt++ )
   \   000077   75..00       MOV     ?V0,#0x0
   \                     ??calcChkF_2:
   \   00007A   E5..         MOV     A,?V0
   \   00007C   C3           CLR     C
   \   00007D   9404         SUBB    A,#0x4
   \   00007F   50B7         JNC     ??calcChkF_0
    890              {
    891                chk += tmp[cnt];
   \   000081   A8..         MOV     R0,?V0
   \   000083   7900         MOV     R1,#0x0
   \   000085   7401         MOV     A,#0x1
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   E582         MOV     A,DPL
   \   00008C   28           ADD     A,R0
   \   00008D   F582         MOV     DPL,A
   \   00008F   E583         MOV     A,DPH
   \   000091   39           ADDC    A,R1
   \   000092   F583         MOV     DPH,A
   \   000094   E0           MOVX    A,@DPTR
   \   000095   F8           MOV     R0,A
   \   000096   7900         MOV     R1,#0x0
   \   000098   E5..         MOV     A,?V6
   \   00009A   28           ADD     A,R0
   \   00009B   F5..         MOV     ?V6,A
   \   00009D   E5..         MOV     A,?V7
   \   00009F   39           ADDC    A,R1
   \   0000A0   F5..         MOV     ?V7,A
    892              }
   \   0000A2   05..         INC     ?V0
   \   0000A4   80D4         SJMP    ??calcChkF_2
    893            }
    894          
    895            return chk;
   \                     ??calcChkF_1:
   \   0000A6   AA..         MOV     R2,?V6
   \   0000A8   AB..         MOV     R3,?V7
   \   0000AA   7405         MOV     A,#0x5
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AF   7F08         MOV     R7,#0x8
   \   0000B1   02....       LJMP    ?BANKED_LEAVE_XDATA
    896          }
    897          
    898          /*********************************************************************
    899           * @fn      writeWord
    900           *
    901           * @brief   Writes a Flash-WORD to NV.
    902           *
    903           * @param   pg - A valid NV Flash page.
    904           * @param   offset - A valid offset into the page.
    905           * @param   buf - Pointer to source buffer.
    906           *
    907           * @return  none
    908           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    909          static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWord:
    910          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V2,R2
   \   000009   8B..         MOV     ?V3,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
    911            offset = (offset / HAL_FLASH_WORD_SIZE) +
    912                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
   \   00000F   7402         MOV     A,#0x2
   \   000011   78..         MOV     R0,#?V2
   \   000013   12....       LCALL   ?US_SHR
   \   000016   A8..         MOV     R0,?V0
   \   000018   7900         MOV     R1,#0x0
   \   00001A   E8           MOV     A,R0
   \   00001B   75F000       MOV     B,#0x0
   \   00001E   A4           MUL     AB
   \   00001F   C8           XCH     A,R0
   \   000020   AAF0         MOV     R2,B
   \   000022   75F002       MOV     B,#0x2
   \   000025   A4           MUL     AB
   \   000026   2A           ADD     A,R2
   \   000027   FA           MOV     R2,A
   \   000028   75F000       MOV     B,#0x0
   \   00002B   E9           MOV     A,R1
   \   00002C   A4           MUL     AB
   \   00002D   2A           ADD     A,R2
   \   00002E   F9           MOV     R1,A
   \   00002F   E5..         MOV     A,?V2
   \   000031   28           ADD     A,R0
   \   000032   F5..         MOV     ?V2,A
   \   000034   E5..         MOV     A,?V3
   \   000036   39           ADDC    A,R1
   \   000037   F5..         MOV     ?V3,A
    913          
    914            HalFlashWrite(offset, buf, 1);
   \   000039                ; Setup parameters for call to function HalFlashWrite
   \   000039   75..01       MOV     ?V4,#0x1
   \   00003C   75..00       MOV     ?V5,#0x0
   \   00003F   78..         MOV     R0,#?V4
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   EE           MOV     A,R6
   \   000045   FC           MOV     R4,A
   \   000046   EF           MOV     A,R7
   \   000047   FD           MOV     R5,A
   \   000048   AA..         MOV     R2,?V2
   \   00004A   AB..         MOV     R3,?V3
   \   00004C   12....       LCALL   ??HalFlashWrite?relay; Banked call to: HalFlashWrite
   \   00004F   7402         MOV     A,#0x2
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
    915          }
   \   000054   7F06         MOV     R7,#0x6
   \   000056   02....       LJMP    ?BANKED_LEAVE_XDATA
    916          
    917          /*********************************************************************
    918           * @fn      writeWordM
    919           *
    920           * @brief   Writes multiple Flash-WORDs to NV.
    921           *
    922           * @param   pg - A valid NV Flash page.
    923           * @param   offset - A valid offset into the page.
    924           * @param   buf - Pointer to source buffer.
    925           * @param   cnt - Number of 4-byte blocks to write.
    926           *
    927           * @return  none
    928           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    929          static void writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt )
   \                     writeWordM:
    930          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V2,R2
   \   000009   8B..         MOV     ?V3,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   \   00000F   740E         MOV     A,#0xe
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V4,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V5,A
    931            offset = (offset / HAL_FLASH_WORD_SIZE) +
    932                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
   \   00001B   7402         MOV     A,#0x2
   \   00001D   78..         MOV     R0,#?V2
   \   00001F   12....       LCALL   ?US_SHR
   \   000022   A8..         MOV     R0,?V0
   \   000024   7900         MOV     R1,#0x0
   \   000026   E8           MOV     A,R0
   \   000027   75F000       MOV     B,#0x0
   \   00002A   A4           MUL     AB
   \   00002B   C8           XCH     A,R0
   \   00002C   AAF0         MOV     R2,B
   \   00002E   75F002       MOV     B,#0x2
   \   000031   A4           MUL     AB
   \   000032   2A           ADD     A,R2
   \   000033   FA           MOV     R2,A
   \   000034   75F000       MOV     B,#0x0
   \   000037   E9           MOV     A,R1
   \   000038   A4           MUL     AB
   \   000039   2A           ADD     A,R2
   \   00003A   F9           MOV     R1,A
   \   00003B   E5..         MOV     A,?V2
   \   00003D   28           ADD     A,R0
   \   00003E   F5..         MOV     ?V2,A
   \   000040   E5..         MOV     A,?V3
   \   000042   39           ADDC    A,R1
   \   000043   F5..         MOV     ?V3,A
    933            HalFlashWrite(offset, buf, cnt);
   \   000045                ; Setup parameters for call to function HalFlashWrite
   \   000045   78..         MOV     R0,#?V4
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   EE           MOV     A,R6
   \   00004B   FC           MOV     R4,A
   \   00004C   EF           MOV     A,R7
   \   00004D   FD           MOV     R5,A
   \   00004E   AA..         MOV     R2,?V2
   \   000050   AB..         MOV     R3,?V3
   \   000052   12....       LCALL   ??HalFlashWrite?relay; Banked call to: HalFlashWrite
   \   000055   7402         MOV     A,#0x2
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
    934          }
   \   00005A   7F06         MOV     R7,#0x6
   \   00005C   02....       LJMP    ?BANKED_LEAVE_XDATA
    935          
    936          /*********************************************************************
    937           * @fn      writeWordH
    938           *
    939           * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
    940           *
    941           * @param   pg - A valid NV Flash page.
    942           * @param   offset - A valid offset into the page.
    943           * @param   buf - Pointer to source buffer.
    944           *
    945           * @return  none
    946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    947          static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWordH:
    948          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
   \   000010   8C..         MOV     ?V2,R4
   \   000012   8D..         MOV     ?V3,R5
    949            uint8 tmp[4];
    950          
    951            tmp[0] = buf[0];
   \   000014   85..82       MOV     DPL,?V2
   \   000017   85..83       MOV     DPH,?V3
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   C0E0         PUSH    A
   \   00001D   85..82       MOV     DPL,?XSP + 0
   \   000020   85..83       MOV     DPH,?XSP + 1
   \   000023   D0E0         POP     A
   \   000025   F0           MOVX    @DPTR,A
    952            tmp[1] = buf[1];
   \   000026   85..82       MOV     DPL,?V2
   \   000029   85..83       MOV     DPH,?V3
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   C0E0         PUSH    A
   \   000030   7401         MOV     A,#0x1
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   D0E0         POP     A
   \   000037   F0           MOVX    @DPTR,A
    953            tmp[2] = OSAL_NV_ERASED;
   \   000038   7402         MOV     A,#0x2
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   74FF         MOV     A,#-0x1
   \   00003F   F0           MOVX    @DPTR,A
    954            tmp[3] = OSAL_NV_ERASED;
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   74FF         MOV     A,#-0x1
   \   000047   F0           MOVX    @DPTR,A
    955          
    956            writeWord( pg, offset, tmp );
   \   000048                ; Setup parameters for call to function writeWord
   \   000048   AC..         MOV     R4,?XSP + 0
   \   00004A   AD..         MOV     R5,?XSP + 1
   \   00004C   EE           MOV     A,R6
   \   00004D   FA           MOV     R2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   FB           MOV     R3,A
   \   000050   A9..         MOV     R1,?V0
   \   000052   12....       LCALL   ??writeWord?relay    ; Banked call to: writeWord
    957          }
   \   000055   7404         MOV     A,#0x4
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   7F04         MOV     R7,#0x4
   \   00005C   02....       LJMP    ?BANKED_LEAVE_XDATA
    958          
    959          /*********************************************************************
    960           * @fn      writeBuf
    961           *
    962           * @brief   Writes a data buffer to NV.
    963           *
    964           * @param   dstPg - A valid NV Flash page.
    965           * @param   offset - A valid offset into the page.
    966           * @param   len  - Byte count of the data to write.
    967           * @param   buf  - The data to write.
    968           *
    969           * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
    970           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    971          static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
   \                     writeBuf:
    972          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   EA           MOV     A,R2
   \   000017   FE           MOV     R6,A
   \   000018   EB           MOV     A,R3
   \   000019   FF           MOV     R7,A
   \   00001A   8C..         MOV     ?V0,R4
   \   00001C   8D..         MOV     ?V1,R5
   \   00001E   7416         MOV     A,#0x16
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V6,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V7,A
    973            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   00002A   EE           MOV     A,R6
   \   00002B   F8           MOV     R0,A
   \   00002C   EF           MOV     A,R7
   \   00002D   F9           MOV     R1,A
   \   00002E   7A04         MOV     R2,#0x4
   \   000030   7B00         MOV     R3,#0x0
   \   000032   12....       LCALL   ?US_DIV_MOD
   \   000035   EA           MOV     A,R2
   \   000036   F5..         MOV     ?V2,A
    974            uint8 tmp[OSAL_NV_WORD_SIZE];
    975          
    976            if ( rem )
   \   000038   E5..         MOV     A,?V2
   \   00003A   7003         JNZ     $+5
   \   00003C   02....       LJMP    ??writeBuf_0 & 0xFFFF
    977            {
    978              dstOff = (dstOff / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
   \   00003F   8E..         MOV     ?V4,R6
   \   000041   8F..         MOV     ?V5,R7
   \   000043   7402         MOV     A,#0x2
   \   000045   78..         MOV     R0,#?V4
   \   000047   12....       LCALL   ?US_SHR
   \   00004A   AE..         MOV     R6,?V4
   \   00004C   AF..         MOV     R7,?V5
   \   00004E   EE           MOV     A,R6
   \   00004F   75F004       MOV     B,#0x4
   \   000052   A4           MUL     AB
   \   000053   CE           XCH     A,R6
   \   000054   A8F0         MOV     R0,B
   \   000056   75F000       MOV     B,#0x0
   \   000059   A4           MUL     AB
   \   00005A   28           ADD     A,R0
   \   00005B   F8           MOV     R0,A
   \   00005C   75F004       MOV     B,#0x4
   \   00005F   EF           MOV     A,R7
   \   000060   A4           MUL     AB
   \   000061   28           ADD     A,R0
   \   000062   FF           MOV     R7,A
    979              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000063                ; Setup parameters for call to function HalFlashRead
   \   000063   75..04       MOV     ?V4,#0x4
   \   000066   75..00       MOV     ?V5,#0x0
   \   000069   78..         MOV     R0,#?V4
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   7404         MOV     A,#0x4
   \   000070   12....       LCALL   ?XSTACK_DISP102_8
   \   000073   EE           MOV     A,R6
   \   000074   FA           MOV     R2,A
   \   000075   EF           MOV     A,R7
   \   000076   FB           MOV     R3,A
   \   000077   7402         MOV     A,#0x2
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F9           MOV     R1,A
   \   00007E   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   000081   7402         MOV     A,#0x2
   \   000083   12....       LCALL   ?DEALLOC_XSTACK8
    980          
    981              while ( (rem < OSAL_NV_WORD_SIZE) && len )
   \                     ??writeBuf_1:
   \   000086   E5..         MOV     A,?V2
   \   000088   C3           CLR     C
   \   000089   9404         SUBB    A,#0x4
   \   00008B   5042         JNC     ??writeBuf_2
   \   00008D   E5..         MOV     A,?V0
   \   00008F   45..         ORL     A,?V1
   \   000091   603C         JZ      ??writeBuf_2
    982              {
    983                tmp[rem++] = *buf++;
   \   000093   85..82       MOV     DPL,?V6
   \   000096   85..83       MOV     DPH,?V7
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   C0E0         PUSH    A
   \   00009C   A8..         MOV     R0,?V2
   \   00009E   7900         MOV     R1,#0x0
   \   0000A0   7402         MOV     A,#0x2
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   E582         MOV     A,DPL
   \   0000A7   28           ADD     A,R0
   \   0000A8   F582         MOV     DPL,A
   \   0000AA   E583         MOV     A,DPH
   \   0000AC   39           ADDC    A,R1
   \   0000AD   F583         MOV     DPH,A
   \   0000AF   D0E0         POP     A
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   85..82       MOV     DPL,?V6
   \   0000B5   85..83       MOV     DPH,?V7
   \   0000B8   A3           INC     DPTR
   \   0000B9   8582..       MOV     ?V6,DPL
   \   0000BC   8583..       MOV     ?V7,DPH
   \   0000BF   05..         INC     ?V2
    984                len--;
   \   0000C1   E5..         MOV     A,?V0
   \   0000C3   24FF         ADD     A,#-0x1
   \   0000C5   F5..         MOV     ?V0,A
   \   0000C7   E5..         MOV     A,?V1
   \   0000C9   34FF         ADDC    A,#-0x1
   \   0000CB   F5..         MOV     ?V1,A
   \   0000CD   80B7         SJMP    ??writeBuf_1
    985              }
    986          
    987              writeWord( dstPg, dstOff, tmp );
   \                     ??writeBuf_2:
   \   0000CF                ; Setup parameters for call to function writeWord
   \   0000CF   7402         MOV     A,#0x2
   \   0000D1   12....       LCALL   ?XSTACK_DISP102_8
   \   0000D4   EE           MOV     A,R6
   \   0000D5   FA           MOV     R2,A
   \   0000D6   EF           MOV     A,R7
   \   0000D7   FB           MOV     R3,A
   \   0000D8   85..82       MOV     DPL,?XSP + 0
   \   0000DB   85..83       MOV     DPH,?XSP + 1
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   F9           MOV     R1,A
   \   0000E0   12....       LCALL   ??writeWord?relay    ; Banked call to: writeWord
    988              dstOff += OSAL_NV_WORD_SIZE;
   \   0000E3   EE           MOV     A,R6
   \   0000E4   2404         ADD     A,#0x4
   \   0000E6   FE           MOV     R6,A
   \   0000E7   EF           MOV     A,R7
   \   0000E8   3400         ADDC    A,#0x0
   \   0000EA   FF           MOV     R7,A
    989            }
    990          
    991            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??writeBuf_0:
   \   0000EB   A8..         MOV     R0,?V0
   \   0000ED   A9..         MOV     R1,?V1
   \   0000EF   7A04         MOV     R2,#0x4
   \   0000F1   7B00         MOV     R3,#0x0
   \   0000F3   12....       LCALL   ?US_DIV_MOD
   \   0000F6   EA           MOV     A,R2
   \   0000F7   F5..         MOV     ?V2,A
    992            len /= OSAL_NV_WORD_SIZE;
   \   0000F9   85....       MOV     ?V4,?V0
   \   0000FC   85....       MOV     ?V5,?V1
   \   0000FF   7402         MOV     A,#0x2
   \   000101   78..         MOV     R0,#?V4
   \   000103   12....       LCALL   ?US_SHR
   \   000106   85....       MOV     ?V0,?V4
   \   000109   85....       MOV     ?V1,?V5
    993          
    994            if ( len )
   \   00010C   E5..         MOV     A,?V0
   \   00010E   45..         ORL     A,?V1
   \   000110   605E         JZ      ??writeBuf_3
    995            {
    996              writeWordM( dstPg, dstOff, buf, len );
   \   000112                ; Setup parameters for call to function writeWordM
   \   000112   78..         MOV     R0,#?V0
   \   000114   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000117   AC..         MOV     R4,?V6
   \   000119   AD..         MOV     R5,?V7
   \   00011B   EE           MOV     A,R6
   \   00011C   FA           MOV     R2,A
   \   00011D   EF           MOV     A,R7
   \   00011E   FB           MOV     R3,A
   \   00011F   7402         MOV     A,#0x2
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   E0           MOVX    A,@DPTR
   \   000125   F9           MOV     R1,A
   \   000126   12....       LCALL   ??writeWordM?relay   ; Banked call to: writeWordM
   \   000129   7402         MOV     A,#0x2
   \   00012B   12....       LCALL   ?DEALLOC_XSTACK8
    997              dstOff += OSAL_NV_WORD_SIZE * len;
   \   00012E   A8..         MOV     R0,?V0
   \   000130   A9..         MOV     R1,?V1
   \   000132   E8           MOV     A,R0
   \   000133   75F004       MOV     B,#0x4
   \   000136   A4           MUL     AB
   \   000137   C8           XCH     A,R0
   \   000138   AAF0         MOV     R2,B
   \   00013A   75F000       MOV     B,#0x0
   \   00013D   A4           MUL     AB
   \   00013E   2A           ADD     A,R2
   \   00013F   FA           MOV     R2,A
   \   000140   75F004       MOV     B,#0x4
   \   000143   E9           MOV     A,R1
   \   000144   A4           MUL     AB
   \   000145   2A           ADD     A,R2
   \   000146   F9           MOV     R1,A
   \   000147   EE           MOV     A,R6
   \   000148   28           ADD     A,R0
   \   000149   FE           MOV     R6,A
   \   00014A   EF           MOV     A,R7
   \   00014B   39           ADDC    A,R1
   \   00014C   FF           MOV     R7,A
    998              buf += OSAL_NV_WORD_SIZE * len;
   \   00014D   A8..         MOV     R0,?V0
   \   00014F   A9..         MOV     R1,?V1
   \   000151   E8           MOV     A,R0
   \   000152   75F004       MOV     B,#0x4
   \   000155   A4           MUL     AB
   \   000156   C8           XCH     A,R0
   \   000157   AAF0         MOV     R2,B
   \   000159   75F000       MOV     B,#0x0
   \   00015C   A4           MUL     AB
   \   00015D   2A           ADD     A,R2
   \   00015E   FA           MOV     R2,A
   \   00015F   75F004       MOV     B,#0x4
   \   000162   E9           MOV     A,R1
   \   000163   A4           MUL     AB
   \   000164   2A           ADD     A,R2
   \   000165   F9           MOV     R1,A
   \   000166   E5..         MOV     A,?V6
   \   000168   28           ADD     A,R0
   \   000169   F5..         MOV     ?V6,A
   \   00016B   E5..         MOV     A,?V7
   \   00016D   39           ADDC    A,R1
   \   00016E   F5..         MOV     ?V7,A
    999            }
   1000          
   1001            if ( rem )
   \                     ??writeBuf_3:
   \   000170   E5..         MOV     A,?V2
   \   000172   7003         JNZ     $+5
   \   000174   02....       LJMP    ??writeBuf_4 & 0xFFFF
   1002            {
   1003              uint8 idx = 0;
   \   000177   7401         MOV     A,#0x1
   \   000179   12....       LCALL   ?XSTACK_DISP0_8
   \   00017C   7400         MOV     A,#0x0
   \   00017E   F0           MOVX    @DPTR,A
   1004              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   00017F                ; Setup parameters for call to function HalFlashRead
   \   00017F   75..04       MOV     ?V4,#0x4
   \   000182   75..00       MOV     ?V5,#0x0
   \   000185   78..         MOV     R0,#?V4
   \   000187   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018A   7404         MOV     A,#0x4
   \   00018C   12....       LCALL   ?XSTACK_DISP102_8
   \   00018F   EE           MOV     A,R6
   \   000190   FA           MOV     R2,A
   \   000191   EF           MOV     A,R7
   \   000192   FB           MOV     R3,A
   \   000193   7402         MOV     A,#0x2
   \   000195   12....       LCALL   ?XSTACK_DISP0_8
   \   000198   E0           MOVX    A,@DPTR
   \   000199   F9           MOV     R1,A
   \   00019A   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   00019D   7402         MOV     A,#0x2
   \   00019F   12....       LCALL   ?DEALLOC_XSTACK8
   1005              while ( rem-- )
   \                     ??writeBuf_5:
   \   0001A2   85....       MOV     ?V3,?V2
   \   0001A5   74FF         MOV     A,#-0x1
   \   0001A7   25..         ADD     A,?V3
   \   0001A9   F5..         MOV     ?V2,A
   \   0001AB   E5..         MOV     A,?V3
   \   0001AD   603C         JZ      ??writeBuf_6
   1006              {
   1007                tmp[idx++] = *buf++;
   \   0001AF   85..82       MOV     DPL,?V6
   \   0001B2   85..83       MOV     DPH,?V7
   \   0001B5   E0           MOVX    A,@DPTR
   \   0001B6   C0E0         PUSH    A
   \   0001B8   7401         MOV     A,#0x1
   \   0001BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   F8           MOV     R0,A
   \   0001BF   7900         MOV     R1,#0x0
   \   0001C1   7402         MOV     A,#0x2
   \   0001C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C6   E582         MOV     A,DPL
   \   0001C8   28           ADD     A,R0
   \   0001C9   F582         MOV     DPL,A
   \   0001CB   E583         MOV     A,DPH
   \   0001CD   39           ADDC    A,R1
   \   0001CE   F583         MOV     DPH,A
   \   0001D0   D0E0         POP     A
   \   0001D2   F0           MOVX    @DPTR,A
   \   0001D3   85..82       MOV     DPL,?V6
   \   0001D6   85..83       MOV     DPH,?V7
   \   0001D9   A3           INC     DPTR
   \   0001DA   8582..       MOV     ?V6,DPL
   \   0001DD   8583..       MOV     ?V7,DPH
   \   0001E0   7401         MOV     A,#0x1
   \   0001E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E5   E0           MOVX    A,@DPTR
   \   0001E6   2401         ADD     A,#0x1
   \   0001E8   F0           MOVX    @DPTR,A
   \   0001E9   80B7         SJMP    ??writeBuf_5
   1008              }
   1009              writeWord( dstPg, dstOff, tmp );
   \                     ??writeBuf_6:
   \   0001EB                ; Setup parameters for call to function writeWord
   \   0001EB   7402         MOV     A,#0x2
   \   0001ED   12....       LCALL   ?XSTACK_DISP102_8
   \   0001F0   EE           MOV     A,R6
   \   0001F1   FA           MOV     R2,A
   \   0001F2   EF           MOV     A,R7
   \   0001F3   FB           MOV     R3,A
   \   0001F4   85..82       MOV     DPL,?XSP + 0
   \   0001F7   85..83       MOV     DPH,?XSP + 1
   \   0001FA   E0           MOVX    A,@DPTR
   \   0001FB   F9           MOV     R1,A
   \   0001FC   12....       LCALL   ??writeWord?relay    ; Banked call to: writeWord
   1010            }
   1011          }
   \                     ??writeBuf_4:
   \   0001FF   7406         MOV     A,#0x6
   \   000201   12....       LCALL   ?DEALLOC_XSTACK8
   \   000204   7F08         MOV     R7,#0x8
   \   000206   02....       LJMP    ?BANKED_LEAVE_XDATA
   1012          
   1013          /*********************************************************************
   1014           * @fn      xferBuf
   1015           *
   1016           * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
   1017           *
   1018           * @return  none
   1019           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1020          static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
   \                     xferBuf:
   1021          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   8C..         MOV     ?V7,R4
   \   000022   7417         MOV     A,#0x17
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V1,A
   \   00002E   7419         MOV     A,#0x19
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FE           MOV     R6,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   FF           MOV     R7,A
   1022            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   000038   A8..         MOV     R0,?V0
   \   00003A   A9..         MOV     R1,?V1
   \   00003C   7A04         MOV     R2,#0x4
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   ?US_DIV_MOD
   \   000043   EA           MOV     A,R2
   \   000044   F5..         MOV     ?V2,A
   1023            uint8 tmp[OSAL_NV_WORD_SIZE];
   1024          
   1025            if ( rem )
   \   000046   E5..         MOV     A,?V2
   \   000048   7003         JNZ     $+5
   \   00004A   02....       LJMP    ??xferBuf_0 & 0xFFFF
   1026            {
   1027              dstOff -= rem;
   \   00004D   A8..         MOV     R0,?V2
   \   00004F   7900         MOV     R1,#0x0
   \   000051   C3           CLR     C
   \   000052   E5..         MOV     A,?V0
   \   000054   98           SUBB    A,R0
   \   000055   F5..         MOV     ?V0,A
   \   000057   E5..         MOV     A,?V1
   \   000059   99           SUBB    A,R1
   \   00005A   F5..         MOV     ?V1,A
   1028              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   00005C                ; Setup parameters for call to function HalFlashRead
   \   00005C   75..04       MOV     ?V4,#0x4
   \   00005F   75..00       MOV     ?V5,#0x0
   \   000062   78..         MOV     R0,#?V4
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   7405         MOV     A,#0x5
   \   000069   12....       LCALL   ?XSTACK_DISP102_8
   \   00006C   AA..         MOV     R2,?V0
   \   00006E   AB..         MOV     R3,?V1
   \   000070   A9..         MOV     R1,?V7
   \   000072   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   000075   7402         MOV     A,#0x2
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
   1029          
   1030              while ( (rem < OSAL_NV_WORD_SIZE) && len )
   \                     ??xferBuf_1:
   \   00007A   E5..         MOV     A,?V2
   \   00007C   C3           CLR     C
   \   00007D   9404         SUBB    A,#0x4
   \   00007F   5053         JNC     ??xferBuf_2
   \   000081   EE           MOV     A,R6
   \   000082   4F           ORL     A,R7
   \   000083   604F         JZ      ??xferBuf_2
   1031              {
   1032                HalFlashRead(srcPg, srcOff, tmp+rem, 1);
   \   000085                ; Setup parameters for call to function HalFlashRead
   \   000085   75..01       MOV     ?V4,#0x1
   \   000088   75..00       MOV     ?V5,#0x0
   \   00008B   78..         MOV     R0,#?V4
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000090   A8..         MOV     R0,?V2
   \   000092   7900         MOV     R1,#0x0
   \   000094   7405         MOV     A,#0x5
   \   000096   12....       LCALL   ?XSTACK_DISP0_8
   \   000099   E582         MOV     A,DPL
   \   00009B   28           ADD     A,R0
   \   00009C   FC           MOV     R4,A
   \   00009D   E583         MOV     A,DPH
   \   00009F   39           ADDC    A,R1
   \   0000A0   FD           MOV     R5,A
   \   0000A1   7403         MOV     A,#0x3
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   FA           MOV     R2,A
   \   0000A8   A3           INC     DPTR
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   FB           MOV     R3,A
   \   0000AB   7402         MOV     A,#0x2
   \   0000AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   F9           MOV     R1,A
   \   0000B2   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   0000B5   7402         MOV     A,#0x2
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   1033                srcOff++;
   \   0000BA   7401         MOV     A,#0x1
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   2401         ADD     A,#0x1
   \   0000C2   F0           MOVX    @DPTR,A
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   3400         ADDC    A,#0x0
   \   0000C7   F0           MOVX    @DPTR,A
   1034                rem++;
   \   0000C8   05..         INC     ?V2
   1035                len--;
   \   0000CA   EE           MOV     A,R6
   \   0000CB   24FF         ADD     A,#-0x1
   \   0000CD   FE           MOV     R6,A
   \   0000CE   EF           MOV     A,R7
   \   0000CF   34FF         ADDC    A,#-0x1
   \   0000D1   FF           MOV     R7,A
   \   0000D2   80A6         SJMP    ??xferBuf_1
   1036              }
   1037          
   1038              writeWord( dstPg, dstOff, tmp );
   \                     ??xferBuf_2:
   \   0000D4                ; Setup parameters for call to function writeWord
   \   0000D4   7403         MOV     A,#0x3
   \   0000D6   12....       LCALL   ?XSTACK_DISP102_8
   \   0000D9   AA..         MOV     R2,?V0
   \   0000DB   AB..         MOV     R3,?V1
   \   0000DD   A9..         MOV     R1,?V7
   \   0000DF   12....       LCALL   ??writeWord?relay    ; Banked call to: writeWord
   1039              dstOff += OSAL_NV_WORD_SIZE;
   \   0000E2   E5..         MOV     A,?V0
   \   0000E4   2404         ADD     A,#0x4
   \   0000E6   F5..         MOV     ?V0,A
   \   0000E8   E5..         MOV     A,?V1
   \   0000EA   3400         ADDC    A,#0x0
   \   0000EC   F5..         MOV     ?V1,A
   1040            }
   1041          
   1042            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??xferBuf_0:
   \   0000EE   EE           MOV     A,R6
   \   0000EF   F8           MOV     R0,A
   \   0000F0   EF           MOV     A,R7
   \   0000F1   F9           MOV     R1,A
   \   0000F2   7A04         MOV     R2,#0x4
   \   0000F4   7B00         MOV     R3,#0x0
   \   0000F6   12....       LCALL   ?US_DIV_MOD
   \   0000F9   EA           MOV     A,R2
   \   0000FA   F5..         MOV     ?V2,A
   1043            len /= OSAL_NV_WORD_SIZE;
   \   0000FC   8E..         MOV     ?V4,R6
   \   0000FE   8F..         MOV     ?V5,R7
   \   000100   7402         MOV     A,#0x2
   \   000102   78..         MOV     R0,#?V4
   \   000104   12....       LCALL   ?US_SHR
   \   000107   AE..         MOV     R6,?V4
   \   000109   AF..         MOV     R7,?V5
   1044          
   1045            while ( len-- )
   \                     ??xferBuf_3:
   \   00010B   EE           MOV     A,R6
   \   00010C   F8           MOV     R0,A
   \   00010D   EF           MOV     A,R7
   \   00010E   F9           MOV     R1,A
   \   00010F   E8           MOV     A,R0
   \   000110   24FF         ADD     A,#-0x1
   \   000112   FE           MOV     R6,A
   \   000113   E9           MOV     A,R1
   \   000114   34FF         ADDC    A,#-0x1
   \   000116   FF           MOV     R7,A
   \   000117   E8           MOV     A,R0
   \   000118   49           ORL     A,R1
   \   000119   6053         JZ      ??xferBuf_4
   1046            {
   1047              HalFlashRead(srcPg, srcOff, tmp, OSAL_NV_WORD_SIZE);
   \   00011B                ; Setup parameters for call to function HalFlashRead
   \   00011B   75..04       MOV     ?V4,#0x4
   \   00011E   75..00       MOV     ?V5,#0x0
   \   000121   78..         MOV     R0,#?V4
   \   000123   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000126   7405         MOV     A,#0x5
   \   000128   12....       LCALL   ?XSTACK_DISP102_8
   \   00012B   7403         MOV     A,#0x3
   \   00012D   12....       LCALL   ?XSTACK_DISP0_8
   \   000130   E0           MOVX    A,@DPTR
   \   000131   FA           MOV     R2,A
   \   000132   A3           INC     DPTR
   \   000133   E0           MOVX    A,@DPTR
   \   000134   FB           MOV     R3,A
   \   000135   7402         MOV     A,#0x2
   \   000137   12....       LCALL   ?XSTACK_DISP0_8
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   F9           MOV     R1,A
   \   00013C   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   00013F   7402         MOV     A,#0x2
   \   000141   12....       LCALL   ?DEALLOC_XSTACK8
   1048              srcOff += OSAL_NV_WORD_SIZE;
   \   000144   7401         MOV     A,#0x1
   \   000146   12....       LCALL   ?XSTACK_DISP0_8
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   2404         ADD     A,#0x4
   \   00014C   F0           MOVX    @DPTR,A
   \   00014D   A3           INC     DPTR
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   3400         ADDC    A,#0x0
   \   000151   F0           MOVX    @DPTR,A
   1049              writeWord( dstPg, dstOff, tmp );
   \   000152                ; Setup parameters for call to function writeWord
   \   000152   7403         MOV     A,#0x3
   \   000154   12....       LCALL   ?XSTACK_DISP102_8
   \   000157   AA..         MOV     R2,?V0
   \   000159   AB..         MOV     R3,?V1
   \   00015B   A9..         MOV     R1,?V7
   \   00015D   12....       LCALL   ??writeWord?relay    ; Banked call to: writeWord
   1050              dstOff += OSAL_NV_WORD_SIZE;
   \   000160   E5..         MOV     A,?V0
   \   000162   2404         ADD     A,#0x4
   \   000164   F5..         MOV     ?V0,A
   \   000166   E5..         MOV     A,?V1
   \   000168   3400         ADDC    A,#0x0
   \   00016A   F5..         MOV     ?V1,A
   \   00016C   809D         SJMP    ??xferBuf_3
   1051            }
   1052          
   1053            if ( rem )
   \                     ??xferBuf_4:
   \   00016E   E5..         MOV     A,?V2
   \   000170   7003         JNZ     $+5
   \   000172   02....       LJMP    ??xferBuf_5 & 0xFFFF
   1054            {
   1055              uint8 idx = 0;
   \   000175   75..00       MOV     ?V6,#0x0
   1056              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000178                ; Setup parameters for call to function HalFlashRead
   \   000178   75..04       MOV     ?V4,#0x4
   \   00017B   75..00       MOV     ?V5,#0x0
   \   00017E   78..         MOV     R0,#?V4
   \   000180   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000183   7405         MOV     A,#0x5
   \   000185   12....       LCALL   ?XSTACK_DISP102_8
   \   000188   AA..         MOV     R2,?V0
   \   00018A   AB..         MOV     R3,?V1
   \   00018C   A9..         MOV     R1,?V7
   \   00018E   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   000191   7402         MOV     A,#0x2
   \   000193   12....       LCALL   ?DEALLOC_XSTACK8
   1057              while ( rem-- )
   \                     ??xferBuf_6:
   \   000196   85....       MOV     ?V3,?V2
   \   000199   74FF         MOV     A,#-0x1
   \   00019B   25..         ADD     A,?V3
   \   00019D   F5..         MOV     ?V2,A
   \   00019F   E5..         MOV     A,?V3
   \   0001A1   6047         JZ      ??xferBuf_7
   1058              {
   1059                HalFlashRead(srcPg, srcOff, tmp+idx, 1);
   \   0001A3                ; Setup parameters for call to function HalFlashRead
   \   0001A3   75..01       MOV     ?V4,#0x1
   \   0001A6   75..00       MOV     ?V5,#0x0
   \   0001A9   78..         MOV     R0,#?V4
   \   0001AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AE   A8..         MOV     R0,?V6
   \   0001B0   7900         MOV     R1,#0x0
   \   0001B2   7405         MOV     A,#0x5
   \   0001B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B7   E582         MOV     A,DPL
   \   0001B9   28           ADD     A,R0
   \   0001BA   FC           MOV     R4,A
   \   0001BB   E583         MOV     A,DPH
   \   0001BD   39           ADDC    A,R1
   \   0001BE   FD           MOV     R5,A
   \   0001BF   7403         MOV     A,#0x3
   \   0001C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C4   E0           MOVX    A,@DPTR
   \   0001C5   FA           MOV     R2,A
   \   0001C6   A3           INC     DPTR
   \   0001C7   E0           MOVX    A,@DPTR
   \   0001C8   FB           MOV     R3,A
   \   0001C9   7402         MOV     A,#0x2
   \   0001CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CE   E0           MOVX    A,@DPTR
   \   0001CF   F9           MOV     R1,A
   \   0001D0   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   0001D3   7402         MOV     A,#0x2
   \   0001D5   12....       LCALL   ?DEALLOC_XSTACK8
   1060                srcOff++;
   \   0001D8   7401         MOV     A,#0x1
   \   0001DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   2401         ADD     A,#0x1
   \   0001E0   F0           MOVX    @DPTR,A
   \   0001E1   A3           INC     DPTR
   \   0001E2   E0           MOVX    A,@DPTR
   \   0001E3   3400         ADDC    A,#0x0
   \   0001E5   F0           MOVX    @DPTR,A
   1061                idx++;
   \   0001E6   05..         INC     ?V6
   \   0001E8   80AC         SJMP    ??xferBuf_6
   1062              }
   1063              writeWord( dstPg, dstOff, tmp );
   \                     ??xferBuf_7:
   \   0001EA                ; Setup parameters for call to function writeWord
   \   0001EA   7403         MOV     A,#0x3
   \   0001EC   12....       LCALL   ?XSTACK_DISP102_8
   \   0001EF   AA..         MOV     R2,?V0
   \   0001F1   AB..         MOV     R3,?V1
   \   0001F3   A9..         MOV     R1,?V7
   \   0001F5   12....       LCALL   ??writeWord?relay    ; Banked call to: writeWord
   1064            }
   1065          }
   \                     ??xferBuf_5:
   \   0001F8   7407         MOV     A,#0x7
   \   0001FA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001FD   7F08         MOV     R7,#0x8
   \   0001FF   02....       LJMP    ?BANKED_LEAVE_XDATA
   1066          
   1067          /*********************************************************************
   1068           * @fn      writeItem
   1069           *
   1070           * @brief   Writes an item header/data combo to the specified NV page.
   1071           *
   1072           * @param   pg - Valid NV Flash page.
   1073           * @param   id - Valid NV item Id.
   1074           * @param   len  - Byte count of the data to write.
   1075           * @param   buf  - The data to write. If NULL, no data/checksum write.
   1076           * @param   flag - TRUE if the checksum should be written, FALSE otherwise.
   1077           *
   1078           * @return  TRUE if header/data to write matches header/data read back, else FALSE.
   1079           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1080          static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag )
   \                     writeItem:
   1081          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7408         MOV     A,#0x8
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   89..         MOV     ?V0,R1
   \   000016   EC           MOV     A,R4
   \   000017   FE           MOV     R6,A
   \   000018   ED           MOV     A,R5
   \   000019   FF           MOV     R7,A
   \   00001A   741A         MOV     A,#0x1a
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V6,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V7,A
   1082            uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
   \   000026   A8..         MOV     R0,?V0
   \   000028   7900         MOV     R1,#0x0
   \   00002A   E8           MOV     A,R0
   \   00002B   75F002       MOV     B,#0x2
   \   00002E   A4           MUL     AB
   \   00002F   C8           XCH     A,R0
   \   000030   AAF0         MOV     R2,B
   \   000032   75F000       MOV     B,#0x0
   \   000035   A4           MUL     AB
   \   000036   2A           ADD     A,R2
   \   000037   FA           MOV     R2,A
   \   000038   75F002       MOV     B,#0x2
   \   00003B   E9           MOV     A,R1
   \   00003C   A4           MUL     AB
   \   00003D   2A           ADD     A,R2
   \   00003E   F9           MOV     R1,A
   \   00003F   74..         MOV     A,#(pgOff + 14) & 0xff
   \   000041   28           ADD     A,R0
   \   000042   F582         MOV     DPL,A
   \   000044   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   000046   39           ADDC    A,R1
   \   000047   F583         MOV     DPH,A
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F5..         MOV     ?V2,A
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F5..         MOV     ?V3,A
   1083            uint8 rtrn = FALSE;
   \   000050   75..00       MOV     ?V1,#0x0
   1084            osalNvHdr_t hdr;
   1085          
   1086            hdr.id = id;
   \   000053   7408         MOV     A,#0x8
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F8           MOV     R0,A
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F9           MOV     R1,A
   \   00005D   85..82       MOV     DPL,?XSP + 0
   \   000060   85..83       MOV     DPH,?XSP + 1
   \   000063   E8           MOV     A,R0
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   E9           MOV     A,R1
   \   000067   F0           MOVX    @DPTR,A
   1087            hdr.len = len;
   \   000068   7402         MOV     A,#0x2
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   EE           MOV     A,R6
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   EF           MOV     A,R7
   \   000071   F0           MOVX    @DPTR,A
   1088          
   1089            writeWord( pg, offset, (uint8 *)&hdr );
   \   000072                ; Setup parameters for call to function writeWord
   \   000072   AC..         MOV     R4,?XSP + 0
   \   000074   AD..         MOV     R5,?XSP + 1
   \   000076   AA..         MOV     R2,?V2
   \   000078   AB..         MOV     R3,?V3
   \   00007A   A9..         MOV     R1,?V0
   \   00007C   12....       LCALL   ??writeWord?relay    ; Banked call to: writeWord
   1090            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   00007F                ; Setup parameters for call to function HalFlashRead
   \   00007F   75..08       MOV     ?V4,#0x8
   \   000082   75..00       MOV     ?V5,#0x0
   \   000085   78..         MOV     R0,#?V4
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008A   7402         MOV     A,#0x2
   \   00008C   12....       LCALL   ?XSTACK_DISP102_8
   \   00008F   AA..         MOV     R2,?V2
   \   000091   AB..         MOV     R3,?V3
   \   000093   A9..         MOV     R1,?V0
   \   000095   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   000098   7402         MOV     A,#0x2
   \   00009A   12....       LCALL   ?DEALLOC_XSTACK8
   1091          
   1092            if ( (hdr.id == id) && (hdr.len == len) )
   \   00009D   85..82       MOV     DPL,?XSP + 0
   \   0000A0   85..83       MOV     DPH,?XSP + 1
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   F8           MOV     R0,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   F9           MOV     R1,A
   \   0000A8   7408         MOV     A,#0x8
   \   0000AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   68           XRL     A,R0
   \   0000AF   7003         JNZ     ??writeItem_0
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   69           XRL     A,R1
   \                     ??writeItem_0:
   \   0000B4   6003         JZ      $+5
   \   0000B6   02....       LJMP    ??writeItem_1 & 0xFFFF
   \   0000B9   7402         MOV     A,#0x2
   \   0000BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   6E           XRL     A,R6
   \   0000C0   7003         JNZ     ??writeItem_2
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   6F           XRL     A,R7
   \                     ??writeItem_2:
   \   0000C5   6003         JZ      $+5
   \   0000C7   02....       LJMP    ??writeItem_1 & 0xFFFF
   1093            {
   1094              if ( flag )
   \   0000CA   741C         MOV     A,#0x1c
   \   0000CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   7003         JNZ     $+5
   \   0000D2   02....       LJMP    ??writeItem_3 & 0xFFFF
   1095              {
   1096                hdr.chk = calcChkB( len, buf );
   \   0000D5                ; Setup parameters for call to function calcChkB
   \   0000D5   AC..         MOV     R4,?V6
   \   0000D7   AD..         MOV     R5,?V7
   \   0000D9   EE           MOV     A,R6
   \   0000DA   FA           MOV     R2,A
   \   0000DB   EF           MOV     A,R7
   \   0000DC   FB           MOV     R3,A
   \   0000DD   12....       LCALL   ??calcChkB?relay     ; Banked call to: calcChkB
   \   0000E0   7404         MOV     A,#0x4
   \   0000E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E5   EA           MOV     A,R2
   \   0000E6   F0           MOVX    @DPTR,A
   \   0000E7   A3           INC     DPTR
   \   0000E8   EB           MOV     A,R3
   \   0000E9   F0           MOVX    @DPTR,A
   1097          
   1098                offset += OSAL_NV_HDR_SIZE;
   \   0000EA   E5..         MOV     A,?V2
   \   0000EC   2408         ADD     A,#0x8
   \   0000EE   F5..         MOV     ?V2,A
   \   0000F0   E5..         MOV     A,?V3
   \   0000F2   3400         ADDC    A,#0x0
   \   0000F4   F5..         MOV     ?V3,A
   1099                if ( buf != NULL )
   \   0000F6   E5..         MOV     A,?V6
   \   0000F8   45..         ORL     A,?V7
   \   0000FA   601D         JZ      ??writeItem_4
   1100                {
   1101                  writeBuf( pg, offset, len, buf );
   \   0000FC                ; Setup parameters for call to function writeBuf
   \   0000FC   85....       MOV     ?V4,?V6
   \   0000FF   85....       MOV     ?V5,?V7
   \   000102   78..         MOV     R0,#?V4
   \   000104   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000107   EE           MOV     A,R6
   \   000108   FC           MOV     R4,A
   \   000109   EF           MOV     A,R7
   \   00010A   FD           MOV     R5,A
   \   00010B   AA..         MOV     R2,?V2
   \   00010D   AB..         MOV     R3,?V3
   \   00010F   A9..         MOV     R1,?V0
   \   000111   12....       LCALL   ??writeBuf?relay     ; Banked call to: writeBuf
   \   000114   7402         MOV     A,#0x2
   \   000116   12....       LCALL   ?DEALLOC_XSTACK8
   1102                }
   1103          
   1104                if ( hdr.chk == calcChkF( pg, offset, len ) )
   \                     ??writeItem_4:
   \   000119                ; Setup parameters for call to function calcChkF
   \   000119   EE           MOV     A,R6
   \   00011A   FC           MOV     R4,A
   \   00011B   EF           MOV     A,R7
   \   00011C   FD           MOV     R5,A
   \   00011D   AA..         MOV     R2,?V2
   \   00011F   AB..         MOV     R3,?V3
   \   000121   A9..         MOV     R1,?V0
   \   000123   12....       LCALL   ??calcChkF?relay     ; Banked call to: calcChkF
   \   000126   8A..         MOV     ?V4,R2
   \   000128   8B..         MOV     ?V5,R3
   \   00012A   A8..         MOV     R0,?V4
   \   00012C   A9..         MOV     R1,?V5
   \   00012E   7404         MOV     A,#0x4
   \   000130   12....       LCALL   ?XSTACK_DISP0_8
   \   000133   E0           MOVX    A,@DPTR
   \   000134   68           XRL     A,R0
   \   000135   7003         JNZ     ??writeItem_5
   \   000137   A3           INC     DPTR
   \   000138   E0           MOVX    A,@DPTR
   \   000139   69           XRL     A,R1
   \                     ??writeItem_5:
   \   00013A   7045         JNZ     ??writeItem_6
   1105                {
   1106                  if ( hdr.chk == setChk( pg, offset, hdr.chk ) )
   \   00013C                ; Setup parameters for call to function setChk
   \   00013C   7404         MOV     A,#0x4
   \   00013E   12....       LCALL   ?XSTACK_DISP0_8
   \   000141   E0           MOVX    A,@DPTR
   \   000142   FC           MOV     R4,A
   \   000143   A3           INC     DPTR
   \   000144   E0           MOVX    A,@DPTR
   \   000145   FD           MOV     R5,A
   \   000146   AA..         MOV     R2,?V2
   \   000148   AB..         MOV     R3,?V3
   \   00014A   A9..         MOV     R1,?V0
   \   00014C   12....       LCALL   ??setChk?relay       ; Banked call to: setChk
   \   00014F   8A..         MOV     ?V4,R2
   \   000151   8B..         MOV     ?V5,R3
   \   000153   A8..         MOV     R0,?V4
   \   000155   A9..         MOV     R1,?V5
   \   000157   7404         MOV     A,#0x4
   \   000159   12....       LCALL   ?XSTACK_DISP0_8
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   68           XRL     A,R0
   \   00015E   7003         JNZ     ??writeItem_7
   \   000160   A3           INC     DPTR
   \   000161   E0           MOVX    A,@DPTR
   \   000162   69           XRL     A,R1
   \                     ??writeItem_7:
   \   000163   701C         JNZ     ??writeItem_6
   1107                  {
   1108                    hotItemUpdate(pg, offset, hdr.id);
   \   000165                ; Setup parameters for call to function hotItemUpdate
   \   000165   85..82       MOV     DPL,?XSP + 0
   \   000168   85..83       MOV     DPH,?XSP + 1
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   FC           MOV     R4,A
   \   00016D   A3           INC     DPTR
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   FD           MOV     R5,A
   \   000170   AA..         MOV     R2,?V2
   \   000172   AB..         MOV     R3,?V3
   \   000174   A9..         MOV     R1,?V0
   \   000176   12....       LCALL   ??hotItemUpdate?relay; Banked call to: hotItemUpdate
   1109                    rtrn = TRUE;
   \   000179   75..01       MOV     ?V1,#0x1
   \   00017C   8003         SJMP    ??writeItem_6
   1110                  }
   1111                }
   1112              }
   1113              else
   1114              {
   1115                rtrn = TRUE;
   \                     ??writeItem_3:
   \   00017E   75..01       MOV     ?V1,#0x1
   1116              }
   1117          
   1118              len = OSAL_NV_ITEM_SIZE( hdr.len );
   \                     ??writeItem_6:
   \   000181   7402         MOV     A,#0x2
   \   000183   12....       LCALL   ?XSTACK_DISP0_8
   \   000186   C3           CLR     C
   \   000187   E0           MOVX    A,@DPTR
   \   000188   94F4         SUBB    A,#-0xc
   \   00018A   A3           INC     DPTR
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   94FF         SUBB    A,#-0x1
   \   00018E   4007         JC      ??writeItem_8
   \   000190   7EFC         MOV     R6,#-0x4
   \   000192   7FFF         MOV     R7,#-0x1
   \   000194   02....       LJMP    ??writeItem_9 & 0xFFFF
   \                     ??writeItem_8:
   \   000197   7402         MOV     A,#0x2
   \   000199   12....       LCALL   ?XSTACK_DISP0_8
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   2403         ADD     A,#0x3
   \   00019F   F5..         MOV     ?V4,A
   \   0001A1   A3           INC     DPTR
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   3400         ADDC    A,#0x0
   \   0001A5   F5..         MOV     ?V5,A
   \   0001A7   7402         MOV     A,#0x2
   \   0001A9   78..         MOV     R0,#?V4
   \   0001AB   12....       LCALL   ?US_SHR
   \   0001AE   E5..         MOV     A,?V4
   \   0001B0   75F004       MOV     B,#0x4
   \   0001B3   A4           MUL     AB
   \   0001B4   C5..         XCH     A,?V4
   \   0001B6   A8F0         MOV     R0,B
   \   0001B8   75F000       MOV     B,#0x0
   \   0001BB   A4           MUL     AB
   \   0001BC   28           ADD     A,R0
   \   0001BD   F8           MOV     R0,A
   \   0001BE   75F004       MOV     B,#0x4
   \   0001C1   E5..         MOV     A,?V5
   \   0001C3   A4           MUL     AB
   \   0001C4   28           ADD     A,R0
   \   0001C5   F5..         MOV     ?V5,A
   \   0001C7   E5..         MOV     A,?V4
   \   0001C9   2408         ADD     A,#0x8
   \   0001CB   FE           MOV     R6,A
   \   0001CC   E4           CLR     A
   \   0001CD   35..         ADDC    A,?V5
   \   0001CF   FF           MOV     R7,A
   \   0001D0   02....       LJMP    ??writeItem_9 & 0xFFFF
   1119            }
   1120            else
   1121            {
   1122              len = OSAL_NV_ITEM_SIZE( hdr.len );
   \                     ??writeItem_1:
   \   0001D3   7402         MOV     A,#0x2
   \   0001D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D8   C3           CLR     C
   \   0001D9   E0           MOVX    A,@DPTR
   \   0001DA   94F4         SUBB    A,#-0xc
   \   0001DC   A3           INC     DPTR
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   94FF         SUBB    A,#-0x1
   \   0001E0   4006         JC      ??writeItem_10
   \   0001E2   7EFC         MOV     R6,#-0x4
   \   0001E4   7FFF         MOV     R7,#-0x1
   \   0001E6   8039         SJMP    ??writeItem_11
   \                     ??writeItem_10:
   \   0001E8   7402         MOV     A,#0x2
   \   0001EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001ED   E0           MOVX    A,@DPTR
   \   0001EE   2403         ADD     A,#0x3
   \   0001F0   F5..         MOV     ?V4,A
   \   0001F2   A3           INC     DPTR
   \   0001F3   E0           MOVX    A,@DPTR
   \   0001F4   3400         ADDC    A,#0x0
   \   0001F6   F5..         MOV     ?V5,A
   \   0001F8   7402         MOV     A,#0x2
   \   0001FA   78..         MOV     R0,#?V4
   \   0001FC   12....       LCALL   ?US_SHR
   \   0001FF   E5..         MOV     A,?V4
   \   000201   75F004       MOV     B,#0x4
   \   000204   A4           MUL     AB
   \   000205   C5..         XCH     A,?V4
   \   000207   A8F0         MOV     R0,B
   \   000209   75F000       MOV     B,#0x0
   \   00020C   A4           MUL     AB
   \   00020D   28           ADD     A,R0
   \   00020E   F8           MOV     R0,A
   \   00020F   75F004       MOV     B,#0x4
   \   000212   E5..         MOV     A,?V5
   \   000214   A4           MUL     AB
   \   000215   28           ADD     A,R0
   \   000216   F5..         MOV     ?V5,A
   \   000218   E5..         MOV     A,?V4
   \   00021A   2408         ADD     A,#0x8
   \   00021C   FE           MOV     R6,A
   \   00021D   E4           CLR     A
   \   00021E   35..         ADDC    A,?V5
   \   000220   FF           MOV     R7,A
   1123          
   1124              if (len > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]))
   \                     ??writeItem_11:
   \   000221   A8..         MOV     R0,?V0
   \   000223   7900         MOV     R1,#0x0
   \   000225   E8           MOV     A,R0
   \   000226   75F002       MOV     B,#0x2
   \   000229   A4           MUL     AB
   \   00022A   C8           XCH     A,R0
   \   00022B   AAF0         MOV     R2,B
   \   00022D   75F000       MOV     B,#0x0
   \   000230   A4           MUL     AB
   \   000231   2A           ADD     A,R2
   \   000232   FA           MOV     R2,A
   \   000233   75F002       MOV     B,#0x2
   \   000236   E9           MOV     A,R1
   \   000237   A4           MUL     AB
   \   000238   2A           ADD     A,R2
   \   000239   F9           MOV     R1,A
   \   00023A   74..         MOV     A,#(pgOff + 14) & 0xff
   \   00023C   28           ADD     A,R0
   \   00023D   F582         MOV     DPL,A
   \   00023F   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   000241   39           ADDC    A,R1
   \   000242   F583         MOV     DPH,A
   \   000244   E0           MOVX    A,@DPTR
   \   000245   F8           MOV     R0,A
   \   000246   A3           INC     DPTR
   \   000247   E0           MOVX    A,@DPTR
   \   000248   F9           MOV     R1,A
   \   000249   7400         MOV     A,#0x0
   \   00024B   C3           CLR     C
   \   00024C   98           SUBB    A,R0
   \   00024D   F8           MOV     R0,A
   \   00024E   7408         MOV     A,#0x8
   \   000250   99           SUBB    A,R1
   \   000251   F9           MOV     R1,A
   \   000252   C3           CLR     C
   \   000253   E8           MOV     A,R0
   \   000254   9E           SUBB    A,R6
   \   000255   E9           MOV     A,R1
   \   000256   9F           SUBB    A,R7
   \   000257   5035         JNC     ??writeItem_12
   1125              {
   1126                len = (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]);
   \   000259   A8..         MOV     R0,?V0
   \   00025B   7900         MOV     R1,#0x0
   \   00025D   E8           MOV     A,R0
   \   00025E   75F002       MOV     B,#0x2
   \   000261   A4           MUL     AB
   \   000262   C8           XCH     A,R0
   \   000263   AAF0         MOV     R2,B
   \   000265   75F000       MOV     B,#0x0
   \   000268   A4           MUL     AB
   \   000269   2A           ADD     A,R2
   \   00026A   FA           MOV     R2,A
   \   00026B   75F002       MOV     B,#0x2
   \   00026E   E9           MOV     A,R1
   \   00026F   A4           MUL     AB
   \   000270   2A           ADD     A,R2
   \   000271   F9           MOV     R1,A
   \   000272   74..         MOV     A,#(pgOff + 14) & 0xff
   \   000274   28           ADD     A,R0
   \   000275   F582         MOV     DPL,A
   \   000277   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   000279   39           ADDC    A,R1
   \   00027A   F583         MOV     DPH,A
   \   00027C   E0           MOVX    A,@DPTR
   \   00027D   F8           MOV     R0,A
   \   00027E   A3           INC     DPTR
   \   00027F   E0           MOVX    A,@DPTR
   \   000280   F9           MOV     R1,A
   \   000281   7400         MOV     A,#0x0
   \   000283   C3           CLR     C
   \   000284   98           SUBB    A,R0
   \   000285   F8           MOV     R0,A
   \   000286   7408         MOV     A,#0x8
   \   000288   99           SUBB    A,R1
   \   000289   F9           MOV     R1,A
   \   00028A   E8           MOV     A,R0
   \   00028B   FE           MOV     R6,A
   \   00028C   E9           MOV     A,R1
   \   00028D   FF           MOV     R7,A
   1127              }
   1128          
   1129              pgLost[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??writeItem_12:
   \   00028E   A8..         MOV     R0,?V0
   \   000290   7900         MOV     R1,#0x0
   \   000292   E8           MOV     A,R0
   \   000293   75F002       MOV     B,#0x2
   \   000296   A4           MUL     AB
   \   000297   C8           XCH     A,R0
   \   000298   AAF0         MOV     R2,B
   \   00029A   75F000       MOV     B,#0x0
   \   00029D   A4           MUL     AB
   \   00029E   2A           ADD     A,R2
   \   00029F   FA           MOV     R2,A
   \   0002A0   75F002       MOV     B,#0x2
   \   0002A3   E9           MOV     A,R1
   \   0002A4   A4           MUL     AB
   \   0002A5   2A           ADD     A,R2
   \   0002A6   F9           MOV     R1,A
   \   0002A7   74..         MOV     A,#(pgLost + 14) & 0xff
   \   0002A9   28           ADD     A,R0
   \   0002AA   F582         MOV     DPL,A
   \   0002AC   74..         MOV     A,#((pgLost - 242) >> 8) & 0xff
   \   0002AE   39           ADDC    A,R1
   \   0002AF   F583         MOV     DPH,A
   \   0002B1   E0           MOVX    A,@DPTR
   \   0002B2   2E           ADD     A,R6
   \   0002B3   F0           MOVX    @DPTR,A
   \   0002B4   A3           INC     DPTR
   \   0002B5   E0           MOVX    A,@DPTR
   \   0002B6   3F           ADDC    A,R7
   \   0002B7   F0           MOVX    @DPTR,A
   1130            }
   1131            pgOff[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??writeItem_9:
   \   0002B8   A8..         MOV     R0,?V0
   \   0002BA   7900         MOV     R1,#0x0
   \   0002BC   E8           MOV     A,R0
   \   0002BD   75F002       MOV     B,#0x2
   \   0002C0   A4           MUL     AB
   \   0002C1   C8           XCH     A,R0
   \   0002C2   AAF0         MOV     R2,B
   \   0002C4   75F000       MOV     B,#0x0
   \   0002C7   A4           MUL     AB
   \   0002C8   2A           ADD     A,R2
   \   0002C9   FA           MOV     R2,A
   \   0002CA   75F002       MOV     B,#0x2
   \   0002CD   E9           MOV     A,R1
   \   0002CE   A4           MUL     AB
   \   0002CF   2A           ADD     A,R2
   \   0002D0   F9           MOV     R1,A
   \   0002D1   74..         MOV     A,#(pgOff + 14) & 0xff
   \   0002D3   28           ADD     A,R0
   \   0002D4   F582         MOV     DPL,A
   \   0002D6   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   0002D8   39           ADDC    A,R1
   \   0002D9   F583         MOV     DPH,A
   \   0002DB   E0           MOVX    A,@DPTR
   \   0002DC   2E           ADD     A,R6
   \   0002DD   F0           MOVX    @DPTR,A
   \   0002DE   A3           INC     DPTR
   \   0002DF   E0           MOVX    A,@DPTR
   \   0002E0   3F           ADDC    A,R7
   \   0002E1   F0           MOVX    @DPTR,A
   1132          
   1133            return rtrn;
   \   0002E2   A9..         MOV     R1,?V1
   \   0002E4   740A         MOV     A,#0xa
   \   0002E6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002E9   7F08         MOV     R7,#0x8
   \   0002EB   02....       LJMP    ?BANKED_LEAVE_XDATA
   1134          }
   1135          
   1136          /*********************************************************************
   1137           * @fn      hotItem
   1138           *
   1139           * @brief   Look for the parameter 'id' in the hot items array.
   1140           *
   1141           * @param   id - A valid NV item Id.
   1142           *
   1143           * @return  A valid index into the hot items if the item is hot; OSAL_NV_MAX_HOT if not.
   1144           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1145          static uint8 hotItem(uint16 id)
   \                     hotItem:
   1146          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1147            uint8 hotIdx;
   1148          
   1149            for (hotIdx = 0; hotIdx < OSAL_NV_MAX_HOT; hotIdx++)
   \   000004   7900         MOV     R1,#0x0
   \                     ??hotItem_0:
   \   000006   E9           MOV     A,R1
   \   000007   C3           CLR     C
   \   000008   9403         SUBB    A,#0x3
   \   00000A   502F         JNC     ??hotItem_1
   1150            {
   1151              if (hotIds[hotIdx] == id)
   \   00000C   E9           MOV     A,R1
   \   00000D   FC           MOV     R4,A
   \   00000E   7D00         MOV     R5,#0x0
   \   000010   EC           MOV     A,R4
   \   000011   75F002       MOV     B,#0x2
   \   000014   A4           MUL     AB
   \   000015   CC           XCH     A,R4
   \   000016   A8F0         MOV     R0,B
   \   000018   75F000       MOV     B,#0x0
   \   00001B   A4           MUL     AB
   \   00001C   28           ADD     A,R0
   \   00001D   F8           MOV     R0,A
   \   00001E   75F002       MOV     B,#0x2
   \   000021   ED           MOV     A,R5
   \   000022   A4           MUL     AB
   \   000023   28           ADD     A,R0
   \   000024   FD           MOV     R5,A
   \   000025   74..         MOV     A,#hotIds & 0xff
   \   000027   2C           ADD     A,R4
   \   000028   F582         MOV     DPL,A
   \   00002A   74..         MOV     A,#(hotIds >> 8) & 0xff
   \   00002C   3D           ADDC    A,R5
   \   00002D   F583         MOV     DPH,A
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6A           XRL     A,R2
   \   000031   7003         JNZ     ??hotItem_2
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6B           XRL     A,R3
   \                     ??hotItem_2:
   \   000036   6003         JZ      ??hotItem_1
   1152              {
   1153                break;
   1154              }
   1155            }
   \   000038   09           INC     R1
   \   000039   80CB         SJMP    ??hotItem_0
   1156          
   1157            return hotIdx;
   \                     ??hotItem_1:
   \   00003B   D083         POP     DPH
   \   00003D   D082         POP     DPL
   \   00003F   02....       LJMP    ?BRET
   1158          }
   1159          
   1160          /*********************************************************************
   1161           * @fn      hotItemUpdate
   1162           *
   1163           * @brief   If the parameter 'id' is a hot item, update the corresponding hot item data.
   1164           *
   1165           * @param   pg - The new NV page corresponding to the hot item.
   1166           * @param   off - The new NV page offset corresponding to the hot item.
   1167           * @param   id - A valid NV item Id.
   1168           *
   1169           * @return  none
   1170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1171          static void hotItemUpdate(uint8 pg, uint16 off, uint16 id)
   \                     hotItemUpdate:
   1172          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0,R4
   \   00000D   8D..         MOV     ?V1,R5
   1173            uint8 hotIdx = hotItem(id);
   \   00000F                ; Setup parameters for call to function hotItem
   \   00000F   AA..         MOV     R2,?V0
   \   000011   AB..         MOV     R3,?V1
   \   000013   12....       LCALL   ??hotItem?relay      ; Banked call to: hotItem
   \   000016   E9           MOV     A,R1
   \   000017   FA           MOV     R2,A
   1174          
   1175            if (hotIdx < OSAL_NV_MAX_HOT)
   \   000018   EA           MOV     A,R2
   \   000019   C3           CLR     C
   \   00001A   9403         SUBB    A,#0x3
   \   00001C   503D         JNC     ??hotItemUpdate_0
   1176            {
   1177              {
   1178                hotPg[hotIdx] = pg;
   \   00001E   E5..         MOV     A,?V2
   \   000020   C0E0         PUSH    A
   \   000022   EA           MOV     A,R2
   \   000023   F8           MOV     R0,A
   \   000024   7900         MOV     R1,#0x0
   \   000026   74..         MOV     A,#hotPg & 0xff
   \   000028   28           ADD     A,R0
   \   000029   F582         MOV     DPL,A
   \   00002B   74..         MOV     A,#(hotPg >> 8) & 0xff
   \   00002D   39           ADDC    A,R1
   \   00002E   F583         MOV     DPH,A
   \   000030   D0E0         POP     A
   \   000032   F0           MOVX    @DPTR,A
   1179                hotOff[hotIdx] = off;
   \   000033   EA           MOV     A,R2
   \   000034   F8           MOV     R0,A
   \   000035   7900         MOV     R1,#0x0
   \   000037   E8           MOV     A,R0
   \   000038   75F002       MOV     B,#0x2
   \   00003B   A4           MUL     AB
   \   00003C   C8           XCH     A,R0
   \   00003D   ABF0         MOV     R3,B
   \   00003F   75F000       MOV     B,#0x0
   \   000042   A4           MUL     AB
   \   000043   2B           ADD     A,R3
   \   000044   FB           MOV     R3,A
   \   000045   75F002       MOV     B,#0x2
   \   000048   E9           MOV     A,R1
   \   000049   A4           MUL     AB
   \   00004A   2B           ADD     A,R3
   \   00004B   F9           MOV     R1,A
   \   00004C   74..         MOV     A,#hotOff & 0xff
   \   00004E   28           ADD     A,R0
   \   00004F   F582         MOV     DPL,A
   \   000051   74..         MOV     A,#(hotOff >> 8) & 0xff
   \   000053   39           ADDC    A,R1
   \   000054   F583         MOV     DPH,A
   \   000056   EE           MOV     A,R6
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   EF           MOV     A,R7
   \   00005A   F0           MOVX    @DPTR,A
   1180              }
   1181            }
   1182          }
   \                     ??hotItemUpdate_0:
   \   00005B   7F03         MOV     R7,#0x3
   \   00005D   02....       LJMP    ?BANKED_LEAVE_XDATA
   1183          
   1184          /*********************************************************************
   1185           * @fn      osal_nv_init
   1186           *
   1187           * @brief   Initialize NV service.
   1188           *
   1189           * @param   p - Not used.
   1190           *
   1191           * @return  none
   1192           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1193          void osal_nv_init( void *p )
   \                     osal_nv_init:
   1194          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1195            (void)p;  // Suppress Lint warning.
   1196            (void)initNV();  // Always returns TRUE after pages have been erased.
   \   000009                ; Setup parameters for call to function initNV
   \   000009   12....       LCALL   ??initNV?relay       ; Banked call to: initNV
   \   00000C   E9           MOV     A,R1
   1197          }
   \   00000D   7F01         MOV     R7,#0x1
   \   00000F   02....       LJMP    ?BANKED_LEAVE_XDATA
   1198          
   1199          /*********************************************************************
   1200           * @fn      osal_nv_item_init
   1201           *
   1202           * @brief   If the NV item does not already exist, it is created and
   1203           *          initialized with the data passed to the function, if any.
   1204           *          This function must be called before calling osal_nv_read() or
   1205           *          osal_nv_write().
   1206           *
   1207           * @param   id  - Valid NV item Id.
   1208           * @param   len - Item length.
   1209           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
   1210           *
   1211           * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
   1212           *          SUCCESS       - Id already existed, no action taken.
   1213           *          NV_OPER_FAILED - Failure to find or create Id.
   1214           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1215          uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
   \                     osal_nv_item_init:
   1216          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V6,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V7,A
   1217            uint16 offset;
   1218          
   1219            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   000019                ; Setup parameters for call to function HalAdcCheckVdd
   \   000019   794E         MOV     R1,#0x4e
   \   00001B   12....       LCALL   ??HalAdcCheckVdd?relay; Banked call to: HalAdcCheckVdd
   \   00001E   E9           MOV     A,R1
   \   00001F   7004         JNZ     ??osal_nv_item_init_0
   1220            {
   1221              return NV_OPER_FAILED;
   \   000021   790A         MOV     R1,#0xa
   \   000023   804B         SJMP    ??osal_nv_item_init_1
   1222            }
   1223            else if ((offset = findItem(id)) != OSAL_NV_ITEM_NULL)
   \                     ??osal_nv_item_init_0:
   \   000025                ; Setup parameters for call to function findItem
   \   000025   EE           MOV     A,R6
   \   000026   FA           MOV     R2,A
   \   000027   EF           MOV     A,R7
   \   000028   FB           MOV     R3,A
   \   000029   12....       LCALL   ??findItem?relay     ; Banked call to: findItem
   \   00002C   8A..         MOV     ?V4,R2
   \   00002E   8B..         MOV     ?V5,R3
   \   000030   A8..         MOV     R0,?V4
   \   000032   A9..         MOV     R1,?V5
   \   000034   88..         MOV     ?V0,R0
   \   000036   89..         MOV     ?V1,R1
   \   000038   E8           MOV     A,R0
   \   000039   49           ORL     A,R1
   \   00003A   6014         JZ      ??osal_nv_item_init_2
   1224            {
   1225              // Re-populate the NV hot item data if the corresponding items are already established.
   1226              hotItemUpdate(findPg, offset, id);
   \   00003C                ; Setup parameters for call to function hotItemUpdate
   \   00003C   EE           MOV     A,R6
   \   00003D   FC           MOV     R4,A
   \   00003E   EF           MOV     A,R7
   \   00003F   FD           MOV     R5,A
   \   000040   AA..         MOV     R2,?V0
   \   000042   AB..         MOV     R3,?V1
   \   000044   90....       MOV     DPTR,#findPg
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   12....       LCALL   ??hotItemUpdate?relay; Banked call to: hotItemUpdate
   1227          
   1228              return SUCCESS;
   \   00004C   7900         MOV     R1,#0x0
   \   00004E   8020         SJMP    ??osal_nv_item_init_1
   1229            }
   1230            else if ( initItem( TRUE, id, len, buf ) != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_item_init_2:
   \   000050                ; Setup parameters for call to function initItem
   \   000050   78..         MOV     R0,#?V6
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   AC..         MOV     R4,?V2
   \   000057   AD..         MOV     R5,?V3
   \   000059   EE           MOV     A,R6
   \   00005A   FA           MOV     R2,A
   \   00005B   EF           MOV     A,R7
   \   00005C   FB           MOV     R3,A
   \   00005D   7901         MOV     R1,#0x1
   \   00005F   12....       LCALL   ??initItem?relay     ; Banked call to: initItem
   \   000062   7402         MOV     A,#0x2
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
   \   000067   E9           MOV     A,R1
   \   000068   6004         JZ      ??osal_nv_item_init_3
   1231            {
   1232              return NV_ITEM_UNINIT;
   \   00006A   7909         MOV     R1,#0x9
   \   00006C   8002         SJMP    ??osal_nv_item_init_1
   1233            }
   1234            else
   1235            {
   1236              return NV_OPER_FAILED;
   \                     ??osal_nv_item_init_3:
   \   00006E   790A         MOV     R1,#0xa
   \                     ??osal_nv_item_init_1:
   \   000070   7F08         MOV     R7,#0x8
   \   000072   02....       LJMP    ?BANKED_LEAVE_XDATA
   1237            }
   1238          }
   1239          
   1240          /*********************************************************************
   1241           * @fn      osal_nv_item_len
   1242           *
   1243           * @brief   Get the data length of the item stored in NV memory.
   1244           *
   1245           * @param   id  - Valid NV item Id.
   1246           *
   1247           * @return  Item length, if found; zero otherwise.
   1248           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1249          uint16 osal_nv_item_len( uint16 id )
   \                     osal_nv_item_len:
   1250          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   1251            osalNvHdr_t hdr;
   1252            uint16 offset;
   1253            uint8 hotIdx;
   1254          
   1255            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   00000E                ; Setup parameters for call to function hotItem
   \   00000E   AA..         MOV     R2,?V2
   \   000010   AB..         MOV     R3,?V3
   \   000012   12....       LCALL   ??hotItem?relay      ; Banked call to: hotItem
   \   000015   E9           MOV     A,R1
   \   000016   F8           MOV     R0,A
   \   000017   E8           MOV     A,R0
   \   000018   FE           MOV     R6,A
   \   000019   E8           MOV     A,R0
   \   00001A   C3           CLR     C
   \   00001B   9403         SUBB    A,#0x3
   \   00001D   503F         JNC     ??osal_nv_item_len_0
   1256            {
   1257              findPg = hotPg[hotIdx];
   \   00001F   EE           MOV     A,R6
   \   000020   F8           MOV     R0,A
   \   000021   7900         MOV     R1,#0x0
   \   000023   74..         MOV     A,#hotPg & 0xff
   \   000025   28           ADD     A,R0
   \   000026   F582         MOV     DPL,A
   \   000028   74..         MOV     A,#(hotPg >> 8) & 0xff
   \   00002A   39           ADDC    A,R1
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   90....       MOV     DPTR,#findPg
   \   000031   F0           MOVX    @DPTR,A
   1258              offset = hotOff[hotIdx];
   \   000032   EE           MOV     A,R6
   \   000033   F8           MOV     R0,A
   \   000034   7900         MOV     R1,#0x0
   \   000036   E8           MOV     A,R0
   \   000037   75F002       MOV     B,#0x2
   \   00003A   A4           MUL     AB
   \   00003B   C8           XCH     A,R0
   \   00003C   AAF0         MOV     R2,B
   \   00003E   75F000       MOV     B,#0x0
   \   000041   A4           MUL     AB
   \   000042   2A           ADD     A,R2
   \   000043   FA           MOV     R2,A
   \   000044   75F002       MOV     B,#0x2
   \   000047   E9           MOV     A,R1
   \   000048   A4           MUL     AB
   \   000049   2A           ADD     A,R2
   \   00004A   F9           MOV     R1,A
   \   00004B   74..         MOV     A,#hotOff & 0xff
   \   00004D   28           ADD     A,R0
   \   00004E   F582         MOV     DPL,A
   \   000050   74..         MOV     A,#(hotOff >> 8) & 0xff
   \   000052   39           ADDC    A,R1
   \   000053   F583         MOV     DPH,A
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F5..         MOV     ?V0,A
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F5..         MOV     ?V1,A
   \   00005C   801D         SJMP    ??osal_nv_item_len_1
   1259            }
   1260            else if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   \                     ??osal_nv_item_len_0:
   \   00005E                ; Setup parameters for call to function findItem
   \   00005E   AA..         MOV     R2,?V2
   \   000060   AB..         MOV     R3,?V3
   \   000062   12....       LCALL   ??findItem?relay     ; Banked call to: findItem
   \   000065   8A..         MOV     ?V4,R2
   \   000067   8B..         MOV     ?V5,R3
   \   000069   A8..         MOV     R0,?V4
   \   00006B   A9..         MOV     R1,?V5
   \   00006D   88..         MOV     ?V0,R0
   \   00006F   89..         MOV     ?V1,R1
   \   000071   E8           MOV     A,R0
   \   000072   49           ORL     A,R1
   \   000073   7006         JNZ     ??osal_nv_item_len_1
   1261            {
   1262              return 0;
   \   000075   7A00         MOV     R2,#0x0
   \   000077   7B00         MOV     R3,#0x0
   \   000079   8031         SJMP    ??osal_nv_item_len_2
   1263            }
   1264          
   1265            HalFlashRead(findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_item_len_1:
   \   00007B                ; Setup parameters for call to function HalFlashRead
   \   00007B   75..08       MOV     ?V4,#0x8
   \   00007E   75..00       MOV     ?V5,#0x0
   \   000081   78..         MOV     R0,#?V4
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   7402         MOV     A,#0x2
   \   000088   12....       LCALL   ?XSTACK_DISP102_8
   \   00008B   E5..         MOV     A,?V0
   \   00008D   24F8         ADD     A,#-0x8
   \   00008F   FA           MOV     R2,A
   \   000090   E5..         MOV     A,?V1
   \   000092   34FF         ADDC    A,#-0x1
   \   000094   FB           MOV     R3,A
   \   000095   90....       MOV     DPTR,#findPg
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F9           MOV     R1,A
   \   00009A   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   00009D   7402         MOV     A,#0x2
   \   00009F   12....       LCALL   ?DEALLOC_XSTACK8
   1266            return hdr.len;
   \   0000A2   7402         MOV     A,#0x2
   \   0000A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   FA           MOV     R2,A
   \   0000A9   A3           INC     DPTR
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   FB           MOV     R3,A
   \                     ??osal_nv_item_len_2:
   \   0000AC   7408         MOV     A,#0x8
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B1   7F06         MOV     R7,#0x6
   \   0000B3   02....       LJMP    ?BANKED_LEAVE_XDATA
   1267          }
   1268          
   1269          /*********************************************************************
   1270           * @fn      osal_nv_write
   1271           *
   1272           * @brief   Write a data item to NV. Function can write an entire item to NV or
   1273           *          an element of an item by indexing into the item with an offset.
   1274           *
   1275           * @param   id  - Valid NV item Id.
   1276           * @param   ndx - Index offset into item
   1277           * @param   len - Length of data to write.
   1278           * @param  *buf - Data to write.
   1279           *
   1280           * @return  SUCCESS if successful, NV_ITEM_UNINIT if item did not
   1281           *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
   1282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1283          uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_write:
   1284          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7415         MOV     A,#0x15
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   1285            uint8 rtrn = SUCCESS;
   \   00001E   75..00       MOV     ?V7,#0x0
   1286          
   1287            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   000021                ; Setup parameters for call to function HalAdcCheckVdd
   \   000021   794E         MOV     R1,#0x4e
   \   000023   12....       LCALL   ??HalAdcCheckVdd?relay; Banked call to: HalAdcCheckVdd
   \   000026   E9           MOV     A,R1
   \   000027   7005         JNZ     ??osal_nv_write_0
   1288            {
   1289              return NV_OPER_FAILED;
   \   000029   790A         MOV     R1,#0xa
   \   00002B   02....       LJMP    ??osal_nv_write_1 & 0xFFFF
   1290            }
   1291            else if ( len != 0 )
   \                     ??osal_nv_write_0:
   \   00002E   7427         MOV     A,#0x27
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   E8           MOV     A,R0
   \   000039   49           ORL     A,R1
   \   00003A   7003         JNZ     $+5
   \   00003C   02....       LJMP    ??osal_nv_write_2 & 0xFFFF
   1292            {
   1293              osalNvHdr_t hdr;
   1294              uint16 origOff, srcOff;
   1295              uint16 cnt, chk;
   1296              uint8 *ptr, srcPg;
   1297          
   1298              origOff = srcOff = findItem( id );
   \   00003F                ; Setup parameters for call to function findItem
   \   00003F   7415         MOV     A,#0x15
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FA           MOV     R2,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FB           MOV     R3,A
   \   000049   12....       LCALL   ??findItem?relay     ; Banked call to: findItem
   \   00004C   8A..         MOV     ?V4,R2
   \   00004E   8B..         MOV     ?V5,R3
   \   000050   A8..         MOV     R0,?V4
   \   000052   A9..         MOV     R1,?V5
   \   000054   88..         MOV     ?V2,R0
   \   000056   89..         MOV     ?V3,R1
   \   000058   740B         MOV     A,#0xb
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E8           MOV     A,R0
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   E9           MOV     A,R1
   \   000061   F0           MOVX    @DPTR,A
   1299              srcPg = findPg;
   \   000062   90....       MOV     DPTR,#findPg
   \   000065   E0           MOVX    A,@DPTR
   \   000066   C0E0         PUSH    A
   \   000068   85..82       MOV     DPL,?XSP + 0
   \   00006B   85..83       MOV     DPH,?XSP + 1
   \   00006E   D0E0         POP     A
   \   000070   F0           MOVX    @DPTR,A
   1300              if ( srcOff == OSAL_NV_ITEM_NULL )
   \   000071   E5..         MOV     A,?V2
   \   000073   45..         ORL     A,?V3
   \   000075   7005         JNZ     ??osal_nv_write_3
   1301              {
   1302                return NV_ITEM_UNINIT;
   \   000077   7909         MOV     R1,#0x9
   \   000079   02....       LJMP    ??osal_nv_write_1 & 0xFFFF
   1303              }
   1304          
   1305              HalFlashRead(srcPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_write_3:
   \   00007C                ; Setup parameters for call to function HalFlashRead
   \   00007C   75..08       MOV     ?V4,#0x8
   \   00007F   75..00       MOV     ?V5,#0x0
   \   000082   78..         MOV     R0,#?V4
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   740F         MOV     A,#0xf
   \   000089   12....       LCALL   ?XSTACK_DISP102_8
   \   00008C   E5..         MOV     A,?V2
   \   00008E   24F8         ADD     A,#-0x8
   \   000090   FA           MOV     R2,A
   \   000091   E5..         MOV     A,?V3
   \   000093   34FF         ADDC    A,#-0x1
   \   000095   FB           MOV     R3,A
   \   000096   7402         MOV     A,#0x2
   \   000098   12....       LCALL   ?XSTACK_DISP0_8
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   0000A0   7402         MOV     A,#0x2
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   1306              if ( hdr.len < (ndx + len) )
   \   0000A5   740F         MOV     A,#0xf
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   C082         PUSH    DPL
   \   0000AC   C083         PUSH    DPH
   \   0000AE   7403         MOV     A,#0x3
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F8           MOV     R0,A
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   F9           MOV     R1,A
   \   0000B8   7427         MOV     A,#0x27
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   28           ADD     A,R0
   \   0000BF   F8           MOV     R0,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   39           ADDC    A,R1
   \   0000C3   F9           MOV     R1,A
   \   0000C4   D083         POP     DPH
   \   0000C6   D082         POP     DPL
   \   0000C8   C3           CLR     C
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   98           SUBB    A,R0
   \   0000CB   A3           INC     DPTR
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   99           SUBB    A,R1
   \   0000CE   5005         JNC     ??osal_nv_write_4
   1307              {
   1308                return NV_OPER_FAILED;
   \   0000D0   790A         MOV     R1,#0xa
   \   0000D2   02....       LJMP    ??osal_nv_write_1 & 0xFFFF
   1309              }
   1310          
   1311              srcOff += ndx;
   \                     ??osal_nv_write_4:
   \   0000D5   7403         MOV     A,#0x3
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   25..         ADD     A,?V2
   \   0000DD   F5..         MOV     ?V2,A
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   35..         ADDC    A,?V3
   \   0000E3   F5..         MOV     ?V3,A
   1312              ptr = buf;
   \   0000E5   7429         MOV     A,#0x29
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   F8           MOV     R0,A
   \   0000EC   A3           INC     DPTR
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   F9           MOV     R1,A
   \   0000EF   7405         MOV     A,#0x5
   \   0000F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F4   E8           MOV     A,R0
   \   0000F5   F0           MOVX    @DPTR,A
   \   0000F6   A3           INC     DPTR
   \   0000F7   E9           MOV     A,R1
   \   0000F8   F0           MOVX    @DPTR,A
   1313              cnt = len;
   \   0000F9   7427         MOV     A,#0x27
   \   0000FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   F5..         MOV     ?V0,A
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   F5..         MOV     ?V1,A
   1314              chk = 0;
   \   000105   7409         MOV     A,#0x9
   \   000107   12....       LCALL   ?XSTACK_DISP0_8
   \   00010A   7400         MOV     A,#0x0
   \   00010C   F0           MOVX    @DPTR,A
   \   00010D   A3           INC     DPTR
   \   00010E   7400         MOV     A,#0x0
   \   000110   F0           MOVX    @DPTR,A
   1315              while ( cnt-- )
   \                     ??osal_nv_write_5:
   \   000111   A8..         MOV     R0,?V0
   \   000113   A9..         MOV     R1,?V1
   \   000115   E8           MOV     A,R0
   \   000116   24FF         ADD     A,#-0x1
   \   000118   F5..         MOV     ?V0,A
   \   00011A   E9           MOV     A,R1
   \   00011B   34FF         ADDC    A,#-0x1
   \   00011D   F5..         MOV     ?V1,A
   \   00011F   E8           MOV     A,R0
   \   000120   49           ORL     A,R1
   \   000121   7003         JNZ     $+5
   \   000123   02....       LJMP    ??osal_nv_write_6 & 0xFFFF
   1316              {
   1317                uint8 tmp;
   1318                HalFlashRead(srcPg, srcOff, &tmp, 1);
   \   000126                ; Setup parameters for call to function HalFlashRead
   \   000126   75..01       MOV     ?V4,#0x1
   \   000129   75..00       MOV     ?V5,#0x0
   \   00012C   78..         MOV     R0,#?V4
   \   00012E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000131   7404         MOV     A,#0x4
   \   000133   12....       LCALL   ?XSTACK_DISP102_8
   \   000136   AA..         MOV     R2,?V2
   \   000138   AB..         MOV     R3,?V3
   \   00013A   7402         MOV     A,#0x2
   \   00013C   12....       LCALL   ?XSTACK_DISP0_8
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   F9           MOV     R1,A
   \   000141   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   000144   7402         MOV     A,#0x2
   \   000146   12....       LCALL   ?DEALLOC_XSTACK8
   1319                if ( tmp != *ptr )
   \   000149   7402         MOV     A,#0x2
   \   00014B   12....       LCALL   ?XSTACK_DISP0_8
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   F8           MOV     R0,A
   \   000150   7405         MOV     A,#0x5
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   E0           MOVX    A,@DPTR
   \   000156   F9           MOV     R1,A
   \   000157   A3           INC     DPTR
   \   000158   E0           MOVX    A,@DPTR
   \   000159   F583         MOV     DPH,A
   \   00015B   8982         MOV     DPL,R1
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   68           XRL     A,R0
   \   00015F   603F         JZ      ??osal_nv_write_7
   1320                {
   1321                  chk = 1;  // Mark that at least one byte is different.
   \   000161   7409         MOV     A,#0x9
   \   000163   12....       LCALL   ?XSTACK_DISP0_8
   \   000166   7401         MOV     A,#0x1
   \   000168   F0           MOVX    @DPTR,A
   \   000169   A3           INC     DPTR
   \   00016A   7400         MOV     A,#0x0
   \   00016C   F0           MOVX    @DPTR,A
   1322                  // Calculate expected checksum after transferring old data and writing new data.
   1323                  hdr.chk -= tmp;
   \   00016D   7402         MOV     A,#0x2
   \   00016F   12....       LCALL   ?XSTACK_DISP0_8
   \   000172   E0           MOVX    A,@DPTR
   \   000173   F8           MOV     R0,A
   \   000174   7900         MOV     R1,#0x0
   \   000176   7411         MOV     A,#0x11
   \   000178   12....       LCALL   ?XSTACK_DISP0_8
   \   00017B   C3           CLR     C
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   98           SUBB    A,R0
   \   00017E   F0           MOVX    @DPTR,A
   \   00017F   A3           INC     DPTR
   \   000180   E0           MOVX    A,@DPTR
   \   000181   99           SUBB    A,R1
   \   000182   F0           MOVX    @DPTR,A
   1324                  hdr.chk += *ptr;
   \   000183   7405         MOV     A,#0x5
   \   000185   12....       LCALL   ?XSTACK_DISP0_8
   \   000188   E0           MOVX    A,@DPTR
   \   000189   F8           MOV     R0,A
   \   00018A   A3           INC     DPTR
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   F583         MOV     DPH,A
   \   00018E   8882         MOV     DPL,R0
   \   000190   E0           MOVX    A,@DPTR
   \   000191   F8           MOV     R0,A
   \   000192   7900         MOV     R1,#0x0
   \   000194   7411         MOV     A,#0x11
   \   000196   12....       LCALL   ?XSTACK_DISP0_8
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   28           ADD     A,R0
   \   00019B   F0           MOVX    @DPTR,A
   \   00019C   A3           INC     DPTR
   \   00019D   E0           MOVX    A,@DPTR
   \   00019E   39           ADDC    A,R1
   \   00019F   F0           MOVX    @DPTR,A
   1325                }
   1326                srcOff++;
   \                     ??osal_nv_write_7:
   \   0001A0   05..         INC     ?V2
   \   0001A2   E5..         MOV     A,?V2
   \   0001A4   7002         JNZ     ??osal_nv_write_8
   \   0001A6   05..         INC     ?V3
   1327                ptr++;
   \                     ??osal_nv_write_8:
   \   0001A8   7405         MOV     A,#0x5
   \   0001AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AD   E0           MOVX    A,@DPTR
   \   0001AE   2401         ADD     A,#0x1
   \   0001B0   F8           MOV     R0,A
   \   0001B1   A3           INC     DPTR
   \   0001B2   E0           MOVX    A,@DPTR
   \   0001B3   3400         ADDC    A,#0x0
   \   0001B5   F9           MOV     R1,A
   \   0001B6   7405         MOV     A,#0x5
   \   0001B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BB   E8           MOV     A,R0
   \   0001BC   F0           MOVX    @DPTR,A
   \   0001BD   A3           INC     DPTR
   \   0001BE   E9           MOV     A,R1
   \   0001BF   F0           MOVX    @DPTR,A
   \   0001C0   02....       LJMP    ??osal_nv_write_5 & 0xFFFF
   1328              }
   1329          
   1330              if ( chk != 0 )  // If the buffer to write is different in one or more bytes.
   \                     ??osal_nv_write_6:
   \   0001C3   7409         MOV     A,#0x9
   \   0001C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C8   E0           MOVX    A,@DPTR
   \   0001C9   F8           MOV     R0,A
   \   0001CA   A3           INC     DPTR
   \   0001CB   E0           MOVX    A,@DPTR
   \   0001CC   F9           MOV     R1,A
   \   0001CD   E8           MOV     A,R0
   \   0001CE   49           ORL     A,R1
   \   0001CF   7003         JNZ     $+5
   \   0001D1   02....       LJMP    ??osal_nv_write_2 & 0xFFFF
   1331              {
   1332                uint8 comPg = OSAL_NV_PAGE_NULL;
   \   0001D4   7401         MOV     A,#0x1
   \   0001D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D9   7400         MOV     A,#0x0
   \   0001DB   F0           MOVX    @DPTR,A
   1333                uint8 dstPg = initItem( FALSE, id, hdr.len, &comPg );
   \   0001DC                ; Setup parameters for call to function initItem
   \   0001DC   7401         MOV     A,#0x1
   \   0001DE   12....       LCALL   ?XSTACK_DISP100_8
   \   0001E1   88..         MOV     ?V4,R0
   \   0001E3   89..         MOV     ?V5,R1
   \   0001E5   78..         MOV     R0,#?V4
   \   0001E7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001EA   7411         MOV     A,#0x11
   \   0001EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EF   E0           MOVX    A,@DPTR
   \   0001F0   FC           MOV     R4,A
   \   0001F1   A3           INC     DPTR
   \   0001F2   E0           MOVX    A,@DPTR
   \   0001F3   FD           MOV     R5,A
   \   0001F4   7417         MOV     A,#0x17
   \   0001F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F9   E0           MOVX    A,@DPTR
   \   0001FA   FA           MOV     R2,A
   \   0001FB   A3           INC     DPTR
   \   0001FC   E0           MOVX    A,@DPTR
   \   0001FD   FB           MOV     R3,A
   \   0001FE   7900         MOV     R1,#0x0
   \   000200   12....       LCALL   ??initItem?relay     ; Banked call to: initItem
   \   000203   7402         MOV     A,#0x2
   \   000205   12....       LCALL   ?DEALLOC_XSTACK8
   \   000208   E9           MOV     A,R1
   \   000209   F5..         MOV     ?V6,A
   1334          
   1335                if ( dstPg != OSAL_NV_PAGE_NULL )
   \   00020B   E5..         MOV     A,?V6
   \   00020D   7003         JNZ     $+5
   \   00020F   02....       LJMP    ??osal_nv_write_9 & 0xFFFF
   1336                {
   1337                  uint16 tmp = OSAL_NV_DATA_SIZE( hdr.len );
   \   000212   740F         MOV     A,#0xf
   \   000214   12....       LCALL   ?XSTACK_DISP0_8
   \   000217   C3           CLR     C
   \   000218   E0           MOVX    A,@DPTR
   \   000219   94FC         SUBB    A,#-0x4
   \   00021B   A3           INC     DPTR
   \   00021C   E0           MOVX    A,@DPTR
   \   00021D   94FF         SUBB    A,#-0x1
   \   00021F   400E         JC      ??osal_nv_write_10
   \   000221   7407         MOV     A,#0x7
   \   000223   12....       LCALL   ?XSTACK_DISP0_8
   \   000226   74FC         MOV     A,#-0x4
   \   000228   F0           MOVX    @DPTR,A
   \   000229   A3           INC     DPTR
   \   00022A   74FF         MOV     A,#-0x1
   \   00022C   F0           MOVX    @DPTR,A
   \   00022D   803C         SJMP    ??osal_nv_write_11
   \                     ??osal_nv_write_10:
   \   00022F   740F         MOV     A,#0xf
   \   000231   12....       LCALL   ?XSTACK_DISP0_8
   \   000234   E0           MOVX    A,@DPTR
   \   000235   2403         ADD     A,#0x3
   \   000237   F5..         MOV     ?V4,A
   \   000239   A3           INC     DPTR
   \   00023A   E0           MOVX    A,@DPTR
   \   00023B   3400         ADDC    A,#0x0
   \   00023D   F5..         MOV     ?V5,A
   \   00023F   7402         MOV     A,#0x2
   \   000241   78..         MOV     R0,#?V4
   \   000243   12....       LCALL   ?US_SHR
   \   000246   E5..         MOV     A,?V4
   \   000248   75F004       MOV     B,#0x4
   \   00024B   A4           MUL     AB
   \   00024C   C5..         XCH     A,?V4
   \   00024E   A8F0         MOV     R0,B
   \   000250   75F000       MOV     B,#0x0
   \   000253   A4           MUL     AB
   \   000254   28           ADD     A,R0
   \   000255   F8           MOV     R0,A
   \   000256   75F004       MOV     B,#0x4
   \   000259   E5..         MOV     A,?V5
   \   00025B   A4           MUL     AB
   \   00025C   28           ADD     A,R0
   \   00025D   F5..         MOV     ?V5,A
   \   00025F   7407         MOV     A,#0x7
   \   000261   12....       LCALL   ?XSTACK_DISP0_8
   \   000264   E5..         MOV     A,?V4
   \   000266   F0           MOVX    @DPTR,A
   \   000267   A3           INC     DPTR
   \   000268   E5..         MOV     A,?V5
   \   00026A   F0           MOVX    @DPTR,A
   1338                  uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \                     ??osal_nv_write_11:
   \   00026B   A8..         MOV     R0,?V6
   \   00026D   7900         MOV     R1,#0x0
   \   00026F   E8           MOV     A,R0
   \   000270   75F002       MOV     B,#0x2
   \   000273   A4           MUL     AB
   \   000274   C8           XCH     A,R0
   \   000275   AAF0         MOV     R2,B
   \   000277   75F000       MOV     B,#0x0
   \   00027A   A4           MUL     AB
   \   00027B   2A           ADD     A,R2
   \   00027C   FA           MOV     R2,A
   \   00027D   75F002       MOV     B,#0x2
   \   000280   E9           MOV     A,R1
   \   000281   A4           MUL     AB
   \   000282   2A           ADD     A,R2
   \   000283   F9           MOV     R1,A
   \   000284   74..         MOV     A,#(pgOff + 14) & 0xff
   \   000286   28           ADD     A,R0
   \   000287   F582         MOV     DPL,A
   \   000289   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   00028B   39           ADDC    A,R1
   \   00028C   F583         MOV     DPH,A
   \   00028E   C082         PUSH    DPL
   \   000290   C083         PUSH    DPH
   \   000292   7407         MOV     A,#0x7
   \   000294   12....       LCALL   ?XSTACK_DISP0_8
   \   000297   E0           MOVX    A,@DPTR
   \   000298   F8           MOV     R0,A
   \   000299   A3           INC     DPTR
   \   00029A   E0           MOVX    A,@DPTR
   \   00029B   F9           MOV     R1,A
   \   00029C   D083         POP     DPH
   \   00029E   D082         POP     DPL
   \   0002A0   E0           MOVX    A,@DPTR
   \   0002A1   C3           CLR     C
   \   0002A2   98           SUBB    A,R0
   \   0002A3   FE           MOV     R6,A
   \   0002A4   A3           INC     DPTR
   \   0002A5   E0           MOVX    A,@DPTR
   \   0002A6   99           SUBB    A,R1
   \   0002A7   FF           MOV     R7,A
   1339                  srcOff = origOff;
   \   0002A8   740B         MOV     A,#0xb
   \   0002AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AD   E0           MOVX    A,@DPTR
   \   0002AE   F5..         MOV     ?V2,A
   \   0002B0   A3           INC     DPTR
   \   0002B1   E0           MOVX    A,@DPTR
   \   0002B2   F5..         MOV     ?V3,A
   1340          
   1341                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
   1342                   * OSAL_Nv interruptions caused by resets.
   1343                   */
   1344                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   0002B4   7413         MOV     A,#0x13
   \   0002B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B9   E0           MOVX    A,@DPTR
   \   0002BA   64FF         XRL     A,#0xff
   \   0002BC   7004         JNZ     ??osal_nv_write_12
   \   0002BE   A3           INC     DPTR
   \   0002BF   E0           MOVX    A,@DPTR
   \   0002C0   64FF         XRL     A,#0xff
   \                     ??osal_nv_write_12:
   \   0002C2   7011         JNZ     ??osal_nv_write_13
   1345                  {
   1346                    setItem( srcPg, srcOff, eNvXfer );
   \   0002C4                ; Setup parameters for call to function setItem
   \   0002C4   7C00         MOV     R4,#0x0
   \   0002C6   AA..         MOV     R2,?V2
   \   0002C8   AB..         MOV     R3,?V3
   \   0002CA   85..82       MOV     DPL,?XSP + 0
   \   0002CD   85..83       MOV     DPH,?XSP + 1
   \   0002D0   E0           MOVX    A,@DPTR
   \   0002D1   F9           MOV     R1,A
   \   0002D2   12....       LCALL   ??setItem?relay      ; Banked call to: setItem
   1347                  }
   1348          
   1349                  xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
   \                     ??osal_nv_write_13:
   \   0002D5                ; Setup parameters for call to function xferBuf
   \   0002D5   7403         MOV     A,#0x3
   \   0002D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002DA   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0002DD   8E..         MOV     ?V4,R6
   \   0002DF   8F..         MOV     ?V5,R7
   \   0002E1   78..         MOV     R0,#?V4
   \   0002E3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002E6   AC..         MOV     R4,?V6
   \   0002E8   AA..         MOV     R2,?V2
   \   0002EA   AB..         MOV     R3,?V3
   \   0002EC   7404         MOV     A,#0x4
   \   0002EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F1   E0           MOVX    A,@DPTR
   \   0002F2   F9           MOV     R1,A
   \   0002F3   12....       LCALL   ??xferBuf?relay      ; Banked call to: xferBuf
   \   0002F6   7404         MOV     A,#0x4
   \   0002F8   12....       LCALL   ?DEALLOC_XSTACK8
   1350                  srcOff += ndx;
   \   0002FB   7403         MOV     A,#0x3
   \   0002FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000300   E0           MOVX    A,@DPTR
   \   000301   25..         ADD     A,?V2
   \   000303   F5..         MOV     ?V2,A
   \   000305   A3           INC     DPTR
   \   000306   E0           MOVX    A,@DPTR
   \   000307   35..         ADDC    A,?V3
   \   000309   F5..         MOV     ?V3,A
   1351                  dstOff += ndx;
   \   00030B   7403         MOV     A,#0x3
   \   00030D   12....       LCALL   ?XSTACK_DISP0_8
   \   000310   E0           MOVX    A,@DPTR
   \   000311   2E           ADD     A,R6
   \   000312   FE           MOV     R6,A
   \   000313   A3           INC     DPTR
   \   000314   E0           MOVX    A,@DPTR
   \   000315   3F           ADDC    A,R7
   \   000316   FF           MOV     R7,A
   1352          
   1353                  writeBuf( dstPg, dstOff, len, buf );
   \   000317                ; Setup parameters for call to function writeBuf
   \   000317   7429         MOV     A,#0x29
   \   000319   12....       LCALL   ?XSTACK_DISP0_8
   \   00031C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00031F   7429         MOV     A,#0x29
   \   000321   12....       LCALL   ?XSTACK_DISP0_8
   \   000324   E0           MOVX    A,@DPTR
   \   000325   FC           MOV     R4,A
   \   000326   A3           INC     DPTR
   \   000327   E0           MOVX    A,@DPTR
   \   000328   FD           MOV     R5,A
   \   000329   EE           MOV     A,R6
   \   00032A   FA           MOV     R2,A
   \   00032B   EF           MOV     A,R7
   \   00032C   FB           MOV     R3,A
   \   00032D   A9..         MOV     R1,?V6
   \   00032F   12....       LCALL   ??writeBuf?relay     ; Banked call to: writeBuf
   \   000332   7402         MOV     A,#0x2
   \   000334   12....       LCALL   ?DEALLOC_XSTACK8
   1354                  srcOff += len;
   \   000337   7427         MOV     A,#0x27
   \   000339   12....       LCALL   ?XSTACK_DISP0_8
   \   00033C   E0           MOVX    A,@DPTR
   \   00033D   25..         ADD     A,?V2
   \   00033F   F5..         MOV     ?V2,A
   \   000341   A3           INC     DPTR
   \   000342   E0           MOVX    A,@DPTR
   \   000343   35..         ADDC    A,?V3
   \   000345   F5..         MOV     ?V3,A
   1355                  dstOff += len;
   \   000347   7427         MOV     A,#0x27
   \   000349   12....       LCALL   ?XSTACK_DISP0_8
   \   00034C   E0           MOVX    A,@DPTR
   \   00034D   2E           ADD     A,R6
   \   00034E   FE           MOV     R6,A
   \   00034F   A3           INC     DPTR
   \   000350   E0           MOVX    A,@DPTR
   \   000351   3F           ADDC    A,R7
   \   000352   FF           MOV     R7,A
   1356          
   1357                  xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
   \   000353                ; Setup parameters for call to function xferBuf
   \   000353   740F         MOV     A,#0xf
   \   000355   12....       LCALL   ?XSTACK_DISP0_8
   \   000358   C082         PUSH    DPL
   \   00035A   C083         PUSH    DPH
   \   00035C   7403         MOV     A,#0x3
   \   00035E   12....       LCALL   ?XSTACK_DISP0_8
   \   000361   E0           MOVX    A,@DPTR
   \   000362   F8           MOV     R0,A
   \   000363   A3           INC     DPTR
   \   000364   E0           MOVX    A,@DPTR
   \   000365   F9           MOV     R1,A
   \   000366   D083         POP     DPH
   \   000368   D082         POP     DPL
   \   00036A   E0           MOVX    A,@DPTR
   \   00036B   C3           CLR     C
   \   00036C   98           SUBB    A,R0
   \   00036D   FA           MOV     R2,A
   \   00036E   A3           INC     DPTR
   \   00036F   E0           MOVX    A,@DPTR
   \   000370   99           SUBB    A,R1
   \   000371   FB           MOV     R3,A
   \   000372   7427         MOV     A,#0x27
   \   000374   12....       LCALL   ?XSTACK_DISP0_8
   \   000377   E0           MOVX    A,@DPTR
   \   000378   F8           MOV     R0,A
   \   000379   A3           INC     DPTR
   \   00037A   E0           MOVX    A,@DPTR
   \   00037B   F9           MOV     R1,A
   \   00037C   EA           MOV     A,R2
   \   00037D   C3           CLR     C
   \   00037E   98           SUBB    A,R0
   \   00037F   F5..         MOV     ?V4,A
   \   000381   EB           MOV     A,R3
   \   000382   99           SUBB    A,R1
   \   000383   F5..         MOV     ?V5,A
   \   000385   78..         MOV     R0,#?V4
   \   000387   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00038A   8E..         MOV     ?V4,R6
   \   00038C   8F..         MOV     ?V5,R7
   \   00038E   78..         MOV     R0,#?V4
   \   000390   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000393   AC..         MOV     R4,?V6
   \   000395   AA..         MOV     R2,?V2
   \   000397   AB..         MOV     R3,?V3
   \   000399   7404         MOV     A,#0x4
   \   00039B   12....       LCALL   ?XSTACK_DISP0_8
   \   00039E   E0           MOVX    A,@DPTR
   \   00039F   F9           MOV     R1,A
   \   0003A0   12....       LCALL   ??xferBuf?relay      ; Banked call to: xferBuf
   \   0003A3   7404         MOV     A,#0x4
   \   0003A5   12....       LCALL   ?DEALLOC_XSTACK8
   1358          
   1359                  // Calculate and write the new checksum.
   1360                  dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \   0003A8   A8..         MOV     R0,?V6
   \   0003AA   7900         MOV     R1,#0x0
   \   0003AC   E8           MOV     A,R0
   \   0003AD   75F002       MOV     B,#0x2
   \   0003B0   A4           MUL     AB
   \   0003B1   C8           XCH     A,R0
   \   0003B2   AAF0         MOV     R2,B
   \   0003B4   75F000       MOV     B,#0x0
   \   0003B7   A4           MUL     AB
   \   0003B8   2A           ADD     A,R2
   \   0003B9   FA           MOV     R2,A
   \   0003BA   75F002       MOV     B,#0x2
   \   0003BD   E9           MOV     A,R1
   \   0003BE   A4           MUL     AB
   \   0003BF   2A           ADD     A,R2
   \   0003C0   F9           MOV     R1,A
   \   0003C1   74..         MOV     A,#(pgOff + 14) & 0xff
   \   0003C3   28           ADD     A,R0
   \   0003C4   F582         MOV     DPL,A
   \   0003C6   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   0003C8   39           ADDC    A,R1
   \   0003C9   F583         MOV     DPH,A
   \   0003CB   C082         PUSH    DPL
   \   0003CD   C083         PUSH    DPH
   \   0003CF   7407         MOV     A,#0x7
   \   0003D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0003D4   E0           MOVX    A,@DPTR
   \   0003D5   F8           MOV     R0,A
   \   0003D6   A3           INC     DPTR
   \   0003D7   E0           MOVX    A,@DPTR
   \   0003D8   F9           MOV     R1,A
   \   0003D9   D083         POP     DPH
   \   0003DB   D082         POP     DPL
   \   0003DD   E0           MOVX    A,@DPTR
   \   0003DE   C3           CLR     C
   \   0003DF   98           SUBB    A,R0
   \   0003E0   F8           MOV     R0,A
   \   0003E1   A3           INC     DPTR
   \   0003E2   E0           MOVX    A,@DPTR
   \   0003E3   99           SUBB    A,R1
   \   0003E4   F9           MOV     R1,A
   \   0003E5   E8           MOV     A,R0
   \   0003E6   FE           MOV     R6,A
   \   0003E7   E9           MOV     A,R1
   \   0003E8   FF           MOV     R7,A
   1361          
   1362                  if ( hdr.chk == calcChkF( dstPg, dstOff, hdr.len ) )
   \   0003E9                ; Setup parameters for call to function calcChkF
   \   0003E9   740F         MOV     A,#0xf
   \   0003EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0003EE   E0           MOVX    A,@DPTR
   \   0003EF   FC           MOV     R4,A
   \   0003F0   A3           INC     DPTR
   \   0003F1   E0           MOVX    A,@DPTR
   \   0003F2   FD           MOV     R5,A
   \   0003F3   EE           MOV     A,R6
   \   0003F4   FA           MOV     R2,A
   \   0003F5   EF           MOV     A,R7
   \   0003F6   FB           MOV     R3,A
   \   0003F7   A9..         MOV     R1,?V6
   \   0003F9   12....       LCALL   ??calcChkF?relay     ; Banked call to: calcChkF
   \   0003FC   8A..         MOV     ?V4,R2
   \   0003FE   8B..         MOV     ?V5,R3
   \   000400   A8..         MOV     R0,?V4
   \   000402   A9..         MOV     R1,?V5
   \   000404   7411         MOV     A,#0x11
   \   000406   12....       LCALL   ?XSTACK_DISP0_8
   \   000409   E0           MOVX    A,@DPTR
   \   00040A   68           XRL     A,R0
   \   00040B   7003         JNZ     ??osal_nv_write_14
   \   00040D   A3           INC     DPTR
   \   00040E   E0           MOVX    A,@DPTR
   \   00040F   69           XRL     A,R1
   \                     ??osal_nv_write_14:
   \   000410   7043         JNZ     ??osal_nv_write_15
   1363                  {
   1364                    if ( hdr.chk != setChk( dstPg, dstOff, hdr.chk ) )
   \   000412                ; Setup parameters for call to function setChk
   \   000412   7411         MOV     A,#0x11
   \   000414   12....       LCALL   ?XSTACK_DISP0_8
   \   000417   E0           MOVX    A,@DPTR
   \   000418   FC           MOV     R4,A
   \   000419   A3           INC     DPTR
   \   00041A   E0           MOVX    A,@DPTR
   \   00041B   FD           MOV     R5,A
   \   00041C   EE           MOV     A,R6
   \   00041D   FA           MOV     R2,A
   \   00041E   EF           MOV     A,R7
   \   00041F   FB           MOV     R3,A
   \   000420   A9..         MOV     R1,?V6
   \   000422   12....       LCALL   ??setChk?relay       ; Banked call to: setChk
   \   000425   8A..         MOV     ?V4,R2
   \   000427   8B..         MOV     ?V5,R3
   \   000429   A8..         MOV     R0,?V4
   \   00042B   A9..         MOV     R1,?V5
   \   00042D   7411         MOV     A,#0x11
   \   00042F   12....       LCALL   ?XSTACK_DISP0_8
   \   000432   E0           MOVX    A,@DPTR
   \   000433   68           XRL     A,R0
   \   000434   7003         JNZ     ??osal_nv_write_16
   \   000436   A3           INC     DPTR
   \   000437   E0           MOVX    A,@DPTR
   \   000438   69           XRL     A,R1
   \                     ??osal_nv_write_16:
   \   000439   6005         JZ      ??osal_nv_write_17
   1365                    {
   1366                      rtrn = NV_OPER_FAILED;
   \   00043B   75..0A       MOV     ?V7,#0xa
   \   00043E   801D         SJMP    ??osal_nv_write_18
   1367                    }
   1368                    else
   1369                    {
   1370                      hotItemUpdate(dstPg, dstOff, hdr.id);
   \                     ??osal_nv_write_17:
   \   000440                ; Setup parameters for call to function hotItemUpdate
   \   000440   740D         MOV     A,#0xd
   \   000442   12....       LCALL   ?XSTACK_DISP0_8
   \   000445   E0           MOVX    A,@DPTR
   \   000446   FC           MOV     R4,A
   \   000447   A3           INC     DPTR
   \   000448   E0           MOVX    A,@DPTR
   \   000449   FD           MOV     R5,A
   \   00044A   EE           MOV     A,R6
   \   00044B   FA           MOV     R2,A
   \   00044C   EF           MOV     A,R7
   \   00044D   FB           MOV     R3,A
   \   00044E   A9..         MOV     R1,?V6
   \   000450   12....       LCALL   ??hotItemUpdate?relay; Banked call to: hotItemUpdate
   \   000453   8008         SJMP    ??osal_nv_write_18
   1371                    }
   1372                  }
   1373                  else
   1374                  {
   1375                    rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_15:
   \   000455   75..0A       MOV     ?V7,#0xa
   \   000458   8003         SJMP    ??osal_nv_write_18
   1376                  }
   1377                }
   1378                else
   1379                {
   1380                  rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_9:
   \   00045A   75..0A       MOV     ?V7,#0xa
   1381                }
   1382          
   1383                if ( comPg != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_write_18:
   \   00045D   7401         MOV     A,#0x1
   \   00045F   12....       LCALL   ?XSTACK_DISP0_8
   \   000462   E0           MOVX    A,@DPTR
   \   000463   603F         JZ      ??osal_nv_write_19
   1384                {
   1385                  /* Even though the page compaction succeeded, if the new item is coming from the compacted
   1386                   * page and writing the new value failed, then the compaction must be aborted.
   1387                   */
   1388                  if ( (srcPg == comPg) && (rtrn == NV_OPER_FAILED) )
   \   000465   85..82       MOV     DPL,?XSP + 0
   \   000468   85..83       MOV     DPH,?XSP + 1
   \   00046B   E0           MOVX    A,@DPTR
   \   00046C   F8           MOV     R0,A
   \   00046D   7401         MOV     A,#0x1
   \   00046F   12....       LCALL   ?XSTACK_DISP0_8
   \   000472   E0           MOVX    A,@DPTR
   \   000473   68           XRL     A,R0
   \   000474   7010         JNZ     ??osal_nv_write_20
   \   000476   740A         MOV     A,#0xa
   \   000478   65..         XRL     A,?V7
   \   00047A   700A         JNZ     ??osal_nv_write_20
   1389                  {
   1390                    erasePage( pgRes );
   \   00047C                ; Setup parameters for call to function erasePage
   \   00047C   90....       MOV     DPTR,#pgRes
   \   00047F   E0           MOVX    A,@DPTR
   \   000480   F9           MOV     R1,A
   \   000481   12....       LCALL   ??erasePage?relay    ; Banked call to: erasePage
   \   000484   801E         SJMP    ??osal_nv_write_19
   1391                  }
   1392                  else
   1393                  {
   1394                    COMPACT_PAGE_CLEANUP( comPg );
   \                     ??osal_nv_write_20:
   \   000486                ; Setup parameters for call to function setPageUse
   \   000486   7A01         MOV     R2,#0x1
   \   000488   90....       MOV     DPTR,#pgRes
   \   00048B   E0           MOVX    A,@DPTR
   \   00048C   F9           MOV     R1,A
   \   00048D   12....       LCALL   ??setPageUse?relay   ; Banked call to: setPageUse
   \   000490                ; Setup parameters for call to function erasePage
   \   000490   7401         MOV     A,#0x1
   \   000492   12....       LCALL   ?XSTACK_DISP0_8
   \   000495   E0           MOVX    A,@DPTR
   \   000496   F9           MOV     R1,A
   \   000497   12....       LCALL   ??erasePage?relay    ; Banked call to: erasePage
   \   00049A   7401         MOV     A,#0x1
   \   00049C   12....       LCALL   ?XSTACK_DISP0_8
   \   00049F   E0           MOVX    A,@DPTR
   \   0004A0   90....       MOV     DPTR,#pgRes
   \   0004A3   F0           MOVX    @DPTR,A
   1395                  }
   1396                }
   1397          
   1398                /* Zero of the old item must wait until after compact page cleanup has finished - if the item
   1399                 * is zeroed before and cleanup is interrupted by a power-cycle, the new item can be lost.
   1400                 */
   1401                if ( (srcPg != comPg) && (rtrn != NV_OPER_FAILED) )
   \                     ??osal_nv_write_19:
   \   0004A4   85..82       MOV     DPL,?XSP + 0
   \   0004A7   85..83       MOV     DPH,?XSP + 1
   \   0004AA   E0           MOVX    A,@DPTR
   \   0004AB   F8           MOV     R0,A
   \   0004AC   7401         MOV     A,#0x1
   \   0004AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0004B1   E0           MOVX    A,@DPTR
   \   0004B2   68           XRL     A,R0
   \   0004B3   601D         JZ      ??osal_nv_write_2
   \   0004B5   740A         MOV     A,#0xa
   \   0004B7   65..         XRL     A,?V7
   \   0004B9   6017         JZ      ??osal_nv_write_2
   1402                {
   1403                  setItem( srcPg, origOff, eNvZero );
   \   0004BB                ; Setup parameters for call to function setItem
   \   0004BB   7C01         MOV     R4,#0x1
   \   0004BD   740B         MOV     A,#0xb
   \   0004BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0004C2   E0           MOVX    A,@DPTR
   \   0004C3   FA           MOV     R2,A
   \   0004C4   A3           INC     DPTR
   \   0004C5   E0           MOVX    A,@DPTR
   \   0004C6   FB           MOV     R3,A
   \   0004C7   85..82       MOV     DPL,?XSP + 0
   \   0004CA   85..83       MOV     DPH,?XSP + 1
   \   0004CD   E0           MOVX    A,@DPTR
   \   0004CE   F9           MOV     R1,A
   \   0004CF   12....       LCALL   ??setItem?relay      ; Banked call to: setItem
   1404                }
   1405              }
   1406            }
   1407          
   1408            return rtrn;
   \                     ??osal_nv_write_2:
   \   0004D2   A9..         MOV     R1,?V7
   \                     ??osal_nv_write_1:
   \   0004D4   7417         MOV     A,#0x17
   \   0004D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004D9   7F08         MOV     R7,#0x8
   \   0004DB   02....       LJMP    ?BANKED_LEAVE_XDATA
   1409          }
   1410          
   1411          /*********************************************************************
   1412           * @fn      osal_nv_read
   1413           *
   1414           * @brief   Read data from NV. This function can be used to read an entire item from NV or
   1415           *          an element of an item by indexing into the item with an offset.
   1416           *          Read data is copied into *buf.
   1417           *
   1418           * @param   id  - Valid NV item Id.
   1419           * @param   ndx - Index offset into item
   1420           * @param   len - Length of data to read.
   1421           * @param  *buf - Data is read into this buffer.
   1422           *
   1423           * @return  SUCCESS if NV data was copied to the parameter 'buf'.
   1424           *          Otherwise, NV_OPER_FAILED for failure.
   1425           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1426          uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_read:
   1427          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V6,R2
   \   00000C   8B..         MOV     ?V7,R3
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
   \   000012   7412         MOV     A,#0x12
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FF           MOV     R7,A
   1428            uint16 offset;
   1429            uint8 hotIdx;
   1430          
   1431            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   00001C                ; Setup parameters for call to function hotItem
   \   00001C   AA..         MOV     R2,?V6
   \   00001E   AB..         MOV     R3,?V7
   \   000020   12....       LCALL   ??hotItem?relay      ; Banked call to: hotItem
   \   000023   E9           MOV     A,R1
   \   000024   F8           MOV     R0,A
   \   000025   88..         MOV     ?V0,R0
   \   000027   E8           MOV     A,R0
   \   000028   C3           CLR     C
   \   000029   9403         SUBB    A,#0x3
   \   00002B   505B         JNC     ??osal_nv_read_0
   1432            {
   1433              HalFlashRead(hotPg[hotIdx], hotOff[hotIdx]+ndx, buf, len);
   \   00002D                ; Setup parameters for call to function HalFlashRead
   \   00002D   8E..         MOV     ?V4,R6
   \   00002F   8F..         MOV     ?V5,R7
   \   000031   78..         MOV     R0,#?V4
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7416         MOV     A,#0x16
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FC           MOV     R4,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FD           MOV     R5,A
   \   000040   A8..         MOV     R0,?V0
   \   000042   7900         MOV     R1,#0x0
   \   000044   E8           MOV     A,R0
   \   000045   75F002       MOV     B,#0x2
   \   000048   A4           MUL     AB
   \   000049   C8           XCH     A,R0
   \   00004A   AAF0         MOV     R2,B
   \   00004C   75F000       MOV     B,#0x0
   \   00004F   A4           MUL     AB
   \   000050   2A           ADD     A,R2
   \   000051   FA           MOV     R2,A
   \   000052   75F002       MOV     B,#0x2
   \   000055   E9           MOV     A,R1
   \   000056   A4           MUL     AB
   \   000057   2A           ADD     A,R2
   \   000058   F9           MOV     R1,A
   \   000059   74..         MOV     A,#hotOff & 0xff
   \   00005B   28           ADD     A,R0
   \   00005C   F582         MOV     DPL,A
   \   00005E   74..         MOV     A,#(hotOff >> 8) & 0xff
   \   000060   39           ADDC    A,R1
   \   000061   F583         MOV     DPH,A
   \   000063   E0           MOVX    A,@DPTR
   \   000064   25..         ADD     A,?V2
   \   000066   FA           MOV     R2,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   35..         ADDC    A,?V3
   \   00006B   FB           MOV     R3,A
   \   00006C   A8..         MOV     R0,?V0
   \   00006E   7900         MOV     R1,#0x0
   \   000070   74..         MOV     A,#hotPg & 0xff
   \   000072   28           ADD     A,R0
   \   000073   F582         MOV     DPL,A
   \   000075   74..         MOV     A,#(hotPg >> 8) & 0xff
   \   000077   39           ADDC    A,R1
   \   000078   F583         MOV     DPH,A
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F9           MOV     R1,A
   \   00007C   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   00007F   7402         MOV     A,#0x2
   \   000081   12....       LCALL   ?DEALLOC_XSTACK8
   1434              return SUCCESS;
   \   000084   7900         MOV     R1,#0x0
   \   000086   8052         SJMP    ??osal_nv_read_1
   1435            }
   1436          
   1437            if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   \                     ??osal_nv_read_0:
   \   000088                ; Setup parameters for call to function findItem
   \   000088   AA..         MOV     R2,?V6
   \   00008A   AB..         MOV     R3,?V7
   \   00008C   12....       LCALL   ??findItem?relay     ; Banked call to: findItem
   \   00008F   8A..         MOV     ?V4,R2
   \   000091   8B..         MOV     ?V5,R3
   \   000093   A8..         MOV     R0,?V4
   \   000095   A9..         MOV     R1,?V5
   \   000097   85..82       MOV     DPL,?XSP + 0
   \   00009A   85..83       MOV     DPH,?XSP + 1
   \   00009D   E8           MOV     A,R0
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   A3           INC     DPTR
   \   0000A0   E9           MOV     A,R1
   \   0000A1   F0           MOVX    @DPTR,A
   \   0000A2   E8           MOV     A,R0
   \   0000A3   49           ORL     A,R1
   \   0000A4   7004         JNZ     ??osal_nv_read_2
   1438            {
   1439              return NV_OPER_FAILED;
   \   0000A6   790A         MOV     R1,#0xa
   \   0000A8   8030         SJMP    ??osal_nv_read_1
   1440            }
   1441            else
   1442            {
   1443              HalFlashRead(findPg, offset+ndx, buf, len);
   \                     ??osal_nv_read_2:
   \   0000AA                ; Setup parameters for call to function HalFlashRead
   \   0000AA   8E..         MOV     ?V4,R6
   \   0000AC   8F..         MOV     ?V5,R7
   \   0000AE   78..         MOV     R0,#?V4
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B3   7416         MOV     A,#0x16
   \   0000B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   FC           MOV     R4,A
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   FD           MOV     R5,A
   \   0000BD   7402         MOV     A,#0x2
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   25..         ADD     A,?V2
   \   0000C5   FA           MOV     R2,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   35..         ADDC    A,?V3
   \   0000CA   FB           MOV     R3,A
   \   0000CB   90....       MOV     DPTR,#findPg
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   F9           MOV     R1,A
   \   0000D0   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   0000D3   7402         MOV     A,#0x2
   \   0000D5   12....       LCALL   ?DEALLOC_XSTACK8
   1444              return SUCCESS;
   \   0000D8   7900         MOV     R1,#0x0
   \                     ??osal_nv_read_1:
   \   0000DA   7402         MOV     A,#0x2
   \   0000DC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DF   7F08         MOV     R7,#0x8
   \   0000E1   02....       LJMP    ?BANKED_LEAVE_XDATA
   1445            }
   1446          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initNV?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??setPageUse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setPageUse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initPage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??erasePage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    erasePage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??compactPage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    compactPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??findItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    findItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??setItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??setChk?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setChk

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??calcChkB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calcChkB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??calcChkF?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calcChkF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeWord?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWord

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeWordM?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWordM

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeWordH?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWordH

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??xferBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    xferBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??hotItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hotItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??hotItemUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hotItemUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_item_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_item_len?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_len

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_write?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_write

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_read?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_read
   1447          
   1448          /*********************************************************************
   1449          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     35   calcChkB
      1     62   calcChkF
        0     23   -> HalFlashRead
      0     56   compactPage
        0     28   -> HalFlashRead
        0     26   -> calcChkF
        0     26   -> erasePage
        0     26   -> hotItemUpdate
        0     26   -> setChk
        0     26   -> setItem
        0     26   -> setPageUse
        0     29   -> writeItem
        0     30   -> xferBuf
      0     48   erasePage
        0      9   -> HalFlashErase
      0     53   findItem
        0     14   -> findItem
        0     14   -> initPage
      2     22   hotItem
      1     50   hotItemUpdate
        0     11   -> hotItem
      1     70   initItem
        0     28   -> HalFlashRead
        0     26   -> compactPage
        0     26   -> erasePage
        0     26   -> setPageUse
        0     29   -> writeItem
        0     26   -> writeWordH
      2     31   initNV
        0     22   -> HalFlashRead
        0     20   -> compactPage
        0     20   -> erasePage
        0     20   -> initPage
        0     20   -> setPageUse
      0     50   initPage
        0     30   -> HalFlashRead
        0     28   -> calcChkF
        0     28   -> findItem
        0     28   -> setItem
      0      9   osal_nv_init
        0      9   -> initNV
      0     20   osal_nv_item_init
        0     16   -> HalAdcCheckVdd
        0     16   -> findItem
        0     16   -> hotItemUpdate
        0     18   -> initItem
      0     24   osal_nv_item_len
        0     24   -> HalFlashRead
        0     22   -> findItem
        0     22   -> hotItem
      0     24   osal_nv_read
        0     20   -> HalFlashRead
        0     18   -> findItem
        0     18   -> hotItem
      2     47   osal_nv_write
        0     39   -> HalAdcCheckVdd
        0     41   -> HalFlashRead
        0     39   -> calcChkF
        0     39   -> erasePage
        0     39   -> findItem
        0     39   -> hotItemUpdate
        0     41   -> initItem
        0     39   -> setChk
        0     39   -> setItem
        0     39   -> setPageUse
        0     41   -> writeBuf
        0     43   -> xferBuf
      0     55   setChk
        0     16   -> HalFlashRead
        0     14   -> writeWordH
      0     63   setItem
        0     24   -> HalFlashRead
        0     22   -> writeWord
      0     56   setPageUse
        0     17   -> writeWord
      1     65   writeBuf
        0     24   -> HalFlashRead
        0     22   -> writeWord
        0     24   -> writeWordM
      0     57   writeItem
        0     28   -> HalFlashRead
        0     26   -> calcChkB
        0     26   -> calcChkF
        0     26   -> hotItemUpdate
        0     26   -> setChk
        0     28   -> writeBuf
        0     26   -> writeWord
      0     42   writeWord
        0     16   -> HalFlashWrite
      1     42   writeWordH
        0     16   -> writeWord
      0     40   writeWordM
        0     16   -> HalFlashWrite
      1     68   xferBuf
        0     25   -> HalFlashRead
        0     23   -> writeWord


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??calcChkB?relay
       6  ??calcChkF?relay
       6  ??compactPage?relay
       6  ??erasePage?relay
       6  ??findItem?relay
       6  ??hotItem?relay
       6  ??hotItemUpdate?relay
       6  ??initItem?relay
       6  ??initNV?relay
       6  ??initPage?relay
       6  ??osal_nv_init?relay
       6  ??osal_nv_item_init?relay
       6  ??osal_nv_item_len?relay
       6  ??osal_nv_read?relay
       6  ??osal_nv_write?relay
       6  ??setChk?relay
       6  ??setItem?relay
       6  ??setPageUse?relay
       6  ??writeBuf?relay
       6  ??writeItem?relay
       6  ??writeWord?relay
       6  ??writeWordH?relay
       6  ??writeWordM?relay
       6  ??xferBuf?relay
   12288  _nvBuf
     144  calcChkB
     180  calcChkF
     808  compactPage
     101  erasePage
     102  findItem
       1  findPg
       6  hotIds
      66  hotItem
      96  hotItemUpdate
       6  hotOff
       3  hotPg
     572  initItem
     448  initNV
     681  initPage
      18  osal_nv_init
     117  osal_nv_item_init
     182  osal_nv_item_len
     228  osal_nv_read
    1246  osal_nv_write
      12  pgLost
      12  pgOff
       1  pgRes
      99  setChk
     236  setItem
      79  setPageUse
     521  writeBuf
     750  writeItem
      89  writeWord
      95  writeWordH
      95  writeWordM
     514  xferBuf

 
  7 467 bytes in segment BANKED_CODE
    144 bytes in segment BANK_RELAYS
      6 bytes in segment XDATA_ROM_C
     35 bytes in segment XDATA_Z
 12 288 bytes in segment ZIGNV_ADDRESS_SPACE
 
  7 611 bytes of CODE  memory
      6 bytes of CONST memory
 12 323 bytes of XDATA memory

Errors: none
Warnings: none
