###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:41
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mt\MT_TASK.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mt\MT_TASK.c" -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D XLAB
#        -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\MT_TASK.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\MT_TASK.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mt\MT_TASK.c
      1          /***************************************************************************************************
      2            Filename:       MT_TASK.c
      3            Revised:        $Date: 2010-07-20 19:48:51 -0700 (Tue, 20 Jul 2010) $
      4            Revision:       $Revision: 23075 $
      5          
      6            Description:    MonitorTest Task handling routines
      7          
      8            Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT_TASK.h"
     45          #include "MT.h"
     46          #include "MT_DEBUG.h"
     47          #include "MT_UART.h"
     48          #include "MT_UTIL.h"
     49          #include "MT_SYS.h"
     50          
     51          
     52          #if !defined( NONWK )
     53          #include "MT_ZDO.h"
     54          #include "MT_AF.h"
     55          #endif  /* NONWK */
     56          
     57          #include "hal_uart.h"
     58          #include "OSAL_Memory.h"
     59          
     60          /***************************************************************************************************
     61           * LOCAL FUNCTIONS
     62           ***************************************************************************************************/
     63          void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg );
     64          
     65          /***************************************************************************************************
     66           * GLOBALS
     67           ***************************************************************************************************/
     68          
     69          /***************************************************************************************************
     70           * @fn      MT_TaskInit
     71           *
     72           * @brief  MonitorTest Task Initialization.  This function is put into the
     73           *         task table.
     74           *
     75           * @param   byte task_id - task ID of the MT Task
     76           *
     77           * @return  void
     78           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     79          void MT_TaskInit(uint8 task_id)
   \                     MT_TaskInit:
     80          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
     81            /* Initialize the Serial port */
     82            MT_UartInit();
   \   000007                ; Setup parameters for call to function MT_UartInit
   \   000007   12....       LCALL   ??MT_UartInit?relay  ; Banked call to: MT_UartInit
     83          
     84            /* Register taskID - Do this after UartInit() because it will reset the taskID */
     85            MT_UartRegisterTaskID(task_id);
   \   00000A                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00000A   EE           MOV     A,R6
   \   00000B   F9           MOV     R1,A
   \   00000C   12....       LCALL   ??MT_UartRegisterTaskID?relay; Banked call to: MT_UartRegisterTaskID
     86          
     87            /* Initialize MT */
     88            MT_Init(task_id);
   \   00000F                ; Setup parameters for call to function MT_Init
   \   00000F   EE           MOV     A,R6
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   ??MT_Init?relay      ; Banked call to: MT_Init
     89          }
   \   000014   7F01         MOV     R7,#0x1
   \   000016   02....       LJMP    ?BANKED_LEAVE_XDATA
     90          
     91          /***************************************************************************************************
     92           * @fn      MT_ProcessEvent
     93           *
     94           * @brief MonitorTest Task Event Processor.  This task is put into the task table.
     95           *
     96           * @param   byte task_id - task ID of the MT Task
     97           * @param   UINT16 events - event(s) for the MT Task
     98           *
     99           * @return  void
    100           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    101          UINT16 MT_ProcessEvent(uint8 task_id, uint16 events)
   \                     MT_ProcessEvent:
    102          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    103            uint8 *msg_ptr;
    104          
    105            (void)task_id;  // Intentionally unreferenced parameter
    106          
    107            /* Could be multiple events, so switch won't work */
    108            if ( events & SYS_EVENT_MSG )
   \   00000B   EE           MOV     A,R6
   \   00000C   5400         ANL     A,#0x0
   \   00000E   F8           MOV     R0,A
   \   00000F   EF           MOV     A,R7
   \   000010   5480         ANL     A,#0x80
   \   000012   F9           MOV     R1,A
   \   000013   E8           MOV     A,R0
   \   000014   49           ORL     A,R1
   \   000015   602B         JZ      ??MT_ProcessEvent_0
    109            {
    110              while ( (msg_ptr = osal_msg_receive( MT_TaskID )) )
   \                     ??MT_ProcessEvent_1:
   \   000017                ; Setup parameters for call to function osal_msg_receive
   \   000017   90....       MOV     DPTR,#MT_TaskID
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   ??osal_msg_receive?relay; Banked call to: osal_msg_receive
   \   00001F   8A..         MOV     ?V4,R2
   \   000021   8B..         MOV     ?V5,R3
   \   000023   A8..         MOV     R0,?V4
   \   000025   A9..         MOV     R1,?V5
   \   000027   88..         MOV     ?V0,R0
   \   000029   89..         MOV     ?V1,R1
   \   00002B   E8           MOV     A,R0
   \   00002C   49           ORL     A,R1
   \   00002D   6009         JZ      ??MT_ProcessEvent_2
    111              {
    112                MT_ProcessIncomingCommand((mtOSALSerialData_t *)msg_ptr);
   \   00002F                ; Setup parameters for call to function MT_ProcessIncomingCommand
   \   00002F   AA..         MOV     R2,?V0
   \   000031   AB..         MOV     R3,?V1
   \   000033   12....       LCALL   ??MT_ProcessIncomingCommand?relay; Banked call to: MT_ProcessIncomingCommand
   \   000036   80DF         SJMP    ??MT_ProcessEvent_1
    113              }
    114          
    115              /* Return unproccessed events */
    116              return (events ^ SYS_EVENT_MSG);
   \                     ??MT_ProcessEvent_2:
   \   000038   EE           MOV     A,R6
   \   000039   6400         XRL     A,#0x0
   \   00003B   FA           MOV     R2,A
   \   00003C   EF           MOV     A,R7
   \   00003D   6480         XRL     A,#0x80
   \   00003F   FB           MOV     R3,A
   \   000040   8025         SJMP    ??MT_ProcessEvent_3
    117            }
    118          
    119            if ( events & MT_ZTOOL_SERIAL_RCV_BUFFER_FULL )
   \                     ??MT_ProcessEvent_0:
   \   000042   EE           MOV     A,R6
   \   000043   5402         ANL     A,#0x2
   \   000045   600A         JZ      ??MT_ProcessEvent_4
    120            {
    121              /* Return unproccessed events */
    122              return (events ^ MT_ZTOOL_SERIAL_RCV_BUFFER_FULL);
   \   000047   EE           MOV     A,R6
   \   000048   6402         XRL     A,#0x2
   \   00004A   FA           MOV     R2,A
   \   00004B   EF           MOV     A,R7
   \   00004C   6400         XRL     A,#0x0
   \   00004E   FB           MOV     R3,A
   \   00004F   8016         SJMP    ??MT_ProcessEvent_3
    123            }
    124          
    125          #if !defined( NONWK )
    126            if ( events & MT_AF_EXEC_EVT )
   \                     ??MT_ProcessEvent_4:
   \   000051   EE           MOV     A,R6
   \   000052   5408         ANL     A,#0x8
   \   000054   600D         JZ      ??MT_ProcessEvent_5
    127            {
    128              MT_AfExec();
   \   000056                ; Setup parameters for call to function MT_AfExec
   \   000056   12....       LCALL   ??MT_AfExec?relay    ; Banked call to: MT_AfExec
    129              return (events ^ MT_AF_EXEC_EVT);
   \   000059   EE           MOV     A,R6
   \   00005A   6408         XRL     A,#0x8
   \   00005C   FA           MOV     R2,A
   \   00005D   EF           MOV     A,R7
   \   00005E   6400         XRL     A,#0x0
   \   000060   FB           MOV     R3,A
   \   000061   8004         SJMP    ??MT_ProcessEvent_3
    130            }
    131          #endif  /* NONWK */
    132          
    133            /* Handle MT_SYS_OSAL_START_TIMER callbacks */
    134          #if defined MT_SYS_FUNC
    135            if ( events & (MT_SYS_OSAL_EVENT_MASK))
    136            {
    137              if (events & MT_SYS_OSAL_EVENT_0)
    138              {
    139                MT_SysOsalTimerExpired(0x00);
    140                events ^= MT_SYS_OSAL_EVENT_0;
    141              }
    142          
    143              if (events & MT_SYS_OSAL_EVENT_1)
    144              {
    145                MT_SysOsalTimerExpired(0x01);
    146                events ^= MT_SYS_OSAL_EVENT_1;
    147              }
    148          
    149              if (events & MT_SYS_OSAL_EVENT_2)
    150              {
    151                MT_SysOsalTimerExpired(0x02);
    152                events ^= MT_SYS_OSAL_EVENT_2;
    153              }
    154          
    155              if (events & MT_SYS_OSAL_EVENT_3)
    156              {
    157                MT_SysOsalTimerExpired(0x03);
    158                events ^= MT_SYS_OSAL_EVENT_3;
    159              }
    160          
    161              return events;
    162            }
    163          #endif
    164          
    165            /* Discard or make more handlers */
    166            return 0;
   \                     ??MT_ProcessEvent_5:
   \   000063   7A00         MOV     R2,#0x0
   \   000065   7B00         MOV     R3,#0x0
   \                     ??MT_ProcessEvent_3:
   \   000067   7F06         MOV     R7,#0x6
   \   000069   02....       LJMP    ?BANKED_LEAVE_XDATA
    167          
    168          } /* MT_ProcessEvent() */
    169          
    170          /***************************************************************************************************
    171           * @fn      MT_ProcessIncomingCommand
    172           *
    173           * @brief
    174           *
    175           *   Process Event Messages.
    176           *
    177           * @param   byte *msg - pointer to event message
    178           *
    179           * @return
    180           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    181          void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg )
   \                     MT_ProcessIncomingCommand:
    182          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    183            byte deallocate;
    184            byte *msg_ptr;
    185            byte len;
    186          
    187            /* A little setup for AF, CB_FUNC and MT_SYS_APP_RSP_MSG */
    188            msg_ptr = msg->msg;
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F9           MOV     R1,A
   \   000014   88..         MOV     ?V0,R0
   \   000016   89..         MOV     ?V1,R1
    189          
    190            deallocate = true;
   \   000018   75..01       MOV     ?V2,#0x1
    191          
    192            /* Use the first byte of the message as the command ID */
    193            switch ( msg->hdr.event )
   \   00001B   8E82         MOV     DPL,R6
   \   00001D   8F83         MOV     DPH,R7
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   14           DEC     A
   \   000021   6011         JZ      ??MT_ProcessIncomingCommand_0
   \   000023   14           DEC     A
   \   000024   601E         JZ      ??MT_ProcessIncomingCommand_1
   \   000026   24FE         ADD     A,#-0x2
   \   000028   6023         JZ      ??MT_ProcessIncomingCommand_2
   \   00002A   24FE         ADD     A,#-0x2
   \   00002C   605E         JZ      ??MT_ProcessIncomingCommand_3
   \   00002E   24E2         ADD     A,#-0x1e
   \   000030   6063         JZ      ??MT_ProcessIncomingCommand_4
   \   000032   8072         SJMP    ??MT_ProcessIncomingCommand_5
    194            {
    195              case CMD_SERIAL_MSG:
    196                MT_ProcessIncoming(msg->msg);
   \                     ??MT_ProcessIncomingCommand_0:
   \   000034                ; Setup parameters for call to function MT_ProcessIncoming
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   FA           MOV     R2,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FB           MOV     R3,A
   \   00003F   12....       LCALL   ??MT_ProcessIncoming?relay; Banked call to: MT_ProcessIncoming
    197                break;
   \   000042   8062         SJMP    ??MT_ProcessIncomingCommand_5
    198          
    199              case CMD_DEBUG_MSG:
    200                MT_ProcessDebugMsg( (mtDebugMsg_t *)msg );
   \                     ??MT_ProcessIncomingCommand_1:
   \   000044                ; Setup parameters for call to function MT_ProcessDebugMsg
   \   000044   EE           MOV     A,R6
   \   000045   FA           MOV     R2,A
   \   000046   EF           MOV     A,R7
   \   000047   FB           MOV     R3,A
   \   000048   12....       LCALL   ??MT_ProcessDebugMsg?relay; Banked call to: MT_ProcessDebugMsg
    201                break;
   \   00004B   8059         SJMP    ??MT_ProcessIncomingCommand_5
    202          
    203              case CB_FUNC:
    204                /*
    205                  Build SPI message here instead of redundantly calling MT_BuildSPIMsg
    206                  because we have copied data already in the allocated message
    207                */
    208          
    209                /* msg_ptr is the beginning of the intended SPI message */
    210                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
   \                     ??MT_ProcessIncomingCommand_2:
   \   00004D   85..82       MOV     DPL,?V0
   \   000050   85..83       MOV     DPH,?V1
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   2405         ADD     A,#0x5
   \   000059   F5..         MOV     ?V3,A
    211          
    212                /*
    213                  FCS goes to the last byte in the message and is calculated over all
    214                  the bytes except FCS and SOP
    215                */
    216                msg_ptr[len-1] = MT_UartCalcFCS(msg_ptr + 1, (byte)(len-2));
   \   00005B                ; Setup parameters for call to function MT_UartCalcFCS
   \   00005B   74FE         MOV     A,#-0x2
   \   00005D   25..         ADD     A,?V3
   \   00005F   F9           MOV     R1,A
   \   000060   85..82       MOV     DPL,?V0
   \   000063   85..83       MOV     DPH,?V1
   \   000066   A3           INC     DPTR
   \   000067   AA82         MOV     R2,DPL
   \   000069   AB83         MOV     R3,DPH
   \   00006B   12....       LCALL   ??MT_UartCalcFCS?relay; Banked call to: MT_UartCalcFCS
   \   00006E   E9           MOV     A,R1
   \   00006F   C0E0         PUSH    A
   \   000071   A8..         MOV     R0,?V3
   \   000073   7900         MOV     R1,#0x0
   \   000075   E5..         MOV     A,?V0
   \   000077   28           ADD     A,R0
   \   000078   F8           MOV     R0,A
   \   000079   E5..         MOV     A,?V1
   \   00007B   39           ADDC    A,R1
   \   00007C   F9           MOV     R1,A
   \   00007D   E8           MOV     A,R0
   \   00007E   24FF         ADD     A,#-0x1
   \   000080   F582         MOV     DPL,A
   \   000082   E9           MOV     A,R1
   \   000083   34FF         ADDC    A,#-0x1
   \   000085   F583         MOV     DPH,A
   \   000087   D0E0         POP     A
   \   000089   F0           MOVX    @DPTR,A
    217          
    218          #ifdef MT_UART_DEFAULT_PORT
    219                HalUARTWrite ( MT_UART_DEFAULT_PORT, msg_ptr, len );
    220          #endif
    221                break;
   \   00008A   801A         SJMP    ??MT_ProcessIncomingCommand_5
    222          
    223              case CMD_DEBUG_STR:
    224                MT_ProcessDebugStr( (mtDebugStr_t *)msg );
   \                     ??MT_ProcessIncomingCommand_3:
   \   00008C                ; Setup parameters for call to function MT_ProcessDebugStr
   \   00008C   EE           MOV     A,R6
   \   00008D   FA           MOV     R2,A
   \   00008E   EF           MOV     A,R7
   \   00008F   FB           MOV     R3,A
   \   000090   12....       LCALL   ??MT_ProcessDebugStr?relay; Banked call to: MT_ProcessDebugStr
    225                break;
   \   000093   8011         SJMP    ??MT_ProcessIncomingCommand_5
    226          
    227          #if !defined ( NONWK )
    228              case MT_SYS_APP_RSP_MSG:
    229                //len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD]; //del by liren
    230                len = msg->hdr.status;          // add by liren
   \                     ??MT_ProcessIncomingCommand_4:
   \   000095   8E82         MOV     DPL,R6
   \   000097   8F83         MOV     DPH,R7
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   F5..         MOV     ?V3,A
    231                MTProcessAppRspMsg( msg_ptr, len );
   \   00009D                ; Setup parameters for call to function MTProcessAppRspMsg
   \   00009D   A9..         MOV     R1,?V3
   \   00009F   AA..         MOV     R2,?V0
   \   0000A1   AB..         MOV     R3,?V1
   \   0000A3   12....       LCALL   ??MTProcessAppRspMsg?relay; Banked call to: MTProcessAppRspMsg
    232                break;
    233          #endif  // NONWK
    234          
    235          #if defined (MT_UTIL_FUNC)
    236          #if defined ZCL_KEY_ESTABLISH
    237              case ZCL_KEY_ESTABLISH_IND:
    238                MT_UtilKeyEstablishInd((keyEstablishmentInd_t *)msg);
    239                break;
    240          #endif
    241          #endif
    242          #ifdef MT_ZDO_CB_FUNC
    243              case ZDO_STATE_CHANGE:
    244                MT_ZdoStateChangeCB((osal_event_hdr_t *)msg);
    245                break;
    246          #endif
    247          
    248              default:
    249                break;
    250            }
    251          
    252            if ( deallocate )
   \                     ??MT_ProcessIncomingCommand_5:
   \   0000A6   E5..         MOV     A,?V2
   \   0000A8   6008         JZ      ??MT_ProcessIncomingCommand_6
    253            {
    254              osal_msg_deallocate( (uint8 *)msg );
   \   0000AA                ; Setup parameters for call to function osal_msg_deallocate
   \   0000AA   EE           MOV     A,R6
   \   0000AB   FA           MOV     R2,A
   \   0000AC   EF           MOV     A,R7
   \   0000AD   FB           MOV     R3,A
   \   0000AE   12....       LCALL   ??osal_msg_deallocate?relay; Banked call to: osal_msg_deallocate
   \   0000B1   E9           MOV     A,R1
    255            }
    256          }
   \                     ??MT_ProcessIncomingCommand_6:
   \   0000B2   7F04         MOV     R7,#0x4
   \   0000B4   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_TaskInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TaskInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ProcessIncomingCommand?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessIncomingCommand
    257          
    258          #ifdef MT_TASK
    259          /***************************************************************************************************
    260           * @fn      MT_TransportAlloc
    261           *
    262           * @brief   Allocate memory for transport msg
    263           *
    264           * @param   uint8 cmd0 - The first byte of the MT command id containing the command type and subsystem.
    265           *          uint8 len - length
    266           *
    267           * @return  pointer the allocated memory or NULL if fail to allocate the memory
    268           ***************************************************************************************************/
    269          uint8 *MT_TransportAlloc(uint8 cmd0, uint8 len)
    270          {
    271            uint8 *p;
    272          
    273            (void)cmd0;  // Intentionally unreferenced parameter
    274          
    275            /* Allocate a buffer of data length + SOP+CMD+FCS (5bytes) */
    276            p = osal_msg_allocate(len + SPI_0DATA_MSG_LEN);
    277          
    278            if (p)
    279            {
    280              p++; /* Save space for SOP_VALUE, msg structure */
    281              return p;
    282            }
    283            else
    284            {
    285              return NULL;
    286            }
    287          }
    288          
    289          /***************************************************************************************************
    290           * @fn      MT_TransportSend
    291           *
    292           * @brief   Fill in SOP and FCS then send out the msg
    293           *
    294           * @param   uint8 *pBuf - pointer to the message that contains CMD, length, data and FCS
    295           *
    296           * @return  None
    297           ***************************************************************************************************/
    298          void MT_TransportSend(uint8 *pBuf)
    299          {
    300            uint8 *msgPtr;
    301            uint8 dataLen = pBuf[0]; /* Data length is on byte #1 from the pointer */
    302          
    303            /* Move back to the SOP */
    304            msgPtr = pBuf-1;
    305          
    306            /* Insert SOP */
    307            msgPtr[0] = MT_UART_SOF;
    308          
    309            /* Insert FCS */
    310            msgPtr[SPI_0DATA_MSG_LEN - 1 + dataLen] = MT_UartCalcFCS (pBuf, (3 + dataLen));
    311          
    312            /* Send to UART */
    313          #ifdef MT_UART_DEFAULT_PORT
    314            HalUARTWrite(MT_UART_DEFAULT_PORT, msgPtr, dataLen + SPI_0DATA_MSG_LEN);
    315          #endif
    316          
    317            /* Deallocate */
    318            osal_msg_deallocate(msgPtr);
    319          }
    320          #endif /* MT_TASK */
    321          /***************************************************************************************************
    322           ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     14   MT_ProcessEvent
        0     14   -> MT_AfExec
        0     14   -> MT_ProcessIncomingCommand
        0     14   -> osal_msg_receive
      1     26   MT_ProcessIncomingCommand
        0     12   -> MTProcessAppRspMsg
        0     12   -> MT_ProcessDebugMsg
        0     12   -> MT_ProcessDebugStr
        0     12   -> MT_ProcessIncoming
        0     12   -> MT_UartCalcFCS
        0     12   -> osal_msg_deallocate
      0      9   MT_TaskInit
        0      9   -> MT_Init
        0      9   -> MT_UartInit
        0      9   -> MT_UartRegisterTaskID


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??MT_ProcessEvent?relay
       6  ??MT_ProcessIncomingCommand?relay
       6  ??MT_TaskInit?relay
     108  MT_ProcessEvent
     183  MT_ProcessIncomingCommand
      25  MT_TaskInit

 
 316 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
 
 334 bytes of CODE memory

Errors: none
Warnings: none
