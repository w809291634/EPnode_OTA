###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:36
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\common\at.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\common\at.c"
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        XLAB -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\at.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\at.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\common\at.c
      1          /*********************************************************************************************
                                                                                                              ^
Warning[Pa050]: non-native end of line sequence detected (this diagnostic is
          only issued once)
      2          * 文件：at.c
      3          * 作者：Xuzhy 2018.5.16
      4          * 说明：节点串口at指令
      5          * 修改：fuyou 增加透传驱动
      6          * 注释：
      7          *********************************************************************************************/
      8          
      9          /*********************************************************************************************
     10          * 头文件
     11          *********************************************************************************************/
     12          #include <stdlib.h>
     13          #include <ctype.h>
     14          #include <stdio.h>
     15          #include <string.h>
     16          #include "ZComDef.h"
     17          #include "sapi.h"
     18          #include "hal_uart.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1
     19          #include "hal_led.h"
     20          #include "at.h"
     21          #include "AppCommon.h"
     22          #include "at-uart.h"
     23          #include "hal_flash.h"
     24          #include "iap_config.h"
     25          #include "hal_types.h"
     26          #include "hal_mcu.h"
     27          
     28          /*********************************************************************************************
     29          * 宏定义
     30          *********************************************************************************************/
     31          #define AT_BUFF_SIZE    96                                      //AT缓存长度
     32          #define AT_BUFF_NUM     2                                       //AT缓存个数
     33          /*********************************************************************************************
     34          * 全局变量
     35          *********************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     36          static uint8 __AT_EVT;                                          //AT接口事件
   \                     __AT_EVT:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     37          static char at_echo = 0;
   \                     at_echo:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     38          static int at_datalen = 0;                                     // 指示用于接收发送的数据长度
   \                     at_datalen:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     39          static int at_recvdata = 0;
   \                     at_recvdata:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     40          static char atbuff[AT_BUFF_NUM][AT_BUFF_SIZE];                  //AT指令接收缓存
   \                     atbuff:
   \   000000                DS 192
   \   0000C0                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     41          static char bufferbit = 0;
   \                     bufferbit:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     42          static char *pAtCommand = NULL;                                 // 存放接收到的at指令或数据
   \                     pAtCommand:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     43          sys_parameter_t sys_parameter;
   \                     sys_parameter:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     44          /*********************************************************************************************
     45          * 函数原型说明
     46          *********************************************************************************************/
     47          static char* at_quebuffer_get(void);
     48          static void at_quebuffer_put(char *buf);
     49          static int _at_get_ch(char ch); 
     50          uint8 _get_at_event(void);                                      // at 事件标识
     51          void at_recv_ch(char ch);
     52          int8 getLastPkgRssi(void);
     53          /*********************************************************************************************
     54          * 名称：at_quebuffer_put()
     55          * 功能：at缓存释放
     56          * 参数：
     57          * 返回：
     58          * 修改：
     59          * 注释：
     60          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     61          void at_quebuffer_put(char *buf)
   \                     at_quebuffer_put:
     62          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     63            for (int i=0; i<AT_BUFF_NUM; i++) {
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
   \                     ??at_quebuffer_put_0:
   \   000009   C3           CLR     C
   \   00000A   E8           MOV     A,R0
   \   00000B   9402         SUBB    A,#0x2
   \   00000D   E9           MOV     A,R1
   \   00000E   9400         SUBB    A,#0x0
   \   000010   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000012   65D0         XRL     A,PSW
   \   000014   33           RLC     A
   \   000015   5048         JNC     ??at_quebuffer_put_1
     64              if (atbuff[i] == buf){
   \   000017   E8           MOV     A,R0
   \   000018   FC           MOV     R4,A
   \   000019   E9           MOV     A,R1
   \   00001A   FD           MOV     R5,A
   \   00001B   EC           MOV     A,R4
   \   00001C   75F060       MOV     B,#0x60
   \   00001F   A4           MUL     AB
   \   000020   CC           XCH     A,R4
   \   000021   AEF0         MOV     R6,B
   \   000023   75F000       MOV     B,#0x0
   \   000026   A4           MUL     AB
   \   000027   2E           ADD     A,R6
   \   000028   FE           MOV     R6,A
   \   000029   75F060       MOV     B,#0x60
   \   00002C   ED           MOV     A,R5
   \   00002D   A4           MUL     AB
   \   00002E   2E           ADD     A,R6
   \   00002F   FD           MOV     R5,A
   \   000030   74..         MOV     A,#atbuff & 0xff
   \   000032   2C           ADD     A,R4
   \   000033   FC           MOV     R4,A
   \   000034   74..         MOV     A,#(atbuff >> 8) & 0xff
   \   000036   3D           ADDC    A,R5
   \   000037   FD           MOV     R5,A
   \   000038   EA           MOV     A,R2
   \   000039   6C           XRL     A,R4
   \   00003A   7002         JNZ     ??at_quebuffer_put_2
   \   00003C   EB           MOV     A,R3
   \   00003D   6D           XRL     A,R5
   \                     ??at_quebuffer_put_2:
   \   00003E   7018         JNZ     ??at_quebuffer_put_3
     65                bufferbit &= ~(1<<i);
   \   000040   75..01       MOV     ?V0,#0x1
   \   000043   75..00       MOV     ?V1,#0x0
   \   000046   E8           MOV     A,R0
   \   000047   78..         MOV     R0,#?V0
   \   000049   12....       LCALL   ?S_SHL
   \   00004C   E5..         MOV     A,?V0
   \   00004E   F4           CPL     A
   \   00004F   F8           MOV     R0,A
   \   000050   90....       MOV     DPTR,#bufferbit
   \   000053   E0           MOVX    A,@DPTR
   \   000054   58           ANL     A,R0
   \   000055   F0           MOVX    @DPTR,A
     66                return;
   \   000056   8007         SJMP    ??at_quebuffer_put_1
     67              }
     68            }
   \                     ??at_quebuffer_put_3:
   \   000058   08           INC     R0
   \   000059   E8           MOV     A,R0
   \   00005A   70AD         JNZ     ??at_quebuffer_put_0
   \   00005C   09           INC     R1
   \   00005D   80AA         SJMP    ??at_quebuffer_put_0
     69          }
   \                     ??at_quebuffer_put_1:
   \   00005F   7F02         MOV     R7,#0x2
   \   000061   02....       LJMP    ?BANKED_LEAVE_XDATA
     70          /*********************************************************************************************
     71          * 名称：at_quebuffer_get()
     72          * 功能：缓存获取
     73          * 参数：
     74          * 返回：
     75          * 修改：
     76          * 注释：
     77          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     78          char* at_quebuffer_get(void)
   \                     at_quebuffer_get:
     79          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     80            for (int i=0; i<AT_BUFF_NUM; i++) {
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \                     ??at_quebuffer_get_0:
   \   000009   C3           CLR     C
   \   00000A   EA           MOV     A,R2
   \   00000B   9402         SUBB    A,#0x2
   \   00000D   EB           MOV     A,R3
   \   00000E   9400         SUBB    A,#0x0
   \   000010   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000012   65D0         XRL     A,PSW
   \   000014   33           RLC     A
   \   000015   504E         JNC     ??at_quebuffer_get_1
     81              if (((bufferbit>>i) & 1) == 0) {
   \   000017   90....       MOV     DPTR,#bufferbit
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0,A
   \   00001D   75..00       MOV     ?V1,#0x0
   \   000020   EA           MOV     A,R2
   \   000021   78..         MOV     R0,#?V0
   \   000023   12....       LCALL   ?SS_SHR
   \   000026   E5..         MOV     A,?V0
   \   000028   A2E0         MOV     C,0xE0 /* A   */.0
   \   00002A   4032         JC      ??at_quebuffer_get_2
     82                bufferbit |= 1<<i;
   \   00002C   75..01       MOV     ?V0,#0x1
   \   00002F   75..00       MOV     ?V1,#0x0
   \   000032   EA           MOV     A,R2
   \   000033   78..         MOV     R0,#?V0
   \   000035   12....       LCALL   ?S_SHL
   \   000038   90....       MOV     DPTR,#bufferbit
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   45..         ORL     A,?V0
   \   00003E   F0           MOVX    @DPTR,A
     83                  return atbuff[i];
   \   00003F   EA           MOV     A,R2
   \   000040   75F060       MOV     B,#0x60
   \   000043   A4           MUL     AB
   \   000044   CA           XCH     A,R2
   \   000045   A8F0         MOV     R0,B
   \   000047   75F000       MOV     B,#0x0
   \   00004A   A4           MUL     AB
   \   00004B   28           ADD     A,R0
   \   00004C   F8           MOV     R0,A
   \   00004D   75F060       MOV     B,#0x60
   \   000050   EB           MOV     A,R3
   \   000051   A4           MUL     AB
   \   000052   28           ADD     A,R0
   \   000053   FB           MOV     R3,A
   \   000054   74..         MOV     A,#atbuff & 0xff
   \   000056   2A           ADD     A,R2
   \   000057   FA           MOV     R2,A
   \   000058   74..         MOV     A,#(atbuff >> 8) & 0xff
   \   00005A   3B           ADDC    A,R3
   \   00005B   FB           MOV     R3,A
   \   00005C   800B         SJMP    ??at_quebuffer_get_3
     84              }
     85            }
   \                     ??at_quebuffer_get_2:
   \   00005E   0A           INC     R2
   \   00005F   EA           MOV     A,R2
   \   000060   70A7         JNZ     ??at_quebuffer_get_0
   \   000062   0B           INC     R3
   \   000063   80A4         SJMP    ??at_quebuffer_get_0
     86            return NULL;
   \                     ??at_quebuffer_get_1:
   \   000065   7A00         MOV     R2,#0x0
   \   000067   7B00         MOV     R3,#0x0
   \                     ??at_quebuffer_get_3:
   \   000069   7F02         MOV     R7,#0x2
   \   00006B   02....       LJMP    ?BANKED_LEAVE_XDATA
     87          }
     88          /*********************************************************************************************
     89          * 名称：at_put_ch()
     90          * 功能：通过at端口发送一个字符
     91          * 参数：ch: 待发送的字符
     92          * 返回：无
     93          * 修改：
     94          * 注释：
     95          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     96          static void _at_put_ch(uint8 ch)
   \                     _at_put_ch:
     97          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
     98            at_uart_write(ch);
   \   000007                ; Setup parameters for call to function at_uart_write
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   ??at_uart_write?relay; Banked call to: at_uart_write
     99          }
   \   00000C   7F01         MOV     R7,#0x1
   \   00000E   02....       LJMP    ?BANKED_LEAVE_XDATA
    100          /*********************************************************************************************
    101          * 名称：_at_get_ch()
    102          * 功能：处理at接口接收到的数据
    103          * 参数：
    104          * 返回：
    105          * 修改：
    106          * 注释：
    107          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    108          static int _at_get_ch(char ch)
   \                     _at_get_ch:
    109          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    110            static char idx = 0;
    111            static char *pbuf = NULL;
    112            if (pbuf == NULL) {
   \   000007   90....       MOV     DPTR,#??pbuf
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   E8           MOV     A,R0
   \   000010   49           ORL     A,R1
   \   000011   701E         JNZ     ??_at_get_ch_0
    113              pbuf = at_quebuffer_get();
   \   000013                ; Setup parameters for call to function at_quebuffer_get
   \   000013   12....       LCALL   ??at_quebuffer_get?relay; Banked call to: at_quebuffer_get
   \   000016   90....       MOV     DPTR,#??pbuf
   \   000019   EA           MOV     A,R2
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   EB           MOV     A,R3
   \   00001D   F0           MOVX    @DPTR,A
    114              if (pbuf == NULL) { 
   \   00001E   90....       MOV     DPTR,#??pbuf
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   E8           MOV     A,R0
   \   000027   49           ORL     A,R1
   \   000028   7007         JNZ     ??_at_get_ch_0
    115                return -1;
   \   00002A   7AFF         MOV     R2,#-0x1
   \   00002C   7BFF         MOV     R3,#-0x1
   \   00002E   02....       LJMP    ??_at_get_ch_1 & 0xFFFF
    116              }
    117            }
    118            if (at_datalen == 0) {
   \                     ??_at_get_ch_0:
   \   000031   90....       MOV     DPTR,#at_datalen
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F8           MOV     R0,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F9           MOV     R1,A
   \   000039   E8           MOV     A,R0
   \   00003A   49           ORL     A,R1
   \   00003B   6003         JZ      $+5
   \   00003D   02....       LJMP    ??_at_get_ch_2 & 0xFFFF
    119              if (at_echo) {
   \   000040   90....       MOV     DPTR,#at_echo
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6005         JZ      ??_at_get_ch_3
    120                _at_put_ch(ch);
   \   000046                ; Setup parameters for call to function _at_put_ch
   \   000046   EE           MOV     A,R6
   \   000047   F9           MOV     R1,A
   \   000048   12....       LCALL   ??_at_put_ch?relay   ; Banked call to: _at_put_ch
    121              }
    122              if (idx < AT_BUFF_SIZE-1) {
   \                     ??_at_get_ch_3:
   \   00004B   90....       MOV     DPTR,#??idx
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   C3           CLR     C
   \   000050   945F         SUBB    A,#0x5f
   \   000052   4003         JC      $+5
   \   000054   02....       LJMP    ??_at_get_ch_4 & 0xFFFF
    123                pbuf[idx++] = ch;
   \   000057   EE           MOV     A,R6
   \   000058   C0E0         PUSH    A
   \   00005A   90....       MOV     DPTR,#??idx
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F8           MOV     R0,A
   \   00005F   7900         MOV     R1,#0x0
   \   000061   90....       MOV     DPTR,#??pbuf
   \   000064   E0           MOVX    A,@DPTR
   \   000065   28           ADD     A,R0
   \   000066   FA           MOV     R2,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   39           ADDC    A,R1
   \   00006A   8A82         MOV     DPL,R2
   \   00006C   F583         MOV     DPH,A
   \   00006E   D0E0         POP     A
   \   000070   F0           MOVX    @DPTR,A
   \   000071   90....       MOV     DPTR,#??idx
   \   000074   E0           MOVX    A,@DPTR
   \   000075   2401         ADD     A,#0x1
   \   000077   F0           MOVX    @DPTR,A
    124                if (idx >= 2 && pbuf[idx-2]=='\r' && pbuf[idx-1]=='\n'){
   \   000078   90....       MOV     DPTR,#??idx
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   C3           CLR     C
   \   00007D   9402         SUBB    A,#0x2
   \   00007F   5003         JNC     $+5
   \   000081   02....       LJMP    ??_at_get_ch_5 & 0xFFFF
   \   000084   90....       MOV     DPTR,#??idx
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F8           MOV     R0,A
   \   000089   7900         MOV     R1,#0x0
   \   00008B   90....       MOV     DPTR,#??pbuf
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   28           ADD     A,R0
   \   000090   F8           MOV     R0,A
   \   000091   A3           INC     DPTR
   \   000092   E0           MOVX    A,@DPTR
   \   000093   39           ADDC    A,R1
   \   000094   F9           MOV     R1,A
   \   000095   E8           MOV     A,R0
   \   000096   24FE         ADD     A,#-0x2
   \   000098   F582         MOV     DPL,A
   \   00009A   E9           MOV     A,R1
   \   00009B   34FF         ADDC    A,#-0x1
   \   00009D   F583         MOV     DPH,A
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   640D         XRL     A,#0xd
   \   0000A2   6003         JZ      $+5
   \   0000A4   02....       LJMP    ??_at_get_ch_5 & 0xFFFF
   \   0000A7   90....       MOV     DPTR,#??idx
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F8           MOV     R0,A
   \   0000AC   7900         MOV     R1,#0x0
   \   0000AE   90....       MOV     DPTR,#??pbuf
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   28           ADD     A,R0
   \   0000B3   F8           MOV     R0,A
   \   0000B4   A3           INC     DPTR
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   39           ADDC    A,R1
   \   0000B7   F9           MOV     R1,A
   \   0000B8   E8           MOV     A,R0
   \   0000B9   24FF         ADD     A,#-0x1
   \   0000BB   F582         MOV     DPL,A
   \   0000BD   E9           MOV     A,R1
   \   0000BE   34FF         ADDC    A,#-0x1
   \   0000C0   F583         MOV     DPH,A
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   640A         XRL     A,#0xa
   \   0000C5   6003         JZ      $+5
   \   0000C7   02....       LJMP    ??_at_get_ch_5 & 0xFFFF
    125                  idx -= 2;
   \   0000CA   90....       MOV     DPTR,#??idx
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   24FE         ADD     A,#-0x2
   \   0000D0   F0           MOVX    @DPTR,A
    126                  pbuf[idx] = '\0';
   \   0000D1   90....       MOV     DPTR,#??idx
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   F8           MOV     R0,A
   \   0000D6   7900         MOV     R1,#0x0
   \   0000D8   90....       MOV     DPTR,#??pbuf
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   28           ADD     A,R0
   \   0000DD   FA           MOV     R2,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   39           ADDC    A,R1
   \   0000E1   8A82         MOV     DPL,R2
   \   0000E3   F583         MOV     DPH,A
   \   0000E5   7400         MOV     A,#0x0
   \   0000E7   F0           MOVX    @DPTR,A
    127                  if (idx > 0) {
   \   0000E8   90....       MOV     DPTR,#??idx
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   604C         JZ      ??_at_get_ch_6
    128                    /* at指令接收完成 */
    129                    if (pAtCommand == NULL) {
   \   0000EE   90....       MOV     DPTR,#pAtCommand
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   F8           MOV     R0,A
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   F9           MOV     R1,A
   \   0000F6   E8           MOV     A,R0
   \   0000F7   49           ORL     A,R1
   \   0000F8   7022         JNZ     ??_at_get_ch_7
    130                      pAtCommand = pbuf;
   \   0000FA   90....       MOV     DPTR,#??pbuf
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   F8           MOV     R0,A
   \   0000FF   A3           INC     DPTR
   \   000100   E0           MOVX    A,@DPTR
   \   000101   F9           MOV     R1,A
   \   000102   90....       MOV     DPTR,#pAtCommand
   \   000105   E8           MOV     A,R0
   \   000106   F0           MOVX    @DPTR,A
   \   000107   A3           INC     DPTR
   \   000108   E9           MOV     A,R1
   \   000109   F0           MOVX    @DPTR,A
    131                      osal_set_event(sapi_TaskID, __AT_EVT);
   \   00010A                ; Setup parameters for call to function osal_set_event
   \   00010A   90....       MOV     DPTR,#__AT_EVT
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   FA           MOV     R2,A
   \   00010F   7B00         MOV     R3,#0x0
   \   000111   90....       MOV     DPTR,#sapi_TaskID
   \   000114   E0           MOVX    A,@DPTR
   \   000115   F9           MOV     R1,A
   \   000116   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   000119   E9           MOV     A,R1
   \   00011A   800B         SJMP    ??_at_get_ch_8
    132                    } else {
    133                      at_quebuffer_put(pbuf); //丢弃数据
   \                     ??_at_get_ch_7:
   \   00011C                ; Setup parameters for call to function at_quebuffer_put
   \   00011C   90....       MOV     DPTR,#??pbuf
   \   00011F   E0           MOVX    A,@DPTR
   \   000120   FA           MOV     R2,A
   \   000121   A3           INC     DPTR
   \   000122   E0           MOVX    A,@DPTR
   \   000123   FB           MOV     R3,A
   \   000124   12....       LCALL   ??at_quebuffer_put?relay; Banked call to: at_quebuffer_put
    134                    }
    135                     
    136                    pbuf = NULL;
   \                     ??_at_get_ch_8:
   \   000127   90....       MOV     DPTR,#??pbuf
   \   00012A   7400         MOV     A,#0x0
   \   00012C   F0           MOVX    @DPTR,A
   \   00012D   A3           INC     DPTR
   \   00012E   7400         MOV     A,#0x0
   \   000130   F0           MOVX    @DPTR,A
    137                    idx = 0;
   \   000131   90....       MOV     DPTR,#??idx
   \   000134   7400         MOV     A,#0x0
   \   000136   F0           MOVX    @DPTR,A
   \   000137   02....       LJMP    ??_at_get_ch_5 & 0xFFFF
    138                  } else {
    139                     //丢弃数据
    140                    idx = 0;
   \                     ??_at_get_ch_6:
   \   00013A   90....       MOV     DPTR,#??idx
   \   00013D   7400         MOV     A,#0x0
   \   00013F   F0           MOVX    @DPTR,A
   \   000140   02....       LJMP    ??_at_get_ch_5 & 0xFFFF
    141                  }
    142                }
    143              } else {
    144                /*缓存溢出丢弃所有数据*/
    145                idx = 0;
   \                     ??_at_get_ch_4:
   \   000143   90....       MOV     DPTR,#??idx
   \   000146   7400         MOV     A,#0x0
   \   000148   F0           MOVX    @DPTR,A
   \   000149   02....       LJMP    ??_at_get_ch_5 & 0xFFFF
    146              }
    147            } else {
    148              pbuf[at_recvdata++] = ch;
   \                     ??_at_get_ch_2:
   \   00014C   EE           MOV     A,R6
   \   00014D   C0E0         PUSH    A
   \   00014F   90....       MOV     DPTR,#at_recvdata
   \   000152   E0           MOVX    A,@DPTR
   \   000153   F8           MOV     R0,A
   \   000154   A3           INC     DPTR
   \   000155   E0           MOVX    A,@DPTR
   \   000156   F9           MOV     R1,A
   \   000157   90....       MOV     DPTR,#??pbuf
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   28           ADD     A,R0
   \   00015C   FA           MOV     R2,A
   \   00015D   A3           INC     DPTR
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   39           ADDC    A,R1
   \   000160   8A82         MOV     DPL,R2
   \   000162   F583         MOV     DPH,A
   \   000164   D0E0         POP     A
   \   000166   F0           MOVX    @DPTR,A
   \   000167   90....       MOV     DPTR,#at_recvdata
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   2401         ADD     A,#0x1
   \   00016D   F0           MOVX    @DPTR,A
   \   00016E   A3           INC     DPTR
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   3400         ADDC    A,#0x0
   \   000172   F0           MOVX    @DPTR,A
    149              if (at_recvdata == at_datalen) {
   \   000173   90....       MOV     DPTR,#at_recvdata
   \   000176   E0           MOVX    A,@DPTR
   \   000177   F8           MOV     R0,A
   \   000178   A3           INC     DPTR
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   F9           MOV     R1,A
   \   00017B   90....       MOV     DPTR,#at_datalen
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   68           XRL     A,R0
   \   000180   7003         JNZ     ??_at_get_ch_9
   \   000182   A3           INC     DPTR
   \   000183   E0           MOVX    A,@DPTR
   \   000184   69           XRL     A,R1
   \                     ??_at_get_ch_9:
   \   000185   7057         JNZ     ??_at_get_ch_5
    150                /*数据接收完成*/
    151                if (pAtCommand == NULL) {
   \   000187   90....       MOV     DPTR,#pAtCommand
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   F8           MOV     R0,A
   \   00018C   A3           INC     DPTR
   \   00018D   E0           MOVX    A,@DPTR
   \   00018E   F9           MOV     R1,A
   \   00018F   E8           MOV     A,R0
   \   000190   49           ORL     A,R1
   \   000191   7022         JNZ     ??_at_get_ch_10
    152                  pAtCommand = pbuf;
   \   000193   90....       MOV     DPTR,#??pbuf
   \   000196   E0           MOVX    A,@DPTR
   \   000197   F8           MOV     R0,A
   \   000198   A3           INC     DPTR
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   F9           MOV     R1,A
   \   00019B   90....       MOV     DPTR,#pAtCommand
   \   00019E   E8           MOV     A,R0
   \   00019F   F0           MOVX    @DPTR,A
   \   0001A0   A3           INC     DPTR
   \   0001A1   E9           MOV     A,R1
   \   0001A2   F0           MOVX    @DPTR,A
    153                  osal_set_event(sapi_TaskID, __AT_EVT);
   \   0001A3                ; Setup parameters for call to function osal_set_event
   \   0001A3   90....       MOV     DPTR,#__AT_EVT
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   FA           MOV     R2,A
   \   0001A8   7B00         MOV     R3,#0x0
   \   0001AA   90....       MOV     DPTR,#sapi_TaskID
   \   0001AD   E0           MOVX    A,@DPTR
   \   0001AE   F9           MOV     R1,A
   \   0001AF   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   0001B2   E9           MOV     A,R1
   \   0001B3   8015         SJMP    ??_at_get_ch_11
    154                }else {
    155                   at_quebuffer_put(pbuf); //丢弃数据
   \                     ??_at_get_ch_10:
   \   0001B5                ; Setup parameters for call to function at_quebuffer_put
   \   0001B5   90....       MOV     DPTR,#??pbuf
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   FA           MOV     R2,A
   \   0001BA   A3           INC     DPTR
   \   0001BB   E0           MOVX    A,@DPTR
   \   0001BC   FB           MOV     R3,A
   \   0001BD   12....       LCALL   ??at_quebuffer_put?relay; Banked call to: at_quebuffer_put
    156                   at_recvdata = 0;
   \   0001C0   90....       MOV     DPTR,#at_recvdata
   \   0001C3   7400         MOV     A,#0x0
   \   0001C5   F0           MOVX    @DPTR,A
   \   0001C6   A3           INC     DPTR
   \   0001C7   7400         MOV     A,#0x0
   \   0001C9   F0           MOVX    @DPTR,A
    157                }
    158                at_datalen = 0;
   \                     ??_at_get_ch_11:
   \   0001CA   90....       MOV     DPTR,#at_datalen
   \   0001CD   7400         MOV     A,#0x0
   \   0001CF   F0           MOVX    @DPTR,A
   \   0001D0   A3           INC     DPTR
   \   0001D1   7400         MOV     A,#0x0
   \   0001D3   F0           MOVX    @DPTR,A
    159                pbuf = NULL;
   \   0001D4   90....       MOV     DPTR,#??pbuf
   \   0001D7   7400         MOV     A,#0x0
   \   0001D9   F0           MOVX    @DPTR,A
   \   0001DA   A3           INC     DPTR
   \   0001DB   7400         MOV     A,#0x0
   \   0001DD   F0           MOVX    @DPTR,A
    160              }
    161            }
    162            return idx;
   \                     ??_at_get_ch_5:
   \   0001DE   90....       MOV     DPTR,#??idx
   \   0001E1   E0           MOVX    A,@DPTR
   \   0001E2   FA           MOV     R2,A
   \   0001E3   7B00         MOV     R3,#0x0
   \                     ??_at_get_ch_1:
   \   0001E5   7F01         MOV     R7,#0x1
   \   0001E7   02....       LJMP    ?BANKED_LEAVE_XDATA
    163          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??idx:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??pbuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    164          /*********************************************************************************************
    165          * 名称：at_response_buf()
    166          * 功能：通过at接口发送一段数据
    167          * 参数：s:数据开始地址
    168          *       len：数据长度
    169          * 返回：
    170          * 修改：
    171          * 注释：
    172          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    173          void at_response_buf(char *s, int len)
   \                     at_response_buf:
    174          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    175            for (int i=0; i<len; i++) {
   \   00000D   75..00       MOV     ?V0,#0x0
   \   000010   75..00       MOV     ?V1,#0x0
   \                     ??at_response_buf_0:
   \   000013   C3           CLR     C
   \   000014   E5..         MOV     A,?V0
   \   000016   9E           SUBB    A,R6
   \   000017   E5..         MOV     A,?V1
   \   000019   9F           SUBB    A,R7
   \   00001A   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00001C   65D0         XRL     A,PSW
   \   00001E   33           RLC     A
   \   00001F   501B         JNC     ??at_response_buf_1
    176              _at_put_ch(s[i]);
   \   000021                ; Setup parameters for call to function _at_put_ch
   \   000021   E5..         MOV     A,?V2
   \   000023   25..         ADD     A,?V0
   \   000025   F582         MOV     DPL,A
   \   000027   E5..         MOV     A,?V3
   \   000029   35..         ADDC    A,?V1
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   ??_at_put_ch?relay   ; Banked call to: _at_put_ch
    177            }
   \   000032   05..         INC     ?V0
   \   000034   E5..         MOV     A,?V0
   \   000036   70DB         JNZ     ??at_response_buf_0
   \   000038   05..         INC     ?V1
   \   00003A   80D7         SJMP    ??at_response_buf_0
    178          }
   \                     ??at_response_buf_1:
   \   00003C   7F04         MOV     R7,#0x4
   \   00003E   02....       LJMP    ?BANKED_LEAVE_XDATA
    179          /*********************************************************************************************
    180          * 名称：at_response()
    181          * 功能：通过at接口发送字符串
    182          * 参数：s:待发送的字符串
    183          * 返回：
    184          * 修改：
    185          * 注释：
    186          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    187          void at_response(char *s)
   \                     at_response:
    188          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    189            at_response_buf(s, strlen(s));
   \   000009                ; Setup parameters for call to function at_response_buf
   \   000009                ; Setup parameters for call to function strlen
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   ??strlen?relay       ; Banked call to: strlen
   \   000010   EA           MOV     A,R2
   \   000011   FC           MOV     R4,A
   \   000012   EB           MOV     A,R3
   \   000013   FD           MOV     R5,A
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   ??at_response_buf?relay; Banked call to: at_response_buf
    190          }
   \   00001B   7F01         MOV     R7,#0x1
   \   00001D   02....       LJMP    ?BANKED_LEAVE_XDATA
    191          /*********************************************************************************************
    192          * 名称：at_notify_data()
    193          * 功能：at接口接收到数据通知
    194          * 参数：buf:接收到的数据
    195          *       len:接收到数据长度
    196          * 返回：
    197          * 修改：
    198          * 注释：
    199          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    200          void at_notify_data(char *buf, int len)
   \                     at_notify_data:
    201          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
    202            char sc[16];
    203          #ifdef CC2530_Serial
    204            sprintf(sc, "+RECV:%u,%d\r\n", len, getLastPkgRssi());
   \   000012                ; Setup parameters for call to function getLastPkgRssi
   \   000012   12....       LCALL   ??getLastPkgRssi?relay; Banked call to: getLastPkgRssi
   \   000015   E9           MOV     A,R1
   \   000016                ; Setup parameters for call to function sprintf
   \   000016   F5..         MOV     ?V2,A
   \   000018   33           RLC     A
   \   000019   95E0         SUBB    A,0xE0 /* A   */
   \   00001B   F5..         MOV     ?V3,A
   \   00001D   78..         MOV     R0,#?V2
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   78..         MOV     R0,#?V0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7C..         MOV     R4,#`?<Constant "+RECV:%u,%d\\r\\n">` & 0xff
   \   000029   7D..         MOV     R5,#(`?<Constant "+RECV:%u,%d\\r\\n">` >> 8) & 0xff
   \   00002B   7404         MOV     A,#0x4
   \   00002D   12....       LCALL   ?XSTACK_DISP101_8
   \   000030   12....       LCALL   ??sprintf?relay      ; Banked call to: sprintf
   \   000033   7404         MOV     A,#0x4
   \   000035   12....       LCALL   ?DEALLOC_XSTACK8
    205          #else
    206            sprintf(sc, "+RECV:%u\r\n", len);
    207          #endif
    208            at_response(sc);
   \   000038                ; Setup parameters for call to function at_response
   \   000038   AA..         MOV     R2,?XSP + 0
   \   00003A   AB..         MOV     R3,?XSP + 1
   \   00003C   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
    209            at_response_buf(buf, len);
   \   00003F                ; Setup parameters for call to function at_response_buf
   \   00003F   AC..         MOV     R4,?V0
   \   000041   AD..         MOV     R5,?V1
   \   000043   EE           MOV     A,R6
   \   000044   FA           MOV     R2,A
   \   000045   EF           MOV     A,R7
   \   000046   FB           MOV     R3,A
   \   000047   12....       LCALL   ??at_response_buf?relay; Banked call to: at_response_buf
    210          }
   \   00004A   7410         MOV     A,#0x10
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004F   7F04         MOV     R7,#0x4
   \   000051   02....       LJMP    ?BANKED_LEAVE_XDATA
    211          /*********************************************************************************************
    212          * 名称：at_proc()
    213          * 功能：处理at指令
    214          * 参数：
    215          * 返回：
    216          * 修改：
    217          * 注释：
    218          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    219          void at_proc(void)
   \                     at_proc:
    220          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    221            char buf[32];
    222            if (pAtCommand == NULL) 
   \   00000A   90....       MOV     DPTR,#pAtCommand
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   E8           MOV     A,R0
   \   000013   49           ORL     A,R1
   \   000014   7003         JNZ     $+5
   \   000016   02....       LJMP    ??at_proc_0 & 0xFFFF
    223              return;
    224            char *p_msg = pAtCommand;
   \   000019   90....       MOV     DPTR,#pAtCommand
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FE           MOV     R6,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FF           MOV     R7,A
    225            
    226            if (at_recvdata != 0) {
   \   000021   90....       MOV     DPTR,#at_recvdata
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F8           MOV     R0,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   E8           MOV     A,R0
   \   00002A   49           ORL     A,R1
   \   00002B   607D         JZ      ??at_proc_1
    227              /*处理发送数据*/
    228              at_response(ATOK);
   \   00002D                ; Setup parameters for call to function at_response
   \   00002D   7A..         MOV     R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   00002F   7B..         MOV     R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   000031   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
    229             
    230              zb_SendDataRequest( 0, 0/*cmd*/, at_recvdata, (uint8*)p_msg, 0xaa, AF_ACK_REQUEST, AF_DEFAULT_RADIUS );
   \   000034                ; Setup parameters for call to function zb_SendDataRequest
   \   000034   75..1E       MOV     ?V0,#0x1e
   \   000037   78..         MOV     R0,#?V0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003C   75..10       MOV     ?V0,#0x10
   \   00003F   78..         MOV     R0,#?V0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000044   75..AA       MOV     ?V0,#-0x56
   \   000047   78..         MOV     R0,#?V0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004C   8E..         MOV     ?V0,R6
   \   00004E   8F..         MOV     ?V1,R7
   \   000050   78..         MOV     R0,#?V0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   90....       MOV     DPTR,#at_recvdata
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F8           MOV     R0,A
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F9           MOV     R1,A
   \   00005D   E8           MOV     A,R0
   \   00005E   F9           MOV     R1,A
   \   00005F   7C00         MOV     R4,#0x0
   \   000061   7D00         MOV     R5,#0x0
   \   000063   7A00         MOV     R2,#0x0
   \   000065   7B00         MOV     R3,#0x0
   \   000067   12....       LCALL   ??zb_SendDataRequest?relay; Banked call to: zb_SendDataRequest
   \   00006A   7405         MOV     A,#0x5
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
    231              HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
   \   00006F                ; Setup parameters for call to function HalLedSet
   \   00006F   7A00         MOV     R2,#0x0
   \   000071   7901         MOV     R1,#0x1
   \   000073   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   \   000076   E9           MOV     A,R1
    232              HalLedSet( HAL_LED_1, HAL_LED_MODE_BLINK );
   \   000077                ; Setup parameters for call to function HalLedSet
   \   000077   7A02         MOV     R2,#0x2
   \   000079   7901         MOV     R1,#0x1
   \   00007B   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   \   00007E   E9           MOV     A,R1
    233              
    234              sprintf(buf, "+SEND:%u\r\n", at_recvdata);
   \   00007F                ; Setup parameters for call to function sprintf
   \   00007F   90....       MOV     DPTR,#at_recvdata
   \   000082   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000085   7C..         MOV     R4,#`?<Constant "+SEND:%u\\r\\n">` & 0xff
   \   000087   7D..         MOV     R5,#(`?<Constant "+SEND:%u\\r\\n">` >> 8) & 0xff
   \   000089   7402         MOV     A,#0x2
   \   00008B   12....       LCALL   ?XSTACK_DISP101_8
   \   00008E   12....       LCALL   ??sprintf?relay      ; Banked call to: sprintf
   \   000091   7402         MOV     A,#0x2
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
    235              at_response(buf);
   \   000096                ; Setup parameters for call to function at_response
   \   000096   AA..         MOV     R2,?XSP + 0
   \   000098   AB..         MOV     R3,?XSP + 1
   \   00009A   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
    236              at_recvdata = 0;
   \   00009D   90....       MOV     DPTR,#at_recvdata
   \   0000A0   7400         MOV     A,#0x0
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   7400         MOV     A,#0x0
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   02....       LJMP    ??at_proc_2 & 0xFFFF
    237            } else {
    238              int msg_size = strlen(p_msg);
   \                     ??at_proc_1:
   \   0000AA                ; Setup parameters for call to function strlen
   \   0000AA   EE           MOV     A,R6
   \   0000AB   FA           MOV     R2,A
   \   0000AC   EF           MOV     A,R7
   \   0000AD   FB           MOV     R3,A
   \   0000AE   12....       LCALL   ??strlen?relay       ; Banked call to: strlen
   \   0000B1   8A..         MOV     ?V0,R2
   \   0000B3   8B..         MOV     ?V1,R3
   \   0000B5   85....       MOV     ?V2,?V0
   \   0000B8   85....       MOV     ?V3,?V1
    239              for (int i=0; i<msg_size; i++){
   \   0000BB   7800         MOV     R0,#0x0
   \   0000BD   7900         MOV     R1,#0x0
   \                     ??at_proc_3:
   \   0000BF   C3           CLR     C
   \   0000C0   E8           MOV     A,R0
   \   0000C1   95..         SUBB    A,?V2
   \   0000C3   E9           MOV     A,R1
   \   0000C4   95..         SUBB    A,?V3
   \   0000C6   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0000C8   65D0         XRL     A,PSW
   \   0000CA   33           RLC     A
   \   0000CB   5060         JNC     ??at_proc_4
    240                if (p_msg[i] == '?' || p_msg[i] == '=') break;
   \   0000CD   EE           MOV     A,R6
   \   0000CE   28           ADD     A,R0
   \   0000CF   F582         MOV     DPL,A
   \   0000D1   EF           MOV     A,R7
   \   0000D2   39           ADDC    A,R1
   \   0000D3   F583         MOV     DPH,A
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   643F         XRL     A,#0x3f
   \   0000D8   6053         JZ      ??at_proc_4
   \   0000DA   EE           MOV     A,R6
   \   0000DB   28           ADD     A,R0
   \   0000DC   F582         MOV     DPL,A
   \   0000DE   EF           MOV     A,R7
   \   0000DF   39           ADDC    A,R1
   \   0000E0   F583         MOV     DPH,A
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   643D         XRL     A,#0x3d
   \   0000E5   6046         JZ      ??at_proc_4
    241                p_msg[i] = toupper(p_msg[i]);
   \   0000E7   EE           MOV     A,R6
   \   0000E8   28           ADD     A,R0
   \   0000E9   F582         MOV     DPL,A
   \   0000EB   EF           MOV     A,R7
   \   0000EC   39           ADDC    A,R1
   \   0000ED   F583         MOV     DPH,A
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   FA           MOV     R2,A
   \   0000F1   7B00         MOV     R3,#0x0
   \   0000F3   74..         MOV     A,#(_Small_Ctype + 1) & 0xff
   \   0000F5   2A           ADD     A,R2
   \   0000F6   F582         MOV     DPL,A
   \   0000F8   74..         MOV     A,#((_Small_Ctype + 1) >> 8) & 0xff
   \   0000FA   3B           ADDC    A,R3
   \   0000FB   F583         MOV     DPH,A
   \   0000FD   E4           CLR     A
   \   0000FE   93           MOVC    A,@A+DPTR
   \   0000FF   A2E1         MOV     C,0xE0 /* A   */.1
   \   000101   500D         JNC     ??at_proc_5
   \   000103   EE           MOV     A,R6
   \   000104   28           ADD     A,R0
   \   000105   F582         MOV     DPL,A
   \   000107   EF           MOV     A,R7
   \   000108   39           ADDC    A,R1
   \   000109   F583         MOV     DPH,A
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   545F         ANL     A,#0x5f
   \   00010E   8009         SJMP    ??at_proc_6
   \                     ??at_proc_5:
   \   000110   EE           MOV     A,R6
   \   000111   28           ADD     A,R0
   \   000112   F582         MOV     DPL,A
   \   000114   EF           MOV     A,R7
   \   000115   39           ADDC    A,R1
   \   000116   F583         MOV     DPH,A
   \   000118   E0           MOVX    A,@DPTR
   \                     ??at_proc_6:
   \   000119   C0E0         PUSH    A
   \   00011B   EE           MOV     A,R6
   \   00011C   28           ADD     A,R0
   \   00011D   F582         MOV     DPL,A
   \   00011F   EF           MOV     A,R7
   \   000120   39           ADDC    A,R1
   \   000121   F583         MOV     DPH,A
   \   000123   D0E0         POP     A
   \   000125   F0           MOVX    @DPTR,A
    242              }
   \   000126   08           INC     R0
   \   000127   E8           MOV     A,R0
   \   000128   7095         JNZ     ??at_proc_3
   \   00012A   09           INC     R1
   \   00012B   8092         SJMP    ??at_proc_3
    243              
    244              if (strcmp(p_msg, "AT") == 0) {
   \                     ??at_proc_4:
   \   00012D                ; Setup parameters for call to function strcmp
   \   00012D   7C..         MOV     R4,#`?<Constant "AT">` & 0xff
   \   00012F   7D..         MOV     R5,#(`?<Constant "AT">` >> 8) & 0xff
   \   000131   EE           MOV     A,R6
   \   000132   FA           MOV     R2,A
   \   000133   EF           MOV     A,R7
   \   000134   FB           MOV     R3,A
   \   000135   12....       LCALL   ??strcmp?relay       ; Banked call to: strcmp
   \   000138   8A..         MOV     ?V0,R2
   \   00013A   8B..         MOV     ?V1,R3
   \   00013C   E5..         MOV     A,?V0
   \   00013E   45..         ORL     A,?V1
   \   000140   700A         JNZ     ??at_proc_7
    245                at_response(ATOK);
   \   000142                ; Setup parameters for call to function at_response
   \   000142   7A..         MOV     R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   000144   7B..         MOV     R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   000146   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
   \   000149   02....       LJMP    ??at_proc_2 & 0xFFFF
    246              }
    247              else if (strcmp(p_msg, "ATE1") == 0) {
   \                     ??at_proc_7:
   \   00014C                ; Setup parameters for call to function strcmp
   \   00014C   7C..         MOV     R4,#`?<Constant "ATE1">` & 0xff
   \   00014E   7D..         MOV     R5,#(`?<Constant "ATE1">` >> 8) & 0xff
   \   000150   EE           MOV     A,R6
   \   000151   FA           MOV     R2,A
   \   000152   EF           MOV     A,R7
   \   000153   FB           MOV     R3,A
   \   000154   12....       LCALL   ??strcmp?relay       ; Banked call to: strcmp
   \   000157   8A..         MOV     ?V0,R2
   \   000159   8B..         MOV     ?V1,R3
   \   00015B   E5..         MOV     A,?V0
   \   00015D   45..         ORL     A,?V1
   \   00015F   7010         JNZ     ??at_proc_8
    248                at_echo = 1;
   \   000161   90....       MOV     DPTR,#at_echo
   \   000164   7401         MOV     A,#0x1
   \   000166   F0           MOVX    @DPTR,A
    249                at_response(ATOK);
   \   000167                ; Setup parameters for call to function at_response
   \   000167   7A..         MOV     R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   000169   7B..         MOV     R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   00016B   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
   \   00016E   02....       LJMP    ??at_proc_2 & 0xFFFF
    250              }
    251              else if (strcmp(p_msg, "ATE0") == 0) {
   \                     ??at_proc_8:
   \   000171                ; Setup parameters for call to function strcmp
   \   000171   7C..         MOV     R4,#`?<Constant "ATE0">` & 0xff
   \   000173   7D..         MOV     R5,#(`?<Constant "ATE0">` >> 8) & 0xff
   \   000175   EE           MOV     A,R6
   \   000176   FA           MOV     R2,A
   \   000177   EF           MOV     A,R7
   \   000178   FB           MOV     R3,A
   \   000179   12....       LCALL   ??strcmp?relay       ; Banked call to: strcmp
   \   00017C   8A..         MOV     ?V0,R2
   \   00017E   8B..         MOV     ?V1,R3
   \   000180   E5..         MOV     A,?V0
   \   000182   45..         ORL     A,?V1
   \   000184   7010         JNZ     ??at_proc_9
    252                at_echo = 0;
   \   000186   90....       MOV     DPTR,#at_echo
   \   000189   7400         MOV     A,#0x0
   \   00018B   F0           MOVX    @DPTR,A
    253                at_response(ATOK);
   \   00018C                ; Setup parameters for call to function at_response
   \   00018C   7A..         MOV     R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   00018E   7B..         MOV     R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   000190   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
   \   000193   02....       LJMP    ??at_proc_2 & 0xFFFF
    254              }  
    255              else if (memcmp(p_msg, "AT+HW?", 7) == 0) {
   \                     ??at_proc_9:
   \   000196                ; Setup parameters for call to function memcmp
   \   000196   75..07       MOV     ?V0,#0x7
   \   000199   75..00       MOV     ?V1,#0x0
   \   00019C   78..         MOV     R0,#?V0
   \   00019E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A1   7C..         MOV     R4,#`?<Constant "AT+HW?">` & 0xff
   \   0001A3   7D..         MOV     R5,#(`?<Constant "AT+HW?">` >> 8) & 0xff
   \   0001A5   EE           MOV     A,R6
   \   0001A6   FA           MOV     R2,A
   \   0001A7   EF           MOV     A,R7
   \   0001A8   FB           MOV     R3,A
   \   0001A9   12....       LCALL   ??memcmp?relay       ; Banked call to: memcmp
   \   0001AC   7402         MOV     A,#0x2
   \   0001AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001B1   8A..         MOV     ?V0,R2
   \   0001B3   8B..         MOV     ?V1,R3
   \   0001B5   E5..         MOV     A,?V0
   \   0001B7   45..         ORL     A,?V1
   \   0001B9   7011         JNZ     ??at_proc_10
    256                at_response("+HW:CC2530\r\n");
   \   0001BB                ; Setup parameters for call to function at_response
   \   0001BB   7A..         MOV     R2,#`?<Constant "+HW:CC2530\\r\\n">` & 0xff
   \   0001BD   7B..         MOV     R3,#(`?<Constant "+HW:CC2530\\r\\n">` >> 8) & 0xff
   \   0001BF   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
    257                at_response(ATOK);
   \   0001C2                ; Setup parameters for call to function at_response
   \   0001C2   7A..         MOV     R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   0001C4   7B..         MOV     R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   0001C6   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
   \   0001C9   02....       LJMP    ??at_proc_2 & 0xFFFF
    258              }
    259              else if (memcmp(p_msg, "AT+MAC?", 7) == 0) {
   \                     ??at_proc_10:
   \   0001CC                ; Setup parameters for call to function memcmp
   \   0001CC   75..07       MOV     ?V0,#0x7
   \   0001CF   75..00       MOV     ?V1,#0x0
   \   0001D2   78..         MOV     R0,#?V0
   \   0001D4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D7   7C..         MOV     R4,#`?<Constant "AT+MAC?">` & 0xff
   \   0001D9   7D..         MOV     R5,#(`?<Constant "AT+MAC?">` >> 8) & 0xff
   \   0001DB   EE           MOV     A,R6
   \   0001DC   FA           MOV     R2,A
   \   0001DD   EF           MOV     A,R7
   \   0001DE   FB           MOV     R3,A
   \   0001DF   12....       LCALL   ??memcmp?relay       ; Banked call to: memcmp
   \   0001E2   7402         MOV     A,#0x2
   \   0001E4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001E7   8A..         MOV     ?V0,R2
   \   0001E9   8B..         MOV     ?V1,R3
   \   0001EB   E5..         MOV     A,?V0
   \   0001ED   45..         ORL     A,?V1
   \   0001EF   6003         JZ      $+5
   \   0001F1   02....       LJMP    ??at_proc_11 & 0xFFFF
    260                uint8 *mac = (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET);
   \   0001F4   75..0C       MOV     ?V0,#0xc
   \   0001F7   75..78       MOV     ?V1,#0x78
    261                sprintf(buf, "+MAC:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
    262                        mac[7],mac[6],mac[5],mac[4],mac[3],mac[2],mac[1],mac[0]); 
   \   0001FA                ; Setup parameters for call to function sprintf
   \   0001FA   85..82       MOV     DPL,?V0
   \   0001FD   85..83       MOV     DPH,?V1
   \   000200   E0           MOVX    A,@DPTR
   \   000201   F5..         MOV     ?V4,A
   \   000203   75..00       MOV     ?V5,#0x0
   \   000206   78..         MOV     R0,#?V4
   \   000208   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00020B   85..82       MOV     DPL,?V0
   \   00020E   85..83       MOV     DPH,?V1
   \   000211   A3           INC     DPTR
   \   000212   E0           MOVX    A,@DPTR
   \   000213   F5..         MOV     ?V4,A
   \   000215   75..00       MOV     ?V5,#0x0
   \   000218   78..         MOV     R0,#?V4
   \   00021A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00021D   85..82       MOV     DPL,?V0
   \   000220   85..83       MOV     DPH,?V1
   \   000223   A3           INC     DPTR
   \   000224   A3           INC     DPTR
   \   000225   E0           MOVX    A,@DPTR
   \   000226   F5..         MOV     ?V4,A
   \   000228   75..00       MOV     ?V5,#0x0
   \   00022B   78..         MOV     R0,#?V4
   \   00022D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000230   85..82       MOV     DPL,?V0
   \   000233   85..83       MOV     DPH,?V1
   \   000236   A3           INC     DPTR
   \   000237   A3           INC     DPTR
   \   000238   A3           INC     DPTR
   \   000239   E0           MOVX    A,@DPTR
   \   00023A   F5..         MOV     ?V4,A
   \   00023C   75..00       MOV     ?V5,#0x0
   \   00023F   78..         MOV     R0,#?V4
   \   000241   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000244   85..82       MOV     DPL,?V0
   \   000247   85..83       MOV     DPH,?V1
   \   00024A   A3           INC     DPTR
   \   00024B   A3           INC     DPTR
   \   00024C   A3           INC     DPTR
   \   00024D   A3           INC     DPTR
   \   00024E   E0           MOVX    A,@DPTR
   \   00024F   F5..         MOV     ?V4,A
   \   000251   75..00       MOV     ?V5,#0x0
   \   000254   78..         MOV     R0,#?V4
   \   000256   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000259   85..82       MOV     DPL,?V0
   \   00025C   85..83       MOV     DPH,?V1
   \   00025F   A3           INC     DPTR
   \   000260   A3           INC     DPTR
   \   000261   A3           INC     DPTR
   \   000262   A3           INC     DPTR
   \   000263   A3           INC     DPTR
   \   000264   E0           MOVX    A,@DPTR
   \   000265   F5..         MOV     ?V4,A
   \   000267   75..00       MOV     ?V5,#0x0
   \   00026A   78..         MOV     R0,#?V4
   \   00026C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00026F   85..82       MOV     DPL,?V0
   \   000272   85..83       MOV     DPH,?V1
   \   000275   A3           INC     DPTR
   \   000276   A3           INC     DPTR
   \   000277   A3           INC     DPTR
   \   000278   A3           INC     DPTR
   \   000279   A3           INC     DPTR
   \   00027A   A3           INC     DPTR
   \   00027B   E0           MOVX    A,@DPTR
   \   00027C   F5..         MOV     ?V4,A
   \   00027E   75..00       MOV     ?V5,#0x0
   \   000281   78..         MOV     R0,#?V4
   \   000283   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000286   85..82       MOV     DPL,?V0
   \   000289   85..83       MOV     DPH,?V1
   \   00028C   A3           INC     DPTR
   \   00028D   A3           INC     DPTR
   \   00028E   A3           INC     DPTR
   \   00028F   A3           INC     DPTR
   \   000290   A3           INC     DPTR
   \   000291   A3           INC     DPTR
   \   000292   A3           INC     DPTR
   \   000293   E0           MOVX    A,@DPTR
   \   000294   F5..         MOV     ?V4,A
   \   000296   75..00       MOV     ?V5,#0x0
   \   000299   78..         MOV     R0,#?V4
   \   00029B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00029E   7C..         MOV     R4,#`?<Constant "+MAC:%02X:%02X:%02X:%...">` & 0xff
   \   0002A0   7D..         MOV     R5,#(`?<Constant "+MAC:%02X:%02X:%02X:%...">` >> 8) & 0xff
   \   0002A2   7410         MOV     A,#0x10
   \   0002A4   12....       LCALL   ?XSTACK_DISP101_8
   \   0002A7   12....       LCALL   ??sprintf?relay      ; Banked call to: sprintf
   \   0002AA   7410         MOV     A,#0x10
   \   0002AC   12....       LCALL   ?DEALLOC_XSTACK8
    263                at_response(buf);
   \   0002AF                ; Setup parameters for call to function at_response
   \   0002AF   AA..         MOV     R2,?XSP + 0
   \   0002B1   AB..         MOV     R3,?XSP + 1
   \   0002B3   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
    264                at_response(ATOK);
   \   0002B6                ; Setup parameters for call to function at_response
   \   0002B6   7A..         MOV     R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   0002B8   7B..         MOV     R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   0002BA   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
   \   0002BD   02....       LJMP    ??at_proc_2 & 0xFFFF
    265              } 
    266              else if (memcmp(p_msg, "AT+PANID", 8) == 0) {
   \                     ??at_proc_11:
   \   0002C0                ; Setup parameters for call to function memcmp
   \   0002C0   75..08       MOV     ?V0,#0x8
   \   0002C3   75..00       MOV     ?V1,#0x0
   \   0002C6   78..         MOV     R0,#?V0
   \   0002C8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002CB   7C..         MOV     R4,#`?<Constant "AT+PANID">` & 0xff
   \   0002CD   7D..         MOV     R5,#(`?<Constant "AT+PANID">` >> 8) & 0xff
   \   0002CF   EE           MOV     A,R6
   \   0002D0   FA           MOV     R2,A
   \   0002D1   EF           MOV     A,R7
   \   0002D2   FB           MOV     R3,A
   \   0002D3   12....       LCALL   ??memcmp?relay       ; Banked call to: memcmp
   \   0002D6   7402         MOV     A,#0x2
   \   0002D8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002DB   8A..         MOV     ?V0,R2
   \   0002DD   8B..         MOV     ?V1,R3
   \   0002DF   E5..         MOV     A,?V0
   \   0002E1   45..         ORL     A,?V1
   \   0002E3   6003         JZ      $+5
   \   0002E5   02....       LJMP    ??at_proc_12 & 0xFFFF
    267                if (p_msg[8] == '?') {
   \   0002E8   8E82         MOV     DPL,R6
   \   0002EA   8F83         MOV     DPH,R7
   \   0002EC   A3           INC     DPTR
   \   0002ED   A3           INC     DPTR
   \   0002EE   A3           INC     DPTR
   \   0002EF   A3           INC     DPTR
   \   0002F0   A3           INC     DPTR
   \   0002F1   A3           INC     DPTR
   \   0002F2   A3           INC     DPTR
   \   0002F3   A3           INC     DPTR
   \   0002F4   E0           MOVX    A,@DPTR
   \   0002F5   643F         XRL     A,#0x3f
   \   0002F7   7034         JNZ     ??at_proc_13
    268                  sprintf(buf, "+PANID:%u\r\n", GetPanId());
   \   0002F9                ; Setup parameters for call to function GetPanId
   \   0002F9   12....       LCALL   ??GetPanId?relay     ; Banked call to: GetPanId
   \   0002FC   8A..         MOV     ?V4,R2
   \   0002FE   8B..         MOV     ?V5,R3
   \   000300   85....       MOV     ?V0,?V4
   \   000303   85....       MOV     ?V1,?V5
   \   000306                ; Setup parameters for call to function sprintf
   \   000306   78..         MOV     R0,#?V0
   \   000308   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00030B   7C..         MOV     R4,#`?<Constant "+PANID:%u\\r\\n">` & 0xff
   \   00030D   7D..         MOV     R5,#(`?<Constant "+PANID:%u\\r\\n">` >> 8) & 0xff
   \   00030F   7402         MOV     A,#0x2
   \   000311   12....       LCALL   ?XSTACK_DISP101_8
   \   000314   12....       LCALL   ??sprintf?relay      ; Banked call to: sprintf
   \   000317   7402         MOV     A,#0x2
   \   000319   12....       LCALL   ?DEALLOC_XSTACK8
    269                  at_response(buf);
   \   00031C                ; Setup parameters for call to function at_response
   \   00031C   AA..         MOV     R2,?XSP + 0
   \   00031E   AB..         MOV     R3,?XSP + 1
   \   000320   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
    270                  at_response(ATOK);
   \   000323                ; Setup parameters for call to function at_response
   \   000323   7A..         MOV     R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   000325   7B..         MOV     R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   000327   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
   \   00032A   02....       LJMP    ??at_proc_2 & 0xFFFF
    271                } else if (p_msg[8] == '=') {
   \                     ??at_proc_13:
   \   00032D   8E82         MOV     DPL,R6
   \   00032F   8F83         MOV     DPH,R7
   \   000331   A3           INC     DPTR
   \   000332   A3           INC     DPTR
   \   000333   A3           INC     DPTR
   \   000334   A3           INC     DPTR
   \   000335   A3           INC     DPTR
   \   000336   A3           INC     DPTR
   \   000337   A3           INC     DPTR
   \   000338   A3           INC     DPTR
   \   000339   E0           MOVX    A,@DPTR
   \   00033A   643D         XRL     A,#0x3d
   \   00033C   7025         JNZ     ??at_proc_14
    272                  uint16 id = atoi(&p_msg[9]);
   \   00033E                ; Setup parameters for call to function atoi
   \   00033E   EE           MOV     A,R6
   \   00033F   2409         ADD     A,#0x9
   \   000341   FA           MOV     R2,A
   \   000342   E4           CLR     A
   \   000343   3F           ADDC    A,R7
   \   000344   FB           MOV     R3,A
   \   000345   12....       LCALL   ??atoi?relay         ; Banked call to: atoi
   \   000348   8A..         MOV     ?V4,R2
   \   00034A   8B..         MOV     ?V5,R3
   \   00034C   85....       MOV     ?V0,?V4
   \   00034F   85....       MOV     ?V1,?V5
    273                  SetPanId(id);
   \   000352                ; Setup parameters for call to function SetPanId
   \   000352   AA..         MOV     R2,?V0
   \   000354   AB..         MOV     R3,?V1
   \   000356   12....       LCALL   ??SetPanId?relay     ; Banked call to: SetPanId
    274                  at_response(ATOK);
   \   000359                ; Setup parameters for call to function at_response
   \   000359   7A..         MOV     R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   00035B   7B..         MOV     R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   00035D   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
   \   000360   02....       LJMP    ??at_proc_2 & 0xFFFF
    275                } else {
    276                  at_response(ATERROR);
   \                     ??at_proc_14:
   \   000363                ; Setup parameters for call to function at_response
   \   000363   7A..         MOV     R2,#`?<Constant "ERR: Bad command\\r\\n">` & 0xff
   \   000365   7B..         MOV     R3,#(`?<Constant "ERR: Bad command\\r\\n">` >> 8) & 0xff
   \   000367   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
   \   00036A   02....       LJMP    ??at_proc_2 & 0xFFFF
    277                }
    278              }
    279              else if (memcmp(p_msg, "AT+CHANNEL", 10) == 0) {
   \                     ??at_proc_12:
   \   00036D                ; Setup parameters for call to function memcmp
   \   00036D   75..0A       MOV     ?V0,#0xa
   \   000370   75..00       MOV     ?V1,#0x0
   \   000373   78..         MOV     R0,#?V0
   \   000375   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000378   7C..         MOV     R4,#`?<Constant "AT+CHANNEL">` & 0xff
   \   00037A   7D..         MOV     R5,#(`?<Constant "AT+CHANNEL">` >> 8) & 0xff
   \   00037C   EE           MOV     A,R6
   \   00037D   FA           MOV     R2,A
   \   00037E   EF           MOV     A,R7
   \   00037F   FB           MOV     R3,A
   \   000380   12....       LCALL   ??memcmp?relay       ; Banked call to: memcmp
   \   000383   7402         MOV     A,#0x2
   \   000385   12....       LCALL   ?DEALLOC_XSTACK8
   \   000388   8A..         MOV     ?V0,R2
   \   00038A   8B..         MOV     ?V1,R3
   \   00038C   E5..         MOV     A,?V0
   \   00038E   45..         ORL     A,?V1
   \   000390   6003         JZ      $+5
   \   000392   02....       LJMP    ??at_proc_15 & 0xFFFF
    280                if (p_msg[10] == '?') {
   \   000395   8E82         MOV     DPL,R6
   \   000397   8F83         MOV     DPH,R7
   \   000399   A3           INC     DPTR
   \   00039A   A3           INC     DPTR
   \   00039B   A3           INC     DPTR
   \   00039C   A3           INC     DPTR
   \   00039D   A3           INC     DPTR
   \   00039E   A3           INC     DPTR
   \   00039F   A3           INC     DPTR
   \   0003A0   A3           INC     DPTR
   \   0003A1   A3           INC     DPTR
   \   0003A2   A3           INC     DPTR
   \   0003A3   E0           MOVX    A,@DPTR
   \   0003A4   643F         XRL     A,#0x3f
   \   0003A6   7030         JNZ     ??at_proc_16
    281                  sprintf(buf, "+CHANNEL:%u\r\n", GetChannel());
   \   0003A8                ; Setup parameters for call to function GetChannel
   \   0003A8   12....       LCALL   ??GetChannel?relay   ; Banked call to: GetChannel
   \   0003AB   E9           MOV     A,R1
   \   0003AC   F5..         MOV     ?V0,A
   \   0003AE                ; Setup parameters for call to function sprintf
   \   0003AE   75..00       MOV     ?V1,#0x0
   \   0003B1   78..         MOV     R0,#?V0
   \   0003B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003B6   7C..         MOV     R4,#`?<Constant "+CHANNEL:%u\\r\\n">` & 0xff
   \   0003B8   7D..         MOV     R5,#(`?<Constant "+CHANNEL:%u\\r\\n">` >> 8) & 0xff
   \   0003BA   7402         MOV     A,#0x2
   \   0003BC   12....       LCALL   ?XSTACK_DISP101_8
   \   0003BF   12....       LCALL   ??sprintf?relay      ; Banked call to: sprintf
   \   0003C2   7402         MOV     A,#0x2
   \   0003C4   12....       LCALL   ?DEALLOC_XSTACK8
    282                  at_response(buf);
   \   0003C7                ; Setup parameters for call to function at_response
   \   0003C7   AA..         MOV     R2,?XSP + 0
   \   0003C9   AB..         MOV     R3,?XSP + 1
   \   0003CB   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
    283                  at_response(ATOK);
   \   0003CE                ; Setup parameters for call to function at_response
   \   0003CE   7A..         MOV     R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   0003D0   7B..         MOV     R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   0003D2   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
   \   0003D5   02....       LJMP    ??at_proc_2 & 0xFFFF
    284                } else if (p_msg[10] == '=') {
   \                     ??at_proc_16:
   \   0003D8   8E82         MOV     DPL,R6
   \   0003DA   8F83         MOV     DPH,R7
   \   0003DC   A3           INC     DPTR
   \   0003DD   A3           INC     DPTR
   \   0003DE   A3           INC     DPTR
   \   0003DF   A3           INC     DPTR
   \   0003E0   A3           INC     DPTR
   \   0003E1   A3           INC     DPTR
   \   0003E2   A3           INC     DPTR
   \   0003E3   A3           INC     DPTR
   \   0003E4   A3           INC     DPTR
   \   0003E5   A3           INC     DPTR
   \   0003E6   E0           MOVX    A,@DPTR
   \   0003E7   643D         XRL     A,#0x3d
   \   0003E9   7023         JNZ     ??at_proc_17
    285                  uint16 id = atoi(&p_msg[11]);
   \   0003EB                ; Setup parameters for call to function atoi
   \   0003EB   EE           MOV     A,R6
   \   0003EC   240B         ADD     A,#0xb
   \   0003EE   FA           MOV     R2,A
   \   0003EF   E4           CLR     A
   \   0003F0   3F           ADDC    A,R7
   \   0003F1   FB           MOV     R3,A
   \   0003F2   12....       LCALL   ??atoi?relay         ; Banked call to: atoi
   \   0003F5   8A..         MOV     ?V4,R2
   \   0003F7   8B..         MOV     ?V5,R3
   \   0003F9   85....       MOV     ?V0,?V4
   \   0003FC   85....       MOV     ?V1,?V5
    286                  SetChannel(id);
   \   0003FF                ; Setup parameters for call to function SetChannel
   \   0003FF   A9..         MOV     R1,?V0
   \   000401   12....       LCALL   ??SetChannel?relay   ; Banked call to: SetChannel
    287                  at_response(ATOK);
   \   000404                ; Setup parameters for call to function at_response
   \   000404   7A..         MOV     R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   000406   7B..         MOV     R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   000408   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
   \   00040B   02....       LJMP    ??at_proc_2 & 0xFFFF
    288                } else {
    289                  at_response(ATERROR);
   \                     ??at_proc_17:
   \   00040E                ; Setup parameters for call to function at_response
   \   00040E   7A..         MOV     R2,#`?<Constant "ERR: Bad command\\r\\n">` & 0xff
   \   000410   7B..         MOV     R3,#(`?<Constant "ERR: Bad command\\r\\n">` >> 8) & 0xff
   \   000412   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
   \   000415   02....       LJMP    ??at_proc_2 & 0xFFFF
    290                }
    291              }
    292              else if (memcmp(p_msg, "AT+LOGICALTYPE", 14) == 0) {
   \                     ??at_proc_15:
   \   000418                ; Setup parameters for call to function memcmp
   \   000418   75..0E       MOV     ?V0,#0xe
   \   00041B   75..00       MOV     ?V1,#0x0
   \   00041E   78..         MOV     R0,#?V0
   \   000420   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000423   7C..         MOV     R4,#`?<Constant "AT+LOGICALTYPE">` & 0xff
   \   000425   7D..         MOV     R5,#(`?<Constant "AT+LOGICALTYPE">` >> 8) & 0xff
   \   000427   EE           MOV     A,R6
   \   000428   FA           MOV     R2,A
   \   000429   EF           MOV     A,R7
   \   00042A   FB           MOV     R3,A
   \   00042B   12....       LCALL   ??memcmp?relay       ; Banked call to: memcmp
   \   00042E   7402         MOV     A,#0x2
   \   000430   12....       LCALL   ?DEALLOC_XSTACK8
   \   000433   8A..         MOV     ?V0,R2
   \   000435   8B..         MOV     ?V1,R3
   \   000437   E5..         MOV     A,?V0
   \   000439   45..         ORL     A,?V1
   \   00043B   7079         JNZ     ??at_proc_18
    293                if (p_msg[14] == '?') {
   \   00043D   EE           MOV     A,R6
   \   00043E   240E         ADD     A,#0xe
   \   000440   F582         MOV     DPL,A
   \   000442   E4           CLR     A
   \   000443   3F           ADDC    A,R7
   \   000444   F583         MOV     DPH,A
   \   000446   E0           MOVX    A,@DPTR
   \   000447   643F         XRL     A,#0x3f
   \   000449   7030         JNZ     ??at_proc_19
    294                  sprintf(buf, "+LOGICALTYPE:%u\r\n", GetLogicalType());
   \   00044B                ; Setup parameters for call to function GetLogicalType
   \   00044B   12....       LCALL   ??GetLogicalType?relay; Banked call to: GetLogicalType
   \   00044E   E9           MOV     A,R1
   \   00044F   F5..         MOV     ?V0,A
   \   000451                ; Setup parameters for call to function sprintf
   \   000451   75..00       MOV     ?V1,#0x0
   \   000454   78..         MOV     R0,#?V0
   \   000456   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000459   7C..         MOV     R4,#`?<Constant "+LOGICALTYPE:%u\\r\\n">` & 0xff
   \   00045B   7D..         MOV     R5,#(`?<Constant "+LOGICALTYPE:%u\\r\\n">` >> 8) & 0xff
   \   00045D   7402         MOV     A,#0x2
   \   00045F   12....       LCALL   ?XSTACK_DISP101_8
   \   000462   12....       LCALL   ??sprintf?relay      ; Banked call to: sprintf
   \   000465   7402         MOV     A,#0x2
   \   000467   12....       LCALL   ?DEALLOC_XSTACK8
    295                  at_response(buf);
   \   00046A                ; Setup parameters for call to function at_response
   \   00046A   AA..         MOV     R2,?XSP + 0
   \   00046C   AB..         MOV     R3,?XSP + 1
   \   00046E   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
    296                  at_response(ATOK);
   \   000471                ; Setup parameters for call to function at_response
   \   000471   7A..         MOV     R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   000473   7B..         MOV     R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   000475   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
   \   000478   02....       LJMP    ??at_proc_2 & 0xFFFF
    297                } else if (p_msg[14] == '=') {
   \                     ??at_proc_19:
   \   00047B   EE           MOV     A,R6
   \   00047C   240E         ADD     A,#0xe
   \   00047E   F582         MOV     DPL,A
   \   000480   E4           CLR     A
   \   000481   3F           ADDC    A,R7
   \   000482   F583         MOV     DPH,A
   \   000484   E0           MOVX    A,@DPTR
   \   000485   643D         XRL     A,#0x3d
   \   000487   7023         JNZ     ??at_proc_20
    298                  uint16 id = atoi(&p_msg[15]);
   \   000489                ; Setup parameters for call to function atoi
   \   000489   EE           MOV     A,R6
   \   00048A   240F         ADD     A,#0xf
   \   00048C   FA           MOV     R2,A
   \   00048D   E4           CLR     A
   \   00048E   3F           ADDC    A,R7
   \   00048F   FB           MOV     R3,A
   \   000490   12....       LCALL   ??atoi?relay         ; Banked call to: atoi
   \   000493   8A..         MOV     ?V4,R2
   \   000495   8B..         MOV     ?V5,R3
   \   000497   85....       MOV     ?V0,?V4
   \   00049A   85....       MOV     ?V1,?V5
    299                  SetLogicalType(id);
   \   00049D                ; Setup parameters for call to function SetLogicalType
   \   00049D   A9..         MOV     R1,?V0
   \   00049F   12....       LCALL   ??SetLogicalType?relay; Banked call to: SetLogicalType
    300                  at_response(ATOK);
   \   0004A2                ; Setup parameters for call to function at_response
   \   0004A2   7A..         MOV     R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   0004A4   7B..         MOV     R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   0004A6   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
   \   0004A9   02....       LJMP    ??at_proc_2 & 0xFFFF
    301                } else {
    302                  at_response(ATERROR);
   \                     ??at_proc_20:
   \   0004AC                ; Setup parameters for call to function at_response
   \   0004AC   7A..         MOV     R2,#`?<Constant "ERR: Bad command\\r\\n">` & 0xff
   \   0004AE   7B..         MOV     R3,#(`?<Constant "ERR: Bad command\\r\\n">` >> 8) & 0xff
   \   0004B0   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
   \   0004B3   02....       LJMP    ??at_proc_2 & 0xFFFF
    303                }
    304              }
    305              else if (memcmp(p_msg, "AT+LINK?", 8) == 0) {
   \                     ??at_proc_18:
   \   0004B6                ; Setup parameters for call to function memcmp
   \   0004B6   75..08       MOV     ?V0,#0x8
   \   0004B9   75..00       MOV     ?V1,#0x0
   \   0004BC   78..         MOV     R0,#?V0
   \   0004BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0004C1   7C..         MOV     R4,#`?<Constant "AT+LINK?">` & 0xff
   \   0004C3   7D..         MOV     R5,#(`?<Constant "AT+LINK?">` >> 8) & 0xff
   \   0004C5   EE           MOV     A,R6
   \   0004C6   FA           MOV     R2,A
   \   0004C7   EF           MOV     A,R7
   \   0004C8   FB           MOV     R3,A
   \   0004C9   12....       LCALL   ??memcmp?relay       ; Banked call to: memcmp
   \   0004CC   7402         MOV     A,#0x2
   \   0004CE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004D1   8A..         MOV     ?V0,R2
   \   0004D3   8B..         MOV     ?V1,R3
   \   0004D5   E5..         MOV     A,?V0
   \   0004D7   45..         ORL     A,?V1
   \   0004D9   7030         JNZ     ??at_proc_21
    306                sprintf(buf, "+LINK:%u\r\n", GetLinkStatus());
   \   0004DB                ; Setup parameters for call to function GetLinkStatus
   \   0004DB   12....       LCALL   ??GetLinkStatus?relay; Banked call to: GetLinkStatus
   \   0004DE   E9           MOV     A,R1
   \   0004DF   F5..         MOV     ?V0,A
   \   0004E1                ; Setup parameters for call to function sprintf
   \   0004E1   75..00       MOV     ?V1,#0x0
   \   0004E4   78..         MOV     R0,#?V0
   \   0004E6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0004E9   7C..         MOV     R4,#`?<Constant "+LINK:%u\\r\\n">` & 0xff
   \   0004EB   7D..         MOV     R5,#(`?<Constant "+LINK:%u\\r\\n">` >> 8) & 0xff
   \   0004ED   7402         MOV     A,#0x2
   \   0004EF   12....       LCALL   ?XSTACK_DISP101_8
   \   0004F2   12....       LCALL   ??sprintf?relay      ; Banked call to: sprintf
   \   0004F5   7402         MOV     A,#0x2
   \   0004F7   12....       LCALL   ?DEALLOC_XSTACK8
    307                at_response(buf);
   \   0004FA                ; Setup parameters for call to function at_response
   \   0004FA   AA..         MOV     R2,?XSP + 0
   \   0004FC   AB..         MOV     R3,?XSP + 1
   \   0004FE   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
    308                at_response(ATOK);
   \   000501                ; Setup parameters for call to function at_response
   \   000501   7A..         MOV     R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   000503   7B..         MOV     R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   000505   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
   \   000508   02....       LJMP    ??at_proc_2 & 0xFFFF
    309              }
    310              /*else if (memcmp(p_msg, "AT+ENVSAVE", 10) == 0) {
    311                //ucfg_save();
    312                at_response(ATOK);
    313              } */
    314              else if (memcmp(p_msg, "AT+RSSI?", 8) == 0) {
   \                     ??at_proc_21:
   \   00050B                ; Setup parameters for call to function memcmp
   \   00050B   75..08       MOV     ?V0,#0x8
   \   00050E   75..00       MOV     ?V1,#0x0
   \   000511   78..         MOV     R0,#?V0
   \   000513   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000516   7C..         MOV     R4,#`?<Constant "AT+RSSI?">` & 0xff
   \   000518   7D..         MOV     R5,#(`?<Constant "AT+RSSI?">` >> 8) & 0xff
   \   00051A   EE           MOV     A,R6
   \   00051B   FA           MOV     R2,A
   \   00051C   EF           MOV     A,R7
   \   00051D   FB           MOV     R3,A
   \   00051E   12....       LCALL   ??memcmp?relay       ; Banked call to: memcmp
   \   000521   7402         MOV     A,#0x2
   \   000523   12....       LCALL   ?DEALLOC_XSTACK8
   \   000526   8A..         MOV     ?V0,R2
   \   000528   8B..         MOV     ?V1,R3
   \   00052A   E5..         MOV     A,?V0
   \   00052C   45..         ORL     A,?V1
   \   00052E   7034         JNZ     ??at_proc_22
    315                
    316                sprintf(buf, "+RSSI:%d\r\n", getLastPkgRssi());
   \   000530                ; Setup parameters for call to function getLastPkgRssi
   \   000530   12....       LCALL   ??getLastPkgRssi?relay; Banked call to: getLastPkgRssi
   \   000533   E9           MOV     A,R1
   \   000534   F8           MOV     R0,A
   \   000535                ; Setup parameters for call to function sprintf
   \   000535   E8           MOV     A,R0
   \   000536   F5..         MOV     ?V0,A
   \   000538   33           RLC     A
   \   000539   95E0         SUBB    A,0xE0 /* A   */
   \   00053B   F5..         MOV     ?V1,A
   \   00053D   78..         MOV     R0,#?V0
   \   00053F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000542   7C..         MOV     R4,#`?<Constant "+RSSI:%d\\r\\n">` & 0xff
   \   000544   7D..         MOV     R5,#(`?<Constant "+RSSI:%d\\r\\n">` >> 8) & 0xff
   \   000546   7402         MOV     A,#0x2
   \   000548   12....       LCALL   ?XSTACK_DISP101_8
   \   00054B   12....       LCALL   ??sprintf?relay      ; Banked call to: sprintf
   \   00054E   7402         MOV     A,#0x2
   \   000550   12....       LCALL   ?DEALLOC_XSTACK8
    317                at_response(buf);
   \   000553                ; Setup parameters for call to function at_response
   \   000553   AA..         MOV     R2,?XSP + 0
   \   000555   AB..         MOV     R3,?XSP + 1
   \   000557   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
    318                at_response(ATOK);
   \   00055A                ; Setup parameters for call to function at_response
   \   00055A   7A..         MOV     R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   00055C   7B..         MOV     R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   00055E   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
   \   000561   02....       LJMP    ??at_proc_2 & 0xFFFF
    319              }
    320              else if (memcmp(p_msg, "AT+LQI?", 7) == 0) {
   \                     ??at_proc_22:
   \   000564                ; Setup parameters for call to function memcmp
   \   000564   75..07       MOV     ?V0,#0x7
   \   000567   75..00       MOV     ?V1,#0x0
   \   00056A   78..         MOV     R0,#?V0
   \   00056C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00056F   7C..         MOV     R4,#`?<Constant "AT+LQI?">` & 0xff
   \   000571   7D..         MOV     R5,#(`?<Constant "AT+LQI?">` >> 8) & 0xff
   \   000573   EE           MOV     A,R6
   \   000574   FA           MOV     R2,A
   \   000575   EF           MOV     A,R7
   \   000576   FB           MOV     R3,A
   \   000577   12....       LCALL   ??memcmp?relay       ; Banked call to: memcmp
   \   00057A   7402         MOV     A,#0x2
   \   00057C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00057F   8A..         MOV     ?V0,R2
   \   000581   8B..         MOV     ?V1,R3
   \   000583   E5..         MOV     A,?V0
   \   000585   45..         ORL     A,?V1
   \   000587   7030         JNZ     ??at_proc_23
    321                uint8 getLastPkgLQI(void);
    322                sprintf(buf, "+LQI:%d\r\n", getLastPkgLQI());
   \   000589                ; Setup parameters for call to function getLastPkgLQI
   \   000589   12....       LCALL   ??getLastPkgLQI?relay; Banked call to: getLastPkgLQI
   \   00058C   E9           MOV     A,R1
   \   00058D   F5..         MOV     ?V0,A
   \   00058F                ; Setup parameters for call to function sprintf
   \   00058F   75..00       MOV     ?V1,#0x0
   \   000592   78..         MOV     R0,#?V0
   \   000594   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000597   7C..         MOV     R4,#`?<Constant "+LQI:%d\\r\\n">` & 0xff
   \   000599   7D..         MOV     R5,#(`?<Constant "+LQI:%d\\r\\n">` >> 8) & 0xff
   \   00059B   7402         MOV     A,#0x2
   \   00059D   12....       LCALL   ?XSTACK_DISP101_8
   \   0005A0   12....       LCALL   ??sprintf?relay      ; Banked call to: sprintf
   \   0005A3   7402         MOV     A,#0x2
   \   0005A5   12....       LCALL   ?DEALLOC_XSTACK8
    323                at_response(buf);
   \   0005A8                ; Setup parameters for call to function at_response
   \   0005A8   AA..         MOV     R2,?XSP + 0
   \   0005AA   AB..         MOV     R3,?XSP + 1
   \   0005AC   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
    324                at_response(ATOK);
   \   0005AF                ; Setup parameters for call to function at_response
   \   0005AF   7A..         MOV     R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   0005B1   7B..         MOV     R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   0005B3   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
   \   0005B6   02....       LJMP    ??at_proc_2 & 0xFFFF
    325              }
    326              
    327              else if (memcmp(p_msg, "AT+RESET", 8)==0) {
   \                     ??at_proc_23:
   \   0005B9                ; Setup parameters for call to function memcmp
   \   0005B9   75..08       MOV     ?V0,#0x8
   \   0005BC   75..00       MOV     ?V1,#0x0
   \   0005BF   78..         MOV     R0,#?V0
   \   0005C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0005C4   7C..         MOV     R4,#`?<Constant "AT+RESET">` & 0xff
   \   0005C6   7D..         MOV     R5,#(`?<Constant "AT+RESET">` >> 8) & 0xff
   \   0005C8   EE           MOV     A,R6
   \   0005C9   FA           MOV     R2,A
   \   0005CA   EF           MOV     A,R7
   \   0005CB   FB           MOV     R3,A
   \   0005CC   12....       LCALL   ??memcmp?relay       ; Banked call to: memcmp
   \   0005CF   7402         MOV     A,#0x2
   \   0005D1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0005D4   8A..         MOV     ?V0,R2
   \   0005D6   8B..         MOV     ?V1,R3
   \   0005D8   E5..         MOV     A,?V0
   \   0005DA   45..         ORL     A,?V1
   \   0005DC   700D         JNZ     ??at_proc_24
    328                 at_response(ATOK);
   \   0005DE                ; Setup parameters for call to function at_response
   \   0005DE   7A..         MOV     R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   0005E0   7B..         MOV     R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   0005E2   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
    329                 zb_SystemReset();
   \   0005E5                ; Setup parameters for call to function zb_SystemReset
   \   0005E5   12....       LCALL   ??zb_SystemReset?relay; Banked call to: zb_SystemReset
   \   0005E8   02....       LJMP    ??at_proc_2 & 0xFFFF
    330              }
    331              else if (memcmp(p_msg, "AT+SEND=", 8) == 0) {
   \                     ??at_proc_24:
   \   0005EB                ; Setup parameters for call to function memcmp
   \   0005EB   75..08       MOV     ?V0,#0x8
   \   0005EE   75..00       MOV     ?V1,#0x0
   \   0005F1   78..         MOV     R0,#?V0
   \   0005F3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0005F6   7C..         MOV     R4,#`?<Constant "AT+SEND=">` & 0xff
   \   0005F8   7D..         MOV     R5,#(`?<Constant "AT+SEND=">` >> 8) & 0xff
   \   0005FA   EE           MOV     A,R6
   \   0005FB   FA           MOV     R2,A
   \   0005FC   EF           MOV     A,R7
   \   0005FD   FB           MOV     R3,A
   \   0005FE   12....       LCALL   ??memcmp?relay       ; Banked call to: memcmp
   \   000601   7402         MOV     A,#0x2
   \   000603   12....       LCALL   ?DEALLOC_XSTACK8
   \   000606   8A..         MOV     ?V0,R2
   \   000608   8B..         MOV     ?V1,R3
   \   00060A   E5..         MOV     A,?V0
   \   00060C   45..         ORL     A,?V1
   \   00060E   7052         JNZ     ??at_proc_25
    332                int len = atoi(&p_msg[8]);
   \   000610                ; Setup parameters for call to function atoi
   \   000610   EE           MOV     A,R6
   \   000611   2408         ADD     A,#0x8
   \   000613   FA           MOV     R2,A
   \   000614   E4           CLR     A
   \   000615   3F           ADDC    A,R7
   \   000616   FB           MOV     R3,A
   \   000617   12....       LCALL   ??atoi?relay         ; Banked call to: atoi
   \   00061A   8A..         MOV     ?V4,R2
   \   00061C   8B..         MOV     ?V5,R3
   \   00061E   85....       MOV     ?V0,?V4
   \   000621   85....       MOV     ?V1,?V5
    333                if (len > 0 && len<=AT_BUFF_SIZE) {
   \   000624   C3           CLR     C
   \   000625   E5..         MOV     A,?V0
   \   000627   9401         SUBB    A,#0x1
   \   000629   E5..         MOV     A,?V1
   \   00062B   9400         SUBB    A,#0x0
   \   00062D   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00062F   65D0         XRL     A,PSW
   \   000631   33           RLC     A
   \   000632   4024         JC      ??at_proc_26
   \   000634   C3           CLR     C
   \   000635   E5..         MOV     A,?V0
   \   000637   9461         SUBB    A,#0x61
   \   000639   E5..         MOV     A,?V1
   \   00063B   9400         SUBB    A,#0x0
   \   00063D   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00063F   65D0         XRL     A,PSW
   \   000641   33           RLC     A
   \   000642   5014         JNC     ??at_proc_26
    334                  at_response(">");
   \   000644                ; Setup parameters for call to function at_response
   \   000644   7A..         MOV     R2,#`?<Constant ">">` & 0xff
   \   000646   7B..         MOV     R3,#(`?<Constant ">">` >> 8) & 0xff
   \   000648   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
    335                  at_datalen = len;
   \   00064B   90....       MOV     DPTR,#at_datalen
   \   00064E   E5..         MOV     A,?V0
   \   000650   F0           MOVX    @DPTR,A
   \   000651   A3           INC     DPTR
   \   000652   E5..         MOV     A,?V1
   \   000654   F0           MOVX    @DPTR,A
   \   000655   02....       LJMP    ??at_proc_2 & 0xFFFF
    336                } else {
    337                  at_response(ATERROR);
   \                     ??at_proc_26:
   \   000658                ; Setup parameters for call to function at_response
   \   000658   7A..         MOV     R2,#`?<Constant "ERR: Bad command\\r\\n">` & 0xff
   \   00065A   7B..         MOV     R3,#(`?<Constant "ERR: Bad command\\r\\n">` >> 8) & 0xff
   \   00065C   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
   \   00065F   02....       LJMP    ??at_proc_2 & 0xFFFF
    338                }
    339              }
    340          #ifdef CC2530_USE_IAP 
    341              else if (memcmp(p_msg, "AT+IAP=", 7) == 0) {
   \                     ??at_proc_25:
   \   000662                ; Setup parameters for call to function memcmp
   \   000662   75..07       MOV     ?V0,#0x7
   \   000665   75..00       MOV     ?V1,#0x0
   \   000668   78..         MOV     R0,#?V0
   \   00066A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00066D   7C..         MOV     R4,#`?<Constant "AT+IAP=">` & 0xff
   \   00066F   7D..         MOV     R5,#(`?<Constant "AT+IAP=">` >> 8) & 0xff
   \   000671   EE           MOV     A,R6
   \   000672   FA           MOV     R2,A
   \   000673   EF           MOV     A,R7
   \   000674   FB           MOV     R3,A
   \   000675   12....       LCALL   ??memcmp?relay       ; Banked call to: memcmp
   \   000678   7402         MOV     A,#0x2
   \   00067A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00067D   8A..         MOV     ?V0,R2
   \   00067F   8B..         MOV     ?V1,R3
   \   000681   E5..         MOV     A,?V0
   \   000683   45..         ORL     A,?V1
   \   000685   6003         JZ      $+5
   \   000687   02....       LJMP    ??at_proc_27 & 0xFFFF
    342                char* p=p_msg+7;
   \   00068A   EE           MOV     A,R6
   \   00068B   2407         ADD     A,#0x7
   \   00068D   F5..         MOV     ?V0,A
   \   00068F   E4           CLR     A
   \   000690   3F           ADDC    A,R7
   \   000691   F5..         MOV     ?V1,A
    343                if(strstr(p,"IAP")){
   \   000693                ; Setup parameters for call to function strstr
   \   000693   7C..         MOV     R4,#`?<Constant "IAP">` & 0xff
   \   000695   7D..         MOV     R5,#(`?<Constant "IAP">` >> 8) & 0xff
   \   000697   AA..         MOV     R2,?V0
   \   000699   AB..         MOV     R3,?V1
   \   00069B   12....       LCALL   ??strstr?relay       ; Banked call to: strstr
   \   00069E   8A..         MOV     ?V4,R2
   \   0006A0   8B..         MOV     ?V5,R3
   \   0006A2   E5..         MOV     A,?V4
   \   0006A4   45..         ORL     A,?V5
   \   0006A6   6054         JZ      ??at_proc_28
    344                  SYS_PARAMETER_READ;
   \   0006A8                ; Setup parameters for call to function HalFlashRead
   \   0006A8   75..02       MOV     ?V4,#0x2
   \   0006AB   75..00       MOV     ?V5,#0x0
   \   0006AE   78..         MOV     R0,#?V4
   \   0006B0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0006B3   7C..         MOV     R4,#sys_parameter & 0xff
   \   0006B5   7D..         MOV     R5,#(sys_parameter >> 8) & 0xff
   \   0006B7   7A00         MOV     R2,#0x0
   \   0006B9   7B00         MOV     R3,#0x0
   \   0006BB   7909         MOV     R1,#0x9
   \   0006BD   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   0006C0   7402         MOV     A,#0x2
   \   0006C2   12....       LCALL   ?DEALLOC_XSTACK8
    345                  sys_parameter.current_part=0xff;
   \   0006C5   90....       MOV     DPTR,#sys_parameter
   \   0006C8   74FF         MOV     A,#-0x1
   \   0006CA   F0           MOVX    @DPTR,A
    346                  HalFlashErase(PARA_PARTITION_PAGE);
   \   0006CB                ; Setup parameters for call to function HalFlashErase
   \   0006CB   7909         MOV     R1,#0x9
   \   0006CD   12....       LCALL   ??HalFlashErase?relay; Banked call to: HalFlashErase
    347                  SYS_PARAMETER_WRITE;
   \   0006D0                ; Setup parameters for call to function HalFlashWrite
   \   0006D0   75..01       MOV     ?V4,#0x1
   \   0006D3   75..00       MOV     ?V5,#0x0
   \   0006D6   78..         MOV     R0,#?V4
   \   0006D8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0006DB   7C..         MOV     R4,#sys_parameter & 0xff
   \   0006DD   7D..         MOV     R5,#(sys_parameter >> 8) & 0xff
   \   0006DF   7A00         MOV     R2,#0x0
   \   0006E1   7B12         MOV     R3,#0x12
   \   0006E3   12....       LCALL   ??HalFlashWrite?relay; Banked call to: HalFlashWrite
   \   0006E6   7402         MOV     A,#0x2
   \   0006E8   12....       LCALL   ?DEALLOC_XSTACK8
    348                  at_response(ATOK);
   \   0006EB                ; Setup parameters for call to function at_response
   \   0006EB   7A..         MOV     R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   0006ED   7B..         MOV     R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   0006EF   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
    349                  HAL_SYSTEM_RESET();
   \   0006F2   C2AF         CLR     0xa8.7
   \   0006F4   75C9AB       MOV     0xc9,#-0x55
   \   0006F7   75C95B       MOV     0xc9,#0x5b
   \                     ??at_proc_29:
   \   0006FA   80FE         SJMP    ??at_proc_29
    350                }else if(strstr(p,"APP")){
   \                     ??at_proc_28:
   \   0006FC                ; Setup parameters for call to function strstr
   \   0006FC   7C..         MOV     R4,#`?<Constant "APP">` & 0xff
   \   0006FE   7D..         MOV     R5,#(`?<Constant "APP">` >> 8) & 0xff
   \   000700   AA..         MOV     R2,?V0
   \   000702   AB..         MOV     R3,?V1
   \   000704   12....       LCALL   ??strstr?relay       ; Banked call to: strstr
   \   000707   8A..         MOV     ?V4,R2
   \   000709   8B..         MOV     ?V5,R3
   \   00070B   E5..         MOV     A,?V4
   \   00070D   45..         ORL     A,?V5
   \   00070F   604C         JZ      ??at_proc_30
    351                  SYS_PARAMETER_READ;
   \   000711                ; Setup parameters for call to function HalFlashRead
   \   000711   75..02       MOV     ?V4,#0x2
   \   000714   75..00       MOV     ?V5,#0x0
   \   000717   78..         MOV     R0,#?V4
   \   000719   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00071C   7C..         MOV     R4,#sys_parameter & 0xff
   \   00071E   7D..         MOV     R5,#(sys_parameter >> 8) & 0xff
   \   000720   7A00         MOV     R2,#0x0
   \   000722   7B00         MOV     R3,#0x0
   \   000724   7909         MOV     R1,#0x9
   \   000726   12....       LCALL   ??HalFlashRead?relay ; Banked call to: HalFlashRead
   \   000729   7402         MOV     A,#0x2
   \   00072B   12....       LCALL   ?DEALLOC_XSTACK8
    352                  sys_parameter.current_part=0x01;
   \   00072E   90....       MOV     DPTR,#sys_parameter
   \   000731   7401         MOV     A,#0x1
   \   000733   F0           MOVX    @DPTR,A
    353                  HalFlashErase(PARA_PARTITION_PAGE);
   \   000734                ; Setup parameters for call to function HalFlashErase
   \   000734   7909         MOV     R1,#0x9
   \   000736   12....       LCALL   ??HalFlashErase?relay; Banked call to: HalFlashErase
    354                  SYS_PARAMETER_WRITE;
   \   000739                ; Setup parameters for call to function HalFlashWrite
   \   000739   75..01       MOV     ?V4,#0x1
   \   00073C   75..00       MOV     ?V5,#0x0
   \   00073F   78..         MOV     R0,#?V4
   \   000741   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000744   7C..         MOV     R4,#sys_parameter & 0xff
   \   000746   7D..         MOV     R5,#(sys_parameter >> 8) & 0xff
   \   000748   7A00         MOV     R2,#0x0
   \   00074A   7B12         MOV     R3,#0x12
   \   00074C   12....       LCALL   ??HalFlashWrite?relay; Banked call to: HalFlashWrite
   \   00074F   7402         MOV     A,#0x2
   \   000751   12....       LCALL   ?DEALLOC_XSTACK8
    355                  at_response(ATOK);
   \   000754                ; Setup parameters for call to function at_response
   \   000754   7A..         MOV     R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   000756   7B..         MOV     R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   000758   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
   \   00075B   8022         SJMP    ??at_proc_2
    356                }
    357                else {
    358                  at_response(ATERROR);
   \                     ??at_proc_30:
   \   00075D                ; Setup parameters for call to function at_response
   \   00075D   7A..         MOV     R2,#`?<Constant "ERR: Bad command\\r\\n">` & 0xff
   \   00075F   7B..         MOV     R3,#(`?<Constant "ERR: Bad command\\r\\n">` >> 8) & 0xff
   \   000761   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
   \   000764   8019         SJMP    ??at_proc_2
    359                }
    360              }
    361          #endif  
    362              else {
    363                if (user_at_proc(p_msg)<0) {
   \                     ??at_proc_27:
   \   000766                ; Setup parameters for call to function user_at_proc
   \   000766   EE           MOV     A,R6
   \   000767   FA           MOV     R2,A
   \   000768   EF           MOV     A,R7
   \   000769   FB           MOV     R3,A
   \   00076A   12....       LCALL   ??user_at_proc?relay ; Banked call to: user_at_proc
   \   00076D   E9           MOV     A,R1
   \   00076E   C3           CLR     C
   \   00076F   9400         SUBB    A,#0x0
   \   000771   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000773   65D0         XRL     A,PSW
   \   000775   33           RLC     A
   \   000776   5007         JNC     ??at_proc_2
    364                  at_response(ATERROR);
   \   000778                ; Setup parameters for call to function at_response
   \   000778   7A..         MOV     R2,#`?<Constant "ERR: Bad command\\r\\n">` & 0xff
   \   00077A   7B..         MOV     R3,#(`?<Constant "ERR: Bad command\\r\\n">` >> 8) & 0xff
   \   00077C   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
    365                }
    366              }
    367              
    368            }
    369            at_quebuffer_put(p_msg);
   \                     ??at_proc_2:
   \   00077F                ; Setup parameters for call to function at_quebuffer_put
   \   00077F   EE           MOV     A,R6
   \   000780   FA           MOV     R2,A
   \   000781   EF           MOV     A,R7
   \   000782   FB           MOV     R3,A
   \   000783   12....       LCALL   ??at_quebuffer_put?relay; Banked call to: at_quebuffer_put
    370            pAtCommand = NULL;
   \   000786   90....       MOV     DPTR,#pAtCommand
   \   000789   7400         MOV     A,#0x0
   \   00078B   F0           MOVX    @DPTR,A
   \   00078C   A3           INC     DPTR
   \   00078D   7400         MOV     A,#0x0
   \   00078F   F0           MOVX    @DPTR,A
    371          }
   \                     ??at_proc_0:
   \   000790   7420         MOV     A,#0x20
   \   000792   12....       LCALL   ?DEALLOC_XSTACK8
   \   000795   7F06         MOV     R7,#0x6
   \   000797   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00079A                REQUIRE _A_IEN0
   \   00079A                REQUIRE WDCTL
    372          
    373          /* 主动上报link status */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    374          void AT_reportedLinkStatus()
   \                     AT_reportedLinkStatus:
    375          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    376              char buf[16]={0};
   \   00000A   90....       MOV     DPTR,#`?<Constant {0}>`
   \   00000D   AC..         MOV     R4,?XSP + 0
   \   00000F   AD..         MOV     R5,?XSP + 1
   \   000011   7410         MOV     A,#0x10
   \   000013   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    377              sprintf(buf, "+LINK:%u\r\n", GetLinkStatus());
   \   000016                ; Setup parameters for call to function GetLinkStatus
   \   000016   12....       LCALL   ??GetLinkStatus?relay; Banked call to: GetLinkStatus
   \   000019   E9           MOV     A,R1
   \   00001A   F5..         MOV     ?V0,A
   \   00001C                ; Setup parameters for call to function sprintf
   \   00001C   75..00       MOV     ?V1,#0x0
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7C..         MOV     R4,#`?<Constant "+LINK:%u\\r\\n">` & 0xff
   \   000026   7D..         MOV     R5,#(`?<Constant "+LINK:%u\\r\\n">` >> 8) & 0xff
   \   000028   7402         MOV     A,#0x2
   \   00002A   12....       LCALL   ?XSTACK_DISP101_8
   \   00002D   12....       LCALL   ??sprintf?relay      ; Banked call to: sprintf
   \   000030   7402         MOV     A,#0x2
   \   000032   12....       LCALL   ?DEALLOC_XSTACK8
    378              at_response(buf);
   \   000035                ; Setup parameters for call to function at_response
   \   000035   AA..         MOV     R2,?XSP + 0
   \   000037   AB..         MOV     R3,?XSP + 1
   \   000039   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
    379          }
   \   00003C   7410         MOV     A,#0x10
   \   00003E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000041   7F02         MOV     R7,#0x2
   \   000043   02....       LJMP    ?BANKED_LEAVE_XDATA
    380          
    381          
    382          /*********************************************************************************************
    383          * 名称：at_init()
    384          * 功能：AT指令初始化
    385          * 参数：
    386          * 返回：
    387          * 修改：
    388          * 注释：
    389          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    390          void at_init(void)
   \                     at_init:
    391          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    392              __AT_EVT = _get_at_event();
   \   000004                ; Setup parameters for call to function _get_at_event
   \   000004   12....       LCALL   ??_get_at_event?relay; Banked call to: _get_at_event
   \   000007   E9           MOV     A,R1
   \   000008   90....       MOV     DPTR,#__AT_EVT
   \   00000B   F0           MOVX    @DPTR,A
    393          
    394              at_uart_init();
   \   00000C                ; Setup parameters for call to function at_uart_init
   \   00000C   12....       LCALL   ??at_uart_init?relay ; Banked call to: at_uart_init
    395              at_uart_set_input_call(at_recv_ch);
   \   00000F                ; Setup parameters for call to function at_uart_set_input_call
   \   00000F   7A..         MOV     R2,#??at_recv_ch?relay & 0xff
   \   000011   7B..         MOV     R3,#(??at_recv_ch?relay >> 8) & 0xff
   \   000013   12....       LCALL   ??at_uart_set_input_call?relay; Banked call to: at_uart_set_input_call
    396          
    397              at_response("+HW:CC2530\r\n");
   \   000016                ; Setup parameters for call to function at_response
   \   000016   7A..         MOV     R2,#`?<Constant "+HW:CC2530\\r\\n">` & 0xff
   \   000018   7B..         MOV     R3,#(`?<Constant "+HW:CC2530\\r\\n">` >> 8) & 0xff
   \   00001A   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
    398              at_response("+RDY\r\n");
   \   00001D                ; Setup parameters for call to function at_response
   \   00001D   7A..         MOV     R2,#`?<Constant "+RDY\\r\\n">` & 0xff
   \   00001F   7B..         MOV     R3,#(`?<Constant "+RDY\\r\\n">` >> 8) & 0xff
   \   000021   12....       LCALL   ??at_response?relay  ; Banked call to: at_response
    399          }
   \   000024   D083         POP     DPH
   \   000026   D082         POP     DPL
   \   000028   02....       LJMP    ?BRET
    400          /*********************************************************************************************
    401          * 名称：at_recv_ch()
    402          * 功能：at接收到字符处理
    403          * 参数：
    404          * 返回：
    405          * 修改：
    406          * 注释：
    407          *********************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    408          void at_recv_ch(char ch)
   \                     at_recv_ch:
    409          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    410            _at_get_ch(ch);
   \   000007                ; Setup parameters for call to function _at_get_ch
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   ??_at_get_ch?relay   ; Banked call to: _at_get_ch
    411          }
   \   00000C   7F01         MOV     R7,#0x1
   \   00000E   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??at_quebuffer_put?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    at_quebuffer_put

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??at_quebuffer_get?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    at_quebuffer_get

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_at_put_ch?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _at_put_ch

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_at_get_ch?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _at_get_ch

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??at_response_buf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    at_response_buf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??at_response?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    at_response

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??at_notify_data?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    at_notify_data

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??at_proc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    at_proc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AT_reportedLinkStatus?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AT_reportedLinkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??at_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    at_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??at_recv_ch?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    at_recv_ch

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+RECV:%u,%d\\r\\n">`:
   \   000000   2B524543     DB "+RECV:%u,%d\015\012"
   \            563A2575
   \            2C25640D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OK\\r\\n">`:
   \   000000   4F4B0D0A     DB "OK\015\012"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+SEND:%u\\r\\n">`:
   \   000000   2B53454E     DB "+SEND:%u\015\012"
   \            443A2575
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT">`:
   \   000000   415400       DB "AT"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ATE1">`:
   \   000000   41544531     DB "ATE1"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ATE0">`:
   \   000000   41544530     DB "ATE0"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+HW?">`:
   \   000000   41542B48     DB "AT+HW?"
   \            573F00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+HW:CC2530\\r\\n">`:
   \   000000   2B48573A     DB "+HW:CC2530\015\012"
   \            43433235
   \            33300D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+MAC?">`:
   \   000000   41542B4D     DB "AT+MAC?"
   \            41433F00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+MAC:%02X:%02X:%02X:%...">`:
   \   000000   2B4D4143     DB "+MAC:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\015\012"
   \            3A253032
   \            583A2530
   \            32583A25
   \            3032583A
   \            25303258
   \            3A253032
   \            583A2530
   \            32583A25
   \            3032583A
   \            25303258
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+PANID">`:
   \   000000   41542B50     DB "AT+PANID"
   \            414E4944
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+PANID:%u\\r\\n">`:
   \   000000   2B50414E     DB "+PANID:%u\015\012"
   \            49443A25
   \            750D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ERR: Bad command\\r\\n">`:
   \   000000   4552523A     DB "ERR: Bad command\015\012"
   \            20426164
   \            20636F6D
   \            6D616E64
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CHANNEL">`:
   \   000000   41542B43     DB "AT+CHANNEL"
   \            48414E4E
   \            454C00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+CHANNEL:%u\\r\\n">`:
   \   000000   2B434841     DB "+CHANNEL:%u\015\012"
   \            4E4E454C
   \            3A25750D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+LOGICALTYPE">`:
   \   000000   41542B4C     DB "AT+LOGICALTYPE"
   \            4F474943
   \            414C5459
   \            504500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+LOGICALTYPE:%u\\r\\n">`:
   \   000000   2B4C4F47     DB "+LOGICALTYPE:%u\015\012"
   \            4943414C
   \            54595045
   \            3A25750D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+LINK?">`:
   \   000000   41542B4C     DB "AT+LINK?"
   \            494E4B3F
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+LINK:%u\\r\\n">`:
   \   000000   2B4C494E     DB "+LINK:%u\015\012"
   \            4B3A2575
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+RSSI?">`:
   \   000000   41542B52     DB "AT+RSSI?"
   \            5353493F
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+RSSI:%d\\r\\n">`:
   \   000000   2B525353     DB "+RSSI:%d\015\012"
   \            493A2564
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+LQI?">`:
   \   000000   41542B4C     DB "AT+LQI?"
   \            51493F00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+LQI:%d\\r\\n">`:
   \   000000   2B4C5149     DB "+LQI:%d\015\012"
   \            3A25640D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+RESET">`:
   \   000000   41542B52     DB "AT+RESET"
   \            45534554
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+SEND=">`:
   \   000000   41542B53     DB "AT+SEND="
   \            454E443D
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ">">`:
   \   000000   3E00         DB ">"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+IAP=">`:
   \   000000   41542B49     DB "AT+IAP="
   \            41503D00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IAP">`:
   \   000000   49415000     DB "IAP"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "APP">`:
   \   000000   41505000     DB "APP"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0
   \            000000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+RDY\\r\\n">`:
   \   000000   2B524459     DB "+RDY\015\012"
   \            0D0A00  

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     28   AT_reportedLinkStatus
        0     26   -> GetLinkStatus
        0     26   -> at_response
        0     28   -> sprintf
      1     18   _at_get_ch
        0      9   -> _at_put_ch
        0      9   -> at_quebuffer_get
        0      9   -> at_quebuffer_put
        0      9   -> osal_set_event
      0     21   _at_put_ch
        0      9   -> at_uart_write
      2      0   at_init
        2      0   -> _get_at_event
        2      0   -> at_response
        2      0   -> at_uart_init
        2      0   -> at_uart_set_input_call
      0     32   at_notify_data
        0     28   -> at_response
        0     28   -> at_response_buf
        0     28   -> getLastPkgRssi
        0     32   -> sprintf
      1     62   at_proc
        0     46   -> GetChannel
        0     46   -> GetLinkStatus
        0     46   -> GetLogicalType
        0     46   -> GetPanId
        0     46   -> HalFlashErase
        0     48   -> HalFlashRead
        0     48   -> HalFlashWrite
        0     46   -> HalLedSet
        0     46   -> SetChannel
        0     46   -> SetLogicalType
        0     46   -> SetPanId
        0     46   -> at_quebuffer_put
        0     46   -> at_response
        0     46   -> atoi
        0     46   -> getLastPkgLQI
        0     46   -> getLastPkgRssi
        0     48   -> memcmp
        0     48   -> sprintf
        0     62   -> sprintf
        0     46   -> strcmp
        0     46   -> strlen
        0     46   -> strstr
        0     46   -> user_at_proc
        0     51   -> zb_SendDataRequest
        0     46   -> zb_SystemReset
      0     19   at_quebuffer_get
      0     56   at_quebuffer_put
      0      9   at_recv_ch
        0      9   -> _at_get_ch
      0     55   at_response
        0      9   -> at_response_buf
        0      9   -> strlen
      0     40   at_response_buf
        0     12   -> _at_put_ch


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  ?<Constant "+CHANNEL:%u\r\n">
      13  ?<Constant "+HW:CC2530\r\n">
      11  ?<Constant "+LINK:%u\r\n">
      18  ?<Constant "+LOGICALTYPE:%u\r\n">
      10  ?<Constant "+LQI:%d\r\n">
      47  ?<Constant "+MAC:%02X:%02X:%02X:%...">
      12  ?<Constant "+PANID:%u\r\n">
       7  ?<Constant "+RDY\r\n">
      14  ?<Constant "+RECV:%u,%d\r\n">
      11  ?<Constant "+RSSI:%d\r\n">
      11  ?<Constant "+SEND:%u\r\n">
       2  ?<Constant ">">
       4  ?<Constant "APP">
       3  ?<Constant "AT">
      11  ?<Constant "AT+CHANNEL">
       7  ?<Constant "AT+HW?">
       8  ?<Constant "AT+IAP=">
       9  ?<Constant "AT+LINK?">
      15  ?<Constant "AT+LOGICALTYPE">
       8  ?<Constant "AT+LQI?">
       8  ?<Constant "AT+MAC?">
       9  ?<Constant "AT+PANID">
       9  ?<Constant "AT+RESET">
       9  ?<Constant "AT+RSSI?">
       9  ?<Constant "AT+SEND=">
       5  ?<Constant "ATE0">
       5  ?<Constant "ATE1">
      19  ?<Constant "ERR: Bad command\r\n">
       4  ?<Constant "IAP">
       5  ?<Constant "OK\r\n">
      16  ?<Constant {0}>
       6  ??AT_reportedLinkStatus?relay
       6  ??_at_get_ch?relay
       6  ??_at_put_ch?relay
       6  ??at_init?relay
       6  ??at_notify_data?relay
       6  ??at_proc?relay
       6  ??at_quebuffer_get?relay
       6  ??at_quebuffer_put?relay
       6  ??at_recv_ch?relay
       6  ??at_response?relay
       6  ??at_response_buf?relay
      70  AT_reportedLinkStatus
       1  WDCTL
       1  _A_IEN0
       1  __AT_EVT
     490  _at_get_ch
      17  _at_put_ch
       2  at_datalen
       1  at_echo
      43  at_init
      84  at_notify_data
    1946  at_proc
     110  at_quebuffer_get
     100  at_quebuffer_put
      17  at_recv_ch
       2  at_recvdata
      32  at_response
      65  at_response_buf
     192  atbuff
       1  bufferbit
       1  idx
       2  pAtCommand
       2  pbuf
       2  sys_parameter

 
 2 974 bytes in segment BANKED_CODE
    66 bytes in segment BANK_RELAYS
     2 bytes in segment SFR_AN
   333 bytes in segment XDATA_ROM_C
   206 bytes in segment XDATA_Z
 
 3 040 bytes of CODE  memory
   333 bytes of CONST memory
     0 bytes of DATA  memory (+ 2 bytes shared)
   206 bytes of XDATA memory

Errors: none
Warnings: 1
