###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:41
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\stack\nwk\nwk_globals.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\stack\nwk\nwk_globals.c"
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        XLAB -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\nwk_globals.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\nwk_globals.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\stack\nwk\nwk_globals.c
      1          /**************************************************************************************************
      2            Filename:       nwk_globals.c
      3            Revised:        $Date: 2010-09-09 09:46:48 -0700 (Thu, 09 Sep 2010) $
      4            Revision:       $Revision: 23706 $
      5          
      6            Description:    User definable Network Parameters.
      7          
      8          
      9            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "AddrMgr.h"
     46          #include "AssocList.h"
     47          #include "BindingTable.h"
     48          #include "nwk_util.h"
     49          #include "nwk_globals.h"
     50          #include "APS.h"
     51          #include "ssp.h"
     52          #include "rtg.h"
     53          #include "ZDConfig.h"
     54          #include "ZGlobals.h"
     55          
     56          #if defined ( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          /* HAL */
     61          #include "hal_lcd.h"
     62          
     63          /*********************************************************************
     64           * MACROS
     65           */
     66          
     67          /*********************************************************************
     68           * CONSTANTS
     69           */
     70          
     71          // Maximums for the data buffer queue
     72          #define NWK_MAX_DATABUFS_WAITING    8     // Waiting to be sent to MAC
     73          #define NWK_MAX_DATABUFS_SCHEDULED  5     // Timed messages to be sent
     74          #define NWK_MAX_DATABUFS_CONFIRMED  5     // Held after MAC confirms
     75          #define NWK_MAX_DATABUFS_TOTAL      12    // Total number of buffers
     76          
     77          // 1-255 (0 -> 256) X RTG_TIMER_INTERVAL
     78          // A known shortcoming is that when a message is enqueued as "hold" for a
     79          // sleeping device, the timer tick may have counted down to 1, so that msg
     80          // will not be held as long as expected. If NWK_INDIRECT_MSG_TIMEOUT is set to 1
     81          // the hold time will vary randomly from 0 - CNT_RTG_TIMER ticks.
     82          // So the hold time will vary within this interval:
     83          // { (NWK_INDIRECT_MSG_TIMEOUT-1)*CNT_RTG_TIMER,
     84          //                                    NWK_INDIRECT_MSG_TIMEOUT*CNT_RTG_TIMER }
     85          #define NWK_INDIRECT_CNT_RTG_TMR    1
     86          // To hold msg for sleeping end devices for 30 secs:
     87          // #define CNT_RTG_TIMER            1
     88          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     89          // To hold msg for sleeping end devices for 30 mins:
     90          // #define CNT_RTG_TIMER            60
     91          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     92          // To hold msg for sleeping end devices for 30 days:
     93          // #define CNT_RTG_TIMER            60
     94          // #define NWK_INDIRECT_MSG_TIMEOUT (30 * 24 * 60)
     95          // Maximum msgs to hold per associated device.
     96          #define NWK_INDIRECT_MSG_MAX_PER    3
     97          // Maximum total msgs to hold for all associated devices.
     98          #define NWK_INDIRECT_MSG_MAX_ALL    \
     99                                      (NWK_MAX_DATABUFS_TOTAL - NWK_INDIRECT_MSG_MAX_PER)
    100          
    101          /*********************************************************************
    102           * TYPEDEFS
    103           */
    104          
    105          /*********************************************************************
    106           * NWK GLOBAL VARIABLES
    107           */
    108          
    109          // Variables for MAX list size

   \                                 In  segment CODE_C, align 1
    110          CONST uint16 gNWK_MAX_DEVICE_LIST = NWK_MAX_DEVICES;
   \                     gNWK_MAX_DEVICE_LIST:
   \   000000   1500         DW 21
    111          
    112          // Variables for MAX Sleeping End Devices

   \                                 In  segment CODE_C, align 1
    113          CONST uint8 gNWK_MAX_SLEEPING_END_DEVICES = NWK_MAX_DEVICES - NWK_MAX_ROUTERS;
   \                     gNWK_MAX_SLEEPING_END_DEVICES:
   \   000000   0F           DB 15
    114          
    115          // Variables for MAX data buffer levels

   \                                 In  segment CODE_C, align 1
    116          CONST uint8 gNWK_MAX_DATABUFS_WAITING = NWK_MAX_DATABUFS_WAITING;
   \                     gNWK_MAX_DATABUFS_WAITING:
   \   000000   08           DB 8

   \                                 In  segment CODE_C, align 1
    117          CONST uint8 gNWK_MAX_DATABUFS_SCHEDULED = NWK_MAX_DATABUFS_SCHEDULED;
   \                     gNWK_MAX_DATABUFS_SCHEDULED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    118          CONST uint8 gNWK_MAX_DATABUFS_CONFIRMED = NWK_MAX_DATABUFS_CONFIRMED;
   \                     gNWK_MAX_DATABUFS_CONFIRMED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    119          CONST uint8 gNWK_MAX_DATABUFS_TOTAL = NWK_MAX_DATABUFS_TOTAL;
   \                     gNWK_MAX_DATABUFS_TOTAL:
   \   000000   0C           DB 12
    120          

   \                                 In  segment CODE_C, align 1
    121          CONST uint8 gNWK_INDIRECT_CNT_RTG_TMR = NWK_INDIRECT_CNT_RTG_TMR;
   \                     gNWK_INDIRECT_CNT_RTG_TMR:
   \   000000   01           DB 1

   \                                 In  segment CODE_C, align 1
    122          CONST uint8 gNWK_INDIRECT_MSG_MAX_PER = NWK_INDIRECT_MSG_MAX_PER;
   \                     gNWK_INDIRECT_MSG_MAX_PER:
   \   000000   03           DB 3

   \                                 In  segment CODE_C, align 1
    123          CONST uint8 gNWK_INDIRECT_MSG_MAX_ALL = NWK_INDIRECT_MSG_MAX_ALL;
   \                     gNWK_INDIRECT_MSG_MAX_ALL:
   \   000000   09           DB 9
    124          
    125          // change this if using a different stack profile...
    126          // Cskip array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          uint16 *Cskip;
   \                     Cskip:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    128          
    129          #if ( STACK_PROFILE_ID == ZIGBEEPRO_PROFILE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    130            uint8 CskipRtrs[1] = {0};
   \                     CskipRtrs:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131            uint8 CskipChldrn[1] = {0};
   \                     CskipChldrn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    132          #elif ( STACK_PROFILE_ID == HOME_CONTROLS )
    133          #if defined (STARTEST)
    134            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,0,0,0,0,0};
    135            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {10,0,0,0,0,0};
    136          #elif defined (TREETEST)
    137            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {1,1,1,1,1,0};
    138            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {2,2,2,2,2,0};
    139          #else  
    140            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {6,6,6,6,6,0};
    141            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {20,20,20,20,20,0};
    142          #endif  
    143          #elif ( STACK_PROFILE_ID == GENERIC_STAR )
    144            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    145            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    146          #elif ( STACK_PROFILE_ID == NETWORK_SPECIFIC )
    147            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    148            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    149          #endif // STACK_PROFILE_ID
    150          
    151          // Minimum lqi value that is required for association

   \                                 In  segment XDATA_I, align 1, keep-with-next
    152          uint8 gMIN_TREE_LINK_COST = MIN_LQI_COST_3;
   \                     gMIN_TREE_LINK_COST:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gMIN_TREE_LINK_COST>`
   \   000001                REQUIRE __INIT_XDATA_I
    153          
    154          // Statically defined Associated Device List

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          associated_devices_t AssociatedDevList[NWK_MAX_DEVICES];
   \                     AssociatedDevList:
   \   000000                DS 378
   \   00017A                REQUIRE __INIT_XDATA_Z
    156          

   \                                 In  segment CODE_C, align 1
    157          CONST uint16 gMAX_RTG_ENTRIES = MAX_RTG_ENTRIES;
   \                     gMAX_RTG_ENTRIES:
   \   000000   2800         DW 40

   \                                 In  segment CODE_C, align 1
    158          CONST uint16 gMAX_RTG_SRC_ENTRIES = MAX_RTG_SRC_ENTRIES;
   \                     gMAX_RTG_SRC_ENTRIES:
   \   000000   0C00         DW 12

   \                                 In  segment CODE_C, align 1
    159          CONST uint8 gMAX_RREQ_ENTRIES = MAX_RREQ_ENTRIES;
   \                     gMAX_RREQ_ENTRIES:
   \   000000   08           DB 8
    160          

   \                                 In  segment CODE_C, align 1
    161          CONST uint8 gMAX_NEIGHBOR_ENTRIES = MAX_NEIGHBOR_ENTRIES;
   \                     gMAX_NEIGHBOR_ENTRIES:
   \   000000   10           DB 16
    162          
    163           // Table of neighboring nodes (not including child nodes)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    164          neighborEntry_t neighborTable[MAX_NEIGHBOR_ENTRIES];
   \                     neighborTable:
   \   000000                DS 368
   \   000170                REQUIRE __INIT_XDATA_Z
    165          

   \                                 In  segment CODE_C, align 1
    166          CONST uint8 gMAX_SOURCE_ROUTE = MAX_SOURCE_ROUTE;
   \                     gMAX_SOURCE_ROUTE:
   \   000000   0C           DB 12
    167          

   \                                 In  segment CODE_C, align 1
    168          CONST uint8 gMAX_BROADCAST_QUEUED = MAX_BROADCAST_QUEUED;
   \                     gMAX_BROADCAST_QUEUED:
   \   000000   0A           DB 10
    169          

   \                                 In  segment CODE_C, align 1
    170          CONST uint8 gLINK_DOWN_TRIGGER = LINK_DOWN_TRIGGER;
   \                     gLINK_DOWN_TRIGGER:
   \   000000   03           DB 3
    171          

   \                                 In  segment CODE_C, align 1
    172          CONST uint8 gMAX_PASSIVE_ACK_CNT = MAX_PASSIVE_ACK_CNT;
   \                     gMAX_PASSIVE_ACK_CNT:
   \   000000   08           DB 8
    173          
    174          // Routing table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          rtgEntry_t rtgTable[MAX_RTG_ENTRIES];
   \                     rtgTable:
   \   000000                DS 280
   \   000118                REQUIRE __INIT_XDATA_Z
    176          
    177          #if defined ( ZIGBEE_SOURCE_ROUTING )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178            rtgSrcEntry_t rtgSrcTable[MAX_RTG_SRC_ENTRIES];
   \                     rtgSrcTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179            uint16 rtgSrcRelayList[MAX_SOURCE_ROUTE];
   \                     rtgSrcRelayList:
   \   000000                DS 24
   \   000018                REQUIRE __INIT_XDATA_Z
    180          #endif
    181          
    182          // Table of current RREQ packets in the network

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    183          rtDiscEntry_t rtDiscTable[MAX_RREQ_ENTRIES];
   \                     rtDiscTable:
   \   000000                DS 64
   \   000040                REQUIRE __INIT_XDATA_Z
    184          
    185          // Table of data broadcast packets currently in circulation.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    186          bcastEntry_t bcastTable[MAX_BCAST];
   \                     bcastTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z
    187          
    188          // These 2 arrays are to be used as an array of struct { uint8, uint32 }.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          uint8 bcastHoldHandle[MAX_BCAST];
   \                     bcastHoldHandle:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          uint32 bcastHoldAckMask[MAX_BCAST];
   \                     bcastHoldAckMask:
   \   000000                DS 36
   \   000024                REQUIRE __INIT_XDATA_Z
    191          

   \                                 In  segment CODE_C, align 1
    192          CONST uint8 gMAX_BCAST = MAX_BCAST;
   \                     gMAX_BCAST:
   \   000000   09           DB 9
    193          
    194          // For tree addressing, this switch allows the allocation of a
    195          // router address to an end device when end device address are
    196          // all used up.  If this option is enabled, address space
    197          // could be limited.

   \                                 In  segment CODE_C, align 1
    198          CONST uint8 gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE = FALSE;
   \                     gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE:
   \   000000   00           DB 0
    199          
    200          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    201          // number of link status periods after the last received address conflict report
    202          // (network status command)

   \                                 In  segment CODE_C, align 1
    203          CONST uint8 gNWK_CONFLICTED_ADDR_EXPIRY_TIME = NWK_CONFLICTED_ADDR_EXPIRY_TIME;
   \                     gNWK_CONFLICTED_ADDR_EXPIRY_TIME:
   \   000000   04           DB 4
    204          #endif
    205          
    206          #if defined ( ZIGBEE_FREQ_AGILITY )

   \                                 In  segment CODE_C, align 1
    207          CONST uint8 gNWK_FREQ_AGILITY_ALL_MAC_ERRS = NWK_FREQ_AGILITY_ALL_MAC_ERRS;
   \                     gNWK_FREQ_AGILITY_ALL_MAC_ERRS:
   \   000000   00           DB 0
    208          #endif
    209          
    210          // The time limited to one MTO RReq (Concentrator Announce) in milliseconds.

   \                                 In  segment CODE_C, align 1
    211          CONST uint16 gMTO_RREQ_LIMIT_TIME = MTO_RREQ_LIMIT_TIME;
   \                     gMTO_RREQ_LIMIT_TIME:
   \   000000   E803         DW 1000
    212          
    213          // The number of seconds a MTO routing entry will last.

   \                                 In  segment CODE_C, align 1
    214          CONST uint8 gMTO_ROUTE_EXPIRY_TIME = MTO_ROUTE_EXPIRY_TIME;
   \                     gMTO_ROUTE_EXPIRY_TIME:
   \   000000   FF           DB 255
    215          
    216          // Route Discovery Request Default Radius

   \                                 In  segment CODE_C, align 1
    217          CONST uint8 gDEFAULT_ROUTE_REQUEST_RADIUS = DEFAULT_ROUTE_REQUEST_RADIUS;
   \                     gDEFAULT_ROUTE_REQUEST_RADIUS:
   \   000000   1E           DB 30
    218          
    219          // Network message radius

   \                                 In  segment CODE_C, align 1
    220          CONST uint8 gDEF_NWK_RADIUS = DEF_NWK_RADIUS;
   \                     gDEF_NWK_RADIUS:
   \   000000   1E           DB 30
    221          
    222          #if ( ZSTACK_ROUTER_BUILD )

   \                                 In  segment CODE_C, align 1
    223          CONST uint16 gLINK_STATUS_JITTER_MASK = LINK_STATUS_JITTER_MASK;
   \                     gLINK_STATUS_JITTER_MASK:
   \   000000   7F00         DW 127
    224          #endif
    225          
    226          /*********************************************************************
    227           * APS GLOBAL VARIABLES
    228           */
    229          
    230          // The Maximum number of binding records
    231          // This number is defined in BindingTable.h - change it there.

   \                                 In  segment CODE_C, align 1
    232          CONST uint16 gNWK_MAX_BINDING_ENTRIES = NWK_MAX_BINDING_ENTRIES;
   \                     gNWK_MAX_BINDING_ENTRIES:
   \   000000   0400         DW 4
    233          
    234          #if defined ( REFLECTOR )
    235            // The Maximum number of cluster IDs in a binding record
    236            // This number is defined in BindingTable.h - change it there.

   \                                 In  segment CODE_C, align 1
    237            CONST uint8 gMAX_BINDING_CLUSTER_IDS = MAX_BINDING_CLUSTER_IDS;
   \                     gMAX_BINDING_CLUSTER_IDS:
   \   000000   04           DB 4
    238          

   \                                 In  segment CODE_C, align 1
    239            CONST uint16 gBIND_REC_SIZE = sizeof( BindingEntry_t );
   \                     gBIND_REC_SIZE:
   \   000000   0E00         DW 14
    240          
    241            // Binding Table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    242            BindingEntry_t BindingTable[NWK_MAX_BINDING_ENTRIES];
   \                     BindingTable:
   \   000000                DS 56
   \   000038                REQUIRE __INIT_XDATA_Z
    243          #endif
    244          
    245          // Maximum number allowed in the groups table.

   \                                 In  segment CODE_C, align 1
    246          CONST uint8 gAPS_MAX_GROUPS = APS_MAX_GROUPS;
   \                     gAPS_MAX_GROUPS:
   \   000000   10           DB 16
    247          
    248          // APS End Device Broadcast Table
    249          #if ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    250            apsEndDeviceBroadcast_t apsEndDeviceBroadcastTable[APS_MAX_ENDDEVICE_BROADCAST_ENTRIES];
   \                     apsEndDeviceBroadcastTable:
   \   000000                DS 90
   \   00005A                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    251            uint8 gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES = APS_MAX_ENDDEVICE_BROADCAST_ENTRIES;
   \                     gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST`
   \   000001                REQUIRE __INIT_XDATA_I
    252          #endif
    253          
    254          /*********************************************************************
    255           * SECURITY GLOBAL VARIABLES
    256           */
    257          
    258          // This is the default pre-configured key,
    259          // change this to make a unique key
    260          // SEC_KEY_LEN is defined in ssp.h.
    261          
    262          #if defined ( DEFAULT_KEY )

   \                                 In  segment CODE_C, align 1
    263          CONST uint8 defaultKey[SEC_KEY_LEN] = DEFAULT_KEY;
   \                     defaultKey:
   \   000000   01           DB 1
   \   000001   03           DB 3
   \   000002   05           DB 5
   \   000003   07           DB 7
   \   000004   09           DB 9
   \   000005   0B           DB 11
   \   000006   0D           DB 13
   \   000007   0F           DB 15
   \   000008   00           DB 0
   \   000009   02           DB 2
   \   00000A   04           DB 4
   \   00000B   06           DB 6
   \   00000C   08           DB 8
   \   00000D   0A           DB 10
   \   00000E   0C           DB 12
   \   00000F   0D           DB 13
    264          #else
    265          CONST uint8 defaultKey[SEC_KEY_LEN] =
    266          {
    267          #if defined ( APP_TP ) || defined ( APP_TP2 )
    268            // Key for ZigBee Conformance Testing
    269            0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb,
    270            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
    271          #else
    272            // Key for In-House Testing
    273            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    274            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
    275          #endif
    276          };
    277          #endif
    278          
    279          // This is the default pre-configured Trust Center Link key,
    280          // change this to make a unique key, SEC_KEY_LEN is defined in ssp.h.

   \                                 In  segment CODE_C, align 1
    281          CONST uint8 defaultTCLinkKey[SEC_KEY_LEN] =
   \                     defaultTCLinkKey:
   \   000000   56           DB 86
   \   000001   77           DB 119
   \   000002   77           DB 119
   \   000003   77           DB 119
   \   000004   77           DB 119
   \   000005   77           DB 119
   \   000006   77           DB 119
   \   000007   77           DB 119
   \   000008   77           DB 119
   \   000009   77           DB 119
   \   00000A   77           DB 119
   \   00000B   77           DB 119
   \   00000C   77           DB 119
   \   00000D   77           DB 119
   \   00000E   77           DB 119
   \   00000F   77           DB 119
    282          {
    283            0x56, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
    284            0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77
    285          };
    286          
    287          /*********************************************************************
    288           * GLOBAL VARIABLES - Statistics
    289           */
    290          
    291          #if defined ( PACKET_FILTER_STATS )
    292            uint32 apsInvalidPackets = 0;
    293            uint32 apsSecurityFailures = 0;
    294            uint32 nwkInvalidPackets = 0;
    295            uint32 nwkSecurityFailures = 0;
    296          #endif
    297          
    298          /*********************************************************************
    299           * STATUS STRINGS
    300           */
    301          #if defined ( LCD_SUPPORTED )
    302            const char PingStr[]         = "Ping Rcvd from";
    303            const char AssocCnfStr[]     = "Assoc Cnf";
    304            const char SuccessStr[]      = "Success";
    305            const char EndDeviceStr[]    = "EndDevice:";
    306            const char ParentStr[]       = "Parent:";
    307            const char ZigbeeCoordStr[]  = "ZigBee Coord";
    308            const char NetworkIDStr[]    = "Network ID:";
    309            const char RouterStr[]       = "Router:";
    310            const char OrphanRspStr[]    = "Orphan Response";
    311            const char SentStr[]         = "Sent";
    312            const char FailedStr[]       = "Failed";
    313            const char AssocRspFailStr[] = "Assoc Rsp fail";
    314            const char AssocIndStr[]     = "Assoc Ind";
    315            const char AssocCnfFailStr[] = "Assoc Cnf fail";
    316            const char EnergyLevelStr[]  = "Energy Level";
    317            const char ScanFailedStr[]   = "Scan Failed";
    318          #endif
    319          
    320          /*********************************************************************
    321           * @fn       nwk_globals_init()
    322           *
    323           * @brief
    324           *
    325           *   Initialize nwk layer globals.  These are the system defaults and
    326           *   should be changed by the user here.  The default definitions are
    327           *   defined in nwk.h or NLMEDE.h.
    328           *
    329           * @param   none
    330           *
    331           * @return  none
    332           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    333          void nwk_globals_init( void )
   \                     nwk_globals_init:
    334          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    335            AddrMgrInit( NWK_MAX_ADDRESSES );
   \   000004                ; Setup parameters for call to function AddrMgrInit
   \   000004   7A1A         MOV     R2,#0x1a
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   ??AddrMgrInit?relay  ; Banked call to: AddrMgrInit
    336          
    337          #if !defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    338            if ( ZSTACK_ROUTER_BUILD )
    339            {
    340              // Initialize the Cskip Table
    341              Cskip = osal_mem_alloc(sizeof(uint16) *(MAX_NODE_DEPTH+1));
    342              RTG_FillCSkipTable(CskipChldrn, CskipRtrs, MAX_NODE_DEPTH, Cskip);
    343            }
    344          #endif
    345          
    346            // To compile out the Link Status Feature, set NWK_LINK_STATUS_PERIOD
    347            // to 0 (compiler flag).
    348            if ( ZSTACK_ROUTER_BUILD && NWK_LINK_STATUS_PERIOD )
   \   00000B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   6008         JZ      ??nwk_globals_init_0
   \   000011   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6401         XRL     A,#0x1
   \   000017   7003         JNZ     ??nwk_globals_init_1
    349            {
    350              NLME_InitLinkStatus();
   \                     ??nwk_globals_init_0:
   \   000019                ; Setup parameters for call to function NLME_InitLinkStatus
   \   000019   12....       LCALL   ??NLME_InitLinkStatus?relay; Banked call to: NLME_InitLinkStatus
    351            }
    352          
    353          #if defined ( ZIGBEE_FREQ_AGILITY )
    354            NwkFreqAgilityInit();
   \                     ??nwk_globals_init_1:
   \   00001C                ; Setup parameters for call to function NwkFreqAgilityInit
   \   00001C   12....       LCALL   ??NwkFreqAgilityInit?relay; Banked call to: NwkFreqAgilityInit
    355          #endif
    356          }
   \   00001F   D083         POP     DPH
   \   000021   D082         POP     DPL
   \   000023   02....       LJMP    ?BRET
    357          
    358          /*********************************************************************
    359           * @fn       NIB_init()
    360           *
    361           * @brief
    362           *
    363           *   Initialize attribute values in NIB
    364           *
    365           * @param   none
    366           *
    367           * @return  none
    368           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    369          void NIB_init()
   \                     NIB_init:
    370          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    371            _NIB.SequenceNum = LO_UINT16(osal_rand());
   \   000004                ; Setup parameters for call to function osal_rand
   \   000004   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   000007   EA           MOV     A,R2
   \   000008   90....       MOV     DPTR,#_NIB
   \   00000B   F0           MOVX    @DPTR,A
    372          
    373            _NIB.nwkProtocolVersion = ZB_PROT_VERS;
   \   00000C   90....       MOV     DPTR,#_NIB + 17
   \   00000F   7402         MOV     A,#0x2
   \   000011   F0           MOVX    @DPTR,A
    374            _NIB.MaxDepth = MAX_NODE_DEPTH;
   \   000012   90....       MOV     DPTR,#_NIB + 4
   \   000015   7414         MOV     A,#0x14
   \   000017   F0           MOVX    @DPTR,A
    375          
    376          #if ( NWK_MODE == NWK_MODE_MESH )
    377            _NIB.beaconOrder = BEACON_ORDER_NO_BEACONS;
   \   000018   90....       MOV     DPTR,#_NIB + 40
   \   00001B   740F         MOV     A,#0xf
   \   00001D   F0           MOVX    @DPTR,A
    378            _NIB.superFrameOrder = BEACON_ORDER_NO_BEACONS;
   \   00001E   90....       MOV     DPTR,#_NIB + 41
   \   000021   740F         MOV     A,#0xf
   \   000023   F0           MOVX    @DPTR,A
    379          #endif
    380          
    381            // BROADCAST SETTINGS:
    382            // *******************
    383            //   Broadcast Delivery Time
    384            //     - set to multiples of 100ms
    385            //     - should be 500ms more than the retry time
    386            //       -  "retry time" = PassiveAckTimeout * (MaxBroadcastRetries + 1)
    387            //   Passive Ack Timeout
    388            //     - set to multiples of 100ms
    389            _NIB.BroadcastDeliveryTime = zgBcastDeliveryTime;
   \   000024   90....       MOV     DPTR,#zgBcastDeliveryTime
   \   000027   E0           MOVX    A,@DPTR
   \   000028   90....       MOV     DPTR,#_NIB + 7
   \   00002B   F0           MOVX    @DPTR,A
    390            _NIB.PassiveAckTimeout     = zgPassiveAckTimeout;
   \   00002C   90....       MOV     DPTR,#zgPassiveAckTimeout
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   90....       MOV     DPTR,#_NIB + 1
   \   000033   F0           MOVX    @DPTR,A
    391            _NIB.MaxBroadcastRetries   = zgMaxBcastRetires;
   \   000034   90....       MOV     DPTR,#zgMaxBcastRetires
   \   000037   E0           MOVX    A,@DPTR
   \   000038   90....       MOV     DPTR,#_NIB + 2
   \   00003B   F0           MOVX    @DPTR,A
    392          
    393            _NIB.ReportConstantCost = 0;
   \   00003C   90....       MOV     DPTR,#_NIB + 8
   \   00003F   7400         MOV     A,#0x0
   \   000041   F0           MOVX    @DPTR,A
    394            _NIB.RouteDiscRetries = 0;
   \   000042   90....       MOV     DPTR,#_NIB + 9
   \   000045   7400         MOV     A,#0x0
   \   000047   F0           MOVX    @DPTR,A
    395            _NIB.SecureAllFrames = USE_NWK_SECURITY;
   \   000048   90....       MOV     DPTR,#_NIB + 11
   \   00004B   7400         MOV     A,#0x0
   \   00004D   F0           MOVX    @DPTR,A
    396            _NIB.nwkAllFresh = NWK_ALL_FRESH;
   \   00004E   90....       MOV     DPTR,#_NIB + 104
   \   000051   7401         MOV     A,#0x1
   \   000053   F0           MOVX    @DPTR,A
    397          
    398            if ( ZG_SECURE_ENABLED )
    399            {
    400              _NIB.SecurityLevel = SECURITY_LEVEL;
    401            }
    402            else
    403            {
    404              _NIB.SecurityLevel = 0;
   \   000054   90....       MOV     DPTR,#_NIB + 12
   \   000057   7400         MOV     A,#0x0
   \   000059   F0           MOVX    @DPTR,A
    405            }
    406          
    407          #if defined ( ZIGBEEPRO )
    408            _NIB.SymLink = FALSE;
   \   00005A   90....       MOV     DPTR,#_NIB + 13
   \   00005D   7400         MOV     A,#0x0
   \   00005F   F0           MOVX    @DPTR,A
    409          #else
    410            _NIB.SymLink = TRUE;
    411          #endif
    412          
    413            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000060   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000063   E0           MOVX    A,@DPTR
   \   000064   90....       MOV     DPTR,#_NIB + 14
   \   000067   F0           MOVX    @DPTR,A
    414          
    415            _NIB.TransactionPersistenceTime = zgIndirectMsgTimeout;
   \   000068   90....       MOV     DPTR,#zgIndirectMsgTimeout
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F8           MOV     R0,A
   \   00006D   7900         MOV     R1,#0x0
   \   00006F   90....       MOV     DPTR,#_NIB + 15
   \   000072   E8           MOV     A,R0
   \   000073   F0           MOVX    @DPTR,A
   \   000074   A3           INC     DPTR
   \   000075   E9           MOV     A,R1
   \   000076   F0           MOVX    @DPTR,A
    416          
    417            _NIB.RouteDiscoveryTime = zgRouteDiscoveryTime;
   \   000077   90....       MOV     DPTR,#zgRouteDiscoveryTime
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   90....       MOV     DPTR,#_NIB + 18
   \   00007E   F0           MOVX    @DPTR,A
    418            _NIB.RouteExpiryTime = zgRouteExpiryTime;
   \   00007F   90....       MOV     DPTR,#zgRouteExpiryTime
   \   000082   E0           MOVX    A,@DPTR
   \   000083   90....       MOV     DPTR,#_NIB + 19
   \   000086   F0           MOVX    @DPTR,A
    419          
    420            _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   000087   90....       MOV     DPTR,#_NIB + 20
   \   00008A   74FE         MOV     A,#-0x2
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   A3           INC     DPTR
   \   00008E   74FF         MOV     A,#-0x1
   \   000090   F0           MOVX    @DPTR,A
    421            _NIB.nwkLogicalChannel = 0;
   \   000091   90....       MOV     DPTR,#_NIB + 22
   \   000094   7400         MOV     A,#0x0
   \   000096   F0           MOVX    @DPTR,A
    422            _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
   \   000097   90....       MOV     DPTR,#_NIB + 23
   \   00009A   74FE         MOV     A,#-0x2
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D   A3           INC     DPTR
   \   00009E   74FF         MOV     A,#-0x1
   \   0000A0   F0           MOVX    @DPTR,A
    423            osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
   \   0000A1                ; Setup parameters for call to function osal_memset
   \   0000A1   7C08         MOV     R4,#0x8
   \   0000A3   7D00         MOV     R5,#0x0
   \   0000A5   7900         MOV     R1,#0x0
   \   0000A7   7A..         MOV     R2,#(_NIB + 25) & 0xff
   \   0000A9   7B..         MOV     R3,#((_NIB + 25) >> 8) & 0xff
   \   0000AB   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
    424            _NIB.nwkPanId = INVALID_NODE_ADDR;
   \   0000AE   90....       MOV     DPTR,#_NIB + 33
   \   0000B1   74FE         MOV     A,#-0x2
   \   0000B3   F0           MOVX    @DPTR,A
   \   0000B4   A3           INC     DPTR
   \   0000B5   74FF         MOV     A,#-0x1
   \   0000B7   F0           MOVX    @DPTR,A
    425          
    426            osal_cpyExtAddr( _NIB.extendedPANID, zgExtendedPANID );
   \   0000B8                ; Setup parameters for call to function sAddrExtCpy
   \   0000B8   7C..         MOV     R4,#zgExtendedPANID & 0xff
   \   0000BA   7D..         MOV     R5,#(zgExtendedPANID >> 8) & 0xff
   \   0000BC   7A..         MOV     R2,#(_NIB + 53) & 0xff
   \   0000BE   7B..         MOV     R3,#((_NIB + 53) >> 8) & 0xff
   \   0000C0   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
    427          
    428            _NIB.nwkKeyLoaded = FALSE;
   \   0000C3   90....       MOV     DPTR,#_NIB + 61
   \   0000C6   7400         MOV     A,#0x0
   \   0000C8   F0           MOVX    @DPTR,A
    429          
    430          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    431            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_STOCHASTIC;
   \   0000C9   90....       MOV     DPTR,#_NIB + 96
   \   0000CC   7402         MOV     A,#0x2
   \   0000CE   F0           MOVX    @DPTR,A
    432            _NIB.nwkUniqueAddr = FALSE;
   \   0000CF   90....       MOV     DPTR,#_NIB + 97
   \   0000D2   7400         MOV     A,#0x0
   \   0000D4   F0           MOVX    @DPTR,A
    433          #else
    434            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_DISTRIBUTED;
    435            _NIB.nwkUniqueAddr = TRUE;
    436          #endif
    437          
    438            _NIB.nwkLinkStatusPeriod = NWK_LINK_STATUS_PERIOD;
   \   0000D5   90....       MOV     DPTR,#_NIB + 98
   \   0000D8   740F         MOV     A,#0xf
   \   0000DA   F0           MOVX    @DPTR,A
    439            _NIB.nwkRouterAgeLimit = NWK_ROUTE_AGE_LIMIT;
   \   0000DB   90....       MOV     DPTR,#_NIB + 99
   \   0000DE   7403         MOV     A,#0x3
   \   0000E0   F0           MOVX    @DPTR,A
    440          
    441            //MTO and source routing
    442            _NIB.nwkConcentratorDiscoveryTime = zgConcentratorDiscoveryTime;
   \   0000E1   90....       MOV     DPTR,#zgConcentratorDiscoveryTime
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   90....       MOV     DPTR,#_NIB + 102
   \   0000E8   F0           MOVX    @DPTR,A
    443            _NIB.nwkIsConcentrator = zgConcentratorEnable;
   \   0000E9   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   90....       MOV     DPTR,#_NIB + 101
   \   0000F0   F0           MOVX    @DPTR,A
    444            _NIB.nwkConcentratorRadius = zgConcentratorRadius;
   \   0000F1   90....       MOV     DPTR,#zgConcentratorRadius
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   90....       MOV     DPTR,#_NIB + 103
   \   0000F8   F0           MOVX    @DPTR,A
    445          
    446          #if defined ( ZIGBEE_MULTICAST )
    447            _NIB.nwkUseMultiCast = TRUE;
   \   0000F9   90....       MOV     DPTR,#_NIB + 100
   \   0000FC   7401         MOV     A,#0x1
   \   0000FE   F0           MOVX    @DPTR,A
    448          #else
    449            _NIB.nwkUseMultiCast = FALSE;
    450          #endif
    451            _NIB.nwkManagerAddr = 0x0000;
   \   0000FF   90....       MOV     DPTR,#_NIB + 105
   \   000102   7400         MOV     A,#0x0
   \   000104   F0           MOVX    @DPTR,A
   \   000105   A3           INC     DPTR
   \   000106   7400         MOV     A,#0x0
   \   000108   F0           MOVX    @DPTR,A
    452            _NIB.nwkUpdateId = 0;
   \   000109   90....       MOV     DPTR,#_NIB + 109
   \   00010C   7400         MOV     A,#0x0
   \   00010E   F0           MOVX    @DPTR,A
    453            _NIB.nwkTotalTransmissions = 0;
   \   00010F   90....       MOV     DPTR,#_NIB + 107
   \   000112   7400         MOV     A,#0x0
   \   000114   F0           MOVX    @DPTR,A
   \   000115   A3           INC     DPTR
   \   000116   7400         MOV     A,#0x0
   \   000118   F0           MOVX    @DPTR,A
    454          
    455            if ( ZSTACK_ROUTER_BUILD )
   \   000119   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   6008         JZ      ??NIB_init_0
   \   00011F   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000122   E0           MOVX    A,@DPTR
   \   000123   6401         XRL     A,#0x1
   \   000125   7003         JNZ     ??NIB_init_1
    456            {
    457          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    458              NLME_InitStochasticAddressing();
   \                     ??NIB_init_0:
   \   000127                ; Setup parameters for call to function NLME_InitStochasticAddressing
   \   000127   12....       LCALL   ??NLME_InitStochasticAddressing?relay; Banked call to: NLME_InitStochasticAddressing
    459          #else
    460              NLME_InitTreeAddressing();
    461          #endif
    462            }
    463          }
   \                     ??NIB_init_1:
   \   00012A   D083         POP     DPH
   \   00012C   D082         POP     DPL
   \   00012E   02....       LJMP    ?BRET
    464          
    465          /*********************************************************************
    466           * @fn       nwk_Status()
    467           *
    468           * @brief
    469           *
    470           *   Status report.
    471           *
    472           * @param   statusCode
    473           * @param   statusValue
    474           *
    475           * @return  none
    476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          void nwk_Status( uint16 statusCode, uint16 statusValue )
   \                     nwk_Status:
    478          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    479          #if defined ( LCD_SUPPORTED )
    480            switch ( statusCode )
    481            {
    482              case NWK_STATUS_COORD_ADDR:
    483                if ( ZSTACK_ROUTER_BUILD )
    484                {
    485                  HalLcdWriteString( (char*)ZigbeeCoordStr, HAL_LCD_LINE_1 );
    486                  HalLcdWriteStringValue( (char*)NetworkIDStr, statusValue, 16, HAL_LCD_LINE_2 );
    487                  BuzzerControl( BUZZER_BLIP );
    488                }
    489                break;
    490          
    491              case NWK_STATUS_ROUTER_ADDR:
    492                if ( ZSTACK_ROUTER_BUILD )
    493                {
    494                  HalLcdWriteStringValue( (char*)RouterStr, statusValue, 16, HAL_LCD_LINE_1 );
    495                }
    496                break;
    497          
    498              case NWK_STATUS_ORPHAN_RSP:
    499                if ( ZSTACK_ROUTER_BUILD )
    500                {
    501                  if ( statusValue == ZSuccess )
    502                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)SentStr );
    503                  else
    504                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)FailedStr );
    505                }
    506                break;
    507          
    508              case NWK_ERROR_ASSOC_RSP:
    509                if ( ZSTACK_ROUTER_BUILD )
    510                {
    511                  HalLcdWriteString( (char*)AssocRspFailStr, HAL_LCD_LINE_1 );
    512                  HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
    513                }
    514                break;
    515          
    516              case NWK_STATUS_ED_ADDR:
    517                if ( ZSTACK_END_DEVICE_BUILD )
    518                {
    519                  HalLcdWriteStringValue( (char*)EndDeviceStr, statusValue, 16, HAL_LCD_LINE_1 );
    520                }
    521                break;
    522          
    523              case NWK_STATUS_PARENT_ADDR:
    524                      HalLcdWriteStringValue( (char*)ParentStr, statusValue, 16, HAL_LCD_LINE_2 );
    525                break;
    526          
    527              case NWK_STATUS_ASSOC_CNF:
    528                HalLcdWriteScreen( (char*)AssocCnfStr, (char*)SuccessStr );
    529                break;
    530          
    531              case NWK_ERROR_ASSOC_CNF_DENIED:
    532                HalLcdWriteString((char*)AssocCnfFailStr, HAL_LCD_LINE_1 );
    533                HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
    534                break;
    535          
    536              case NWK_ERROR_ENERGY_SCAN_FAILED:
    537                HalLcdWriteScreen( (char*)EnergyLevelStr, (char*)ScanFailedStr );
    538                break;
    539            }
    540          #endif
    541          }
   \   000000   02....       LJMP    ?BRET
    542          
    543          /*********************************************************************
    544           * @fn       nwk_UpdateStatistics()
    545           *
    546           * @brief   Update network layer statistic counters
    547           *
    548           * @param   statisticCode
    549           *
    550           * @return  none
    551           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    552          void nwk_UpdateStatistics( uint8 statisticCode )
   \                     nwk_UpdateStatistics:
    553          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    554          #if defined ( PACKET_FILTER_STATS )
    555            switch ( statisticCode )
    556            {
    557              case STAT_NWK_INVALID_PACKET:
    558                nwkInvalidPackets++;
    559                break;
    560          
    561              case STAT_NWK_SECURITY_FAILURE:
    562                nwkInvalidPackets++;
    563                nwkSecurityFailures++;
    564                break;
    565          
    566              case STAT_APS_INVALID_PACKET:
    567                apsInvalidPackets++;
    568                break;
    569          
    570              case STAT_APS_SECURITY_FAILURE:
    571                apsSecurityFailures++;
    572                break;
    573            }
    574          #endif
    575          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gMIN_TREE_LINK_COST>`:
   \   000000   06           DB 6

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST`:
   \   000000   12           DB 18

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_globals_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_globals_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??NIB_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NIB_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_Status?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_Status

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_UpdateStatistics?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_UpdateStatistics
    576          
    577          /*********************************************************************
    578          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK Function
   ------ --------
      2   NIB_init
        2   -> NLME_InitStochasticAddressing
        2   -> osal_memset
        2   -> osal_rand
        2   -> sAddrExtCpy
      0   nwk_Status
      0   nwk_UpdateStatistics
      2   nwk_globals_init
        2   -> AddrMgrInit
        2   -> NLME_InitLinkStatus
        2   -> NwkFreqAgilityInit


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST
       1  ?<Initializer for gMIN_TREE_LINK_COST>
       6  ??NIB_init?relay
       6  ??nwk_Status?relay
       6  ??nwk_UpdateStatistics?relay
       6  ??nwk_globals_init?relay
     378  AssociatedDevList
      56  BindingTable
       2  Cskip
       1  CskipChldrn
       1  CskipRtrs
     305  NIB_init
      90  apsEndDeviceBroadcastTable
      36  bcastHoldAckMask
       9  bcastHoldHandle
      72  bcastTable
      16  defaultKey
      16  defaultTCLinkKey
       1  gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES
       1  gAPS_MAX_GROUPS
       2  gBIND_REC_SIZE
       1  gDEFAULT_ROUTE_REQUEST_RADIUS
       1  gDEF_NWK_RADIUS
       1  gLINK_DOWN_TRIGGER
       2  gLINK_STATUS_JITTER_MASK
       1  gMAX_BCAST
       1  gMAX_BINDING_CLUSTER_IDS
       1  gMAX_BROADCAST_QUEUED
       1  gMAX_NEIGHBOR_ENTRIES
       1  gMAX_PASSIVE_ACK_CNT
       1  gMAX_RREQ_ENTRIES
       2  gMAX_RTG_ENTRIES
       2  gMAX_RTG_SRC_ENTRIES
       1  gMAX_SOURCE_ROUTE
       1  gMIN_TREE_LINK_COST
       1  gMTO_ROUTE_EXPIRY_TIME
       2  gMTO_RREQ_LIMIT_TIME
       1  gNWK_CONFLICTED_ADDR_EXPIRY_TIME
       1  gNWK_FREQ_AGILITY_ALL_MAC_ERRS
       1  gNWK_INDIRECT_CNT_RTG_TMR
       1  gNWK_INDIRECT_MSG_MAX_ALL
       1  gNWK_INDIRECT_MSG_MAX_PER
       2  gNWK_MAX_BINDING_ENTRIES
       1  gNWK_MAX_DATABUFS_CONFIRMED
       1  gNWK_MAX_DATABUFS_SCHEDULED
       1  gNWK_MAX_DATABUFS_TOTAL
       1  gNWK_MAX_DATABUFS_WAITING
       2  gNWK_MAX_DEVICE_LIST
       1  gNWK_MAX_SLEEPING_END_DEVICES
       1  gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
     368  neighborTable
       3  nwk_Status
       3  nwk_UpdateStatistics
      38  nwk_globals_init
      64  rtDiscTable
      24  rtgSrcRelayList
      72  rtgSrcTable
     280  rtgTable

 
   349 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
    69 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
 1 453 bytes in segment XDATA_Z
 
   444 bytes of CODE  memory
 1 455 bytes of XDATA memory

Errors: none
Warnings: none
