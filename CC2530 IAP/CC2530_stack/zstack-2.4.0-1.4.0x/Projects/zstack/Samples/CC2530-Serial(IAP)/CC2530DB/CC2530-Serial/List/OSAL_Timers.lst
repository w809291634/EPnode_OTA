###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:43
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\osal\common\OSAL_Timers.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\osal\common\OSAL_Timers.c"
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        XLAB -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\OSAL_Timers.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\OSAL_Timers.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\osal\common\OSAL_Timers.c
      1          /**************************************************************************************************
      2            Filename:       OSAL_Timers.c
      3            Revised:        $Date: 2010-09-17 16:25:30 -0700 (Fri, 17 Sep 2010) $
      4            Revision:       $Revision: 23835 $
      5          
      6            Description:    OSAL Timer definition and manipulation functions.
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "comdef.h"
     45          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     46          #include "OSAL.h"
     47          #include "OSAL_Timers.h"
     48          #include "hal_timer.h"
     49          
     50          /*********************************************************************
     51           * MACROS
     52           */
     53          
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          
     58          /*********************************************************************
     59           * TYPEDEFS
     60           */
     61          
     62          typedef struct
     63          {
     64            void   *next;
     65            uint16 timeout;
     66            uint16 event_flag;
     67            uint8  task_id;
     68            uint16 reloadTimeout;
     69          } osalTimerRec_t;
     70          
     71          /*********************************************************************
     72           * GLOBAL VARIABLES
     73           */
     74          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     75          osalTimerRec_t *timerHead;
   \                     timerHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     76          
     77          /*********************************************************************
     78           * EXTERNAL VARIABLES
     79           */
     80          
     81          /*********************************************************************
     82           * EXTERNAL FUNCTIONS
     83           */
     84          
     85          /*********************************************************************
     86           * LOCAL VARIABLES
     87           */
     88          // Milliseconds since last reboot

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          static uint32 osal_systemClock;
   \                     osal_systemClock:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     90          
     91          /*********************************************************************
     92           * LOCAL FUNCTION PROTOTYPES
     93           */
     94          osalTimerRec_t  *osalAddTimer( uint8 task_id, uint16 event_flag, uint16 timeout );
     95          osalTimerRec_t *osalFindTimer( uint8 task_id, uint16 event_flag );
     96          void osalDeleteTimer( osalTimerRec_t *rmTimer );
     97          
     98          /*********************************************************************
     99           * FUNCTIONS
    100           *********************************************************************/
    101          
    102          /*********************************************************************
    103           * @fn      osalTimerInit
    104           *
    105           * @brief   Initialization for the OSAL Timer System.
    106           *
    107           * @param   none
    108           *
    109           * @return
    110           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    111          void osalTimerInit( void )
   \                     osalTimerInit:
    112          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    113            osal_systemClock = 0;
   \   000005   7C00         MOV     R4,#0x0
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7E00         MOV     R6,#0x0
   \   00000B   7F00         MOV     R7,#0x0
   \   00000D   90....       MOV     DPTR,#osal_systemClock
   \   000010   EC           MOV     A,R4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   ED           MOV     A,R5
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   EE           MOV     A,R6
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   EF           MOV     A,R7
   \   00001A   F0           MOVX    @DPTR,A
    114          }
   \   00001B   7F01         MOV     R7,#0x1
   \   00001D   02....       LJMP    ?BANKED_LEAVE_XDATA
    115          
    116          /*********************************************************************
    117           * @fn      osalAddTimer
    118           *
    119           * @brief   Add a timer to the timer list.
    120           *          Ints must be disabled.
    121           *
    122           * @param   task_id
    123           * @param   event_flag
    124           * @param   timeout
    125           *
    126           * @return  osalTimerRec_t * - pointer to newly created timer
    127           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    128          osalTimerRec_t * osalAddTimer( uint8 task_id, uint16 event_flag, uint16 timeout )
   \                     osalAddTimer:
    129          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   89..         MOV     ?V2,R1
   \   000017   8C..         MOV     ?V6,R4
   \   000019   8D..         MOV     ?V7,R5
    130            osalTimerRec_t *newTimer;
    131            osalTimerRec_t *srchTimer;
    132          
    133            // Look for an existing timer first
    134            newTimer = osalFindTimer( task_id, event_flag );
   \   00001B                ; Setup parameters for call to function osalFindTimer
   \   00001B   85..82       MOV     DPL,?XSP + 0
   \   00001E   85..83       MOV     DPH,?XSP + 1
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FA           MOV     R2,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FB           MOV     R3,A
   \   000026   A9..         MOV     R1,?V2
   \   000028   12....       LCALL   ??osalFindTimer?relay; Banked call to: osalFindTimer
   \   00002B   8A..         MOV     ?V4,R2
   \   00002D   8B..         MOV     ?V5,R3
   \   00002F   AE..         MOV     R6,?V4
   \   000031   AF..         MOV     R7,?V5
    135            if ( newTimer )
   \   000033   EE           MOV     A,R6
   \   000034   4F           ORL     A,R7
   \   000035   6014         JZ      ??osalAddTimer_0
    136            {
    137              // Timer is found - update it.
    138              newTimer->timeout = timeout;
   \   000037   8E82         MOV     DPL,R6
   \   000039   8F83         MOV     DPH,R7
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   E5..         MOV     A,?V6
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   E5..         MOV     A,?V7
   \   000043   F0           MOVX    @DPTR,A
    139          
    140              return ( newTimer );
   \   000044   EE           MOV     A,R6
   \   000045   FA           MOV     R2,A
   \   000046   EF           MOV     A,R7
   \   000047   FB           MOV     R3,A
   \   000048   02....       LJMP    ??osalAddTimer_1 & 0xFFFF
    141            }
    142            else
    143            {
    144              // New Timer
    145              newTimer = osal_mem_alloc( sizeof( osalTimerRec_t ) );
   \                     ??osalAddTimer_0:
   \   00004B                ; Setup parameters for call to function osal_mem_alloc
   \   00004B   7A09         MOV     R2,#0x9
   \   00004D   7B00         MOV     R3,#0x0
   \   00004F   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000052   8A..         MOV     ?V4,R2
   \   000054   8B..         MOV     ?V5,R3
   \   000056   AE..         MOV     R6,?V4
   \   000058   AF..         MOV     R7,?V5
    146          
    147              if ( newTimer )
   \   00005A   EE           MOV     A,R6
   \   00005B   4F           ORL     A,R7
   \   00005C   7003         JNZ     $+5
   \   00005E   02....       LJMP    ??osalAddTimer_2 & 0xFFFF
    148              {
    149                // Fill in new timer
    150                newTimer->task_id = task_id;
   \   000061   E5..         MOV     A,?V2
   \   000063   C0E0         PUSH    A
   \   000065   8E82         MOV     DPL,R6
   \   000067   8F83         MOV     DPH,R7
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   D0E0         POP     A
   \   000071   F0           MOVX    @DPTR,A
    151                newTimer->event_flag = event_flag;
   \   000072   85..82       MOV     DPL,?XSP + 0
   \   000075   85..83       MOV     DPH,?XSP + 1
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F8           MOV     R0,A
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F9           MOV     R1,A
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   E8           MOV     A,R0
   \   000086   F0           MOVX    @DPTR,A
   \   000087   A3           INC     DPTR
   \   000088   E9           MOV     A,R1
   \   000089   F0           MOVX    @DPTR,A
    152                newTimer->timeout = timeout;
   \   00008A   8E82         MOV     DPL,R6
   \   00008C   8F83         MOV     DPH,R7
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   E5..         MOV     A,?V6
   \   000092   F0           MOVX    @DPTR,A
   \   000093   A3           INC     DPTR
   \   000094   E5..         MOV     A,?V7
   \   000096   F0           MOVX    @DPTR,A
    153                newTimer->next = (void *)NULL;
   \   000097   8E82         MOV     DPL,R6
   \   000099   8F83         MOV     DPH,R7
   \   00009B   7400         MOV     A,#0x0
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   A3           INC     DPTR
   \   00009F   7400         MOV     A,#0x0
   \   0000A1   F0           MOVX    @DPTR,A
    154                newTimer->reloadTimeout = 0;
   \   0000A2   8E82         MOV     DPL,R6
   \   0000A4   8F83         MOV     DPH,R7
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   7400         MOV     A,#0x0
   \   0000AF   F0           MOVX    @DPTR,A
   \   0000B0   A3           INC     DPTR
   \   0000B1   7400         MOV     A,#0x0
   \   0000B3   F0           MOVX    @DPTR,A
    155          
    156                // Does the timer list already exist
    157                if ( timerHead == NULL )
   \   0000B4   90....       MOV     DPTR,#timerHead
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   F8           MOV     R0,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   F9           MOV     R1,A
   \   0000BC   E8           MOV     A,R0
   \   0000BD   49           ORL     A,R1
   \   0000BE   700A         JNZ     ??osalAddTimer_3
    158                {
    159                  // Start task list
    160                  timerHead = newTimer;
   \   0000C0   90....       MOV     DPTR,#timerHead
   \   0000C3   EE           MOV     A,R6
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   EF           MOV     A,R7
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8   8035         SJMP    ??osalAddTimer_4
    161                }
    162                else
    163                {
    164                  // Add it to the end of the timer list
    165                  srchTimer = timerHead;
   \                     ??osalAddTimer_3:
   \   0000CA   90....       MOV     DPTR,#timerHead
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   F8           MOV     R0,A
   \   0000CF   A3           INC     DPTR
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   F9           MOV     R1,A
   \   0000D2   88..         MOV     ?V0,R0
   \   0000D4   89..         MOV     ?V1,R1
    166          
    167                  // Stop at the last record
    168                  while ( srchTimer->next )
   \                     ??osalAddTimer_5:
   \   0000D6   85..82       MOV     DPL,?V0
   \   0000D9   85..83       MOV     DPH,?V1
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   F8           MOV     R0,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   F9           MOV     R1,A
   \   0000E1   E8           MOV     A,R0
   \   0000E2   49           ORL     A,R1
   \   0000E3   600F         JZ      ??osalAddTimer_6
    169                    srchTimer = srchTimer->next;
   \   0000E5   85..82       MOV     DPL,?V0
   \   0000E8   85..83       MOV     DPH,?V1
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   F5..         MOV     ?V0,A
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   F5..         MOV     ?V1,A
   \   0000F2   80E2         SJMP    ??osalAddTimer_5
    170          
    171                  // Add to the list
    172                  srchTimer->next = newTimer;
   \                     ??osalAddTimer_6:
   \   0000F4   85..82       MOV     DPL,?V0
   \   0000F7   85..83       MOV     DPH,?V1
   \   0000FA   EE           MOV     A,R6
   \   0000FB   F0           MOVX    @DPTR,A
   \   0000FC   A3           INC     DPTR
   \   0000FD   EF           MOV     A,R7
   \   0000FE   F0           MOVX    @DPTR,A
    173                }
    174          
    175                return ( newTimer );
   \                     ??osalAddTimer_4:
   \   0000FF   EE           MOV     A,R6
   \   000100   FA           MOV     R2,A
   \   000101   EF           MOV     A,R7
   \   000102   FB           MOV     R3,A
   \   000103   8004         SJMP    ??osalAddTimer_1
    176              }
    177              else
    178                return ( (osalTimerRec_t *)NULL );
   \                     ??osalAddTimer_2:
   \   000105   7A00         MOV     R2,#0x0
   \   000107   7B00         MOV     R3,#0x0
   \                     ??osalAddTimer_1:
   \   000109   7402         MOV     A,#0x2
   \   00010B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010E   7F08         MOV     R7,#0x8
   \   000110   02....       LJMP    ?BANKED_LEAVE_XDATA
    179            }
    180          }
    181          
    182          /*********************************************************************
    183           * @fn      osalFindTimer
    184           *
    185           * @brief   Find a timer in a timer list.
    186           *          Ints must be disabled.
    187           *
    188           * @param   task_id
    189           * @param   event_flag
    190           *
    191           * @return  osalTimerRec_t *
    192           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    193          osalTimerRec_t *osalFindTimer( uint8 task_id, uint16 event_flag )
   \                     osalFindTimer:
    194          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FC           MOV     R4,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    195            osalTimerRec_t *srchTimer;
    196          
    197            // Head of the timer list
    198            srchTimer = timerHead;
   \   00000B   90....       MOV     DPTR,#timerHead
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   E8           MOV     A,R0
   \   000014   FA           MOV     R2,A
   \   000015   E9           MOV     A,R1
   \   000016   FB           MOV     R3,A
    199          
    200            // Stop when found or at the end
    201            while ( srchTimer )
   \                     ??osalFindTimer_0:
   \   000017   EA           MOV     A,R2
   \   000018   4B           ORL     A,R3
   \   000019   602A         JZ      ??osalFindTimer_1
    202            {
    203              if ( srchTimer->event_flag == event_flag &&
    204                   srchTimer->task_id == task_id )
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6E           XRL     A,R6
   \   000025   7003         JNZ     ??osalFindTimer_2
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6F           XRL     A,R7
   \                     ??osalFindTimer_2:
   \   00002A   700E         JNZ     ??osalFindTimer_3
   \   00002C   8A82         MOV     DPL,R2
   \   00002E   8B83         MOV     DPH,R3
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   6C           XRL     A,R4
   \   000038   600B         JZ      ??osalFindTimer_1
    205                break;
    206          
    207              // Not this one, check another
    208              srchTimer = srchTimer->next;
   \                     ??osalFindTimer_3:
   \   00003A   8A82         MOV     DPL,R2
   \   00003C   8B83         MOV     DPH,R3
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FA           MOV     R2,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   FB           MOV     R3,A
   \   000043   80D2         SJMP    ??osalFindTimer_0
    209            }
    210          
    211            return ( srchTimer );
   \                     ??osalFindTimer_1:
   \   000045   7F01         MOV     R7,#0x1
   \   000047   02....       LJMP    ?BANKED_LEAVE_XDATA
    212          }
    213          
    214          /*********************************************************************
    215           * @fn      osalDeleteTimer
    216           *
    217           * @brief   Delete a timer from a timer list.
    218           *
    219           * @param   table
    220           * @param   rmTimer
    221           *
    222           * @return  none
    223           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    224          void osalDeleteTimer( osalTimerRec_t *rmTimer )
   \                     osalDeleteTimer:
    225          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    226            // Does the timer list really exist
    227            if ( rmTimer )
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   600F         JZ      ??osalDeleteTimer_0
    228            {
    229              // Clear the event flag and osalTimerUpdate() will delete 
    230              // the timer from the list.
    231              rmTimer->event_flag = 0;
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   7400         MOV     A,#0x0
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
    232            }
    233          }
   \                     ??osalDeleteTimer_0:
   \   000017   D083         POP     DPH
   \   000019   D082         POP     DPL
   \   00001B   02....       LJMP    ?BRET
    234          
    235          /*********************************************************************
    236           * @fn      osal_start_timerEx
    237           *
    238           * @brief
    239           *
    240           *   This function is called to start a timer to expire in n mSecs.
    241           *   When the timer expires, the calling task will get the specified event.
    242           *
    243           * @param   uint8 taskID - task id to set timer for
    244           * @param   uint16 event_id - event to be notified with
    245           * @param   UNINT16 timeout_value - in milliseconds.
    246           *
    247           * @return  SUCCESS, or NO_TIMER_AVAIL.
    248           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    249          uint8 osal_start_timerEx( uint8 taskID, uint16 event_id, uint16 timeout_value )
   \                     osal_start_timerEx:
    250          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   \   00000B   8C..         MOV     ?V4,R4
   \   00000D   8D..         MOV     ?V5,R5
    251            halIntState_t intState;
    252            osalTimerRec_t *newTimer;
    253          
    254            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   00000F   A2AF         MOV     C,0xa8.7
   \   000011   E4           CLR     A
   \   000012   33           RLC     A
   \   000013   FE           MOV     R6,A
   \   000014   C2AF         CLR     0xa8.7
    255          
    256            // Add timer
    257            newTimer = osalAddTimer( taskID, event_id, timeout_value );
   \   000016                ; Setup parameters for call to function osalAddTimer
   \   000016   AC..         MOV     R4,?V4
   \   000018   AD..         MOV     R5,?V5
   \   00001A   AA..         MOV     R2,?V0
   \   00001C   AB..         MOV     R3,?V1
   \   00001E   EF           MOV     A,R7
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   ??osalAddTimer?relay ; Banked call to: osalAddTimer
   \   000023   8A..         MOV     ?V2,R2
   \   000025   8B..         MOV     ?V3,R3
   \   000027   85....       MOV     ?V6,?V2
   \   00002A   85....       MOV     ?V7,?V3
    258          
    259            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   00002D   EE           MOV     A,R6
   \   00002E   F8           MOV     R0,A
   \   00002F   EE           MOV     A,R6
   \   000030   A2E0         MOV     C,0xE0 /* A   */.0
   \   000032   92AF         MOV     0xa8.7,C
    260          
    261            return ( (newTimer != NULL) ? SUCCESS : NO_TIMER_AVAIL );
   \   000034   E5..         MOV     A,?V6
   \   000036   45..         ORL     A,?V7
   \   000038   6004         JZ      ??osal_start_timerEx_0
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   8002         SJMP    ??osal_start_timerEx_1
   \                     ??osal_start_timerEx_0:
   \   00003E   7908         MOV     R1,#0x8
   \                     ??osal_start_timerEx_1:
   \   000040   7F08         MOV     R7,#0x8
   \   000042   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000045                REQUIRE _A_IEN0
    262          }
    263          
    264          /*********************************************************************
    265           * @fn      osal_start_reload_timer
    266           *
    267           * @brief
    268           *
    269           *   This function is called to start a timer to expire in n mSecs.
    270           *   When the timer expires, the calling task will get the specified event
    271           *   and the timer will be reloaded with the timeout value.
    272           *
    273           * @param   uint8 taskID - task id to set timer for
    274           * @param   uint16 event_id - event to be notified with
    275           * @param   UNINT16 timeout_value - in milliseconds.
    276           *
    277           * @return  SUCCESS, or NO_TIMER_AVAIL.
    278           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    279          uint8 osal_start_reload_timer( uint8 taskID, uint16 event_id, uint16 timeout_value )
   \                     osal_start_reload_timer:
    280          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   8A..         MOV     ?V6,R2
   \   000009   8B..         MOV     ?V7,R3
   \   00000B   8C..         MOV     ?V4,R4
   \   00000D   8D..         MOV     ?V5,R5
    281            halIntState_t intState;
    282            osalTimerRec_t *newTimer;
    283          
    284            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   00000F   A2AF         MOV     C,0xa8.7
   \   000011   E4           CLR     A
   \   000012   33           RLC     A
   \   000013   FE           MOV     R6,A
   \   000014   C2AF         CLR     0xa8.7
    285          
    286            // Add timer
    287            newTimer = osalAddTimer( taskID, event_id, timeout_value );
   \   000016                ; Setup parameters for call to function osalAddTimer
   \   000016   AC..         MOV     R4,?V4
   \   000018   AD..         MOV     R5,?V5
   \   00001A   AA..         MOV     R2,?V6
   \   00001C   AB..         MOV     R3,?V7
   \   00001E   EF           MOV     A,R7
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   ??osalAddTimer?relay ; Banked call to: osalAddTimer
   \   000023   8A..         MOV     ?V2,R2
   \   000025   8B..         MOV     ?V3,R3
   \   000027   85....       MOV     ?V0,?V2
   \   00002A   85....       MOV     ?V1,?V3
    288            if ( newTimer )
   \   00002D   E5..         MOV     A,?V0
   \   00002F   45..         ORL     A,?V1
   \   000031   6014         JZ      ??osal_start_reload_timer_0
    289            {
    290              // Load the reload timeout value
    291              newTimer->reloadTimeout = timeout_value;
   \   000033   85..82       MOV     DPL,?V0
   \   000036   85..83       MOV     DPH,?V1
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E5..         MOV     A,?V4
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   E5..         MOV     A,?V5
   \   000046   F0           MOVX    @DPTR,A
    292            }
    293          
    294            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_start_reload_timer_0:
   \   000047   EE           MOV     A,R6
   \   000048   F8           MOV     R0,A
   \   000049   EE           MOV     A,R6
   \   00004A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00004C   92AF         MOV     0xa8.7,C
    295          
    296            return ( (newTimer != NULL) ? SUCCESS : NO_TIMER_AVAIL );
   \   00004E   E5..         MOV     A,?V0
   \   000050   45..         ORL     A,?V1
   \   000052   6004         JZ      ??osal_start_reload_timer_1
   \   000054   7900         MOV     R1,#0x0
   \   000056   8002         SJMP    ??osal_start_reload_timer_2
   \                     ??osal_start_reload_timer_1:
   \   000058   7908         MOV     R1,#0x8
   \                     ??osal_start_reload_timer_2:
   \   00005A   7F08         MOV     R7,#0x8
   \   00005C   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00005F                REQUIRE _A_IEN0
    297          }
    298          
    299          /*********************************************************************
    300           * @fn      osal_stop_timerEx
    301           *
    302           * @brief
    303           *
    304           *   This function is called to stop a timer that has already been started.
    305           *   If ZSUCCESS, the function will cancel the timer and prevent the event
    306           *   associated with the timer from being set for the calling task.
    307           *
    308           * @param   uint8 task_id - task id of timer to stop
    309           * @param   uint16 event_id - identifier of the timer that is to be stopped
    310           *
    311           * @return  SUCCESS or INVALID_EVENT_ID
    312           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    313          uint8 osal_stop_timerEx( uint8 task_id, uint16 event_id )
   \                     osal_stop_timerEx:
    314          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
    315            halIntState_t intState;
    316            osalTimerRec_t *foundTimer;
    317          
    318            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   00000B   A2AF         MOV     C,0xa8.7
   \   00000D   E4           CLR     A
   \   00000E   33           RLC     A
   \   00000F   F5..         MOV     ?V2,A
   \   000011   C2AF         CLR     0xa8.7
    319          
    320            // Find the timer to stop
    321            foundTimer = osalFindTimer( task_id, event_id );
   \   000013                ; Setup parameters for call to function osalFindTimer
   \   000013   AA..         MOV     R2,?V0
   \   000015   AB..         MOV     R3,?V1
   \   000017   A9..         MOV     R1,?V3
   \   000019   12....       LCALL   ??osalFindTimer?relay; Banked call to: osalFindTimer
   \   00001C   8A..         MOV     ?V4,R2
   \   00001E   8B..         MOV     ?V5,R3
   \   000020   AE..         MOV     R6,?V4
   \   000022   AF..         MOV     R7,?V5
    322            if ( foundTimer )
   \   000024   EE           MOV     A,R6
   \   000025   4F           ORL     A,R7
   \   000026   6007         JZ      ??osal_stop_timerEx_0
    323            {
    324              osalDeleteTimer( foundTimer );
   \   000028                ; Setup parameters for call to function osalDeleteTimer
   \   000028   EE           MOV     A,R6
   \   000029   FA           MOV     R2,A
   \   00002A   EF           MOV     A,R7
   \   00002B   FB           MOV     R3,A
   \   00002C   12....       LCALL   ??osalDeleteTimer?relay; Banked call to: osalDeleteTimer
    325            }
    326          
    327            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_stop_timerEx_0:
   \   00002F   A8..         MOV     R0,?V2
   \   000031   E5..         MOV     A,?V2
   \   000033   A2E0         MOV     C,0xE0 /* A   */.0
   \   000035   92AF         MOV     0xa8.7,C
    328          
    329            return ( (foundTimer != NULL) ? SUCCESS : INVALID_EVENT_ID );
   \   000037   EE           MOV     A,R6
   \   000038   4F           ORL     A,R7
   \   000039   6004         JZ      ??osal_stop_timerEx_1
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   8002         SJMP    ??osal_stop_timerEx_2
   \                     ??osal_stop_timerEx_1:
   \   00003F   7906         MOV     R1,#0x6
   \                     ??osal_stop_timerEx_2:
   \   000041   7F06         MOV     R7,#0x6
   \   000043   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000046                REQUIRE _A_IEN0
    330          }
    331          
    332          /*********************************************************************
    333           * @fn      osal_get_timeoutEx
    334           *
    335           * @brief
    336           *
    337           * @param   uint8 task_id - task id of timer to check
    338           * @param   uint16 event_id - identifier of timer to be checked
    339           *
    340           * @return  Return the timer's tick count if found, zero otherwise.
    341           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    342          uint16 osal_get_timeoutEx( uint8 task_id, uint16 event_id )
   \                     osal_get_timeoutEx:
    343          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   \   000007   8A..         MOV     ?V6,R2
   \   000009   8B..         MOV     ?V7,R3
    344            halIntState_t intState;
    345            uint16 rtrn = 0;
   \   00000B   7E00         MOV     R6,#0x0
   \   00000D   7F00         MOV     R7,#0x0
    346            osalTimerRec_t *tmr;
    347          
    348            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   00000F   A2AF         MOV     C,0xa8.7
   \   000011   E4           CLR     A
   \   000012   33           RLC     A
   \   000013   F5..         MOV     ?V2,A
   \   000015   C2AF         CLR     0xa8.7
    349          
    350            tmr = osalFindTimer( task_id, event_id );
   \   000017                ; Setup parameters for call to function osalFindTimer
   \   000017   AA..         MOV     R2,?V6
   \   000019   AB..         MOV     R3,?V7
   \   00001B   A9..         MOV     R1,?V3
   \   00001D   12....       LCALL   ??osalFindTimer?relay; Banked call to: osalFindTimer
   \   000020   8A..         MOV     ?V4,R2
   \   000022   8B..         MOV     ?V5,R3
   \   000024   85....       MOV     ?V0,?V4
   \   000027   85....       MOV     ?V1,?V5
    351          
    352            if ( tmr )
   \   00002A   E5..         MOV     A,?V0
   \   00002C   45..         ORL     A,?V1
   \   00002E   600D         JZ      ??osal_get_timeoutEx_0
    353            {
    354              rtrn = tmr->timeout;
   \   000030   85..82       MOV     DPL,?V0
   \   000033   85..83       MOV     DPH,?V1
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   FE           MOV     R6,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FF           MOV     R7,A
    355            }
    356          
    357            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_get_timeoutEx_0:
   \   00003D   A8..         MOV     R0,?V2
   \   00003F   E5..         MOV     A,?V2
   \   000041   A2E0         MOV     C,0xE0 /* A   */.0
   \   000043   92AF         MOV     0xa8.7,C
    358          
    359            return rtrn;
   \   000045   EE           MOV     A,R6
   \   000046   FA           MOV     R2,A
   \   000047   EF           MOV     A,R7
   \   000048   FB           MOV     R3,A
   \   000049   7F08         MOV     R7,#0x8
   \   00004B   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00004E                REQUIRE _A_IEN0
    360          }
    361          
    362          /*********************************************************************
    363           * @fn      osal_timer_num_active
    364           *
    365           * @brief
    366           *
    367           *   This function counts the number of active timers.
    368           *
    369           * @return  uint8 - number of timers
    370           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    371          uint8 osal_timer_num_active( void )
   \                     osal_timer_num_active:
    372          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    373            halIntState_t intState;
    374            uint8 num_timers = 0;
   \   000004   7900         MOV     R1,#0x0
    375            osalTimerRec_t *srchTimer;
    376          
    377            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000006   A2AF         MOV     C,0xa8.7
   \   000008   E4           CLR     A
   \   000009   33           RLC     A
   \   00000A   F8           MOV     R0,A
   \   00000B   C2AF         CLR     0xa8.7
    378          
    379            // Head of the timer list
    380            srchTimer = timerHead;
   \   00000D   90....       MOV     DPTR,#timerHead
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FC           MOV     R4,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FD           MOV     R5,A
   \   000015   EC           MOV     A,R4
   \   000016   FA           MOV     R2,A
   \   000017   ED           MOV     A,R5
   \   000018   FB           MOV     R3,A
    381          
    382            // Count timers in the list
    383            while ( srchTimer != NULL )
   \                     ??osal_timer_num_active_0:
   \   000019   EA           MOV     A,R2
   \   00001A   4B           ORL     A,R3
   \   00001B   600C         JZ      ??osal_timer_num_active_1
    384            {
    385              num_timers++;
   \   00001D   09           INC     R1
    386              srchTimer = srchTimer->next;
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FB           MOV     R3,A
   \   000027   80F0         SJMP    ??osal_timer_num_active_0
    387            }
    388          
    389            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_timer_num_active_1:
   \   000029   E8           MOV     A,R0
   \   00002A   FC           MOV     R4,A
   \   00002B   E8           MOV     A,R0
   \   00002C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00002E   92AF         MOV     0xa8.7,C
    390          
    391            return num_timers;
   \   000030   D083         POP     DPH
   \   000032   D082         POP     DPL
   \   000034   02....       LJMP    ?BRET
   \   000037                REQUIRE _A_IEN0
    392          }
    393          
    394          /*********************************************************************
    395           * @fn      osalTimerUpdate
    396           *
    397           * @brief   Update the timer structures for a timer tick.
    398           *
    399           * @param   none
    400           *
    401           * @return  none
    402           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    403          void osalTimerUpdate( uint16 updateTime )
   \                     osalTimerUpdate:
    404          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
    405            halIntState_t intState;
    406            osalTimerRec_t *srchTimer;
    407            osalTimerRec_t *prevTimer;
    408          
    409            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   00000E   A2AF         MOV     C,0xa8.7
   \   000010   E4           CLR     A
   \   000011   33           RLC     A
   \   000012   F5..         MOV     ?V6,A
   \   000014   C2AF         CLR     0xa8.7
    410            // Update the system time
    411            osal_systemClock += updateTime;
   \   000016   85....       MOV     ?V0,?V4
   \   000019   85....       MOV     ?V1,?V5
   \   00001C   E4           CLR     A
   \   00001D   F5..         MOV     ?V2,A
   \   00001F   F5..         MOV     ?V3,A
   \   000021   90....       MOV     DPTR,#osal_systemClock
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?L_ADD_TO_X
    412            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000029   85....       MOV     ?V3,?V6
   \   00002C   E5..         MOV     A,?V6
   \   00002E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000030   92AF         MOV     0xa8.7,C
    413          
    414            // Look for open timer slot
    415            if ( timerHead != NULL )
   \   000032   90....       MOV     DPTR,#timerHead
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F8           MOV     R0,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   E8           MOV     A,R0
   \   00003B   49           ORL     A,R1
   \   00003C   7003         JNZ     $+5
   \   00003E   02....       LJMP    ??osalTimerUpdate_0 & 0xFFFF
    416            {
    417              // Add it to the end of the timer list
    418              srchTimer = timerHead;
   \   000041   90....       MOV     DPTR,#timerHead
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F8           MOV     R0,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   E8           MOV     A,R0
   \   00004A   FE           MOV     R6,A
   \   00004B   E9           MOV     A,R1
   \   00004C   FF           MOV     R7,A
    419              prevTimer = (void *)NULL;
   \   00004D   85..82       MOV     DPL,?XSP + 0
   \   000050   85..83       MOV     DPH,?XSP + 1
   \   000053   7400         MOV     A,#0x0
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   7400         MOV     A,#0x0
   \   000059   F0           MOVX    @DPTR,A
    420          
    421              // Look for open timer slot
    422              while ( srchTimer )
   \                     ??osalTimerUpdate_1:
   \   00005A   EE           MOV     A,R6
   \   00005B   4F           ORL     A,R7
   \   00005C   7003         JNZ     $+5
   \   00005E   02....       LJMP    ??osalTimerUpdate_0 & 0xFFFF
    423              {
    424                osalTimerRec_t *freeTimer = NULL;
   \   000061   75..00       MOV     ?V0,#0x0
   \   000064   75..00       MOV     ?V1,#0x0
    425               
    426                HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000067   A2AF         MOV     C,0xa8.7
   \   000069   E4           CLR     A
   \   00006A   33           RLC     A
   \   00006B   F5..         MOV     ?V6,A
   \   00006D   C2AF         CLR     0xa8.7
    427                
    428                if (srchTimer->timeout <= updateTime)
   \   00006F   8E82         MOV     DPL,R6
   \   000071   8F83         MOV     DPH,R7
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F8           MOV     R0,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F9           MOV     R1,A
   \   00007A   C3           CLR     C
   \   00007B   E5..         MOV     A,?V4
   \   00007D   98           SUBB    A,R0
   \   00007E   E5..         MOV     A,?V5
   \   000080   99           SUBB    A,R1
   \   000081   400F         JC      ??osalTimerUpdate_2
    429                {
    430                  srchTimer->timeout = 0;
   \   000083   8E82         MOV     DPL,R6
   \   000085   8F83         MOV     DPH,R7
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   7400         MOV     A,#0x0
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   A3           INC     DPTR
   \   00008D   7400         MOV     A,#0x0
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   8010         SJMP    ??osalTimerUpdate_3
    431                }
    432                else
    433                {
    434                  srchTimer->timeout = srchTimer->timeout - updateTime;
   \                     ??osalTimerUpdate_2:
   \   000092   8E82         MOV     DPL,R6
   \   000094   8F83         MOV     DPH,R7
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   C3           CLR     C
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   95..         SUBB    A,?V4
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   95..         SUBB    A,?V5
   \   0000A1   F0           MOVX    @DPTR,A
    435                }
    436                
    437                // Check for reloading
    438                if ( (srchTimer->timeout == 0) && (srchTimer->reloadTimeout) && (srchTimer->event_flag) )
   \                     ??osalTimerUpdate_3:
   \   0000A2   8E82         MOV     DPL,R6
   \   0000A4   8F83         MOV     DPH,R7
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   F8           MOV     R0,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   F9           MOV     R1,A
   \   0000AD   E8           MOV     A,R0
   \   0000AE   49           ORL     A,R1
   \   0000AF   705D         JNZ     ??osalTimerUpdate_4
   \   0000B1   8E82         MOV     DPL,R6
   \   0000B3   8F83         MOV     DPH,R7
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F8           MOV     R0,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   F9           MOV     R1,A
   \   0000C1   E8           MOV     A,R0
   \   0000C2   49           ORL     A,R1
   \   0000C3   6049         JZ      ??osalTimerUpdate_4
   \   0000C5   8E82         MOV     DPL,R6
   \   0000C7   8F83         MOV     DPH,R7
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   F8           MOV     R0,A
   \   0000CF   A3           INC     DPTR
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   F9           MOV     R1,A
   \   0000D2   E8           MOV     A,R0
   \   0000D3   49           ORL     A,R1
   \   0000D4   6038         JZ      ??osalTimerUpdate_4
    439                {
    440                  // Notify the task of a timeout
    441                  osal_set_event( srchTimer->task_id, srchTimer->event_flag );
   \   0000D6                ; Setup parameters for call to function osal_set_event
   \   0000D6   8E82         MOV     DPL,R6
   \   0000D8   8F83         MOV     DPH,R7
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   FA           MOV     R2,A
   \   0000E0   A3           INC     DPTR
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   FB           MOV     R3,A
   \   0000E3   8E82         MOV     DPL,R6
   \   0000E5   8F83         MOV     DPH,R7
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   F9           MOV     R1,A
   \   0000EF   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   0000F2   E9           MOV     A,R1
    442                  
    443                  // Reload the timer timeout value
    444                  srchTimer->timeout = srchTimer->reloadTimeout;
   \   0000F3   8E82         MOV     DPL,R6
   \   0000F5   8F83         MOV     DPH,R7
   \   0000F7   A3           INC     DPTR
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   F8           MOV     R0,A
   \   000100   A3           INC     DPTR
   \   000101   E0           MOVX    A,@DPTR
   \   000102   F9           MOV     R1,A
   \   000103   8E82         MOV     DPL,R6
   \   000105   8F83         MOV     DPH,R7
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   E8           MOV     A,R0
   \   00010A   F0           MOVX    @DPTR,A
   \   00010B   A3           INC     DPTR
   \   00010C   E9           MOV     A,R1
   \   00010D   F0           MOVX    @DPTR,A
    445                }
    446                
    447                // When timeout or delete (event_flag == 0)
    448                if ( srchTimer->timeout == 0 || srchTimer->event_flag == 0 )
   \                     ??osalTimerUpdate_4:
   \   00010E   8E82         MOV     DPL,R6
   \   000110   8F83         MOV     DPH,R7
   \   000112   A3           INC     DPTR
   \   000113   A3           INC     DPTR
   \   000114   E0           MOVX    A,@DPTR
   \   000115   F8           MOV     R0,A
   \   000116   A3           INC     DPTR
   \   000117   E0           MOVX    A,@DPTR
   \   000118   F9           MOV     R1,A
   \   000119   E8           MOV     A,R0
   \   00011A   49           ORL     A,R1
   \   00011B   6011         JZ      ??osalTimerUpdate_5
   \   00011D   8E82         MOV     DPL,R6
   \   00011F   8F83         MOV     DPH,R7
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   A3           INC     DPTR
   \   000125   E0           MOVX    A,@DPTR
   \   000126   F8           MOV     R0,A
   \   000127   A3           INC     DPTR
   \   000128   E0           MOVX    A,@DPTR
   \   000129   F9           MOV     R1,A
   \   00012A   E8           MOV     A,R0
   \   00012B   49           ORL     A,R1
   \   00012C   704D         JNZ     ??osalTimerUpdate_6
    449                {
    450                  // Take out of list
    451                  if ( prevTimer == NULL )
   \                     ??osalTimerUpdate_5:
   \   00012E   85..82       MOV     DPL,?XSP + 0
   \   000131   85..83       MOV     DPH,?XSP + 1
   \   000134   E0           MOVX    A,@DPTR
   \   000135   F8           MOV     R0,A
   \   000136   A3           INC     DPTR
   \   000137   E0           MOVX    A,@DPTR
   \   000138   F9           MOV     R1,A
   \   000139   E8           MOV     A,R0
   \   00013A   49           ORL     A,R1
   \   00013B   7013         JNZ     ??osalTimerUpdate_7
    452                    timerHead = srchTimer->next;
   \   00013D   8E82         MOV     DPL,R6
   \   00013F   8F83         MOV     DPH,R7
   \   000141   E0           MOVX    A,@DPTR
   \   000142   F8           MOV     R0,A
   \   000143   A3           INC     DPTR
   \   000144   E0           MOVX    A,@DPTR
   \   000145   F9           MOV     R1,A
   \   000146   90....       MOV     DPTR,#timerHead
   \   000149   E8           MOV     A,R0
   \   00014A   F0           MOVX    @DPTR,A
   \   00014B   A3           INC     DPTR
   \   00014C   E9           MOV     A,R1
   \   00014D   F0           MOVX    @DPTR,A
   \   00014E   801C         SJMP    ??osalTimerUpdate_8
    453                  else
    454                    prevTimer->next = srchTimer->next;
   \                     ??osalTimerUpdate_7:
   \   000150   8E82         MOV     DPL,R6
   \   000152   8F83         MOV     DPH,R7
   \   000154   E0           MOVX    A,@DPTR
   \   000155   FA           MOV     R2,A
   \   000156   A3           INC     DPTR
   \   000157   E0           MOVX    A,@DPTR
   \   000158   FB           MOV     R3,A
   \   000159   85..82       MOV     DPL,?XSP + 0
   \   00015C   85..83       MOV     DPH,?XSP + 1
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   F8           MOV     R0,A
   \   000161   A3           INC     DPTR
   \   000162   E0           MOVX    A,@DPTR
   \   000163   F583         MOV     DPH,A
   \   000165   8882         MOV     DPL,R0
   \   000167   EA           MOV     A,R2
   \   000168   F0           MOVX    @DPTR,A
   \   000169   A3           INC     DPTR
   \   00016A   EB           MOV     A,R3
   \   00016B   F0           MOVX    @DPTR,A
    455          
    456                  // Setup to free memory
    457                  freeTimer = srchTimer;
   \                     ??osalTimerUpdate_8:
   \   00016C   8E..         MOV     ?V0,R6
   \   00016E   8F..         MOV     ?V1,R7
    458          
    459                  // Next
    460                  srchTimer = srchTimer->next;
   \   000170   8E82         MOV     DPL,R6
   \   000172   8F83         MOV     DPH,R7
   \   000174   E0           MOVX    A,@DPTR
   \   000175   FE           MOV     R6,A
   \   000176   A3           INC     DPTR
   \   000177   E0           MOVX    A,@DPTR
   \   000178   FF           MOV     R7,A
   \   000179   8014         SJMP    ??osalTimerUpdate_9
    461                }
    462                else
    463                {
    464                  // Get next
    465                  prevTimer = srchTimer;
   \                     ??osalTimerUpdate_6:
   \   00017B   85..82       MOV     DPL,?XSP + 0
   \   00017E   85..83       MOV     DPH,?XSP + 1
   \   000181   EE           MOV     A,R6
   \   000182   F0           MOVX    @DPTR,A
   \   000183   A3           INC     DPTR
   \   000184   EF           MOV     A,R7
   \   000185   F0           MOVX    @DPTR,A
    466                  srchTimer = srchTimer->next;
   \   000186   8E82         MOV     DPL,R6
   \   000188   8F83         MOV     DPH,R7
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   FE           MOV     R6,A
   \   00018C   A3           INC     DPTR
   \   00018D   E0           MOVX    A,@DPTR
   \   00018E   FF           MOV     R7,A
    467                }
    468                
    469                HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osalTimerUpdate_9:
   \   00018F   85....       MOV     ?V2,?V6
   \   000192   E5..         MOV     A,?V6
   \   000194   A2E0         MOV     C,0xE0 /* A   */.0
   \   000196   92AF         MOV     0xa8.7,C
    470                
    471                if ( freeTimer )
   \   000198   E5..         MOV     A,?V0
   \   00019A   45..         ORL     A,?V1
   \   00019C   7003         JNZ     $+5
   \   00019E   02....       LJMP    ??osalTimerUpdate_1 & 0xFFFF
    472                {
    473                  if ( freeTimer->timeout == 0 )
   \   0001A1   85..82       MOV     DPL,?V0
   \   0001A4   85..83       MOV     DPH,?V1
   \   0001A7   A3           INC     DPTR
   \   0001A8   A3           INC     DPTR
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   F8           MOV     R0,A
   \   0001AB   A3           INC     DPTR
   \   0001AC   E0           MOVX    A,@DPTR
   \   0001AD   F9           MOV     R1,A
   \   0001AE   E8           MOV     A,R0
   \   0001AF   49           ORL     A,R1
   \   0001B0   7021         JNZ     ??osalTimerUpdate_10
    474                  {
    475                    osal_set_event( freeTimer->task_id, freeTimer->event_flag );
   \   0001B2                ; Setup parameters for call to function osal_set_event
   \   0001B2   85..82       MOV     DPL,?V0
   \   0001B5   85..83       MOV     DPH,?V1
   \   0001B8   A3           INC     DPTR
   \   0001B9   A3           INC     DPTR
   \   0001BA   A3           INC     DPTR
   \   0001BB   A3           INC     DPTR
   \   0001BC   E0           MOVX    A,@DPTR
   \   0001BD   FA           MOV     R2,A
   \   0001BE   A3           INC     DPTR
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   FB           MOV     R3,A
   \   0001C1   85..82       MOV     DPL,?V0
   \   0001C4   85..83       MOV     DPH,?V1
   \   0001C7   A3           INC     DPTR
   \   0001C8   A3           INC     DPTR
   \   0001C9   A3           INC     DPTR
   \   0001CA   A3           INC     DPTR
   \   0001CB   A3           INC     DPTR
   \   0001CC   A3           INC     DPTR
   \   0001CD   E0           MOVX    A,@DPTR
   \   0001CE   F9           MOV     R1,A
   \   0001CF   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   0001D2   E9           MOV     A,R1
    476                  }
    477                  osal_mem_free( freeTimer );
   \                     ??osalTimerUpdate_10:
   \   0001D3                ; Setup parameters for call to function osal_mem_free
   \   0001D3   AA..         MOV     R2,?V0
   \   0001D5   AB..         MOV     R3,?V1
   \   0001D7   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0001DA   02....       LJMP    ??osalTimerUpdate_1 & 0xFFFF
    478                }
    479              }
    480            }
    481          }
   \                     ??osalTimerUpdate_0:
   \   0001DD   7402         MOV     A,#0x2
   \   0001DF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001E2   7F07         MOV     R7,#0x7
   \   0001E4   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0001E7                REQUIRE _A_IEN0
    482          
    483          #ifdef POWER_SAVING
    484          /*********************************************************************
    485           * @fn      osal_adjust_timers
    486           *
    487           * @brief   Update the timer structures for elapsed ticks.
    488           *
    489           * @param   none
    490           *
    491           * @return  none
    492           *********************************************************************/
    493          void osal_adjust_timers( void )
    494          {
    495            uint16 eTime;
    496          
    497            if ( timerHead != NULL )
    498            {
    499              // Compute elapsed time (msec)
    500              eTime = TimerElapsed() /  TICK_COUNT;
    501          
    502              if ( eTime )
    503                osalTimerUpdate( eTime );
    504            }
    505          }
    506          
    507          /*********************************************************************
    508           * @fn      osal_next_timeout
    509           *
    510           * @brief
    511           *
    512           *   Search timer table to return the lowest timeout value. If the
    513           *   timer list is empty, then the returned timeout will be zero.
    514           *
    515           * @param   none
    516           *
    517           * @return  none
    518           *********************************************************************/
    519          uint16 osal_next_timeout( void )
    520          {
    521            uint16 nextTimeout;
    522            osalTimerRec_t *srchTimer;
    523          
    524            if ( timerHead != NULL )
    525            {
    526              // Head of the timer list
    527              srchTimer = timerHead;
    528              nextTimeout = OSAL_TIMERS_MAX_TIMEOUT;
    529          
    530              // Look for the next timeout timer
    531              while ( srchTimer != NULL )
    532              {
    533                if (srchTimer->timeout < nextTimeout)
    534                {
    535                  nextTimeout = srchTimer->timeout;
    536                }
    537                // Check next timer
    538                srchTimer = srchTimer->next;
    539              }
    540            }
    541            else
    542            {
    543              // No timers
    544              nextTimeout = 0;
    545            }
    546          
    547            return ( nextTimeout );
    548          }
    549          #endif // POWER_SAVING
    550          
    551          /*********************************************************************
    552           * @fn      osal_GetSystemClock()
    553           *
    554           * @brief   Read the local system clock.
    555           *
    556           * @param   none
    557           *
    558           * @return  local clock in milliseconds
    559           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    560          uint32 osal_GetSystemClock( void )
   \                     osal_GetSystemClock:
    561          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    562            return ( osal_systemClock );
   \   000004   90....       MOV     DPTR,#osal_systemClock
   \   000007   12....       LCALL   ?XLOAD_R2345
   \   00000A   D083         POP     DPH
   \   00000C   D082         POP     DPL
   \   00000E   02....       LJMP    ?BRET
    563          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osalTimerInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalTimerInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osalAddTimer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalAddTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osalFindTimer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalFindTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osalDeleteTimer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalDeleteTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_start_timerEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_start_timerEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_start_reload_timer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_start_reload_timer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_stop_timerEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_stop_timerEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_get_timeoutEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_get_timeoutEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_timer_num_active?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_timer_num_active

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osalTimerUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalTimerUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_GetSystemClock?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_GetSystemClock
    564          
    565          /*********************************************************************
    566          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     34   osalAddTimer
        0     18   -> osalFindTimer
        0     18   -> osal_mem_alloc
      2     14   osalDeleteTimer
      0     27   osalFindTimer
      0      9   osalTimerInit
      0     17   osalTimerUpdate
        0     17   -> osal_mem_free
        0     17   -> osal_set_event
      2      0   osal_GetSystemClock
      0     16   osal_get_timeoutEx
        0     16   -> osalFindTimer
      0     16   osal_start_reload_timer
        0     16   -> osalAddTimer
      0     16   osal_start_timerEx
        0     16   -> osalAddTimer
      0     14   osal_stop_timerEx
        0     14   -> osalDeleteTimer
        0     14   -> osalFindTimer
      2      0   osal_timer_num_active


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??osalAddTimer?relay
       6  ??osalDeleteTimer?relay
       6  ??osalFindTimer?relay
       6  ??osalTimerInit?relay
       6  ??osalTimerUpdate?relay
       6  ??osal_GetSystemClock?relay
       6  ??osal_get_timeoutEx?relay
       6  ??osal_start_reload_timer?relay
       6  ??osal_start_timerEx?relay
       6  ??osal_stop_timerEx?relay
       6  ??osal_timer_num_active?relay
       1  _A_IEN0
     275  osalAddTimer
      30  osalDeleteTimer
      74  osalFindTimer
      32  osalTimerInit
     487  osalTimerUpdate
      17  osal_GetSystemClock
      78  osal_get_timeoutEx
      95  osal_start_reload_timer
      69  osal_start_timerEx
      70  osal_stop_timerEx
       4  osal_systemClock
      55  osal_timer_num_active
       2  timerHead

 
 1 282 bytes in segment BANKED_CODE
    66 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     6 bytes in segment XDATA_Z
 
 1 348 bytes of CODE  memory
     0 bytes of DATA  memory (+ 1 byte shared)
     6 bytes of XDATA memory

Errors: none
Warnings: none
