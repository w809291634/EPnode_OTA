###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:46
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\stack\zdo\ZDProfile.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\stack\zdo\ZDProfile.c"
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        XLAB -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\ZDProfile.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\ZDProfile.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2010-10-13 10:54:13 -0700 (Wed, 13 Oct 2010) $
      4            Revision:       $Revision: 24112 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          /*********************************************************************
    113           * TYPEDEFS
    114           */
    115          typedef struct
    116          {
    117            void *next;
    118            uint8 taskID;
    119            uint16 clusterID;
    120          } ZDO_MsgCB_t;
    121          
    122          
    123          /*********************************************************************
    124           * GLOBAL VARIABLES
    125           */
    126          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    128          
    129          /*********************************************************************
    130           * EXTERNAL VARIABLES
    131           */
    132          
    133          extern endPointDesc_t ZDApp_epDesc;
    134          
    135          /*********************************************************************
    136           * EXTERNAL FUNCTIONS
    137           */
    138          
    139          /*********************************************************************
    140           * LOCAL FUNCTIONS
    141           */
    142          
    143          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    144          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    145          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    146          
    147          /*********************************************************************
    148           * LOCAL VARIABLES
    149           */
    150          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    152          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I
    153          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    156          
    157          /*********************************************************************
    158           * ZDO Message Processing table
    159           */
    160          
    161          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    162          
    163          typedef struct
    164          {
    165            uint16                clusterID;
    166            pfnZDPMsgProcessor    pFn;
    167          } zdpMsgProcItem_t;
    168          

   \                                 In  segment CODE_C, align 1
    169          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0000         DW 0
   \   000002   ....         DW ??zdpProcessAddrReq?relay
   \   000004   1300         DW 19
   \   000006   ....         DW ??ZDO_ProcessDeviceAnnce?relay
   \   000008   0100         DW 1
   \   00000A   ....         DW ??zdpProcessAddrReq?relay
   \   00000C   0200         DW 2
   \   00000E   ....         DW ??ZDO_ProcessNodeDescReq?relay
   \   000010   0300         DW 3
   \   000012   ....         DW ??ZDO_ProcessPowerDescReq?relay
   \   000014   0400         DW 4
   \   000016   ....         DW ??ZDO_ProcessSimpleDescReq?relay
   \   000018   0500         DW 5
   \   00001A   ....         DW ??ZDO_ProcessActiveEPReq?relay
   \   00001C   0600         DW 6
   \   00001E   ....         DW ??ZDO_ProcessMatchDescReq?relay
   \   000020   FFFF         DW 65535
   \   000022   0000         DW 0H
    170          {
    171          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    172            // These aren't processed by sleeping end devices.
    173            { NWK_addr_req,           zdpProcessAddrReq },
    174            { Device_annce,           ZDO_ProcessDeviceAnnce },
    175          #endif
    176            { IEEE_addr_req,          zdpProcessAddrReq },
    177            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    178            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    179            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    180            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    181            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    182          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    183            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    184          #endif
    185          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    186            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    187          #endif
    188          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    189            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    190          #endif
    191          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    192            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    193          #endif
    194          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    195            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    196          #endif
    197          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    198            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    199          #endif
    200          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    201            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    202          #endif
    203          #if defined ( ZDO_USERDESC_RESPONSE )
    204            { User_Desc_req,          ZDO_ProcessUserDescReq },
    205          #endif
    206          #if defined ( ZDO_USERDESCSET_RESPONSE )
    207            { User_Desc_set,          ZDO_ProcessUserDescSet },
    208          #endif
    209          #if defined ( ZDO_SERVERDISC_RESPONSE )
    210            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    211          #endif
    212            {0xFFFF, NULL} // Last
    213          };
    214          
    215          /*********************************************************************
    216           * @fn          fillAndSend
    217           *
    218           * @brief       Combined to reduce space
    219           *
    220           * @param
    221           * @param
    222           *
    223           * @return      afStatus_t
    224           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    225          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    226          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
   \   000012   89..         MOV     ?V6,R1
   \   000014   741B         MOV     A,#0x1b
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FE           MOV     R6,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FF           MOV     R7,A
    227            afAddrType_t afAddr;
    228          
    229            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \   00001E                ; Setup parameters for call to function osal_memset
   \   00001E   7C0C         MOV     R4,#0xc
   \   000020   7D00         MOV     R5,#0x0
   \   000022   7900         MOV     R1,#0x0
   \   000024   AA..         MOV     R2,?XSP + 0
   \   000026   AB..         MOV     R3,?XSP + 1
   \   000028   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
    230            ZADDR_TO_AFADDR( addr, afAddr );
   \   00002B   90....       MOV     DPTR,#ZDP_AF_ENDPOINT
   \   00002E   E4           CLR     A
   \   00002F   93           MOVC    A,@A+DPTR
   \   000030   C0E0         PUSH    A
   \   000032   7409         MOV     A,#0x9
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   D0E0         POP     A
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   85..82       MOV     DPL,?V0
   \   00003D   85..83       MOV     DPH,?V1
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   C0E0         PUSH    A
   \   00004B   7408         MOV     A,#0x8
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   D0E0         POP     A
   \   000052   F0           MOVX    @DPTR,A
   \   000053   85..82       MOV     DPL,?V0
   \   000056   85..83       MOV     DPH,?V1
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F8           MOV     R0,A
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F9           MOV     R1,A
   \   00005E   85..82       MOV     DPL,?XSP + 0
   \   000061   85..83       MOV     DPH,?XSP + 1
   \   000064   E8           MOV     A,R0
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   E9           MOV     A,R1
   \   000068   F0           MOVX    @DPTR,A
    231          
    232            *(ZDP_TmpBuf-1) = *transSeq;
   \   000069   85..82       MOV     DPL,?V2
   \   00006C   85..83       MOV     DPH,?V3
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   C0E0         PUSH    A
   \   000072   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F8           MOV     R0,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   C8           XCH     A,R0
   \   00007A   24FF         ADD     A,#-0x1
   \   00007C   F582         MOV     DPL,A
   \   00007E   C8           XCH     A,R0
   \   00007F   34FF         ADDC    A,#-0x1
   \   000081   F583         MOV     DPH,A
   \   000083   D0E0         POP     A
   \   000085   F0           MOVX    @DPTR,A
    233          
    234            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    235                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    236                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \   000086                ; Setup parameters for call to function AF_DataRequest
   \   000086   75..1E       MOV     ?V4,#0x1e
   \   000089   78..         MOV     R0,#?V4
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008E   78..         MOV     R0,#?V2
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000093   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000096   E0           MOVX    A,@DPTR
   \   000097   24FF         ADD     A,#-0x1
   \   000099   F5..         MOV     ?V4,A
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   34FF         ADDC    A,#-0x1
   \   00009F   F5..         MOV     ?V5,A
   \   0000A1   78..         MOV     R0,#?V4
   \   0000A3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A6   A8..         MOV     R0,?V6
   \   0000A8   7900         MOV     R1,#0x0
   \   0000AA   E8           MOV     A,R0
   \   0000AB   2401         ADD     A,#0x1
   \   0000AD   F5..         MOV     ?V4,A
   \   0000AF   E4           CLR     A
   \   0000B0   39           ADDC    A,R1
   \   0000B1   F5..         MOV     ?V5,A
   \   0000B3   78..         MOV     R0,#?V4
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B8   8E..         MOV     ?V4,R6
   \   0000BA   8F..         MOV     ?V5,R7
   \   0000BC   78..         MOV     R0,#?V4
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C1   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F9           MOV     R1,A
   \   0000C6   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   0000C8   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   0000CA   7409         MOV     A,#0x9
   \   0000CC   12....       LCALL   ?XSTACK_DISP101_8
   \   0000CF   12....       LCALL   ??AF_DataRequest?relay; Banked call to: AF_DataRequest
   \   0000D2   7409         MOV     A,#0x9
   \   0000D4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D7   740C         MOV     A,#0xc
   \   0000D9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DC   7F07         MOV     R7,#0x7
   \   0000DE   02....       LJMP    ?BANKED_LEAVE_XDATA
    237          
    238          }
    239          
    240          /*********************************************************************
    241           * @fn          ZDP_SendData
    242           *
    243           * @brief       This builds and send a request message that has
    244           *              NWKAddrOfInterest as its only parameter.
    245           *
    246           * @param       dstAddr - destination address
    247           * @param       cmd - clusterID
    248           * @param       dataLen - number of bytes of data
    249           * @param       data - pointer to the data
    250           * @param       SecurityEnable - Security Options
    251           *
    252           * @return      afStatus_t
    253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    254          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    255                                  byte len, uint8 *buf, byte SecurityEnable )
    256          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   EC           MOV     A,R4
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   ED           MOV     A,R5
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   89..         MOV     ?V6,R1
   \   000021   7414         MOV     A,#0x14
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V4,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V5,A
   \   00002D   7416         MOV     A,#0x16
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F5..         MOV     ?V2,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V3,A
    257            uint8 *pBuf = ZDP_TmpBuf;
   \   000039   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F5..         MOV     ?V0,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F5..         MOV     ?V1,A
    258            byte cnt = len;
   \   000043   AE..         MOV     R6,?V6
    259          
    260            while ( cnt-- )
   \                     ??ZDP_SendData_0:
   \   000045   EE           MOV     A,R6
   \   000046   FF           MOV     R7,A
   \   000047   74FF         MOV     A,#-0x1
   \   000049   2F           ADD     A,R7
   \   00004A   FE           MOV     R6,A
   \   00004B   EF           MOV     A,R7
   \   00004C   602E         JZ      ??ZDP_SendData_1
    261            {
    262              *pBuf++ = *buf++;
   \   00004E   85..82       MOV     DPL,?V2
   \   000051   85..83       MOV     DPH,?V3
   \   000054   E0           MOVX    A,@DPTR
   \   000055   C0E0         PUSH    A
   \   000057   85..82       MOV     DPL,?V0
   \   00005A   85..83       MOV     DPH,?V1
   \   00005D   D0E0         POP     A
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   85..82       MOV     DPL,?V2
   \   000063   85..83       MOV     DPH,?V3
   \   000066   A3           INC     DPTR
   \   000067   8582..       MOV     ?V2,DPL
   \   00006A   8583..       MOV     ?V3,DPH
   \   00006D   85..82       MOV     DPL,?V0
   \   000070   85..83       MOV     DPH,?V1
   \   000073   A3           INC     DPTR
   \   000074   8582..       MOV     ?V0,DPL
   \   000077   8583..       MOV     ?V1,DPH
   \   00007A   80C9         SJMP    ??ZDP_SendData_0
    263            }
    264          
    265            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len, ((SecurityEnable) ? AF_EN_SECURITY : 0) );
   \                     ??ZDP_SendData_1:
   \   00007C   7418         MOV     A,#0x18
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   E0           MOVX    A,@DPTR
   \   000082   6004         JZ      ??ZDP_SendData_2
   \   000084   7440         MOV     A,#0x40
   \   000086   8002         SJMP    ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   000088   7400         MOV     A,#0x0
   \                     ??ZDP_SendData_3:
   \   00008A   90....       MOV     DPTR,#ZDP_TxOptions
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E                ; Setup parameters for call to function fillAndSend
   \   00008E   78..         MOV     R0,#?V4
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000093   A9..         MOV     R1,?V6
   \   000095   7402         MOV     A,#0x2
   \   000097   12....       LCALL   ?XSTACK_DISP0_8
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   FC           MOV     R4,A
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   FD           MOV     R5,A
   \   00009F   7404         MOV     A,#0x4
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FA           MOV     R2,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   FB           MOV     R3,A
   \   0000A9   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0000AC   7402         MOV     A,#0x2
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B1   E9           MOV     A,R1
   \   0000B2   F5..         MOV     ?V7,A
   \   0000B4   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000B7   7400         MOV     A,#0x0
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   A9..         MOV     R1,?V7
   \   0000BC   7404         MOV     A,#0x4
   \   0000BE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C1   7F08         MOV     R7,#0x8
   \   0000C3   02....       LJMP    ?BANKED_LEAVE_XDATA
    266          }
    267          
    268          /*********************************************************************
    269           * @fn          ZDP_NWKAddrOfInterestReq
    270           *
    271           * @brief       This builds and send a request message that has
    272           *              NWKAddrOfInterest as its only parameter.
    273           *
    274           * @param       dstAddr - destination address
    275           * @param       nwkAddr - 16 bit address
    276           * @param       SecurityEnable - Security Options
    277           *
    278           * @return      afStatus_t
    279           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    280          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    281                                               byte cmd, byte SecurityEnable )
    282          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   89..         MOV     ?V0,R1
    283            (void)SecurityEnable;  // Intentionally unreferenced parameter
    284          
    285            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   00000F   EE           MOV     A,R6
   \   000010   C0E0         PUSH    A
   \   000012   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F8           MOV     R0,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F583         MOV     DPH,A
   \   00001B   8882         MOV     DPL,R0
   \   00001D   D0E0         POP     A
   \   00001F   F0           MOVX    @DPTR,A
    286            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \   000020   EE           MOV     A,R6
   \   000021   F8           MOV     R0,A
   \   000022   EF           MOV     A,R7
   \   000023   F9           MOV     R1,A
   \   000024   E4           CLR     A
   \   000025   C9           XCH     A,R1
   \   000026   F8           MOV     R0,A
   \   000027   E8           MOV     A,R0
   \   000028   C0E0         PUSH    A
   \   00002A   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F8           MOV     R0,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F583         MOV     DPH,A
   \   000033   8882         MOV     DPL,R0
   \   000035   A3           INC     DPTR
   \   000036   D0E0         POP     A
   \   000038   F0           MOVX    @DPTR,A
    287          
    288            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \   000039                ; Setup parameters for call to function fillAndSend
   \   000039   85....       MOV     ?V4,?V0
   \   00003C   75..00       MOV     ?V5,#0x0
   \   00003F   78..         MOV     R0,#?V4
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   7902         MOV     R1,#0x2
   \   000046   AC..         MOV     R4,?V2
   \   000048   AD..         MOV     R5,?V3
   \   00004A   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00004C   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00004E   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000051   7402         MOV     A,#0x2
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
   \   000056   7F06         MOV     R7,#0x6
   \   000058   02....       LJMP    ?BANKED_LEAVE_XDATA
    289          }
    290          
    291          /*********************************************************************
    292           * Address Requests
    293           */
    294          
    295          /*********************************************************************
    296           * @fn          ZDP_NwkAddrReq
    297           *
    298           * @brief       This builds and send a NWK_addr_req message.  This
    299           *              function sends a broadcast message looking for a 16
    300           *              bit address with a 64 bit address as bait.
    301           *
    302           * @param       IEEEAddress - looking for this device
    303           * @param       SecurityEnable - Security Options
    304           *
    305           * @return      afStatus_t
    306           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    307          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    308                                     byte StartIndex, byte SecurityEnable )
    309          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V6,R2
   \   00000C   8B..         MOV     ?V7,R3
   \   00000E   89..         MOV     ?V1,R1
   \   000010   8C..         MOV     ?V0,R4
   \   000012   8D..         MOV     ?V5,R5
    310            uint8 *pBuf = ZDP_TmpBuf;
   \   000014   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FF           MOV     R7,A
    311            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
   \   00001C   75..0A       MOV     ?V4,#0xa
    312            zAddrType_t dstAddr;
    313          
    314            (void)SecurityEnable;  // Intentionally unreferenced parameter
    315          
    316            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \   00001F                ; Setup parameters for call to function sAddrExtCmp
   \   00001F   AC..         MOV     R4,?V6
   \   000021   AD..         MOV     R5,?V7
   \   000023   7A..         MOV     R2,#saveExtAddr & 0xff
   \   000025   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   000027   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   00002A   E9           MOV     A,R1
   \   00002B   7017         JNZ     ??ZDP_NwkAddrReq_0
    317            {
    318              dstAddr.addrMode = AddrBroadcast;
   \   00002D   7408         MOV     A,#0x8
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   740F         MOV     A,#0xf
   \   000034   F0           MOVX    @DPTR,A
    319              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000035   85..82       MOV     DPL,?XSP + 0
   \   000038   85..83       MOV     DPH,?XSP + 1
   \   00003B   74FD         MOV     A,#-0x3
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   74FF         MOV     A,#-0x1
   \   000041   F0           MOVX    @DPTR,A
   \   000042   801B         SJMP    ??ZDP_NwkAddrReq_1
    320            }
    321            else
    322            {
    323              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   000044   7408         MOV     A,#0x8
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   7402         MOV     A,#0x2
   \   00004B   F0           MOVX    @DPTR,A
    324              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   00004C   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F8           MOV     R0,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   E8           MOV     A,R0
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \   00005D   E9           MOV     A,R1
   \   00005E   F0           MOVX    @DPTR,A
    325            }
    326          
    327            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \                     ??ZDP_NwkAddrReq_1:
   \   00005F                ; Setup parameters for call to function sAddrExtCpy
   \   00005F   AC..         MOV     R4,?V6
   \   000061   AD..         MOV     R5,?V7
   \   000063   EE           MOV     A,R6
   \   000064   FA           MOV     R2,A
   \   000065   EF           MOV     A,R7
   \   000066   FB           MOV     R3,A
   \   000067   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   00006A   8A..         MOV     ?V2,R2
   \   00006C   8B..         MOV     ?V3,R3
   \   00006E   AE..         MOV     R6,?V2
   \   000070   AF..         MOV     R7,?V3
    328          
    329            *pBuf++ = ReqType;
   \   000072   E5..         MOV     A,?V1
   \   000074   C0E0         PUSH    A
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   D0E0         POP     A
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   A3           INC     DPTR
   \   000082   AE82         MOV     R6,DPL
   \   000084   AF83         MOV     R7,DPH
    330            *pBuf++ = StartIndex;
   \   000086   E5..         MOV     A,?V0
   \   000088   C0E0         PUSH    A
   \   00008A   8E82         MOV     DPL,R6
   \   00008C   8F83         MOV     DPH,R7
   \   00008E   D0E0         POP     A
   \   000090   F0           MOVX    @DPTR,A
   \   000091   8E82         MOV     DPL,R6
   \   000093   8F83         MOV     DPH,R7
   \   000095   A3           INC     DPTR
   \   000096   AE82         MOV     R6,DPL
   \   000098   AF83         MOV     R7,DPH
    331          
    332            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   00009A                ; Setup parameters for call to function fillAndSend
   \   00009A   E4           CLR     A
   \   00009B   F5..         MOV     ?V2,A
   \   00009D   F5..         MOV     ?V3,A
   \   00009F   78..         MOV     R0,#?V2
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A4   A9..         MOV     R1,?V4
   \   0000A6   7402         MOV     A,#0x2
   \   0000A8   12....       LCALL   ?XSTACK_DISP102_8
   \   0000AB   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000AD   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000AF   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0000B2   7402         MOV     A,#0x2
   \   0000B4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B7   7409         MOV     A,#0x9
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BC   7F08         MOV     R7,#0x8
   \   0000BE   02....       LJMP    ?BANKED_LEAVE_XDATA
    333          }
    334          
    335          /*********************************************************************
    336           * @fn          ZDP_IEEEAddrReq
    337           *
    338           * @brief       This builds and send a IEEE_addr_req message.  This
    339           *              function sends a unicast message looking for a 64
    340           *              bit IEEE address with a 16 bit address as bait.
    341           *
    342           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    343           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    344           * @param       SecurityEnable - Security Options
    345           *
    346           * @return      afStatus_t
    347           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    348          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    349                                      byte StartIndex, byte SecurityEnable )
    350          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   89..         MOV     ?V6,R1
   \   000010   8C..         MOV     ?V2,R4
   \   000012   8D..         MOV     ?V7,R5
    351            uint8 *pBuf = ZDP_TmpBuf;
   \   000014   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FF           MOV     R7,A
    352            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
   \   00001C   75..04       MOV     ?V3,#0x4
    353            zAddrType_t dstAddr;
    354          
    355            (void)SecurityEnable;  // Intentionally unreferenced parameter
    356          
    357            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00001F   7408         MOV     A,#0x8
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   7402         MOV     A,#0x2
   \   000026   F0           MOVX    @DPTR,A
    358            dstAddr.addr.shortAddr = shortAddr;
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   E5..         MOV     A,?V0
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   E5..         MOV     A,?V1
   \   000033   F0           MOVX    @DPTR,A
    359          
    360            *pBuf++ = LO_UINT16( shortAddr );
   \   000034   E5..         MOV     A,?V0
   \   000036   C0E0         PUSH    A
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   D0E0         POP     A
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   A3           INC     DPTR
   \   000044   AE82         MOV     R6,DPL
   \   000046   AF83         MOV     R7,DPH
    361            *pBuf++ = HI_UINT16( shortAddr );
   \   000048   A8..         MOV     R0,?V0
   \   00004A   A9..         MOV     R1,?V1
   \   00004C   E4           CLR     A
   \   00004D   C9           XCH     A,R1
   \   00004E   F8           MOV     R0,A
   \   00004F   E8           MOV     A,R0
   \   000050   C0E0         PUSH    A
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   D0E0         POP     A
   \   000058   F0           MOVX    @DPTR,A
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   A3           INC     DPTR
   \   00005E   AE82         MOV     R6,DPL
   \   000060   AF83         MOV     R7,DPH
    362          
    363            *pBuf++ = ReqType;
   \   000062   E5..         MOV     A,?V6
   \   000064   C0E0         PUSH    A
   \   000066   8E82         MOV     DPL,R6
   \   000068   8F83         MOV     DPH,R7
   \   00006A   D0E0         POP     A
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   A3           INC     DPTR
   \   000072   AE82         MOV     R6,DPL
   \   000074   AF83         MOV     R7,DPH
    364            *pBuf++ = StartIndex;
   \   000076   E5..         MOV     A,?V2
   \   000078   C0E0         PUSH    A
   \   00007A   8E82         MOV     DPL,R6
   \   00007C   8F83         MOV     DPH,R7
   \   00007E   D0E0         POP     A
   \   000080   F0           MOVX    @DPTR,A
   \   000081   8E82         MOV     DPL,R6
   \   000083   8F83         MOV     DPH,R7
   \   000085   A3           INC     DPTR
   \   000086   AE82         MOV     R6,DPL
   \   000088   AF83         MOV     R7,DPH
    365          
    366            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   00008A                ; Setup parameters for call to function fillAndSend
   \   00008A   75..01       MOV     ?V4,#0x1
   \   00008D   75..00       MOV     ?V5,#0x0
   \   000090   78..         MOV     R0,#?V4
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000095   A9..         MOV     R1,?V3
   \   000097   7402         MOV     A,#0x2
   \   000099   12....       LCALL   ?XSTACK_DISP102_8
   \   00009C   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00009E   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000A0   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A8   7409         MOV     A,#0x9
   \   0000AA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AD   7F08         MOV     R7,#0x8
   \   0000AF   02....       LJMP    ?BANKED_LEAVE_XDATA
    367          }
    368          
    369          /*********************************************************************
    370           * @fn          ZDP_MatchDescReq
    371           *
    372           * @brief       This builds and send a Match_Desc_req message.  This
    373           *              function sends a broadcast or unicast message
    374           *              requesting the list of endpoint/interfaces that
    375           *              match profile ID and cluster IDs.
    376           *
    377           * @param       dstAddr - destination address
    378           * @param       nwkAddr - network address of interest
    379           * @param       ProfileID - Profile ID
    380           * @param       NumInClusters - number of input clusters
    381           * @param       InClusterList - input cluster ID list
    382           * @param       NumOutClusters - number of output clusters
    383           * @param       OutClusterList - output cluster ID list
    384           * @param       SecurityEnable - Security Options
    385           *
    386           * @return      afStatus_t
    387           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    388          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    389                                          uint16 ProfileID,
    390                                          byte NumInClusters, cId_t *InClusterList,
    391                                          byte NumOutClusters, cId_t *OutClusterList,
    392                                          byte SecurityEnable )
    393          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   E9           MOV     A,R1
   \   000015   C0E0         PUSH    A
   \   000017   7401         MOV     A,#0x1
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   D0E0         POP     A
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   8C..         MOV     ?V0,R4
   \   000021   8D..         MOV     ?V1,R5
   \   000023   7414         MOV     A,#0x14
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V2,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V3,A
   \   00002F   7418         MOV     A,#0x18
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V7,A
    394            uint8 *pBuf = ZDP_TmpBuf;
   \   000037   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   FE           MOV     R6,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FF           MOV     R7,A
    395            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    396            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
   \   00003F   85..82       MOV     DPL,?XSP + 0
   \   000042   85..83       MOV     DPH,?XSP + 1
   \   000045   7406         MOV     A,#0x6
   \   000047   F0           MOVX    @DPTR,A
    397          
    398            (void)SecurityEnable;  // Intentionally unreferenced parameter
    399          
    400            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \   000048   75F002       MOV     B,#0x2
   \   00004B   7401         MOV     A,#0x1
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   E0           MOVX    A,@DPTR
   \   000051   FA           MOV     R2,A
   \   000052   7B00         MOV     R3,#0x0
   \   000054   A8..         MOV     R0,?V7
   \   000056   7900         MOV     R1,#0x0
   \   000058   EA           MOV     A,R2
   \   000059   28           ADD     A,R0
   \   00005A   F8           MOV     R0,A
   \   00005B   EB           MOV     A,R3
   \   00005C   39           ADDC    A,R1
   \   00005D   F9           MOV     R1,A
   \   00005E   E8           MOV     A,R0
   \   00005F   A4           MUL     AB
   \   000060   F8           MOV     R0,A
   \   000061   85..82       MOV     DPL,?XSP + 0
   \   000064   85..83       MOV     DPH,?XSP + 1
   \   000067   E0           MOVX    A,@DPTR
   \   000068   28           ADD     A,R0
   \   000069   F0           MOVX    @DPTR,A
    401          
    402            if ( len >= ZDP_BUF_SZ-1 )
   \   00006A   85..82       MOV     DPL,?XSP + 0
   \   00006D   85..83       MOV     DPH,?XSP + 1
   \   000070   E0           MOVX    A,@DPTR
   \   000071   C3           CLR     C
   \   000072   944F         SUBB    A,#0x4f
   \   000074   4005         JC      ??ZDP_MatchDescReq_0
    403            {
    404              return afStatus_MEM_FAIL;
   \   000076   7910         MOV     R1,#0x10
   \   000078   02....       LJMP    ??ZDP_MatchDescReq_1 & 0xFFFF
    405            }
    406          
    407            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    408            // this command to 0xFFFF.  So, here we will filter this and replace 
    409            // with 0xFFFD to only send to devices with RX ON.  This includes the 
    410            // network address of interest.
    411            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    412                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   00007B   7402         MOV     A,#0x2
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F8           MOV     R0,A
   \   000082   A3           INC     DPTR
   \   000083   E0           MOVX    A,@DPTR
   \   000084   C8           XCH     A,R0
   \   000085   2408         ADD     A,#0x8
   \   000087   F582         MOV     DPL,A
   \   000089   C8           XCH     A,R0
   \   00008A   3400         ADDC    A,#0x0
   \   00008C   F583         MOV     DPH,A
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   640F         XRL     A,#0xf
   \   000091   6018         JZ      ??ZDP_MatchDescReq_2
   \   000093   7402         MOV     A,#0x2
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F8           MOV     R0,A
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   C8           XCH     A,R0
   \   00009D   2408         ADD     A,#0x8
   \   00009F   F582         MOV     DPL,A
   \   0000A1   C8           XCH     A,R0
   \   0000A2   3400         ADDC    A,#0x0
   \   0000A4   F583         MOV     DPH,A
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   6402         XRL     A,#0x2
   \   0000A9   702C         JNZ     ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   0000AB   7402         MOV     A,#0x2
   \   0000AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   F8           MOV     R0,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F583         MOV     DPH,A
   \   0000B6   8882         MOV     DPL,R0
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   64FF         XRL     A,#0xff
   \   0000BB   7004         JNZ     ??ZDP_MatchDescReq_4
   \   0000BD   A3           INC     DPTR
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   64FF         XRL     A,#0xff
   \                     ??ZDP_MatchDescReq_4:
   \   0000C1   7014         JNZ     ??ZDP_MatchDescReq_3
    413            {
    414              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   0000C3   7402         MOV     A,#0x2
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   F8           MOV     R0,A
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   F583         MOV     DPH,A
   \   0000CE   8882         MOV     DPL,R0
   \   0000D0   74FD         MOV     A,#-0x3
   \   0000D2   F0           MOVX    @DPTR,A
   \   0000D3   A3           INC     DPTR
   \   0000D4   74FF         MOV     A,#-0x1
   \   0000D6   F0           MOVX    @DPTR,A
    415            }
    416            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   0000D7   74FF         MOV     A,#-0x1
   \   0000D9   65..         XRL     A,?V0
   \   0000DB   7004         JNZ     ??ZDP_MatchDescReq_5
   \   0000DD   74FF         MOV     A,#-0x1
   \   0000DF   65..         XRL     A,?V1
   \                     ??ZDP_MatchDescReq_5:
   \   0000E1   7006         JNZ     ??ZDP_MatchDescReq_6
    417            {
    418              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   0000E3   75..FD       MOV     ?V0,#-0x3
   \   0000E6   75..FF       MOV     ?V1,#-0x1
    419            }
    420            
    421            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   0000E9   E5..         MOV     A,?V0
   \   0000EB   C0E0         PUSH    A
   \   0000ED   8E82         MOV     DPL,R6
   \   0000EF   8F83         MOV     DPH,R7
   \   0000F1   D0E0         POP     A
   \   0000F3   F0           MOVX    @DPTR,A
   \   0000F4   8E82         MOV     DPL,R6
   \   0000F6   8F83         MOV     DPH,R7
   \   0000F8   A3           INC     DPTR
   \   0000F9   AE82         MOV     R6,DPL
   \   0000FB   AF83         MOV     R7,DPH
    422            *pBuf++ = HI_UINT16( nwkAddr );
   \   0000FD   A8..         MOV     R0,?V0
   \   0000FF   A9..         MOV     R1,?V1
   \   000101   E4           CLR     A
   \   000102   C9           XCH     A,R1
   \   000103   F8           MOV     R0,A
   \   000104   E8           MOV     A,R0
   \   000105   C0E0         PUSH    A
   \   000107   8E82         MOV     DPL,R6
   \   000109   8F83         MOV     DPH,R7
   \   00010B   D0E0         POP     A
   \   00010D   F0           MOVX    @DPTR,A
   \   00010E   8E82         MOV     DPL,R6
   \   000110   8F83         MOV     DPH,R7
   \   000112   A3           INC     DPTR
   \   000113   AE82         MOV     R6,DPL
   \   000115   AF83         MOV     R7,DPH
    423          
    424            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \   000117   E5..         MOV     A,?V2
   \   000119   C0E0         PUSH    A
   \   00011B   8E82         MOV     DPL,R6
   \   00011D   8F83         MOV     DPH,R7
   \   00011F   D0E0         POP     A
   \   000121   F0           MOVX    @DPTR,A
   \   000122   8E82         MOV     DPL,R6
   \   000124   8F83         MOV     DPH,R7
   \   000126   A3           INC     DPTR
   \   000127   AE82         MOV     R6,DPL
   \   000129   AF83         MOV     R7,DPH
    425            *pBuf++ = HI_UINT16( ProfileID );
   \   00012B   A8..         MOV     R0,?V2
   \   00012D   A9..         MOV     R1,?V3
   \   00012F   E4           CLR     A
   \   000130   C9           XCH     A,R1
   \   000131   F8           MOV     R0,A
   \   000132   E8           MOV     A,R0
   \   000133   C0E0         PUSH    A
   \   000135   8E82         MOV     DPL,R6
   \   000137   8F83         MOV     DPH,R7
   \   000139   D0E0         POP     A
   \   00013B   F0           MOVX    @DPTR,A
   \   00013C   8E82         MOV     DPL,R6
   \   00013E   8F83         MOV     DPH,R7
   \   000140   A3           INC     DPTR
   \   000141   AE82         MOV     R6,DPL
   \   000143   AF83         MOV     R7,DPH
    426          
    427            *pBuf++ = NumInClusters; // Input cluster list
   \   000145   7401         MOV     A,#0x1
   \   000147   12....       LCALL   ?XSTACK_DISP0_8
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   C0E0         PUSH    A
   \   00014D   8E82         MOV     DPL,R6
   \   00014F   8F83         MOV     DPH,R7
   \   000151   D0E0         POP     A
   \   000153   F0           MOVX    @DPTR,A
   \   000154   8E82         MOV     DPL,R6
   \   000156   8F83         MOV     DPH,R7
   \   000158   A3           INC     DPTR
   \   000159   AE82         MOV     R6,DPL
   \   00015B   AF83         MOV     R7,DPH
    428            if ( NumInClusters )
   \   00015D   7401         MOV     A,#0x1
   \   00015F   12....       LCALL   ?XSTACK_DISP0_8
   \   000162   E0           MOVX    A,@DPTR
   \   000163   7003         JNZ     $+5
   \   000165   02....       LJMP    ??ZDP_MatchDescReq_7 & 0xFFFF
    429            {
    430              for (i=0; i<NumInClusters; ++i)  {
   \   000168   75..00       MOV     ?V6,#0x0
   \                     ??ZDP_MatchDescReq_8:
   \   00016B   7401         MOV     A,#0x1
   \   00016D   12....       LCALL   ?XSTACK_DISP0_8
   \   000170   E0           MOVX    A,@DPTR
   \   000171   F8           MOV     R0,A
   \   000172   E5..         MOV     A,?V6
   \   000174   C3           CLR     C
   \   000175   98           SUBB    A,R0
   \   000176   4003         JC      $+5
   \   000178   02....       LJMP    ??ZDP_MatchDescReq_7 & 0xFFFF
    431                *pBuf++ = LO_UINT16( InClusterList[i] );
   \   00017B   A8..         MOV     R0,?V6
   \   00017D   7900         MOV     R1,#0x0
   \   00017F   E8           MOV     A,R0
   \   000180   75F002       MOV     B,#0x2
   \   000183   A4           MUL     AB
   \   000184   C8           XCH     A,R0
   \   000185   AAF0         MOV     R2,B
   \   000187   75F000       MOV     B,#0x0
   \   00018A   A4           MUL     AB
   \   00018B   2A           ADD     A,R2
   \   00018C   FA           MOV     R2,A
   \   00018D   75F002       MOV     B,#0x2
   \   000190   E9           MOV     A,R1
   \   000191   A4           MUL     AB
   \   000192   2A           ADD     A,R2
   \   000193   F9           MOV     R1,A
   \   000194   7416         MOV     A,#0x16
   \   000196   12....       LCALL   ?XSTACK_DISP0_8
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   28           ADD     A,R0
   \   00019B   FA           MOV     R2,A
   \   00019C   A3           INC     DPTR
   \   00019D   E0           MOVX    A,@DPTR
   \   00019E   39           ADDC    A,R1
   \   00019F   8A82         MOV     DPL,R2
   \   0001A1   F583         MOV     DPH,A
   \   0001A3   E0           MOVX    A,@DPTR
   \   0001A4   F8           MOV     R0,A
   \   0001A5   A3           INC     DPTR
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   F9           MOV     R1,A
   \   0001A8   E8           MOV     A,R0
   \   0001A9   C0E0         PUSH    A
   \   0001AB   8E82         MOV     DPL,R6
   \   0001AD   8F83         MOV     DPH,R7
   \   0001AF   D0E0         POP     A
   \   0001B1   F0           MOVX    @DPTR,A
   \   0001B2   8E82         MOV     DPL,R6
   \   0001B4   8F83         MOV     DPH,R7
   \   0001B6   A3           INC     DPTR
   \   0001B7   AE82         MOV     R6,DPL
   \   0001B9   AF83         MOV     R7,DPH
    432                *pBuf++ = HI_UINT16( InClusterList[i] );
   \   0001BB   A8..         MOV     R0,?V6
   \   0001BD   7900         MOV     R1,#0x0
   \   0001BF   E8           MOV     A,R0
   \   0001C0   75F002       MOV     B,#0x2
   \   0001C3   A4           MUL     AB
   \   0001C4   C8           XCH     A,R0
   \   0001C5   AAF0         MOV     R2,B
   \   0001C7   75F000       MOV     B,#0x0
   \   0001CA   A4           MUL     AB
   \   0001CB   2A           ADD     A,R2
   \   0001CC   FA           MOV     R2,A
   \   0001CD   75F002       MOV     B,#0x2
   \   0001D0   E9           MOV     A,R1
   \   0001D1   A4           MUL     AB
   \   0001D2   2A           ADD     A,R2
   \   0001D3   F9           MOV     R1,A
   \   0001D4   7416         MOV     A,#0x16
   \   0001D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D9   E0           MOVX    A,@DPTR
   \   0001DA   28           ADD     A,R0
   \   0001DB   FA           MOV     R2,A
   \   0001DC   A3           INC     DPTR
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   39           ADDC    A,R1
   \   0001DF   8A82         MOV     DPL,R2
   \   0001E1   F583         MOV     DPH,A
   \   0001E3   E0           MOVX    A,@DPTR
   \   0001E4   F8           MOV     R0,A
   \   0001E5   A3           INC     DPTR
   \   0001E6   E0           MOVX    A,@DPTR
   \   0001E7   F9           MOV     R1,A
   \   0001E8   E4           CLR     A
   \   0001E9   C9           XCH     A,R1
   \   0001EA   F8           MOV     R0,A
   \   0001EB   E8           MOV     A,R0
   \   0001EC   C0E0         PUSH    A
   \   0001EE   8E82         MOV     DPL,R6
   \   0001F0   8F83         MOV     DPH,R7
   \   0001F2   D0E0         POP     A
   \   0001F4   F0           MOVX    @DPTR,A
   \   0001F5   8E82         MOV     DPL,R6
   \   0001F7   8F83         MOV     DPH,R7
   \   0001F9   A3           INC     DPTR
   \   0001FA   AE82         MOV     R6,DPL
   \   0001FC   AF83         MOV     R7,DPH
    433              }
   \   0001FE   05..         INC     ?V6
   \   000200   02....       LJMP    ??ZDP_MatchDescReq_8 & 0xFFFF
    434            }
    435          
    436            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_7:
   \   000203   E5..         MOV     A,?V7
   \   000205   C0E0         PUSH    A
   \   000207   8E82         MOV     DPL,R6
   \   000209   8F83         MOV     DPH,R7
   \   00020B   D0E0         POP     A
   \   00020D   F0           MOVX    @DPTR,A
   \   00020E   8E82         MOV     DPL,R6
   \   000210   8F83         MOV     DPH,R7
   \   000212   A3           INC     DPTR
   \   000213   AE82         MOV     R6,DPL
   \   000215   AF83         MOV     R7,DPH
    437            if ( NumOutClusters )
   \   000217   E5..         MOV     A,?V7
   \   000219   7003         JNZ     $+5
   \   00021B   02....       LJMP    ??ZDP_MatchDescReq_9 & 0xFFFF
    438            {
    439              for (i=0; i<NumOutClusters; ++i)  {
   \   00021E   75..00       MOV     ?V6,#0x0
   \                     ??ZDP_MatchDescReq_10:
   \   000221   E5..         MOV     A,?V6
   \   000223   C3           CLR     C
   \   000224   95..         SUBB    A,?V7
   \   000226   4003         JC      $+5
   \   000228   02....       LJMP    ??ZDP_MatchDescReq_9 & 0xFFFF
    440                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \   00022B   A8..         MOV     R0,?V6
   \   00022D   7900         MOV     R1,#0x0
   \   00022F   E8           MOV     A,R0
   \   000230   75F002       MOV     B,#0x2
   \   000233   A4           MUL     AB
   \   000234   C8           XCH     A,R0
   \   000235   AAF0         MOV     R2,B
   \   000237   75F000       MOV     B,#0x0
   \   00023A   A4           MUL     AB
   \   00023B   2A           ADD     A,R2
   \   00023C   FA           MOV     R2,A
   \   00023D   75F002       MOV     B,#0x2
   \   000240   E9           MOV     A,R1
   \   000241   A4           MUL     AB
   \   000242   2A           ADD     A,R2
   \   000243   F9           MOV     R1,A
   \   000244   7419         MOV     A,#0x19
   \   000246   12....       LCALL   ?XSTACK_DISP0_8
   \   000249   E0           MOVX    A,@DPTR
   \   00024A   28           ADD     A,R0
   \   00024B   FA           MOV     R2,A
   \   00024C   A3           INC     DPTR
   \   00024D   E0           MOVX    A,@DPTR
   \   00024E   39           ADDC    A,R1
   \   00024F   8A82         MOV     DPL,R2
   \   000251   F583         MOV     DPH,A
   \   000253   E0           MOVX    A,@DPTR
   \   000254   F8           MOV     R0,A
   \   000255   A3           INC     DPTR
   \   000256   E0           MOVX    A,@DPTR
   \   000257   F9           MOV     R1,A
   \   000258   E8           MOV     A,R0
   \   000259   C0E0         PUSH    A
   \   00025B   8E82         MOV     DPL,R6
   \   00025D   8F83         MOV     DPH,R7
   \   00025F   D0E0         POP     A
   \   000261   F0           MOVX    @DPTR,A
   \   000262   8E82         MOV     DPL,R6
   \   000264   8F83         MOV     DPH,R7
   \   000266   A3           INC     DPTR
   \   000267   AE82         MOV     R6,DPL
   \   000269   AF83         MOV     R7,DPH
    441                *pBuf++ = HI_UINT16( OutClusterList[i] );
   \   00026B   A8..         MOV     R0,?V6
   \   00026D   7900         MOV     R1,#0x0
   \   00026F   E8           MOV     A,R0
   \   000270   75F002       MOV     B,#0x2
   \   000273   A4           MUL     AB
   \   000274   C8           XCH     A,R0
   \   000275   AAF0         MOV     R2,B
   \   000277   75F000       MOV     B,#0x0
   \   00027A   A4           MUL     AB
   \   00027B   2A           ADD     A,R2
   \   00027C   FA           MOV     R2,A
   \   00027D   75F002       MOV     B,#0x2
   \   000280   E9           MOV     A,R1
   \   000281   A4           MUL     AB
   \   000282   2A           ADD     A,R2
   \   000283   F9           MOV     R1,A
   \   000284   7419         MOV     A,#0x19
   \   000286   12....       LCALL   ?XSTACK_DISP0_8
   \   000289   E0           MOVX    A,@DPTR
   \   00028A   28           ADD     A,R0
   \   00028B   FA           MOV     R2,A
   \   00028C   A3           INC     DPTR
   \   00028D   E0           MOVX    A,@DPTR
   \   00028E   39           ADDC    A,R1
   \   00028F   8A82         MOV     DPL,R2
   \   000291   F583         MOV     DPH,A
   \   000293   E0           MOVX    A,@DPTR
   \   000294   F8           MOV     R0,A
   \   000295   A3           INC     DPTR
   \   000296   E0           MOVX    A,@DPTR
   \   000297   F9           MOV     R1,A
   \   000298   E4           CLR     A
   \   000299   C9           XCH     A,R1
   \   00029A   F8           MOV     R0,A
   \   00029B   E8           MOV     A,R0
   \   00029C   C0E0         PUSH    A
   \   00029E   8E82         MOV     DPL,R6
   \   0002A0   8F83         MOV     DPH,R7
   \   0002A2   D0E0         POP     A
   \   0002A4   F0           MOVX    @DPTR,A
   \   0002A5   8E82         MOV     DPL,R6
   \   0002A7   8F83         MOV     DPH,R7
   \   0002A9   A3           INC     DPTR
   \   0002AA   AE82         MOV     R6,DPL
   \   0002AC   AF83         MOV     R7,DPH
    442              }
   \   0002AE   05..         INC     ?V6
   \   0002B0   02....       LJMP    ??ZDP_MatchDescReq_10 & 0xFFFF
    443            }
    444          
    445            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_9:
   \   0002B3                ; Setup parameters for call to function fillAndSend
   \   0002B3   75..06       MOV     ?V4,#0x6
   \   0002B6   75..00       MOV     ?V5,#0x0
   \   0002B9   78..         MOV     R0,#?V4
   \   0002BB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002BE   7402         MOV     A,#0x2
   \   0002C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C3   E0           MOVX    A,@DPTR
   \   0002C4   F9           MOV     R1,A
   \   0002C5   7404         MOV     A,#0x4
   \   0002C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002CA   E0           MOVX    A,@DPTR
   \   0002CB   FC           MOV     R4,A
   \   0002CC   A3           INC     DPTR
   \   0002CD   E0           MOVX    A,@DPTR
   \   0002CE   FD           MOV     R5,A
   \   0002CF   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0002D1   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0002D3   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0002D6   7402         MOV     A,#0x2
   \   0002D8   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   0002DB   7404         MOV     A,#0x4
   \   0002DD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002E0   7F08         MOV     R7,#0x8
   \   0002E2   02....       LJMP    ?BANKED_LEAVE_XDATA
    446          }
    447          
    448          /*********************************************************************
    449           * @fn          ZDP_SimpleDescReq
    450           *
    451           * @brief       This builds and send a NWK_Simple_Desc_req
    452           *              message.  This function sends unicast message to the
    453           *              destination device.
    454           *
    455           * @param       dstAddr - destination address
    456           * @param       nwkAddr - 16 bit address
    457           * @param       epIntf - endpoint/interface
    458           * @param       SecurityEnable - Security Options
    459           *
    460           * @return      afStatus_t
    461           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    462          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    463                                              byte endPoint, byte SecurityEnable )
    464          
    465          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   89..         MOV     ?V0,R1
    466            (void)SecurityEnable;  // Intentionally unreferenced parameter
    467          
    468            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   00000F   EE           MOV     A,R6
   \   000010   C0E0         PUSH    A
   \   000012   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F8           MOV     R0,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F583         MOV     DPH,A
   \   00001B   8882         MOV     DPL,R0
   \   00001D   D0E0         POP     A
   \   00001F   F0           MOVX    @DPTR,A
    469            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \   000020   EE           MOV     A,R6
   \   000021   F8           MOV     R0,A
   \   000022   EF           MOV     A,R7
   \   000023   F9           MOV     R1,A
   \   000024   E4           CLR     A
   \   000025   C9           XCH     A,R1
   \   000026   F8           MOV     R0,A
   \   000027   E8           MOV     A,R0
   \   000028   C0E0         PUSH    A
   \   00002A   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F8           MOV     R0,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F583         MOV     DPH,A
   \   000033   8882         MOV     DPL,R0
   \   000035   A3           INC     DPTR
   \   000036   D0E0         POP     A
   \   000038   F0           MOVX    @DPTR,A
    470            ZDP_TmpBuf[2] = endPoint;
   \   000039   E5..         MOV     A,?V0
   \   00003B   C0E0         PUSH    A
   \   00003D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F8           MOV     R0,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F583         MOV     DPH,A
   \   000046   8882         MOV     DPL,R0
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   D0E0         POP     A
   \   00004C   F0           MOVX    @DPTR,A
    471          
    472            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \   00004D                ; Setup parameters for call to function fillAndSend
   \   00004D   75..04       MOV     ?V4,#0x4
   \   000050   75..00       MOV     ?V5,#0x0
   \   000053   78..         MOV     R0,#?V4
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   7903         MOV     R1,#0x3
   \   00005A   AC..         MOV     R4,?V2
   \   00005C   AD..         MOV     R5,?V3
   \   00005E   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000060   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000062   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000065   7402         MOV     A,#0x2
   \   000067   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006A   7F06         MOV     R7,#0x6
   \   00006C   02....       LJMP    ?BANKED_LEAVE_XDATA
    473          }
    474          
    475          /*********************************************************************
    476           * @fn          ZDP_UserDescSet
    477           *
    478           * @brief       This builds and send a User_Desc_set message to set
    479           *              the user descriptor.  This function sends unicast
    480           *              message to the destination device.
    481           *
    482           * @param       dstAddr - destination address
    483           * @param       nwkAddr - 16 bit address
    484           * @param       UserDescriptor - user descriptor
    485           * @param       SecurityEnable - Security Options
    486           *
    487           * @return      afStatus_t
    488           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    489          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    490                                    UserDescriptorFormat_t *UserDescriptor,
    491                                    byte SecurityEnable )
    492          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   8C..         MOV     ?V4,R4
   \   000017   8D..         MOV     ?V5,R5
   \   000019   89..         MOV     ?V7,R1
    493            uint8 *pBuf = ZDP_TmpBuf;
   \   00001B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FE           MOV     R6,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FF           MOV     R7,A
    494            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    495                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \   000023   7412         MOV     A,#0x12
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F583         MOV     DPH,A
   \   00002E   8882         MOV     DPL,R0
   \   000030   E0           MOVX    A,@DPTR
   \   000031   C3           CLR     C
   \   000032   9410         SUBB    A,#0x10
   \   000034   5010         JNC     ??ZDP_UserDescSet_0
   \   000036   7412         MOV     A,#0x12
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F8           MOV     R0,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F583         MOV     DPH,A
   \   000041   8882         MOV     DPL,R0
   \   000043   E0           MOVX    A,@DPTR
   \   000044   8002         SJMP    ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   000046   7410         MOV     A,#0x10
   \                     ??ZDP_UserDescSet_1:
   \   000048   F5..         MOV     ?V6,A
    496            byte addrLen = 2;
   \   00004A   75..02       MOV     ?V3,#0x2
    497          
    498            (void)SecurityEnable;  // Intentionally unreferenced parameter
    499          
    500            *pBuf++ = LO_UINT16( nwkAddr );
   \   00004D   E5..         MOV     A,?V4
   \   00004F   C0E0         PUSH    A
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   D0E0         POP     A
   \   000057   F0           MOVX    @DPTR,A
   \   000058   8E82         MOV     DPL,R6
   \   00005A   8F83         MOV     DPH,R7
   \   00005C   A3           INC     DPTR
   \   00005D   AE82         MOV     R6,DPL
   \   00005F   AF83         MOV     R7,DPH
    501            *pBuf++ = HI_UINT16( nwkAddr );
   \   000061   A8..         MOV     R0,?V4
   \   000063   A9..         MOV     R1,?V5
   \   000065   E4           CLR     A
   \   000066   C9           XCH     A,R1
   \   000067   F8           MOV     R0,A
   \   000068   E8           MOV     A,R0
   \   000069   C0E0         PUSH    A
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   D0E0         POP     A
   \   000071   F0           MOVX    @DPTR,A
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   A3           INC     DPTR
   \   000077   AE82         MOV     R6,DPL
   \   000079   AF83         MOV     R7,DPH
    502          
    503            *pBuf++ = len;
   \   00007B   E5..         MOV     A,?V6
   \   00007D   C0E0         PUSH    A
   \   00007F   8E82         MOV     DPL,R6
   \   000081   8F83         MOV     DPH,R7
   \   000083   D0E0         POP     A
   \   000085   F0           MOVX    @DPTR,A
   \   000086   8E82         MOV     DPL,R6
   \   000088   8F83         MOV     DPH,R7
   \   00008A   A3           INC     DPTR
   \   00008B   AE82         MOV     R6,DPL
   \   00008D   AF83         MOV     R7,DPH
    504            addrLen = 3;
   \   00008F   75..03       MOV     ?V3,#0x3
    505          
    506            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
   \   000092                ; Setup parameters for call to function osal_memcpy
   \   000092   7412         MOV     A,#0x12
   \   000094   12....       LCALL   ?XSTACK_DISP0_8
   \   000097   E0           MOVX    A,@DPTR
   \   000098   2401         ADD     A,#0x1
   \   00009A   F5..         MOV     ?V0,A
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   3400         ADDC    A,#0x0
   \   0000A0   F5..         MOV     ?V1,A
   \   0000A2   75..00       MOV     ?V2,#0x0
   \   0000A5   78..         MOV     R0,#?V0
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AA   AC..         MOV     R4,?V6
   \   0000AC   7D00         MOV     R5,#0x0
   \   0000AE   EE           MOV     A,R6
   \   0000AF   FA           MOV     R2,A
   \   0000B0   EF           MOV     A,R7
   \   0000B1   FB           MOV     R3,A
   \   0000B2   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000B5   7403         MOV     A,#0x3
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BA   8A..         MOV     ?V0,R2
   \   0000BC   8B..         MOV     ?V1,R3
   \   0000BE   AE..         MOV     R6,?V0
   \   0000C0   AF..         MOV     R7,?V1
    507            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   0000C2                ; Setup parameters for call to function osal_memset
   \   0000C2   A8..         MOV     R0,?V6
   \   0000C4   7900         MOV     R1,#0x0
   \   0000C6   7410         MOV     A,#0x10
   \   0000C8   C3           CLR     C
   \   0000C9   98           SUBB    A,R0
   \   0000CA   FC           MOV     R4,A
   \   0000CB   7400         MOV     A,#0x0
   \   0000CD   99           SUBB    A,R1
   \   0000CE   FD           MOV     R5,A
   \   0000CF   7920         MOV     R1,#0x20
   \   0000D1   EE           MOV     A,R6
   \   0000D2   FA           MOV     R2,A
   \   0000D3   EF           MOV     A,R7
   \   0000D4   FB           MOV     R3,A
   \   0000D5   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
    508          
    509            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   0000D8                ; Setup parameters for call to function fillAndSend
   \   0000D8   75..14       MOV     ?V0,#0x14
   \   0000DB   75..00       MOV     ?V1,#0x0
   \   0000DE   78..         MOV     R0,#?V0
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E3   7410         MOV     A,#0x10
   \   0000E5   25..         ADD     A,?V3
   \   0000E7   F9           MOV     R1,A
   \   0000E8   7402         MOV     A,#0x2
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   FC           MOV     R4,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   FD           MOV     R5,A
   \   0000F2   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000F4   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000F6   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0000F9   7402         MOV     A,#0x2
   \   0000FB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FE   7402         MOV     A,#0x2
   \   000100   12....       LCALL   ?DEALLOC_XSTACK8
   \   000103   7F08         MOV     R7,#0x8
   \   000105   02....       LJMP    ?BANKED_LEAVE_XDATA
    510          }
    511          
    512          /*********************************************************************
    513           * @fn          ZDP_ServerDiscReq
    514           *
    515           * @brief       Build and send a Server_Discovery_req request message.
    516           *
    517           * @param       serverMask - 16-bit bit-mask of server services being sought.
    518           * @param       SecurityEnable - Security Options
    519           *
    520           * @return      afStatus_t
    521           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    522          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    523          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V3,R1
    524            uint8 *pBuf = ZDP_TmpBuf;
   \   000010   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V1,A
    525            zAddrType_t dstAddr;
    526          
    527            dstAddr.addrMode = AddrBroadcast;
   \   00001A   7408         MOV     A,#0x8
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   740F         MOV     A,#0xf
   \   000021   F0           MOVX    @DPTR,A
    528            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   74FD         MOV     A,#-0x3
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   74FF         MOV     A,#-0x1
   \   00002E   F0           MOVX    @DPTR,A
    529          
    530            *pBuf++ = LO_UINT16( serverMask );
   \   00002F   EE           MOV     A,R6
   \   000030   C0E0         PUSH    A
   \   000032   85..82       MOV     DPL,?V0
   \   000035   85..83       MOV     DPH,?V1
   \   000038   D0E0         POP     A
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   85..82       MOV     DPL,?V0
   \   00003E   85..83       MOV     DPH,?V1
   \   000041   A3           INC     DPTR
   \   000042   8582..       MOV     ?V0,DPL
   \   000045   8583..       MOV     ?V1,DPH
    531            *pBuf = HI_UINT16( serverMask );
   \   000048   EE           MOV     A,R6
   \   000049   F8           MOV     R0,A
   \   00004A   EF           MOV     A,R7
   \   00004B   F9           MOV     R1,A
   \   00004C   E4           CLR     A
   \   00004D   C9           XCH     A,R1
   \   00004E   F8           MOV     R0,A
   \   00004F   E8           MOV     A,R0
   \   000050   C0E0         PUSH    A
   \   000052   85..82       MOV     DPL,?V0
   \   000055   85..83       MOV     DPH,?V1
   \   000058   D0E0         POP     A
   \   00005A   F0           MOVX    @DPTR,A
    532          
    533            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    534                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \   00005B   E5..         MOV     A,?V3
   \   00005D   6004         JZ      ??ZDP_ServerDiscReq_0
   \   00005F   7440         MOV     A,#0x40
   \   000061   8002         SJMP    ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   000063   7400         MOV     A,#0x0
   \                     ??ZDP_ServerDiscReq_1:
   \   000065   90....       MOV     DPTR,#ZDP_TxOptions
   \   000068   F0           MOVX    @DPTR,A
   \   000069                ; Setup parameters for call to function fillAndSend
   \   000069   75..15       MOV     ?V4,#0x15
   \   00006C   75..00       MOV     ?V5,#0x0
   \   00006F   78..         MOV     R0,#?V4
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000074   7902         MOV     R1,#0x2
   \   000076   7402         MOV     A,#0x2
   \   000078   12....       LCALL   ?XSTACK_DISP102_8
   \   00007B   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00007D   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00007F   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000082   7402         MOV     A,#0x2
   \   000084   12....       LCALL   ?DEALLOC_XSTACK8
   \   000087   E9           MOV     A,R1
   \   000088   F5..         MOV     ?V2,A
   \   00008A   90....       MOV     DPTR,#ZDP_TxOptions
   \   00008D   7400         MOV     A,#0x0
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A9..         MOV     R1,?V2
   \   000092   7409         MOV     A,#0x9
   \   000094   12....       LCALL   ?DEALLOC_XSTACK8
   \   000097   7F06         MOV     R7,#0x6
   \   000099   02....       LJMP    ?BANKED_LEAVE_XDATA
    535          }
    536          
    537          /*********************************************************************
    538           * @fn          ZDP_DeviceAnnce
    539           *
    540           * @brief       This builds and send a Device_Annce message.  This
    541           *              function sends a broadcast message.
    542           *
    543           * @param       nwkAddr - 16 bit address of the device
    544           * @param       IEEEAddr - 64 bit address of the device
    545           * @param       capabilities - device capabilities.  This field is only
    546           *                 sent for v1.1 networks.
    547           * @param       SecurityEnable - Security Options
    548           *
    549           * @return      afStatus_t
    550           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    551          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    552                                        byte capabilities, byte SecurityEnable )
    553          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V4,R4
   \   000010   8D..         MOV     ?V5,R5
   \   000012   89..         MOV     ?V1,R1
    554            zAddrType_t dstAddr;
    555            uint8 len;
    556          
    557            (void)SecurityEnable;  // Intentionally unreferenced parameter
    558          
    559            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000014   7408         MOV     A,#0x8
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   740F         MOV     A,#0xf
   \   00001B   F0           MOVX    @DPTR,A
    560            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00001C   85..82       MOV     DPL,?XSP + 0
   \   00001F   85..83       MOV     DPH,?XSP + 1
   \   000022   74FD         MOV     A,#-0x3
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   74FF         MOV     A,#-0x1
   \   000028   F0           MOVX    @DPTR,A
    561          
    562            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000029   EE           MOV     A,R6
   \   00002A   C0E0         PUSH    A
   \   00002C   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F8           MOV     R0,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F583         MOV     DPH,A
   \   000035   8882         MOV     DPL,R0
   \   000037   D0E0         POP     A
   \   000039   F0           MOVX    @DPTR,A
    563            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \   00003A   EE           MOV     A,R6
   \   00003B   F8           MOV     R0,A
   \   00003C   EF           MOV     A,R7
   \   00003D   F9           MOV     R1,A
   \   00003E   E4           CLR     A
   \   00003F   C9           XCH     A,R1
   \   000040   F8           MOV     R0,A
   \   000041   E8           MOV     A,R0
   \   000042   C0E0         PUSH    A
   \   000044   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F8           MOV     R0,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F583         MOV     DPH,A
   \   00004D   8882         MOV     DPL,R0
   \   00004F   A3           INC     DPTR
   \   000050   D0E0         POP     A
   \   000052   F0           MOVX    @DPTR,A
    564            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   000053                ; Setup parameters for call to function sAddrExtCpy
   \   000053   AC..         MOV     R4,?V4
   \   000055   AD..         MOV     R5,?V5
   \   000057   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   2402         ADD     A,#0x2
   \   00005D   FA           MOV     R2,A
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   3400         ADDC    A,#0x0
   \   000062   FB           MOV     R3,A
   \   000063   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
    565            len = 2 + Z_EXTADDR_LEN;
   \   000066   75..0A       MOV     ?V0,#0xa
    566          
    567            ZDP_TmpBuf[10] = capabilities;
   \   000069   E5..         MOV     A,?V1
   \   00006B   C0E0         PUSH    A
   \   00006D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F8           MOV     R0,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   C8           XCH     A,R0
   \   000075   240A         ADD     A,#0xa
   \   000077   F582         MOV     DPL,A
   \   000079   C8           XCH     A,R0
   \   00007A   3400         ADDC    A,#0x0
   \   00007C   F583         MOV     DPH,A
   \   00007E   D0E0         POP     A
   \   000080   F0           MOVX    @DPTR,A
    568            len++;
   \   000081   05..         INC     ?V0
    569          
    570            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   000083                ; Setup parameters for call to function fillAndSend
   \   000083   75..13       MOV     ?V2,#0x13
   \   000086   75..00       MOV     ?V3,#0x0
   \   000089   78..         MOV     R0,#?V2
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008E   A9..         MOV     R1,?V0
   \   000090   7402         MOV     A,#0x2
   \   000092   12....       LCALL   ?XSTACK_DISP102_8
   \   000095   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000097   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000099   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00009C   7402         MOV     A,#0x2
   \   00009E   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A1   7409         MOV     A,#0x9
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A6   7F06         MOV     R7,#0x6
   \   0000A8   02....       LJMP    ?BANKED_LEAVE_XDATA
    571          }
    572          
    573          /*********************************************************************
    574           * Address Responses
    575           */
    576          
    577          /*********************************************************************
    578           * @fn      zdpProcessAddrReq
    579           *
    580           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    581           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    582           *
    583           * @param   inMsg - incoming message
    584           *
    585           * @return  none
    586           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    587          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    588          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V6,R2
   \   00000C   8B..         MOV     ?V7,R3
    589            associated_devices_t *pAssoc;
    590            uint8 reqType;
    591            uint16 aoi = INVALID_NODE_ADDR;
   \   00000E   75..FE       MOV     ?V0,#-0x2
   \   000011   75..FF       MOV     ?V1,#-0x1
    592            uint8 *ieee = NULL;
   \   000014   75..00       MOV     ?V2,#0x0
   \   000017   75..00       MOV     ?V3,#0x0
    593          
    594            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   00001A   E5..         MOV     A,?V6
   \   00001C   240C         ADD     A,#0xc
   \   00001E   F582         MOV     DPL,A
   \   000020   E4           CLR     A
   \   000021   35..         ADDC    A,?V7
   \   000023   F583         MOV     DPH,A
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F8           MOV     R0,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F9           MOV     R1,A
   \   00002A   E8           MOV     A,R0
   \   00002B   49           ORL     A,R1
   \   00002C   7006         JNZ     ??zdpProcessAddrReq_0
   \   00002E   7808         MOV     R0,#0x8
   \   000030   7900         MOV     R1,#0x0
   \   000032   8004         SJMP    ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   000034   7802         MOV     R0,#0x2
   \   000036   7900         MOV     R1,#0x0
   \                     ??zdpProcessAddrReq_1:
   \   000038   E5..         MOV     A,?V6
   \   00003A   2413         ADD     A,#0x13
   \   00003C   F582         MOV     DPL,A
   \   00003E   E4           CLR     A
   \   00003F   35..         ADDC    A,?V7
   \   000041   F583         MOV     DPH,A
   \   000043   E0           MOVX    A,@DPTR
   \   000044   28           ADD     A,R0
   \   000045   FA           MOV     R2,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   39           ADDC    A,R1
   \   000049   8A82         MOV     DPL,R2
   \   00004B   F583         MOV     DPH,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   C0E0         PUSH    A
   \   000050   7401         MOV     A,#0x1
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   D0E0         POP     A
   \   000057   F0           MOVX    @DPTR,A
    595          
    596            if ( inMsg->clusterID == NWK_addr_req )
   \   000058   E5..         MOV     A,?V6
   \   00005A   240C         ADD     A,#0xc
   \   00005C   F582         MOV     DPL,A
   \   00005E   E4           CLR     A
   \   00005F   35..         ADDC    A,?V7
   \   000061   F583         MOV     DPH,A
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F8           MOV     R0,A
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F9           MOV     R1,A
   \   000068   E8           MOV     A,R0
   \   000069   49           ORL     A,R1
   \   00006A   6003         JZ      $+5
   \   00006C   02....       LJMP    ??zdpProcessAddrReq_2 & 0xFFFF
    597          
    598            {
    599              ieee = inMsg->asdu;
   \   00006F   E5..         MOV     A,?V6
   \   000071   2413         ADD     A,#0x13
   \   000073   F582         MOV     DPL,A
   \   000075   E4           CLR     A
   \   000076   35..         ADDC    A,?V7
   \   000078   F583         MOV     DPH,A
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F8           MOV     R0,A
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   88..         MOV     ?V2,R0
   \   000081   89..         MOV     ?V3,R1
    600          
    601              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   000083                ; Setup parameters for call to function sAddrExtCmp
   \   000083   AC..         MOV     R4,?V2
   \   000085   AD..         MOV     R5,?V3
   \   000087   7A..         MOV     R2,#saveExtAddr & 0xff
   \   000089   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   00008B   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   00008E   E9           MOV     A,R1
   \   00008F   600D         JZ      ??zdpProcessAddrReq_3
    602              {
    603                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   000091   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000094   E0           MOVX    A,@DPTR
   \   000095   F5..         MOV     ?V0,A
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F5..         MOV     ?V1,A
   \   00009B   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
    604              }
    605              // Handle response for sleeping end devices
    606              else if ( (ZSTACK_ROUTER_BUILD)
    607                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    608                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_3:
   \   00009E   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   600B         JZ      ??zdpProcessAddrReq_5
   \   0000A4   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   6401         XRL     A,#0x1
   \   0000AA   6003         JZ      $+5
   \   0000AC   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
   \                     ??zdpProcessAddrReq_5:
   \   0000AF                ; Setup parameters for call to function AssocGetWithExt
   \   0000AF   AA..         MOV     R2,?V2
   \   0000B1   AB..         MOV     R3,?V3
   \   0000B3   12....       LCALL   ??AssocGetWithExt?relay; Banked call to: AssocGetWithExt
   \   0000B6   8A..         MOV     ?V4,R2
   \   0000B8   8B..         MOV     ?V5,R3
   \   0000BA   A8..         MOV     R0,?V4
   \   0000BC   A9..         MOV     R1,?V5
   \   0000BE   7404         MOV     A,#0x4
   \   0000C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C3   E8           MOV     A,R0
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   E9           MOV     A,R1
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8   E8           MOV     A,R0
   \   0000C9   49           ORL     A,R1
   \   0000CA   7003         JNZ     $+5
   \   0000CC   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
   \   0000CF   7404         MOV     A,#0x4
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   F8           MOV     R0,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   F583         MOV     DPH,A
   \   0000DA   8882         MOV     DPL,R0
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   6401         XRL     A,#0x1
   \   0000E3   6003         JZ      $+5
   \   0000E5   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
    609              {
    610                aoi = pAssoc->shortAddr;
   \   0000E8   7404         MOV     A,#0x4
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   F8           MOV     R0,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F583         MOV     DPH,A
   \   0000F3   8882         MOV     DPL,R0
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   F5..         MOV     ?V0,A
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F5..         MOV     ?V1,A
    611                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \   0000FC   7401         MOV     A,#0x1
   \   0000FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000101   E0           MOVX    A,@DPTR
   \   000102   7003         JNZ     $+5
   \   000104   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
    612                  reqType = 0xFF; // Force Invalid
   \   000107   7401         MOV     A,#0x1
   \   000109   12....       LCALL   ?XSTACK_DISP0_8
   \   00010C   74FF         MOV     A,#-0x1
   \   00010E   F0           MOVX    @DPTR,A
   \   00010F   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
    613              }
    614            }
    615            else  // if ( inMsg->clusterID == IEEE_addr_req )
    616            {
    617              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_2:
   \   000112   E5..         MOV     A,?V6
   \   000114   2413         ADD     A,#0x13
   \   000116   F582         MOV     DPL,A
   \   000118   E4           CLR     A
   \   000119   35..         ADDC    A,?V7
   \   00011B   F583         MOV     DPH,A
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   F8           MOV     R0,A
   \   00011F   A3           INC     DPTR
   \   000120   E0           MOVX    A,@DPTR
   \   000121   F583         MOV     DPH,A
   \   000123   8882         MOV     DPL,R0
   \   000125   E0           MOVX    A,@DPTR
   \   000126   FA           MOV     R2,A
   \   000127   7B00         MOV     R3,#0x0
   \   000129   E5..         MOV     A,?V6
   \   00012B   2413         ADD     A,#0x13
   \   00012D   F582         MOV     DPL,A
   \   00012F   E4           CLR     A
   \   000130   35..         ADDC    A,?V7
   \   000132   F583         MOV     DPH,A
   \   000134   E0           MOVX    A,@DPTR
   \   000135   F8           MOV     R0,A
   \   000136   A3           INC     DPTR
   \   000137   E0           MOVX    A,@DPTR
   \   000138   F583         MOV     DPH,A
   \   00013A   8882         MOV     DPL,R0
   \   00013C   A3           INC     DPTR
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   F8           MOV     R0,A
   \   00013F   7900         MOV     R1,#0x0
   \   000141   E4           CLR     A
   \   000142   C8           XCH     A,R0
   \   000143   F9           MOV     R1,A
   \   000144   EA           MOV     A,R2
   \   000145   28           ADD     A,R0
   \   000146   F8           MOV     R0,A
   \   000147   EB           MOV     A,R3
   \   000148   39           ADDC    A,R1
   \   000149   F9           MOV     R1,A
   \   00014A   88..         MOV     ?V0,R0
   \   00014C   89..         MOV     ?V1,R1
    618          
    619              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   00014E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000151   E0           MOVX    A,@DPTR
   \   000152   65..         XRL     A,?V0
   \   000154   7004         JNZ     ??zdpProcessAddrReq_6
   \   000156   A3           INC     DPTR
   \   000157   E0           MOVX    A,@DPTR
   \   000158   65..         XRL     A,?V1
   \                     ??zdpProcessAddrReq_6:
   \   00015A   7009         JNZ     ??zdpProcessAddrReq_7
    620              {
    621                ieee = saveExtAddr;
   \   00015C   75....       MOV     ?V2,#saveExtAddr & 0xff
   \   00015F   75....       MOV     ?V3,#(saveExtAddr >> 8) & 0xff
   \   000162   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
    622              }
    623              else if ( (ZSTACK_ROUTER_BUILD)
    624                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    625                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_7:
   \   000165   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000168   E0           MOVX    A,@DPTR
   \   000169   6008         JZ      ??zdpProcessAddrReq_8
   \   00016B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   6401         XRL     A,#0x1
   \   000171   707F         JNZ     ??zdpProcessAddrReq_4
   \                     ??zdpProcessAddrReq_8:
   \   000173                ; Setup parameters for call to function AssocGetWithShort
   \   000173   AA..         MOV     R2,?V0
   \   000175   AB..         MOV     R3,?V1
   \   000177   12....       LCALL   ??AssocGetWithShort?relay; Banked call to: AssocGetWithShort
   \   00017A   8A..         MOV     ?V4,R2
   \   00017C   8B..         MOV     ?V5,R3
   \   00017E   A8..         MOV     R0,?V4
   \   000180   A9..         MOV     R1,?V5
   \   000182   7404         MOV     A,#0x4
   \   000184   12....       LCALL   ?XSTACK_DISP0_8
   \   000187   E8           MOV     A,R0
   \   000188   F0           MOVX    @DPTR,A
   \   000189   A3           INC     DPTR
   \   00018A   E9           MOV     A,R1
   \   00018B   F0           MOVX    @DPTR,A
   \   00018C   E8           MOV     A,R0
   \   00018D   49           ORL     A,R1
   \   00018E   6062         JZ      ??zdpProcessAddrReq_4
   \   000190   7404         MOV     A,#0x4
   \   000192   12....       LCALL   ?XSTACK_DISP0_8
   \   000195   E0           MOVX    A,@DPTR
   \   000196   F8           MOV     R0,A
   \   000197   A3           INC     DPTR
   \   000198   E0           MOVX    A,@DPTR
   \   000199   F583         MOV     DPH,A
   \   00019B   8882         MOV     DPL,R0
   \   00019D   A3           INC     DPTR
   \   00019E   A3           INC     DPTR
   \   00019F   A3           INC     DPTR
   \   0001A0   A3           INC     DPTR
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   6401         XRL     A,#0x1
   \   0001A4   704C         JNZ     ??zdpProcessAddrReq_4
    626              {
    627                AddrMgrEntry_t addrEntry;
    628                addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   0001A6   740A         MOV     A,#0xa
   \   0001A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AB   7400         MOV     A,#0x0
   \   0001AD   F0           MOVX    @DPTR,A
    629                addrEntry.index = pAssoc->addrIdx;
   \   0001AE   7404         MOV     A,#0x4
   \   0001B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   F8           MOV     R0,A
   \   0001B5   A3           INC     DPTR
   \   0001B6   E0           MOVX    A,@DPTR
   \   0001B7   F583         MOV     DPH,A
   \   0001B9   8882         MOV     DPL,R0
   \   0001BB   A3           INC     DPTR
   \   0001BC   A3           INC     DPTR
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   F8           MOV     R0,A
   \   0001BF   A3           INC     DPTR
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   F9           MOV     R1,A
   \   0001C2   7415         MOV     A,#0x15
   \   0001C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C7   E8           MOV     A,R0
   \   0001C8   F0           MOVX    @DPTR,A
   \   0001C9   A3           INC     DPTR
   \   0001CA   E9           MOV     A,R1
   \   0001CB   F0           MOVX    @DPTR,A
    630                if ( AddrMgrEntryGet( &addrEntry ) )
   \   0001CC                ; Setup parameters for call to function AddrMgrEntryGet
   \   0001CC   740A         MOV     A,#0xa
   \   0001CE   12....       LCALL   ?XSTACK_DISP101_8
   \   0001D1   12....       LCALL   ??AddrMgrEntryGet?relay; Banked call to: AddrMgrEntryGet
   \   0001D4   E9           MOV     A,R1
   \   0001D5   600B         JZ      ??zdpProcessAddrReq_9
    631                {
    632                  ieee = addrEntry.extAddr;
   \   0001D7   740D         MOV     A,#0xd
   \   0001D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DC   8582..       MOV     ?V2,DPL
   \   0001DF   8583..       MOV     ?V3,DPH
    633                }
    634          
    635                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??zdpProcessAddrReq_9:
   \   0001E2   7401         MOV     A,#0x1
   \   0001E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E7   E0           MOVX    A,@DPTR
   \   0001E8   6008         JZ      ??zdpProcessAddrReq_4
    636                  reqType = 0xFF; // Force Invalid
   \   0001EA   7401         MOV     A,#0x1
   \   0001EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EF   74FF         MOV     A,#-0x1
   \   0001F1   F0           MOVX    @DPTR,A
    637              }
    638            }
    639          
    640            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_4:
   \   0001F2   74FE         MOV     A,#-0x2
   \   0001F4   65..         XRL     A,?V0
   \   0001F6   7004         JNZ     ??zdpProcessAddrReq_10
   \   0001F8   74FF         MOV     A,#-0x1
   \   0001FA   65..         XRL     A,?V1
   \                     ??zdpProcessAddrReq_10:
   \   0001FC   6006         JZ      ??zdpProcessAddrReq_11
   \   0001FE   E5..         MOV     A,?V2
   \   000200   45..         ORL     A,?V3
   \   000202   7011         JNZ     ??zdpProcessAddrReq_12
   \                     ??zdpProcessAddrReq_11:
   \   000204   E5..         MOV     A,?V6
   \   000206   240B         ADD     A,#0xb
   \   000208   F582         MOV     DPL,A
   \   00020A   E4           CLR     A
   \   00020B   35..         ADDC    A,?V7
   \   00020D   F583         MOV     DPH,A
   \   00020F   E0           MOVX    A,@DPTR
   \   000210   6003         JZ      $+5
   \   000212   02....       LJMP    ??zdpProcessAddrReq_13 & 0xFFFF
    641            {
    642              uint8 stat;
    643              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_12:
   \   000215   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000218   E0           MOVX    A,@DPTR
   \   000219   FE           MOV     R6,A
   \   00021A   A3           INC     DPTR
   \   00021B   E0           MOVX    A,@DPTR
   \   00021C   FF           MOV     R7,A
    644              // Status + IEEE-Addr + Nwk-Addr.
    645              uint8 len = 1 + Z_EXTADDR_LEN + 2;
   \   00021D   7402         MOV     A,#0x2
   \   00021F   12....       LCALL   ?XSTACK_DISP0_8
   \   000222   740B         MOV     A,#0xb
   \   000224   F0           MOVX    @DPTR,A
    646              
    647              // If aoi and iee are both setup, we found results
    648              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \   000225   74FE         MOV     A,#-0x2
   \   000227   65..         XRL     A,?V0
   \   000229   7004         JNZ     ??zdpProcessAddrReq_14
   \   00022B   74FF         MOV     A,#-0x1
   \   00022D   65..         XRL     A,?V1
   \                     ??zdpProcessAddrReq_14:
   \   00022F   602A         JZ      ??zdpProcessAddrReq_15
   \   000231   E5..         MOV     A,?V2
   \   000233   45..         ORL     A,?V3
   \   000235   6024         JZ      ??zdpProcessAddrReq_15
    649              {
    650                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED)) 
    651                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   000237   7401         MOV     A,#0x1
   \   000239   12....       LCALL   ?XSTACK_DISP0_8
   \   00023C   E0           MOVX    A,@DPTR
   \   00023D   600A         JZ      ??zdpProcessAddrReq_16
   \   00023F   7401         MOV     A,#0x1
   \   000241   12....       LCALL   ?XSTACK_DISP0_8
   \   000244   E0           MOVX    A,@DPTR
   \   000245   6401         XRL     A,#0x1
   \   000247   7004         JNZ     ??zdpProcessAddrReq_17
   \                     ??zdpProcessAddrReq_16:
   \   000249   7400         MOV     A,#0x0
   \   00024B   8002         SJMP    ??zdpProcessAddrReq_18
   \                     ??zdpProcessAddrReq_17:
   \   00024D   7480         MOV     A,#-0x80
   \                     ??zdpProcessAddrReq_18:
   \   00024F   C0E0         PUSH    A
   \   000251   7403         MOV     A,#0x3
   \   000253   12....       LCALL   ?XSTACK_DISP0_8
   \   000256   D0E0         POP     A
   \   000258   F0           MOVX    @DPTR,A
   \   000259   802E         SJMP    ??zdpProcessAddrReq_19
    652              }
    653              else 
    654              {
    655                // not found and the req was unicast to this device
    656                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_15:
   \   00025B   7403         MOV     A,#0x3
   \   00025D   12....       LCALL   ?XSTACK_DISP0_8
   \   000260   7481         MOV     A,#-0x7f
   \   000262   F0           MOVX    @DPTR,A
    657                
    658                // Fill in the missing field with this device's address
    659                if ( inMsg->clusterID == NWK_addr_req )
   \   000263   E5..         MOV     A,?V6
   \   000265   240C         ADD     A,#0xc
   \   000267   F582         MOV     DPL,A
   \   000269   E4           CLR     A
   \   00026A   35..         ADDC    A,?V7
   \   00026C   F583         MOV     DPH,A
   \   00026E   E0           MOVX    A,@DPTR
   \   00026F   F8           MOV     R0,A
   \   000270   A3           INC     DPTR
   \   000271   E0           MOVX    A,@DPTR
   \   000272   F9           MOV     R1,A
   \   000273   E8           MOV     A,R0
   \   000274   49           ORL     A,R1
   \   000275   700C         JNZ     ??zdpProcessAddrReq_20
    660                {
    661                  aoi = ZDAppNwkAddr.addr.shortAddr;
   \   000277   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00027A   E0           MOVX    A,@DPTR
   \   00027B   F5..         MOV     ?V0,A
   \   00027D   A3           INC     DPTR
   \   00027E   E0           MOVX    A,@DPTR
   \   00027F   F5..         MOV     ?V1,A
   \   000281   8006         SJMP    ??zdpProcessAddrReq_19
    662                }
    663                else
    664                {
    665                  ieee = saveExtAddr;
   \                     ??zdpProcessAddrReq_20:
   \   000283   75....       MOV     ?V2,#saveExtAddr & 0xff
   \   000286   75....       MOV     ?V3,#(saveExtAddr >> 8) & 0xff
    666                }
    667              }
    668          
    669              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_19:
   \   000289   7403         MOV     A,#0x3
   \   00028B   12....       LCALL   ?XSTACK_DISP0_8
   \   00028E   E0           MOVX    A,@DPTR
   \   00028F   C0E0         PUSH    A
   \   000291   8E82         MOV     DPL,R6
   \   000293   8F83         MOV     DPH,R7
   \   000295   D0E0         POP     A
   \   000297   F0           MOVX    @DPTR,A
   \   000298   8E82         MOV     DPL,R6
   \   00029A   8F83         MOV     DPH,R7
   \   00029C   A3           INC     DPTR
   \   00029D   AE82         MOV     R6,DPL
   \   00029F   AF83         MOV     R7,DPH
    670          
    671              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \   0002A1                ; Setup parameters for call to function sAddrExtCpy
   \   0002A1   AC..         MOV     R4,?V2
   \   0002A3   AD..         MOV     R5,?V3
   \   0002A5   EE           MOV     A,R6
   \   0002A6   FA           MOV     R2,A
   \   0002A7   EF           MOV     A,R7
   \   0002A8   FB           MOV     R3,A
   \   0002A9   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   0002AC   8A..         MOV     ?V4,R2
   \   0002AE   8B..         MOV     ?V5,R3
   \   0002B0   AE..         MOV     R6,?V4
   \   0002B2   AF..         MOV     R7,?V5
    672          
    673              *pBuf++ = LO_UINT16( aoi );
   \   0002B4   E5..         MOV     A,?V0
   \   0002B6   C0E0         PUSH    A
   \   0002B8   8E82         MOV     DPL,R6
   \   0002BA   8F83         MOV     DPH,R7
   \   0002BC   D0E0         POP     A
   \   0002BE   F0           MOVX    @DPTR,A
   \   0002BF   8E82         MOV     DPL,R6
   \   0002C1   8F83         MOV     DPH,R7
   \   0002C3   A3           INC     DPTR
   \   0002C4   AE82         MOV     R6,DPL
   \   0002C6   AF83         MOV     R7,DPH
    674              *pBuf++ = HI_UINT16( aoi );
   \   0002C8   A8..         MOV     R0,?V0
   \   0002CA   A9..         MOV     R1,?V1
   \   0002CC   E4           CLR     A
   \   0002CD   C9           XCH     A,R1
   \   0002CE   F8           MOV     R0,A
   \   0002CF   E8           MOV     A,R0
   \   0002D0   C0E0         PUSH    A
   \   0002D2   8E82         MOV     DPL,R6
   \   0002D4   8F83         MOV     DPH,R7
   \   0002D6   D0E0         POP     A
   \   0002D8   F0           MOVX    @DPTR,A
   \   0002D9   8E82         MOV     DPL,R6
   \   0002DB   8F83         MOV     DPH,R7
   \   0002DD   A3           INC     DPTR
   \   0002DE   AE82         MOV     R6,DPL
   \   0002E0   AF83         MOV     R7,DPH
    675          
    676              if ( ZSTACK_ROUTER_BUILD )
   \   0002E2   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0002E5   E0           MOVX    A,@DPTR
   \   0002E6   600B         JZ      ??zdpProcessAddrReq_21
   \   0002E8   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0002EB   E0           MOVX    A,@DPTR
   \   0002EC   6401         XRL     A,#0x1
   \   0002EE   6003         JZ      $+5
   \   0002F0   02....       LJMP    ??zdpProcessAddrReq_22 & 0xFFFF
    677              {
    678                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    679                     && (stat == ZDP_SUCCESS) )
   \                     ??zdpProcessAddrReq_21:
   \   0002F3   7401         MOV     A,#0x1
   \   0002F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F8   E0           MOVX    A,@DPTR
   \   0002F9   6401         XRL     A,#0x1
   \   0002FB   6003         JZ      $+5
   \   0002FD   02....       LJMP    ??zdpProcessAddrReq_22 & 0xFFFF
   \   000300   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000303   E0           MOVX    A,@DPTR
   \   000304   65..         XRL     A,?V0
   \   000306   7004         JNZ     ??zdpProcessAddrReq_23
   \   000308   A3           INC     DPTR
   \   000309   E0           MOVX    A,@DPTR
   \   00030A   65..         XRL     A,?V1
   \                     ??zdpProcessAddrReq_23:
   \   00030C   6003         JZ      $+5
   \   00030E   02....       LJMP    ??zdpProcessAddrReq_22 & 0xFFFF
   \   000311   7403         MOV     A,#0x3
   \   000313   12....       LCALL   ?XSTACK_DISP0_8
   \   000316   E0           MOVX    A,@DPTR
   \   000317   6003         JZ      $+5
   \   000319   02....       LJMP    ??zdpProcessAddrReq_22 & 0xFFFF
    680                {
    681                  uint8  cnt = 0;
   \   00031C   85..82       MOV     DPL,?XSP + 0
   \   00031F   85..83       MOV     DPH,?XSP + 1
   \   000322   7400         MOV     A,#0x0
   \   000324   F0           MOVX    @DPTR,A
    682                  uint16 *list = AssocMakeList( &cnt );
   \   000325                ; Setup parameters for call to function AssocMakeList
   \   000325   AA..         MOV     R2,?XSP + 0
   \   000327   AB..         MOV     R3,?XSP + 1
   \   000329   12....       LCALL   ??AssocMakeList?relay; Banked call to: AssocMakeList
   \   00032C   7408         MOV     A,#0x8
   \   00032E   12....       LCALL   ?XSTACK_DISP0_8
   \   000331   EA           MOV     A,R2
   \   000332   F0           MOVX    @DPTR,A
   \   000333   A3           INC     DPTR
   \   000334   EB           MOV     A,R3
   \   000335   F0           MOVX    @DPTR,A
    683          
    684                  if ( list != NULL )
   \   000336   7408         MOV     A,#0x8
   \   000338   12....       LCALL   ?XSTACK_DISP0_8
   \   00033B   E0           MOVX    A,@DPTR
   \   00033C   F8           MOV     R0,A
   \   00033D   A3           INC     DPTR
   \   00033E   E0           MOVX    A,@DPTR
   \   00033F   F9           MOV     R1,A
   \   000340   E8           MOV     A,R0
   \   000341   49           ORL     A,R1
   \   000342   7003         JNZ     $+5
   \   000344   02....       LJMP    ??zdpProcessAddrReq_24 & 0xFFFF
    685                  {
    686                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
   \   000347   E5..         MOV     A,?V6
   \   000349   240C         ADD     A,#0xc
   \   00034B   F582         MOV     DPL,A
   \   00034D   E4           CLR     A
   \   00034E   35..         ADDC    A,?V7
   \   000350   F583         MOV     DPH,A
   \   000352   E0           MOVX    A,@DPTR
   \   000353   F8           MOV     R0,A
   \   000354   A3           INC     DPTR
   \   000355   E0           MOVX    A,@DPTR
   \   000356   F9           MOV     R1,A
   \   000357   E8           MOV     A,R0
   \   000358   49           ORL     A,R1
   \   000359   7006         JNZ     ??zdpProcessAddrReq_25
   \   00035B   7808         MOV     R0,#0x8
   \   00035D   7900         MOV     R1,#0x0
   \   00035F   8004         SJMP    ??zdpProcessAddrReq_26
   \                     ??zdpProcessAddrReq_25:
   \   000361   7802         MOV     R0,#0x2
   \   000363   7900         MOV     R1,#0x0
   \                     ??zdpProcessAddrReq_26:
   \   000365   E5..         MOV     A,?V6
   \   000367   2413         ADD     A,#0x13
   \   000369   F582         MOV     DPL,A
   \   00036B   E4           CLR     A
   \   00036C   35..         ADDC    A,?V7
   \   00036E   F583         MOV     DPH,A
   \   000370   E0           MOVX    A,@DPTR
   \   000371   28           ADD     A,R0
   \   000372   FA           MOV     R2,A
   \   000373   A3           INC     DPTR
   \   000374   E0           MOVX    A,@DPTR
   \   000375   39           ADDC    A,R1
   \   000376   8A82         MOV     DPL,R2
   \   000378   F583         MOV     DPH,A
   \   00037A   A3           INC     DPTR
   \   00037B   E0           MOVX    A,@DPTR
   \   00037C   F5..         MOV     ?V4,A
    687                    uint16 *pList = list + idx;
   \   00037E   A8..         MOV     R0,?V4
   \   000380   7900         MOV     R1,#0x0
   \   000382   E8           MOV     A,R0
   \   000383   75F002       MOV     B,#0x2
   \   000386   A4           MUL     AB
   \   000387   C8           XCH     A,R0
   \   000388   AAF0         MOV     R2,B
   \   00038A   75F000       MOV     B,#0x0
   \   00038D   A4           MUL     AB
   \   00038E   2A           ADD     A,R2
   \   00038F   FA           MOV     R2,A
   \   000390   75F002       MOV     B,#0x2
   \   000393   E9           MOV     A,R1
   \   000394   A4           MUL     AB
   \   000395   2A           ADD     A,R2
   \   000396   F9           MOV     R1,A
   \   000397   7408         MOV     A,#0x8
   \   000399   12....       LCALL   ?XSTACK_DISP0_8
   \   00039C   E0           MOVX    A,@DPTR
   \   00039D   28           ADD     A,R0
   \   00039E   F8           MOV     R0,A
   \   00039F   A3           INC     DPTR
   \   0003A0   E0           MOVX    A,@DPTR
   \   0003A1   39           ADDC    A,R1
   \   0003A2   F9           MOV     R1,A
   \   0003A3   7406         MOV     A,#0x6
   \   0003A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0003A8   E8           MOV     A,R0
   \   0003A9   F0           MOVX    @DPTR,A
   \   0003AA   A3           INC     DPTR
   \   0003AB   E9           MOV     A,R1
   \   0003AC   F0           MOVX    @DPTR,A
    688          
    689                    // NumAssocDev field is only present on success.
    690                    if ( cnt > idx )
   \   0003AD   85..82       MOV     DPL,?XSP + 0
   \   0003B0   85..83       MOV     DPH,?XSP + 1
   \   0003B3   E0           MOVX    A,@DPTR
   \   0003B4   F8           MOV     R0,A
   \   0003B5   E5..         MOV     A,?V4
   \   0003B7   C3           CLR     C
   \   0003B8   98           SUBB    A,R0
   \   0003B9   5022         JNC     ??zdpProcessAddrReq_27
    691                    {
    692                      cnt -= idx;
   \   0003BB   A8..         MOV     R0,?V4
   \   0003BD   85..82       MOV     DPL,?XSP + 0
   \   0003C0   85..83       MOV     DPH,?XSP + 1
   \   0003C3   E0           MOVX    A,@DPTR
   \   0003C4   C3           CLR     C
   \   0003C5   98           SUBB    A,R0
   \   0003C6   F0           MOVX    @DPTR,A
    693                      len += (cnt * sizeof( uint16 ));
   \   0003C7   75F002       MOV     B,#0x2
   \   0003CA   85..82       MOV     DPL,?XSP + 0
   \   0003CD   85..83       MOV     DPH,?XSP + 1
   \   0003D0   E0           MOVX    A,@DPTR
   \   0003D1   A4           MUL     AB
   \   0003D2   F8           MOV     R0,A
   \   0003D3   7402         MOV     A,#0x2
   \   0003D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0003D8   E0           MOVX    A,@DPTR
   \   0003D9   28           ADD     A,R0
   \   0003DA   F0           MOVX    @DPTR,A
   \   0003DB   8009         SJMP    ??zdpProcessAddrReq_28
    694                    }
    695                    else
    696                    {
    697                      cnt = 0;
   \                     ??zdpProcessAddrReq_27:
   \   0003DD   85..82       MOV     DPL,?XSP + 0
   \   0003E0   85..83       MOV     DPH,?XSP + 1
   \   0003E3   7400         MOV     A,#0x0
   \   0003E5   F0           MOVX    @DPTR,A
    698                    }
    699                    *pBuf++ = cnt;
   \                     ??zdpProcessAddrReq_28:
   \   0003E6   85..82       MOV     DPL,?XSP + 0
   \   0003E9   85..83       MOV     DPH,?XSP + 1
   \   0003EC   E0           MOVX    A,@DPTR
   \   0003ED   C0E0         PUSH    A
   \   0003EF   8E82         MOV     DPL,R6
   \   0003F1   8F83         MOV     DPH,R7
   \   0003F3   D0E0         POP     A
   \   0003F5   F0           MOVX    @DPTR,A
   \   0003F6   8E82         MOV     DPL,R6
   \   0003F8   8F83         MOV     DPH,R7
   \   0003FA   A3           INC     DPTR
   \   0003FB   AE82         MOV     R6,DPL
   \   0003FD   AF83         MOV     R7,DPH
    700                    len++;
   \   0003FF   7402         MOV     A,#0x2
   \   000401   12....       LCALL   ?XSTACK_DISP0_8
   \   000404   E0           MOVX    A,@DPTR
   \   000405   2401         ADD     A,#0x1
   \   000407   F0           MOVX    @DPTR,A
    701          
    702                    // StartIndex field is only present if NumAssocDev field is non-zero.
    703                    *pBuf++ = idx;
   \   000408   E5..         MOV     A,?V4
   \   00040A   C0E0         PUSH    A
   \   00040C   8E82         MOV     DPL,R6
   \   00040E   8F83         MOV     DPH,R7
   \   000410   D0E0         POP     A
   \   000412   F0           MOVX    @DPTR,A
   \   000413   8E82         MOV     DPL,R6
   \   000415   8F83         MOV     DPH,R7
   \   000417   A3           INC     DPTR
   \   000418   AE82         MOV     R6,DPL
   \   00041A   AF83         MOV     R7,DPH
    704                    len++;
   \   00041C   7402         MOV     A,#0x2
   \   00041E   12....       LCALL   ?XSTACK_DISP0_8
   \   000421   E0           MOVX    A,@DPTR
   \   000422   2401         ADD     A,#0x1
   \   000424   F0           MOVX    @DPTR,A
    705          
    706                    while ( cnt != 0 )
   \                     ??zdpProcessAddrReq_29:
   \   000425   85..82       MOV     DPL,?XSP + 0
   \   000428   85..83       MOV     DPH,?XSP + 1
   \   00042B   E0           MOVX    A,@DPTR
   \   00042C   6071         JZ      ??zdpProcessAddrReq_30
    707                    {
    708                      *pBuf++ = LO_UINT16( *pList );
   \   00042E   7406         MOV     A,#0x6
   \   000430   12....       LCALL   ?XSTACK_DISP0_8
   \   000433   E0           MOVX    A,@DPTR
   \   000434   F8           MOV     R0,A
   \   000435   A3           INC     DPTR
   \   000436   E0           MOVX    A,@DPTR
   \   000437   F583         MOV     DPH,A
   \   000439   8882         MOV     DPL,R0
   \   00043B   E0           MOVX    A,@DPTR
   \   00043C   F8           MOV     R0,A
   \   00043D   A3           INC     DPTR
   \   00043E   E0           MOVX    A,@DPTR
   \   00043F   F9           MOV     R1,A
   \   000440   E8           MOV     A,R0
   \   000441   C0E0         PUSH    A
   \   000443   8E82         MOV     DPL,R6
   \   000445   8F83         MOV     DPH,R7
   \   000447   D0E0         POP     A
   \   000449   F0           MOVX    @DPTR,A
   \   00044A   8E82         MOV     DPL,R6
   \   00044C   8F83         MOV     DPH,R7
   \   00044E   A3           INC     DPTR
   \   00044F   AE82         MOV     R6,DPL
   \   000451   AF83         MOV     R7,DPH
    709                      *pBuf++ = HI_UINT16( *pList );
   \   000453   7406         MOV     A,#0x6
   \   000455   12....       LCALL   ?XSTACK_DISP0_8
   \   000458   E0           MOVX    A,@DPTR
   \   000459   F8           MOV     R0,A
   \   00045A   A3           INC     DPTR
   \   00045B   E0           MOVX    A,@DPTR
   \   00045C   F583         MOV     DPH,A
   \   00045E   8882         MOV     DPL,R0
   \   000460   E0           MOVX    A,@DPTR
   \   000461   F8           MOV     R0,A
   \   000462   A3           INC     DPTR
   \   000463   E0           MOVX    A,@DPTR
   \   000464   F9           MOV     R1,A
   \   000465   E4           CLR     A
   \   000466   C9           XCH     A,R1
   \   000467   F8           MOV     R0,A
   \   000468   E8           MOV     A,R0
   \   000469   C0E0         PUSH    A
   \   00046B   8E82         MOV     DPL,R6
   \   00046D   8F83         MOV     DPH,R7
   \   00046F   D0E0         POP     A
   \   000471   F0           MOVX    @DPTR,A
   \   000472   8E82         MOV     DPL,R6
   \   000474   8F83         MOV     DPH,R7
   \   000476   A3           INC     DPTR
   \   000477   AE82         MOV     R6,DPL
   \   000479   AF83         MOV     R7,DPH
    710                      pList++;
   \   00047B   7406         MOV     A,#0x6
   \   00047D   12....       LCALL   ?XSTACK_DISP0_8
   \   000480   E0           MOVX    A,@DPTR
   \   000481   2402         ADD     A,#0x2
   \   000483   F8           MOV     R0,A
   \   000484   A3           INC     DPTR
   \   000485   E0           MOVX    A,@DPTR
   \   000486   3400         ADDC    A,#0x0
   \   000488   F9           MOV     R1,A
   \   000489   7406         MOV     A,#0x6
   \   00048B   12....       LCALL   ?XSTACK_DISP0_8
   \   00048E   E8           MOV     A,R0
   \   00048F   F0           MOVX    @DPTR,A
   \   000490   A3           INC     DPTR
   \   000491   E9           MOV     A,R1
   \   000492   F0           MOVX    @DPTR,A
    711                      cnt--;
   \   000493   85..82       MOV     DPL,?XSP + 0
   \   000496   85..83       MOV     DPH,?XSP + 1
   \   000499   E0           MOVX    A,@DPTR
   \   00049A   24FF         ADD     A,#-0x1
   \   00049C   F0           MOVX    @DPTR,A
   \   00049D   8086         SJMP    ??zdpProcessAddrReq_29
    712                    }
    713          
    714                    osal_mem_free( (uint8 *)list );
   \                     ??zdpProcessAddrReq_30:
   \   00049F                ; Setup parameters for call to function osal_mem_free
   \   00049F   7408         MOV     A,#0x8
   \   0004A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0004A4   E0           MOVX    A,@DPTR
   \   0004A5   FA           MOV     R2,A
   \   0004A6   A3           INC     DPTR
   \   0004A7   E0           MOVX    A,@DPTR
   \   0004A8   FB           MOV     R3,A
   \   0004A9   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0004AC   8019         SJMP    ??zdpProcessAddrReq_22
    715                  }
    716                  else
    717                  {
    718                    // NumAssocDev field is only present on success.
    719                    *pBuf++ = 0;
   \                     ??zdpProcessAddrReq_24:
   \   0004AE   8E82         MOV     DPL,R6
   \   0004B0   8F83         MOV     DPH,R7
   \   0004B2   7400         MOV     A,#0x0
   \   0004B4   F0           MOVX    @DPTR,A
   \   0004B5   8E82         MOV     DPL,R6
   \   0004B7   8F83         MOV     DPH,R7
   \   0004B9   A3           INC     DPTR
   \   0004BA   AE82         MOV     R6,DPL
   \   0004BC   AF83         MOV     R7,DPH
    720                    len++;
   \   0004BE   7402         MOV     A,#0x2
   \   0004C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0004C3   E0           MOVX    A,@DPTR
   \   0004C4   2401         ADD     A,#0x1
   \   0004C6   F0           MOVX    @DPTR,A
    721                  }
    722                }
    723              }
    724          
    725              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??zdpProcessAddrReq_22:
   \   0004C7   90....       MOV     DPTR,#ZDP_TxOptions
   \   0004CA   7410         MOV     A,#0x10
   \   0004CC   F0           MOVX    @DPTR,A
    726              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \   0004CD                ; Setup parameters for call to function fillAndSend
   \   0004CD   E5..         MOV     A,?V6
   \   0004CF   240C         ADD     A,#0xc
   \   0004D1   F582         MOV     DPL,A
   \   0004D3   E4           CLR     A
   \   0004D4   35..         ADDC    A,?V7
   \   0004D6   F583         MOV     DPH,A
   \   0004D8   E0           MOVX    A,@DPTR
   \   0004D9   4400         ORL     A,#0x0
   \   0004DB   F5..         MOV     ?V4,A
   \   0004DD   A3           INC     DPTR
   \   0004DE   E0           MOVX    A,@DPTR
   \   0004DF   4480         ORL     A,#0x80
   \   0004E1   F5..         MOV     ?V5,A
   \   0004E3   78..         MOV     R0,#?V4
   \   0004E5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0004E8   7404         MOV     A,#0x4
   \   0004EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0004ED   E0           MOVX    A,@DPTR
   \   0004EE   F9           MOV     R1,A
   \   0004EF   E5..         MOV     A,?V6
   \   0004F1   2402         ADD     A,#0x2
   \   0004F3   FC           MOV     R4,A
   \   0004F4   E4           CLR     A
   \   0004F5   35..         ADDC    A,?V7
   \   0004F7   FD           MOV     R5,A
   \   0004F8   E5..         MOV     A,?V6
   \   0004FA   240F         ADD     A,#0xf
   \   0004FC   FA           MOV     R2,A
   \   0004FD   E4           CLR     A
   \   0004FE   35..         ADDC    A,?V7
   \   000500   FB           MOV     R3,A
   \   000501   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000504   7402         MOV     A,#0x2
   \   000506   12....       LCALL   ?DEALLOC_XSTACK8
   \   000509   E9           MOV     A,R1
    727              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   00050A   90....       MOV     DPTR,#ZDP_TxOptions
   \   00050D   7400         MOV     A,#0x0
   \   00050F   F0           MOVX    @DPTR,A
    728            }
    729          }
   \                     ??zdpProcessAddrReq_13:
   \   000510   7417         MOV     A,#0x17
   \   000512   12....       LCALL   ?DEALLOC_XSTACK8
   \   000515   7F08         MOV     R7,#0x8
   \   000517   02....       LJMP    ?BANKED_LEAVE_XDATA
    730          
    731          /*********************************************************************
    732           * @fn          ZDP_NodeDescMsg
    733           *
    734           * @brief       Builds and sends a Node Descriptor message, unicast to the
    735           *              specified device.
    736           *
    737           * @param       inMsg - incoming message
    738           * @param       nwkAddr - 16 bit network address for device
    739           * @param       pNodeDesc - pointer to the node descriptor
    740           *
    741           * @return      afStatus_t
    742           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    743          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    744                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    745          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V6,R2
   \   00000C   8B..         MOV     ?V7,R3
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
   \   000012   7411         MOV     A,#0x11
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V1,A
    746            uint8 *pBuf = ZDP_TmpBuf;
   \   00001E   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FE           MOV     R6,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FF           MOV     R7,A
    747            byte len;
    748          
    749            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   7410         MOV     A,#0x10
   \   00002E   F0           MOVX    @DPTR,A
    750          
    751            *pBuf++ = ZDP_SUCCESS;
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   7400         MOV     A,#0x0
   \   000035   F0           MOVX    @DPTR,A
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   A3           INC     DPTR
   \   00003B   AE82         MOV     R6,DPL
   \   00003D   AF83         MOV     R7,DPH
    752          
    753            *pBuf++ = LO_UINT16( nwkAddr );
   \   00003F   E5..         MOV     A,?V2
   \   000041   C0E0         PUSH    A
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   D0E0         POP     A
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   A3           INC     DPTR
   \   00004F   AE82         MOV     R6,DPL
   \   000051   AF83         MOV     R7,DPH
    754            *pBuf++ = HI_UINT16( nwkAddr );
   \   000053   A8..         MOV     R0,?V2
   \   000055   A9..         MOV     R1,?V3
   \   000057   E4           CLR     A
   \   000058   C9           XCH     A,R1
   \   000059   F8           MOV     R0,A
   \   00005A   E8           MOV     A,R0
   \   00005B   C0E0         PUSH    A
   \   00005D   8E82         MOV     DPL,R6
   \   00005F   8F83         MOV     DPH,R7
   \   000061   D0E0         POP     A
   \   000063   F0           MOVX    @DPTR,A
   \   000064   8E82         MOV     DPL,R6
   \   000066   8F83         MOV     DPH,R7
   \   000068   A3           INC     DPTR
   \   000069   AE82         MOV     R6,DPL
   \   00006B   AF83         MOV     R7,DPH
    755          
    756            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    757                               (pNodeDesc->UserDescAvail << 4) |
    758                               (pNodeDesc->LogicalType & 0x07));
   \   00006D   85..82       MOV     DPL,?V0
   \   000070   85..83       MOV     DPH,?V1
   \   000073   E0           MOVX    A,@DPTR
   \   000074   5407         ANL     A,#0x7
   \   000076   F9           MOV     R1,A
   \   000077   85..82       MOV     DPL,?V0
   \   00007A   85..83       MOV     DPH,?V1
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   A2E4         MOV     C,0xE0 /* A   */.4
   \   000080   E4           CLR     A
   \   000081   33           RLC     A
   \   000082   C4           SWAP    A
   \   000083   54F0         ANL     A,#0xf0
   \   000085   F8           MOV     R0,A
   \   000086   85..82       MOV     DPL,?V0
   \   000089   85..83       MOV     DPH,?V1
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   A2E3         MOV     C,0xE0 /* A   */.3
   \   00008F   E4           CLR     A
   \   000090   33           RLC     A
   \   000091   33           RLC     A
   \   000092   33           RLC     A
   \   000093   33           RLC     A
   \   000094   54F8         ANL     A,#0xf8
   \   000096   48           ORL     A,R0
   \   000097   49           ORL     A,R1
   \   000098   C0E0         PUSH    A
   \   00009A   8E82         MOV     DPL,R6
   \   00009C   8F83         MOV     DPH,R7
   \   00009E   D0E0         POP     A
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   8E82         MOV     DPL,R6
   \   0000A3   8F83         MOV     DPH,R7
   \   0000A5   A3           INC     DPTR
   \   0000A6   AE82         MOV     R6,DPL
   \   0000A8   AF83         MOV     R7,DPH
    759          
    760            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \   0000AA   85..82       MOV     DPL,?V0
   \   0000AD   85..83       MOV     DPH,?V1
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   5407         ANL     A,#0x7
   \   0000B4   F8           MOV     R0,A
   \   0000B5   85..82       MOV     DPL,?V0
   \   0000B8   85..83       MOV     DPH,?V1
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   13           RRC     A
   \   0000BE   13           RRC     A
   \   0000BF   13           RRC     A
   \   0000C0   541F         ANL     A,#0x1f
   \   0000C2   33           RLC     A
   \   0000C3   33           RLC     A
   \   0000C4   33           RLC     A
   \   0000C5   54F8         ANL     A,#0xf8
   \   0000C7   48           ORL     A,R0
   \   0000C8   C0E0         PUSH    A
   \   0000CA   8E82         MOV     DPL,R6
   \   0000CC   8F83         MOV     DPH,R7
   \   0000CE   D0E0         POP     A
   \   0000D0   F0           MOVX    @DPTR,A
   \   0000D1   8E82         MOV     DPL,R6
   \   0000D3   8F83         MOV     DPH,R7
   \   0000D5   A3           INC     DPTR
   \   0000D6   AE82         MOV     R6,DPL
   \   0000D8   AF83         MOV     R7,DPH
    761            *pBuf++ = pNodeDesc->CapabilityFlags;
   \   0000DA   85..82       MOV     DPL,?V0
   \   0000DD   85..83       MOV     DPH,?V1
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   C0E0         PUSH    A
   \   0000E5   8E82         MOV     DPL,R6
   \   0000E7   8F83         MOV     DPH,R7
   \   0000E9   D0E0         POP     A
   \   0000EB   F0           MOVX    @DPTR,A
   \   0000EC   8E82         MOV     DPL,R6
   \   0000EE   8F83         MOV     DPH,R7
   \   0000F0   A3           INC     DPTR
   \   0000F1   AE82         MOV     R6,DPL
   \   0000F3   AF83         MOV     R7,DPH
    762            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \   0000F5   85..82       MOV     DPL,?V0
   \   0000F8   85..83       MOV     DPH,?V1
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   C0E0         PUSH    A
   \   000101   8E82         MOV     DPL,R6
   \   000103   8F83         MOV     DPH,R7
   \   000105   D0E0         POP     A
   \   000107   F0           MOVX    @DPTR,A
   \   000108   8E82         MOV     DPL,R6
   \   00010A   8F83         MOV     DPH,R7
   \   00010C   A3           INC     DPTR
   \   00010D   AE82         MOV     R6,DPL
   \   00010F   AF83         MOV     R7,DPH
    763            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \   000111   85..82       MOV     DPL,?V0
   \   000114   85..83       MOV     DPH,?V1
   \   000117   A3           INC     DPTR
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   C0E0         PUSH    A
   \   00011E   8E82         MOV     DPL,R6
   \   000120   8F83         MOV     DPH,R7
   \   000122   D0E0         POP     A
   \   000124   F0           MOVX    @DPTR,A
   \   000125   8E82         MOV     DPL,R6
   \   000127   8F83         MOV     DPH,R7
   \   000129   A3           INC     DPTR
   \   00012A   AE82         MOV     R6,DPL
   \   00012C   AF83         MOV     R7,DPH
    764            *pBuf++ = pNodeDesc->MaxBufferSize;
   \   00012E   85..82       MOV     DPL,?V0
   \   000131   85..83       MOV     DPH,?V1
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   E0           MOVX    A,@DPTR
   \   00013A   C0E0         PUSH    A
   \   00013C   8E82         MOV     DPL,R6
   \   00013E   8F83         MOV     DPH,R7
   \   000140   D0E0         POP     A
   \   000142   F0           MOVX    @DPTR,A
   \   000143   8E82         MOV     DPL,R6
   \   000145   8F83         MOV     DPH,R7
   \   000147   A3           INC     DPTR
   \   000148   AE82         MOV     R6,DPL
   \   00014A   AF83         MOV     R7,DPH
    765            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \   00014C   85..82       MOV     DPL,?V0
   \   00014F   85..83       MOV     DPH,?V1
   \   000152   A3           INC     DPTR
   \   000153   A3           INC     DPTR
   \   000154   A3           INC     DPTR
   \   000155   A3           INC     DPTR
   \   000156   A3           INC     DPTR
   \   000157   A3           INC     DPTR
   \   000158   E0           MOVX    A,@DPTR
   \   000159   C0E0         PUSH    A
   \   00015B   8E82         MOV     DPL,R6
   \   00015D   8F83         MOV     DPH,R7
   \   00015F   D0E0         POP     A
   \   000161   F0           MOVX    @DPTR,A
   \   000162   8E82         MOV     DPL,R6
   \   000164   8F83         MOV     DPH,R7
   \   000166   A3           INC     DPTR
   \   000167   AE82         MOV     R6,DPL
   \   000169   AF83         MOV     R7,DPH
    766            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \   00016B   85..82       MOV     DPL,?V0
   \   00016E   85..83       MOV     DPH,?V1
   \   000171   A3           INC     DPTR
   \   000172   A3           INC     DPTR
   \   000173   A3           INC     DPTR
   \   000174   A3           INC     DPTR
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   A3           INC     DPTR
   \   000178   E0           MOVX    A,@DPTR
   \   000179   C0E0         PUSH    A
   \   00017B   8E82         MOV     DPL,R6
   \   00017D   8F83         MOV     DPH,R7
   \   00017F   D0E0         POP     A
   \   000181   F0           MOVX    @DPTR,A
   \   000182   8E82         MOV     DPL,R6
   \   000184   8F83         MOV     DPH,R7
   \   000186   A3           INC     DPTR
   \   000187   AE82         MOV     R6,DPL
   \   000189   AF83         MOV     R7,DPH
    767          
    768            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \   00018B   85..82       MOV     DPL,?V0
   \   00018E   85..83       MOV     DPH,?V1
   \   000191   A3           INC     DPTR
   \   000192   A3           INC     DPTR
   \   000193   A3           INC     DPTR
   \   000194   A3           INC     DPTR
   \   000195   A3           INC     DPTR
   \   000196   A3           INC     DPTR
   \   000197   A3           INC     DPTR
   \   000198   A3           INC     DPTR
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   F8           MOV     R0,A
   \   00019B   A3           INC     DPTR
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   F9           MOV     R1,A
   \   00019E   E8           MOV     A,R0
   \   00019F   C0E0         PUSH    A
   \   0001A1   8E82         MOV     DPL,R6
   \   0001A3   8F83         MOV     DPH,R7
   \   0001A5   D0E0         POP     A
   \   0001A7   F0           MOVX    @DPTR,A
   \   0001A8   8E82         MOV     DPL,R6
   \   0001AA   8F83         MOV     DPH,R7
   \   0001AC   A3           INC     DPTR
   \   0001AD   AE82         MOV     R6,DPL
   \   0001AF   AF83         MOV     R7,DPH
    769            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \   0001B1   85..82       MOV     DPL,?V0
   \   0001B4   85..83       MOV     DPH,?V1
   \   0001B7   A3           INC     DPTR
   \   0001B8   A3           INC     DPTR
   \   0001B9   A3           INC     DPTR
   \   0001BA   A3           INC     DPTR
   \   0001BB   A3           INC     DPTR
   \   0001BC   A3           INC     DPTR
   \   0001BD   A3           INC     DPTR
   \   0001BE   A3           INC     DPTR
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   F8           MOV     R0,A
   \   0001C1   A3           INC     DPTR
   \   0001C2   E0           MOVX    A,@DPTR
   \   0001C3   F9           MOV     R1,A
   \   0001C4   E4           CLR     A
   \   0001C5   C9           XCH     A,R1
   \   0001C6   F8           MOV     R0,A
   \   0001C7   E8           MOV     A,R0
   \   0001C8   C0E0         PUSH    A
   \   0001CA   8E82         MOV     DPL,R6
   \   0001CC   8F83         MOV     DPH,R7
   \   0001CE   D0E0         POP     A
   \   0001D0   F0           MOVX    @DPTR,A
   \   0001D1   8E82         MOV     DPL,R6
   \   0001D3   8F83         MOV     DPH,R7
   \   0001D5   A3           INC     DPTR
   \   0001D6   AE82         MOV     R6,DPL
   \   0001D8   AF83         MOV     R7,DPH
    770            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \   0001DA   85..82       MOV     DPL,?V0
   \   0001DD   85..83       MOV     DPH,?V1
   \   0001E0   A3           INC     DPTR
   \   0001E1   A3           INC     DPTR
   \   0001E2   A3           INC     DPTR
   \   0001E3   A3           INC     DPTR
   \   0001E4   A3           INC     DPTR
   \   0001E5   A3           INC     DPTR
   \   0001E6   A3           INC     DPTR
   \   0001E7   A3           INC     DPTR
   \   0001E8   A3           INC     DPTR
   \   0001E9   A3           INC     DPTR
   \   0001EA   E0           MOVX    A,@DPTR
   \   0001EB   C0E0         PUSH    A
   \   0001ED   8E82         MOV     DPL,R6
   \   0001EF   8F83         MOV     DPH,R7
   \   0001F1   D0E0         POP     A
   \   0001F3   F0           MOVX    @DPTR,A
   \   0001F4   8E82         MOV     DPL,R6
   \   0001F6   8F83         MOV     DPH,R7
   \   0001F8   A3           INC     DPTR
   \   0001F9   AE82         MOV     R6,DPL
   \   0001FB   AF83         MOV     R7,DPH
    771            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \   0001FD   E5..         MOV     A,?V0
   \   0001FF   240B         ADD     A,#0xb
   \   000201   F582         MOV     DPL,A
   \   000203   E4           CLR     A
   \   000204   35..         ADDC    A,?V1
   \   000206   F583         MOV     DPH,A
   \   000208   E0           MOVX    A,@DPTR
   \   000209   C0E0         PUSH    A
   \   00020B   8E82         MOV     DPL,R6
   \   00020D   8F83         MOV     DPH,R7
   \   00020F   D0E0         POP     A
   \   000211   F0           MOVX    @DPTR,A
   \   000212   8E82         MOV     DPL,R6
   \   000214   8F83         MOV     DPH,R7
   \   000216   A3           INC     DPTR
   \   000217   AE82         MOV     R6,DPL
   \   000219   AF83         MOV     R7,DPH
    772            *pBuf = pNodeDesc->DescriptorCapability;
   \   00021B   E5..         MOV     A,?V0
   \   00021D   240C         ADD     A,#0xc
   \   00021F   F582         MOV     DPL,A
   \   000221   E4           CLR     A
   \   000222   35..         ADDC    A,?V1
   \   000224   F583         MOV     DPH,A
   \   000226   E0           MOVX    A,@DPTR
   \   000227   C0E0         PUSH    A
   \   000229   8E82         MOV     DPL,R6
   \   00022B   8F83         MOV     DPH,R7
   \   00022D   D0E0         POP     A
   \   00022F   F0           MOVX    @DPTR,A
    773          
    774            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \   000230                ; Setup parameters for call to function fillAndSend
   \   000230   75..02       MOV     ?V4,#0x2
   \   000233   75..80       MOV     ?V5,#-0x80
   \   000236   78..         MOV     R0,#?V4
   \   000238   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00023B   7402         MOV     A,#0x2
   \   00023D   12....       LCALL   ?XSTACK_DISP0_8
   \   000240   E0           MOVX    A,@DPTR
   \   000241   F9           MOV     R1,A
   \   000242   E5..         MOV     A,?V6
   \   000244   2402         ADD     A,#0x2
   \   000246   FC           MOV     R4,A
   \   000247   E4           CLR     A
   \   000248   35..         ADDC    A,?V7
   \   00024A   FD           MOV     R5,A
   \   00024B   E5..         MOV     A,?V6
   \   00024D   240F         ADD     A,#0xf
   \   00024F   FA           MOV     R2,A
   \   000250   E4           CLR     A
   \   000251   35..         ADDC    A,?V7
   \   000253   FB           MOV     R3,A
   \   000254   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000257   7402         MOV     A,#0x2
   \   000259   12....       LCALL   ?DEALLOC_XSTACK8
   \   00025C   7401         MOV     A,#0x1
   \   00025E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000261   7F08         MOV     R7,#0x8
   \   000263   02....       LJMP    ?BANKED_LEAVE_XDATA
    775          }
    776          
    777          /*********************************************************************
    778           * @fn          ZDP_PowerDescMsg
    779           *
    780           * @brief       Builds and sends a Power Descriptor message, unicast to the
    781           *              specified device.
    782           *
    783           * @param       inMsg - incoming message (request)
    784           * @param       nwkAddr - 16 bit network address for device
    785           * @param       pPowerDesc - pointer to the node descriptor
    786           *
    787           * @return      afStatus_t
    788           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    789          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    790                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    791          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V6,R2
   \   00000C   8B..         MOV     ?V7,R3
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
   \   000012   7411         MOV     A,#0x11
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V2,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V3,A
    792            uint8 *pBuf = ZDP_TmpBuf;
   \   00001E   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FE           MOV     R6,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FF           MOV     R7,A
    793            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   7405         MOV     A,#0x5
   \   00002E   F0           MOVX    @DPTR,A
    794          
    795            *pBuf++ = ZDP_SUCCESS;
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   7400         MOV     A,#0x0
   \   000035   F0           MOVX    @DPTR,A
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   A3           INC     DPTR
   \   00003B   AE82         MOV     R6,DPL
   \   00003D   AF83         MOV     R7,DPH
    796          
    797            *pBuf++ = LO_UINT16( nwkAddr );
   \   00003F   E5..         MOV     A,?V0
   \   000041   C0E0         PUSH    A
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   D0E0         POP     A
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   A3           INC     DPTR
   \   00004F   AE82         MOV     R6,DPL
   \   000051   AF83         MOV     R7,DPH
    798            *pBuf++ = HI_UINT16( nwkAddr );
   \   000053   A8..         MOV     R0,?V0
   \   000055   A9..         MOV     R1,?V1
   \   000057   E4           CLR     A
   \   000058   C9           XCH     A,R1
   \   000059   F8           MOV     R0,A
   \   00005A   E8           MOV     A,R0
   \   00005B   C0E0         PUSH    A
   \   00005D   8E82         MOV     DPL,R6
   \   00005F   8F83         MOV     DPH,R7
   \   000061   D0E0         POP     A
   \   000063   F0           MOVX    @DPTR,A
   \   000064   8E82         MOV     DPL,R6
   \   000066   8F83         MOV     DPH,R7
   \   000068   A3           INC     DPTR
   \   000069   AE82         MOV     R6,DPL
   \   00006B   AF83         MOV     R7,DPH
    799          
    800            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    801                              | (pPowerDesc->PowerMode & 0x0F));
   \   00006D   85..82       MOV     DPL,?V2
   \   000070   85..83       MOV     DPH,?V3
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F8           MOV     R0,A
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F9           MOV     R1,A
   \   000078   E8           MOV     A,R0
   \   000079   540F         ANL     A,#0xf
   \   00007B   FA           MOV     R2,A
   \   00007C   85..82       MOV     DPL,?V2
   \   00007F   85..83       MOV     DPH,?V3
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F8           MOV     R0,A
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   F9           MOV     R1,A
   \   000087   E8           MOV     A,R0
   \   000088   C4           SWAP    A
   \   000089   540F         ANL     A,#0xf
   \   00008B   C4           SWAP    A
   \   00008C   54F0         ANL     A,#0xf0
   \   00008E   4A           ORL     A,R2
   \   00008F   C0E0         PUSH    A
   \   000091   8E82         MOV     DPL,R6
   \   000093   8F83         MOV     DPH,R7
   \   000095   D0E0         POP     A
   \   000097   F0           MOVX    @DPTR,A
   \   000098   8E82         MOV     DPL,R6
   \   00009A   8F83         MOV     DPH,R7
   \   00009C   A3           INC     DPTR
   \   00009D   AE82         MOV     R6,DPL
   \   00009F   AF83         MOV     R7,DPH
    802            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    803                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \   0000A1   85..82       MOV     DPL,?V2
   \   0000A4   85..83       MOV     DPH,?V3
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F8           MOV     R0,A
   \   0000A9   A3           INC     DPTR
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F9           MOV     R1,A
   \   0000AC   E4           CLR     A
   \   0000AD   C9           XCH     A,R1
   \   0000AE   F8           MOV     R0,A
   \   0000AF   E8           MOV     A,R0
   \   0000B0   540F         ANL     A,#0xf
   \   0000B2   F9           MOV     R1,A
   \   0000B3   85..82       MOV     DPL,?V2
   \   0000B6   85..83       MOV     DPH,?V3
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   F5..         MOV     ?V4,A
   \   0000BC   A3           INC     DPTR
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F5..         MOV     ?V5,A
   \   0000C0   740C         MOV     A,#0xc
   \   0000C2   78..         MOV     R0,#?V4
   \   0000C4   12....       LCALL   ?US_SHR
   \   0000C7   E5..         MOV     A,?V4
   \   0000C9   C4           SWAP    A
   \   0000CA   54F0         ANL     A,#0xf0
   \   0000CC   49           ORL     A,R1
   \   0000CD   C0E0         PUSH    A
   \   0000CF   8E82         MOV     DPL,R6
   \   0000D1   8F83         MOV     DPH,R7
   \   0000D3   D0E0         POP     A
   \   0000D5   F0           MOVX    @DPTR,A
   \   0000D6   8E82         MOV     DPL,R6
   \   0000D8   8F83         MOV     DPH,R7
   \   0000DA   A3           INC     DPTR
   \   0000DB   AE82         MOV     R6,DPL
   \   0000DD   AF83         MOV     R7,DPH
    804          
    805            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \   0000DF                ; Setup parameters for call to function fillAndSend
   \   0000DF   75..03       MOV     ?V4,#0x3
   \   0000E2   75..80       MOV     ?V5,#-0x80
   \   0000E5   78..         MOV     R0,#?V4
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EA   7402         MOV     A,#0x2
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   F9           MOV     R1,A
   \   0000F1   E5..         MOV     A,?V6
   \   0000F3   2402         ADD     A,#0x2
   \   0000F5   FC           MOV     R4,A
   \   0000F6   E4           CLR     A
   \   0000F7   35..         ADDC    A,?V7
   \   0000F9   FD           MOV     R5,A
   \   0000FA   E5..         MOV     A,?V6
   \   0000FC   240F         ADD     A,#0xf
   \   0000FE   FA           MOV     R2,A
   \   0000FF   E4           CLR     A
   \   000100   35..         ADDC    A,?V7
   \   000102   FB           MOV     R3,A
   \   000103   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000106   7402         MOV     A,#0x2
   \   000108   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010B   7401         MOV     A,#0x1
   \   00010D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000110   7F08         MOV     R7,#0x8
   \   000112   02....       LJMP    ?BANKED_LEAVE_XDATA
    806          }
    807          
    808          /*********************************************************************
    809           * @fn          ZDP_SimpleDescMsg
    810           *
    811           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    812           *              specified device.
    813           *
    814           * @param       inMsg - incoming message (request)
    815           * @param       Status - message status (ZDP_SUCCESS or other)
    816           * @param       pSimpleDesc - pointer to the node descriptor
    817           *
    818           * @return      afStatus_t
    819           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    820          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    821                                        SimpleDescriptionFormat_t *pSimpleDesc )
    822          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8A..         MOV     ?V6,R2
   \   000018   8B..         MOV     ?V7,R3
   \   00001A   8C..         MOV     ?V0,R4
   \   00001C   8D..         MOV     ?V1,R5
    823            uint8 *pBuf = ZDP_TmpBuf;
   \   00001E   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FE           MOV     R6,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FF           MOV     R7,A
    824            uint8 i, len;
    825          
    826            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   703D         JNZ     ??ZDP_SimpleDescMsg_0
   \   00002F   E5..         MOV     A,?V0
   \   000031   45..         ORL     A,?V1
   \   000033   6037         JZ      ??ZDP_SimpleDescMsg_0
    827            {
    828              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    829              len = 1 + 2 + 1 + 8;
   \   000035   75..0C       MOV     ?V3,#0xc
    830              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   000038   75F002       MOV     B,#0x2
   \   00003B   85..82       MOV     DPL,?V0
   \   00003E   85..83       MOV     DPH,?V1
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FA           MOV     R2,A
   \   000049   7B00         MOV     R3,#0x0
   \   00004B   85..82       MOV     DPL,?V0
   \   00004E   85..83       MOV     DPH,?V1
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F8           MOV     R0,A
   \   00005C   7900         MOV     R1,#0x0
   \   00005E   EA           MOV     A,R2
   \   00005F   28           ADD     A,R0
   \   000060   F8           MOV     R0,A
   \   000061   EB           MOV     A,R3
   \   000062   39           ADDC    A,R1
   \   000063   F9           MOV     R1,A
   \   000064   E8           MOV     A,R0
   \   000065   A4           MUL     AB
   \   000066   25..         ADD     A,?V3
   \   000068   F5..         MOV     ?V3,A
   \   00006A   8003         SJMP    ??ZDP_SimpleDescMsg_1
    831            }
    832            else
    833            {
    834              len = 1 + 2 + 1; // Status + desc length
   \                     ??ZDP_SimpleDescMsg_0:
   \   00006C   75..04       MOV     ?V3,#0x4
    835            }
    836            if ( len >= ZDP_BUF_SZ-1 )
   \                     ??ZDP_SimpleDescMsg_1:
   \   00006F   E5..         MOV     A,?V3
   \   000071   C3           CLR     C
   \   000072   944F         SUBB    A,#0x4f
   \   000074   4005         JC      ??ZDP_SimpleDescMsg_2
    837            {
    838              return afStatus_MEM_FAIL;
   \   000076   7910         MOV     R1,#0x10
   \   000078   02....       LJMP    ??ZDP_SimpleDescMsg_3 & 0xFFFF
    839            }
    840          
    841            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_2:
   \   00007B   85..82       MOV     DPL,?XSP + 0
   \   00007E   85..83       MOV     DPH,?XSP + 1
   \   000081   E0           MOVX    A,@DPTR
   \   000082   C0E0         PUSH    A
   \   000084   8E82         MOV     DPL,R6
   \   000086   8F83         MOV     DPH,R7
   \   000088   D0E0         POP     A
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   8E82         MOV     DPL,R6
   \   00008D   8F83         MOV     DPH,R7
   \   00008F   A3           INC     DPTR
   \   000090   AE82         MOV     R6,DPL
   \   000092   AF83         MOV     R7,DPH
    842          
    843            *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \   000094   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F8           MOV     R0,A
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   F9           MOV     R1,A
   \   00009C   E8           MOV     A,R0
   \   00009D   C0E0         PUSH    A
   \   00009F   8E82         MOV     DPL,R6
   \   0000A1   8F83         MOV     DPH,R7
   \   0000A3   D0E0         POP     A
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   8E82         MOV     DPL,R6
   \   0000A8   8F83         MOV     DPH,R7
   \   0000AA   A3           INC     DPTR
   \   0000AB   AE82         MOV     R6,DPL
   \   0000AD   AF83         MOV     R7,DPH
    844            *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \   0000AF   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F8           MOV     R0,A
   \   0000B4   A3           INC     DPTR
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   F9           MOV     R1,A
   \   0000B7   E4           CLR     A
   \   0000B8   C9           XCH     A,R1
   \   0000B9   F8           MOV     R0,A
   \   0000BA   E8           MOV     A,R0
   \   0000BB   C0E0         PUSH    A
   \   0000BD   8E82         MOV     DPL,R6
   \   0000BF   8F83         MOV     DPH,R7
   \   0000C1   D0E0         POP     A
   \   0000C3   F0           MOVX    @DPTR,A
   \   0000C4   8E82         MOV     DPL,R6
   \   0000C6   8F83         MOV     DPH,R7
   \   0000C8   A3           INC     DPTR
   \   0000C9   AE82         MOV     R6,DPL
   \   0000CB   AF83         MOV     R7,DPH
    845          
    846            if ( len > 4 )
   \   0000CD   E5..         MOV     A,?V3
   \   0000CF   C3           CLR     C
   \   0000D0   9405         SUBB    A,#0x5
   \   0000D2   5003         JNC     $+5
   \   0000D4   02....       LJMP    ??ZDP_SimpleDescMsg_4 & 0xFFFF
    847            {
    848              *pBuf++ = len - 4;   // Simple descriptor length
   \   0000D7   74FC         MOV     A,#-0x4
   \   0000D9   25..         ADD     A,?V3
   \   0000DB   C0E0         PUSH    A
   \   0000DD   8E82         MOV     DPL,R6
   \   0000DF   8F83         MOV     DPH,R7
   \   0000E1   D0E0         POP     A
   \   0000E3   F0           MOVX    @DPTR,A
   \   0000E4   8E82         MOV     DPL,R6
   \   0000E6   8F83         MOV     DPH,R7
   \   0000E8   A3           INC     DPTR
   \   0000E9   AE82         MOV     R6,DPL
   \   0000EB   AF83         MOV     R7,DPH
    849          
    850              *pBuf++ = pSimpleDesc->EndPoint;
   \   0000ED   85..82       MOV     DPL,?V0
   \   0000F0   85..83       MOV     DPH,?V1
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   C0E0         PUSH    A
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   D0E0         POP     A
   \   0000FC   F0           MOVX    @DPTR,A
   \   0000FD   8E82         MOV     DPL,R6
   \   0000FF   8F83         MOV     DPH,R7
   \   000101   A3           INC     DPTR
   \   000102   AE82         MOV     R6,DPL
   \   000104   AF83         MOV     R7,DPH
    851              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \   000106   85..82       MOV     DPL,?V0
   \   000109   85..83       MOV     DPH,?V1
   \   00010C   A3           INC     DPTR
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   F8           MOV     R0,A
   \   00010F   A3           INC     DPTR
   \   000110   E0           MOVX    A,@DPTR
   \   000111   F9           MOV     R1,A
   \   000112   E8           MOV     A,R0
   \   000113   C0E0         PUSH    A
   \   000115   8E82         MOV     DPL,R6
   \   000117   8F83         MOV     DPH,R7
   \   000119   D0E0         POP     A
   \   00011B   F0           MOVX    @DPTR,A
   \   00011C   8E82         MOV     DPL,R6
   \   00011E   8F83         MOV     DPH,R7
   \   000120   A3           INC     DPTR
   \   000121   AE82         MOV     R6,DPL
   \   000123   AF83         MOV     R7,DPH
    852              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
   \   000125   85..82       MOV     DPL,?V0
   \   000128   85..83       MOV     DPH,?V1
   \   00012B   A3           INC     DPTR
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   F8           MOV     R0,A
   \   00012E   A3           INC     DPTR
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   F9           MOV     R1,A
   \   000131   E4           CLR     A
   \   000132   C9           XCH     A,R1
   \   000133   F8           MOV     R0,A
   \   000134   E8           MOV     A,R0
   \   000135   C0E0         PUSH    A
   \   000137   8E82         MOV     DPL,R6
   \   000139   8F83         MOV     DPH,R7
   \   00013B   D0E0         POP     A
   \   00013D   F0           MOVX    @DPTR,A
   \   00013E   8E82         MOV     DPL,R6
   \   000140   8F83         MOV     DPH,R7
   \   000142   A3           INC     DPTR
   \   000143   AE82         MOV     R6,DPL
   \   000145   AF83         MOV     R7,DPH
    853              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \   000147   85..82       MOV     DPL,?V0
   \   00014A   85..83       MOV     DPH,?V1
   \   00014D   A3           INC     DPTR
   \   00014E   A3           INC     DPTR
   \   00014F   A3           INC     DPTR
   \   000150   E0           MOVX    A,@DPTR
   \   000151   F8           MOV     R0,A
   \   000152   A3           INC     DPTR
   \   000153   E0           MOVX    A,@DPTR
   \   000154   F9           MOV     R1,A
   \   000155   E8           MOV     A,R0
   \   000156   C0E0         PUSH    A
   \   000158   8E82         MOV     DPL,R6
   \   00015A   8F83         MOV     DPH,R7
   \   00015C   D0E0         POP     A
   \   00015E   F0           MOVX    @DPTR,A
   \   00015F   8E82         MOV     DPL,R6
   \   000161   8F83         MOV     DPH,R7
   \   000163   A3           INC     DPTR
   \   000164   AE82         MOV     R6,DPL
   \   000166   AF83         MOV     R7,DPH
    854              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
   \   000168   85..82       MOV     DPL,?V0
   \   00016B   85..83       MOV     DPH,?V1
   \   00016E   A3           INC     DPTR
   \   00016F   A3           INC     DPTR
   \   000170   A3           INC     DPTR
   \   000171   E0           MOVX    A,@DPTR
   \   000172   F8           MOV     R0,A
   \   000173   A3           INC     DPTR
   \   000174   E0           MOVX    A,@DPTR
   \   000175   F9           MOV     R1,A
   \   000176   E4           CLR     A
   \   000177   C9           XCH     A,R1
   \   000178   F8           MOV     R0,A
   \   000179   E8           MOV     A,R0
   \   00017A   C0E0         PUSH    A
   \   00017C   8E82         MOV     DPL,R6
   \   00017E   8F83         MOV     DPH,R7
   \   000180   D0E0         POP     A
   \   000182   F0           MOVX    @DPTR,A
   \   000183   8E82         MOV     DPL,R6
   \   000185   8F83         MOV     DPH,R7
   \   000187   A3           INC     DPTR
   \   000188   AE82         MOV     R6,DPL
   \   00018A   AF83         MOV     R7,DPH
    855          
    856              *pBuf++ = (byte)(pSimpleDesc->AppDevVer << 4);
   \   00018C   85..82       MOV     DPL,?V0
   \   00018F   85..83       MOV     DPH,?V1
   \   000192   A3           INC     DPTR
   \   000193   A3           INC     DPTR
   \   000194   A3           INC     DPTR
   \   000195   A3           INC     DPTR
   \   000196   A3           INC     DPTR
   \   000197   E0           MOVX    A,@DPTR
   \   000198   C4           SWAP    A
   \   000199   54F0         ANL     A,#0xf0
   \   00019B   C0E0         PUSH    A
   \   00019D   8E82         MOV     DPL,R6
   \   00019F   8F83         MOV     DPH,R7
   \   0001A1   D0E0         POP     A
   \   0001A3   F0           MOVX    @DPTR,A
   \   0001A4   8E82         MOV     DPL,R6
   \   0001A6   8F83         MOV     DPH,R7
   \   0001A8   A3           INC     DPTR
   \   0001A9   AE82         MOV     R6,DPL
   \   0001AB   AF83         MOV     R7,DPH
    857          
    858              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \   0001AD   85..82       MOV     DPL,?V0
   \   0001B0   85..83       MOV     DPH,?V1
   \   0001B3   A3           INC     DPTR
   \   0001B4   A3           INC     DPTR
   \   0001B5   A3           INC     DPTR
   \   0001B6   A3           INC     DPTR
   \   0001B7   A3           INC     DPTR
   \   0001B8   A3           INC     DPTR
   \   0001B9   E0           MOVX    A,@DPTR
   \   0001BA   C0E0         PUSH    A
   \   0001BC   8E82         MOV     DPL,R6
   \   0001BE   8F83         MOV     DPH,R7
   \   0001C0   D0E0         POP     A
   \   0001C2   F0           MOVX    @DPTR,A
   \   0001C3   8E82         MOV     DPL,R6
   \   0001C5   8F83         MOV     DPH,R7
   \   0001C7   A3           INC     DPTR
   \   0001C8   AE82         MOV     R6,DPL
   \   0001CA   AF83         MOV     R7,DPH
    859              if ( pSimpleDesc->AppNumInClusters )
   \   0001CC   85..82       MOV     DPL,?V0
   \   0001CF   85..83       MOV     DPH,?V1
   \   0001D2   A3           INC     DPTR
   \   0001D3   A3           INC     DPTR
   \   0001D4   A3           INC     DPTR
   \   0001D5   A3           INC     DPTR
   \   0001D6   A3           INC     DPTR
   \   0001D7   A3           INC     DPTR
   \   0001D8   E0           MOVX    A,@DPTR
   \   0001D9   7003         JNZ     $+5
   \   0001DB   02....       LJMP    ??ZDP_SimpleDescMsg_5 & 0xFFFF
    860              {
    861                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   0001DE   75..00       MOV     ?V2,#0x0
   \                     ??ZDP_SimpleDescMsg_6:
   \   0001E1   85..82       MOV     DPL,?V0
   \   0001E4   85..83       MOV     DPH,?V1
   \   0001E7   A3           INC     DPTR
   \   0001E8   A3           INC     DPTR
   \   0001E9   A3           INC     DPTR
   \   0001EA   A3           INC     DPTR
   \   0001EB   A3           INC     DPTR
   \   0001EC   A3           INC     DPTR
   \   0001ED   E0           MOVX    A,@DPTR
   \   0001EE   F8           MOV     R0,A
   \   0001EF   E5..         MOV     A,?V2
   \   0001F1   C3           CLR     C
   \   0001F2   98           SUBB    A,R0
   \   0001F3   4003         JC      $+5
   \   0001F5   02....       LJMP    ??ZDP_SimpleDescMsg_5 & 0xFFFF
    862                {
    863                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \   0001F8   A8..         MOV     R0,?V2
   \   0001FA   7900         MOV     R1,#0x0
   \   0001FC   E8           MOV     A,R0
   \   0001FD   75F002       MOV     B,#0x2
   \   000200   A4           MUL     AB
   \   000201   C8           XCH     A,R0
   \   000202   AAF0         MOV     R2,B
   \   000204   75F000       MOV     B,#0x0
   \   000207   A4           MUL     AB
   \   000208   2A           ADD     A,R2
   \   000209   FA           MOV     R2,A
   \   00020A   75F002       MOV     B,#0x2
   \   00020D   E9           MOV     A,R1
   \   00020E   A4           MUL     AB
   \   00020F   2A           ADD     A,R2
   \   000210   F9           MOV     R1,A
   \   000211   85..82       MOV     DPL,?V0
   \   000214   85..83       MOV     DPH,?V1
   \   000217   A3           INC     DPTR
   \   000218   A3           INC     DPTR
   \   000219   A3           INC     DPTR
   \   00021A   A3           INC     DPTR
   \   00021B   A3           INC     DPTR
   \   00021C   A3           INC     DPTR
   \   00021D   A3           INC     DPTR
   \   00021E   E0           MOVX    A,@DPTR
   \   00021F   28           ADD     A,R0
   \   000220   FA           MOV     R2,A
   \   000221   A3           INC     DPTR
   \   000222   E0           MOVX    A,@DPTR
   \   000223   39           ADDC    A,R1
   \   000224   8A82         MOV     DPL,R2
   \   000226   F583         MOV     DPH,A
   \   000228   E0           MOVX    A,@DPTR
   \   000229   F8           MOV     R0,A
   \   00022A   A3           INC     DPTR
   \   00022B   E0           MOVX    A,@DPTR
   \   00022C   F9           MOV     R1,A
   \   00022D   E8           MOV     A,R0
   \   00022E   C0E0         PUSH    A
   \   000230   8E82         MOV     DPL,R6
   \   000232   8F83         MOV     DPH,R7
   \   000234   D0E0         POP     A
   \   000236   F0           MOVX    @DPTR,A
   \   000237   8E82         MOV     DPL,R6
   \   000239   8F83         MOV     DPH,R7
   \   00023B   A3           INC     DPTR
   \   00023C   AE82         MOV     R6,DPL
   \   00023E   AF83         MOV     R7,DPH
    864                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \   000240   A8..         MOV     R0,?V2
   \   000242   7900         MOV     R1,#0x0
   \   000244   E8           MOV     A,R0
   \   000245   75F002       MOV     B,#0x2
   \   000248   A4           MUL     AB
   \   000249   C8           XCH     A,R0
   \   00024A   AAF0         MOV     R2,B
   \   00024C   75F000       MOV     B,#0x0
   \   00024F   A4           MUL     AB
   \   000250   2A           ADD     A,R2
   \   000251   FA           MOV     R2,A
   \   000252   75F002       MOV     B,#0x2
   \   000255   E9           MOV     A,R1
   \   000256   A4           MUL     AB
   \   000257   2A           ADD     A,R2
   \   000258   F9           MOV     R1,A
   \   000259   85..82       MOV     DPL,?V0
   \   00025C   85..83       MOV     DPH,?V1
   \   00025F   A3           INC     DPTR
   \   000260   A3           INC     DPTR
   \   000261   A3           INC     DPTR
   \   000262   A3           INC     DPTR
   \   000263   A3           INC     DPTR
   \   000264   A3           INC     DPTR
   \   000265   A3           INC     DPTR
   \   000266   E0           MOVX    A,@DPTR
   \   000267   28           ADD     A,R0
   \   000268   FA           MOV     R2,A
   \   000269   A3           INC     DPTR
   \   00026A   E0           MOVX    A,@DPTR
   \   00026B   39           ADDC    A,R1
   \   00026C   8A82         MOV     DPL,R2
   \   00026E   F583         MOV     DPH,A
   \   000270   E0           MOVX    A,@DPTR
   \   000271   F8           MOV     R0,A
   \   000272   A3           INC     DPTR
   \   000273   E0           MOVX    A,@DPTR
   \   000274   F9           MOV     R1,A
   \   000275   E4           CLR     A
   \   000276   C9           XCH     A,R1
   \   000277   F8           MOV     R0,A
   \   000278   E8           MOV     A,R0
   \   000279   C0E0         PUSH    A
   \   00027B   8E82         MOV     DPL,R6
   \   00027D   8F83         MOV     DPH,R7
   \   00027F   D0E0         POP     A
   \   000281   F0           MOVX    @DPTR,A
   \   000282   8E82         MOV     DPL,R6
   \   000284   8F83         MOV     DPH,R7
   \   000286   A3           INC     DPTR
   \   000287   AE82         MOV     R6,DPL
   \   000289   AF83         MOV     R7,DPH
    865                }
   \   00028B   05..         INC     ?V2
   \   00028D   02....       LJMP    ??ZDP_SimpleDescMsg_6 & 0xFFFF
    866              }
    867          
    868              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_5:
   \   000290   85..82       MOV     DPL,?V0
   \   000293   85..83       MOV     DPH,?V1
   \   000296   A3           INC     DPTR
   \   000297   A3           INC     DPTR
   \   000298   A3           INC     DPTR
   \   000299   A3           INC     DPTR
   \   00029A   A3           INC     DPTR
   \   00029B   A3           INC     DPTR
   \   00029C   A3           INC     DPTR
   \   00029D   A3           INC     DPTR
   \   00029E   A3           INC     DPTR
   \   00029F   E0           MOVX    A,@DPTR
   \   0002A0   C0E0         PUSH    A
   \   0002A2   8E82         MOV     DPL,R6
   \   0002A4   8F83         MOV     DPH,R7
   \   0002A6   D0E0         POP     A
   \   0002A8   F0           MOVX    @DPTR,A
   \   0002A9   8E82         MOV     DPL,R6
   \   0002AB   8F83         MOV     DPH,R7
   \   0002AD   A3           INC     DPTR
   \   0002AE   AE82         MOV     R6,DPL
   \   0002B0   AF83         MOV     R7,DPH
    869              if ( pSimpleDesc->AppNumOutClusters )
   \   0002B2   85..82       MOV     DPL,?V0
   \   0002B5   85..83       MOV     DPH,?V1
   \   0002B8   A3           INC     DPTR
   \   0002B9   A3           INC     DPTR
   \   0002BA   A3           INC     DPTR
   \   0002BB   A3           INC     DPTR
   \   0002BC   A3           INC     DPTR
   \   0002BD   A3           INC     DPTR
   \   0002BE   A3           INC     DPTR
   \   0002BF   A3           INC     DPTR
   \   0002C0   A3           INC     DPTR
   \   0002C1   E0           MOVX    A,@DPTR
   \   0002C2   7003         JNZ     $+5
   \   0002C4   02....       LJMP    ??ZDP_SimpleDescMsg_7 & 0xFFFF
    870              {
    871                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   0002C7   75..00       MOV     ?V2,#0x0
   \                     ??ZDP_SimpleDescMsg_8:
   \   0002CA   85..82       MOV     DPL,?V0
   \   0002CD   85..83       MOV     DPH,?V1
   \   0002D0   A3           INC     DPTR
   \   0002D1   A3           INC     DPTR
   \   0002D2   A3           INC     DPTR
   \   0002D3   A3           INC     DPTR
   \   0002D4   A3           INC     DPTR
   \   0002D5   A3           INC     DPTR
   \   0002D6   A3           INC     DPTR
   \   0002D7   A3           INC     DPTR
   \   0002D8   A3           INC     DPTR
   \   0002D9   E0           MOVX    A,@DPTR
   \   0002DA   F8           MOV     R0,A
   \   0002DB   E5..         MOV     A,?V2
   \   0002DD   C3           CLR     C
   \   0002DE   98           SUBB    A,R0
   \   0002DF   4003         JC      $+5
   \   0002E1   02....       LJMP    ??ZDP_SimpleDescMsg_7 & 0xFFFF
    872                {
    873                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   0002E4   A8..         MOV     R0,?V2
   \   0002E6   7900         MOV     R1,#0x0
   \   0002E8   E8           MOV     A,R0
   \   0002E9   75F002       MOV     B,#0x2
   \   0002EC   A4           MUL     AB
   \   0002ED   C8           XCH     A,R0
   \   0002EE   AAF0         MOV     R2,B
   \   0002F0   75F000       MOV     B,#0x0
   \   0002F3   A4           MUL     AB
   \   0002F4   2A           ADD     A,R2
   \   0002F5   FA           MOV     R2,A
   \   0002F6   75F002       MOV     B,#0x2
   \   0002F9   E9           MOV     A,R1
   \   0002FA   A4           MUL     AB
   \   0002FB   2A           ADD     A,R2
   \   0002FC   F9           MOV     R1,A
   \   0002FD   85..82       MOV     DPL,?V0
   \   000300   85..83       MOV     DPH,?V1
   \   000303   A3           INC     DPTR
   \   000304   A3           INC     DPTR
   \   000305   A3           INC     DPTR
   \   000306   A3           INC     DPTR
   \   000307   A3           INC     DPTR
   \   000308   A3           INC     DPTR
   \   000309   A3           INC     DPTR
   \   00030A   A3           INC     DPTR
   \   00030B   A3           INC     DPTR
   \   00030C   A3           INC     DPTR
   \   00030D   E0           MOVX    A,@DPTR
   \   00030E   28           ADD     A,R0
   \   00030F   FA           MOV     R2,A
   \   000310   A3           INC     DPTR
   \   000311   E0           MOVX    A,@DPTR
   \   000312   39           ADDC    A,R1
   \   000313   8A82         MOV     DPL,R2
   \   000315   F583         MOV     DPH,A
   \   000317   E0           MOVX    A,@DPTR
   \   000318   F8           MOV     R0,A
   \   000319   A3           INC     DPTR
   \   00031A   E0           MOVX    A,@DPTR
   \   00031B   F9           MOV     R1,A
   \   00031C   E8           MOV     A,R0
   \   00031D   C0E0         PUSH    A
   \   00031F   8E82         MOV     DPL,R6
   \   000321   8F83         MOV     DPH,R7
   \   000323   D0E0         POP     A
   \   000325   F0           MOVX    @DPTR,A
   \   000326   8E82         MOV     DPL,R6
   \   000328   8F83         MOV     DPH,R7
   \   00032A   A3           INC     DPTR
   \   00032B   AE82         MOV     R6,DPL
   \   00032D   AF83         MOV     R7,DPH
    874                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   00032F   A8..         MOV     R0,?V2
   \   000331   7900         MOV     R1,#0x0
   \   000333   E8           MOV     A,R0
   \   000334   75F002       MOV     B,#0x2
   \   000337   A4           MUL     AB
   \   000338   C8           XCH     A,R0
   \   000339   AAF0         MOV     R2,B
   \   00033B   75F000       MOV     B,#0x0
   \   00033E   A4           MUL     AB
   \   00033F   2A           ADD     A,R2
   \   000340   FA           MOV     R2,A
   \   000341   75F002       MOV     B,#0x2
   \   000344   E9           MOV     A,R1
   \   000345   A4           MUL     AB
   \   000346   2A           ADD     A,R2
   \   000347   F9           MOV     R1,A
   \   000348   85..82       MOV     DPL,?V0
   \   00034B   85..83       MOV     DPH,?V1
   \   00034E   A3           INC     DPTR
   \   00034F   A3           INC     DPTR
   \   000350   A3           INC     DPTR
   \   000351   A3           INC     DPTR
   \   000352   A3           INC     DPTR
   \   000353   A3           INC     DPTR
   \   000354   A3           INC     DPTR
   \   000355   A3           INC     DPTR
   \   000356   A3           INC     DPTR
   \   000357   A3           INC     DPTR
   \   000358   E0           MOVX    A,@DPTR
   \   000359   28           ADD     A,R0
   \   00035A   FA           MOV     R2,A
   \   00035B   A3           INC     DPTR
   \   00035C   E0           MOVX    A,@DPTR
   \   00035D   39           ADDC    A,R1
   \   00035E   8A82         MOV     DPL,R2
   \   000360   F583         MOV     DPH,A
   \   000362   E0           MOVX    A,@DPTR
   \   000363   F8           MOV     R0,A
   \   000364   A3           INC     DPTR
   \   000365   E0           MOVX    A,@DPTR
   \   000366   F9           MOV     R1,A
   \   000367   E4           CLR     A
   \   000368   C9           XCH     A,R1
   \   000369   F8           MOV     R0,A
   \   00036A   E8           MOV     A,R0
   \   00036B   C0E0         PUSH    A
   \   00036D   8E82         MOV     DPL,R6
   \   00036F   8F83         MOV     DPH,R7
   \   000371   D0E0         POP     A
   \   000373   F0           MOVX    @DPTR,A
   \   000374   8E82         MOV     DPL,R6
   \   000376   8F83         MOV     DPH,R7
   \   000378   A3           INC     DPTR
   \   000379   AE82         MOV     R6,DPL
   \   00037B   AF83         MOV     R7,DPH
    875                }
   \   00037D   05..         INC     ?V2
   \   00037F   02....       LJMP    ??ZDP_SimpleDescMsg_8 & 0xFFFF
    876              }
    877            }
    878          
    879            else
    880            {
    881              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_4:
   \   000382   8E82         MOV     DPL,R6
   \   000384   8F83         MOV     DPH,R7
   \   000386   7400         MOV     A,#0x0
   \   000388   F0           MOVX    @DPTR,A
    882            }
    883          
    884            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_7:
   \   000389                ; Setup parameters for call to function fillAndSend
   \   000389   75..04       MOV     ?V4,#0x4
   \   00038C   75..80       MOV     ?V5,#-0x80
   \   00038F   78..         MOV     R0,#?V4
   \   000391   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000394   A9..         MOV     R1,?V3
   \   000396   E5..         MOV     A,?V6
   \   000398   2402         ADD     A,#0x2
   \   00039A   FC           MOV     R4,A
   \   00039B   E4           CLR     A
   \   00039C   35..         ADDC    A,?V7
   \   00039E   FD           MOV     R5,A
   \   00039F   E5..         MOV     A,?V6
   \   0003A1   240F         ADD     A,#0xf
   \   0003A3   FA           MOV     R2,A
   \   0003A4   E4           CLR     A
   \   0003A5   35..         ADDC    A,?V7
   \   0003A7   FB           MOV     R3,A
   \   0003A8   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0003AB   7402         MOV     A,#0x2
   \   0003AD   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_3:
   \   0003B0   7401         MOV     A,#0x1
   \   0003B2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003B5   7F08         MOV     R7,#0x8
   \   0003B7   02....       LJMP    ?BANKED_LEAVE_XDATA
    885          }
    886          
    887          /*********************************************************************
    888           * @fn          ZDP_EPRsp
    889           *
    890           * @brief       This builds and send an endpoint list. Used in
    891           *              Active_EP_rsp and Match_Desc_Rsp
    892           *              message.  This function sends unicast message to the
    893           *              requesting device.
    894           *
    895           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
    896           * @param       dstAddr - destination address
    897           * @param       Status - message status (ZDP_SUCCESS or other)
    898           * @param       nwkAddr - Device's short address that this response describes
    899           * @param       Count - number of endpoint/interfaces in list
    900           * @param       pEPIntfList - Array of Endpoint/Interfaces
    901           * @param       SecurityEnable - Security Options
    902           *
    903           * @return      afStatus_t
    904           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    905          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
    906                                  byte Status, uint16 nwkAddr, byte Count,
    907                                  uint8 *pEPList,
    908                                  byte SecurityEnable )
    909          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   D0E0         POP     A
   \   000014   F0           MOVX    @DPTR,A
   \   000015   7403         MOV     A,#0x3
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   EC           MOV     A,R4
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   ED           MOV     A,R5
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   8A..         MOV     ?V6,R2
   \   000021   8B..         MOV     ?V7,R3
   \   000023   7416         MOV     A,#0x16
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V4,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V5,A
   \   00002F   7418         MOV     A,#0x18
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V3,A
    910            uint8 *pBuf = ZDP_TmpBuf;
   \   000037   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   FE           MOV     R6,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FF           MOV     R7,A
    911            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \   00003F   7401         MOV     A,#0x1
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   7404         MOV     A,#0x4
   \   000046   F0           MOVX    @DPTR,A
    912            byte txOptions;
    913          
    914            (void)SecurityEnable;  // Intentionally unreferenced parameter
    915          
    916            if ( MsgType == Match_Desc_rsp )
   \   000047   7406         MOV     A,#0x6
   \   000049   65..         XRL     A,?V6
   \   00004B   7004         JNZ     ??ZDP_EPRsp_0
   \   00004D   7480         MOV     A,#-0x80
   \   00004F   65..         XRL     A,?V7
   \                     ??ZDP_EPRsp_0:
   \   000051   700B         JNZ     ??ZDP_EPRsp_1
    917              txOptions = AF_MSG_ACK_REQUEST;
   \   000053   85..82       MOV     DPL,?XSP + 0
   \   000056   85..83       MOV     DPH,?XSP + 1
   \   000059   7410         MOV     A,#0x10
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   8009         SJMP    ??ZDP_EPRsp_2
    918            else
    919              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   00005E   85..82       MOV     DPL,?XSP + 0
   \   000061   85..83       MOV     DPH,?XSP + 1
   \   000064   7400         MOV     A,#0x0
   \   000066   F0           MOVX    @DPTR,A
    920          
    921              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   000067   7415         MOV     A,#0x15
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   C0E0         PUSH    A
   \   00006F   8E82         MOV     DPL,R6
   \   000071   8F83         MOV     DPH,R7
   \   000073   D0E0         POP     A
   \   000075   F0           MOVX    @DPTR,A
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   A3           INC     DPTR
   \   00007B   AE82         MOV     R6,DPL
   \   00007D   AF83         MOV     R7,DPH
    922            *pBuf++ = LO_UINT16( nwkAddr );
   \   00007F   E5..         MOV     A,?V4
   \   000081   C0E0         PUSH    A
   \   000083   8E82         MOV     DPL,R6
   \   000085   8F83         MOV     DPH,R7
   \   000087   D0E0         POP     A
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   8E82         MOV     DPL,R6
   \   00008C   8F83         MOV     DPH,R7
   \   00008E   A3           INC     DPTR
   \   00008F   AE82         MOV     R6,DPL
   \   000091   AF83         MOV     R7,DPH
    923            *pBuf++ = HI_UINT16( nwkAddr );
   \   000093   A8..         MOV     R0,?V4
   \   000095   A9..         MOV     R1,?V5
   \   000097   E4           CLR     A
   \   000098   C9           XCH     A,R1
   \   000099   F8           MOV     R0,A
   \   00009A   E8           MOV     A,R0
   \   00009B   C0E0         PUSH    A
   \   00009D   8E82         MOV     DPL,R6
   \   00009F   8F83         MOV     DPH,R7
   \   0000A1   D0E0         POP     A
   \   0000A3   F0           MOVX    @DPTR,A
   \   0000A4   8E82         MOV     DPL,R6
   \   0000A6   8F83         MOV     DPH,R7
   \   0000A8   A3           INC     DPTR
   \   0000A9   AE82         MOV     R6,DPL
   \   0000AB   AF83         MOV     R7,DPH
    924          
    925            *pBuf++ = Count;   // Endpoint/Interface count
   \   0000AD   E5..         MOV     A,?V3
   \   0000AF   C0E0         PUSH    A
   \   0000B1   8E82         MOV     DPL,R6
   \   0000B3   8F83         MOV     DPH,R7
   \   0000B5   D0E0         POP     A
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   8E82         MOV     DPL,R6
   \   0000BA   8F83         MOV     DPH,R7
   \   0000BC   A3           INC     DPTR
   \   0000BD   AE82         MOV     R6,DPL
   \   0000BF   AF83         MOV     R7,DPH
    926          
    927            if ( Count )
   \   0000C1   E5..         MOV     A,?V3
   \   0000C3   602D         JZ      ??ZDP_EPRsp_3
    928            {
    929              len += Count;
   \   0000C5   7401         MOV     A,#0x1
   \   0000C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   25..         ADD     A,?V3
   \   0000CD   F0           MOVX    @DPTR,A
    930              osal_memcpy( pBuf, pEPList, Count );
   \   0000CE                ; Setup parameters for call to function osal_memcpy
   \   0000CE   7419         MOV     A,#0x19
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   F5..         MOV     ?V0,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   F5..         MOV     ?V1,A
   \   0000DA   75..00       MOV     ?V2,#0x0
   \   0000DD   78..         MOV     R0,#?V0
   \   0000DF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E2   AC..         MOV     R4,?V3
   \   0000E4   7D00         MOV     R5,#0x0
   \   0000E6   EE           MOV     A,R6
   \   0000E7   FA           MOV     R2,A
   \   0000E8   EF           MOV     A,R7
   \   0000E9   FB           MOV     R3,A
   \   0000EA   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000ED   7403         MOV     A,#0x3
   \   0000EF   12....       LCALL   ?DEALLOC_XSTACK8
    931            }
    932          
    933            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   0000F2   85..82       MOV     DPL,?XSP + 0
   \   0000F5   85..83       MOV     DPH,?XSP + 1
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000FC   F0           MOVX    @DPTR,A
   \   0000FD                ; Setup parameters for call to function fillAndSend
   \   0000FD   78..         MOV     R0,#?V6
   \   0000FF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000102   7403         MOV     A,#0x3
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   E0           MOVX    A,@DPTR
   \   000108   F9           MOV     R1,A
   \   000109   7405         MOV     A,#0x5
   \   00010B   12....       LCALL   ?XSTACK_DISP0_8
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   FC           MOV     R4,A
   \   000110   A3           INC     DPTR
   \   000111   E0           MOVX    A,@DPTR
   \   000112   FD           MOV     R5,A
   \   000113   7404         MOV     A,#0x4
   \   000115   12....       LCALL   ?XSTACK_DISP101_8
   \   000118   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00011B   7402         MOV     A,#0x2
   \   00011D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000120   E9           MOV     A,R1
   \   000121   F5..         MOV     ?V0,A
   \   000123   90....       MOV     DPTR,#ZDP_TxOptions
   \   000126   7400         MOV     A,#0x0
   \   000128   F0           MOVX    @DPTR,A
   \   000129   A9..         MOV     R1,?V0
   \   00012B   7405         MOV     A,#0x5
   \   00012D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000130   7F08         MOV     R7,#0x8
   \   000132   02....       LJMP    ?BANKED_LEAVE_XDATA
    934          }
    935          
    936          /*********************************************************************
    937           * @fn          ZDP_UserDescRsp
    938           *
    939           * @brief       Build and send the User Decriptor Response.
    940           *
    941           *
    942           * @param       dstAddr - destination address
    943           * @param       nwkAddrOfInterest -
    944           * @param       userDesc -
    945           * @param       SecurityEnable - Security Options
    946           *
    947           * @return      ZStatus_t
    948           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    949          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
    950                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
    951                          byte SecurityEnable )
    952          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   8C..         MOV     ?V4,R4
   \   000022   8D..         MOV     ?V5,R5
   \   000024   7413         MOV     A,#0x13
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V6,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V7,A
    953            uint8 *pBuf = ZDP_TmpBuf;
   \   000030   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FE           MOV     R6,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   FF           MOV     R7,A
    954            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
   \   000038   75..04       MOV     ?V3,#0x4
    955          
    956            (void)SecurityEnable;  // Intentionally unreferenced parameter
    957          
    958            len += userDesc->len;
   \   00003B   85..82       MOV     DPL,?V6
   \   00003E   85..83       MOV     DPH,?V7
   \   000041   E0           MOVX    A,@DPTR
   \   000042   25..         ADD     A,?V3
   \   000044   F5..         MOV     ?V3,A
    959          
    960            *pBuf++ = ZSUCCESS;
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   7400         MOV     A,#0x0
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   A3           INC     DPTR
   \   000052   AE82         MOV     R6,DPL
   \   000054   AF83         MOV     R7,DPH
    961          
    962            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   \   000056   E5..         MOV     A,?V4
   \   000058   C0E0         PUSH    A
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   D0E0         POP     A
   \   000060   F0           MOVX    @DPTR,A
   \   000061   8E82         MOV     DPL,R6
   \   000063   8F83         MOV     DPH,R7
   \   000065   A3           INC     DPTR
   \   000066   AE82         MOV     R6,DPL
   \   000068   AF83         MOV     R7,DPH
    963            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \   00006A   A8..         MOV     R0,?V4
   \   00006C   A9..         MOV     R1,?V5
   \   00006E   E4           CLR     A
   \   00006F   C9           XCH     A,R1
   \   000070   F8           MOV     R0,A
   \   000071   E8           MOV     A,R0
   \   000072   C0E0         PUSH    A
   \   000074   8E82         MOV     DPL,R6
   \   000076   8F83         MOV     DPH,R7
   \   000078   D0E0         POP     A
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   8E82         MOV     DPL,R6
   \   00007D   8F83         MOV     DPH,R7
   \   00007F   A3           INC     DPTR
   \   000080   AE82         MOV     R6,DPL
   \   000082   AF83         MOV     R7,DPH
    964          
    965            *pBuf++ = userDesc->len;
   \   000084   85..82       MOV     DPL,?V6
   \   000087   85..83       MOV     DPH,?V7
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   C0E0         PUSH    A
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   D0E0         POP     A
   \   000093   F0           MOVX    @DPTR,A
   \   000094   8E82         MOV     DPL,R6
   \   000096   8F83         MOV     DPH,R7
   \   000098   A3           INC     DPTR
   \   000099   AE82         MOV     R6,DPL
   \   00009B   AF83         MOV     R7,DPH
    966            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \   00009D                ; Setup parameters for call to function osal_memcpy
   \   00009D   85..82       MOV     DPL,?V6
   \   0000A0   85..83       MOV     DPH,?V7
   \   0000A3   A3           INC     DPTR
   \   0000A4   A982         MOV     R1,DPL
   \   0000A6   AA83         MOV     R2,DPH
   \   0000A8   7B00         MOV     R3,#0x0
   \   0000AA   89..         MOV     ?V0,R1
   \   0000AC   8A..         MOV     ?V1,R2
   \   0000AE   8B..         MOV     ?V2,R3
   \   0000B0   78..         MOV     R0,#?V0
   \   0000B2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B5   85..82       MOV     DPL,?V6
   \   0000B8   85..83       MOV     DPH,?V7
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   FC           MOV     R4,A
   \   0000BD   7D00         MOV     R5,#0x0
   \   0000BF   EE           MOV     A,R6
   \   0000C0   FA           MOV     R2,A
   \   0000C1   EF           MOV     A,R7
   \   0000C2   FB           MOV     R3,A
   \   0000C3   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000C6   7403         MOV     A,#0x3
   \   0000C8   12....       LCALL   ?DEALLOC_XSTACK8
    967          
    968            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   0000CB                ; Setup parameters for call to function fillAndSend
   \   0000CB   75..11       MOV     ?V0,#0x11
   \   0000CE   75..80       MOV     ?V1,#-0x80
   \   0000D1   78..         MOV     R0,#?V0
   \   0000D3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D6   A9..         MOV     R1,?V3
   \   0000D8   7403         MOV     A,#0x3
   \   0000DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   FC           MOV     R4,A
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   FD           MOV     R5,A
   \   0000E2   7402         MOV     A,#0x2
   \   0000E4   12....       LCALL   ?XSTACK_DISP101_8
   \   0000E7   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0000EA   7402         MOV     A,#0x2
   \   0000EC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EF   7403         MOV     A,#0x3
   \   0000F1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F4   7F08         MOV     R7,#0x8
   \   0000F6   02....       LJMP    ?BANKED_LEAVE_XDATA
    969          }
    970          
    971          /*********************************************************************
    972           * @fn          ZDP_ServerDiscRsp
    973           *
    974           * @brief       Build and send the Server_Discovery_rsp response.
    975           *
    976           * @param       transID - Transaction sequence number of request.
    977           * @param       dstAddr - Network Destination Address.
    978           * @param       status - Status of response to request.
    979           * @param       aoi - Network Address of Interest of request.
    980           * @param       serverMask - Bit map of service(s) being sought.
    981           * @param       SecurityEnable - Security Options
    982           *
    983           * @return      ZStatus_t
    984           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    985          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
    986                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
    987          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   8C..         MOV     ?V3,R4
   \   000022   8D..         MOV     ?V7,R5
   \   000024   7415         MOV     A,#0x15
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V1,A
    988            const byte len = 1  + 2;  // status + aoi + mask.
   \   000030   75..03       MOV     ?V2,#0x3
    989            uint8 *pBuf = ZDP_TmpBuf;
   \   000033   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000036   E0           MOVX    A,@DPTR
   \   000037   FE           MOV     R6,A
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   FF           MOV     R7,A
    990            ZStatus_t stat;
    991          
    992            // Intentionally unreferenced parameters
    993            (void)aoi;
    994            (void)SecurityEnable;
    995          
    996            *pBuf++ = status;
   \   00003B   E5..         MOV     A,?V3
   \   00003D   C0E0         PUSH    A
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   D0E0         POP     A
   \   000045   F0           MOVX    @DPTR,A
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   A3           INC     DPTR
   \   00004B   AE82         MOV     R6,DPL
   \   00004D   AF83         MOV     R7,DPH
    997          
    998            *pBuf++ = LO_UINT16( serverMask );
   \   00004F   E5..         MOV     A,?V0
   \   000051   C0E0         PUSH    A
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   D0E0         POP     A
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   A3           INC     DPTR
   \   00005F   AE82         MOV     R6,DPL
   \   000061   AF83         MOV     R7,DPH
    999            *pBuf++ = HI_UINT16( serverMask );
   \   000063   A8..         MOV     R0,?V0
   \   000065   A9..         MOV     R1,?V1
   \   000067   E4           CLR     A
   \   000068   C9           XCH     A,R1
   \   000069   F8           MOV     R0,A
   \   00006A   E8           MOV     A,R0
   \   00006B   C0E0         PUSH    A
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   D0E0         POP     A
   \   000073   F0           MOVX    @DPTR,A
   \   000074   8E82         MOV     DPL,R6
   \   000076   8F83         MOV     DPH,R7
   \   000078   A3           INC     DPTR
   \   000079   AE82         MOV     R6,DPL
   \   00007B   AF83         MOV     R7,DPH
   1000          
   1001            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   00007D   90....       MOV     DPTR,#ZDP_TxOptions
   \   000080   7410         MOV     A,#0x10
   \   000082   F0           MOVX    @DPTR,A
   1002            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   000083                ; Setup parameters for call to function fillAndSend
   \   000083   75..15       MOV     ?V4,#0x15
   \   000086   75..80       MOV     ?V5,#-0x80
   \   000089   78..         MOV     R0,#?V4
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008E   A9..         MOV     R1,?V2
   \   000090   7403         MOV     A,#0x3
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   E0           MOVX    A,@DPTR
   \   000096   FC           MOV     R4,A
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   FD           MOV     R5,A
   \   00009A   7402         MOV     A,#0x2
   \   00009C   12....       LCALL   ?XSTACK_DISP101_8
   \   00009F   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0000A2   7402         MOV     A,#0x2
   \   0000A4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A7   E9           MOV     A,R1
   \   0000A8   F5..         MOV     ?V6,A
   1003            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   0000AA   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000AD   7400         MOV     A,#0x0
   \   0000AF   F0           MOVX    @DPTR,A
   1004          
   1005            return ( stat );
   \   0000B0   A9..         MOV     R1,?V6
   \   0000B2   7403         MOV     A,#0x3
   \   0000B4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B7   7F08         MOV     R7,#0x8
   \   0000B9   02....       LJMP    ?BANKED_LEAVE_XDATA
   1006          }
   1007          
   1008          /*********************************************************************
   1009           * @fn          ZDP_GenericRsp
   1010           *
   1011           * @brief       Sends a response message with only the parameter status
   1012           *              byte and the addr of interest for data.
   1013           *              This function sends unicast message to the
   1014           *              requesting device.
   1015           *
   1016           * @param       dstAddr - destination address
   1017           * @param       status  - generic status for response
   1018           * @param       aoi     - address of interest
   1019           * @param       dstAddr - destination address
   1020           * @param       rspId   - response cluster ID
   1021           * @param       SecurityEnable - Security Options
   1022           *
   1023           * @return      afStatus_t
   1024           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1025          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1026                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1027          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8A..         MOV     ?V6,R2
   \   000018   8B..         MOV     ?V7,R3
   \   00001A   8C..         MOV     ?V0,R4
   \   00001C   8D..         MOV     ?V4,R5
   \   00001E   7411         MOV     A,#0x11
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FE           MOV     R6,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FF           MOV     R7,A
   \   000028   7413         MOV     A,#0x13
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V2,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V3,A
   1028            uint8 len;
   1029          
   1030            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1031          
   1032            ZDP_TmpBuf[0] = status;
   \   000034   E5..         MOV     A,?V0
   \   000036   C0E0         PUSH    A
   \   000038   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F8           MOV     R0,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F583         MOV     DPH,A
   \   000041   8882         MOV     DPL,R0
   \   000043   D0E0         POP     A
   \   000045   F0           MOVX    @DPTR,A
   1033            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \   000046   EE           MOV     A,R6
   \   000047   C0E0         PUSH    A
   \   000049   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F8           MOV     R0,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F583         MOV     DPH,A
   \   000052   8882         MOV     DPL,R0
   \   000054   A3           INC     DPTR
   \   000055   D0E0         POP     A
   \   000057   F0           MOVX    @DPTR,A
   1034            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   \   000058   EE           MOV     A,R6
   \   000059   F8           MOV     R0,A
   \   00005A   EF           MOV     A,R7
   \   00005B   F9           MOV     R1,A
   \   00005C   E4           CLR     A
   \   00005D   C9           XCH     A,R1
   \   00005E   F8           MOV     R0,A
   \   00005F   E8           MOV     A,R0
   \   000060   C0E0         PUSH    A
   \   000062   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F8           MOV     R0,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F583         MOV     DPH,A
   \   00006B   8882         MOV     DPL,R0
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   D0E0         POP     A
   \   000071   F0           MOVX    @DPTR,A
   1035          
   1036            // Length byte
   1037            ZDP_TmpBuf[3] = 0;
   \   000072   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F8           MOV     R0,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F583         MOV     DPH,A
   \   00007B   8882         MOV     DPL,R0
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   7400         MOV     A,#0x0
   \   000082   F0           MOVX    @DPTR,A
   1038            len = 4;
   \   000083   75..04       MOV     ?V1,#0x4
   1039          
   1040            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   000086                ; Setup parameters for call to function fillAndSend
   \   000086   78..         MOV     R0,#?V2
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   A9..         MOV     R1,?V1
   \   00008D   AC..         MOV     R4,?V6
   \   00008F   AD..         MOV     R5,?V7
   \   000091   7402         MOV     A,#0x2
   \   000093   12....       LCALL   ?XSTACK_DISP101_8
   \   000096   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000099   7402         MOV     A,#0x2
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009E   7401         MOV     A,#0x1
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A3   7F08         MOV     R7,#0x8
   \   0000A5   02....       LJMP    ?BANKED_LEAVE_XDATA
   1041          }
   1042          
   1043          /*********************************************************************
   1044           * Binding
   1045           */
   1046          /*********************************************************************
   1047           * @fn          ZDP_EndDeviceBindReq
   1048           *
   1049           * @brief       This builds and sends a End_Device_Bind_req message.
   1050           *              This function sends a unicast message.
   1051           *
   1052           * @param       dstAddr - destination address
   1053           * @param       LocalCoordinator - short address of local coordinator
   1054           * @param       epIntf - Endpoint/Interface of Simple Desc
   1055           * @param       ProfileID - Profile ID
   1056           *
   1057           *   The Input cluster list is the opposite of what you would think.
   1058           *   This is the output cluster list of this device
   1059           * @param       NumInClusters - number of input clusters
   1060           * @param       InClusterList - input cluster ID list
   1061           *
   1062           *   The Output cluster list is the opposite of what you would think.
   1063           *   This is the input cluster list of this device
   1064           * @param       NumOutClusters - number of output clusters
   1065           * @param       OutClusterList - output cluster ID list
   1066           *
   1067           * @param       SecurityEnable - Security Options
   1068           *
   1069           * @return      afStatus_t
   1070           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1071          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1072                                           uint16 LocalCoordinator,
   1073                                           byte endPoint,
   1074                                           uint16 ProfileID,
   1075                                           byte NumInClusters, cId_t *InClusterList,
   1076                                           byte NumOutClusters, cId_t *OutClusterList,
   1077                                           byte SecurityEnable )
   1078          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7403         MOV     A,#0x3
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   E9           MOV     A,R1
   \   000015   C0E0         PUSH    A
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   D0E0         POP     A
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   8C..         MOV     ?V0,R4
   \   000022   8D..         MOV     ?V1,R5
   \   000024   7415         MOV     A,#0x15
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V2,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V3,A
   1079            uint8 *pBuf = ZDP_TmpBuf;
   \   000030   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FE           MOV     R6,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   FF           MOV     R7,A
   1080            uint8 i, len;
   1081            uint8 *ieeeAddr;
   1082          
   1083            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1084          
   1085            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1086            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   \   000038   75..0F       MOV     ?V7,#0xf
   1087            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \   00003B   75F002       MOV     B,#0x2
   \   00003E   7417         MOV     A,#0x17
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   E0           MOVX    A,@DPTR
   \   000044   FA           MOV     R2,A
   \   000045   7B00         MOV     R3,#0x0
   \   000047   741A         MOV     A,#0x1a
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F8           MOV     R0,A
   \   00004E   7900         MOV     R1,#0x0
   \   000050   EA           MOV     A,R2
   \   000051   28           ADD     A,R0
   \   000052   F8           MOV     R0,A
   \   000053   EB           MOV     A,R3
   \   000054   39           ADDC    A,R1
   \   000055   F9           MOV     R1,A
   \   000056   E8           MOV     A,R0
   \   000057   A4           MUL     AB
   \   000058   25..         ADD     A,?V7
   \   00005A   F5..         MOV     ?V7,A
   1088          
   1089            if ( len >= ZDP_BUF_SZ-1 )
   \   00005C   E5..         MOV     A,?V7
   \   00005E   C3           CLR     C
   \   00005F   944F         SUBB    A,#0x4f
   \   000061   4005         JC      ??ZDP_EndDeviceBindReq_0
   1090            {
   1091              return afStatus_MEM_FAIL;
   \   000063   7910         MOV     R1,#0x10
   \   000065   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1092            }
   1093          
   1094            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   000068                ; Setup parameters for call to function NLME_GetShortAddr
   \   000068   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   00006B   8A..         MOV     ?V4,R2
   \   00006D   8B..         MOV     ?V5,R3
   \   00006F   E5..         MOV     A,?V4
   \   000071   65..         XRL     A,?V0
   \   000073   7004         JNZ     ??ZDP_EndDeviceBindReq_2
   \   000075   E5..         MOV     A,?V5
   \   000077   65..         XRL     A,?V1
   \                     ??ZDP_EndDeviceBindReq_2:
   \   000079   6005         JZ      ??ZDP_EndDeviceBindReq_3
   1095            {
   1096              return afStatus_INVALID_PARAMETER;
   \   00007B   7902         MOV     R1,#0x2
   \   00007D   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1097            }
   1098          
   1099            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   000080   E5..         MOV     A,?V0
   \   000082   C0E0         PUSH    A
   \   000084   8E82         MOV     DPL,R6
   \   000086   8F83         MOV     DPH,R7
   \   000088   D0E0         POP     A
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   8E82         MOV     DPL,R6
   \   00008D   8F83         MOV     DPH,R7
   \   00008F   A3           INC     DPTR
   \   000090   AE82         MOV     R6,DPL
   \   000092   AF83         MOV     R7,DPH
   1100            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   000094   A8..         MOV     R0,?V0
   \   000096   A9..         MOV     R1,?V1
   \   000098   E4           CLR     A
   \   000099   C9           XCH     A,R1
   \   00009A   F8           MOV     R0,A
   \   00009B   E8           MOV     A,R0
   \   00009C   C0E0         PUSH    A
   \   00009E   8E82         MOV     DPL,R6
   \   0000A0   8F83         MOV     DPH,R7
   \   0000A2   D0E0         POP     A
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   8E82         MOV     DPL,R6
   \   0000A7   8F83         MOV     DPH,R7
   \   0000A9   A3           INC     DPTR
   \   0000AA   AE82         MOV     R6,DPL
   \   0000AC   AF83         MOV     R7,DPH
   1101          
   1102            ieeeAddr = NLME_GetExtAddr();
   \   0000AE                ; Setup parameters for call to function NLME_GetExtAddr
   \   0000AE   12....       LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
   \   0000B1   7401         MOV     A,#0x1
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   EA           MOV     A,R2
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   EB           MOV     A,R3
   \   0000BA   F0           MOVX    @DPTR,A
   1103            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \   0000BB                ; Setup parameters for call to function sAddrExtCpy
   \   0000BB   7401         MOV     A,#0x1
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   FC           MOV     R4,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   FD           MOV     R5,A
   \   0000C5   EE           MOV     A,R6
   \   0000C6   FA           MOV     R2,A
   \   0000C7   EF           MOV     A,R7
   \   0000C8   FB           MOV     R3,A
   \   0000C9   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   0000CC   8A..         MOV     ?V4,R2
   \   0000CE   8B..         MOV     ?V5,R3
   \   0000D0   AE..         MOV     R6,?V4
   \   0000D2   AF..         MOV     R7,?V5
   1104          
   1105            *pBuf++ = endPoint;
   \   0000D4   85..82       MOV     DPL,?XSP + 0
   \   0000D7   85..83       MOV     DPH,?XSP + 1
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   C0E0         PUSH    A
   \   0000DD   8E82         MOV     DPL,R6
   \   0000DF   8F83         MOV     DPH,R7
   \   0000E1   D0E0         POP     A
   \   0000E3   F0           MOVX    @DPTR,A
   \   0000E4   8E82         MOV     DPL,R6
   \   0000E6   8F83         MOV     DPH,R7
   \   0000E8   A3           INC     DPTR
   \   0000E9   AE82         MOV     R6,DPL
   \   0000EB   AF83         MOV     R7,DPH
   1106          
   1107            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \   0000ED   E5..         MOV     A,?V2
   \   0000EF   C0E0         PUSH    A
   \   0000F1   8E82         MOV     DPL,R6
   \   0000F3   8F83         MOV     DPH,R7
   \   0000F5   D0E0         POP     A
   \   0000F7   F0           MOVX    @DPTR,A
   \   0000F8   8E82         MOV     DPL,R6
   \   0000FA   8F83         MOV     DPH,R7
   \   0000FC   A3           INC     DPTR
   \   0000FD   AE82         MOV     R6,DPL
   \   0000FF   AF83         MOV     R7,DPH
   1108            *pBuf++ = HI_UINT16( ProfileID );
   \   000101   A8..         MOV     R0,?V2
   \   000103   A9..         MOV     R1,?V3
   \   000105   E4           CLR     A
   \   000106   C9           XCH     A,R1
   \   000107   F8           MOV     R0,A
   \   000108   E8           MOV     A,R0
   \   000109   C0E0         PUSH    A
   \   00010B   8E82         MOV     DPL,R6
   \   00010D   8F83         MOV     DPH,R7
   \   00010F   D0E0         POP     A
   \   000111   F0           MOVX    @DPTR,A
   \   000112   8E82         MOV     DPL,R6
   \   000114   8F83         MOV     DPH,R7
   \   000116   A3           INC     DPTR
   \   000117   AE82         MOV     R6,DPL
   \   000119   AF83         MOV     R7,DPH
   1109          
   1110            *pBuf++ = NumInClusters; // Input cluster list
   \   00011B   7417         MOV     A,#0x17
   \   00011D   12....       LCALL   ?XSTACK_DISP0_8
   \   000120   E0           MOVX    A,@DPTR
   \   000121   C0E0         PUSH    A
   \   000123   8E82         MOV     DPL,R6
   \   000125   8F83         MOV     DPH,R7
   \   000127   D0E0         POP     A
   \   000129   F0           MOVX    @DPTR,A
   \   00012A   8E82         MOV     DPL,R6
   \   00012C   8F83         MOV     DPH,R7
   \   00012E   A3           INC     DPTR
   \   00012F   AE82         MOV     R6,DPL
   \   000131   AF83         MOV     R7,DPH
   1111            for ( i = 0; i < NumInClusters; ++i )
   \   000133   75..00       MOV     ?V6,#0x0
   \                     ??ZDP_EndDeviceBindReq_4:
   \   000136   7417         MOV     A,#0x17
   \   000138   12....       LCALL   ?XSTACK_DISP0_8
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   F8           MOV     R0,A
   \   00013D   E5..         MOV     A,?V6
   \   00013F   C3           CLR     C
   \   000140   98           SUBB    A,R0
   \   000141   4003         JC      $+5
   \   000143   02....       LJMP    ??ZDP_EndDeviceBindReq_5 & 0xFFFF
   1112            {
   1113              *pBuf++ = LO_UINT16(InClusterList[i]);
   \   000146   A8..         MOV     R0,?V6
   \   000148   7900         MOV     R1,#0x0
   \   00014A   E8           MOV     A,R0
   \   00014B   75F002       MOV     B,#0x2
   \   00014E   A4           MUL     AB
   \   00014F   C8           XCH     A,R0
   \   000150   AAF0         MOV     R2,B
   \   000152   75F000       MOV     B,#0x0
   \   000155   A4           MUL     AB
   \   000156   2A           ADD     A,R2
   \   000157   FA           MOV     R2,A
   \   000158   75F002       MOV     B,#0x2
   \   00015B   E9           MOV     A,R1
   \   00015C   A4           MUL     AB
   \   00015D   2A           ADD     A,R2
   \   00015E   F9           MOV     R1,A
   \   00015F   7418         MOV     A,#0x18
   \   000161   12....       LCALL   ?XSTACK_DISP0_8
   \   000164   E0           MOVX    A,@DPTR
   \   000165   28           ADD     A,R0
   \   000166   FA           MOV     R2,A
   \   000167   A3           INC     DPTR
   \   000168   E0           MOVX    A,@DPTR
   \   000169   39           ADDC    A,R1
   \   00016A   8A82         MOV     DPL,R2
   \   00016C   F583         MOV     DPH,A
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   F8           MOV     R0,A
   \   000170   A3           INC     DPTR
   \   000171   E0           MOVX    A,@DPTR
   \   000172   F9           MOV     R1,A
   \   000173   E8           MOV     A,R0
   \   000174   C0E0         PUSH    A
   \   000176   8E82         MOV     DPL,R6
   \   000178   8F83         MOV     DPH,R7
   \   00017A   D0E0         POP     A
   \   00017C   F0           MOVX    @DPTR,A
   \   00017D   8E82         MOV     DPL,R6
   \   00017F   8F83         MOV     DPH,R7
   \   000181   A3           INC     DPTR
   \   000182   AE82         MOV     R6,DPL
   \   000184   AF83         MOV     R7,DPH
   1114              *pBuf++ = HI_UINT16(InClusterList[i]);
   \   000186   A8..         MOV     R0,?V6
   \   000188   7900         MOV     R1,#0x0
   \   00018A   E8           MOV     A,R0
   \   00018B   75F002       MOV     B,#0x2
   \   00018E   A4           MUL     AB
   \   00018F   C8           XCH     A,R0
   \   000190   AAF0         MOV     R2,B
   \   000192   75F000       MOV     B,#0x0
   \   000195   A4           MUL     AB
   \   000196   2A           ADD     A,R2
   \   000197   FA           MOV     R2,A
   \   000198   75F002       MOV     B,#0x2
   \   00019B   E9           MOV     A,R1
   \   00019C   A4           MUL     AB
   \   00019D   2A           ADD     A,R2
   \   00019E   F9           MOV     R1,A
   \   00019F   7418         MOV     A,#0x18
   \   0001A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   28           ADD     A,R0
   \   0001A6   FA           MOV     R2,A
   \   0001A7   A3           INC     DPTR
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   39           ADDC    A,R1
   \   0001AA   8A82         MOV     DPL,R2
   \   0001AC   F583         MOV     DPH,A
   \   0001AE   E0           MOVX    A,@DPTR
   \   0001AF   F8           MOV     R0,A
   \   0001B0   A3           INC     DPTR
   \   0001B1   E0           MOVX    A,@DPTR
   \   0001B2   F9           MOV     R1,A
   \   0001B3   E4           CLR     A
   \   0001B4   C9           XCH     A,R1
   \   0001B5   F8           MOV     R0,A
   \   0001B6   E8           MOV     A,R0
   \   0001B7   C0E0         PUSH    A
   \   0001B9   8E82         MOV     DPL,R6
   \   0001BB   8F83         MOV     DPH,R7
   \   0001BD   D0E0         POP     A
   \   0001BF   F0           MOVX    @DPTR,A
   \   0001C0   8E82         MOV     DPL,R6
   \   0001C2   8F83         MOV     DPH,R7
   \   0001C4   A3           INC     DPTR
   \   0001C5   AE82         MOV     R6,DPL
   \   0001C7   AF83         MOV     R7,DPH
   1115            }
   \   0001C9   05..         INC     ?V6
   \   0001CB   02....       LJMP    ??ZDP_EndDeviceBindReq_4 & 0xFFFF
   1116          
   1117            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_EndDeviceBindReq_5:
   \   0001CE   741A         MOV     A,#0x1a
   \   0001D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D3   E0           MOVX    A,@DPTR
   \   0001D4   C0E0         PUSH    A
   \   0001D6   8E82         MOV     DPL,R6
   \   0001D8   8F83         MOV     DPH,R7
   \   0001DA   D0E0         POP     A
   \   0001DC   F0           MOVX    @DPTR,A
   \   0001DD   8E82         MOV     DPL,R6
   \   0001DF   8F83         MOV     DPH,R7
   \   0001E1   A3           INC     DPTR
   \   0001E2   AE82         MOV     R6,DPL
   \   0001E4   AF83         MOV     R7,DPH
   1118            for ( i = 0; i < NumOutClusters; ++i )
   \   0001E6   75..00       MOV     ?V6,#0x0
   \                     ??ZDP_EndDeviceBindReq_6:
   \   0001E9   741A         MOV     A,#0x1a
   \   0001EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EE   E0           MOVX    A,@DPTR
   \   0001EF   F8           MOV     R0,A
   \   0001F0   E5..         MOV     A,?V6
   \   0001F2   C3           CLR     C
   \   0001F3   98           SUBB    A,R0
   \   0001F4   4003         JC      $+5
   \   0001F6   02....       LJMP    ??ZDP_EndDeviceBindReq_7 & 0xFFFF
   1119            {
   1120              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \   0001F9   A8..         MOV     R0,?V6
   \   0001FB   7900         MOV     R1,#0x0
   \   0001FD   E8           MOV     A,R0
   \   0001FE   75F002       MOV     B,#0x2
   \   000201   A4           MUL     AB
   \   000202   C8           XCH     A,R0
   \   000203   AAF0         MOV     R2,B
   \   000205   75F000       MOV     B,#0x0
   \   000208   A4           MUL     AB
   \   000209   2A           ADD     A,R2
   \   00020A   FA           MOV     R2,A
   \   00020B   75F002       MOV     B,#0x2
   \   00020E   E9           MOV     A,R1
   \   00020F   A4           MUL     AB
   \   000210   2A           ADD     A,R2
   \   000211   F9           MOV     R1,A
   \   000212   741B         MOV     A,#0x1b
   \   000214   12....       LCALL   ?XSTACK_DISP0_8
   \   000217   E0           MOVX    A,@DPTR
   \   000218   28           ADD     A,R0
   \   000219   FA           MOV     R2,A
   \   00021A   A3           INC     DPTR
   \   00021B   E0           MOVX    A,@DPTR
   \   00021C   39           ADDC    A,R1
   \   00021D   8A82         MOV     DPL,R2
   \   00021F   F583         MOV     DPH,A
   \   000221   E0           MOVX    A,@DPTR
   \   000222   F8           MOV     R0,A
   \   000223   A3           INC     DPTR
   \   000224   E0           MOVX    A,@DPTR
   \   000225   F9           MOV     R1,A
   \   000226   E8           MOV     A,R0
   \   000227   C0E0         PUSH    A
   \   000229   8E82         MOV     DPL,R6
   \   00022B   8F83         MOV     DPH,R7
   \   00022D   D0E0         POP     A
   \   00022F   F0           MOVX    @DPTR,A
   \   000230   8E82         MOV     DPL,R6
   \   000232   8F83         MOV     DPH,R7
   \   000234   A3           INC     DPTR
   \   000235   AE82         MOV     R6,DPL
   \   000237   AF83         MOV     R7,DPH
   1121              *pBuf++ = HI_UINT16(OutClusterList[i]);
   \   000239   A8..         MOV     R0,?V6
   \   00023B   7900         MOV     R1,#0x0
   \   00023D   E8           MOV     A,R0
   \   00023E   75F002       MOV     B,#0x2
   \   000241   A4           MUL     AB
   \   000242   C8           XCH     A,R0
   \   000243   AAF0         MOV     R2,B
   \   000245   75F000       MOV     B,#0x0
   \   000248   A4           MUL     AB
   \   000249   2A           ADD     A,R2
   \   00024A   FA           MOV     R2,A
   \   00024B   75F002       MOV     B,#0x2
   \   00024E   E9           MOV     A,R1
   \   00024F   A4           MUL     AB
   \   000250   2A           ADD     A,R2
   \   000251   F9           MOV     R1,A
   \   000252   741B         MOV     A,#0x1b
   \   000254   12....       LCALL   ?XSTACK_DISP0_8
   \   000257   E0           MOVX    A,@DPTR
   \   000258   28           ADD     A,R0
   \   000259   FA           MOV     R2,A
   \   00025A   A3           INC     DPTR
   \   00025B   E0           MOVX    A,@DPTR
   \   00025C   39           ADDC    A,R1
   \   00025D   8A82         MOV     DPL,R2
   \   00025F   F583         MOV     DPH,A
   \   000261   E0           MOVX    A,@DPTR
   \   000262   F8           MOV     R0,A
   \   000263   A3           INC     DPTR
   \   000264   E0           MOVX    A,@DPTR
   \   000265   F9           MOV     R1,A
   \   000266   E4           CLR     A
   \   000267   C9           XCH     A,R1
   \   000268   F8           MOV     R0,A
   \   000269   E8           MOV     A,R0
   \   00026A   C0E0         PUSH    A
   \   00026C   8E82         MOV     DPL,R6
   \   00026E   8F83         MOV     DPH,R7
   \   000270   D0E0         POP     A
   \   000272   F0           MOVX    @DPTR,A
   \   000273   8E82         MOV     DPL,R6
   \   000275   8F83         MOV     DPH,R7
   \   000277   A3           INC     DPTR
   \   000278   AE82         MOV     R6,DPL
   \   00027A   AF83         MOV     R7,DPH
   1122            }
   \   00027C   05..         INC     ?V6
   \   00027E   02....       LJMP    ??ZDP_EndDeviceBindReq_6 & 0xFFFF
   1123          
   1124            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \                     ??ZDP_EndDeviceBindReq_7:
   \   000281                ; Setup parameters for call to function fillAndSend
   \   000281   75..20       MOV     ?V4,#0x20
   \   000284   75..00       MOV     ?V5,#0x0
   \   000287   78..         MOV     R0,#?V4
   \   000289   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00028C   A9..         MOV     R1,?V7
   \   00028E   7405         MOV     A,#0x5
   \   000290   12....       LCALL   ?XSTACK_DISP0_8
   \   000293   E0           MOVX    A,@DPTR
   \   000294   FC           MOV     R4,A
   \   000295   A3           INC     DPTR
   \   000296   E0           MOVX    A,@DPTR
   \   000297   FD           MOV     R5,A
   \   000298   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00029A   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00029C   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00029F   7402         MOV     A,#0x2
   \   0002A1   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   0002A4   7405         MOV     A,#0x5
   \   0002A6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002A9   7F08         MOV     R7,#0x8
   \   0002AB   02....       LJMP    ?BANKED_LEAVE_XDATA
   1125          }
   1126          
   1127          /*********************************************************************
   1128           * @fn          ZDP_BindUnbindReq
   1129           *
   1130           * @brief       This builds and send a Bind_req or Unbind_req message
   1131           *              Depending on the ClusterID. This function
   1132           *              sends a unicast message to the local coordinator.
   1133           *
   1134           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1135           * @param       dstAddr - destination address of the message
   1136           * @param       SourceAddr - source 64 bit address of the binding
   1137           * @param       SrcEPIntf - Source endpoint/interface
   1138           * @param       ClusterID - Binding cluster ID
   1139           * @param       DestinationAddr - destination 64 bit addr of binding
   1140           * @param       DstEPIntf - destination endpoint/interface
   1141           * @param       SecurityEnable - Security Options
   1142           *
   1143           * @return      afStatus_t
   1144           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1145          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1146                                        uint8 *SourceAddr, byte SrcEndPoint,
   1147                                        cId_t ClusterID,
   1148                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1149                                        byte SecurityEnable )
   1150          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
   \   000014   E9           MOV     A,R1
   \   000015   C0E0         PUSH    A
   \   000017   7401         MOV     A,#0x1
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   D0E0         POP     A
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   8A..         MOV     ?V2,R2
   \   000021   8B..         MOV     ?V3,R3
   \   000023   7416         MOV     A,#0x16
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V1,A
   \   00002F   7418         MOV     A,#0x18
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V6,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V7,A
   1151            uint8 *pBuf = ZDP_TmpBuf;
   \   00003B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FE           MOV     R6,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   FF           MOV     R7,A
   1152            byte len;
   1153          
   1154            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1155          
   1156            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1157            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   740C         MOV     A,#0xc
   \   00004B   F0           MOVX    @DPTR,A
   1158            if ( destinationAddr->addrMode == Addr64Bit )
   \   00004C   85..82       MOV     DPL,?V6
   \   00004F   85..83       MOV     DPH,?V7
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   6403         XRL     A,#0x3
   \   00005D   700C         JNZ     ??ZDP_BindUnbindReq_0
   1159              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   00005F   85..82       MOV     DPL,?XSP + 0
   \   000062   85..83       MOV     DPH,?XSP + 1
   \   000065   E0           MOVX    A,@DPTR
   \   000066   2409         ADD     A,#0x9
   \   000068   F0           MOVX    @DPTR,A
   \   000069   801D         SJMP    ??ZDP_BindUnbindReq_1
   1160            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   00006B   85..82       MOV     DPL,?V6
   \   00006E   85..83       MOV     DPH,?V7
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   6401         XRL     A,#0x1
   \   00007C   700A         JNZ     ??ZDP_BindUnbindReq_1
   1161              len += sizeof ( uint16 );
   \   00007E   85..82       MOV     DPL,?XSP + 0
   \   000081   85..83       MOV     DPH,?XSP + 1
   \   000084   E0           MOVX    A,@DPTR
   \   000085   2402         ADD     A,#0x2
   \   000087   F0           MOVX    @DPTR,A
   1162          
   1163            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   000088                ; Setup parameters for call to function sAddrExtCpy
   \   000088   7414         MOV     A,#0x14
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   FC           MOV     R4,A
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   FD           MOV     R5,A
   \   000092   EE           MOV     A,R6
   \   000093   FA           MOV     R2,A
   \   000094   EF           MOV     A,R7
   \   000095   FB           MOV     R3,A
   \   000096   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   000099   8A..         MOV     ?V4,R2
   \   00009B   8B..         MOV     ?V5,R3
   \   00009D   AE..         MOV     R6,?V4
   \   00009F   AF..         MOV     R7,?V5
   1164            *pBuf++ = SrcEndPoint;
   \   0000A1   7401         MOV     A,#0x1
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   C0E0         PUSH    A
   \   0000A9   8E82         MOV     DPL,R6
   \   0000AB   8F83         MOV     DPH,R7
   \   0000AD   D0E0         POP     A
   \   0000AF   F0           MOVX    @DPTR,A
   \   0000B0   8E82         MOV     DPL,R6
   \   0000B2   8F83         MOV     DPH,R7
   \   0000B4   A3           INC     DPTR
   \   0000B5   AE82         MOV     R6,DPL
   \   0000B7   AF83         MOV     R7,DPH
   1165          
   1166            *pBuf++ = LO_UINT16( ClusterID );
   \   0000B9   E5..         MOV     A,?V0
   \   0000BB   C0E0         PUSH    A
   \   0000BD   8E82         MOV     DPL,R6
   \   0000BF   8F83         MOV     DPH,R7
   \   0000C1   D0E0         POP     A
   \   0000C3   F0           MOVX    @DPTR,A
   \   0000C4   8E82         MOV     DPL,R6
   \   0000C6   8F83         MOV     DPH,R7
   \   0000C8   A3           INC     DPTR
   \   0000C9   AE82         MOV     R6,DPL
   \   0000CB   AF83         MOV     R7,DPH
   1167          
   1168            *pBuf++ = HI_UINT16( ClusterID );
   \   0000CD   A8..         MOV     R0,?V0
   \   0000CF   A9..         MOV     R1,?V1
   \   0000D1   E4           CLR     A
   \   0000D2   C9           XCH     A,R1
   \   0000D3   F8           MOV     R0,A
   \   0000D4   E8           MOV     A,R0
   \   0000D5   C0E0         PUSH    A
   \   0000D7   8E82         MOV     DPL,R6
   \   0000D9   8F83         MOV     DPH,R7
   \   0000DB   D0E0         POP     A
   \   0000DD   F0           MOVX    @DPTR,A
   \   0000DE   8E82         MOV     DPL,R6
   \   0000E0   8F83         MOV     DPH,R7
   \   0000E2   A3           INC     DPTR
   \   0000E3   AE82         MOV     R6,DPL
   \   0000E5   AF83         MOV     R7,DPH
   1169            *pBuf++ = destinationAddr->addrMode;
   \   0000E7   85..82       MOV     DPL,?V6
   \   0000EA   85..83       MOV     DPH,?V7
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   C0E0         PUSH    A
   \   0000F8   8E82         MOV     DPL,R6
   \   0000FA   8F83         MOV     DPH,R7
   \   0000FC   D0E0         POP     A
   \   0000FE   F0           MOVX    @DPTR,A
   \   0000FF   8E82         MOV     DPL,R6
   \   000101   8F83         MOV     DPH,R7
   \   000103   A3           INC     DPTR
   \   000104   AE82         MOV     R6,DPL
   \   000106   AF83         MOV     R7,DPH
   1170            if ( destinationAddr->addrMode == Addr64Bit )
   \   000108   85..82       MOV     DPL,?V6
   \   00010B   85..83       MOV     DPH,?V7
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   A3           INC     DPTR
   \   000113   A3           INC     DPTR
   \   000114   A3           INC     DPTR
   \   000115   A3           INC     DPTR
   \   000116   E0           MOVX    A,@DPTR
   \   000117   6403         XRL     A,#0x3
   \   000119   7024         JNZ     ??ZDP_BindUnbindReq_2
   1171            {
   1172              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   \   00011B                ; Setup parameters for call to function sAddrExtCpy
   \   00011B   AC..         MOV     R4,?V6
   \   00011D   AD..         MOV     R5,?V7
   \   00011F   EE           MOV     A,R6
   \   000120   FA           MOV     R2,A
   \   000121   EF           MOV     A,R7
   \   000122   FB           MOV     R3,A
   \   000123   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   000126   8A..         MOV     ?V4,R2
   \   000128   8B..         MOV     ?V5,R3
   \   00012A   AE..         MOV     R6,?V4
   \   00012C   AF..         MOV     R7,?V5
   1173              *pBuf = DstEndPoint;
   \   00012E   741A         MOV     A,#0x1a
   \   000130   12....       LCALL   ?XSTACK_DISP0_8
   \   000133   E0           MOVX    A,@DPTR
   \   000134   C0E0         PUSH    A
   \   000136   8E82         MOV     DPL,R6
   \   000138   8F83         MOV     DPH,R7
   \   00013A   D0E0         POP     A
   \   00013C   F0           MOVX    @DPTR,A
   \   00013D   8052         SJMP    ??ZDP_BindUnbindReq_3
   1174            }
   1175            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_2:
   \   00013F   85..82       MOV     DPL,?V6
   \   000142   85..83       MOV     DPH,?V7
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   A3           INC     DPTR
   \   00014A   A3           INC     DPTR
   \   00014B   A3           INC     DPTR
   \   00014C   A3           INC     DPTR
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   6401         XRL     A,#0x1
   \   000150   703F         JNZ     ??ZDP_BindUnbindReq_3
   1176            {
   1177              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   000152   85..82       MOV     DPL,?V6
   \   000155   85..83       MOV     DPH,?V7
   \   000158   E0           MOVX    A,@DPTR
   \   000159   F8           MOV     R0,A
   \   00015A   A3           INC     DPTR
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   F9           MOV     R1,A
   \   00015D   E8           MOV     A,R0
   \   00015E   C0E0         PUSH    A
   \   000160   8E82         MOV     DPL,R6
   \   000162   8F83         MOV     DPH,R7
   \   000164   D0E0         POP     A
   \   000166   F0           MOVX    @DPTR,A
   \   000167   8E82         MOV     DPL,R6
   \   000169   8F83         MOV     DPH,R7
   \   00016B   A3           INC     DPTR
   \   00016C   AE82         MOV     R6,DPL
   \   00016E   AF83         MOV     R7,DPH
   1178              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   \   000170   85..82       MOV     DPL,?V6
   \   000173   85..83       MOV     DPH,?V7
   \   000176   E0           MOVX    A,@DPTR
   \   000177   F8           MOV     R0,A
   \   000178   A3           INC     DPTR
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   F9           MOV     R1,A
   \   00017B   E4           CLR     A
   \   00017C   C9           XCH     A,R1
   \   00017D   F8           MOV     R0,A
   \   00017E   E8           MOV     A,R0
   \   00017F   C0E0         PUSH    A
   \   000181   8E82         MOV     DPL,R6
   \   000183   8F83         MOV     DPH,R7
   \   000185   D0E0         POP     A
   \   000187   F0           MOVX    @DPTR,A
   \   000188   8E82         MOV     DPL,R6
   \   00018A   8F83         MOV     DPH,R7
   \   00018C   A3           INC     DPTR
   \   00018D   AE82         MOV     R6,DPL
   \   00018F   AF83         MOV     R7,DPH
   1179            }
   1180          
   1181            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_3:
   \   000191   90....       MOV     DPTR,#ZDP_TxOptions
   \   000194   7410         MOV     A,#0x10
   \   000196   F0           MOVX    @DPTR,A
   \   000197                ; Setup parameters for call to function fillAndSend
   \   000197   78..         MOV     R0,#?V2
   \   000199   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019C   7402         MOV     A,#0x2
   \   00019E   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   F9           MOV     R1,A
   \   0001A3   7404         MOV     A,#0x4
   \   0001A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   FC           MOV     R4,A
   \   0001AA   A3           INC     DPTR
   \   0001AB   E0           MOVX    A,@DPTR
   \   0001AC   FD           MOV     R5,A
   \   0001AD   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0001AF   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0001B1   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0001B4   7402         MOV     A,#0x2
   \   0001B6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001B9   E9           MOV     A,R1
   \   0001BA   F5..         MOV     ?V4,A
   \   0001BC   90....       MOV     DPTR,#ZDP_TxOptions
   \   0001BF   7400         MOV     A,#0x0
   \   0001C1   F0           MOVX    @DPTR,A
   \   0001C2   A9..         MOV     R1,?V4
   \   0001C4   7404         MOV     A,#0x4
   \   0001C6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C9   7F08         MOV     R7,#0x8
   \   0001CB   02....       LJMP    ?BANKED_LEAVE_XDATA
   1182          }
   1183          
   1184          /*********************************************************************
   1185           * Network Management
   1186           */
   1187          
   1188          /*********************************************************************
   1189           * @fn          ZDP_MgmtNwkDiscReq
   1190           *
   1191           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1192           *              function sends a unicast message.
   1193           *
   1194           * @param       dstAddr - destination address of the message
   1195           * @param       ScanChannels - 32 bit address bit map
   1196           * @param       StartIndex - Starting index within the reporting network
   1197           *                           list
   1198           * @param       SecurityEnable - Security Options
   1199           *
   1200           * @return      afStatus_t
   1201           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1202          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1203                                         uint32 ScanChannels,
   1204                                         byte ScanDuration,
   1205                                         byte StartIndex,
   1206                                         byte SecurityEnable )
   1207          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   E9           MOV     A,R1
   \   000015   C0E0         PUSH    A
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   D0E0         POP     A
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   ED           MOV     A,R5
   \   000021   C0E0         PUSH    A
   \   000023   7401         MOV     A,#0x1
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   D0E0         POP     A
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   8C..         MOV     ?V6,R4
   \   00002D   7414         MOV     A,#0x14
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   78..         MOV     R0,#?V0
   \   000034   12....       LCALL   ?L_MOV_X
   1208            uint8 *pBuf = ZDP_TmpBuf;
   \   000037   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   FE           MOV     R6,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FF           MOV     R7,A
   1209            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   \   00003F   75..06       MOV     ?V7,#0x6
   1210          
   1211            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1212          
   1213            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   000042                ; Setup parameters for call to function osal_buffer_uint32
   \   000042   78..         MOV     R0,#?V0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000047   EE           MOV     A,R6
   \   000048   FA           MOV     R2,A
   \   000049   EF           MOV     A,R7
   \   00004A   FB           MOV     R3,A
   \   00004B   12....       LCALL   ??osal_buffer_uint32?relay; Banked call to: osal_buffer_uint32
   \   00004E   7404         MOV     A,#0x4
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
   \   000053   8A..         MOV     ?V4,R2
   \   000055   8B..         MOV     ?V5,R3
   \   000057   AE..         MOV     R6,?V4
   \   000059   AF..         MOV     R7,?V5
   1214          
   1215            *pBuf++ = ScanDuration;
   \   00005B   85..82       MOV     DPL,?XSP + 0
   \   00005E   85..83       MOV     DPH,?XSP + 1
   \   000061   E0           MOVX    A,@DPTR
   \   000062   C0E0         PUSH    A
   \   000064   8E82         MOV     DPL,R6
   \   000066   8F83         MOV     DPH,R7
   \   000068   D0E0         POP     A
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   A3           INC     DPTR
   \   000070   AE82         MOV     R6,DPL
   \   000072   AF83         MOV     R7,DPH
   1216            *pBuf = StartIndex;
   \   000074   E5..         MOV     A,?V6
   \   000076   C0E0         PUSH    A
   \   000078   8E82         MOV     DPL,R6
   \   00007A   8F83         MOV     DPH,R7
   \   00007C   D0E0         POP     A
   \   00007E   F0           MOVX    @DPTR,A
   1217          
   1218            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   00007F                ; Setup parameters for call to function fillAndSend
   \   00007F   75..30       MOV     ?V4,#0x30
   \   000082   75..00       MOV     ?V5,#0x0
   \   000085   78..         MOV     R0,#?V4
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008A   A9..         MOV     R1,?V7
   \   00008C   7404         MOV     A,#0x4
   \   00008E   12....       LCALL   ?XSTACK_DISP0_8
   \   000091   E0           MOVX    A,@DPTR
   \   000092   FC           MOV     R4,A
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   FD           MOV     R5,A
   \   000096   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000098   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00009A   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00009D   7402         MOV     A,#0x2
   \   00009F   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A2   7404         MOV     A,#0x4
   \   0000A4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A7   7F08         MOV     R7,#0x8
   \   0000A9   02....       LJMP    ?BANKED_LEAVE_XDATA
   1219          }
   1220          
   1221          /*********************************************************************
   1222           * @fn          ZDP_MgmtDirectJoinReq
   1223           *
   1224           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1225           *              function sends a unicast message.
   1226           *
   1227           * @param       dstAddr - destination address of the message
   1228           * @param       deviceAddr - 64 bit IEEE Address
   1229           * @param       SecurityEnable - Security Options
   1230           *
   1231           * @return      afStatus_t
   1232           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1233          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1234                                         uint8 *deviceAddr,
   1235                                         byte capInfo,
   1236                                         byte SecurityEnable )
   1237          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   \   00000D   89..         MOV     ?V0,R1
   1238            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1239          
   1240            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   \   00000F                ; Setup parameters for call to function sAddrExtCpy
   \   00000F   AC..         MOV     R4,?V2
   \   000011   AD..         MOV     R5,?V3
   \   000013   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FA           MOV     R2,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FB           MOV     R3,A
   \   00001B   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   1241            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \   00001E   E5..         MOV     A,?V0
   \   000020   C0E0         PUSH    A
   \   000022   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F8           MOV     R0,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   C8           XCH     A,R0
   \   00002A   2408         ADD     A,#0x8
   \   00002C   F582         MOV     DPL,A
   \   00002E   C8           XCH     A,R0
   \   00002F   3400         ADDC    A,#0x0
   \   000031   F583         MOV     DPH,A
   \   000033   D0E0         POP     A
   \   000035   F0           MOVX    @DPTR,A
   1242          
   1243            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   000036                ; Setup parameters for call to function fillAndSend
   \   000036   75..35       MOV     ?V4,#0x35
   \   000039   75..00       MOV     ?V5,#0x0
   \   00003C   78..         MOV     R0,#?V4
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7909         MOV     R1,#0x9
   \   000043   EE           MOV     A,R6
   \   000044   FC           MOV     R4,A
   \   000045   EF           MOV     A,R7
   \   000046   FD           MOV     R5,A
   \   000047   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000049   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00004B   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00004E   7402         MOV     A,#0x2
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
   \   000053   7F06         MOV     R7,#0x6
   \   000055   02....       LJMP    ?BANKED_LEAVE_XDATA
   1244          }
   1245          
   1246          /*********************************************************************
   1247           * @fn          ZDP_MgmtPermitJoinReq
   1248           *
   1249           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1250           *
   1251           * @param       dstAddr - destination address of the message
   1252           * @param       duration - Permit duration
   1253           * @param       TcSignificance - Trust Center Significance
   1254           *
   1255           * @return      afStatus_t
   1256           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1257          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1258                                            byte TcSignificance, byte SecurityEnable )
   1259          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0,R4
   \   00000D   ED           MOV     A,R5
   \   00000E   FE           MOV     R6,A
   1260            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1261          
   1262            // Build buffer
   1263            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   00000F   EF           MOV     A,R7
   \   000010   C0E0         PUSH    A
   \   000012   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F8           MOV     R0,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F583         MOV     DPH,A
   \   00001B   8882         MOV     DPL,R0
   \   00001D   D0E0         POP     A
   \   00001F   F0           MOVX    @DPTR,A
   1264            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \   000020   E5..         MOV     A,?V0
   \   000022   C0E0         PUSH    A
   \   000024   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F583         MOV     DPH,A
   \   00002D   8882         MOV     DPL,R0
   \   00002F   A3           INC     DPTR
   \   000030   D0E0         POP     A
   \   000032   F0           MOVX    @DPTR,A
   1265          
   1266            // Send the message
   1267            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1268                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \   000033                ; Setup parameters for call to function fillAndSend
   \   000033   75..36       MOV     ?V2,#0x36
   \   000036   75..00       MOV     ?V3,#0x0
   \   000039   78..         MOV     R0,#?V2
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   7902         MOV     R1,#0x2
   \   000040   AC..         MOV     R4,?V4
   \   000042   AD..         MOV     R5,?V5
   \   000044   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000046   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000048   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00004B   7402         MOV     A,#0x2
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000050   7F06         MOV     R7,#0x6
   \   000052   02....       LJMP    ?BANKED_LEAVE_XDATA
   1269          }
   1270          
   1271          /*********************************************************************
   1272           * @fn          ZDP_MgmtLeaveReq
   1273           *
   1274           * @brief       This builds and send a Mgmt_Leave_req message.
   1275           *
   1276           * @param       dstAddr - destination address of the message
   1277           *              IEEEAddr - IEEE adddress of device that is removed
   1278           *              RemoveChildren - set to 1 to remove the children of the
   1279           *                                device as well. 0 otherwise.
   1280           *              Rejoin - set to 1 if the removed device should rejoin
   1281                                   afterwards. 0 otherwise.
   1282           *
   1283           * @return      afStatus_t
   1284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1285          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1286                           uint8 Rejoin, uint8 SecurityEnable )
   1287          
   1288          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   \   00000D   E9           MOV     A,R1
   \   00000E   FF           MOV     R7,A
   \   00000F   740E         MOV     A,#0xe
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FE           MOV     R6,A
   1289            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1290          
   1291            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   \   000016                ; Setup parameters for call to function sAddrExtCpy
   \   000016   AC..         MOV     R4,?V4
   \   000018   AD..         MOV     R5,?V5
   \   00001A   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FA           MOV     R2,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FB           MOV     R3,A
   \   000022   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   1292            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \   000025   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   C8           XCH     A,R0
   \   00002D   2408         ADD     A,#0x8
   \   00002F   F582         MOV     DPL,A
   \   000031   C8           XCH     A,R0
   \   000032   3400         ADDC    A,#0x0
   \   000034   F583         MOV     DPH,A
   \   000036   7400         MOV     A,#0x0
   \   000038   F0           MOVX    @DPTR,A
   1293          
   1294            if ( RemoveChildren == TRUE )
   \   000039   7401         MOV     A,#0x1
   \   00003B   6F           XRL     A,R7
   \   00003C   7015         JNZ     ??ZDP_MgmtLeaveReq_0
   1295            {
   1296              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   00003E   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F8           MOV     R0,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   C8           XCH     A,R0
   \   000046   2408         ADD     A,#0x8
   \   000048   F582         MOV     DPL,A
   \   00004A   C8           XCH     A,R0
   \   00004B   3400         ADDC    A,#0x0
   \   00004D   F583         MOV     DPH,A
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   D2E6         SETB    0xE0 /* A   */.6
   \   000052   F0           MOVX    @DPTR,A
   1297            }
   1298            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   000053   7401         MOV     A,#0x1
   \   000055   6E           XRL     A,R6
   \   000056   7015         JNZ     ??ZDP_MgmtLeaveReq_1
   1299            {
   1300              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   000058   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F8           MOV     R0,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   C8           XCH     A,R0
   \   000060   2408         ADD     A,#0x8
   \   000062   F582         MOV     DPL,A
   \   000064   C8           XCH     A,R0
   \   000065   3400         ADDC    A,#0x0
   \   000067   F583         MOV     DPH,A
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   D2E7         SETB    0xE0 /* A   */.7
   \   00006C   F0           MOVX    @DPTR,A
   1301            }
   1302          
   1303            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   00006D                ; Setup parameters for call to function fillAndSend
   \   00006D   75..34       MOV     ?V2,#0x34
   \   000070   75..00       MOV     ?V3,#0x0
   \   000073   78..         MOV     R0,#?V2
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   7909         MOV     R1,#0x9
   \   00007A   AC..         MOV     R4,?V0
   \   00007C   AD..         MOV     R5,?V1
   \   00007E   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000080   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000082   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000085   7402         MOV     A,#0x2
   \   000087   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008A   7F06         MOV     R7,#0x6
   \   00008C   02....       LJMP    ?BANKED_LEAVE_XDATA
   1304          }
   1305          
   1306          /*********************************************************************
   1307           * @fn          ZDP_MgmtNwkUpdateReq
   1308           *
   1309           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1310           *              function sends a unicast or broadcast message.
   1311           *
   1312           * @param       dstAddr - destination address of the message
   1313           * @param       ChannelMask - 32 bit address bit map
   1314           * @param       ScanDuration - length of time to spend scanning each channel
   1315           * @param       ScanCount - number of energy scans to be conducted
   1316           * @param       NwkUpdateId - NWk Update Id value
   1317           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1318           *                               bit set in its Node Descriptor
   1319           *
   1320           * @return      afStatus_t
   1321           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1322          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1323                                           uint32 ChannelMask,
   1324                                           uint8 ScanDuration,
   1325                                           uint8 ScanCount,
   1326                                           uint8 NwkUpdateId,
   1327                                           uint16 NwkManagerAddr )
   1328          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7404         MOV     A,#0x4
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   E9           MOV     A,R1
   \   000015   C0E0         PUSH    A
   \   000017   7401         MOV     A,#0x1
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   D0E0         POP     A
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   EC           MOV     A,R4
   \   000020   C0E0         PUSH    A
   \   000022   7403         MOV     A,#0x3
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   D0E0         POP     A
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   ED           MOV     A,R5
   \   00002B   C0E0         PUSH    A
   \   00002D   7402         MOV     A,#0x2
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   D0E0         POP     A
   \   000034   F0           MOVX    @DPTR,A
   \   000035   7416         MOV     A,#0x16
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   78..         MOV     R0,#?V0
   \   00003C   12....       LCALL   ?L_MOV_X
   \   00003F   741A         MOV     A,#0x1a
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V6,A
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V7,A
   1329            uint8 *pBuf = ZDP_TmpBuf;
   \   00004B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   FE           MOV     R6,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   FF           MOV     R7,A
   1330            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \   000053   85..82       MOV     DPL,?XSP + 0
   \   000056   85..83       MOV     DPH,?XSP + 1
   \   000059   7405         MOV     A,#0x5
   \   00005B   F0           MOVX    @DPTR,A
   1331          
   1332            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   00005C                ; Setup parameters for call to function osal_buffer_uint32
   \   00005C   78..         MOV     R0,#?V0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000061   EE           MOV     A,R6
   \   000062   FA           MOV     R2,A
   \   000063   EF           MOV     A,R7
   \   000064   FB           MOV     R3,A
   \   000065   12....       LCALL   ??osal_buffer_uint32?relay; Banked call to: osal_buffer_uint32
   \   000068   7404         MOV     A,#0x4
   \   00006A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006D   8A..         MOV     ?V4,R2
   \   00006F   8B..         MOV     ?V5,R3
   \   000071   AE..         MOV     R6,?V4
   \   000073   AF..         MOV     R7,?V5
   1333          
   1334            *pBuf++ = ScanDuration;
   \   000075   7401         MOV     A,#0x1
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   C0E0         PUSH    A
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   D0E0         POP     A
   \   000083   F0           MOVX    @DPTR,A
   \   000084   8E82         MOV     DPL,R6
   \   000086   8F83         MOV     DPH,R7
   \   000088   A3           INC     DPTR
   \   000089   AE82         MOV     R6,DPL
   \   00008B   AF83         MOV     R7,DPH
   1335          
   1336            if ( ScanDuration <= 0x05 )
   \   00008D   7401         MOV     A,#0x1
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   E0           MOVX    A,@DPTR
   \   000093   C3           CLR     C
   \   000094   9406         SUBB    A,#0x6
   \   000096   5024         JNC     ??ZDP_MgmtNwkUpdateReq_0
   1337            {
   1338              // Request is to scan over channelMask
   1339              len += sizeof( uint8 );
   \   000098   85..82       MOV     DPL,?XSP + 0
   \   00009B   85..83       MOV     DPH,?XSP + 1
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   2401         ADD     A,#0x1
   \   0000A1   F0           MOVX    @DPTR,A
   1340          
   1341              *pBuf++ = ScanCount;
   \   0000A2   7403         MOV     A,#0x3
   \   0000A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   C0E0         PUSH    A
   \   0000AA   8E82         MOV     DPL,R6
   \   0000AC   8F83         MOV     DPH,R7
   \   0000AE   D0E0         POP     A
   \   0000B0   F0           MOVX    @DPTR,A
   \   0000B1   8E82         MOV     DPL,R6
   \   0000B3   8F83         MOV     DPH,R7
   \   0000B5   A3           INC     DPTR
   \   0000B6   AE82         MOV     R6,DPL
   \   0000B8   AF83         MOV     R7,DPH
   \   0000BA   8078         SJMP    ??ZDP_MgmtNwkUpdateReq_1
   1342            }
   1343            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   0000BC   7401         MOV     A,#0x1
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   64FE         XRL     A,#0xfe
   \   0000C4   600A         JZ      ??ZDP_MgmtNwkUpdateReq_2
   \   0000C6   7401         MOV     A,#0x1
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   64FF         XRL     A,#0xff
   \   0000CE   7064         JNZ     ??ZDP_MgmtNwkUpdateReq_1
   1344            {
   1345              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1346              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   0000D0   85..82       MOV     DPL,?XSP + 0
   \   0000D3   85..83       MOV     DPH,?XSP + 1
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   2401         ADD     A,#0x1
   \   0000D9   F0           MOVX    @DPTR,A
   1347          
   1348              *pBuf++ = NwkUpdateId;
   \   0000DA   7402         MOV     A,#0x2
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   C0E0         PUSH    A
   \   0000E2   8E82         MOV     DPL,R6
   \   0000E4   8F83         MOV     DPH,R7
   \   0000E6   D0E0         POP     A
   \   0000E8   F0           MOVX    @DPTR,A
   \   0000E9   8E82         MOV     DPL,R6
   \   0000EB   8F83         MOV     DPH,R7
   \   0000ED   A3           INC     DPTR
   \   0000EE   AE82         MOV     R6,DPL
   \   0000F0   AF83         MOV     R7,DPH
   1349          
   1350              if ( ScanDuration == 0xFF )
   \   0000F2   7401         MOV     A,#0x1
   \   0000F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   64FF         XRL     A,#0xff
   \   0000FA   7038         JNZ     ??ZDP_MgmtNwkUpdateReq_1
   1351              {
   1352                len += sizeof( uint16 );
   \   0000FC   85..82       MOV     DPL,?XSP + 0
   \   0000FF   85..83       MOV     DPH,?XSP + 1
   \   000102   E0           MOVX    A,@DPTR
   \   000103   2402         ADD     A,#0x2
   \   000105   F0           MOVX    @DPTR,A
   1353          
   1354                *pBuf++  = LO_UINT16( NwkManagerAddr );
   \   000106   E5..         MOV     A,?V6
   \   000108   C0E0         PUSH    A
   \   00010A   8E82         MOV     DPL,R6
   \   00010C   8F83         MOV     DPH,R7
   \   00010E   D0E0         POP     A
   \   000110   F0           MOVX    @DPTR,A
   \   000111   8E82         MOV     DPL,R6
   \   000113   8F83         MOV     DPH,R7
   \   000115   A3           INC     DPTR
   \   000116   AE82         MOV     R6,DPL
   \   000118   AF83         MOV     R7,DPH
   1355                *pBuf++  = HI_UINT16( NwkManagerAddr );
   \   00011A   A8..         MOV     R0,?V6
   \   00011C   A9..         MOV     R1,?V7
   \   00011E   E4           CLR     A
   \   00011F   C9           XCH     A,R1
   \   000120   F8           MOV     R0,A
   \   000121   E8           MOV     A,R0
   \   000122   C0E0         PUSH    A
   \   000124   8E82         MOV     DPL,R6
   \   000126   8F83         MOV     DPH,R7
   \   000128   D0E0         POP     A
   \   00012A   F0           MOVX    @DPTR,A
   \   00012B   8E82         MOV     DPL,R6
   \   00012D   8F83         MOV     DPH,R7
   \   00012F   A3           INC     DPTR
   \   000130   AE82         MOV     R6,DPL
   \   000132   AF83         MOV     R7,DPH
   1356              }
   1357            }
   1358          
   1359            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   000134                ; Setup parameters for call to function fillAndSend
   \   000134   75..38       MOV     ?V4,#0x38
   \   000137   75..00       MOV     ?V5,#0x0
   \   00013A   78..         MOV     R0,#?V4
   \   00013C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013F   7402         MOV     A,#0x2
   \   000141   12....       LCALL   ?XSTACK_DISP0_8
   \   000144   E0           MOVX    A,@DPTR
   \   000145   F9           MOV     R1,A
   \   000146   7406         MOV     A,#0x6
   \   000148   12....       LCALL   ?XSTACK_DISP0_8
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   FC           MOV     R4,A
   \   00014D   A3           INC     DPTR
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   FD           MOV     R5,A
   \   000150   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000152   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000154   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000157   7402         MOV     A,#0x2
   \   000159   12....       LCALL   ?DEALLOC_XSTACK8
   \   00015C   7406         MOV     A,#0x6
   \   00015E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000161   7F08         MOV     R7,#0x8
   \   000163   02....       LJMP    ?BANKED_LEAVE_XDATA
   1360          }
   1361          
   1362          
   1363          /*********************************************************************
   1364           * Network Management Responses
   1365           */
   1366          
   1367          /*********************************************************************
   1368           * @fn          ZDP_MgmtNwkDiscRsp
   1369           *
   1370           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1371           *              function sends a unicast message.
   1372           *
   1373           * @param       dstAddr - destination address of the message
   1374           * @param       Status - message status (ZDP_SUCCESS or other)
   1375           * @param       NetworkCount - Total number of networks found
   1376           * @param       StartIndex - Starting index within the reporting network
   1377           *                           list
   1378           * @param       NetworkListCount - number of network lists included
   1379           *                                 in this message
   1380           * @param       NetworkList - List of network descriptors
   1381           * @param       SecurityEnable - Security Options
   1382           *
   1383           * @return      afStatus_t
   1384           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1385          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1386                                      byte Status,
   1387                                      byte NetworkCount,
   1388                                      byte StartIndex,
   1389                                      byte NetworkListCount,
   1390                                      networkDesc_t *NetworkList,
   1391                                      byte SecurityEnable )
   1392          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   7404         MOV     A,#0x4
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   D0E0         POP     A
   \   000014   F0           MOVX    @DPTR,A
   \   000015   7405         MOV     A,#0x5
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   EA           MOV     A,R2
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   EB           MOV     A,R3
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   EC           MOV     A,R4
   \   000020   C0E0         PUSH    A
   \   000022   7403         MOV     A,#0x3
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   D0E0         POP     A
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   ED           MOV     A,R5
   \   00002B   C0E0         PUSH    A
   \   00002D   7402         MOV     A,#0x2
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   D0E0         POP     A
   \   000034   F0           MOVX    @DPTR,A
   \   000035   7418         MOV     A,#0x18
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V3,A
   \   00003D   7419         MOV     A,#0x19
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F5..         MOV     ?V0,A
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F5..         MOV     ?V1,A
   1393            uint8 *buf;
   1394            uint8 *pBuf;
   1395            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   \   000049   75..04       MOV     ?V2,#0x4
   1396            byte idx;
   1397          
   1398            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1399          
   1400            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \   00004C   75F00C       MOV     B,#0xc
   \   00004F   E5..         MOV     A,?V3
   \   000051   A4           MUL     AB
   \   000052   25..         ADD     A,?V2
   \   000054   F5..         MOV     ?V2,A
   1401          
   1402            buf = osal_mem_alloc( len+1 );
   \   000056                ; Setup parameters for call to function osal_mem_alloc
   \   000056   A8..         MOV     R0,?V2
   \   000058   7900         MOV     R1,#0x0
   \   00005A   E8           MOV     A,R0
   \   00005B   2401         ADD     A,#0x1
   \   00005D   FA           MOV     R2,A
   \   00005E   E4           CLR     A
   \   00005F   39           ADDC    A,R1
   \   000060   FB           MOV     R3,A
   \   000061   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000064   85..82       MOV     DPL,?XSP + 0
   \   000067   85..83       MOV     DPH,?XSP + 1
   \   00006A   EA           MOV     A,R2
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   EB           MOV     A,R3
   \   00006E   F0           MOVX    @DPTR,A
   1403            if ( buf == NULL )
   \   00006F   85..82       MOV     DPL,?XSP + 0
   \   000072   85..83       MOV     DPH,?XSP + 1
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F8           MOV     R0,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F9           MOV     R1,A
   \   00007A   E8           MOV     A,R0
   \   00007B   49           ORL     A,R1
   \   00007C   7005         JNZ     ??ZDP_MgmtNwkDiscRsp_0
   1404            {
   1405              return afStatus_MEM_FAIL;
   \   00007E   7910         MOV     R1,#0x10
   \   000080   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_1 & 0xFFFF
   1406            }
   1407          
   1408            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   000083   85..82       MOV     DPL,?XSP + 0
   \   000086   85..83       MOV     DPH,?XSP + 1
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   2401         ADD     A,#0x1
   \   00008C   F8           MOV     R0,A
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   3400         ADDC    A,#0x0
   \   000091   F9           MOV     R1,A
   \   000092   E8           MOV     A,R0
   \   000093   FE           MOV     R6,A
   \   000094   E9           MOV     A,R1
   \   000095   FF           MOV     R7,A
   1409          
   1410            *pBuf++ = Status;
   \   000096   7403         MOV     A,#0x3
   \   000098   12....       LCALL   ?XSTACK_DISP0_8
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   C0E0         PUSH    A
   \   00009E   8E82         MOV     DPL,R6
   \   0000A0   8F83         MOV     DPH,R7
   \   0000A2   D0E0         POP     A
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   8E82         MOV     DPL,R6
   \   0000A7   8F83         MOV     DPH,R7
   \   0000A9   A3           INC     DPTR
   \   0000AA   AE82         MOV     R6,DPL
   \   0000AC   AF83         MOV     R7,DPH
   1411            *pBuf++ = NetworkCount;
   \   0000AE   7402         MOV     A,#0x2
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   C0E0         PUSH    A
   \   0000B6   8E82         MOV     DPL,R6
   \   0000B8   8F83         MOV     DPH,R7
   \   0000BA   D0E0         POP     A
   \   0000BC   F0           MOVX    @DPTR,A
   \   0000BD   8E82         MOV     DPL,R6
   \   0000BF   8F83         MOV     DPH,R7
   \   0000C1   A3           INC     DPTR
   \   0000C2   AE82         MOV     R6,DPL
   \   0000C4   AF83         MOV     R7,DPH
   1412            *pBuf++ = StartIndex;
   \   0000C6   7417         MOV     A,#0x17
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   C0E0         PUSH    A
   \   0000CE   8E82         MOV     DPL,R6
   \   0000D0   8F83         MOV     DPH,R7
   \   0000D2   D0E0         POP     A
   \   0000D4   F0           MOVX    @DPTR,A
   \   0000D5   8E82         MOV     DPL,R6
   \   0000D7   8F83         MOV     DPH,R7
   \   0000D9   A3           INC     DPTR
   \   0000DA   AE82         MOV     R6,DPL
   \   0000DC   AF83         MOV     R7,DPH
   1413            *pBuf++ = NetworkListCount;
   \   0000DE   E5..         MOV     A,?V3
   \   0000E0   C0E0         PUSH    A
   \   0000E2   8E82         MOV     DPL,R6
   \   0000E4   8F83         MOV     DPH,R7
   \   0000E6   D0E0         POP     A
   \   0000E8   F0           MOVX    @DPTR,A
   \   0000E9   8E82         MOV     DPL,R6
   \   0000EB   8F83         MOV     DPH,R7
   \   0000ED   A3           INC     DPTR
   \   0000EE   AE82         MOV     R6,DPL
   \   0000F0   AF83         MOV     R7,DPH
   1414          
   1415            for ( idx = 0; idx < NetworkListCount; idx++ )
   \   0000F2   75..00       MOV     ?V6,#0x0
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   0000F5   E5..         MOV     A,?V6
   \   0000F7   C3           CLR     C
   \   0000F8   95..         SUBB    A,?V3
   \   0000FA   4003         JC      $+5
   \   0000FC   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
   1416            {
   1417              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   \   0000FF                ; Setup parameters for call to function sAddrExtCpy
   \   0000FF   E5..         MOV     A,?V0
   \   000101   240B         ADD     A,#0xb
   \   000103   FC           MOV     R4,A
   \   000104   E4           CLR     A
   \   000105   35..         ADDC    A,?V1
   \   000107   FD           MOV     R5,A
   \   000108   EE           MOV     A,R6
   \   000109   FA           MOV     R2,A
   \   00010A   EF           MOV     A,R7
   \   00010B   FB           MOV     R3,A
   \   00010C   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   1418              pBuf += Z_EXTADDR_LEN;
   \   00010F   EE           MOV     A,R6
   \   000110   2408         ADD     A,#0x8
   \   000112   FE           MOV     R6,A
   \   000113   5001         JNC     ??ZDP_MgmtNwkDiscRsp_4
   \   000115   0F           INC     R7
   1419          
   1420              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   000116   85..82       MOV     DPL,?V0
   \   000119   85..83       MOV     DPH,?V1
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   C0E0         PUSH    A
   \   000121   8E82         MOV     DPL,R6
   \   000123   8F83         MOV     DPH,R7
   \   000125   D0E0         POP     A
   \   000127   F0           MOVX    @DPTR,A
   \   000128   8E82         MOV     DPL,R6
   \   00012A   8F83         MOV     DPH,R7
   \   00012C   A3           INC     DPTR
   \   00012D   AE82         MOV     R6,DPL
   \   00012F   AF83         MOV     R7,DPH
   1421              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   \   000131   85..82       MOV     DPL,?V0
   \   000134   85..83       MOV     DPH,?V1
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   A3           INC     DPTR
   \   00013C   A3           INC     DPTR
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   C0E0         PUSH    A
   \   000140   8E82         MOV     DPL,R6
   \   000142   8F83         MOV     DPH,R7
   \   000144   D0E0         POP     A
   \   000146   F0           MOVX    @DPTR,A
   1422              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   \   000147   EE           MOV     A,R6
   \   000148   F8           MOV     R0,A
   \   000149   EF           MOV     A,R7
   \   00014A   F9           MOV     R1,A
   \   00014B   8882         MOV     DPL,R0
   \   00014D   8983         MOV     DPH,R1
   \   00014F   A3           INC     DPTR
   \   000150   AE82         MOV     R6,DPL
   \   000152   AF83         MOV     R7,DPH
   \   000154   85..82       MOV     DPL,?V0
   \   000157   85..83       MOV     DPH,?V1
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   A3           INC     DPTR
   \   00015D   A3           INC     DPTR
   \   00015E   A3           INC     DPTR
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   C4           SWAP    A
   \   000161   54F0         ANL     A,#0xf0
   \   000163   FA           MOV     R2,A
   \   000164   8882         MOV     DPL,R0
   \   000166   8983         MOV     DPH,R1
   \   000168   E0           MOVX    A,@DPTR
   \   000169   4A           ORL     A,R2
   \   00016A   F0           MOVX    @DPTR,A
   1423              *pBuf    = BEACON_ORDER_NO_BEACONS;                    // Beacon Order
   \   00016B   8E82         MOV     DPL,R6
   \   00016D   8F83         MOV     DPH,R7
   \   00016F   740F         MOV     A,#0xf
   \   000171   F0           MOVX    @DPTR,A
   1424              *pBuf++ |= (uint8)(BEACON_ORDER_NO_BEACONS << 4);      // Superframe Order
   \   000172   EE           MOV     A,R6
   \   000173   F8           MOV     R0,A
   \   000174   EF           MOV     A,R7
   \   000175   F9           MOV     R1,A
   \   000176   8882         MOV     DPL,R0
   \   000178   8983         MOV     DPH,R1
   \   00017A   A3           INC     DPTR
   \   00017B   AE82         MOV     R6,DPL
   \   00017D   AF83         MOV     R7,DPH
   \   00017F   8882         MOV     DPL,R0
   \   000181   8983         MOV     DPH,R1
   \   000183   E0           MOVX    A,@DPTR
   \   000184   44F0         ORL     A,#0xf0
   \   000186   F0           MOVX    @DPTR,A
   1425          
   1426              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   \   000187   85..82       MOV     DPL,?V0
   \   00018A   85..83       MOV     DPH,?V1
   \   00018D   A3           INC     DPTR
   \   00018E   A3           INC     DPTR
   \   00018F   A3           INC     DPTR
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   A3           INC     DPTR
   \   000193   A3           INC     DPTR
   \   000194   E0           MOVX    A,@DPTR
   \   000195   64FE         XRL     A,#0xfe
   \   000197   7004         JNZ     ??ZDP_MgmtNwkDiscRsp_5
   \   000199   A3           INC     DPTR
   \   00019A   E0           MOVX    A,@DPTR
   \   00019B   64FF         XRL     A,#0xff
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   00019D   6012         JZ      ??ZDP_MgmtNwkDiscRsp_6
   1427              {
   1428                *pBuf++ = TRUE;                         // Permit Joining
   \   00019F   8E82         MOV     DPL,R6
   \   0001A1   8F83         MOV     DPH,R7
   \   0001A3   7401         MOV     A,#0x1
   \   0001A5   F0           MOVX    @DPTR,A
   \   0001A6   8E82         MOV     DPL,R6
   \   0001A8   8F83         MOV     DPH,R7
   \   0001AA   A3           INC     DPTR
   \   0001AB   AE82         MOV     R6,DPL
   \   0001AD   AF83         MOV     R7,DPH
   \   0001AF   8010         SJMP    ??ZDP_MgmtNwkDiscRsp_7
   1429              }
   1430              else
   1431              {
   1432                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_6:
   \   0001B1   8E82         MOV     DPL,R6
   \   0001B3   8F83         MOV     DPH,R7
   \   0001B5   7400         MOV     A,#0x0
   \   0001B7   F0           MOVX    @DPTR,A
   \   0001B8   8E82         MOV     DPL,R6
   \   0001BA   8F83         MOV     DPH,R7
   \   0001BC   A3           INC     DPTR
   \   0001BD   AE82         MOV     R6,DPL
   \   0001BF   AF83         MOV     R7,DPH
   1433              }
   1434          
   1435              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \                     ??ZDP_MgmtNwkDiscRsp_7:
   \   0001C1   E5..         MOV     A,?V0
   \   0001C3   2414         ADD     A,#0x14
   \   0001C5   F582         MOV     DPL,A
   \   0001C7   E4           CLR     A
   \   0001C8   35..         ADDC    A,?V1
   \   0001CA   F583         MOV     DPH,A
   \   0001CC   E0           MOVX    A,@DPTR
   \   0001CD   F5..         MOV     ?V0,A
   \   0001CF   A3           INC     DPTR
   \   0001D0   E0           MOVX    A,@DPTR
   \   0001D1   F5..         MOV     ?V1,A
   1436            }
   \   0001D3   05..         INC     ?V6
   \   0001D5   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_2 & 0xFFFF
   1437          
   1438            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   0001D8   85..82       MOV     DPL,?XSP + 0
   \   0001DB   85..83       MOV     DPH,?XSP + 1
   \   0001DE   E0           MOVX    A,@DPTR
   \   0001DF   2401         ADD     A,#0x1
   \   0001E1   F8           MOV     R0,A
   \   0001E2   A3           INC     DPTR
   \   0001E3   E0           MOVX    A,@DPTR
   \   0001E4   3400         ADDC    A,#0x0
   \   0001E6   F9           MOV     R1,A
   \   0001E7   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0001EA   E8           MOV     A,R0
   \   0001EB   F0           MOVX    @DPTR,A
   \   0001EC   A3           INC     DPTR
   \   0001ED   E9           MOV     A,R1
   \   0001EE   F0           MOVX    @DPTR,A
   \   0001EF                ; Setup parameters for call to function fillAndSend
   \   0001EF   75..30       MOV     ?V4,#0x30
   \   0001F2   75..80       MOV     ?V5,#-0x80
   \   0001F5   78..         MOV     R0,#?V4
   \   0001F7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001FA   A9..         MOV     R1,?V2
   \   0001FC   7407         MOV     A,#0x7
   \   0001FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000201   E0           MOVX    A,@DPTR
   \   000202   FC           MOV     R4,A
   \   000203   A3           INC     DPTR
   \   000204   E0           MOVX    A,@DPTR
   \   000205   FD           MOV     R5,A
   \   000206   7406         MOV     A,#0x6
   \   000208   12....       LCALL   ?XSTACK_DISP101_8
   \   00020B   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00020E   7402         MOV     A,#0x2
   \   000210   12....       LCALL   ?DEALLOC_XSTACK8
   \   000213   E9           MOV     A,R1
   \   000214   F5..         MOV     ?V7,A
   \   000216                ; Setup parameters for call to function osal_mem_free
   \   000216   85..82       MOV     DPL,?XSP + 0
   \   000219   85..83       MOV     DPH,?XSP + 1
   \   00021C   E0           MOVX    A,@DPTR
   \   00021D   FA           MOV     R2,A
   \   00021E   A3           INC     DPTR
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   FB           MOV     R3,A
   \   000221   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   000224   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000227   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000229   F0           MOVX    @DPTR,A
   \   00022A   A3           INC     DPTR
   \   00022B   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   00022D   F0           MOVX    @DPTR,A
   \   00022E   A9..         MOV     R1,?V7
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   000230   7407         MOV     A,#0x7
   \   000232   12....       LCALL   ?DEALLOC_XSTACK8
   \   000235   7F08         MOV     R7,#0x8
   \   000237   02....       LJMP    ?BANKED_LEAVE_XDATA
   1439          }
   1440          
   1441          /*********************************************************************
   1442           * @fn          ZDP_MgmtLqiRsp
   1443           *
   1444           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1445           *              function sends a unicast message.
   1446           *
   1447           * @param       dstAddr - destination address of the message
   1448           * @param       Status - message status (ZDP_SUCCESS or other)
   1449           * @param       NeighborLqiEntries - Total number of entries found
   1450           * @param       StartIndex - Starting index within the reporting list
   1451           * @param       NeighborLqiCount - number of lists included
   1452           *                                 in this message
   1453           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1454           *                is the list to be sent, not the entire list
   1455           * @param       SecurityEnable - true if secure
   1456           *
   1457           * @return      ZStatus_t
   1458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1459          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1460                                    byte Status,
   1461                                    byte NeighborLqiEntries,
   1462                                    byte StartIndex,
   1463                                    byte NeighborLqiCount,
   1464                                    ZDP_MgmtLqiItem_t* NeighborList,
   1465                                    byte SecurityEnable )
   1466          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   7403         MOV     A,#0x3
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   D0E0         POP     A
   \   000014   F0           MOVX    @DPTR,A
   \   000015   7405         MOV     A,#0x5
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   EA           MOV     A,R2
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   EB           MOV     A,R3
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   EC           MOV     A,R4
   \   000020   C0E0         PUSH    A
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   D0E0         POP     A
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   ED           MOV     A,R5
   \   00002B   C0E0         PUSH    A
   \   00002D   7404         MOV     A,#0x4
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   D0E0         POP     A
   \   000034   F0           MOVX    @DPTR,A
   1467            ZDP_MgmtLqiItem_t* list = NeighborList;
   \   000035   7419         MOV     A,#0x19
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V0,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F5..         MOV     ?V1,A
   1468            uint8 *buf, *pBuf;
   1469            byte len, x;
   1470          
   1471            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1472          
   1473            if ( ZSuccess != Status )
   \   000041   7402         MOV     A,#0x2
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   E0           MOVX    A,@DPTR
   \   000047   603D         JZ      ??ZDP_MgmtLqiRsp_0
   1474            {
   1475              ZDP_TmpBuf[0] = Status;
   \   000049   7402         MOV     A,#0x2
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   C0E0         PUSH    A
   \   000051   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F8           MOV     R0,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F583         MOV     DPH,A
   \   00005A   8882         MOV     DPL,R0
   \   00005C   D0E0         POP     A
   \   00005E   F0           MOVX    @DPTR,A
   1476              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   \   00005F                ; Setup parameters for call to function fillAndSend
   \   00005F   75..31       MOV     ?V2,#0x31
   \   000062   75..80       MOV     ?V3,#-0x80
   \   000065   78..         MOV     R0,#?V2
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   7901         MOV     R1,#0x1
   \   00006C   7407         MOV     A,#0x7
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   E0           MOVX    A,@DPTR
   \   000072   FC           MOV     R4,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   FD           MOV     R5,A
   \   000076   7405         MOV     A,#0x5
   \   000078   12....       LCALL   ?XSTACK_DISP101_8
   \   00007B   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00007E   7402         MOV     A,#0x2
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
   \   000083   02....       LJMP    ??ZDP_MgmtLqiRsp_1 & 0xFFFF
   1477            }
   1478          
   1479            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1480            //  neighbor LQI data.
   1481            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000086   75F016       MOV     B,#0x16
   \   000089   7418         MOV     A,#0x18
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   A4           MUL     AB
   \   000090   2404         ADD     A,#0x4
   \   000092   C0E0         PUSH    A
   \   000094   7401         MOV     A,#0x1
   \   000096   12....       LCALL   ?XSTACK_DISP0_8
   \   000099   D0E0         POP     A
   \   00009B   F0           MOVX    @DPTR,A
   1482          
   1483            buf = osal_mem_alloc( len+1 );
   \   00009C                ; Setup parameters for call to function osal_mem_alloc
   \   00009C   7401         MOV     A,#0x1
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   F8           MOV     R0,A
   \   0000A3   7900         MOV     R1,#0x0
   \   0000A5   E8           MOV     A,R0
   \   0000A6   2401         ADD     A,#0x1
   \   0000A8   FA           MOV     R2,A
   \   0000A9   E4           CLR     A
   \   0000AA   39           ADDC    A,R1
   \   0000AB   FB           MOV     R3,A
   \   0000AC   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0000AF   8A..         MOV     ?V2,R2
   \   0000B1   8B..         MOV     ?V3,R3
   \   0000B3   85....       MOV     ?V6,?V2
   \   0000B6   85....       MOV     ?V7,?V3
   1484            if ( buf == NULL )
   \   0000B9   E5..         MOV     A,?V6
   \   0000BB   45..         ORL     A,?V7
   \   0000BD   7005         JNZ     ??ZDP_MgmtLqiRsp_2
   1485            {
   1486              return afStatus_MEM_FAIL;
   \   0000BF   7910         MOV     R1,#0x10
   \   0000C1   02....       LJMP    ??ZDP_MgmtLqiRsp_1 & 0xFFFF
   1487            }
   1488          
   1489            pBuf = buf+1;
   \                     ??ZDP_MgmtLqiRsp_2:
   \   0000C4   85..82       MOV     DPL,?V6
   \   0000C7   85..83       MOV     DPH,?V7
   \   0000CA   A3           INC     DPTR
   \   0000CB   AE82         MOV     R6,DPL
   \   0000CD   AF83         MOV     R7,DPH
   1490          
   1491            *pBuf++ = Status;
   \   0000CF   7402         MOV     A,#0x2
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   C0E0         PUSH    A
   \   0000D7   8E82         MOV     DPL,R6
   \   0000D9   8F83         MOV     DPH,R7
   \   0000DB   D0E0         POP     A
   \   0000DD   F0           MOVX    @DPTR,A
   \   0000DE   8E82         MOV     DPL,R6
   \   0000E0   8F83         MOV     DPH,R7
   \   0000E2   A3           INC     DPTR
   \   0000E3   AE82         MOV     R6,DPL
   \   0000E5   AF83         MOV     R7,DPH
   1492            *pBuf++ = NeighborLqiEntries;
   \   0000E7   7404         MOV     A,#0x4
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   C0E0         PUSH    A
   \   0000EF   8E82         MOV     DPL,R6
   \   0000F1   8F83         MOV     DPH,R7
   \   0000F3   D0E0         POP     A
   \   0000F5   F0           MOVX    @DPTR,A
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   A3           INC     DPTR
   \   0000FB   AE82         MOV     R6,DPL
   \   0000FD   AF83         MOV     R7,DPH
   1493            *pBuf++ = StartIndex;
   \   0000FF   7417         MOV     A,#0x17
   \   000101   12....       LCALL   ?XSTACK_DISP0_8
   \   000104   E0           MOVX    A,@DPTR
   \   000105   C0E0         PUSH    A
   \   000107   8E82         MOV     DPL,R6
   \   000109   8F83         MOV     DPH,R7
   \   00010B   D0E0         POP     A
   \   00010D   F0           MOVX    @DPTR,A
   \   00010E   8E82         MOV     DPL,R6
   \   000110   8F83         MOV     DPH,R7
   \   000112   A3           INC     DPTR
   \   000113   AE82         MOV     R6,DPL
   \   000115   AF83         MOV     R7,DPH
   1494            *pBuf++ = NeighborLqiCount;
   \   000117   7418         MOV     A,#0x18
   \   000119   12....       LCALL   ?XSTACK_DISP0_8
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   C0E0         PUSH    A
   \   00011F   8E82         MOV     DPL,R6
   \   000121   8F83         MOV     DPH,R7
   \   000123   D0E0         POP     A
   \   000125   F0           MOVX    @DPTR,A
   \   000126   8E82         MOV     DPL,R6
   \   000128   8F83         MOV     DPH,R7
   \   00012A   A3           INC     DPTR
   \   00012B   AE82         MOV     R6,DPL
   \   00012D   AF83         MOV     R7,DPH
   1495          
   1496            for ( x = 0; x < NeighborLqiCount; x++ )
   \   00012F   85..82       MOV     DPL,?XSP + 0
   \   000132   85..83       MOV     DPH,?XSP + 1
   \   000135   7400         MOV     A,#0x0
   \   000137   F0           MOVX    @DPTR,A
   \                     ??ZDP_MgmtLqiRsp_3:
   \   000138   7418         MOV     A,#0x18
   \   00013A   12....       LCALL   ?XSTACK_DISP0_8
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   F8           MOV     R0,A
   \   00013F   85..82       MOV     DPL,?XSP + 0
   \   000142   85..83       MOV     DPH,?XSP + 1
   \   000145   E0           MOVX    A,@DPTR
   \   000146   C3           CLR     C
   \   000147   98           SUBB    A,R0
   \   000148   4003         JC      $+5
   \   00014A   02....       LJMP    ??ZDP_MgmtLqiRsp_4 & 0xFFFF
   1497            {
   1498              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \   00014D                ; Setup parameters for call to function sAddrExtCpy
   \   00014D   E5..         MOV     A,?V0
   \   00014F   2402         ADD     A,#0x2
   \   000151   FC           MOV     R4,A
   \   000152   E4           CLR     A
   \   000153   35..         ADDC    A,?V1
   \   000155   FD           MOV     R5,A
   \   000156   EE           MOV     A,R6
   \   000157   FA           MOV     R2,A
   \   000158   EF           MOV     A,R7
   \   000159   FB           MOV     R3,A
   \   00015A   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   1499              pBuf += Z_EXTADDR_LEN;
   \   00015D   EE           MOV     A,R6
   \   00015E   2408         ADD     A,#0x8
   \   000160   FE           MOV     R6,A
   \   000161   5001         JNC     ??ZDP_MgmtLqiRsp_5
   \   000163   0F           INC     R7
   1500          
   1501              // EXTADDR
   1502              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \                     ??ZDP_MgmtLqiRsp_5:
   \   000164                ; Setup parameters for call to function sAddrExtCpy
   \   000164   E5..         MOV     A,?V0
   \   000166   240A         ADD     A,#0xa
   \   000168   FC           MOV     R4,A
   \   000169   E4           CLR     A
   \   00016A   35..         ADDC    A,?V1
   \   00016C   FD           MOV     R5,A
   \   00016D   EE           MOV     A,R6
   \   00016E   FA           MOV     R2,A
   \   00016F   EF           MOV     A,R7
   \   000170   FB           MOV     R3,A
   \   000171   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   000174   8A..         MOV     ?V2,R2
   \   000176   8B..         MOV     ?V3,R3
   \   000178   AE..         MOV     R6,?V2
   \   00017A   AF..         MOV     R7,?V3
   1503          
   1504              // NWKADDR
   1505              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   00017C   E5..         MOV     A,?V0
   \   00017E   2412         ADD     A,#0x12
   \   000180   F582         MOV     DPL,A
   \   000182   E4           CLR     A
   \   000183   35..         ADDC    A,?V1
   \   000185   F583         MOV     DPH,A
   \   000187   E0           MOVX    A,@DPTR
   \   000188   F8           MOV     R0,A
   \   000189   A3           INC     DPTR
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   F9           MOV     R1,A
   \   00018C   E8           MOV     A,R0
   \   00018D   C0E0         PUSH    A
   \   00018F   8E82         MOV     DPL,R6
   \   000191   8F83         MOV     DPH,R7
   \   000193   D0E0         POP     A
   \   000195   F0           MOVX    @DPTR,A
   \   000196   8E82         MOV     DPL,R6
   \   000198   8F83         MOV     DPH,R7
   \   00019A   A3           INC     DPTR
   \   00019B   AE82         MOV     R6,DPL
   \   00019D   AF83         MOV     R7,DPH
   1506              *pBuf++ = HI_UINT16( list->nwkAddr );
   \   00019F   E5..         MOV     A,?V0
   \   0001A1   2412         ADD     A,#0x12
   \   0001A3   F582         MOV     DPL,A
   \   0001A5   E4           CLR     A
   \   0001A6   35..         ADDC    A,?V1
   \   0001A8   F583         MOV     DPH,A
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   F8           MOV     R0,A
   \   0001AC   A3           INC     DPTR
   \   0001AD   E0           MOVX    A,@DPTR
   \   0001AE   F9           MOV     R1,A
   \   0001AF   E4           CLR     A
   \   0001B0   C9           XCH     A,R1
   \   0001B1   F8           MOV     R0,A
   \   0001B2   E8           MOV     A,R0
   \   0001B3   C0E0         PUSH    A
   \   0001B5   8E82         MOV     DPL,R6
   \   0001B7   8F83         MOV     DPH,R7
   \   0001B9   D0E0         POP     A
   \   0001BB   F0           MOVX    @DPTR,A
   \   0001BC   8E82         MOV     DPL,R6
   \   0001BE   8F83         MOV     DPH,R7
   \   0001C0   A3           INC     DPTR
   \   0001C1   AE82         MOV     R6,DPL
   \   0001C3   AF83         MOV     R7,DPH
   1507          
   1508              // DEVICETYPE
   1509              *pBuf = list->devType;
   \   0001C5   E5..         MOV     A,?V0
   \   0001C7   2414         ADD     A,#0x14
   \   0001C9   F582         MOV     DPL,A
   \   0001CB   E4           CLR     A
   \   0001CC   35..         ADDC    A,?V1
   \   0001CE   F583         MOV     DPH,A
   \   0001D0   E0           MOVX    A,@DPTR
   \   0001D1   C0E0         PUSH    A
   \   0001D3   8E82         MOV     DPL,R6
   \   0001D5   8F83         MOV     DPH,R7
   \   0001D7   D0E0         POP     A
   \   0001D9   F0           MOVX    @DPTR,A
   1510          
   1511              // RXONIDLE
   1512              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \   0001DA   E5..         MOV     A,?V0
   \   0001DC   2415         ADD     A,#0x15
   \   0001DE   F582         MOV     DPL,A
   \   0001E0   E4           CLR     A
   \   0001E1   35..         ADDC    A,?V1
   \   0001E3   F583         MOV     DPH,A
   \   0001E5   E0           MOVX    A,@DPTR
   \   0001E6   33           RLC     A
   \   0001E7   33           RLC     A
   \   0001E8   54FC         ANL     A,#0xfc
   \   0001EA   F8           MOV     R0,A
   \   0001EB   8E82         MOV     DPL,R6
   \   0001ED   8F83         MOV     DPH,R7
   \   0001EF   E0           MOVX    A,@DPTR
   \   0001F0   48           ORL     A,R0
   \   0001F1   F0           MOVX    @DPTR,A
   1513          
   1514              // RELATIONSHIP
   1515              *pBuf++ |= (uint8)(list->relation << 4);
   \   0001F2   EE           MOV     A,R6
   \   0001F3   F8           MOV     R0,A
   \   0001F4   EF           MOV     A,R7
   \   0001F5   F9           MOV     R1,A
   \   0001F6   8882         MOV     DPL,R0
   \   0001F8   8983         MOV     DPH,R1
   \   0001FA   A3           INC     DPTR
   \   0001FB   AE82         MOV     R6,DPL
   \   0001FD   AF83         MOV     R7,DPH
   \   0001FF   E5..         MOV     A,?V0
   \   000201   2416         ADD     A,#0x16
   \   000203   F582         MOV     DPL,A
   \   000205   E4           CLR     A
   \   000206   35..         ADDC    A,?V1
   \   000208   F583         MOV     DPH,A
   \   00020A   E0           MOVX    A,@DPTR
   \   00020B   C4           SWAP    A
   \   00020C   54F0         ANL     A,#0xf0
   \   00020E   FA           MOV     R2,A
   \   00020F   8882         MOV     DPL,R0
   \   000211   8983         MOV     DPH,R1
   \   000213   E0           MOVX    A,@DPTR
   \   000214   4A           ORL     A,R2
   \   000215   F0           MOVX    @DPTR,A
   1516          
   1517              // PERMITJOINING
   1518              *pBuf++ = (uint8)(list->permit);
   \   000216   E5..         MOV     A,?V0
   \   000218   2417         ADD     A,#0x17
   \   00021A   F582         MOV     DPL,A
   \   00021C   E4           CLR     A
   \   00021D   35..         ADDC    A,?V1
   \   00021F   F583         MOV     DPH,A
   \   000221   E0           MOVX    A,@DPTR
   \   000222   C0E0         PUSH    A
   \   000224   8E82         MOV     DPL,R6
   \   000226   8F83         MOV     DPH,R7
   \   000228   D0E0         POP     A
   \   00022A   F0           MOVX    @DPTR,A
   \   00022B   8E82         MOV     DPL,R6
   \   00022D   8F83         MOV     DPH,R7
   \   00022F   A3           INC     DPTR
   \   000230   AE82         MOV     R6,DPL
   \   000232   AF83         MOV     R7,DPH
   1519          
   1520              // DEPTH
   1521              *pBuf++ = list->depth;
   \   000234   E5..         MOV     A,?V0
   \   000236   2418         ADD     A,#0x18
   \   000238   F582         MOV     DPL,A
   \   00023A   E4           CLR     A
   \   00023B   35..         ADDC    A,?V1
   \   00023D   F583         MOV     DPH,A
   \   00023F   E0           MOVX    A,@DPTR
   \   000240   C0E0         PUSH    A
   \   000242   8E82         MOV     DPL,R6
   \   000244   8F83         MOV     DPH,R7
   \   000246   D0E0         POP     A
   \   000248   F0           MOVX    @DPTR,A
   \   000249   8E82         MOV     DPL,R6
   \   00024B   8F83         MOV     DPH,R7
   \   00024D   A3           INC     DPTR
   \   00024E   AE82         MOV     R6,DPL
   \   000250   AF83         MOV     R7,DPH
   1522          
   1523              // LQI
   1524              *pBuf++ = list->lqi;
   \   000252   E5..         MOV     A,?V0
   \   000254   2419         ADD     A,#0x19
   \   000256   F582         MOV     DPL,A
   \   000258   E4           CLR     A
   \   000259   35..         ADDC    A,?V1
   \   00025B   F583         MOV     DPH,A
   \   00025D   E0           MOVX    A,@DPTR
   \   00025E   C0E0         PUSH    A
   \   000260   8E82         MOV     DPL,R6
   \   000262   8F83         MOV     DPH,R7
   \   000264   D0E0         POP     A
   \   000266   F0           MOVX    @DPTR,A
   \   000267   8E82         MOV     DPL,R6
   \   000269   8F83         MOV     DPH,R7
   \   00026B   A3           INC     DPTR
   \   00026C   AE82         MOV     R6,DPL
   \   00026E   AF83         MOV     R7,DPH
   1525          
   1526              list++; // next list entry
   \   000270   E5..         MOV     A,?V0
   \   000272   241A         ADD     A,#0x1a
   \   000274   F5..         MOV     ?V0,A
   \   000276   5002         JNC     ??ZDP_MgmtLqiRsp_6
   \   000278   05..         INC     ?V1
   1527            }
   \                     ??ZDP_MgmtLqiRsp_6:
   \   00027A   85..82       MOV     DPL,?XSP + 0
   \   00027D   85..83       MOV     DPH,?XSP + 1
   \   000280   E0           MOVX    A,@DPTR
   \   000281   2401         ADD     A,#0x1
   \   000283   F0           MOVX    @DPTR,A
   \   000284   02....       LJMP    ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   1528          
   1529            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \                     ??ZDP_MgmtLqiRsp_4:
   \   000287   85..82       MOV     DPL,?V6
   \   00028A   85..83       MOV     DPH,?V7
   \   00028D   A3           INC     DPTR
   \   00028E   A882         MOV     R0,DPL
   \   000290   A983         MOV     R1,DPH
   \   000292   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000295   E8           MOV     A,R0
   \   000296   F0           MOVX    @DPTR,A
   \   000297   A3           INC     DPTR
   \   000298   E9           MOV     A,R1
   \   000299   F0           MOVX    @DPTR,A
   \   00029A                ; Setup parameters for call to function fillAndSend
   \   00029A   75..31       MOV     ?V4,#0x31
   \   00029D   75..80       MOV     ?V5,#-0x80
   \   0002A0   78..         MOV     R0,#?V4
   \   0002A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002A5   7403         MOV     A,#0x3
   \   0002A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AA   E0           MOVX    A,@DPTR
   \   0002AB   F9           MOV     R1,A
   \   0002AC   7407         MOV     A,#0x7
   \   0002AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B1   E0           MOVX    A,@DPTR
   \   0002B2   FC           MOV     R4,A
   \   0002B3   A3           INC     DPTR
   \   0002B4   E0           MOVX    A,@DPTR
   \   0002B5   FD           MOV     R5,A
   \   0002B6   7405         MOV     A,#0x5
   \   0002B8   12....       LCALL   ?XSTACK_DISP101_8
   \   0002BB   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0002BE   7402         MOV     A,#0x2
   \   0002C0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002C3   E9           MOV     A,R1
   \   0002C4   F5..         MOV     ?V2,A
   \   0002C6                ; Setup parameters for call to function osal_mem_free
   \   0002C6   AA..         MOV     R2,?V6
   \   0002C8   AB..         MOV     R3,?V7
   \   0002CA   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0002CD   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0002D0   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   0002D2   F0           MOVX    @DPTR,A
   \   0002D3   A3           INC     DPTR
   \   0002D4   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   0002D6   F0           MOVX    @DPTR,A
   \   0002D7   A9..         MOV     R1,?V2
   \                     ??ZDP_MgmtLqiRsp_1:
   \   0002D9   7407         MOV     A,#0x7
   \   0002DB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002DE   7F08         MOV     R7,#0x8
   \   0002E0   02....       LJMP    ?BANKED_LEAVE_XDATA
   1530          }
   1531          
   1532          /*********************************************************************
   1533           * @fn          ZDP_MgmtRtgRsp
   1534           *
   1535           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1536           *              function sends a unicast message.
   1537           *
   1538           * @param       dstAddr - destination address of the message
   1539           * @param       Status - message status (ZDP_SUCCESS or other)
   1540           * @param       RoutingTableEntries - Total number of entries
   1541           * @param       StartIndex - Starting index within the reporting list
   1542           * @param       RoutingTableListCount - number of entries included
   1543           *                                      in this message
   1544           * @param       RoutingTableList - List of Routing Table entries
   1545           * @param       SecurityEnable - true to enable security for this message
   1546           *
   1547           * @return      ZStatus_t
   1548           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1549          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1550                                      byte Status,
   1551                                      byte RoutingTableEntries,
   1552                                      byte StartIndex,
   1553                                      byte RoutingListCount,
   1554                                      rtgItem_t *RoutingTableList,
   1555                                      byte SecurityEnable )
   1556          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   7404         MOV     A,#0x4
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   D0E0         POP     A
   \   000014   F0           MOVX    @DPTR,A
   \   000015   7405         MOV     A,#0x5
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   EA           MOV     A,R2
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   EB           MOV     A,R3
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   EC           MOV     A,R4
   \   000020   C0E0         PUSH    A
   \   000022   7403         MOV     A,#0x3
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   D0E0         POP     A
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   ED           MOV     A,R5
   \   00002B   C0E0         PUSH    A
   \   00002D   7402         MOV     A,#0x2
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   D0E0         POP     A
   \   000034   F0           MOVX    @DPTR,A
   \   000035   7418         MOV     A,#0x18
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V7,A
   \   00003D   7419         MOV     A,#0x19
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F5..         MOV     ?V0,A
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F5..         MOV     ?V1,A
   1557            uint8 *buf;
   1558            uint8 *pBuf;
   1559            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1560            byte len = 1 + 1 + 1 + 1;
   \   000049   75..04       MOV     ?V6,#0x4
   1561            byte x;
   1562          
   1563            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1564          
   1565            // Add an array for Routing List data
   1566            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \   00004C   75F005       MOV     B,#0x5
   \   00004F   E5..         MOV     A,?V7
   \   000051   A4           MUL     AB
   \   000052   25..         ADD     A,?V6
   \   000054   F5..         MOV     ?V6,A
   1567          
   1568            buf = osal_mem_alloc( (short)(len+1) );
   \   000056                ; Setup parameters for call to function osal_mem_alloc
   \   000056   A8..         MOV     R0,?V6
   \   000058   7900         MOV     R1,#0x0
   \   00005A   E8           MOV     A,R0
   \   00005B   2401         ADD     A,#0x1
   \   00005D   FA           MOV     R2,A
   \   00005E   E4           CLR     A
   \   00005F   39           ADDC    A,R1
   \   000060   FB           MOV     R3,A
   \   000061   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000064   8A..         MOV     ?V4,R2
   \   000066   8B..         MOV     ?V5,R3
   \   000068   85....       MOV     ?V2,?V4
   \   00006B   85....       MOV     ?V3,?V5
   1569            if ( buf == NULL )
   \   00006E   E5..         MOV     A,?V2
   \   000070   45..         ORL     A,?V3
   \   000072   7005         JNZ     ??ZDP_MgmtRtgRsp_0
   1570            {
   1571              return afStatus_MEM_FAIL;
   \   000074   7910         MOV     R1,#0x10
   \   000076   02....       LJMP    ??ZDP_MgmtRtgRsp_1 & 0xFFFF
   1572            }
   1573          
   1574            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   000079   85..82       MOV     DPL,?V2
   \   00007C   85..83       MOV     DPH,?V3
   \   00007F   A3           INC     DPTR
   \   000080   AE82         MOV     R6,DPL
   \   000082   AF83         MOV     R7,DPH
   1575          
   1576            *pBuf++ = Status;
   \   000084   7403         MOV     A,#0x3
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   C0E0         PUSH    A
   \   00008C   8E82         MOV     DPL,R6
   \   00008E   8F83         MOV     DPH,R7
   \   000090   D0E0         POP     A
   \   000092   F0           MOVX    @DPTR,A
   \   000093   8E82         MOV     DPL,R6
   \   000095   8F83         MOV     DPH,R7
   \   000097   A3           INC     DPTR
   \   000098   AE82         MOV     R6,DPL
   \   00009A   AF83         MOV     R7,DPH
   1577            *pBuf++ = RoutingTableEntries;
   \   00009C   7402         MOV     A,#0x2
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   C0E0         PUSH    A
   \   0000A4   8E82         MOV     DPL,R6
   \   0000A6   8F83         MOV     DPH,R7
   \   0000A8   D0E0         POP     A
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   8F83         MOV     DPH,R7
   \   0000AF   A3           INC     DPTR
   \   0000B0   AE82         MOV     R6,DPL
   \   0000B2   AF83         MOV     R7,DPH
   1578            *pBuf++ = StartIndex;
   \   0000B4   7417         MOV     A,#0x17
   \   0000B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   C0E0         PUSH    A
   \   0000BC   8E82         MOV     DPL,R6
   \   0000BE   8F83         MOV     DPH,R7
   \   0000C0   D0E0         POP     A
   \   0000C2   F0           MOVX    @DPTR,A
   \   0000C3   8E82         MOV     DPL,R6
   \   0000C5   8F83         MOV     DPH,R7
   \   0000C7   A3           INC     DPTR
   \   0000C8   AE82         MOV     R6,DPL
   \   0000CA   AF83         MOV     R7,DPH
   1579            *pBuf++ = RoutingListCount;
   \   0000CC   E5..         MOV     A,?V7
   \   0000CE   C0E0         PUSH    A
   \   0000D0   8E82         MOV     DPL,R6
   \   0000D2   8F83         MOV     DPH,R7
   \   0000D4   D0E0         POP     A
   \   0000D6   F0           MOVX    @DPTR,A
   \   0000D7   8E82         MOV     DPL,R6
   \   0000D9   8F83         MOV     DPH,R7
   \   0000DB   A3           INC     DPTR
   \   0000DC   AE82         MOV     R6,DPL
   \   0000DE   AF83         MOV     R7,DPH
   1580          
   1581            for ( x = 0; x < RoutingListCount; x++ )
   \   0000E0   85..82       MOV     DPL,?XSP + 0
   \   0000E3   85..83       MOV     DPH,?XSP + 1
   \   0000E6   7400         MOV     A,#0x0
   \   0000E8   F0           MOVX    @DPTR,A
   \                     ??ZDP_MgmtRtgRsp_2:
   \   0000E9   85..82       MOV     DPL,?XSP + 0
   \   0000EC   85..83       MOV     DPH,?XSP + 1
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   C3           CLR     C
   \   0000F1   95..         SUBB    A,?V7
   \   0000F3   4003         JC      $+5
   \   0000F5   02....       LJMP    ??ZDP_MgmtRtgRsp_3 & 0xFFFF
   1582            {
   1583              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \   0000F8   85..82       MOV     DPL,?V0
   \   0000FB   85..83       MOV     DPH,?V1
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   F8           MOV     R0,A
   \   000100   A3           INC     DPTR
   \   000101   E0           MOVX    A,@DPTR
   \   000102   F9           MOV     R1,A
   \   000103   E8           MOV     A,R0
   \   000104   C0E0         PUSH    A
   \   000106   8E82         MOV     DPL,R6
   \   000108   8F83         MOV     DPH,R7
   \   00010A   D0E0         POP     A
   \   00010C   F0           MOVX    @DPTR,A
   \   00010D   8E82         MOV     DPL,R6
   \   00010F   8F83         MOV     DPH,R7
   \   000111   A3           INC     DPTR
   \   000112   AE82         MOV     R6,DPL
   \   000114   AF83         MOV     R7,DPH
   1584              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   \   000116   85..82       MOV     DPL,?V0
   \   000119   85..83       MOV     DPH,?V1
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   F8           MOV     R0,A
   \   00011E   A3           INC     DPTR
   \   00011F   E0           MOVX    A,@DPTR
   \   000120   F9           MOV     R1,A
   \   000121   E4           CLR     A
   \   000122   C9           XCH     A,R1
   \   000123   F8           MOV     R0,A
   \   000124   E8           MOV     A,R0
   \   000125   C0E0         PUSH    A
   \   000127   8E82         MOV     DPL,R6
   \   000129   8F83         MOV     DPH,R7
   \   00012B   D0E0         POP     A
   \   00012D   F0           MOVX    @DPTR,A
   \   00012E   8E82         MOV     DPL,R6
   \   000130   8F83         MOV     DPH,R7
   \   000132   A3           INC     DPTR
   \   000133   AE82         MOV     R6,DPL
   \   000135   AF83         MOV     R7,DPH
   1585              *pBuf++ = RoutingTableList->status;
   \   000137   85..82       MOV     DPL,?V0
   \   00013A   85..83       MOV     DPH,?V1
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   E0           MOVX    A,@DPTR
   \   000143   C0E0         PUSH    A
   \   000145   8E82         MOV     DPL,R6
   \   000147   8F83         MOV     DPH,R7
   \   000149   D0E0         POP     A
   \   00014B   F0           MOVX    @DPTR,A
   \   00014C   8E82         MOV     DPL,R6
   \   00014E   8F83         MOV     DPH,R7
   \   000150   A3           INC     DPTR
   \   000151   AE82         MOV     R6,DPL
   \   000153   AF83         MOV     R7,DPH
   1586              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \   000155   85..82       MOV     DPL,?V0
   \   000158   85..83       MOV     DPH,?V1
   \   00015B   A3           INC     DPTR
   \   00015C   A3           INC     DPTR
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   F8           MOV     R0,A
   \   00015F   A3           INC     DPTR
   \   000160   E0           MOVX    A,@DPTR
   \   000161   F9           MOV     R1,A
   \   000162   E8           MOV     A,R0
   \   000163   C0E0         PUSH    A
   \   000165   8E82         MOV     DPL,R6
   \   000167   8F83         MOV     DPH,R7
   \   000169   D0E0         POP     A
   \   00016B   F0           MOVX    @DPTR,A
   \   00016C   8E82         MOV     DPL,R6
   \   00016E   8F83         MOV     DPH,R7
   \   000170   A3           INC     DPTR
   \   000171   AE82         MOV     R6,DPL
   \   000173   AF83         MOV     R7,DPH
   1587              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   \   000175   85..82       MOV     DPL,?V0
   \   000178   85..83       MOV     DPH,?V1
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   F8           MOV     R0,A
   \   00017F   A3           INC     DPTR
   \   000180   E0           MOVX    A,@DPTR
   \   000181   F9           MOV     R1,A
   \   000182   E4           CLR     A
   \   000183   C9           XCH     A,R1
   \   000184   F8           MOV     R0,A
   \   000185   E8           MOV     A,R0
   \   000186   C0E0         PUSH    A
   \   000188   8E82         MOV     DPL,R6
   \   00018A   8F83         MOV     DPH,R7
   \   00018C   D0E0         POP     A
   \   00018E   F0           MOVX    @DPTR,A
   \   00018F   8E82         MOV     DPL,R6
   \   000191   8F83         MOV     DPH,R7
   \   000193   A3           INC     DPTR
   \   000194   AE82         MOV     R6,DPL
   \   000196   AF83         MOV     R7,DPH
   1588              RoutingTableList++;    // Move to next list entry
   \   000198   E5..         MOV     A,?V0
   \   00019A   2407         ADD     A,#0x7
   \   00019C   F5..         MOV     ?V0,A
   \   00019E   5002         JNC     ??ZDP_MgmtRtgRsp_4
   \   0001A0   05..         INC     ?V1
   1589            }
   \                     ??ZDP_MgmtRtgRsp_4:
   \   0001A2   85..82       MOV     DPL,?XSP + 0
   \   0001A5   85..83       MOV     DPH,?XSP + 1
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   2401         ADD     A,#0x1
   \   0001AB   F0           MOVX    @DPTR,A
   \   0001AC   02....       LJMP    ??ZDP_MgmtRtgRsp_2 & 0xFFFF
   1590          
   1591            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \                     ??ZDP_MgmtRtgRsp_3:
   \   0001AF   85..82       MOV     DPL,?V2
   \   0001B2   85..83       MOV     DPH,?V3
   \   0001B5   A3           INC     DPTR
   \   0001B6   A882         MOV     R0,DPL
   \   0001B8   A983         MOV     R1,DPH
   \   0001BA   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0001BD   E8           MOV     A,R0
   \   0001BE   F0           MOVX    @DPTR,A
   \   0001BF   A3           INC     DPTR
   \   0001C0   E9           MOV     A,R1
   \   0001C1   F0           MOVX    @DPTR,A
   \   0001C2                ; Setup parameters for call to function fillAndSend
   \   0001C2   75..32       MOV     ?V4,#0x32
   \   0001C5   75..80       MOV     ?V5,#-0x80
   \   0001C8   78..         MOV     R0,#?V4
   \   0001CA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001CD   A9..         MOV     R1,?V6
   \   0001CF   7407         MOV     A,#0x7
   \   0001D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D4   E0           MOVX    A,@DPTR
   \   0001D5   FC           MOV     R4,A
   \   0001D6   A3           INC     DPTR
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   FD           MOV     R5,A
   \   0001D9   7406         MOV     A,#0x6
   \   0001DB   12....       LCALL   ?XSTACK_DISP101_8
   \   0001DE   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0001E1   7402         MOV     A,#0x2
   \   0001E3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001E6   E9           MOV     A,R1
   \   0001E7   C0E0         PUSH    A
   \   0001E9   7401         MOV     A,#0x1
   \   0001EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EE   D0E0         POP     A
   \   0001F0   F0           MOVX    @DPTR,A
   \   0001F1                ; Setup parameters for call to function osal_mem_free
   \   0001F1   AA..         MOV     R2,?V2
   \   0001F3   AB..         MOV     R3,?V3
   \   0001F5   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0001F8   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0001FB   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   0001FD   F0           MOVX    @DPTR,A
   \   0001FE   A3           INC     DPTR
   \   0001FF   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000201   F0           MOVX    @DPTR,A
   \   000202   7401         MOV     A,#0x1
   \   000204   12....       LCALL   ?XSTACK_DISP0_8
   \   000207   E0           MOVX    A,@DPTR
   \   000208   F9           MOV     R1,A
   \                     ??ZDP_MgmtRtgRsp_1:
   \   000209   7407         MOV     A,#0x7
   \   00020B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00020E   7F08         MOV     R7,#0x8
   \   000210   02....       LJMP    ?BANKED_LEAVE_XDATA
   1592          }
   1593          
   1594          /*********************************************************************
   1595           * @fn          ZDP_MgmtBindRsp
   1596           *
   1597           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1598           *              function sends a unicast message.
   1599           *
   1600           * @param       dstAddr - destination address of the message
   1601           * @param       Status - message status (ZDP_SUCCESS or other)
   1602           * @param       BindingTableEntries - Total number of entries
   1603           * @param       StartIndex - Starting index within the reporting list
   1604           * @param       BindingTableListCount - number of entries included
   1605           *                                 in this message
   1606           * @param       BindingTableList - List of Binding Table entries
   1607           * @param       SecurityEnable - Security Options
   1608           *
   1609           * @return      ZStatus_t
   1610           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1611          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1612                                      byte Status,
   1613                                      byte BindingTableEntries,
   1614                                      byte StartIndex,
   1615                                      byte BindingTableListCount,
   1616                                      apsBindingItem_t *BindingTableList,
   1617                                      byte SecurityEnable )
   1618          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   7406         MOV     A,#0x6
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   D0E0         POP     A
   \   000014   F0           MOVX    @DPTR,A
   \   000015   7407         MOV     A,#0x7
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   EA           MOV     A,R2
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   EB           MOV     A,R3
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   EC           MOV     A,R4
   \   000020   C0E0         PUSH    A
   \   000022   7405         MOV     A,#0x5
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   D0E0         POP     A
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   ED           MOV     A,R5
   \   00002B   C0E0         PUSH    A
   \   00002D   7404         MOV     A,#0x4
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   D0E0         POP     A
   \   000034   F0           MOVX    @DPTR,A
   \   000035   741B         MOV     A,#0x1b
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V0,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F5..         MOV     ?V1,A
   1619            uint8 *buf;
   1620            uint8 *pBuf;
   1621            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1622            uint8 len;    // Actual length varies due to different addrMode
   1623            uint8 x;
   1624            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   7415         MOV     A,#0x15
   \   000049   F0           MOVX    @DPTR,A
   1625            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   \   00004A   7403         MOV     A,#0x3
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   740E         MOV     A,#0xe
   \   000051   F0           MOVX    @DPTR,A
   1626          
   1627            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1628          
   1629            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1630            maxLen = 1 + 1 + 1 + 1;
   \   000052   7402         MOV     A,#0x2
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   7404         MOV     A,#0x4
   \   000059   F0           MOVX    @DPTR,A
   1631            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   \   00005A   85..82       MOV     DPL,?XSP + 0
   \   00005D   85..83       MOV     DPH,?XSP + 1
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F5F0         MOV     B,A
   \   000063   741A         MOV     A,#0x1a
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   E0           MOVX    A,@DPTR
   \   000069   A4           MUL     AB
   \   00006A   F8           MOV     R0,A
   \   00006B   7402         MOV     A,#0x2
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   E0           MOVX    A,@DPTR
   \   000071   28           ADD     A,R0
   \   000072   F0           MOVX    @DPTR,A
   1632            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \   000073                ; Setup parameters for call to function osal_mem_alloc
   \   000073   7402         MOV     A,#0x2
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F8           MOV     R0,A
   \   00007A   7900         MOV     R1,#0x0
   \   00007C   E8           MOV     A,R0
   \   00007D   2401         ADD     A,#0x1
   \   00007F   FA           MOV     R2,A
   \   000080   E4           CLR     A
   \   000081   39           ADDC    A,R1
   \   000082   FB           MOV     R3,A
   \   000083   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000086   8A..         MOV     ?V4,R2
   \   000088   8B..         MOV     ?V5,R3
   \   00008A   85....       MOV     ?V6,?V4
   \   00008D   85....       MOV     ?V7,?V5
   1633          
   1634            if ( buf == NULL )
   \   000090   E5..         MOV     A,?V6
   \   000092   45..         ORL     A,?V7
   \   000094   7005         JNZ     ??ZDP_MgmtBindRsp_0
   1635            {
   1636              return afStatus_MEM_FAIL;
   \   000096   7910         MOV     R1,#0x10
   \   000098   02....       LJMP    ??ZDP_MgmtBindRsp_1 & 0xFFFF
   1637            }
   1638          
   1639            pBuf = buf+1;
   \                     ??ZDP_MgmtBindRsp_0:
   \   00009B   85..82       MOV     DPL,?V6
   \   00009E   85..83       MOV     DPH,?V7
   \   0000A1   A3           INC     DPTR
   \   0000A2   AE82         MOV     R6,DPL
   \   0000A4   AF83         MOV     R7,DPH
   1640          
   1641            *pBuf++ = Status;
   \   0000A6   7405         MOV     A,#0x5
   \   0000A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   C0E0         PUSH    A
   \   0000AE   8E82         MOV     DPL,R6
   \   0000B0   8F83         MOV     DPH,R7
   \   0000B2   D0E0         POP     A
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   8E82         MOV     DPL,R6
   \   0000B7   8F83         MOV     DPH,R7
   \   0000B9   A3           INC     DPTR
   \   0000BA   AE82         MOV     R6,DPL
   \   0000BC   AF83         MOV     R7,DPH
   1642            *pBuf++ = BindingTableEntries;
   \   0000BE   7404         MOV     A,#0x4
   \   0000C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   C0E0         PUSH    A
   \   0000C6   8E82         MOV     DPL,R6
   \   0000C8   8F83         MOV     DPH,R7
   \   0000CA   D0E0         POP     A
   \   0000CC   F0           MOVX    @DPTR,A
   \   0000CD   8E82         MOV     DPL,R6
   \   0000CF   8F83         MOV     DPH,R7
   \   0000D1   A3           INC     DPTR
   \   0000D2   AE82         MOV     R6,DPL
   \   0000D4   AF83         MOV     R7,DPH
   1643            *pBuf++ = StartIndex;
   \   0000D6   7419         MOV     A,#0x19
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   C0E0         PUSH    A
   \   0000DE   8E82         MOV     DPL,R6
   \   0000E0   8F83         MOV     DPH,R7
   \   0000E2   D0E0         POP     A
   \   0000E4   F0           MOVX    @DPTR,A
   \   0000E5   8E82         MOV     DPL,R6
   \   0000E7   8F83         MOV     DPH,R7
   \   0000E9   A3           INC     DPTR
   \   0000EA   AE82         MOV     R6,DPL
   \   0000EC   AF83         MOV     R7,DPH
   1644            *pBuf++ = BindingTableListCount;
   \   0000EE   741A         MOV     A,#0x1a
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   C0E0         PUSH    A
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   D0E0         POP     A
   \   0000FC   F0           MOVX    @DPTR,A
   \   0000FD   8E82         MOV     DPL,R6
   \   0000FF   8F83         MOV     DPH,R7
   \   000101   A3           INC     DPTR
   \   000102   AE82         MOV     R6,DPL
   \   000104   AF83         MOV     R7,DPH
   1645          
   1646            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1647            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1648            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1649            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1650          
   1651            len = 1 + 1 + 1 + 1;
   \   000106   75..04       MOV     ?V2,#0x4
   1652            for ( x = 0; x < BindingTableListCount; x++ )
   \   000109   7401         MOV     A,#0x1
   \   00010B   12....       LCALL   ?XSTACK_DISP0_8
   \   00010E   7400         MOV     A,#0x0
   \   000110   F0           MOVX    @DPTR,A
   \                     ??ZDP_MgmtBindRsp_2:
   \   000111   741A         MOV     A,#0x1a
   \   000113   12....       LCALL   ?XSTACK_DISP0_8
   \   000116   E0           MOVX    A,@DPTR
   \   000117   F8           MOV     R0,A
   \   000118   7401         MOV     A,#0x1
   \   00011A   12....       LCALL   ?XSTACK_DISP0_8
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   C3           CLR     C
   \   00011F   98           SUBB    A,R0
   \   000120   4003         JC      $+5
   \   000122   02....       LJMP    ??ZDP_MgmtBindRsp_3 & 0xFFFF
   1653            {
   1654              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   \   000125                ; Setup parameters for call to function sAddrExtCpy
   \   000125   AC..         MOV     R4,?V0
   \   000127   AD..         MOV     R5,?V1
   \   000129   EE           MOV     A,R6
   \   00012A   FA           MOV     R2,A
   \   00012B   EF           MOV     A,R7
   \   00012C   FB           MOV     R3,A
   \   00012D   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   000130   8A..         MOV     ?V4,R2
   \   000132   8B..         MOV     ?V5,R3
   \   000134   AE..         MOV     R6,?V4
   \   000136   AF..         MOV     R7,?V5
   1655              *pBuf++ = BindingTableList->srcEP;
   \   000138   85..82       MOV     DPL,?V0
   \   00013B   85..83       MOV     DPH,?V1
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   E0           MOVX    A,@DPTR
   \   000147   C0E0         PUSH    A
   \   000149   8E82         MOV     DPL,R6
   \   00014B   8F83         MOV     DPH,R7
   \   00014D   D0E0         POP     A
   \   00014F   F0           MOVX    @DPTR,A
   \   000150   8E82         MOV     DPL,R6
   \   000152   8F83         MOV     DPH,R7
   \   000154   A3           INC     DPTR
   \   000155   AE82         MOV     R6,DPL
   \   000157   AF83         MOV     R7,DPH
   1656          
   1657              // Cluster ID
   1658              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   \   000159   85..82       MOV     DPL,?V0
   \   00015C   85..83       MOV     DPH,?V1
   \   00015F   A3           INC     DPTR
   \   000160   A3           INC     DPTR
   \   000161   A3           INC     DPTR
   \   000162   A3           INC     DPTR
   \   000163   A3           INC     DPTR
   \   000164   A3           INC     DPTR
   \   000165   A3           INC     DPTR
   \   000166   A3           INC     DPTR
   \   000167   A3           INC     DPTR
   \   000168   E0           MOVX    A,@DPTR
   \   000169   F8           MOV     R0,A
   \   00016A   A3           INC     DPTR
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   F9           MOV     R1,A
   \   00016D   E8           MOV     A,R0
   \   00016E   C0E0         PUSH    A
   \   000170   8E82         MOV     DPL,R6
   \   000172   8F83         MOV     DPH,R7
   \   000174   D0E0         POP     A
   \   000176   F0           MOVX    @DPTR,A
   \   000177   8E82         MOV     DPL,R6
   \   000179   8F83         MOV     DPH,R7
   \   00017B   A3           INC     DPTR
   \   00017C   AE82         MOV     R6,DPL
   \   00017E   AF83         MOV     R7,DPH
   1659              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   \   000180   85..82       MOV     DPL,?V0
   \   000183   85..83       MOV     DPH,?V1
   \   000186   A3           INC     DPTR
   \   000187   A3           INC     DPTR
   \   000188   A3           INC     DPTR
   \   000189   A3           INC     DPTR
   \   00018A   A3           INC     DPTR
   \   00018B   A3           INC     DPTR
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   A3           INC     DPTR
   \   00018F   E0           MOVX    A,@DPTR
   \   000190   F8           MOV     R0,A
   \   000191   A3           INC     DPTR
   \   000192   E0           MOVX    A,@DPTR
   \   000193   F9           MOV     R1,A
   \   000194   E4           CLR     A
   \   000195   C9           XCH     A,R1
   \   000196   F8           MOV     R0,A
   \   000197   E8           MOV     A,R0
   \   000198   C0E0         PUSH    A
   \   00019A   8E82         MOV     DPL,R6
   \   00019C   8F83         MOV     DPH,R7
   \   00019E   D0E0         POP     A
   \   0001A0   F0           MOVX    @DPTR,A
   \   0001A1   8E82         MOV     DPL,R6
   \   0001A3   8F83         MOV     DPH,R7
   \   0001A5   A3           INC     DPTR
   \   0001A6   AE82         MOV     R6,DPL
   \   0001A8   AF83         MOV     R7,DPH
   1660          
   1661              *pBuf++ = BindingTableList->dstAddr.addrMode;
   \   0001AA   E5..         MOV     A,?V0
   \   0001AC   2413         ADD     A,#0x13
   \   0001AE   F582         MOV     DPL,A
   \   0001B0   E4           CLR     A
   \   0001B1   35..         ADDC    A,?V1
   \   0001B3   F583         MOV     DPH,A
   \   0001B5   E0           MOVX    A,@DPTR
   \   0001B6   C0E0         PUSH    A
   \   0001B8   8E82         MOV     DPL,R6
   \   0001BA   8F83         MOV     DPH,R7
   \   0001BC   D0E0         POP     A
   \   0001BE   F0           MOVX    @DPTR,A
   \   0001BF   8E82         MOV     DPL,R6
   \   0001C1   8F83         MOV     DPH,R7
   \   0001C3   A3           INC     DPTR
   \   0001C4   AE82         MOV     R6,DPL
   \   0001C6   AF83         MOV     R7,DPH
   1662              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   \   0001C8   E5..         MOV     A,?V0
   \   0001CA   2413         ADD     A,#0x13
   \   0001CC   F582         MOV     DPL,A
   \   0001CE   E4           CLR     A
   \   0001CF   35..         ADDC    A,?V1
   \   0001D1   F583         MOV     DPH,A
   \   0001D3   E0           MOVX    A,@DPTR
   \   0001D4   6403         XRL     A,#0x3
   \   0001D6   7043         JNZ     ??ZDP_MgmtBindRsp_4
   1663              {
   1664                len += extZdpBindEntrySize;
   \   0001D8   85..82       MOV     DPL,?XSP + 0
   \   0001DB   85..83       MOV     DPH,?XSP + 1
   \   0001DE   E0           MOVX    A,@DPTR
   \   0001DF   25..         ADD     A,?V2
   \   0001E1   F5..         MOV     ?V2,A
   1665                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   \   0001E3                ; Setup parameters for call to function sAddrExtCpy
   \   0001E3   E5..         MOV     A,?V0
   \   0001E5   240B         ADD     A,#0xb
   \   0001E7   FC           MOV     R4,A
   \   0001E8   E4           CLR     A
   \   0001E9   35..         ADDC    A,?V1
   \   0001EB   FD           MOV     R5,A
   \   0001EC   EE           MOV     A,R6
   \   0001ED   FA           MOV     R2,A
   \   0001EE   EF           MOV     A,R7
   \   0001EF   FB           MOV     R3,A
   \   0001F0   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   0001F3   8A..         MOV     ?V4,R2
   \   0001F5   8B..         MOV     ?V5,R3
   \   0001F7   AE..         MOV     R6,?V4
   \   0001F9   AF..         MOV     R7,?V5
   1666                *pBuf++ = BindingTableList->dstEP;
   \   0001FB   E5..         MOV     A,?V0
   \   0001FD   2414         ADD     A,#0x14
   \   0001FF   F582         MOV     DPL,A
   \   000201   E4           CLR     A
   \   000202   35..         ADDC    A,?V1
   \   000204   F583         MOV     DPH,A
   \   000206   E0           MOVX    A,@DPTR
   \   000207   C0E0         PUSH    A
   \   000209   8E82         MOV     DPL,R6
   \   00020B   8F83         MOV     DPH,R7
   \   00020D   D0E0         POP     A
   \   00020F   F0           MOVX    @DPTR,A
   \   000210   8E82         MOV     DPL,R6
   \   000212   8F83         MOV     DPH,R7
   \   000214   A3           INC     DPTR
   \   000215   AE82         MOV     R6,DPL
   \   000217   AF83         MOV     R7,DPH
   \   000219   8053         SJMP    ??ZDP_MgmtBindRsp_5
   1667              }
   1668              else
   1669              {
   1670                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_4:
   \   00021B   7403         MOV     A,#0x3
   \   00021D   12....       LCALL   ?XSTACK_DISP0_8
   \   000220   E0           MOVX    A,@DPTR
   \   000221   25..         ADD     A,?V2
   \   000223   F5..         MOV     ?V2,A
   1671                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   000225   E5..         MOV     A,?V0
   \   000227   240B         ADD     A,#0xb
   \   000229   F582         MOV     DPL,A
   \   00022B   E4           CLR     A
   \   00022C   35..         ADDC    A,?V1
   \   00022E   F583         MOV     DPH,A
   \   000230   E0           MOVX    A,@DPTR
   \   000231   F8           MOV     R0,A
   \   000232   A3           INC     DPTR
   \   000233   E0           MOVX    A,@DPTR
   \   000234   F9           MOV     R1,A
   \   000235   E8           MOV     A,R0
   \   000236   C0E0         PUSH    A
   \   000238   8E82         MOV     DPL,R6
   \   00023A   8F83         MOV     DPH,R7
   \   00023C   D0E0         POP     A
   \   00023E   F0           MOVX    @DPTR,A
   \   00023F   8E82         MOV     DPL,R6
   \   000241   8F83         MOV     DPH,R7
   \   000243   A3           INC     DPTR
   \   000244   AE82         MOV     R6,DPL
   \   000246   AF83         MOV     R7,DPH
   1672                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   000248   E5..         MOV     A,?V0
   \   00024A   240B         ADD     A,#0xb
   \   00024C   F582         MOV     DPL,A
   \   00024E   E4           CLR     A
   \   00024F   35..         ADDC    A,?V1
   \   000251   F583         MOV     DPH,A
   \   000253   E0           MOVX    A,@DPTR
   \   000254   F8           MOV     R0,A
   \   000255   A3           INC     DPTR
   \   000256   E0           MOVX    A,@DPTR
   \   000257   F9           MOV     R1,A
   \   000258   E4           CLR     A
   \   000259   C9           XCH     A,R1
   \   00025A   F8           MOV     R0,A
   \   00025B   E8           MOV     A,R0
   \   00025C   C0E0         PUSH    A
   \   00025E   8E82         MOV     DPL,R6
   \   000260   8F83         MOV     DPH,R7
   \   000262   D0E0         POP     A
   \   000264   F0           MOVX    @DPTR,A
   \   000265   8E82         MOV     DPL,R6
   \   000267   8F83         MOV     DPH,R7
   \   000269   A3           INC     DPTR
   \   00026A   AE82         MOV     R6,DPL
   \   00026C   AF83         MOV     R7,DPH
   1673              }
   1674              BindingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtBindRsp_5:
   \   00026E   E5..         MOV     A,?V0
   \   000270   2415         ADD     A,#0x15
   \   000272   F5..         MOV     ?V0,A
   \   000274   5002         JNC     ??ZDP_MgmtBindRsp_6
   \   000276   05..         INC     ?V1
   1675            }
   \                     ??ZDP_MgmtBindRsp_6:
   \   000278   7401         MOV     A,#0x1
   \   00027A   12....       LCALL   ?XSTACK_DISP0_8
   \   00027D   E0           MOVX    A,@DPTR
   \   00027E   2401         ADD     A,#0x1
   \   000280   F0           MOVX    @DPTR,A
   \   000281   02....       LJMP    ??ZDP_MgmtBindRsp_2 & 0xFFFF
   1676          
   1677            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_3:
   \   000284   85..82       MOV     DPL,?V6
   \   000287   85..83       MOV     DPH,?V7
   \   00028A   A3           INC     DPTR
   \   00028B   A882         MOV     R0,DPL
   \   00028D   A983         MOV     R1,DPH
   \   00028F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000292   E8           MOV     A,R0
   \   000293   F0           MOVX    @DPTR,A
   \   000294   A3           INC     DPTR
   \   000295   E9           MOV     A,R1
   \   000296   F0           MOVX    @DPTR,A
   \   000297                ; Setup parameters for call to function fillAndSend
   \   000297   75..33       MOV     ?V4,#0x33
   \   00029A   75..80       MOV     ?V5,#-0x80
   \   00029D   78..         MOV     R0,#?V4
   \   00029F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002A2   A9..         MOV     R1,?V2
   \   0002A4   7409         MOV     A,#0x9
   \   0002A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A9   E0           MOVX    A,@DPTR
   \   0002AA   FC           MOV     R4,A
   \   0002AB   A3           INC     DPTR
   \   0002AC   E0           MOVX    A,@DPTR
   \   0002AD   FD           MOV     R5,A
   \   0002AE   7408         MOV     A,#0x8
   \   0002B0   12....       LCALL   ?XSTACK_DISP101_8
   \   0002B3   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0002B6   7402         MOV     A,#0x2
   \   0002B8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002BB   E9           MOV     A,R1
   \   0002BC   F5..         MOV     ?V3,A
   \   0002BE                ; Setup parameters for call to function osal_mem_free
   \   0002BE   AA..         MOV     R2,?V6
   \   0002C0   AB..         MOV     R3,?V7
   \   0002C2   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0002C5   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0002C8   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   0002CA   F0           MOVX    @DPTR,A
   \   0002CB   A3           INC     DPTR
   \   0002CC   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   0002CE   F0           MOVX    @DPTR,A
   \   0002CF   A9..         MOV     R1,?V3
   \                     ??ZDP_MgmtBindRsp_1:
   \   0002D1   7409         MOV     A,#0x9
   \   0002D3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002D6   7F08         MOV     R7,#0x8
   \   0002D8   02....       LJMP    ?BANKED_LEAVE_XDATA
   1678          }
   1679          
   1680          /*********************************************************************
   1681           * @fn          ZDP_MgmtNwkUpdateNotify
   1682           *
   1683           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1684           *              function sends a unicast message.
   1685           *
   1686           * @param       dstAddr - destination address of the message
   1687           * @param       status - message status (ZDP_SUCCESS or other)
   1688           * @param       scannedChannels - List of channels scanned by the request
   1689           * @param       totalTransmissions - Total transmissions
   1690           * @param       transmissionFailures - Sum of transmission failures
   1691           * @param       listCount - Number of records contained in the energyValues list
   1692           * @param       energyValues - List of descriptors, one for each of ListCount,
   1693           *                             of the enegry detect descriptors
   1694           * @param       txOptions - Transmit options
   1695           * @param       securityEnable - Security options
   1696           *
   1697           * @return      afStatus_t
   1698           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1699          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1700                                              uint8 status, uint32 scannedChannels,
   1701                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1702                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1703                                              uint8 securityEnable )
   1704          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   7404         MOV     A,#0x4
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   D0E0         POP     A
   \   000014   F0           MOVX    @DPTR,A
   \   000015   7405         MOV     A,#0x5
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   EA           MOV     A,R2
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   EB           MOV     A,R3
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   EC           MOV     A,R4
   \   000020   C0E0         PUSH    A
   \   000022   7403         MOV     A,#0x3
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   D0E0         POP     A
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   8D..         MOV     ?V7,R5
   \   00002C   7417         MOV     A,#0x17
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?L_MOV_X
   1705            uint8 *buf;
   1706            uint8 *pBuf;
   1707            uint8 len;
   1708          
   1709            (void)securityEnable;  // Intentionally unreferenced parameter
   1710          
   1711            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1712            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   000036   740A         MOV     A,#0xa
   \   000038   25..         ADD     A,?V7
   \   00003A   C0E0         PUSH    A
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   D0E0         POP     A
   \   000044   F0           MOVX    @DPTR,A
   1713          
   1714            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   000045                ; Setup parameters for call to function osal_mem_alloc
   \   000045   85..82       MOV     DPL,?XSP + 0
   \   000048   85..83       MOV     DPH,?XSP + 1
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F8           MOV     R0,A
   \   00004D   7900         MOV     R1,#0x0
   \   00004F   E8           MOV     A,R0
   \   000050   2401         ADD     A,#0x1
   \   000052   FA           MOV     R2,A
   \   000053   E4           CLR     A
   \   000054   39           ADDC    A,R1
   \   000055   FB           MOV     R3,A
   \   000056   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000059   7401         MOV     A,#0x1
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   EA           MOV     A,R2
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   A3           INC     DPTR
   \   000061   EB           MOV     A,R3
   \   000062   F0           MOVX    @DPTR,A
   1715            if ( buf == NULL )
   \   000063   7401         MOV     A,#0x1
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F8           MOV     R0,A
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F9           MOV     R1,A
   \   00006D   E8           MOV     A,R0
   \   00006E   49           ORL     A,R1
   \   00006F   7005         JNZ     ??ZDP_MgmtNwkUpdateNotify_0
   1716            {
   1717              return afStatus_MEM_FAIL;
   \   000071   7910         MOV     R1,#0x10
   \   000073   02....       LJMP    ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1718            }
   1719          
   1720            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   000076   7401         MOV     A,#0x1
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   2401         ADD     A,#0x1
   \   00007E   F8           MOV     R0,A
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   3400         ADDC    A,#0x0
   \   000083   F9           MOV     R1,A
   \   000084   E8           MOV     A,R0
   \   000085   FE           MOV     R6,A
   \   000086   E9           MOV     A,R1
   \   000087   FF           MOV     R7,A
   1721          
   1722            *pBuf++ = status;
   \   000088   7403         MOV     A,#0x3
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   C0E0         PUSH    A
   \   000090   8E82         MOV     DPL,R6
   \   000092   8F83         MOV     DPH,R7
   \   000094   D0E0         POP     A
   \   000096   F0           MOVX    @DPTR,A
   \   000097   8E82         MOV     DPL,R6
   \   000099   8F83         MOV     DPH,R7
   \   00009B   A3           INC     DPTR
   \   00009C   AE82         MOV     R6,DPL
   \   00009E   AF83         MOV     R7,DPH
   1723          
   1724            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \   0000A0                ; Setup parameters for call to function osal_buffer_uint32
   \   0000A0   78..         MOV     R0,#?V0
   \   0000A2   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000A5   EE           MOV     A,R6
   \   0000A6   FA           MOV     R2,A
   \   0000A7   EF           MOV     A,R7
   \   0000A8   FB           MOV     R3,A
   \   0000A9   12....       LCALL   ??osal_buffer_uint32?relay; Banked call to: osal_buffer_uint32
   \   0000AC   7404         MOV     A,#0x4
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B1   8A..         MOV     ?V4,R2
   \   0000B3   8B..         MOV     ?V5,R3
   \   0000B5   AE..         MOV     R6,?V4
   \   0000B7   AF..         MOV     R7,?V5
   1725          
   1726            *pBuf++ = LO_UINT16( totalTransmissions );
   \   0000B9   741B         MOV     A,#0x1b
   \   0000BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   F8           MOV     R0,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   F9           MOV     R1,A
   \   0000C3   E8           MOV     A,R0
   \   0000C4   C0E0         PUSH    A
   \   0000C6   8E82         MOV     DPL,R6
   \   0000C8   8F83         MOV     DPH,R7
   \   0000CA   D0E0         POP     A
   \   0000CC   F0           MOVX    @DPTR,A
   \   0000CD   8E82         MOV     DPL,R6
   \   0000CF   8F83         MOV     DPH,R7
   \   0000D1   A3           INC     DPTR
   \   0000D2   AE82         MOV     R6,DPL
   \   0000D4   AF83         MOV     R7,DPH
   1727            *pBuf++ = HI_UINT16( totalTransmissions );
   \   0000D6   741B         MOV     A,#0x1b
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F8           MOV     R0,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   F9           MOV     R1,A
   \   0000E0   E4           CLR     A
   \   0000E1   C9           XCH     A,R1
   \   0000E2   F8           MOV     R0,A
   \   0000E3   E8           MOV     A,R0
   \   0000E4   C0E0         PUSH    A
   \   0000E6   8E82         MOV     DPL,R6
   \   0000E8   8F83         MOV     DPH,R7
   \   0000EA   D0E0         POP     A
   \   0000EC   F0           MOVX    @DPTR,A
   \   0000ED   8E82         MOV     DPL,R6
   \   0000EF   8F83         MOV     DPH,R7
   \   0000F1   A3           INC     DPTR
   \   0000F2   AE82         MOV     R6,DPL
   \   0000F4   AF83         MOV     R7,DPH
   1728          
   1729            *pBuf++ = LO_UINT16( transmissionFailures );
   \   0000F6   741D         MOV     A,#0x1d
   \   0000F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   F8           MOV     R0,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   F9           MOV     R1,A
   \   000100   E8           MOV     A,R0
   \   000101   C0E0         PUSH    A
   \   000103   8E82         MOV     DPL,R6
   \   000105   8F83         MOV     DPH,R7
   \   000107   D0E0         POP     A
   \   000109   F0           MOVX    @DPTR,A
   \   00010A   8E82         MOV     DPL,R6
   \   00010C   8F83         MOV     DPH,R7
   \   00010E   A3           INC     DPTR
   \   00010F   AE82         MOV     R6,DPL
   \   000111   AF83         MOV     R7,DPH
   1730            *pBuf++ = HI_UINT16( transmissionFailures );
   \   000113   741D         MOV     A,#0x1d
   \   000115   12....       LCALL   ?XSTACK_DISP0_8
   \   000118   E0           MOVX    A,@DPTR
   \   000119   F8           MOV     R0,A
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   F9           MOV     R1,A
   \   00011D   E4           CLR     A
   \   00011E   C9           XCH     A,R1
   \   00011F   F8           MOV     R0,A
   \   000120   E8           MOV     A,R0
   \   000121   C0E0         PUSH    A
   \   000123   8E82         MOV     DPL,R6
   \   000125   8F83         MOV     DPH,R7
   \   000127   D0E0         POP     A
   \   000129   F0           MOVX    @DPTR,A
   \   00012A   8E82         MOV     DPL,R6
   \   00012C   8F83         MOV     DPH,R7
   \   00012E   A3           INC     DPTR
   \   00012F   AE82         MOV     R6,DPL
   \   000131   AF83         MOV     R7,DPH
   1731          
   1732            *pBuf++ = listCount;
   \   000133   E5..         MOV     A,?V7
   \   000135   C0E0         PUSH    A
   \   000137   8E82         MOV     DPL,R6
   \   000139   8F83         MOV     DPH,R7
   \   00013B   D0E0         POP     A
   \   00013D   F0           MOVX    @DPTR,A
   \   00013E   8E82         MOV     DPL,R6
   \   000140   8F83         MOV     DPH,R7
   \   000142   A3           INC     DPTR
   \   000143   AE82         MOV     R6,DPL
   \   000145   AF83         MOV     R7,DPH
   1733          
   1734            if ( listCount > 0 )
   \   000147   E5..         MOV     A,?V7
   \   000149   6024         JZ      ??ZDP_MgmtNwkUpdateNotify_2
   1735              osal_memcpy( pBuf, energyValues, listCount );
   \   00014B                ; Setup parameters for call to function osal_memcpy
   \   00014B   741F         MOV     A,#0x1f
   \   00014D   12....       LCALL   ?XSTACK_DISP0_8
   \   000150   E0           MOVX    A,@DPTR
   \   000151   F5..         MOV     ?V4,A
   \   000153   A3           INC     DPTR
   \   000154   E0           MOVX    A,@DPTR
   \   000155   F5..         MOV     ?V5,A
   \   000157   75..00       MOV     ?V6,#0x0
   \   00015A   78..         MOV     R0,#?V4
   \   00015C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00015F   AC..         MOV     R4,?V7
   \   000161   7D00         MOV     R5,#0x0
   \   000163   EE           MOV     A,R6
   \   000164   FA           MOV     R2,A
   \   000165   EF           MOV     A,R7
   \   000166   FB           MOV     R3,A
   \   000167   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00016A   7403         MOV     A,#0x3
   \   00016C   12....       LCALL   ?DEALLOC_XSTACK8
   1736          
   1737            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   00016F   7401         MOV     A,#0x1
   \   000171   12....       LCALL   ?XSTACK_DISP0_8
   \   000174   E0           MOVX    A,@DPTR
   \   000175   2401         ADD     A,#0x1
   \   000177   F8           MOV     R0,A
   \   000178   A3           INC     DPTR
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   3400         ADDC    A,#0x0
   \   00017C   F9           MOV     R1,A
   \   00017D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000180   E8           MOV     A,R0
   \   000181   F0           MOVX    @DPTR,A
   \   000182   A3           INC     DPTR
   \   000183   E9           MOV     A,R1
   \   000184   F0           MOVX    @DPTR,A
   \   000185   7421         MOV     A,#0x21
   \   000187   12....       LCALL   ?XSTACK_DISP0_8
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   90....       MOV     DPTR,#ZDP_TxOptions
   \   00018E   F0           MOVX    @DPTR,A
   \   00018F                ; Setup parameters for call to function fillAndSend
   \   00018F   75..38       MOV     ?V4,#0x38
   \   000192   75..80       MOV     ?V5,#-0x80
   \   000195   78..         MOV     R0,#?V4
   \   000197   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019A   7402         MOV     A,#0x2
   \   00019C   12....       LCALL   ?XSTACK_DISP0_8
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   F9           MOV     R1,A
   \   0001A1   7407         MOV     A,#0x7
   \   0001A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   FC           MOV     R4,A
   \   0001A8   A3           INC     DPTR
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   FD           MOV     R5,A
   \   0001AB   7406         MOV     A,#0x6
   \   0001AD   12....       LCALL   ?XSTACK_DISP101_8
   \   0001B0   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0001B3   7402         MOV     A,#0x2
   \   0001B5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001B8   E9           MOV     A,R1
   \   0001B9   F5..         MOV     ?V6,A
   \   0001BB                ; Setup parameters for call to function osal_mem_free
   \   0001BB   7401         MOV     A,#0x1
   \   0001BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   FA           MOV     R2,A
   \   0001C2   A3           INC     DPTR
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   FB           MOV     R3,A
   \   0001C5   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0001C8   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0001CB   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   0001CD   F0           MOVX    @DPTR,A
   \   0001CE   A3           INC     DPTR
   \   0001CF   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   0001D1   F0           MOVX    @DPTR,A
   \   0001D2   90....       MOV     DPTR,#ZDP_TxOptions
   \   0001D5   7400         MOV     A,#0x0
   \   0001D7   F0           MOVX    @DPTR,A
   \   0001D8   A9..         MOV     R1,?V6
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   0001DA   7407         MOV     A,#0x7
   \   0001DC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001DF   7F08         MOV     R7,#0x8
   \   0001E1   02....       LJMP    ?BANKED_LEAVE_XDATA
   1738          }
   1739          
   1740          /*********************************************************************
   1741           * Functions to register for ZDO Over-the-air messages
   1742           */
   1743          
   1744          /*********************************************************************
   1745           * @fn          ZDO_RegisterForZDOMsg
   1746           *
   1747           * @brief       Call this function to register of an incoming over
   1748           *              the air ZDO message - probably a response message
   1749           *              but requests can also be received.
   1750           *              Messages are delivered to the task with ZDO_CB_MSG
   1751           *              as the message ID.
   1752           *
   1753           * @param       taskID - Where you would like the message delivered
   1754           * @param       clusterID - What message?
   1755           *
   1756           * @return      ZSuccess - successful, ZMemError if not
   1757           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1758          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1759          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   89..         MOV     ?V2,R1
   1760            ZDO_MsgCB_t *pList;
   1761            ZDO_MsgCB_t *pLast;
   1762            ZDO_MsgCB_t *pNew;
   1763          
   1764            // Look for duplicate
   1765            pList = pLast = zdoMsgCBs;
   \   000017   90....       MOV     DPTR,#zdoMsgCBs
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F8           MOV     R0,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F9           MOV     R1,A
   \   00001F   88..         MOV     ?V6,R0
   \   000021   89..         MOV     ?V7,R1
   \   000023   E8           MOV     A,R0
   \   000024   FE           MOV     R6,A
   \   000025   E9           MOV     A,R1
   \   000026   FF           MOV     R7,A
   1766            while ( pList )
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   000027   EE           MOV     A,R6
   \   000028   4F           ORL     A,R7
   \   000029   603A         JZ      ??ZDO_RegisterForZDOMsg_1
   1767            {
   1768              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \   00002B   8E82         MOV     DPL,R6
   \   00002D   8F83         MOV     DPH,R7
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   65..         XRL     A,?V2
   \   000034   7020         JNZ     ??ZDO_RegisterForZDOMsg_2
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F8           MOV     R0,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   E0           MOVX    A,@DPTR
   \   000049   68           XRL     A,R0
   \   00004A   7003         JNZ     ??ZDO_RegisterForZDOMsg_3
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   69           XRL     A,R1
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   00004F   7005         JNZ     ??ZDO_RegisterForZDOMsg_2
   1769                return ( ZSuccess );
   \   000051   7900         MOV     R1,#0x0
   \   000053   02....       LJMP    ??ZDO_RegisterForZDOMsg_4 & 0xFFFF
   1770              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   000056   8E..         MOV     ?V6,R6
   \   000058   8F..         MOV     ?V7,R7
   1771              pList = (ZDO_MsgCB_t *)pList->next;
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FE           MOV     R6,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   FF           MOV     R7,A
   \   000063   80C2         SJMP    ??ZDO_RegisterForZDOMsg_0
   1772            }
   1773          
   1774            // Add to the list
   1775            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000065                ; Setup parameters for call to function osal_mem_alloc
   \   000065   7A05         MOV     R2,#0x5
   \   000067   7B00         MOV     R3,#0x0
   \   000069   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00006C   8A..         MOV     ?V4,R2
   \   00006E   8B..         MOV     ?V5,R3
   \   000070   85....       MOV     ?V0,?V4
   \   000073   85....       MOV     ?V1,?V5
   1776            if ( pNew )
   \   000076   E5..         MOV     A,?V0
   \   000078   45..         ORL     A,?V1
   \   00007A   605E         JZ      ??ZDO_RegisterForZDOMsg_5
   1777            {
   1778              pNew->taskID = taskID;
   \   00007C   E5..         MOV     A,?V2
   \   00007E   C0E0         PUSH    A
   \   000080   85..82       MOV     DPL,?V0
   \   000083   85..83       MOV     DPH,?V1
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   D0E0         POP     A
   \   00008A   F0           MOVX    @DPTR,A
   1779              pNew->clusterID = clusterID;
   \   00008B   85..82       MOV     DPL,?XSP + 0
   \   00008E   85..83       MOV     DPH,?XSP + 1
   \   000091   E0           MOVX    A,@DPTR
   \   000092   F8           MOV     R0,A
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   F9           MOV     R1,A
   \   000096   85..82       MOV     DPL,?V0
   \   000099   85..83       MOV     DPH,?V1
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   E8           MOV     A,R0
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   A3           INC     DPTR
   \   0000A2   E9           MOV     A,R1
   \   0000A3   F0           MOVX    @DPTR,A
   1780              pNew->next = NULL;
   \   0000A4   85..82       MOV     DPL,?V0
   \   0000A7   85..83       MOV     DPH,?V1
   \   0000AA   7400         MOV     A,#0x0
   \   0000AC   F0           MOVX    @DPTR,A
   \   0000AD   A3           INC     DPTR
   \   0000AE   7400         MOV     A,#0x0
   \   0000B0   F0           MOVX    @DPTR,A
   1781              if ( zdoMsgCBs )
   \   0000B1   90....       MOV     DPTR,#zdoMsgCBs
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   F8           MOV     R0,A
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   F9           MOV     R1,A
   \   0000B9   E8           MOV     A,R0
   \   0000BA   49           ORL     A,R1
   \   0000BB   600F         JZ      ??ZDO_RegisterForZDOMsg_6
   1782              {
   1783                pLast->next = pNew;
   \   0000BD   85..82       MOV     DPL,?V6
   \   0000C0   85..83       MOV     DPH,?V7
   \   0000C3   E5..         MOV     A,?V0
   \   0000C5   F0           MOVX    @DPTR,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   E5..         MOV     A,?V1
   \   0000C9   F0           MOVX    @DPTR,A
   \   0000CA   800A         SJMP    ??ZDO_RegisterForZDOMsg_7
   1784              }
   1785              else
   1786                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   0000CC   90....       MOV     DPTR,#zdoMsgCBs
   \   0000CF   E5..         MOV     A,?V0
   \   0000D1   F0           MOVX    @DPTR,A
   \   0000D2   A3           INC     DPTR
   \   0000D3   E5..         MOV     A,?V1
   \   0000D5   F0           MOVX    @DPTR,A
   1787              return ( ZSuccess );
   \                     ??ZDO_RegisterForZDOMsg_7:
   \   0000D6   7900         MOV     R1,#0x0
   \   0000D8   8002         SJMP    ??ZDO_RegisterForZDOMsg_4
   1788            }
   1789            else
   1790              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   0000DA   7910         MOV     R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   0000DC   7402         MOV     A,#0x2
   \   0000DE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E1   7F08         MOV     R7,#0x8
   \   0000E3   02....       LJMP    ?BANKED_LEAVE_XDATA
   1791          }
   1792          
   1793          /*********************************************************************
   1794           * @fn          ZDO_RemoveRegisteredCB
   1795           *
   1796           * @brief       Call this function if you don't want to receive the
   1797           *              incoming message.
   1798           *
   1799           * @param       taskID - Where the messages are being delivered.
   1800           * @param       clusterID - What message?
   1801           *
   1802           * @return      ZSuccess - successful, ZFailure if not found
   1803           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1804          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1805          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   8A..         MOV     ?V2,R2
   \   000009   8B..         MOV     ?V3,R3
   1806            ZDO_MsgCB_t *pList;
   1807            ZDO_MsgCB_t *pLast = NULL;
   \   00000B   75..00       MOV     ?V0,#0x0
   \   00000E   75..00       MOV     ?V1,#0x0
   1808          
   1809            pList = zdoMsgCBs;
   \   000011   90....       MOV     DPTR,#zdoMsgCBs
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   E8           MOV     A,R0
   \   00001A   FE           MOV     R6,A
   \   00001B   E9           MOV     A,R1
   \   00001C   FF           MOV     R7,A
   1810            while ( pList )
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   00001D   EE           MOV     A,R6
   \   00001E   4F           ORL     A,R7
   \   00001F   607E         JZ      ??ZDO_RemoveRegisteredCB_1
   1811            {
   1812              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   65..         XRL     A,?V4
   \   00002A   7063         JNZ     ??ZDO_RemoveRegisteredCB_2
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   65..         XRL     A,?V2
   \   000036   7004         JNZ     ??ZDO_RemoveRegisteredCB_3
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   65..         XRL     A,?V3
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   00003C   7051         JNZ     ??ZDO_RemoveRegisteredCB_2
   1813              {
   1814                if ( pLast )
   \   00003E   E5..         MOV     A,?V0
   \   000040   45..         ORL     A,?V1
   \   000042   6016         JZ      ??ZDO_RemoveRegisteredCB_4
   1815                {
   1816                  // remove this one from the linked list
   1817                  pLast->next = pList->next;
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F8           MOV     R0,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   85..82       MOV     DPL,?V0
   \   000050   85..83       MOV     DPH,?V1
   \   000053   E8           MOV     A,R0
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   E9           MOV     A,R1
   \   000057   F0           MOVX    @DPTR,A
   \   000058   802A         SJMP    ??ZDO_RemoveRegisteredCB_5
   1818                }
   1819                else if ( pList->next )
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F8           MOV     R0,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F9           MOV     R1,A
   \   000063   E8           MOV     A,R0
   \   000064   49           ORL     A,R1
   \   000065   6013         JZ      ??ZDO_RemoveRegisteredCB_6
   1820                {
   1821                  // remove the first one from the linked list
   1822                  zdoMsgCBs = pList->next;
   \   000067   8E82         MOV     DPL,R6
   \   000069   8F83         MOV     DPH,R7
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F8           MOV     R0,A
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F9           MOV     R1,A
   \   000070   90....       MOV     DPTR,#zdoMsgCBs
   \   000073   E8           MOV     A,R0
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   E9           MOV     A,R1
   \   000077   F0           MOVX    @DPTR,A
   \   000078   800A         SJMP    ??ZDO_RemoveRegisteredCB_5
   1823                }
   1824                else
   1825                {
   1826                  // remove the only item from the list
   1827                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   00007A   90....       MOV     DPTR,#zdoMsgCBs
   \   00007D   7400         MOV     A,#0x0
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   \   000081   7400         MOV     A,#0x0
   \   000083   F0           MOVX    @DPTR,A
   1828                }
   1829                osal_mem_free( pList );
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   000084                ; Setup parameters for call to function osal_mem_free
   \   000084   EE           MOV     A,R6
   \   000085   FA           MOV     R2,A
   \   000086   EF           MOV     A,R7
   \   000087   FB           MOV     R3,A
   \   000088   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   1830                return ( ZSuccess );
   \   00008B   7900         MOV     R1,#0x0
   \   00008D   8012         SJMP    ??ZDO_RemoveRegisteredCB_7
   1831              }
   1832              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   00008F   8E..         MOV     ?V0,R6
   \   000091   8F..         MOV     ?V1,R7
   1833              pList = pList->next;
   \   000093   8E82         MOV     DPL,R6
   \   000095   8F83         MOV     DPH,R7
   \   000097   E0           MOVX    A,@DPTR
   \   000098   FE           MOV     R6,A
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   FF           MOV     R7,A
   \   00009C   02....       LJMP    ??ZDO_RemoveRegisteredCB_0 & 0xFFFF
   1834            }
   1835          
   1836            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   00009F   7901         MOV     R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   0000A1   7F05         MOV     R7,#0x5
   \   0000A3   02....       LJMP    ?BANKED_LEAVE_XDATA
   1837          }
   1838          
   1839          /*********************************************************************
   1840           * @fn          ZDO_SendMsgCBs
   1841           *
   1842           * @brief       This function sends messages to registered tasks.
   1843           *              Local to ZDO and shouldn't be called outside of ZDO.
   1844           *
   1845           * @param       inMsg - incoming message
   1846           *
   1847           * @return      TRUE if sent to at least 1 task, FALSE if not
   1848           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1849          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   1850          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   1851            uint8 ret = FALSE;
   \   000009   75..00       MOV     ?V3,#0x0
   1852            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV     DPTR,#zdoMsgCBs
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V4,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V5,A
   1853            while ( pList )
   \                     ??ZDO_SendMsgCBs_0:
   \   000016   E5..         MOV     A,?V4
   \   000018   45..         ORL     A,?V5
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??ZDO_SendMsgCBs_1 & 0xFFFF
   1854            {
   1855              if ( pList->clusterID == inMsg->clusterID )
   \   00001F   85..82       MOV     DPL,?V4
   \   000022   85..83       MOV     DPH,?V5
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   E5..         MOV     A,?V6
   \   00002F   240C         ADD     A,#0xc
   \   000031   F582         MOV     DPL,A
   \   000033   E4           CLR     A
   \   000034   35..         ADDC    A,?V7
   \   000036   F583         MOV     DPH,A
   \   000038   E0           MOVX    A,@DPTR
   \   000039   68           XRL     A,R0
   \   00003A   7003         JNZ     ??ZDO_SendMsgCBs_2
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   69           XRL     A,R1
   \                     ??ZDO_SendMsgCBs_2:
   \   00003F   6003         JZ      $+5
   \   000041   02....       LJMP    ??ZDO_SendMsgCBs_3 & 0xFFFF
   1856              {
   1857                zdoIncomingMsg_t *msgPtr;
   1858          
   1859                // Send the address to the task
   1860                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \   000044                ; Setup parameters for call to function osal_msg_allocate
   \   000044   E5..         MOV     A,?V6
   \   000046   2410         ADD     A,#0x10
   \   000048   F582         MOV     DPL,A
   \   00004A   E4           CLR     A
   \   00004B   35..         ADDC    A,?V7
   \   00004D   F583         MOV     DPH,A
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F8           MOV     R0,A
   \   000051   7900         MOV     R1,#0x0
   \   000053   E8           MOV     A,R0
   \   000054   2415         ADD     A,#0x15
   \   000056   FA           MOV     R2,A
   \   000057   E4           CLR     A
   \   000058   39           ADDC    A,R1
   \   000059   FB           MOV     R3,A
   \   00005A   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
   \   00005D   8A..         MOV     ?V0,R2
   \   00005F   8B..         MOV     ?V1,R3
   \   000061   AE..         MOV     R6,?V0
   \   000063   AF..         MOV     R7,?V1
   1861                if ( msgPtr )
   \   000065   EE           MOV     A,R6
   \   000066   4F           ORL     A,R7
   \   000067   7003         JNZ     $+5
   \   000069   02....       LJMP    ??ZDO_SendMsgCBs_3 & 0xFFFF
   1862                {
   1863                  // copy struct
   1864                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   00006C                ; Setup parameters for call to function osal_memcpy
   \   00006C   85....       MOV     ?V0,?V6
   \   00006F   85....       MOV     ?V1,?V7
   \   000072   75..00       MOV     ?V2,#0x0
   \   000075   78..         MOV     R0,#?V0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00007A   7C15         MOV     R4,#0x15
   \   00007C   7D00         MOV     R5,#0x0
   \   00007E   EE           MOV     A,R6
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   FB           MOV     R3,A
   \   000082   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000085   7403         MOV     A,#0x3
   \   000087   12....       LCALL   ?DEALLOC_XSTACK8
   1865          
   1866                  if ( inMsg->asduLen )
   \   00008A   E5..         MOV     A,?V6
   \   00008C   2410         ADD     A,#0x10
   \   00008E   F582         MOV     DPL,A
   \   000090   E4           CLR     A
   \   000091   35..         ADDC    A,?V7
   \   000093   F583         MOV     DPH,A
   \   000095   E0           MOVX    A,@DPTR
   \   000096   6054         JZ      ??ZDO_SendMsgCBs_4
   1867                  {
   1868                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   000098   EE           MOV     A,R6
   \   000099   2415         ADD     A,#0x15
   \   00009B   F8           MOV     R0,A
   \   00009C   E4           CLR     A
   \   00009D   3F           ADDC    A,R7
   \   00009E   F9           MOV     R1,A
   \   00009F   EE           MOV     A,R6
   \   0000A0   2413         ADD     A,#0x13
   \   0000A2   F582         MOV     DPL,A
   \   0000A4   E4           CLR     A
   \   0000A5   3F           ADDC    A,R7
   \   0000A6   F583         MOV     DPH,A
   \   0000A8   E8           MOV     A,R0
   \   0000A9   F0           MOVX    @DPTR,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   E9           MOV     A,R1
   \   0000AC   F0           MOVX    @DPTR,A
   1869                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \   0000AD                ; Setup parameters for call to function osal_memcpy
   \   0000AD   E5..         MOV     A,?V6
   \   0000AF   2413         ADD     A,#0x13
   \   0000B1   F582         MOV     DPL,A
   \   0000B3   E4           CLR     A
   \   0000B4   35..         ADDC    A,?V7
   \   0000B6   F583         MOV     DPH,A
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   F5..         MOV     ?V0,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F5..         MOV     ?V1,A
   \   0000BF   75..00       MOV     ?V2,#0x0
   \   0000C2   78..         MOV     R0,#?V0
   \   0000C4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C7   E5..         MOV     A,?V6
   \   0000C9   2410         ADD     A,#0x10
   \   0000CB   F582         MOV     DPL,A
   \   0000CD   E4           CLR     A
   \   0000CE   35..         ADDC    A,?V7
   \   0000D0   F583         MOV     DPH,A
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   FC           MOV     R4,A
   \   0000D4   7D00         MOV     R5,#0x0
   \   0000D6   EE           MOV     A,R6
   \   0000D7   2413         ADD     A,#0x13
   \   0000D9   F582         MOV     DPL,A
   \   0000DB   E4           CLR     A
   \   0000DC   3F           ADDC    A,R7
   \   0000DD   F583         MOV     DPH,A
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   FA           MOV     R2,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   FB           MOV     R3,A
   \   0000E4   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000E7   7403         MOV     A,#0x3
   \   0000E9   12....       LCALL   ?DEALLOC_XSTACK8
   1870                  }
   1871          
   1872                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_4:
   \   0000EC   8E82         MOV     DPL,R6
   \   0000EE   8F83         MOV     DPH,R7
   \   0000F0   74D3         MOV     A,#-0x2d
   \   0000F2   F0           MOVX    @DPTR,A
   1873                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   0000F3                ; Setup parameters for call to function osal_msg_send
   \   0000F3   EE           MOV     A,R6
   \   0000F4   FA           MOV     R2,A
   \   0000F5   EF           MOV     A,R7
   \   0000F6   FB           MOV     R3,A
   \   0000F7   85..82       MOV     DPL,?V4
   \   0000FA   85..83       MOV     DPH,?V5
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   F9           MOV     R1,A
   \   000101   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
   \   000104   E9           MOV     A,R1
   1874                  ret = TRUE;
   \   000105   75..01       MOV     ?V3,#0x1
   1875                }
   1876              }
   1877              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_3:
   \   000108   85..82       MOV     DPL,?V4
   \   00010B   85..83       MOV     DPH,?V5
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   F5..         MOV     ?V4,A
   \   000111   A3           INC     DPTR
   \   000112   E0           MOVX    A,@DPTR
   \   000113   F5..         MOV     ?V5,A
   \   000115   02....       LJMP    ??ZDO_SendMsgCBs_0 & 0xFFFF
   1878            }
   1879            return ( ret );
   \                     ??ZDO_SendMsgCBs_1:
   \   000118   A9..         MOV     R1,?V3
   \   00011A   7F08         MOV     R7,#0x8
   \   00011C   02....       LJMP    ?BANKED_LEAVE_XDATA
   1880          }
   1881          
   1882          /*********************************************************************
   1883           * Incoming message processor
   1884           */
   1885          
   1886          /*********************************************************************
   1887           * @fn          ZDP_IncomingData
   1888           *
   1889           * @brief       This function indicates the transfer of a data PDU (ASDU)
   1890           *              from the APS sub-layer to the ZDO.
   1891           *
   1892           * @param       pData - Incoming Message
   1893           *
   1894           * @return      none
   1895           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1896          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   1897          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1898            uint8 x = 0;
   \   00000E   75..00       MOV     ?V1,#0x0
   1899            uint8 handled;
   1900            zdoIncomingMsg_t inMsg;
   1901          
   1902            inMsg.srcAddr.addrMode = Addr16Bit;
   \   000011   740A         MOV     A,#0xa
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   7402         MOV     A,#0x2
   \   000018   F0           MOVX    @DPTR,A
   1903            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F8           MOV     R0,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
   \   000028   7402         MOV     A,#0x2
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E8           MOV     A,R0
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   E9           MOV     A,R1
   \   000031   F0           MOVX    @DPTR,A
   1904            inMsg.wasBroadcast = pData->wasBroadcast;
   \   000032   EE           MOV     A,R6
   \   000033   2415         ADD     A,#0x15
   \   000035   F582         MOV     DPL,A
   \   000037   E4           CLR     A
   \   000038   3F           ADDC    A,R7
   \   000039   F583         MOV     DPH,A
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   C0E0         PUSH    A
   \   00003E   740B         MOV     A,#0xb
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   D0E0         POP     A
   \   000045   F0           MOVX    @DPTR,A
   1905            inMsg.clusterID = pData->clusterId;
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F8           MOV     R0,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F9           MOV     R1,A
   \   000053   740C         MOV     A,#0xc
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   E8           MOV     A,R0
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   E9           MOV     A,R1
   \   00005C   F0           MOVX    @DPTR,A
   1906            inMsg.SecurityUse = pData->SecurityUse;
   \   00005D   EE           MOV     A,R6
   \   00005E   2419         ADD     A,#0x19
   \   000060   F582         MOV     DPL,A
   \   000062   E4           CLR     A
   \   000063   3F           ADDC    A,R7
   \   000064   F583         MOV     DPH,A
   \   000066   E0           MOVX    A,@DPTR
   \   000067   C0E0         PUSH    A
   \   000069   740E         MOV     A,#0xe
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   D0E0         POP     A
   \   000070   F0           MOVX    @DPTR,A
   1907          
   1908            inMsg.asduLen = pData->cmd.DataLength-1;
   \   000071   EE           MOV     A,R6
   \   000072   241F         ADD     A,#0x1f
   \   000074   F582         MOV     DPL,A
   \   000076   E4           CLR     A
   \   000077   3F           ADDC    A,R7
   \   000078   F583         MOV     DPH,A
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F8           MOV     R0,A
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   E8           MOV     A,R0
   \   000080   24FF         ADD     A,#-0x1
   \   000082   C0E0         PUSH    A
   \   000084   7410         MOV     A,#0x10
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   D0E0         POP     A
   \   00008B   F0           MOVX    @DPTR,A
   1909            inMsg.asdu = pData->cmd.Data+1;
   \   00008C   EE           MOV     A,R6
   \   00008D   2421         ADD     A,#0x21
   \   00008F   F582         MOV     DPL,A
   \   000091   E4           CLR     A
   \   000092   3F           ADDC    A,R7
   \   000093   F583         MOV     DPH,A
   \   000095   E0           MOVX    A,@DPTR
   \   000096   2401         ADD     A,#0x1
   \   000098   F8           MOV     R0,A
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   3400         ADDC    A,#0x0
   \   00009D   F9           MOV     R1,A
   \   00009E   7413         MOV     A,#0x13
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   E8           MOV     A,R0
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E9           MOV     A,R1
   \   0000A7   F0           MOVX    @DPTR,A
   1910            inMsg.TransSeq = pData->cmd.Data[0];
   \   0000A8   EE           MOV     A,R6
   \   0000A9   2421         ADD     A,#0x21
   \   0000AB   F582         MOV     DPL,A
   \   0000AD   E4           CLR     A
   \   0000AE   3F           ADDC    A,R7
   \   0000AF   F583         MOV     DPH,A
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F8           MOV     R0,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   F583         MOV     DPH,A
   \   0000B7   8882         MOV     DPL,R0
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   C0E0         PUSH    A
   \   0000BC   740F         MOV     A,#0xf
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   D0E0         POP     A
   \   0000C3   F0           MOVX    @DPTR,A
   1911            inMsg.macDestAddr = pData->macDestAddr;
   \   0000C4   EE           MOV     A,R6
   \   0000C5   2412         ADD     A,#0x12
   \   0000C7   F582         MOV     DPL,A
   \   0000C9   E4           CLR     A
   \   0000CA   3F           ADDC    A,R7
   \   0000CB   F583         MOV     DPH,A
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   F8           MOV     R0,A
   \   0000CF   A3           INC     DPTR
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   F9           MOV     R1,A
   \   0000D2   7411         MOV     A,#0x11
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   E8           MOV     A,R0
   \   0000D8   F0           MOVX    @DPTR,A
   \   0000D9   A3           INC     DPTR
   \   0000DA   E9           MOV     A,R1
   \   0000DB   F0           MOVX    @DPTR,A
   1912          
   1913            handled = ZDO_SendMsgCBs( &inMsg );
   \   0000DC                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   0000DC   AA..         MOV     R2,?XSP + 0
   \   0000DE   AB..         MOV     R3,?XSP + 1
   \   0000E0   12....       LCALL   ??ZDO_SendMsgCBs?relay; Banked call to: ZDO_SendMsgCBs
   \   0000E3   E9           MOV     A,R1
   \   0000E4   F5..         MOV     ?V0,A
   1914          
   1915          #if (defined MT_ZDO_CB_FUNC)
   1916          #if !defined MT_TASK
   1917            if (zgZdoDirectCB)
   1918          #endif
   1919            {
   1920              MT_ZdoDirectCB( pData, &inMsg );
   1921            }
   1922          #endif
   1923          
   1924            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   \                     ??ZDP_IncomingData_0:
   \   0000E6   A8..         MOV     R0,?V1
   \   0000E8   7900         MOV     R1,#0x0
   \   0000EA   E8           MOV     A,R0
   \   0000EB   75F004       MOV     B,#0x4
   \   0000EE   A4           MUL     AB
   \   0000EF   C8           XCH     A,R0
   \   0000F0   AAF0         MOV     R2,B
   \   0000F2   75F000       MOV     B,#0x0
   \   0000F5   A4           MUL     AB
   \   0000F6   2A           ADD     A,R2
   \   0000F7   FA           MOV     R2,A
   \   0000F8   75F004       MOV     B,#0x4
   \   0000FB   E9           MOV     A,R1
   \   0000FC   A4           MUL     AB
   \   0000FD   2A           ADD     A,R2
   \   0000FE   F9           MOV     R1,A
   \   0000FF   74..         MOV     A,#zdpMsgProcs & 0xff
   \   000101   28           ADD     A,R0
   \   000102   F582         MOV     DPL,A
   \   000104   74..         MOV     A,#(zdpMsgProcs >> 8) & 0xff
   \   000106   39           ADDC    A,R1
   \   000107   F583         MOV     DPH,A
   \   000109   E4           CLR     A
   \   00010A   93           MOVC    A,@A+DPTR
   \   00010B   F8           MOV     R0,A
   \   00010C   7401         MOV     A,#0x1
   \   00010E   93           MOVC    A,@A+DPTR
   \   00010F   F9           MOV     R1,A
   \   000110   74FF         MOV     A,#-0x1
   \   000112   68           XRL     A,R0
   \   000113   7003         JNZ     ??ZDP_IncomingData_1
   \   000115   74FF         MOV     A,#-0x1
   \   000117   69           XRL     A,R1
   \                     ??ZDP_IncomingData_1:
   \   000118   6074         JZ      ??ZDP_IncomingData_2
   1925            {
   1926              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   \   00011A   A8..         MOV     R0,?V1
   \   00011C   7900         MOV     R1,#0x0
   \   00011E   E8           MOV     A,R0
   \   00011F   75F004       MOV     B,#0x4
   \   000122   A4           MUL     AB
   \   000123   C8           XCH     A,R0
   \   000124   AAF0         MOV     R2,B
   \   000126   75F000       MOV     B,#0x0
   \   000129   A4           MUL     AB
   \   00012A   2A           ADD     A,R2
   \   00012B   FA           MOV     R2,A
   \   00012C   75F004       MOV     B,#0x4
   \   00012F   E9           MOV     A,R1
   \   000130   A4           MUL     AB
   \   000131   2A           ADD     A,R2
   \   000132   F9           MOV     R1,A
   \   000133   74..         MOV     A,#zdpMsgProcs & 0xff
   \   000135   28           ADD     A,R0
   \   000136   F582         MOV     DPL,A
   \   000138   74..         MOV     A,#(zdpMsgProcs >> 8) & 0xff
   \   00013A   39           ADDC    A,R1
   \   00013B   F583         MOV     DPH,A
   \   00013D   E4           CLR     A
   \   00013E   93           MOVC    A,@A+DPTR
   \   00013F   F8           MOV     R0,A
   \   000140   7401         MOV     A,#0x1
   \   000142   93           MOVC    A,@A+DPTR
   \   000143   F9           MOV     R1,A
   \   000144   740C         MOV     A,#0xc
   \   000146   12....       LCALL   ?XSTACK_DISP0_8
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   68           XRL     A,R0
   \   00014B   7003         JNZ     ??ZDP_IncomingData_3
   \   00014D   A3           INC     DPTR
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   69           XRL     A,R1
   \                     ??ZDP_IncomingData_3:
   \   000150   7037         JNZ     ??ZDP_IncomingData_4
   1927              {
   1928                zdpMsgProcs[x].pFn( &inMsg );
   \   000152                ; Setup parameters for indirect call
   \   000152   AA..         MOV     R2,?XSP + 0
   \   000154   AB..         MOV     R3,?XSP + 1
   \   000156   A8..         MOV     R0,?V1
   \   000158   7900         MOV     R1,#0x0
   \   00015A   E8           MOV     A,R0
   \   00015B   75F004       MOV     B,#0x4
   \   00015E   A4           MUL     AB
   \   00015F   C8           XCH     A,R0
   \   000160   ACF0         MOV     R4,B
   \   000162   75F000       MOV     B,#0x0
   \   000165   A4           MUL     AB
   \   000166   2C           ADD     A,R4
   \   000167   FC           MOV     R4,A
   \   000168   75F004       MOV     B,#0x4
   \   00016B   E9           MOV     A,R1
   \   00016C   A4           MUL     AB
   \   00016D   2C           ADD     A,R4
   \   00016E   F9           MOV     R1,A
   \   00016F   74..         MOV     A,#(zdpMsgProcs + 2) & 0xff
   \   000171   28           ADD     A,R0
   \   000172   F582         MOV     DPL,A
   \   000174   74..         MOV     A,#((zdpMsgProcs + 2) >> 8) & 0xff
   \   000176   39           ADDC    A,R1
   \   000177   F583         MOV     DPH,A
   \   000179   E4           CLR     A
   \   00017A   93           MOVC    A,@A+DPTR
   \   00017B   C0E0         PUSH    A
   \   00017D   7401         MOV     A,#0x1
   \   00017F   93           MOVC    A,@A+DPTR
   \   000180   F583         MOV     DPH,A
   \   000182   D082         POP     DPL
   \   000184   12....       LCALL   ?CALL_IND
   1929                return;
   \   000187   8010         SJMP    ??ZDP_IncomingData_5
   1930              }
   1931              x++;
   \                     ??ZDP_IncomingData_4:
   \   000189   05..         INC     ?V1
   \   00018B   02....       LJMP    ??ZDP_IncomingData_0 & 0xFFFF
   1932            }
   1933          
   1934            // Handle unhandled messages
   1935            if ( !handled )
   \                     ??ZDP_IncomingData_2:
   \   00018E   E5..         MOV     A,?V0
   \   000190   7007         JNZ     ??ZDP_IncomingData_5
   1936              ZDApp_InMsgCB( &inMsg );
   \   000192                ; Setup parameters for call to function ZDApp_InMsgCB
   \   000192   AA..         MOV     R2,?XSP + 0
   \   000194   AB..         MOV     R3,?XSP + 1
   \   000196   12....       LCALL   ??ZDApp_InMsgCB?relay; Banked call to: ZDApp_InMsgCB
   1937          }
   \                     ??ZDP_IncomingData_5:
   \   000199   7415         MOV     A,#0x15
   \   00019B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00019E   7F02         MOV     R7,#0x2
   \   0001A0   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??fillAndSend?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    fillAndSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SendData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NWKAddrOfInterestReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NWKAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NwkAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NwkAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_IEEEAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IEEEAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MatchDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SimpleDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_UserDescSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_ServerDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_DeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_DeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zdpProcessAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdpProcessAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NodeDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NodeDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_PowerDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_PowerDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SimpleDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EPRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EPRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_UserDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_ServerDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_GenericRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_GenericRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EndDeviceBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_BindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_BindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtDirectJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtPermitJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtLeaveReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkUpdateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtLqiRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtRtgRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtBindRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkUpdateNotify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RegisterForZDOMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RemoveRegisteredCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SendMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_IncomingData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IncomingData
   1938          
   1939          /*********************************************************************
   1940          *********************************************************************/
   1941          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     18   ZDO_RegisterForZDOMsg
        0     18   -> osal_mem_alloc
      0     13   ZDO_RemoveRegisteredCB
        0     13   -> osal_mem_free
      0     50   ZDO_SendMsgCBs
        0     19   -> osal_memcpy
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      1     30   ZDP_BindUnbindReq
        0     22   -> fillAndSend
        0     20   -> sAddrExtCpy
      1     26   ZDP_DeviceAnnce
        0     25   -> fillAndSend
        0     23   -> sAddrExtCpy
      1     31   ZDP_EPRsp
        0     23   -> fillAndSend
        0     24   -> osal_memcpy
      1     32   ZDP_EndDeviceBindReq
        0     21   -> NLME_GetExtAddr
        0     21   -> NLME_GetShortAddr
        0     23   -> fillAndSend
        0     21   -> sAddrExtCpy
      1     23   ZDP_GenericRsp
        0     19   -> fillAndSend
      1     27   ZDP_IEEEAddrReq
        0     27   -> fillAndSend
      1     31   ZDP_IncomingData
        0     31   -> ZDApp_InMsgCB
        0     31   -> ZDO_SendMsgCBs
      1     30   ZDP_MatchDescReq
        0     22   -> fillAndSend
      1     32   ZDP_MgmtBindRsp
        0     27   -> fillAndSend
        0     25   -> osal_mem_alloc
        0     25   -> osal_mem_free
        0     25   -> sAddrExtCpy
      1     17   ZDP_MgmtDirectJoinReq
        0     16   -> fillAndSend
        0     14   -> sAddrExtCpy
      0     18   ZDP_MgmtLeaveReq
        0     16   -> fillAndSend
        0     14   -> sAddrExtCpy
      1     30   ZDP_MgmtLqiRsp
        0     25   -> fillAndSend
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     23   -> sAddrExtCpy
      1     28   ZDP_MgmtNwkDiscReq
        0     22   -> fillAndSend
        0     24   -> osal_buffer_uint32
      1     30   ZDP_MgmtNwkDiscRsp
        0     25   -> fillAndSend
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     23   -> sAddrExtCpy
      1     39   ZDP_MgmtNwkUpdateNotify
        0     25   -> fillAndSend
        0     27   -> osal_buffer_uint32
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     26   -> osal_memcpy
      1     32   ZDP_MgmtNwkUpdateReq
        0     24   -> fillAndSend
        0     26   -> osal_buffer_uint32
      1     16   ZDP_MgmtPermitJoinReq
        0     16   -> fillAndSend
      1     30   ZDP_MgmtRtgRsp
        0     25   -> fillAndSend
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
      1     17   ZDP_NWKAddrOfInterestReq
        0     16   -> fillAndSend
      1     21   ZDP_NodeDescMsg
        0     19   -> fillAndSend
      1     27   ZDP_NwkAddrReq
        0     27   -> fillAndSend
        0     25   -> sAddrExtCmp
        0     25   -> sAddrExtCpy
      1     21   ZDP_PowerDescMsg
        0     19   -> fillAndSend
      1     27   ZDP_SendData
        0     22   -> fillAndSend
      1     25   ZDP_ServerDiscReq
        0     25   -> fillAndSend
      1     25   ZDP_ServerDiscRsp
        0     21   -> fillAndSend
      1     19   ZDP_SimpleDescMsg
        0     19   -> fillAndSend
      1     17   ZDP_SimpleDescReq
        0     16   -> fillAndSend
      1     25   ZDP_UserDescRsp
        0     21   -> fillAndSend
        0     22   -> osal_memcpy
      1     23   ZDP_UserDescSet
        0     20   -> fillAndSend
        0     21   -> osal_memcpy
        0     18   -> osal_memset
      1     77   fillAndSend
        0     36   -> AF_DataRequest
        0     27   -> osal_memset
      1     41   zdpProcessAddrReq
        0     39   -> AddrMgrEntryGet
        0     39   -> AssocGetWithExt
        0     39   -> AssocGetWithShort
        0     39   -> AssocMakeList
        0     41   -> fillAndSend
        0     39   -> osal_mem_free
        0     39   -> sAddrExtCmp
        0     39   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDP_TmpBuf>
       6  ??ZDO_RegisterForZDOMsg?relay
       6  ??ZDO_RemoveRegisteredCB?relay
       6  ??ZDO_SendMsgCBs?relay
       6  ??ZDP_BindUnbindReq?relay
       6  ??ZDP_DeviceAnnce?relay
       6  ??ZDP_EPRsp?relay
       6  ??ZDP_EndDeviceBindReq?relay
       6  ??ZDP_GenericRsp?relay
       6  ??ZDP_IEEEAddrReq?relay
       6  ??ZDP_IncomingData?relay
       6  ??ZDP_MatchDescReq?relay
       6  ??ZDP_MgmtBindRsp?relay
       6  ??ZDP_MgmtDirectJoinReq?relay
       6  ??ZDP_MgmtLeaveReq?relay
       6  ??ZDP_MgmtLqiRsp?relay
       6  ??ZDP_MgmtNwkDiscReq?relay
       6  ??ZDP_MgmtNwkDiscRsp?relay
       6  ??ZDP_MgmtNwkUpdateNotify?relay
       6  ??ZDP_MgmtNwkUpdateReq?relay
       6  ??ZDP_MgmtPermitJoinReq?relay
       6  ??ZDP_MgmtRtgRsp?relay
       6  ??ZDP_NWKAddrOfInterestReq?relay
       6  ??ZDP_NodeDescMsg?relay
       6  ??ZDP_NwkAddrReq?relay
       6  ??ZDP_PowerDescMsg?relay
       6  ??ZDP_SendData?relay
       6  ??ZDP_ServerDiscReq?relay
       6  ??ZDP_ServerDiscRsp?relay
       6  ??ZDP_SimpleDescMsg?relay
       6  ??ZDP_SimpleDescReq?relay
       6  ??ZDP_UserDescRsp?relay
       6  ??ZDP_UserDescSet?relay
       6  ??fillAndSend?relay
       6  ??zdpProcessAddrReq?relay
     230  ZDO_RegisterForZDOMsg
     166  ZDO_RemoveRegisteredCB
     287  ZDO_SendMsgCBs
       1  ZDP_AF_ENDPOINT
     462  ZDP_BindUnbindReq
      80  ZDP_Buf
     171  ZDP_DeviceAnnce
     309  ZDP_EPRsp
     686  ZDP_EndDeviceBindReq
     168  ZDP_GenericRsp
     178  ZDP_IEEEAddrReq
     419  ZDP_IncomingData
     741  ZDP_MatchDescReq
     731  ZDP_MgmtBindRsp
      88  ZDP_MgmtDirectJoinReq
     143  ZDP_MgmtLeaveReq
     739  ZDP_MgmtLqiRsp
     172  ZDP_MgmtNwkDiscReq
     570  ZDP_MgmtNwkDiscRsp
     484  ZDP_MgmtNwkUpdateNotify
     358  ZDP_MgmtNwkUpdateReq
      85  ZDP_MgmtPermitJoinReq
     531  ZDP_MgmtRtgRsp
      91  ZDP_NWKAddrOfInterestReq
     614  ZDP_NodeDescMsg
     193  ZDP_NwkAddrReq
     277  ZDP_PowerDescMsg
     198  ZDP_SendData
     156  ZDP_ServerDiscReq
     188  ZDP_ServerDiscRsp
     954  ZDP_SimpleDescMsg
     111  ZDP_SimpleDescReq
       2  ZDP_TmpBuf
       1  ZDP_TransID
       1  ZDP_TxOptions
     249  ZDP_UserDescRsp
     264  ZDP_UserDescSet
     225  fillAndSend
       2  zdoMsgCBs
      36  zdpMsgProcs
    1306  zdpProcessAddrReq

 
 12 544 bytes in segment BANKED_CODE
    204 bytes in segment BANK_RELAYS
     37 bytes in segment CODE_C
      2 bytes in segment XDATA_I
      2 bytes in segment XDATA_ID
     84 bytes in segment XDATA_Z
 
 12 787 bytes of CODE  memory
     86 bytes of XDATA memory

Errors: none
Warnings: none
