###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:44
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\stack\zdo\ZDApp.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\stack\zdo\ZDApp.c" -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D XLAB
#        -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\ZDApp.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\ZDApp.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2010-09-17 16:25:30 -0700 (Fri, 17 Sep 2010) $
      4            Revision:       $Revision: 23835 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com. 
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMac.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66          
     67          #include "ssp.h"
     68          
     69          /* HAL */
     70          #include "hal_led.h"
     71          #include "hal_lcd.h"
     72          #include "hal_key.h"
     73          
     74          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     75            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     76          #endif
     77          
     78          /*********************************************************************
     79           * CONSTANTS
     80           */
     81          
     82          #if !defined( NWK_START_DELAY )
     83            #define NWK_START_DELAY             100   // in milliseconds
     84          #endif
     85          
     86          // Init ZDO, but hold and wait for application to start the joining or 
     87          // forming network
     88          #define ZDO_INIT_HOLD_NWK_START       0xFFFF  
     89          
     90          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     91            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     92          #endif
     93          
     94          #if !defined( BEACON_REQUEST_DELAY )
     95            #define BEACON_REQUEST_DELAY        100   // in milliseconds
     96          #endif
     97          
     98          #if !defined( BEACON_REQ_DELAY_MASK )
     99            #define BEACON_REQ_DELAY_MASK       0x007F
    100          #endif
    101          
    102          #define MAX_RESUME_RETRY            3
    103          
    104          #define MAX_DEVICE_UNAUTH_TIMEOUT   5000  // 5 seconds
    105          
    106          // Beacon Order Settings (see NLMEDE.h)
    107          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    108          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    109          
    110          #if !defined( MAX_NWK_FRAMECOUNTER_CHANGES )
    111            // The number of times the frame counter can change before
    112            // saving to NV
    113            #define MAX_NWK_FRAMECOUNTER_CHANGES    1000
    114          #endif
    115          
    116          // Leave control bits
    117          #define ZDAPP_LEAVE_CTRL_INIT 0
    118          #define ZDAPP_LEAVE_CTRL_SET  1
    119          #define ZDAPP_LEAVE_CTRL_RA   2
    120          
    121          // Address Manager Stub Implementation
    122          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    123          
    124          
    125          #if !defined ZDO_NV_SAVE_RFDs
    126          #define ZDO_NV_SAVE_RFDs  TRUE
    127          #endif
    128          
    129          // Delay time before updating NWK NV data to force fewer writes during high activity.
    130          #if ZDO_NV_SAVE_RFDs
    131          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    132          #else
    133          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    134          #endif
    135          
    136          /*********************************************************************
    137           * GLOBAL VARIABLES
    138           */
    139          
    140          #if defined( LCD_SUPPORTED )
    141            uint8 MatchRsps = 0;
    142          #endif
    143          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    144          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    147          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    153          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          uint16 nwkFrameCounterChanges = 0;
   \                     nwkFrameCounterChanges:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    155          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    158          
    159          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    161          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 10
   \   00000A                REQUIRE __INIT_XDATA_Z
    163          
    164          /*********************************************************************
    165           * EXTERNAL VARIABLES
    166           */
    167          
    168          /*********************************************************************
    169           * EXTERNAL FUNCTIONS
    170           */
    171          
    172          /*********************************************************************
    173           * LOCAL FUNCTIONS
    174           */
    175          
    176          void ZDApp_NetworkStartEvt( void );
    177          void ZDApp_DeviceAuthEvt( void );
    178          void ZDApp_SaveNetworkStateEvt( void );
    179          
    180          uint8 ZDApp_ReadNetworkRestoreState( void );
    181          uint8 ZDApp_RestoreNetworkState( void );
    182          void ZDAppDetermineDeviceType( void );
    183          void ZDApp_InitUserDesc( void );
    184          void ZDAppCheckForHoldKey( void );
    185          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    186          void ZDApp_ProcessNetworkJoin( void );
    187          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    188          void ZDApp_SaveNwkKey( void );
    189          uint8 ZDApp_RestoreNwkKey( void );
    190          networkDesc_t* ZDApp_NwkDescListProcessing(void);  
    191          
    192          void ZDApp_SecInit( uint8 state );
    193          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    194          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    195          
    196          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    197          
    198          void ZDApp_ResetTimerStart( uint16 delay );
    199          void ZDApp_ResetTimerCancel( void );
    200          void ZDApp_LeaveCtrlInit( void );
    201          void ZDApp_LeaveCtrlSet( uint8 ra );
    202          uint8 ZDApp_LeaveCtrlBypass( void );
    203          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    204          void ZDApp_LeaveReset( uint8 ra );
    205          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    206                                  uint8 removeChildren );
    207          void ZDApp_NodeProfileSync( uint8 stackProfile );
    208          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    209          void ZDApp_RegisterCBs( void );
    210          void ZDApp_InitZdoCBFunc(void);
    211          
    212          /*********************************************************************
    213           * LOCAL VARIABLES
    214           */
    215          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    216          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    217          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    218          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    219          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    220          
    221          #if defined( HOLD_AUTO_START )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    222            devStates_t devState = DEV_HOLD;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    223          #else
    224            devStates_t devState = DEV_INIT;
    225          #endif
    226          
    227          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    228            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    229            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    230                                  // to parent. Set to make the device do an Orphan scan.
    231          #else
    232            // Set the default to coodinator
    233            devStartModes_t devStartMode = MODE_HARD;
    234          #endif
    235          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    236          uint8 retryCnt;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    237          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    238          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    239          {
    240            ZDO_EP,
    241            &ZDAppTaskID,
    242            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    243            (afNetworkLatencyReq_t)0            // No Network Latency req
    244          };
    245          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    246          uint16 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
    247          
    248          /*********************************************************************
    249           * @fn      ZDApp_Init
    250           *
    251           * @brief   ZDApp Initialization function.
    252           *
    253           * @param   task_id - ZDApp Task ID
    254           *
    255           * @return  None
    256           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    257          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    258          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    259            // Save the task ID
    260            ZDAppTaskID = task_id;
   \   000007   E5..         MOV     A,?V0
   \   000009   90....       MOV     DPTR,#ZDAppTaskID
   \   00000C   F0           MOVX    @DPTR,A
    261          
    262            // Initialize the ZDO global device short address storage
    263            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000D   90....       MOV     DPTR,#ZDAppNwkAddr + 8
   \   000010   7402         MOV     A,#0x2
   \   000012   F0           MOVX    @DPTR,A
    264            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000013   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000016   74FE         MOV     A,#-0x2
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   74FF         MOV     A,#-0x1
   \   00001C   F0           MOVX    @DPTR,A
    265            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   00001D                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001D   12....       LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
   \   000020   8A..         MOV     ?V2,R2
   \   000022   8B..         MOV     ?V3,R3
   \   000024   AE..         MOV     R6,?V2
   \   000026   AF..         MOV     R7,?V3
    266          
    267            // Check for manual "Hold Auto Start"
    268            ZDAppCheckForHoldKey();
   \   000028                ; Setup parameters for call to function ZDAppCheckForHoldKey
   \   000028   12....       LCALL   ??ZDAppCheckForHoldKey?relay; Banked call to: ZDAppCheckForHoldKey
    269          
    270            // Initialize ZDO items and setup the device - type of device to create.
    271            ZDO_Init();
   \   00002B                ; Setup parameters for call to function ZDO_Init
   \   00002B   12....       LCALL   ??ZDO_Init?relay     ; Banked call to: ZDO_Init
    272          
    273            // Register the endpoint description with the AF
    274            // This task doesn't have a Simple description, but we still need
    275            // to register the endpoint.
    276            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   00002E                ; Setup parameters for call to function afRegister
   \   00002E   7A..         MOV     R2,#ZDApp_epDesc & 0xff
   \   000030   7B..         MOV     R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000032   12....       LCALL   ??afRegister?relay   ; Banked call to: afRegister
   \   000035   E9           MOV     A,R1
    277          
    278          #if defined( ZDO_USERDESC_RESPONSE )
    279            ZDApp_InitUserDesc();
    280          #endif // ZDO_USERDESC_RESPONSE
    281          
    282            // Start the device?
    283            if ( devState != DEV_HOLD )
   \   000036   90....       MOV     DPTR,#devState
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   600A         JZ      ??ZDApp_Init_0
    284            {
    285              ZDOInitDevice( 0 );
   \   00003C                ; Setup parameters for call to function ZDOInitDevice
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   ??ZDOInitDevice?relay; Banked call to: ZDOInitDevice
   \   000043   E9           MOV     A,R1
   \   000044   8015         SJMP    ??ZDApp_Init_1
    286            }
    287            else
    288            {
    289              ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );
   \                     ??ZDApp_Init_0:
   \   000046                ; Setup parameters for call to function ZDOInitDevice
   \   000046   7AFF         MOV     R2,#-0x1
   \   000048   7BFF         MOV     R3,#-0x1
   \   00004A   12....       LCALL   ??ZDOInitDevice?relay; Banked call to: ZDOInitDevice
   \   00004D   E9           MOV     A,R1
    290              // Blink LED to indicate HOLD_START
    291              HalLedBlink ( HAL_LED_4, 0, 50, 500 );
   \   00004E                ; Setup parameters for call to function HalLedBlink
   \   00004E   7CF4         MOV     R4,#-0xc
   \   000050   7D01         MOV     R5,#0x1
   \   000052   7B32         MOV     R3,#0x32
   \   000054   7A00         MOV     R2,#0x0
   \   000056   7908         MOV     R1,#0x8
   \   000058   12....       LCALL   ??HalLedBlink?relay  ; Banked call to: HalLedBlink
    292            }
    293            
    294            // Initialize the ZDO callback function pointers zdoCBFunc[]
    295            ZDApp_InitZdoCBFunc();
   \                     ??ZDApp_Init_1:
   \   00005B                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   00005B   12....       LCALL   ??ZDApp_InitZdoCBFunc?relay; Banked call to: ZDApp_InitZdoCBFunc
    296            
    297            ZDApp_RegisterCBs();
   \   00005E                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   00005E   12....       LCALL   ??ZDApp_RegisterCBs?relay; Banked call to: ZDApp_RegisterCBs
    298          } /* ZDApp_Init() */
   \   000061   7F04         MOV     R7,#0x4
   \   000063   02....       LJMP    ?BANKED_LEAVE_XDATA
    299          
    300          /*********************************************************************
    301           * @fn          ZDApp_SecInit
    302           *
    303           * @brief       ZDApp initialize security.
    304           *
    305           * @param       state - device initialization state
    306           *
    307           * @return      none
    308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    309          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    310          {  
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    311            uint8 zgPreConfigKey[SEC_KEY_LEN];
    312          
    313            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    314            {
    315              // Set the Trust Center bit
    316              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    317            }
    318          
    319            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
    320            {
    321              ZDO_Config_Node_Descriptor.CapabilityFlags |= CAPINFO_SECURITY_CAPABLE;
    322            }
    323              
    324            // Initialize ZigBee Device Security Manager
    325            ZDSecMgrInit(state);
   \   000007                ; Setup parameters for call to function ZDSecMgrInit
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   ??ZDSecMgrInit?relay ; Banked call to: ZDSecMgrInit
    326          
    327            if ( ZG_SECURE_ENABLED )
    328            {
    329              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
    330              {
    331                nwkFrameCounter = 0;
    332            
    333                if( _NIB.nwkKeyLoaded == FALSE )
    334                {
    335                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    336                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
    337                  {
    338                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
    339                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
    340                      SSP_SwitchNwkKey( 0 );
    341                      
    342                      // clear local copy of key
    343                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
    344                  }
    345                }
    346              }
    347            }    
    348          }
   \   00000C   7F01         MOV     R7,#0x1
   \   00000E   02....       LJMP    ?BANKED_LEAVE_XDATA
    349          
    350          /*********************************************************************
    351           * @fn      ZDApp_event_loop()
    352           *
    353           * @brief   Main event loop for Zigbee device objects task. This function
    354           *          should be called at periodic intervals.
    355           *
    356           * @param   task_id - Task ID
    357           * @param   events  - Bitmap of events
    358           *
    359           * @return  none
    360           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    361          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    362          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    363            uint8 *msg_ptr;
    364          
    365            if ( events & SYS_EVENT_MSG )
   \   00000B   EE           MOV     A,R6
   \   00000C   5400         ANL     A,#0x0
   \   00000E   F8           MOV     R0,A
   \   00000F   EF           MOV     A,R7
   \   000010   5480         ANL     A,#0x80
   \   000012   F9           MOV     R1,A
   \   000013   E8           MOV     A,R0
   \   000014   49           ORL     A,R1
   \   000015   6034         JZ      ??ZDApp_event_loop_0
    366            {
    367              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
   \                     ??ZDApp_event_loop_1:
   \   000017                ; Setup parameters for call to function osal_msg_receive
   \   000017   90....       MOV     DPTR,#ZDAppTaskID
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   ??osal_msg_receive?relay; Banked call to: osal_msg_receive
   \   00001F   8A..         MOV     ?V4,R2
   \   000021   8B..         MOV     ?V5,R3
   \   000023   A8..         MOV     R0,?V4
   \   000025   A9..         MOV     R1,?V5
   \   000027   88..         MOV     ?V2,R0
   \   000029   89..         MOV     ?V3,R1
   \   00002B   E8           MOV     A,R0
   \   00002C   49           ORL     A,R1
   \   00002D   6011         JZ      ??ZDApp_event_loop_2
    368              {
    369                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
   \   00002F                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   00002F   AA..         MOV     R2,?V2
   \   000031   AB..         MOV     R3,?V3
   \   000033   12....       LCALL   ??ZDApp_ProcessOSALMsg?relay; Banked call to: ZDApp_ProcessOSALMsg
    370          
    371                // Release the memory
    372                osal_msg_deallocate( msg_ptr );
   \   000036                ; Setup parameters for call to function osal_msg_deallocate
   \   000036   AA..         MOV     R2,?V2
   \   000038   AB..         MOV     R3,?V3
   \   00003A   12....       LCALL   ??osal_msg_deallocate?relay; Banked call to: osal_msg_deallocate
   \   00003D   E9           MOV     A,R1
   \   00003E   80D7         SJMP    ??ZDApp_event_loop_1
    373              }
    374          
    375              // Return unprocessed events
    376              return (events ^ SYS_EVENT_MSG);
   \                     ??ZDApp_event_loop_2:
   \   000040   EE           MOV     A,R6
   \   000041   6400         XRL     A,#0x0
   \   000043   FA           MOV     R2,A
   \   000044   EF           MOV     A,R7
   \   000045   6480         XRL     A,#0x80
   \   000047   FB           MOV     R3,A
   \   000048   02....       LJMP    ??ZDApp_event_loop_3 & 0xFFFF
    377            }
    378          
    379            if ( events & ZDO_NETWORK_INIT )
   \                     ??ZDApp_event_loop_0:
   \   00004B   EE           MOV     A,R6
   \   00004C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00004E   5024         JNC     ??ZDApp_event_loop_4
    380            {
    381              // Initialize apps and start the network
    382              devState = DEV_INIT;
   \   000050   90....       MOV     DPTR,#devState
   \   000053   7401         MOV     A,#0x1
   \   000055   F0           MOVX    @DPTR,A
    383              
    384              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    385                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   000056                ; Setup parameters for call to function ZDO_StartDevice
   \   000056   7C0F         MOV     R4,#0xf
   \   000058   7B0F         MOV     R3,#0xf
   \   00005A   90....       MOV     DPTR,#devStartMode
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   FA           MOV     R2,A
   \   00005F   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000062   E0           MOVX    A,@DPTR
   \   000063   5407         ANL     A,#0x7
   \   000065   F9           MOV     R1,A
   \   000066   12....       LCALL   ??ZDO_StartDevice?relay; Banked call to: ZDO_StartDevice
    386          
    387              // Return unprocessed events
    388              return (events ^ ZDO_NETWORK_INIT);
   \   000069   EE           MOV     A,R6
   \   00006A   6401         XRL     A,#0x1
   \   00006C   FA           MOV     R2,A
   \   00006D   EF           MOV     A,R7
   \   00006E   6400         XRL     A,#0x0
   \   000070   FB           MOV     R3,A
   \   000071   02....       LJMP    ??ZDApp_event_loop_3 & 0xFFFF
    389            }
    390          
    391            if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDApp_event_loop_4:
   \   000074   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000077   E0           MOVX    A,@DPTR
   \   000078   6008         JZ      ??ZDApp_event_loop_5
   \   00007A   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   6401         XRL     A,#0x1
   \   000080   7048         JNZ     ??ZDApp_event_loop_6
    392            {
    393              if ( events & ZDO_NETWORK_START )
   \                     ??ZDApp_event_loop_5:
   \   000082   EE           MOV     A,R6
   \   000083   5402         ANL     A,#0x2
   \   000085   600E         JZ      ??ZDApp_event_loop_7
    394              {
    395                ZDApp_NetworkStartEvt();
   \   000087                ; Setup parameters for call to function ZDApp_NetworkStartEvt
   \   000087   12....       LCALL   ??ZDApp_NetworkStartEvt?relay; Banked call to: ZDApp_NetworkStartEvt
    396            
    397                // Return unprocessed events
    398                return (events ^ ZDO_NETWORK_START);
   \   00008A   EE           MOV     A,R6
   \   00008B   6402         XRL     A,#0x2
   \   00008D   FA           MOV     R2,A
   \   00008E   EF           MOV     A,R7
   \   00008F   6400         XRL     A,#0x0
   \   000091   FB           MOV     R3,A
   \   000092   02....       LJMP    ??ZDApp_event_loop_3 & 0xFFFF
    399              }
    400          
    401              if ( events & ZDO_ROUTER_START )
   \                     ??ZDApp_event_loop_7:
   \   000095   EE           MOV     A,R6
   \   000096   5420         ANL     A,#0x20
   \   000098   6030         JZ      ??ZDApp_event_loop_6
    402              {
    403                if ( nwkStatus == ZSuccess )
   \   00009A   90....       MOV     DPTR,#nwkStatus
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   7013         JNZ     ??ZDApp_event_loop_8
    404                {
    405                  if ( devState == DEV_END_DEVICE )
   \   0000A0   90....       MOV     DPTR,#devState
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   6406         XRL     A,#0x6
   \   0000A6   7006         JNZ     ??ZDApp_event_loop_9
    406                    devState = DEV_ROUTER;
   \   0000A8   90....       MOV     DPTR,#devState
   \   0000AB   7407         MOV     A,#0x7
   \   0000AD   F0           MOVX    @DPTR,A
    407            
    408                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_event_loop_9:
   \   0000AE                ; Setup parameters for call to function osal_pwrmgr_device
   \   0000AE   7900         MOV     R1,#0x0
   \   0000B0   12....       LCALL   ??osal_pwrmgr_device?relay; Banked call to: osal_pwrmgr_device
    409                }
    410                else
    411                {
    412                  // remain as end device!!
    413                }
    414                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_event_loop_8:
   \   0000B3                ; Setup parameters for call to function osal_set_event
   \   0000B3   7A10         MOV     R2,#0x10
   \   0000B5   7B00         MOV     R3,#0x0
   \   0000B7   90....       MOV     DPTR,#ZDAppTaskID
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   F9           MOV     R1,A
   \   0000BC   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   0000BF   E9           MOV     A,R1
    415            
    416                // Return unprocessed events
    417                return (events ^ ZDO_ROUTER_START);
   \   0000C0   EE           MOV     A,R6
   \   0000C1   6420         XRL     A,#0x20
   \   0000C3   FA           MOV     R2,A
   \   0000C4   EF           MOV     A,R7
   \   0000C5   6400         XRL     A,#0x0
   \   0000C7   FB           MOV     R3,A
   \   0000C8   8064         SJMP    ??ZDApp_event_loop_3
    418              }
    419            }
    420            
    421            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_6:
   \   0000CA   EE           MOV     A,R6
   \   0000CB   5410         ANL     A,#0x10
   \   0000CD   602B         JZ      ??ZDApp_event_loop_10
    422            {
    423              ZDO_UpdateNwkStatus( devState );
   \   0000CF                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   0000CF   90....       MOV     DPTR,#devState
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F9           MOV     R1,A
   \   0000D4   12....       LCALL   ??ZDO_UpdateNwkStatus?relay; Banked call to: ZDO_UpdateNwkStatus
    424              
    425              // At start up, do one MTO route discovery if the device is a concentrator
    426              if ( zgConcentratorEnable == TRUE ) 
   \   0000D7   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   6401         XRL     A,#0x1
   \   0000DD   7011         JNZ     ??ZDApp_event_loop_11
    427              {
    428                // Start next event
    429                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   0000DF                ; Setup parameters for call to function osal_start_timerEx
   \   0000DF   7C64         MOV     R4,#0x64
   \   0000E1   7D00         MOV     R5,#0x0
   \   0000E3   7A00         MOV     R2,#0x0
   \   0000E5   7B08         MOV     R3,#0x8
   \   0000E7   90....       MOV     DPTR,#NWK_TaskID
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   F9           MOV     R1,A
   \   0000EC   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   0000EF   E9           MOV     A,R1
    430              }
    431              
    432              // Return unprocessed events
    433              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_11:
   \   0000F0   EE           MOV     A,R6
   \   0000F1   6410         XRL     A,#0x10
   \   0000F3   FA           MOV     R2,A
   \   0000F4   EF           MOV     A,R7
   \   0000F5   6400         XRL     A,#0x0
   \   0000F7   FB           MOV     R3,A
   \   0000F8   8034         SJMP    ??ZDApp_event_loop_3
    434            }
    435          
    436            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_10:
   \   0000FA   EE           MOV     A,R6
   \   0000FB   5408         ANL     A,#0x8
   \   0000FD   600A         JZ      ??ZDApp_event_loop_12
    437            {
    438              // User defined logic
    439          
    440              // Return unprocessed events
    441              return (events ^ ZDO_COMMAND_CNF);
   \   0000FF   EE           MOV     A,R6
   \   000100   6408         XRL     A,#0x8
   \   000102   FA           MOV     R2,A
   \   000103   EF           MOV     A,R7
   \   000104   6400         XRL     A,#0x0
   \   000106   FB           MOV     R3,A
   \   000107   8025         SJMP    ??ZDApp_event_loop_3
    442            }
    443            
    444            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_12:
   \   000109   EE           MOV     A,R6
   \   00010A   5400         ANL     A,#0x0
   \   00010C   F8           MOV     R0,A
   \   00010D   EF           MOV     A,R7
   \   00010E   5402         ANL     A,#0x2
   \   000110   F9           MOV     R1,A
   \   000111   E8           MOV     A,R0
   \   000112   49           ORL     A,R1
   \   000113   600D         JZ      ??ZDApp_event_loop_13
    445            {
    446              ZDApp_SaveNetworkStateEvt();
   \   000115                ; Setup parameters for call to function ZDApp_SaveNetworkStateEvt
   \   000115   12....       LCALL   ??ZDApp_SaveNetworkStateEvt?relay; Banked call to: ZDApp_SaveNetworkStateEvt
    447          
    448              // Return unprocessed events
    449              return (events ^ ZDO_NWK_UPDATE_NV);
   \   000118   EE           MOV     A,R6
   \   000119   6400         XRL     A,#0x0
   \   00011B   FA           MOV     R2,A
   \   00011C   EF           MOV     A,R7
   \   00011D   6402         XRL     A,#0x2
   \   00011F   FB           MOV     R3,A
   \   000120   800C         SJMP    ??ZDApp_event_loop_3
    450            }
    451          
    452            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_13:
   \   000122   EE           MOV     A,R6
   \   000123   5404         ANL     A,#0x4
   \   000125   6003         JZ      ??ZDApp_event_loop_14
    453            {
    454              // The device has been in the UNAUTH state, so reset
    455              // Note: there will be no return from this call
    456              SystemResetSoft();
   \   000127                ; Setup parameters for call to function Onboard_soft_reset
   \   000127   12....       LCALL   Onboard_soft_reset & 0xFFFF
    457            }
    458          
    459            if ( ZG_SECURE_ENABLED )
    460            {
    461              return ( ZDApp_ProcessSecEvent( task_id, events ) );
    462            }
    463            else
    464            {
    465              // Discard or make more handlers
    466              return 0;
   \                     ??ZDApp_event_loop_14:
   \   00012A   7A00         MOV     R2,#0x0
   \   00012C   7B00         MOV     R3,#0x0
   \                     ??ZDApp_event_loop_3:
   \   00012E   7F06         MOV     R7,#0x6
   \   000130   02....       LJMP    ?BANKED_LEAVE_XDATA
    467            }
    468          }
    469          
    470          /*********************************************************************
    471           * @fn      ZDApp_ProcessSecEvent()
    472           *
    473           * @brief   Process incoming security events.
    474           *
    475           * @param   task_id - Task ID
    476           * @param   events  - Bitmap of events
    477           *
    478           * @return  none
    479           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    480          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    481          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    482            (void)task_id;  // Intentionally unreferenced parameter
    483            
    484            if ( ZSTACK_ROUTER_BUILD )
   \   00000B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   6008         JZ      ??ZDApp_ProcessSecEvent_0
   \   000011   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6401         XRL     A,#0x1
   \   000017   7028         JNZ     ??ZDApp_ProcessSecEvent_1
    485            {
    486              if ( events & ZDO_NEW_DEVICE )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000019   EE           MOV     A,R6
   \   00001A   5440         ANL     A,#0x40
   \   00001C   6023         JZ      ??ZDApp_ProcessSecEvent_1
    487              {
    488                // process the new device event
    489                if ( ZDSecMgrNewDeviceEvent() == TRUE )
   \   00001E                ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
   \   00001E   12....       LCALL   ??ZDSecMgrNewDeviceEvent?relay; Banked call to: ZDSecMgrNewDeviceEvent
   \   000021   E9           MOV     A,R1
   \   000022   6401         XRL     A,#0x1
   \   000024   7011         JNZ     ??ZDApp_ProcessSecEvent_2
    490                {
    491                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 1000 );
   \   000026                ; Setup parameters for call to function osal_start_timerEx
   \   000026   7CE8         MOV     R4,#-0x18
   \   000028   7D03         MOV     R5,#0x3
   \   00002A   7A40         MOV     R2,#0x40
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   90....       MOV     DPTR,#ZDAppTaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   000036   E9           MOV     A,R1
    492                }
    493          
    494                // Return unprocessed events
    495                return (events ^ ZDO_NEW_DEVICE);
   \                     ??ZDApp_ProcessSecEvent_2:
   \   000037   EE           MOV     A,R6
   \   000038   6440         XRL     A,#0x40
   \   00003A   FA           MOV     R2,A
   \   00003B   EF           MOV     A,R7
   \   00003C   6400         XRL     A,#0x0
   \   00003E   FB           MOV     R3,A
   \   00003F   807E         SJMP    ??ZDApp_ProcessSecEvent_3
    496              }
    497            }
    498          
    499            if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH) 
    500                || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
    501            {
    502              if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    503              { 
    504                if ( events & ZDO_SECMGR_EVENT )
    505                {
    506                  ZDSecMgrEvent();
    507          
    508                  // Return unprocessed events
    509                  return (events ^ ZDO_SECMGR_EVENT);
    510                }
    511              }
    512            }
    513            
    514            if ( events & ZDO_DEVICE_AUTH )
   \                     ??ZDApp_ProcessSecEvent_1:
   \   000041   EE           MOV     A,R6
   \   000042   5480         ANL     A,#0x80
   \   000044   600D         JZ      ??ZDApp_ProcessSecEvent_4
    515            {
    516              ZDApp_DeviceAuthEvt();
   \   000046                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   000046   12....       LCALL   ??ZDApp_DeviceAuthEvt?relay; Banked call to: ZDApp_DeviceAuthEvt
    517          
    518              // Return unprocessed events
    519              return (events ^ ZDO_DEVICE_AUTH);
   \   000049   EE           MOV     A,R6
   \   00004A   6480         XRL     A,#0x80
   \   00004C   FA           MOV     R2,A
   \   00004D   EF           MOV     A,R7
   \   00004E   6400         XRL     A,#0x0
   \   000050   FB           MOV     R3,A
   \   000051   806C         SJMP    ??ZDApp_ProcessSecEvent_3
    520            }
    521          
    522            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_4:
   \   000053   EE           MOV     A,R6
   \   000054   5400         ANL     A,#0x0
   \   000056   F8           MOV     R0,A
   \   000057   EF           MOV     A,R7
   \   000058   5404         ANL     A,#0x4
   \   00005A   F9           MOV     R1,A
   \   00005B   E8           MOV     A,R0
   \   00005C   49           ORL     A,R1
   \   00005D   602D         JZ      ??ZDApp_ProcessSecEvent_5
    523            {
    524              if ( nwkFrameCounterChanges++ > MAX_NWK_FRAMECOUNTER_CHANGES )
   \   00005F   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F8           MOV     R0,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F9           MOV     R1,A
   \   000067   E8           MOV     A,R0
   \   000068   2401         ADD     A,#0x1
   \   00006A   FA           MOV     R2,A
   \   00006B   E4           CLR     A
   \   00006C   39           ADDC    A,R1
   \   00006D   FB           MOV     R3,A
   \   00006E   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000071   EA           MOV     A,R2
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   EB           MOV     A,R3
   \   000075   F0           MOVX    @DPTR,A
   \   000076   C3           CLR     C
   \   000077   E8           MOV     A,R0
   \   000078   94E9         SUBB    A,#-0x17
   \   00007A   E9           MOV     A,R1
   \   00007B   9403         SUBB    A,#0x3
   \   00007D   4003         JC      ??ZDApp_ProcessSecEvent_6
    525              {
    526                ZDApp_SaveNwkKey();
   \   00007F                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   00007F   12....       LCALL   ??ZDApp_SaveNwkKey?relay; Banked call to: ZDApp_SaveNwkKey
    527              }
    528          
    529              // Return unprocessed events
    530              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \                     ??ZDApp_ProcessSecEvent_6:
   \   000082   EE           MOV     A,R6
   \   000083   6400         XRL     A,#0x0
   \   000085   FA           MOV     R2,A
   \   000086   EF           MOV     A,R7
   \   000087   6404         XRL     A,#0x4
   \   000089   FB           MOV     R3,A
   \   00008A   8033         SJMP    ??ZDApp_ProcessSecEvent_3
    531            }
    532          
    533            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_5:
   \   00008C   EE           MOV     A,R6
   \   00008D   5400         ANL     A,#0x0
   \   00008F   F8           MOV     R0,A
   \   000090   EF           MOV     A,R7
   \   000091   5410         ANL     A,#0x10
   \   000093   F9           MOV     R1,A
   \   000094   E8           MOV     A,R0
   \   000095   49           ORL     A,R1
   \   000096   600A         JZ      ??ZDApp_ProcessSecEvent_7
    534            {
    535          #if defined (NV_RESTORE)
    536              ZDSecMgrSaveApsLinkKey();
    537          #endif // (NV_RESTORE)
    538              
    539              // Return unprocessed events
    540              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   000098   EE           MOV     A,R6
   \   000099   6400         XRL     A,#0x0
   \   00009B   FA           MOV     R2,A
   \   00009C   EF           MOV     A,R7
   \   00009D   6410         XRL     A,#0x10
   \   00009F   FB           MOV     R3,A
   \   0000A0   801D         SJMP    ??ZDApp_ProcessSecEvent_3
    541            }
    542          
    543            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_7:
   \   0000A2   EE           MOV     A,R6
   \   0000A3   5400         ANL     A,#0x0
   \   0000A5   F8           MOV     R0,A
   \   0000A6   EF           MOV     A,R7
   \   0000A7   5408         ANL     A,#0x8
   \   0000A9   F9           MOV     R1,A
   \   0000AA   E8           MOV     A,R0
   \   0000AB   49           ORL     A,R1
   \   0000AC   600D         JZ      ??ZDApp_ProcessSecEvent_8
    544            {
    545              ZDSecMgrSaveTCLinkKey();
   \   0000AE                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   0000AE   12....       LCALL   ??ZDSecMgrSaveTCLinkKey?relay; Banked call to: ZDSecMgrSaveTCLinkKey
    546              
    547              // Return unprocessed events
    548              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   0000B1   EE           MOV     A,R6
   \   0000B2   6400         XRL     A,#0x0
   \   0000B4   FA           MOV     R2,A
   \   0000B5   EF           MOV     A,R7
   \   0000B6   6408         XRL     A,#0x8
   \   0000B8   FB           MOV     R3,A
   \   0000B9   8004         SJMP    ??ZDApp_ProcessSecEvent_3
    549            }
    550            
    551            // Discard or make more handlers
    552            return 0;
   \                     ??ZDApp_ProcessSecEvent_8:
   \   0000BB   7A00         MOV     R2,#0x0
   \   0000BD   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_3:
   \   0000BF   7F01         MOV     R7,#0x1
   \   0000C1   02....       LJMP    ?BANKED_LEAVE_XDATA
    553          }
    554          
    555          /*********************************************************************
    556           * Application Functions
    557           */
    558          
    559          /*********************************************************************
    560           * @fn      ZDOInitDevice
    561           *
    562           * @brief   Start the device in the network.  This function will read
    563           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    564           *   restore the network state of the device.
    565           *
    566           * @param   startDelay - timeDelay to start device (in milliseconds).
    567           *                       There is a jitter added to this delay:
    568           *                       ((NWK_START_DELAY + startDelay)
    569           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    570           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    571           *                       this function will hold the network init. Application
    572           *                       can start the device.
    573           *
    574           * NOTE:    If the application would like to force a "new" join, the
    575           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    576           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    577           *          this function. "new" join means to not restore the network
    578           *          state of the device. Use zgWriteStartupOptions() to set these
    579           *          options.
    580           *
    581           * @return
    582           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    583           *          restored.
    584           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    585           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    586           *          it could mean that there was no network state to restore.
    587           *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
    588           *          with the rejoin option set to TRUE.  So, the device was not
    589           *          started in the network (one time only).  The next time this
    590           *          function is called it will start.
    591           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    592          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    593          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
    594            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000015   75..01       MOV     ?V0,#0x1
    595            uint16 extendedDelay = 0;
   \   000018   7E00         MOV     R6,#0x0
   \   00001A   7F00         MOV     R7,#0x0
    596          
    597            if ( devState == DEV_HOLD )
   \   00001C   90....       MOV     DPTR,#devState
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   7005         JNZ     ??ZDOInitDevice_0
    598            {    
    599              // Initialize the RAM items table, in case an NV item has been updated.
    600              zgInitItems( FALSE );
   \   000022                ; Setup parameters for call to function zgInitItems
   \   000022   7900         MOV     R1,#0x0
   \   000024   12....       LCALL   ??zgInitItems?relay  ; Banked call to: zgInitItems
    601            }
    602          
    603            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   000027                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000027   12....       LCALL   ??ZDConfig_InitDescriptors?relay; Banked call to: ZDConfig_InitDescriptors
    604            //devtag.071807.todo - fix this temporary solution
    605            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00002A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   90....       MOV     DPTR,#_NIB + 14
   \   000031   F0           MOVX    @DPTR,A
    606            
    607          #if defined ( NV_RESTORE )
    608            // Get Keypad directly to see if a reset nv is needed.
    609            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    610            // while booting to skip past NV Restore.
    611            if ( HalKeyRead() == SW_BYPASS_NV )
    612              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    613            else
    614            {
    615              // Determine if NV should be restored
    616              networkStateNV = ZDApp_ReadNetworkRestoreState();
    617            }
    618          
    619            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    620            {
    621              networkStateNV = ZDApp_RestoreNetworkState();
    622            }
    623            else
    624            {
    625              // Wipe out the network state in NV
    626              NLME_InitNV();
    627              NLME_SetDefaultNV();
    628              // clear NWK key values
    629              ZDSecMgrClearNVKeyValues();
    630            }
    631          #endif
    632          
    633            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
   \   000032   7401         MOV     A,#0x1
   \   000034   65..         XRL     A,?V0
   \   000036   702E         JNZ     ??ZDOInitDevice_1
    634            {
    635              ZDAppDetermineDeviceType();
   \   000038                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   000038   12....       LCALL   ??ZDAppDetermineDeviceType?relay; Banked call to: ZDAppDetermineDeviceType
    636          
    637              // Only delay if joining network - not restoring network state
    638              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    639                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   00003B                ; Setup parameters for call to function osal_rand
   \   00003B   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   00003E   8A..         MOV     ?V2,R2
   \   000040   8B..         MOV     ?V3,R3
   \   000042   A8..         MOV     R0,?V2
   \   000044   A9..         MOV     R1,?V3
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   E8           MOV     A,R0
   \   00004D   547F         ANL     A,#0x7f
   \   00004F   F8           MOV     R0,A
   \   000050   E9           MOV     A,R1
   \   000051   5400         ANL     A,#0x0
   \   000053   F9           MOV     R1,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   28           ADD     A,R0
   \   000056   F8           MOV     R0,A
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   39           ADDC    A,R1
   \   00005A   F9           MOV     R1,A
   \   00005B   E8           MOV     A,R0
   \   00005C   2464         ADD     A,#0x64
   \   00005E   F8           MOV     R0,A
   \   00005F   5001         JNC     ??ZDOInitDevice_2
   \   000061   09           INC     R1
   \                     ??ZDOInitDevice_2:
   \   000062   E8           MOV     A,R0
   \   000063   FE           MOV     R6,A
   \   000064   E9           MOV     A,R1
   \   000065   FF           MOV     R7,A
    640            }
    641          
    642            // Initialize the security for type of device
    643            ZDApp_SecInit( networkStateNV );
   \                     ??ZDOInitDevice_1:
   \   000066                ; Setup parameters for call to function ZDApp_SecInit
   \   000066   A9..         MOV     R1,?V0
   \   000068   12....       LCALL   ??ZDApp_SecInit?relay; Banked call to: ZDApp_SecInit
    644            
    645            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   00006B   85..82       MOV     DPL,?XSP + 0
   \   00006E   85..83       MOV     DPH,?XSP + 1
   \   000071   E0           MOVX    A,@DPTR
   \   000072   64FF         XRL     A,#0xff
   \   000074   7004         JNZ     ??ZDOInitDevice_3
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   64FF         XRL     A,#0xff
   \                     ??ZDOInitDevice_3:
   \   00007A   603A         JZ      ??ZDOInitDevice_4
    646            {
    647              devState = DEV_INIT;    // Remove the Hold state
   \   00007C   90....       MOV     DPTR,#devState
   \   00007F   7401         MOV     A,#0x1
   \   000081   F0           MOVX    @DPTR,A
    648              
    649              // Initialize leave control logic
    650              ZDApp_LeaveCtrlInit();
   \   000082                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   000082   12....       LCALL   ??ZDApp_LeaveCtrlInit?relay; Banked call to: ZDApp_LeaveCtrlInit
    651              
    652              // Check leave control reset settings
    653              ZDApp_LeaveCtrlStartup( &devState, &startDelay );
   \   000085                ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
   \   000085   AC..         MOV     R4,?XSP + 0
   \   000087   AD..         MOV     R5,?XSP + 1
   \   000089   7A..         MOV     R2,#devState & 0xff
   \   00008B   7B..         MOV     R3,#(devState >> 8) & 0xff
   \   00008D   12....       LCALL   ??ZDApp_LeaveCtrlStartup?relay; Banked call to: ZDApp_LeaveCtrlStartup
    654              
    655              // Leave may make the hold state come back
    656              if ( devState == DEV_HOLD )
   \   000090   90....       MOV     DPTR,#devState
   \   000093   E0           MOVX    A,@DPTR
   \   000094   7019         JNZ     ??ZDOInitDevice_5
    657              {
    658                // Set the NV startup option to force a "new" join.
    659                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000096                ; Setup parameters for call to function zgWriteStartupOptions
   \   000096   7A02         MOV     R2,#0x2
   \   000098   79FF         MOV     R1,#-0x1
   \   00009A   12....       LCALL   ??zgWriteStartupOptions?relay; Banked call to: zgWriteStartupOptions
   \   00009D   E9           MOV     A,R1
    660                
    661                // Notify the applications 
    662                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00009E                ; Setup parameters for call to function osal_set_event
   \   00009E   7A10         MOV     R2,#0x10
   \   0000A0   7B00         MOV     R3,#0x0
   \   0000A2   90....       MOV     DPTR,#ZDAppTaskID
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   F9           MOV     R1,A
   \   0000A7   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   0000AA   E9           MOV     A,R1
    663                
    664                return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
   \   0000AB   7902         MOV     R1,#0x2
   \   0000AD   8011         SJMP    ??ZDOInitDevice_6
    665              }
    666              
    667              // Trigger the network start
    668              ZDApp_NetworkInit( extendedDelay );
   \                     ??ZDOInitDevice_5:
   \   0000AF                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0000AF   EE           MOV     A,R6
   \   0000B0   FA           MOV     R2,A
   \   0000B1   EF           MOV     A,R7
   \   0000B2   FB           MOV     R3,A
   \   0000B3   12....       LCALL   ??ZDApp_NetworkInit?relay; Banked call to: ZDApp_NetworkInit
    669            }
    670          
    671            // set broadcast address mask to support broadcast filtering
    672            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDevice_4:
   \   0000B6                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   0000B6   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   F9           MOV     R1,A
   \   0000BB   12....       LCALL   ??NLME_SetBroadcastFilter?relay; Banked call to: NLME_SetBroadcastFilter
    673            
    674            return ( networkStateNV );
   \   0000BE   A9..         MOV     R1,?V0
   \                     ??ZDOInitDevice_6:
   \   0000C0   7402         MOV     A,#0x2
   \   0000C2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C5   7F04         MOV     R7,#0x4
   \   0000C7   02....       LJMP    ?BANKED_LEAVE_XDATA
    675          }
    676          
    677          /*********************************************************************
    678           * @fn      ZDApp_ReadNetworkRestoreState
    679           *
    680           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    681           *          or not to restore the network state.
    682           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    683           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    684           *
    685           * @param   none
    686           *
    687           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    688           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    689           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    690           *          ZCD_NV_STARTUP_OPTION
    691           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    692          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    693          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    694            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV     R6,#0x0
    695          
    696            // Look for the New Network State option.
    697            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   ??zgReadStartupOptions?relay; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV     A,R1
   \   00000B   F8           MOV     R0,A
   \   00000C   E8           MOV     A,R0
   \   00000D   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000F   5002         JNC     ??ZDApp_ReadNetworkRestoreState_0
    698            {
    699              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000011   7E01         MOV     R6,#0x1
    700            }
    701          
    702            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000013   EE           MOV     A,R6
   \   000014   F9           MOV     R1,A
   \   000015   7F01         MOV     R7,#0x1
   \   000017   02....       LJMP    ?BANKED_LEAVE_XDATA
    703          }
    704          
    705          /*********************************************************************
    706           * @fn      ZDAppDetermineDeviceType()
    707           *
    708           * @brief   Determines the type of device to start. 
    709           *
    710           *          Looks at zgDeviceLogicalType and determines what type of
    711           *          device to start.  The types are:
    712           *            ZG_DEVICETYPE_COORDINATOR
    713           *            ZG_DEVICETYPE_ROUTER
    714           *            ZG_DEVICETYPE_ENDDEVICE
    715           *
    716           * @param   none
    717           *
    718           * @return  none
    719           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    720          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    721          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    722            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700F         JNZ     ??ZDAppDetermineDeviceType_0
    723            {
    724              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV     DPTR,#devStartMode
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    725              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX    A,@DPTR
   \   000014   54F8         ANL     A,#0xf8
   \   000016   F0           MOVX    @DPTR,A
   \   000017   8042         SJMP    ??ZDAppDetermineDeviceType_1
    726            }
    727            else
    728            {
    729              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000019   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   700E         JNZ     ??ZDAppDetermineDeviceType_2
    730                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   000021   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000024   E0           MOVX    A,@DPTR
   \   000025   54F8         ANL     A,#0xf8
   \   000027   4401         ORL     A,#0x1
   \   000029   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   8014         SJMP    ??ZDAppDetermineDeviceType_3
    731              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   00002F   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000032   E0           MOVX    A,@DPTR
   \   000033   6402         XRL     A,#0x2
   \   000035   700C         JNZ     ??ZDAppDetermineDeviceType_3
    732                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000037   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   54F8         ANL     A,#0xf8
   \   00003D   4402         ORL     A,#0x2
   \   00003F   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000042   F0           MOVX    @DPTR,A
    733              
    734              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    735              // The device shall do rejoin the network. Otherwise, do normal join
    736              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_3:
   \   000043                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000043   7A..         MOV     R2,#AIB_apsUseExtendedPANID & 0xff
   \   000045   7B..         MOV     R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   000047   12....       LCALL   ??nwk_ExtPANIDValid?relay; Banked call to: nwk_ExtPANIDValid
   \   00004A   E9           MOV     A,R1
   \   00004B   7008         JNZ     ??ZDAppDetermineDeviceType_4
    737              {
    738                devStartMode = MODE_JOIN;     // Assume joining
   \   00004D   90....       MOV     DPTR,#devStartMode
   \   000050   7400         MOV     A,#0x0
   \   000052   F0           MOVX    @DPTR,A
   \   000053   8006         SJMP    ??ZDAppDetermineDeviceType_1
    739              }
    740              else
    741              {
    742                devStartMode = MODE_REJOIN;  
   \                     ??ZDAppDetermineDeviceType_4:
   \   000055   90....       MOV     DPTR,#devStartMode
   \   000058   7403         MOV     A,#0x3
   \   00005A   F0           MOVX    @DPTR,A
    743              }
    744            }
    745          }
   \                     ??ZDAppDetermineDeviceType_1:
   \   00005B   D083         POP     DPH
   \   00005D   D082         POP     DPL
   \   00005F   02....       LJMP    ?BRET
    746          
    747          /*********************************************************************
    748           * @fn      ZDApp_NetworkStartEvt()
    749           *
    750           * @brief   Process the Network Start Event
    751           *
    752           * @param   none
    753           *
    754           * @return  none
    755           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    756          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    757          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    758            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV     DPTR,#nwkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7022         JNZ     ??ZDApp_NetworkStartEvt_0
    759            {
    760              // Successfully started a ZigBee network
    761              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6408         XRL     A,#0x8
   \   000010   7006         JNZ     ??ZDApp_NetworkStartEvt_1
    762              {
    763                devState = DEV_ZB_COORD;
   \   000012   90....       MOV     DPTR,#devState
   \   000015   7409         MOV     A,#0x9
   \   000017   F0           MOVX    @DPTR,A
    764              }
    765          
    766              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000018                ; Setup parameters for call to function osal_pwrmgr_device
   \   000018   7900         MOV     R1,#0x0
   \   00001A   12....       LCALL   ??osal_pwrmgr_device?relay; Banked call to: osal_pwrmgr_device
    767              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00001D                ; Setup parameters for call to function osal_set_event
   \   00001D   7A10         MOV     R2,#0x10
   \   00001F   7B00         MOV     R3,#0x0
   \   000021   90....       MOV     DPTR,#ZDAppTaskID
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   000029   E9           MOV     A,R1
   \   00002A   804A         SJMP    ??ZDApp_NetworkStartEvt_2
    768            }
    769            else
    770            {
    771              // Try again with a higher energy threshold !!
    772              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00002C                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00002C   12....       LCALL   ??NLME_GetEnergyThreshold?relay; Banked call to: NLME_GetEnergyThreshold
   \   00002F   E9           MOV     A,R1
   \   000030   F8           MOV     R0,A
   \   000031   7900         MOV     R1,#0x0
   \   000033   E8           MOV     A,R0
   \   000034   2410         ADD     A,#0x10
   \   000036   F8           MOV     R0,A
   \   000037   5001         JNC     ??ZDApp_NetworkStartEvt_3
   \   000039   09           INC     R1
   \                     ??ZDApp_NetworkStartEvt_3:
   \   00003A   C3           CLR     C
   \   00003B   E8           MOV     A,R0
   \   00003C   94FF         SUBB    A,#-0x1
   \   00003E   E9           MOV     A,R1
   \   00003F   9400         SUBB    A,#0x0
   \   000041   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000043   65D0         XRL     A,PSW
   \   000045   33           RLC     A
   \   000046   501B         JNC     ??ZDApp_NetworkStartEvt_4
    773              {
    774                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000048                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000048   12....       LCALL   ??NLME_GetEnergyThreshold?relay; Banked call to: NLME_GetEnergyThreshold
   \   00004B   E9           MOV     A,R1
   \   00004C   F8           MOV     R0,A
   \   00004D                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   00004D   7410         MOV     A,#0x10
   \   00004F   28           ADD     A,R0
   \   000050   F9           MOV     R1,A
   \   000051   12....       LCALL   ??NLME_SetEnergyThreshold?relay; Banked call to: NLME_SetEnergyThreshold
    775                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   000054                ; Setup parameters for call to function osal_set_event
   \   000054   7A01         MOV     R2,#0x1
   \   000056   7B00         MOV     R3,#0x0
   \   000058   90....       MOV     DPTR,#ZDAppTaskID
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F9           MOV     R1,A
   \   00005D   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   000060   E9           MOV     A,R1
   \   000061   8013         SJMP    ??ZDApp_NetworkStartEvt_2
    776              }
    777              else
    778              {
    779                // Failed to start network. Enter a dormant state (until user intervenes)
    780                devState = DEV_INIT;
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000063   90....       MOV     DPTR,#devState
   \   000066   7401         MOV     A,#0x1
   \   000068   F0           MOVX    @DPTR,A
    781                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000069                ; Setup parameters for call to function osal_set_event
   \   000069   7A10         MOV     R2,#0x10
   \   00006B   7B00         MOV     R3,#0x0
   \   00006D   90....       MOV     DPTR,#ZDAppTaskID
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F9           MOV     R1,A
   \   000072   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   000075   E9           MOV     A,R1
    782              }
    783            }
    784          }
   \                     ??ZDApp_NetworkStartEvt_2:
   \   000076   D083         POP     DPH
   \   000078   D082         POP     DPL
   \   00007A   02....       LJMP    ?BRET
    785          
    786          /*********************************************************************
    787           * @fn      ZDApp_DeviceAuthEvt()
    788           *
    789           * @brief   Process the Device Authentic Event
    790           *
    791           * @param   none
    792           *
    793           * @return  none
    794           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    795          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    796          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    797            // received authentication from trust center
    798            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   7056         JNZ     ??ZDApp_DeviceAuthEvt_0
    799            {
    800              // Stop the reset timer so it doesn't reset
    801              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL   ??ZDApp_ResetTimerCancel?relay; Banked call to: ZDApp_ResetTimerCancel
    802          
    803              devState = DEV_END_DEVICE;
   \   00000F   90....       MOV     DPTR,#devState
   \   000012   7406         MOV     A,#0x6
   \   000014   F0           MOVX    @DPTR,A
    804              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000015                ; Setup parameters for call to function osal_set_event
   \   000015   7A10         MOV     R2,#0x10
   \   000017   7B00         MOV     R3,#0x0
   \   000019   90....       MOV     DPTR,#ZDAppTaskID
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   000021   E9           MOV     A,R1
    805          
    806              // Set the Power Manager Device
    807          #if defined ( POWER_SAVING )
    808              osal_pwrmgr_device( PWRMGR_BATTERY );
    809          #endif
    810          
    811              if ( ZSTACK_ROUTER_BUILD )
   \   000022   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000025   E0           MOVX    A,@DPTR
   \   000026   6008         JZ      ??ZDApp_DeviceAuthEvt_1
   \   000028   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   6401         XRL     A,#0x1
   \   00002E   7014         JNZ     ??ZDApp_DeviceAuthEvt_2
    812              {
    813                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   000030   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000033   E0           MOVX    A,@DPTR
   \   000034   5407         ANL     A,#0x7
   \   000036   6402         XRL     A,#0x2
   \   000038   600A         JZ      ??ZDApp_DeviceAuthEvt_2
    814                {
    815                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    816                  NLME_StartRouterRequest( 0, 0, false );
   \   00003A                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00003A   7B00         MOV     R3,#0x0
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7900         MOV     R1,#0x0
   \   000040   12....       LCALL   ??NLME_StartRouterRequest?relay; Banked call to: NLME_StartRouterRequest
   \   000043   E9           MOV     A,R1
    817                }
    818              }
    819          
    820              // Notify to save info into NV
    821              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_2:
   \   000044                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000044   12....       LCALL   ??ZDApp_NVUpdate?relay; Banked call to: ZDApp_NVUpdate
    822          
    823              // Save off the security
    824              ZDApp_SaveNwkKey();
   \   000047                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000047   12....       LCALL   ??ZDApp_SaveNwkKey?relay; Banked call to: ZDApp_SaveNwkKey
    825          
    826              ZDApp_AnnounceNewAddress();
   \   00004A                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00004A   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay; Banked call to: ZDApp_AnnounceNewAddress
    827              
    828              if ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   \   00004D   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000050   E0           MOVX    A,@DPTR
   \   000051   A2E3         MOV     C,0xE0 /* A   */.3
   \   000053   4010         JC      ??ZDApp_DeviceAuthEvt_3
    829              {
    830                NLME_SetPollRate( ZDApp_SavedPollRate );
   \   000055                ; Setup parameters for call to function NLME_SetPollRate
   \   000055   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   000058   E0           MOVX    A,@DPTR
   \   000059   FA           MOV     R2,A
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FB           MOV     R3,A
   \   00005D   12....       LCALL   ??NLME_SetPollRate?relay; Banked call to: NLME_SetPollRate
   \   000060   8003         SJMP    ??ZDApp_DeviceAuthEvt_3
    831              }
    832            }
    833            else
    834            {
    835              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   000062                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000062   12....       LCALL   ??ZDApp_NVUpdate?relay; Banked call to: ZDApp_NVUpdate
    836            }
    837          }
   \                     ??ZDApp_DeviceAuthEvt_3:
   \   000065   D083         POP     DPH
   \   000067   D082         POP     DPL
   \   000069   02....       LJMP    ?BRET
    838          
    839          /*********************************************************************
    840           * @fn      ZDApp_SaveNetworkStateEvt()
    841           *
    842           * @brief   Process the Save the Network State Event
    843           *
    844           * @param   none
    845           *
    846           * @return  none
    847           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    848          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    849          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    850          #if defined ( NV_RESTORE )
    851           #if defined ( NV_TURN_OFF_RADIO )
    852            // Turn off the radio's receiver during an NV update
    853            uint8 RxOnIdle;
    854            uint8 x = false;
    855            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    856            ZMacSetReq( ZMacRxOnIdle, &x );
    857           #endif
    858          
    859            // Update the Network State in NV
    860            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    861                           NWK_NV_DEVICELIST_ENABLE |
    862                           NWK_NV_BINDING_ENABLE    |
    863                           NWK_NV_ADDRMGR_ENABLE );
    864          
    865            // Reset the NV startup option to resume from NV by
    866            // clearing the "New" join option.
    867            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
    868          
    869           #if defined ( NV_TURN_OFF_RADIO )
    870            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    871           #endif
    872          #endif  // NV_RESTORE
    873          }
   \   000000   02....       LJMP    ?BRET
    874          
    875          /*********************************************************************
    876           * @fn      ZDApp_RestoreNetworkState()
    877           *
    878           * @brief   This function will restore the network state of the
    879           *          device if the network state is stored in NV.
    880           *
    881           * @param   none
    882           *
    883           * @return
    884           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    885           *          restored.
    886           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
    887           *          This could mean that zgStartupOption said to not restore, or
    888           *          it could mean that there was no network state to restore.
    889           *
    890           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    891          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
    892          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    893            uint8 nvStat;
    894          
    895            // Initialize NWK NV items
    896            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL   ??NLME_InitNV?relay  ; Banked call to: NLME_InitNV
   \   000008   E9           MOV     A,R1
   \   000009   FE           MOV     R6,A
    897          
    898            if ( nvStat != NV_OPER_FAILED )
   \   00000A   740A         MOV     A,#0xa
   \   00000C   6E           XRL     A,R6
   \   00000D   6039         JZ      ??ZDApp_RestoreNetworkState_0
    899            {
    900              if ( NLME_RestoreFromNV() )
   \   00000F                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000F   12....       LCALL   ??NLME_RestoreFromNV?relay; Banked call to: NLME_RestoreFromNV
   \   000012   E9           MOV     A,R1
   \   000013   6031         JZ      ??ZDApp_RestoreNetworkState_1
    901              {
    902                // Are we a coordinator
    903                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   000018   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   F0           MOVX    @DPTR,A
    904                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \   000020   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F8           MOV     R0,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
   \   000028   E8           MOV     A,R0
   \   000029   49           ORL     A,R1
   \   00002A   7007         JNZ     ??ZDApp_RestoreNetworkState_2
    905                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   00002C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   54F8         ANL     A,#0xf8
   \   000032   F0           MOVX    @DPTR,A
    906                devStartMode = MODE_RESUME;
   \                     ??ZDApp_RestoreNetworkState_2:
   \   000033   90....       MOV     DPTR,#devStartMode
   \   000036   7401         MOV     A,#0x1
   \   000038   F0           MOVX    @DPTR,A
    907                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \   000039                ; Setup parameters for call to function sAddrExtCpy
   \   000039   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   00003B   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   00003D   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   00003F   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000041   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   000044   8002         SJMP    ??ZDApp_RestoreNetworkState_0
    908              }
    909              else
    910                nvStat = NV_ITEM_UNINIT;
   \                     ??ZDApp_RestoreNetworkState_1:
   \   000046   7E09         MOV     R6,#0x9
    911          
    912              if ( ZG_SECURE_ENABLED )
    913              {
    914                nwkFrameCounterChanges = 0;
    915          
    916                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    917                {
    918                  ZDApp_RestoreNwkKey();
    919                }
    920              }
    921          
    922              // The default for RxOnWhenIdle is true for Routers and false for end devices
    923              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
    924              // other than default.
    925            }
    926          
    927            if ( nvStat == ZSUCCESS )
   \                     ??ZDApp_RestoreNetworkState_0:
   \   000048   EE           MOV     A,R6
   \   000049   7004         JNZ     ??ZDApp_RestoreNetworkState_3
    928              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   00004B   7900         MOV     R1,#0x0
   \   00004D   8002         SJMP    ??ZDApp_RestoreNetworkState_4
    929            else
    930              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_3:
   \   00004F   7901         MOV     R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_4:
   \   000051   7F01         MOV     R7,#0x1
   \   000053   02....       LJMP    ?BANKED_LEAVE_XDATA
    931          }
    932          
    933          /*********************************************************************
    934           * @fn      ZDApp_InitUserDesc()
    935           *
    936           * @brief   Initialize the User Descriptor, the descriptor is read from NV
    937           *          when needed.  If you want to initialize the User descriptor to
    938           *          something other than all zero, do it here.
    939           *
    940           * @param   none
    941           *
    942           * @return  none
    943           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    944          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
    945          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    946            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
    947          
    948            // Initialize the User Descriptor, the descriptor is read from NV
    949            // when needed.  If you want to initialize the User descriptor to something
    950            // other than all zero, do it here.
    951            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV     R4,#0x11
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
    952            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
    953                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000017                ; Setup parameters for call to function osal_nv_item_init
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7C11         MOV     R4,#0x11
   \   000026   7D00         MOV     R5,#0x0
   \   000028   7A81         MOV     R2,#-0x7f
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   ??osal_nv_item_init?relay; Banked call to: osal_nv_item_init
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   E9           MOV     A,R1
   \   000035   703B         JNZ     ??ZDApp_InitUserDesc_0
    954            {
    955              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
    956                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   A8..         MOV     R0,?XSP + 0
   \   000039   A9..         MOV     R1,?XSP + 1
   \   00003B   88..         MOV     ?V0,R0
   \   00003D   89..         MOV     ?V1,R1
   \   00003F   78..         MOV     R0,#?V0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   75..11       MOV     ?V0,#0x11
   \   000047   75..00       MOV     ?V1,#0x0
   \   00004A   78..         MOV     R0,#?V0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   7C00         MOV     R4,#0x0
   \   000051   7D00         MOV     R5,#0x0
   \   000053   7A81         MOV     R2,#-0x7f
   \   000055   7B00         MOV     R3,#0x0
   \   000057   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   00005A   7404         MOV     A,#0x4
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005F   E9           MOV     A,R1
   \   000060   7010         JNZ     ??ZDApp_InitUserDesc_0
    957              {
    958                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   E0           MOVX    A,@DPTR
   \   000069   6007         JZ      ??ZDApp_InitUserDesc_0
    959                {
    960                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   00006B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   D2E4         SETB    0xE0 /* A   */.4
   \   000071   F0           MOVX    @DPTR,A
    961                }
    962              }
    963            }
    964          }
   \                     ??ZDApp_InitUserDesc_0:
   \   000072   7411         MOV     A,#0x11
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077   7F02         MOV     R7,#0x2
   \   000079   02....       LJMP    ?BANKED_LEAVE_XDATA
    965          
    966          /*********************************************************************
    967           * @fn      ZDAppCheckForHoldKey()
    968           *
    969           * @brief   Check for key to set the device into Hold Auto Start
    970           *
    971           * @param   none
    972           *
    973           * @return  none
    974           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    975          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
    976          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    977          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    978            // Get Keypad directly to see if a HOLD_START is needed.
    979            // Hold down the SW_BYPASS_START key (see OnBoard.h)
    980            // while booting to avoid starting up the device.
    981            if ( HalKeyRead () == SW_BYPASS_START)
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   ??HalKeyRead?relay   ; Banked call to: HalKeyRead
   \   000007   E9           MOV     A,R1
   \   000008   6401         XRL     A,#0x1
   \   00000A   7006         JNZ     ??ZDAppCheckForHoldKey_0
    982            {
    983              // Change the device state to HOLD on start up
    984              devState = DEV_HOLD;
   \   00000C   90....       MOV     DPTR,#devState
   \   00000F   7400         MOV     A,#0x0
   \   000011   F0           MOVX    @DPTR,A
    985            }
    986          #endif // HAL_KEY
    987          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   000012   D083         POP     DPH
   \   000014   D082         POP     DPL
   \   000016   02....       LJMP    ?BRET
    988          
    989          /*********************************************************************
    990           * @fn      ZDApp_ProcessOSALMsg()
    991           *
    992           * @brief   Process the incoming task message.
    993           *
    994           * @param   msgPtr - message to process
    995           *
    996           * @return  none
    997           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    998          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
    999          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1000            // Data Confirmation message fields
   1001            uint8 sentEP;       // This should always be 0
   1002            uint8 sentStatus;
   1003            afDataConfirm_t *afDataConfirm;
   1004            uint8 tmp;
   1005          
   1006            switch ( msgPtr->event )
   \   00000E   85..82       MOV     DPL,?V0
   \   000011   85..83       MOV     DPH,?V1
   \   000014   E0           MOVX    A,@DPTR
   \   000015   14           DEC     A
   \   000016   606B         JZ      ??ZDApp_ProcessOSALMsg_0
   \   000018   14           DEC     A
   \   000019   7003         JNZ     $+5
   \   00001B   02....       LJMP    ??ZDApp_ProcessOSALMsg_1 & 0xFFFF
   \   00001E   14           DEC     A
   \   00001F   7003         JNZ     $+5
   \   000021   02....       LJMP    ??ZDApp_ProcessOSALMsg_2 & 0xFFFF
   \   000024   24E9         ADD     A,#-0x17
   \   000026   600B         JZ      ??ZDApp_ProcessOSALMsg_3
   \   000028   2447         ADD     A,#0x47
   \   00002A   6011         JZ      ??ZDApp_ProcessOSALMsg_4
   \   00002C   24D6         ADD     A,#-0x2a
   \   00002E   6017         JZ      ??ZDApp_ProcessOSALMsg_5
   \   000030   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1007            {
   1008              // Incoming ZDO Message
   1009              case AF_INCOMING_MSG_CMD:
   1010                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   000033                ; Setup parameters for call to function ZDP_IncomingData
   \   000033   AA..         MOV     R2,?V0
   \   000035   AB..         MOV     R3,?V1
   \   000037   12....       LCALL   ??ZDP_IncomingData?relay; Banked call to: ZDP_IncomingData
   1011                break;
   \   00003A   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1012                
   1013              case ZDO_CB_MSG:
   1014                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   00003D                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   00003D   AA..         MOV     R2,?V0
   \   00003F   AB..         MOV     R3,?V1
   \   000041   12....       LCALL   ??ZDApp_ProcessMsgCBs?relay; Banked call to: ZDApp_ProcessMsgCBs
   1015                break;
   \   000044   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1016          
   1017              case AF_DATA_CONFIRM_CMD:
   1018                // This message is received as a confirmation of a data packet sent.
   1019                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1020                // The message fields are defined in AF.h
   1021                afDataConfirm = (afDataConfirm_t *)msgPtr;
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   000047   85....       MOV     ?V2,?V0
   \   00004A   85....       MOV     ?V3,?V1
   1022                sentEP = afDataConfirm->endpoint;
   \   00004D   85..82       MOV     DPL,?V2
   \   000050   85..83       MOV     DPH,?V3
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F5..         MOV     ?V7,A
   1023                sentStatus = afDataConfirm->hdr.status;
   \   000058   85..82       MOV     DPL,?V2
   \   00005B   85..83       MOV     DPH,?V3
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F5..         MOV     ?V6,A
   1024          
   1025                // Action taken when confirmation is received.
   1026          #if defined ( ZIGBEE_FREQ_AGILITY )
   1027                if ( pZDNwkMgr_ProcessDataConfirm )
   \   000062   90....       MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F8           MOV     R0,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F9           MOV     R1,A
   \   00006A   E8           MOV     A,R0
   \   00006B   49           ORL     A,R1
   \   00006C   6012         JZ      ??ZDApp_ProcessOSALMsg_7
   1028                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   \   00006E                ; Setup parameters for indirect call
   \   00006E   AA..         MOV     R2,?V2
   \   000070   AB..         MOV     R3,?V3
   \   000072   90....       MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F8           MOV     R0,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F583         MOV     DPH,A
   \   00007B   8882         MOV     DPL,R0
   \   00007D   12....       LCALL   ?CALL_IND
   1029          #endif
   1030                (void)sentEP;
   1031                (void)sentStatus;
   1032                break;
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   000080   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1033          
   1034              case ZDO_NWK_DISC_CNF:
   1035                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   000083   90....       MOV     DPTR,#devState
   \   000086   E0           MOVX    A,@DPTR
   \   000087   6402         XRL     A,#0x2
   \   000089   6003         JZ      $+5
   \   00008B   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1036                  break;
   1037                
   1038                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   00008E   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000091   E0           MOVX    A,@DPTR
   \   000092   6401         XRL     A,#0x1
   \   000094   600B         JZ      ??ZDApp_ProcessOSALMsg_8
   \   000096   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   6402         XRL     A,#0x2
   \   00009C   6003         JZ      $+5
   \   00009E   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1039                {
   1040                  // Process the network discovery scan results and choose a parent
   1041                  // device to join/rejoin itself
   1042                  networkDesc_t *pChosenNwk;                       
   1043                  if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   0000A1                ; Setup parameters for call to function ZDApp_NwkDescListProcessing
   \   0000A1   12....       LCALL   ??ZDApp_NwkDescListProcessing?relay; Banked call to: ZDApp_NwkDescListProcessing
   \   0000A4   8A..         MOV     ?V4,R2
   \   0000A6   8B..         MOV     ?V5,R3
   \   0000A8   A8..         MOV     R0,?V4
   \   0000AA   A9..         MOV     R1,?V5
   \   0000AC   E8           MOV     A,R0
   \   0000AD   FE           MOV     R6,A
   \   0000AE   E9           MOV     A,R1
   \   0000AF   FF           MOV     R7,A
   \   0000B0   E8           MOV     A,R0
   \   0000B1   49           ORL     A,R1
   \   0000B2   7003         JNZ     $+5
   \   0000B4   02....       LJMP    ??ZDApp_ProcessOSALMsg_9 & 0xFFFF
   \   0000B7   90....       MOV     DPTR,#zdoDiscCounter
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   C3           CLR     C
   \   0000BC   9403         SUBB    A,#0x3
   \   0000BE   5003         JNC     $+5
   \   0000C0   02....       LJMP    ??ZDApp_ProcessOSALMsg_9 & 0xFFFF
   1044                  {
   1045                    if ( devStartMode == MODE_JOIN )
   \   0000C3   90....       MOV     DPTR,#devStartMode
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   6003         JZ      $+5
   \   0000C9   02....       LJMP    ??ZDApp_ProcessOSALMsg_10 & 0xFFFF
   1046                    {            
   1047                      devState = DEV_NWK_JOINING;
   \   0000CC   90....       MOV     DPTR,#devState
   \   0000CF   7403         MOV     A,#0x3
   \   0000D1   F0           MOVX    @DPTR,A
   1048                      
   1049                      ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   \   0000D2                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   0000D2   8E82         MOV     DPL,R6
   \   0000D4   8F83         MOV     DPH,R7
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   F9           MOV     R1,A
   \   0000DE   12....       LCALL   ??ZDApp_NodeProfileSync?relay; Banked call to: ZDApp_NodeProfileSync
   1050                      
   1051                      if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1052                                            pChosenNwk->logicalChannel, 
   1053                                            ZDO_Config_Node_Descriptor.CapabilityFlags, 
   1054                                            pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
   \   0000E1                ; Setup parameters for call to function NLME_JoinRequest
   \   0000E1   8E82         MOV     DPL,R6
   \   0000E3   8F83         MOV     DPH,R7
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   F5..         MOV     ?V4,A
   \   0000F2   78..         MOV     R0,#?V4
   \   0000F4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F7   8E82         MOV     DPL,R6
   \   0000F9   8F83         MOV     DPH,R7
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000105   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000108   E0           MOVX    A,@DPTR
   \   000109   F5..         MOV     ?V4,A
   \   00010B   78..         MOV     R0,#?V4
   \   00010D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000110   8E82         MOV     DPL,R6
   \   000112   8F83         MOV     DPH,R7
   \   000114   A3           INC     DPTR
   \   000115   A3           INC     DPTR
   \   000116   E0           MOVX    A,@DPTR
   \   000117   F9           MOV     R1,A
   \   000118   8E82         MOV     DPL,R6
   \   00011A   8F83         MOV     DPH,R7
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   FC           MOV     R4,A
   \   00011E   A3           INC     DPTR
   \   00011F   E0           MOVX    A,@DPTR
   \   000120   FD           MOV     R5,A
   \   000121   EE           MOV     A,R6
   \   000122   240B         ADD     A,#0xb
   \   000124   FA           MOV     R2,A
   \   000125   E4           CLR     A
   \   000126   3F           ADDC    A,R7
   \   000127   FB           MOV     R3,A
   \   000128   12....       LCALL   ??NLME_JoinRequest?relay; Banked call to: NLME_JoinRequest
   \   00012B   7404         MOV     A,#0x4
   \   00012D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000130   E9           MOV     A,R1
   \   000131   7003         JNZ     $+5
   \   000133   02....       LJMP    ??ZDApp_ProcessOSALMsg_11 & 0xFFFF
   1055                      {
   1056                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1057                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   000136                ; Setup parameters for call to function osal_rand
   \   000136   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   000139   8A..         MOV     ?V4,R2
   \   00013B   8B..         MOV     ?V5,R3
   \   00013D   A8..         MOV     R0,?V4
   \   00013F   A9..         MOV     R1,?V5
   \   000141                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000141   E8           MOV     A,R0
   \   000142   547F         ANL     A,#0x7f
   \   000144   F8           MOV     R0,A
   \   000145   E9           MOV     A,R1
   \   000146   5400         ANL     A,#0x0
   \   000148   F9           MOV     R1,A
   \   000149   E8           MOV     A,R0
   \   00014A   2464         ADD     A,#0x64
   \   00014C   FA           MOV     R2,A
   \   00014D   E4           CLR     A
   \   00014E   39           ADDC    A,R1
   \   00014F   FB           MOV     R3,A
   \   000150   12....       LCALL   ??ZDApp_NetworkInit?relay; Banked call to: ZDApp_NetworkInit
   \   000153   02....       LJMP    ??ZDApp_ProcessOSALMsg_11 & 0xFFFF
   1058                      }             
   1059                    } // if ( devStartMode == MODE_JOIN )
   1060                    else if ( devStartMode == MODE_REJOIN )
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   000156   90....       MOV     DPTR,#devStartMode
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   6403         XRL     A,#0x3
   \   00015C   6003         JZ      $+5
   \   00015E   02....       LJMP    ??ZDApp_ProcessOSALMsg_11 & 0xFFFF
   1061                    {
   1062                      devState = DEV_NWK_REJOIN;
   \   000161   90....       MOV     DPTR,#devState
   \   000164   7404         MOV     A,#0x4
   \   000166   F0           MOVX    @DPTR,A
   1063                      
   1064                      // Before trying to do rejoin, check if the device has a valid short address
   1065                      // If not, generate a random short address for itself
   1066                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   000167   90....       MOV     DPTR,#_NIB + 20
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   64FE         XRL     A,#0xfe
   \   00016D   7004         JNZ     ??ZDApp_ProcessOSALMsg_12
   \   00016F   A3           INC     DPTR
   \   000170   E0           MOVX    A,@DPTR
   \   000171   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   000173   7015         JNZ     ??ZDApp_ProcessOSALMsg_13
   1067                      {
   1068                        _NIB.nwkDevAddress = osal_rand();
   \   000175                ; Setup parameters for call to function osal_rand
   \   000175   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   000178   90....       MOV     DPTR,#_NIB + 20
   \   00017B   EA           MOV     A,R2
   \   00017C   F0           MOVX    @DPTR,A
   \   00017D   A3           INC     DPTR
   \   00017E   EB           MOV     A,R3
   \   00017F   F0           MOVX    @DPTR,A
   1069                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   \   000180                ; Setup parameters for call to function ZMacSetReq
   \   000180   7A..         MOV     R2,#(_NIB + 20) & 0xff
   \   000182   7B..         MOV     R3,#((_NIB + 20) >> 8) & 0xff
   \   000184   7953         MOV     R1,#0x53
   \   000186   12....       LCALL   ??ZMacSetReq?relay   ; Banked call to: ZMacSetReq
   \   000189   E9           MOV     A,R1
   1070                      }
   1071                      
   1072                      if ( ZG_SECURE_ENABLED )
   1073                      {
   1074                        ZDApp_RestoreNwkKey();
   1075                      }
   1076                      
   1077                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1078                      if ( _NIB.nwkPanId == INVALID_PAN_ID )
   \                     ??ZDApp_ProcessOSALMsg_13:
   \   00018A   90....       MOV     DPTR,#_NIB + 33
   \   00018D   E0           MOVX    A,@DPTR
   \   00018E   64FE         XRL     A,#0xfe
   \   000190   7004         JNZ     ??ZDApp_ProcessOSALMsg_14
   \   000192   A3           INC     DPTR
   \   000193   E0           MOVX    A,@DPTR
   \   000194   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessOSALMsg_14:
   \   000196   701B         JNZ     ??ZDApp_ProcessOSALMsg_15
   1079                      {
   1080                        _NIB.nwkPanId = pChosenNwk->panId;
   \   000198   8E82         MOV     DPL,R6
   \   00019A   8F83         MOV     DPH,R7
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   F8           MOV     R0,A
   \   00019E   A3           INC     DPTR
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   F9           MOV     R1,A
   \   0001A1   90....       MOV     DPTR,#_NIB + 33
   \   0001A4   E8           MOV     A,R0
   \   0001A5   F0           MOVX    @DPTR,A
   \   0001A6   A3           INC     DPTR
   \   0001A7   E9           MOV     A,R1
   \   0001A8   F0           MOVX    @DPTR,A
   1081                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   \   0001A9                ; Setup parameters for call to function ZMacSetReq
   \   0001A9   7A..         MOV     R2,#(_NIB + 33) & 0xff
   \   0001AB   7B..         MOV     R3,#((_NIB + 33) >> 8) & 0xff
   \   0001AD   7950         MOV     R1,#0x50
   \   0001AF   12....       LCALL   ??ZMacSetReq?relay   ; Banked call to: ZMacSetReq
   \   0001B2   E9           MOV     A,R1
   1082                      }
   1083                      
   1084                      tmp = true;
   \                     ??ZDApp_ProcessOSALMsg_15:
   \   0001B3   85..82       MOV     DPL,?XSP + 0
   \   0001B6   85..83       MOV     DPH,?XSP + 1
   \   0001B9   7401         MOV     A,#0x1
   \   0001BB   F0           MOVX    @DPTR,A
   1085                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin 
   \   0001BC                ; Setup parameters for call to function ZMacSetReq
   \   0001BC   AA..         MOV     R2,?XSP + 0
   \   0001BE   AB..         MOV     R3,?XSP + 1
   \   0001C0   7952         MOV     R1,#0x52
   \   0001C2   12....       LCALL   ??ZMacSetReq?relay   ; Banked call to: ZMacSetReq
   \   0001C5   E9           MOV     A,R1
   1086                      if ( NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel) != ZSuccess )
   \   0001C6                ; Setup parameters for call to function NLME_ReJoinRequest
   \   0001C6   8E82         MOV     DPL,R6
   \   0001C8   8F83         MOV     DPH,R7
   \   0001CA   A3           INC     DPTR
   \   0001CB   A3           INC     DPTR
   \   0001CC   E0           MOVX    A,@DPTR
   \   0001CD   F9           MOV     R1,A
   \   0001CE   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   0001D0   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0001D2   12....       LCALL   ??NLME_ReJoinRequest?relay; Banked call to: NLME_ReJoinRequest
   \   0001D5   E9           MOV     A,R1
   \   0001D6   601D         JZ      ??ZDApp_ProcessOSALMsg_11
   1087                      {
   1088                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1089                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0001D8                ; Setup parameters for call to function osal_rand
   \   0001D8   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   0001DB   8A..         MOV     ?V4,R2
   \   0001DD   8B..         MOV     ?V5,R3
   \   0001DF   A8..         MOV     R0,?V4
   \   0001E1   A9..         MOV     R1,?V5
   \   0001E3                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001E3   E8           MOV     A,R0
   \   0001E4   547F         ANL     A,#0x7f
   \   0001E6   F8           MOV     R0,A
   \   0001E7   E9           MOV     A,R1
   \   0001E8   5400         ANL     A,#0x0
   \   0001EA   F9           MOV     R1,A
   \   0001EB   E8           MOV     A,R0
   \   0001EC   2464         ADD     A,#0x64
   \   0001EE   FA           MOV     R2,A
   \   0001EF   E4           CLR     A
   \   0001F0   39           ADDC    A,R1
   \   0001F1   FB           MOV     R3,A
   \   0001F2   12....       LCALL   ??ZDApp_NetworkInit?relay; Banked call to: ZDApp_NetworkInit
   1090                      }
   1091                    } // else if ( devStartMode == MODE_REJOIN )
   1092                    
   1093                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   0001F5   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0001F8   E0           MOVX    A,@DPTR
   \   0001F9   A2E3         MOV     C,0xE0 /* A   */.3
   \   0001FB   5041         JNC     ??ZDApp_ProcessOSALMsg_16
   1094                    {
   1095                      // The receiver is on, turn network layer polling off.
   1096                      NLME_SetPollRate( 0 );
   \   0001FD                ; Setup parameters for call to function NLME_SetPollRate
   \   0001FD   7A00         MOV     R2,#0x0
   \   0001FF   7B00         MOV     R3,#0x0
   \   000201   12....       LCALL   ??NLME_SetPollRate?relay; Banked call to: NLME_SetPollRate
   1097                      NLME_SetQueuedPollRate( 0 );
   \   000204                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000204   7A00         MOV     R2,#0x0
   \   000206   7B00         MOV     R3,#0x0
   \   000208   12....       LCALL   ??NLME_SetQueuedPollRate?relay; Banked call to: NLME_SetQueuedPollRate
   1098                      NLME_SetResponseRate( 0 );
   \   00020B                ; Setup parameters for call to function NLME_SetResponseRate
   \   00020B   7A00         MOV     R2,#0x0
   \   00020D   7B00         MOV     R3,#0x0
   \   00020F   12....       LCALL   ??NLME_SetResponseRate?relay; Banked call to: NLME_SetResponseRate
   \   000212   807B         SJMP    ??ZDApp_ProcessOSALMsg_6
   1099                    }
   1100                    else
   1101                    {
   1102                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   1103                      {
   1104                        ZDApp_SavedPollRate = zgPollRate;
   1105                        NLME_SetPollRate( zgRejoinPollRate );
   1106                      }
   1107                    }
   1108                  }
   1109                  else
   1110                  {
   1111                    if ( continueJoining )
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   000214   90....       MOV     DPTR,#continueJoining
   \   000217   E0           MOVX    A,@DPTR
   \   000218   6075         JZ      ??ZDApp_ProcessOSALMsg_6
   1112                    {
   1113              #if defined ( MANAGED_SCAN )
   1114                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1115              #else
   1116                      zdoDiscCounter++;
   \   00021A   90....       MOV     DPTR,#zdoDiscCounter
   \   00021D   E0           MOVX    A,@DPTR
   \   00021E   2401         ADD     A,#0x1
   \   000220   F0           MOVX    @DPTR,A
   1117                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1118                            + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   \   000221                ; Setup parameters for call to function osal_rand
   \   000221   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   000224   8A..         MOV     ?V4,R2
   \   000226   8B..         MOV     ?V5,R3
   \   000228   A8..         MOV     R0,?V4
   \   00022A   A9..         MOV     R1,?V5
   \   00022C                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00022C   E8           MOV     A,R0
   \   00022D   54FF         ANL     A,#0xff
   \   00022F   F8           MOV     R0,A
   \   000230   E9           MOV     A,R1
   \   000231   5400         ANL     A,#0x0
   \   000233   F9           MOV     R1,A
   \   000234   E8           MOV     A,R0
   \   000235   2464         ADD     A,#0x64
   \   000237   FA           MOV     R2,A
   \   000238   E4           CLR     A
   \   000239   39           ADDC    A,R1
   \   00023A   FB           MOV     R3,A
   \   00023B   12....       LCALL   ??ZDApp_NetworkInit?relay; Banked call to: ZDApp_NetworkInit
   1119              #endif
   1120                    }
   1121                  }
   1122                }
   1123                break;
   \                     ??ZDApp_ProcessOSALMsg_16:
   \   00023E   804F         SJMP    ??ZDApp_ProcessOSALMsg_6
   1124          
   1125              case ZDO_NWK_JOIN_IND:
   1126                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   000240   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000243   E0           MOVX    A,@DPTR
   \   000244   6401         XRL     A,#0x1
   \   000246   6008         JZ      ??ZDApp_ProcessOSALMsg_17
   \   000248   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00024B   E0           MOVX    A,@DPTR
   \   00024C   6402         XRL     A,#0x2
   \   00024E   703F         JNZ     ??ZDApp_ProcessOSALMsg_6
   1127                {
   1128                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_17:
   \   000250                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   000250   12....       LCALL   ??ZDApp_ProcessNetworkJoin?relay; Banked call to: ZDApp_ProcessNetworkJoin
   1129                }
   1130                break;
   \   000253   803A         SJMP    ??ZDApp_ProcessOSALMsg_6
   1131          
   1132              case ZDO_NWK_JOIN_REQ:
   1133                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   000255   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000258   E0           MOVX    A,@DPTR
   \   000259   6401         XRL     A,#0x1
   \   00025B   6008         JZ      ??ZDApp_ProcessOSALMsg_18
   \   00025D   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000260   E0           MOVX    A,@DPTR
   \   000261   6402         XRL     A,#0x2
   \   000263   702A         JNZ     ??ZDApp_ProcessOSALMsg_6
   1134                {
   1135                  retryCnt = 0;
   \                     ??ZDApp_ProcessOSALMsg_18:
   \   000265   90....       MOV     DPTR,#retryCnt
   \   000268   7400         MOV     A,#0x0
   \   00026A   F0           MOVX    @DPTR,A
   1136                  devStartMode = MODE_RESUME;
   \   00026B   90....       MOV     DPTR,#devStartMode
   \   00026E   7401         MOV     A,#0x1
   \   000270   F0           MOVX    @DPTR,A
   1137                  _tmpRejoinState = true;
   \   000271   90....       MOV     DPTR,#_tmpRejoinState
   \   000274   7401         MOV     A,#0x1
   \   000276   F0           MOVX    @DPTR,A
   1138                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \   000277                ; Setup parameters for call to function sAddrExtCpy
   \   000277   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   000279   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   00027B   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   00027D   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00027F   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   1139                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   \   000282   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000285   7402         MOV     A,#0x2
   \   000287   F0           MOVX    @DPTR,A
   1140                  ZDApp_NetworkInit( 0 );
   \   000288                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000288   7A00         MOV     R2,#0x0
   \   00028A   7B00         MOV     R3,#0x0
   \   00028C   12....       LCALL   ??ZDApp_NetworkInit?relay; Banked call to: ZDApp_NetworkInit
   1141                }
   1142                break;
   1143          
   1144              default:
   1145                if ( ZG_SECURE_ENABLED )
   1146                  ZDApp_ProcessSecMsg( msgPtr );
   1147                break;
   1148            }
   1149          
   1150          }
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   00028F   7401         MOV     A,#0x1
   \   000291   12....       LCALL   ?DEALLOC_XSTACK8
   \   000294   7F08         MOV     R7,#0x8
   \   000296   02....       LJMP    ?BANKED_LEAVE_XDATA
   1151          
   1152          /*********************************************************************
   1153           * @fn      ZDApp_ProcessMsgCBs()
   1154           *
   1155           * @brief   Process response messages
   1156           *
   1157           * @param   none
   1158           *
   1159           * @return  none
   1160           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1161          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1162          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 44
   \   000005   74D4         MOV     A,#-0x2c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1163            switch ( inMsg->clusterID )
   \   00000E   EE           MOV     A,R6
   \   00000F   240C         ADD     A,#0xc
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V1,A
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000023   0300         DW        3
   \   000025   2100         DW        33
   \   000027   2200         DW        34
   \   000029   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   00002B   0080         DW        32768
   \   00002D   0180         DW        32769
   \   00002F   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000031   2180         DW        32801
   \   000033   2280         DW        32802
   \   000035   ....         DW        ??ZDApp_ProcessMsgCBs_2
   \   000037   0100         DW        1
   \   000039   2000         DW        32
   \   00003B   ....         DW        ??ZDApp_ProcessMsgCBs_3
   \   00003D   ....         DW        ??ZDApp_ProcessMsgCBs_4
   1164            {
   1165          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1166              case NWK_addr_rsp:
   1167              case IEEE_addr_rsp:
   1168                {
   1169                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1170                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00003F                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00003F   EE           MOV     A,R6
   \   000040   FA           MOV     R2,A
   \   000041   EF           MOV     A,R7
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   ??ZDO_ParseAddrRsp?relay; Banked call to: ZDO_ParseAddrRsp
   \   000046   8A..         MOV     ?V2,R2
   \   000048   8B..         MOV     ?V3,R3
   \   00004A   85....       MOV     ?V0,?V2
   \   00004D   85....       MOV     ?V1,?V3
   1171                  if ( pAddrRsp )
   \   000050   E5..         MOV     A,?V0
   \   000052   45..         ORL     A,?V1
   \   000054   6028         JZ      ??ZDApp_ProcessMsgCBs_5
   1172                  {
   1173                    if ( pAddrRsp->status == ZSuccess )
   \   000056   85..82       MOV     DPL,?V0
   \   000059   85..83       MOV     DPH,?V1
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   7018         JNZ     ??ZDApp_ProcessMsgCBs_6
   1174                    {
   1175                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   00005F                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   00005F   E5..         MOV     A,?V0
   \   000061   2403         ADD     A,#0x3
   \   000063   FC           MOV     R4,A
   \   000064   E4           CLR     A
   \   000065   35..         ADDC    A,?V1
   \   000067   FD           MOV     R5,A
   \   000068   85..82       MOV     DPL,?V0
   \   00006B   85..83       MOV     DPH,?V1
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   FA           MOV     R2,A
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   FB           MOV     R3,A
   \   000074   12....       LCALL   ??ZDO_UpdateAddrManager?relay; Banked call to: ZDO_UpdateAddrManager
   1176                    }
   1177                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_6:
   \   000077                ; Setup parameters for call to function osal_mem_free
   \   000077   AA..         MOV     R2,?V0
   \   000079   AB..         MOV     R3,?V1
   \   00007B   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   1178                  }
   1179                }
   1180                break;
   \                     ??ZDApp_ProcessMsgCBs_5:
   \   00007E   02....       LJMP    ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
   1181          #endif
   1182                
   1183          #if defined ( REFLECTOR )
   1184              case Bind_req:
   1185              case Unbind_req:
   1186                {
   1187                  ZDO_BindUnbindReq_t bindReq;
   1188                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   000081                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   000081   7417         MOV     A,#0x17
   \   000083   12....       LCALL   ?XSTACK_DISP102_8
   \   000086   EE           MOV     A,R6
   \   000087   FA           MOV     R2,A
   \   000088   EF           MOV     A,R7
   \   000089   FB           MOV     R3,A
   \   00008A   12....       LCALL   ??ZDO_ParseBindUnbindReq?relay; Banked call to: ZDO_ParseBindUnbindReq
   1189                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   00008D                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   00008D   7417         MOV     A,#0x17
   \   00008F   12....       LCALL   ?XSTACK_DISP102_8
   \   000092   EE           MOV     A,R6
   \   000093   FA           MOV     R2,A
   \   000094   EF           MOV     A,R7
   \   000095   FB           MOV     R3,A
   \   000096   12....       LCALL   ??ZDO_ProcessBindUnbindReq?relay; Banked call to: ZDO_ProcessBindUnbindReq
   1190                }
   1191                break;
   \   000099   02....       LJMP    ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
   1192          #endif      
   1193          
   1194          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1195              case Bind_rsp:
   1196              case Unbind_rsp:
   1197                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   00009C   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   7048         JNZ     ??ZDApp_ProcessMsgCBs_7
   \   0000A2   90....       MOV     DPTR,#matchED
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   F8           MOV     R0,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   F9           MOV     R1,A
   \   0000AA   E8           MOV     A,R0
   \   0000AB   49           ORL     A,R1
   \   0000AC   603C         JZ      ??ZDApp_ProcessMsgCBs_7
   1198                {
   1199                  ZDMatchSendState(
   1200                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1201                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   \   0000AE   EE           MOV     A,R6
   \   0000AF   240C         ADD     A,#0xc
   \   0000B1   F582         MOV     DPL,A
   \   0000B3   E4           CLR     A
   \   0000B4   3F           ADDC    A,R7
   \   0000B5   F583         MOV     DPH,A
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   6421         XRL     A,#0x21
   \   0000BA   7004         JNZ     ??ZDApp_ProcessMsgCBs_8
   \   0000BC   A3           INC     DPTR
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessMsgCBs_8:
   \   0000C0   7004         JNZ     ??ZDApp_ProcessMsgCBs_9
   \   0000C2   7903         MOV     R1,#0x3
   \   0000C4   8002         SJMP    ??ZDApp_ProcessMsgCBs_10
   \                     ??ZDApp_ProcessMsgCBs_9:
   \   0000C6   7902         MOV     R1,#0x2
   \                     ??ZDApp_ProcessMsgCBs_10:
   \   0000C8                ; Setup parameters for call to function ZDMatchSendState
   \   0000C8   EE           MOV     A,R6
   \   0000C9   240F         ADD     A,#0xf
   \   0000CB   F582         MOV     DPL,A
   \   0000CD   E4           CLR     A
   \   0000CE   3F           ADDC    A,R7
   \   0000CF   F583         MOV     DPH,A
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   FB           MOV     R3,A
   \   0000D3   EE           MOV     A,R6
   \   0000D4   2413         ADD     A,#0x13
   \   0000D6   F582         MOV     DPL,A
   \   0000D8   E4           CLR     A
   \   0000D9   3F           ADDC    A,R7
   \   0000DA   F583         MOV     DPH,A
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   F8           MOV     R0,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   F583         MOV     DPH,A
   \   0000E2   8882         MOV     DPL,R0
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   FA           MOV     R2,A
   \   0000E6   12....       LCALL   ??ZDMatchSendState?relay; Banked call to: ZDMatchSendState
   \   0000E9   E9           MOV     A,R1
   1202                }
   1203                break;
   \                     ??ZDApp_ProcessMsgCBs_7:
   \   0000EA   8042         SJMP    ??ZDApp_ProcessMsgCBs_4
   1204                
   1205              case End_Device_Bind_req:
   1206                if (ZG_DEVICE_COORDINATOR_TYPE)
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   0000EC   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   703C         JNZ     ??ZDApp_ProcessMsgCBs_4
   1207                {
   1208                  ZDEndDeviceBind_t bindReq;
   1209                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   \   0000F2                ; Setup parameters for call to function ZDO_ParseEndDeviceBindReq
   \   0000F2   AC..         MOV     R4,?XSP + 0
   \   0000F4   AD..         MOV     R5,?XSP + 1
   \   0000F6   EE           MOV     A,R6
   \   0000F7   FA           MOV     R2,A
   \   0000F8   EF           MOV     A,R7
   \   0000F9   FB           MOV     R3,A
   \   0000FA   12....       LCALL   ??ZDO_ParseEndDeviceBindReq?relay; Banked call to: ZDO_ParseEndDeviceBindReq
   1210                  ZDO_MatchEndDeviceBind( &bindReq );
   \   0000FD                ; Setup parameters for call to function ZDO_MatchEndDeviceBind
   \   0000FD   AA..         MOV     R2,?XSP + 0
   \   0000FF   AB..         MOV     R3,?XSP + 1
   \   000101   12....       LCALL   ??ZDO_MatchEndDeviceBind?relay; Banked call to: ZDO_MatchEndDeviceBind
   1211                  
   1212                  // Freeing the cluster lists - if allocated.
   1213                  if ( bindReq.numInClusters )
   \   000104   7411         MOV     A,#0x11
   \   000106   12....       LCALL   ?XSTACK_DISP0_8
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   600D         JZ      ??ZDApp_ProcessMsgCBs_11
   1214                    osal_mem_free( bindReq.inClusters );
   \   00010C                ; Setup parameters for call to function osal_mem_free
   \   00010C   7412         MOV     A,#0x12
   \   00010E   12....       LCALL   ?XSTACK_DISP0_8
   \   000111   E0           MOVX    A,@DPTR
   \   000112   FA           MOV     R2,A
   \   000113   A3           INC     DPTR
   \   000114   E0           MOVX    A,@DPTR
   \   000115   FB           MOV     R3,A
   \   000116   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   1215                  if ( bindReq.numOutClusters )
   \                     ??ZDApp_ProcessMsgCBs_11:
   \   000119   7414         MOV     A,#0x14
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   600D         JZ      ??ZDApp_ProcessMsgCBs_4
   1216                    osal_mem_free( bindReq.outClusters );
   \   000121                ; Setup parameters for call to function osal_mem_free
   \   000121   7415         MOV     A,#0x15
   \   000123   12....       LCALL   ?XSTACK_DISP0_8
   \   000126   E0           MOVX    A,@DPTR
   \   000127   FA           MOV     R2,A
   \   000128   A3           INC     DPTR
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   FB           MOV     R3,A
   \   00012B   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   1217                }
   1218                break;
   1219          #endif
   1220            }
   1221          }
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   00012E   742C         MOV     A,#0x2c
   \   000130   12....       LCALL   ?DEALLOC_XSTACK8
   \   000133   7F04         MOV     R7,#0x4
   \   000135   02....       LJMP    ?BANKED_LEAVE_XDATA
   1222          
   1223          /*********************************************************************
   1224           * @fn      ZDApp_RegisterCBs()
   1225           *
   1226           * @brief   Process response messages
   1227           *
   1228           * @param   none
   1229           *
   1230           * @return  none
   1231           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1232          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1233          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1234          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1235            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV     R2,#0x1
   \   000006   7B80         MOV     R3,#-0x80
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
   \   000010   E9           MOV     A,R1
   1236          #endif
   1237          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1238            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \   000011                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000011   7A00         MOV     R2,#0x0
   \   000013   7B80         MOV     R3,#-0x80
   \   000015   90....       MOV     DPTR,#ZDAppTaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
   \   00001D   E9           MOV     A,R1
   1239          #endif  
   1240          #if ZG_BUILD_COORDINATOR_TYPE
   1241            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   \   00001E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001E   7A21         MOV     R2,#0x21
   \   000020   7B80         MOV     R3,#-0x80
   \   000022   90....       MOV     DPTR,#ZDAppTaskID
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F9           MOV     R1,A
   \   000027   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
   \   00002A   E9           MOV     A,R1
   1242            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   \   00002B                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00002B   7A22         MOV     R2,#0x22
   \   00002D   7B80         MOV     R3,#-0x80
   \   00002F   90....       MOV     DPTR,#ZDAppTaskID
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
   \   000037   E9           MOV     A,R1
   1243            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   \   000038                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000038   7A20         MOV     R2,#0x20
   \   00003A   7B00         MOV     R3,#0x0
   \   00003C   90....       MOV     DPTR,#ZDAppTaskID
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
   \   000044   E9           MOV     A,R1
   1244          #endif
   1245          #if defined ( REFLECTOR )
   1246            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \   000045                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000045   7A21         MOV     R2,#0x21
   \   000047   7B00         MOV     R3,#0x0
   \   000049   90....       MOV     DPTR,#ZDAppTaskID
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F9           MOV     R1,A
   \   00004E   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
   \   000051   E9           MOV     A,R1
   1247            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \   000052                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000052   7A22         MOV     R2,#0x22
   \   000054   7B00         MOV     R3,#0x0
   \   000056   90....       MOV     DPTR,#ZDAppTaskID
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F9           MOV     R1,A
   \   00005B   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
   \   00005E   E9           MOV     A,R1
   1248          #endif  
   1249          }
   \   00005F   D083         POP     DPH
   \   000061   D082         POP     DPL
   \   000063   02....       LJMP    ?BRET
   1250          
   1251          /*********************************************************************
   1252           * @fn      ZDApp_ProcessSecMsg()
   1253           *
   1254           * @brief   Process the incoming security message.
   1255           *
   1256           * @param   msgPtr - message to process
   1257           *
   1258           * @return  none
   1259           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1260          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1261          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1262            switch ( msgPtr->event )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   24FC         ADD     A,#-0x4
   \   000010   6059         JZ      ??ZDApp_ProcessSecMsg_0
   \   000012   14           DEC     A
   \   000013   6056         JZ      ??ZDApp_ProcessSecMsg_0
   \   000015   14           DEC     A
   \   000016   6014         JZ      ??ZDApp_ProcessSecMsg_1
   \   000018   14           DEC     A
   \   000019   602A         JZ      ??ZDApp_ProcessSecMsg_2
   \   00001B   14           DEC     A
   \   00001C   604D         JZ      ??ZDApp_ProcessSecMsg_0
   \   00001E   14           DEC     A
   \   00001F   604A         JZ      ??ZDApp_ProcessSecMsg_0
   \   000021   14           DEC     A
   \   000022   6030         JZ      ??ZDApp_ProcessSecMsg_3
   \   000024   14           DEC     A
   \   000025   6044         JZ      ??ZDApp_ProcessSecMsg_0
   \   000027   14           DEC     A
   \   000028   6041         JZ      ??ZDApp_ProcessSecMsg_0
   \   00002A   803F         SJMP    ??ZDApp_ProcessSecMsg_0
   1263            {
   1264              case ZDO_ESTABLISH_KEY_CFM:
   1265                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1266                {
   1267                  ZDSecMgrEstablishKeyCfm( (ZDO_EstablishKeyCfm_t*)msgPtr );
   1268                }
   1269                break;
   1270          
   1271              case ZDO_ESTABLISH_KEY_IND:
   1272                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1273                {
   1274                  if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1275                  {
   1276                    ZDSecMgrEstablishKeyInd( (ZDO_EstablishKeyInd_t*)msgPtr );
   1277                  }
   1278                }
   1279                break;
   1280          
   1281              case ZDO_TRANSPORT_KEY_IND:
   1282                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   00002C   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6401         XRL     A,#0x1
   \   000032   6008         JZ      ??ZDApp_ProcessSecMsg_4
   \   000034   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000037   E0           MOVX    A,@DPTR
   \   000038   6402         XRL     A,#0x2
   \   00003A   702F         JNZ     ??ZDApp_ProcessSecMsg_0
   1283                {
   1284                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   00003C                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   00003C   EE           MOV     A,R6
   \   00003D   FA           MOV     R2,A
   \   00003E   EF           MOV     A,R7
   \   00003F   FB           MOV     R3,A
   \   000040   12....       LCALL   ??ZDSecMgrTransportKeyInd?relay; Banked call to: ZDSecMgrTransportKeyInd
   1285                }
   1286                break;
   \   000043   8026         SJMP    ??ZDApp_ProcessSecMsg_0
   1287          
   1288              case ZDO_UPDATE_DEVICE_IND:
   1289                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000045   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000048   E0           MOVX    A,@DPTR
   \   000049   7020         JNZ     ??ZDApp_ProcessSecMsg_0
   1290                {
   1291                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   \   00004B                ; Setup parameters for call to function ZDSecMgrUpdateDeviceInd
   \   00004B   EE           MOV     A,R6
   \   00004C   FA           MOV     R2,A
   \   00004D   EF           MOV     A,R7
   \   00004E   FB           MOV     R3,A
   \   00004F   12....       LCALL   ??ZDSecMgrUpdateDeviceInd?relay; Banked call to: ZDSecMgrUpdateDeviceInd
   1292                }
   1293                break;
   \   000052   8017         SJMP    ??ZDApp_ProcessSecMsg_0
   1294          
   1295              case ZDO_REMOVE_DEVICE_IND:
   1296                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1297                {
   1298                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1299                }
   1300                break;
   1301          
   1302              case ZDO_REQUEST_KEY_IND:
   1303                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1304                {
   1305                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1306                  {
   1307                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1308                  }
   1309                }
   1310                break;
   1311          
   1312              case ZDO_SWITCH_KEY_IND:
   1313                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000054   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000057   E0           MOVX    A,@DPTR
   \   000058   6401         XRL     A,#0x1
   \   00005A   6008         JZ      ??ZDApp_ProcessSecMsg_5
   \   00005C   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   6402         XRL     A,#0x2
   \   000062   7007         JNZ     ??ZDApp_ProcessSecMsg_0
   1314                {
   1315                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_5:
   \   000064                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000064   EE           MOV     A,R6
   \   000065   FA           MOV     R2,A
   \   000066   EF           MOV     A,R7
   \   000067   FB           MOV     R3,A
   \   000068   12....       LCALL   ??ZDSecMgrSwitchKeyInd?relay; Banked call to: ZDSecMgrSwitchKeyInd
   1316                }
   1317                break;
   1318              
   1319              case ZDO_AUTHENTICATE_IND:
   1320                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1321                {
   1322                  ZDSecMgrAuthenticateInd( (ZDO_AuthenticateInd_t*)msgPtr );
   1323                }
   1324                break;
   1325          
   1326              case ZDO_AUTHENTICATE_CFM:
   1327                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1328                {
   1329                  ZDSecMgrAuthenticateCfm( (ZDO_AuthenticateCfm_t*)msgPtr );
   1330                }
   1331                break;
   1332          
   1333              default:
   1334                // Unsupported messages
   1335                break;
   1336            }
   1337          }
   \                     ??ZDApp_ProcessSecMsg_0:
   \   00006B   7F01         MOV     R7,#0x1
   \   00006D   02....       LJMP    ?BANKED_LEAVE_XDATA
   1338          
   1339          /*********************************************************************
   1340           * @fn      ZDApp_ProcessNetworkJoin()
   1341           *
   1342           * @brief
   1343           *
   1344           *   Save off the Network key information.
   1345           *
   1346           * @param   none
   1347           *
   1348           * @return  none
   1349           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1350          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1351          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1352            if ( (devState == DEV_NWK_JOINING) ||
   1353                ((devState == DEV_NWK_ORPHAN)  &&
   1354                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6403         XRL     A,#0x3
   \   000010   6018         JZ      ??ZDApp_ProcessNetworkJoin_0
   \   000012   90....       MOV     DPTR,#devState
   \   000015   E0           MOVX    A,@DPTR
   \   000016   640A         XRL     A,#0xa
   \   000018   6003         JZ      $+5
   \   00001A   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001D   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000020   E0           MOVX    A,@DPTR
   \   000021   5407         ANL     A,#0x7
   \   000023   6401         XRL     A,#0x1
   \   000025   6003         JZ      $+5
   \   000027   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   1355            {
   1356              // Result of a Join attempt by this device.
   1357              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   00002A   90....       MOV     DPTR,#nwkStatus
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   706F         JNZ     ??ZDApp_ProcessNetworkJoin_2
   1358              {
   1359                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000030                ; Setup parameters for call to function osal_set_event
   \   000030   7A10         MOV     R2,#0x10
   \   000032   7B00         MOV     R3,#0x0
   \   000034   90....       MOV     DPTR,#ZDAppTaskID
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F9           MOV     R1,A
   \   000039   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   00003C   E9           MOV     A,R1
   1360          
   1361          #if defined ( POWER_SAVING )
   1362                osal_pwrmgr_device( PWRMGR_BATTERY );
   1363          #endif
   1364          
   1365                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   1366                {
   1367                  // wait for auth from trust center!!
   1368                  devState = DEV_END_DEVICE_UNAUTH;
   1369          
   1370                  // Start the reset timer for MAX UNAUTH time
   1371                  ZDApp_ResetTimerStart( 10000 );//MAX_DEVICE_UNAUTH_TIMEOUT );
   1372                }
   1373                else
   1374                {
   1375                  if ( ZSTACK_ROUTER_BUILD )
   \   00003D   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6008         JZ      ??ZDApp_ProcessNetworkJoin_3
   \   000043   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000046   E0           MOVX    A,@DPTR
   \   000047   6401         XRL     A,#0x1
   \   000049   7018         JNZ     ??ZDApp_ProcessNetworkJoin_4
   1376                  {
   1377                    if ( devState == DEV_NWK_ORPHAN 
   1378                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   00004B   90....       MOV     DPTR,#devState
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   640A         XRL     A,#0xa
   \   000051   7010         JNZ     ??ZDApp_ProcessNetworkJoin_4
   \   000053   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000056   E0           MOVX    A,@DPTR
   \   000057   5407         ANL     A,#0x7
   \   000059   6402         XRL     A,#0x2
   \   00005B   6006         JZ      ??ZDApp_ProcessNetworkJoin_4
   1379                    {
   1380                      // Change NIB state to router for restore
   1381                      _NIB.nwkState = NWK_ROUTER;
   \   00005D   90....       MOV     DPTR,#_NIB + 35
   \   000060   7408         MOV     A,#0x8
   \   000062   F0           MOVX    @DPTR,A
   1382                    }
   1383                  }
   1384                          
   1385                  if ( devState == DEV_NWK_JOINING )
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   000063   90....       MOV     DPTR,#devState
   \   000066   E0           MOVX    A,@DPTR
   \   000067   6403         XRL     A,#0x3
   \   000069   7003         JNZ     ??ZDApp_ProcessNetworkJoin_5
   1386                  {
   1387                    ZDApp_AnnounceNewAddress();
   \   00006B                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00006B   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay; Banked call to: ZDApp_AnnounceNewAddress
   1388                  }
   1389                  
   1390                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   00006E   90....       MOV     DPTR,#devState
   \   000071   7406         MOV     A,#0x6
   \   000073   F0           MOVX    @DPTR,A
   1391                  if ( ZSTACK_ROUTER_BUILD )
   \   000074   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000077   E0           MOVX    A,@DPTR
   \   000078   600B         JZ      ??ZDApp_ProcessNetworkJoin_6
   \   00007A   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   6401         XRL     A,#0x1
   \   000080   6003         JZ      $+5
   \   000082   02....       LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1392                  {
   1393                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1394                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   000085   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000088   E0           MOVX    A,@DPTR
   \   000089   5407         ANL     A,#0x7
   \   00008B   6402         XRL     A,#0x2
   \   00008D   7003         JNZ     $+5
   \   00008F   02....       LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1395                    {
   1396                      NLME_StartRouterRequest( 0, 0, false );
   \   000092                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000092   7B00         MOV     R3,#0x0
   \   000094   7A00         MOV     R2,#0x0
   \   000096   7900         MOV     R1,#0x0
   \   000098   12....       LCALL   ??NLME_StartRouterRequest?relay; Banked call to: NLME_StartRouterRequest
   \   00009B   E9           MOV     A,R1
   \   00009C   02....       LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1397                    }
   1398                  }
   1399                }
   1400              }
   1401              else
   1402              {
   1403                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   00009F   90....       MOV     DPTR,#devStartMode
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   6401         XRL     A,#0x1
   \   0000A5   703F         JNZ     ??ZDApp_ProcessNetworkJoin_8
   \   0000A7   90....       MOV     DPTR,#retryCnt
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   2401         ADD     A,#0x1
   \   0000AD   90....       MOV     DPTR,#retryCnt
   \   0000B0   F0           MOVX    @DPTR,A
   \   0000B1   C3           CLR     C
   \   0000B2   9403         SUBB    A,#0x3
   \   0000B4   4030         JC      ??ZDApp_ProcessNetworkJoin_8
   1404                {
   1405                  if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   0000B6   90....       MOV     DPTR,#_NIB + 33
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   64FF         XRL     A,#0xff
   \   0000BC   7004         JNZ     ??ZDApp_ProcessNetworkJoin_9
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   0000C2   600E         JZ      ??ZDApp_ProcessNetworkJoin_10
   \   0000C4   90....       MOV     DPTR,#_NIB + 33
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   64FE         XRL     A,#0xfe
   \   0000CA   7004         JNZ     ??ZDApp_ProcessNetworkJoin_11
   \   0000CC   A3           INC     DPTR
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   0000D0   7008         JNZ     ??ZDApp_ProcessNetworkJoin_12
   1406                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   0000D2   90....       MOV     DPTR,#devStartMode
   \   0000D5   7400         MOV     A,#0x0
   \   0000D7   F0           MOVX    @DPTR,A
   \   0000D8   800C         SJMP    ??ZDApp_ProcessNetworkJoin_8
   1407                  else
   1408                  {
   1409                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   0000DA   90....       MOV     DPTR,#devStartMode
   \   0000DD   7403         MOV     A,#0x3
   \   0000DF   F0           MOVX    @DPTR,A
   1410                    _tmpRejoinState = true;
   \   0000E0   90....       MOV     DPTR,#_tmpRejoinState
   \   0000E3   7401         MOV     A,#0x1
   \   0000E5   F0           MOVX    @DPTR,A
   1411                  }
   1412                }
   1413          
   1414                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1415                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   0000E6                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000E6   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   0000E9   8A..         MOV     ?V0,R2
   \   0000EB   8B..         MOV     ?V1,R3
   \   0000ED   74FE         MOV     A,#-0x2
   \   0000EF   65..         XRL     A,?V0
   \   0000F1   7004         JNZ     ??ZDApp_ProcessNetworkJoin_13
   \   0000F3   74FF         MOV     A,#-0x1
   \   0000F5   65..         XRL     A,?V1
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000F7   700E         JNZ     ??ZDApp_ProcessNetworkJoin_14
   \   0000F9   90....       MOV     DPTR,#_NIB + 20
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   64FE         XRL     A,#0xfe
   \   0000FF   7004         JNZ     ??ZDApp_ProcessNetworkJoin_15
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   000105   6021         JZ      ??ZDApp_ProcessNetworkJoin_16
   1416                {
   1417                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   000107   85..82       MOV     DPL,?XSP + 0
   \   00010A   85..83       MOV     DPH,?XSP + 1
   \   00010D   74FE         MOV     A,#-0x2
   \   00010F   F0           MOVX    @DPTR,A
   \   000110   A3           INC     DPTR
   \   000111   74FF         MOV     A,#-0x1
   \   000113   F0           MOVX    @DPTR,A
   1418                  // Invalidate nwk addr so end device does not use in its data reqs.
   1419                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   000114   90....       MOV     DPTR,#_NIB + 20
   \   000117   74FE         MOV     A,#-0x2
   \   000119   F0           MOVX    @DPTR,A
   \   00011A   A3           INC     DPTR
   \   00011B   74FF         MOV     A,#-0x1
   \   00011D   F0           MOVX    @DPTR,A
   1420                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   \   00011E                ; Setup parameters for call to function ZMacSetReq
   \   00011E   AA..         MOV     R2,?XSP + 0
   \   000120   AB..         MOV     R3,?XSP + 1
   \   000122   7953         MOV     R1,#0x53
   \   000124   12....       LCALL   ??ZMacSetReq?relay   ; Banked call to: ZMacSetReq
   \   000127   E9           MOV     A,R1
   1421                }
   1422          
   1423                // Clear the neighbor Table and network discovery tables.
   1424                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   000128                ; Setup parameters for call to function nwkNeighborInitTable
   \   000128   12....       LCALL   ??nwkNeighborInitTable?relay; Banked call to: nwkNeighborInitTable
   1425                NLME_NwkDiscTerm();
   \   00012B                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   00012B   12....       LCALL   ??NLME_NwkDiscTerm?relay; Banked call to: NLME_NwkDiscTerm
   1426          
   1427                zdoDiscCounter = 1;
   \   00012E   90....       MOV     DPTR,#zdoDiscCounter
   \   000131   7401         MOV     A,#0x1
   \   000133   F0           MOVX    @DPTR,A
   1428          
   1429          //      ZDApp_NetworkInit( (uint16)
   1430          //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
   1431          //                          (NWK_START_DELAY * 5)) );
   1432                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1433                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   000134                ; Setup parameters for call to function osal_rand
   \   000134   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   000137   8A..         MOV     ?V0,R2
   \   000139   8B..         MOV     ?V1,R3
   \   00013B   A8..         MOV     R0,?V0
   \   00013D   A9..         MOV     R1,?V1
   \   00013F                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00013F   E8           MOV     A,R0
   \   000140   547F         ANL     A,#0x7f
   \   000142   F8           MOV     R0,A
   \   000143   E9           MOV     A,R1
   \   000144   5400         ANL     A,#0x0
   \   000146   F9           MOV     R1,A
   \   000147   E8           MOV     A,R0
   \   000148   2464         ADD     A,#0x64
   \   00014A   FA           MOV     R2,A
   \   00014B   E4           CLR     A
   \   00014C   39           ADDC    A,R1
   \   00014D   FB           MOV     R3,A
   \   00014E   12....       LCALL   ??ZDApp_NetworkInit?relay; Banked call to: ZDApp_NetworkInit
   \   000151   02....       LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1434              }
   1435            }
   1436            else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   000154   90....       MOV     DPTR,#devState
   \   000157   E0           MOVX    A,@DPTR
   \   000158   640A         XRL     A,#0xa
   \   00015A   600B         JZ      ??ZDApp_ProcessNetworkJoin_17
   \   00015C   90....       MOV     DPTR,#devState
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   6404         XRL     A,#0x4
   \   000162   6003         JZ      $+5
   \   000164   02....       LJMP    ??ZDApp_ProcessNetworkJoin_18 & 0xFFFF
   1437            {
   1438              // results of an orphaning attempt by this device
   1439              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   000167   90....       MOV     DPTR,#nwkStatus
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   7058         JNZ     ??ZDApp_ProcessNetworkJoin_19
   1440              {
   1441                if ( ZG_SECURE_ENABLED )
   1442                {
   1443                  ZDApp_RestoreNwkKey();
   1444                }
   1445                
   1446                devState = DEV_END_DEVICE;
   \   00016D   90....       MOV     DPTR,#devState
   \   000170   7406         MOV     A,#0x6
   \   000172   F0           MOVX    @DPTR,A
   1447                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000173                ; Setup parameters for call to function osal_set_event
   \   000173   7A10         MOV     R2,#0x10
   \   000175   7B00         MOV     R3,#0x0
   \   000177   90....       MOV     DPTR,#ZDAppTaskID
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   F9           MOV     R1,A
   \   00017C   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   00017F   E9           MOV     A,R1
   1448                // setup Power Manager Device
   1449          #if defined ( POWER_SAVING )
   1450                osal_pwrmgr_device( PWRMGR_BATTERY );
   1451          #endif
   1452          
   1453                if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   000180   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000183   E0           MOVX    A,@DPTR
   \   000184   A2E3         MOV     C,0xE0 /* A   */.3
   \   000186   5015         JNC     ??ZDApp_ProcessNetworkJoin_20
   1454                {
   1455                  // The receiver is on, turn network layer polling off.
   1456                  NLME_SetPollRate( 0 );
   \   000188                ; Setup parameters for call to function NLME_SetPollRate
   \   000188   7A00         MOV     R2,#0x0
   \   00018A   7B00         MOV     R3,#0x0
   \   00018C   12....       LCALL   ??NLME_SetPollRate?relay; Banked call to: NLME_SetPollRate
   1457                  NLME_SetQueuedPollRate( 0 );
   \   00018F                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00018F   7A00         MOV     R2,#0x0
   \   000191   7B00         MOV     R3,#0x0
   \   000193   12....       LCALL   ??NLME_SetQueuedPollRate?relay; Banked call to: NLME_SetQueuedPollRate
   1458                  NLME_SetResponseRate( 0 );
   \   000196                ; Setup parameters for call to function NLME_SetResponseRate
   \   000196   7A00         MOV     R2,#0x0
   \   000198   7B00         MOV     R3,#0x0
   \   00019A   12....       LCALL   ??NLME_SetResponseRate?relay; Banked call to: NLME_SetResponseRate
   1459                }
   1460          
   1461                if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   00019D   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0001A0   E0           MOVX    A,@DPTR
   \   0001A1   6008         JZ      ??ZDApp_ProcessNetworkJoin_21
   \   0001A3   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   6401         XRL     A,#0x1
   \   0001A9   7014         JNZ     ??ZDApp_ProcessNetworkJoin_22
   1462                {
   1463                  // NOTE: first two parameters are not used, see NLMEDE.h for details
   1464                  if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   0001AB   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0001AE   E0           MOVX    A,@DPTR
   \   0001AF   5407         ANL     A,#0x7
   \   0001B1   6402         XRL     A,#0x2
   \   0001B3   600A         JZ      ??ZDApp_ProcessNetworkJoin_22
   1465                  {
   1466                    NLME_StartRouterRequest( 0, 0, false );
   \   0001B5                ; Setup parameters for call to function NLME_StartRouterRequest
   \   0001B5   7B00         MOV     R3,#0x0
   \   0001B7   7A00         MOV     R2,#0x0
   \   0001B9   7900         MOV     R1,#0x0
   \   0001BB   12....       LCALL   ??NLME_StartRouterRequest?relay; Banked call to: NLME_StartRouterRequest
   \   0001BE   E9           MOV     A,R1
   1467                  }
   1468                }
   1469                
   1470                ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   0001BF                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   0001BF   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay; Banked call to: ZDApp_AnnounceNewAddress
   \   0001C2   02....       LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1471              }
   1472              else
   1473              {
   1474                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   0001C5   90....       MOV     DPTR,#devStartMode
   \   0001C8   E0           MOVX    A,@DPTR
   \   0001C9   6401         XRL     A,#0x1
   \   0001CB   704F         JNZ     ??ZDApp_ProcessNetworkJoin_23
   1475                {
   1476                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   0001CD   90....       MOV     DPTR,#retryCnt
   \   0001D0   E0           MOVX    A,@DPTR
   \   0001D1   2401         ADD     A,#0x1
   \   0001D3   90....       MOV     DPTR,#retryCnt
   \   0001D6   F0           MOVX    @DPTR,A
   \   0001D7   C3           CLR     C
   \   0001D8   9404         SUBB    A,#0x4
   \   0001DA   5032         JNC     ??ZDApp_ProcessNetworkJoin_24
   1477                  {
   1478                    if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   0001DC   90....       MOV     DPTR,#_NIB + 33
   \   0001DF   E0           MOVX    A,@DPTR
   \   0001E0   64FF         XRL     A,#0xff
   \   0001E2   7004         JNZ     ??ZDApp_ProcessNetworkJoin_25
   \   0001E4   A3           INC     DPTR
   \   0001E5   E0           MOVX    A,@DPTR
   \   0001E6   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessNetworkJoin_25:
   \   0001E8   600E         JZ      ??ZDApp_ProcessNetworkJoin_26
   \   0001EA   90....       MOV     DPTR,#_NIB + 33
   \   0001ED   E0           MOVX    A,@DPTR
   \   0001EE   64FE         XRL     A,#0xfe
   \   0001F0   7004         JNZ     ??ZDApp_ProcessNetworkJoin_27
   \   0001F2   A3           INC     DPTR
   \   0001F3   E0           MOVX    A,@DPTR
   \   0001F4   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessNetworkJoin_27:
   \   0001F6   7008         JNZ     ??ZDApp_ProcessNetworkJoin_28
   1479                      devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_26:
   \   0001F8   90....       MOV     DPTR,#devStartMode
   \   0001FB   7400         MOV     A,#0x0
   \   0001FD   F0           MOVX    @DPTR,A
   \   0001FE   801C         SJMP    ??ZDApp_ProcessNetworkJoin_23
   1480                    else
   1481                    {
   1482                      devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_28:
   \   000200   90....       MOV     DPTR,#devStartMode
   \   000203   7403         MOV     A,#0x3
   \   000205   F0           MOVX    @DPTR,A
   1483                      _tmpRejoinState = true;
   \   000206   90....       MOV     DPTR,#_tmpRejoinState
   \   000209   7401         MOV     A,#0x1
   \   00020B   F0           MOVX    @DPTR,A
   \   00020C   800E         SJMP    ??ZDApp_ProcessNetworkJoin_23
   1484                    }
   1485                  }
   1486                  // Do a normal join to the network after certain times of rejoin retries
   1487                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   00020E   90....       MOV     DPTR,#AIB_apsUseInsecureJoin
   \   000211   E0           MOVX    A,@DPTR
   \   000212   6401         XRL     A,#0x1
   \   000214   7006         JNZ     ??ZDApp_ProcessNetworkJoin_23
   1488                  {
   1489                    devStartMode = MODE_JOIN;
   \   000216   90....       MOV     DPTR,#devStartMode
   \   000219   7400         MOV     A,#0x0
   \   00021B   F0           MOVX    @DPTR,A
   1490                  }
   1491                }
   1492          
   1493                // Clear the neighbor Table and network discovery tables.
   1494                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   00021C                ; Setup parameters for call to function nwkNeighborInitTable
   \   00021C   12....       LCALL   ??nwkNeighborInitTable?relay; Banked call to: nwkNeighborInitTable
   1495                NLME_NwkDiscTerm();
   \   00021F                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   00021F   12....       LCALL   ??NLME_NwkDiscTerm?relay; Banked call to: NLME_NwkDiscTerm
   1496          
   1497                // setup a retry for later...
   1498                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1499                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   000222                ; Setup parameters for call to function osal_rand
   \   000222   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   000225   8A..         MOV     ?V0,R2
   \   000227   8B..         MOV     ?V1,R3
   \   000229   A8..         MOV     R0,?V0
   \   00022B   A9..         MOV     R1,?V1
   \   00022D                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00022D   E8           MOV     A,R0
   \   00022E   547F         ANL     A,#0x7f
   \   000230   F8           MOV     R0,A
   \   000231   E9           MOV     A,R1
   \   000232   5400         ANL     A,#0x0
   \   000234   F9           MOV     R1,A
   \   000235   E8           MOV     A,R0
   \   000236   2464         ADD     A,#0x64
   \   000238   FA           MOV     R2,A
   \   000239   E4           CLR     A
   \   00023A   39           ADDC    A,R1
   \   00023B   FB           MOV     R3,A
   \   00023C   12....       LCALL   ??ZDApp_NetworkInit?relay; Banked call to: ZDApp_NetworkInit
   \   00023F   8018         SJMP    ??ZDApp_ProcessNetworkJoin_7
   1500              }
   1501            }
   1502          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1503            else
   1504            {
   1505              // Assume from address conflict
   1506              if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   000241   90....       MOV     DPTR,#_NIB + 96
   \   000244   E0           MOVX    A,@DPTR
   \   000245   6402         XRL     A,#0x2
   \   000247   7010         JNZ     ??ZDApp_ProcessNetworkJoin_7
   1507              {
   1508                // Notify the network
   1509                ZDApp_AnnounceNewAddress();
   \   000249                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000249   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay; Banked call to: ZDApp_AnnounceNewAddress
   1510                
   1511                // Notify apps
   1512                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00024C                ; Setup parameters for call to function osal_set_event
   \   00024C   7A10         MOV     R2,#0x10
   \   00024E   7B00         MOV     R3,#0x0
   \   000250   90....       MOV     DPTR,#ZDAppTaskID
   \   000253   E0           MOVX    A,@DPTR
   \   000254   F9           MOV     R1,A
   \   000255   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   000258   E9           MOV     A,R1
   1513              }
   1514            }
   1515          #endif
   1516          }
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   000259   7402         MOV     A,#0x2
   \   00025B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00025E   7F02         MOV     R7,#0x2
   \   000260   02....       LJMP    ?BANKED_LEAVE_XDATA
   1517          
   1518          /*********************************************************************
   1519           * @fn      ZDApp_SaveNwkKey()
   1520           *
   1521           * @brief   Save off the Network key information.
   1522           *
   1523           * @param   none
   1524           *
   1525           * @return  none
   1526           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1527          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1528          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1529            nwkActiveKeyItems keyItems;
   1530          
   1531            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   AA..         MOV     R2,?XSP + 0
   \   00000C   AB..         MOV     R3,?XSP + 1
   \   00000E   12....       LCALL   ??SSP_ReadNwkActiveKey?relay; Banked call to: SSP_ReadNwkActiveKey
   1532            keyItems.frameCounter++;
   \   000011   90....       MOV     DPTR,#__Constant_1
   \   000014   78..         MOV     R0,#?V0
   \   000016   12....       LCALL   ?L_MOV_X
   \   000019   7411         MOV     A,#0x11
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?L_ADD_TO_X
   1533          
   1534            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1535                          (void *)&keyItems );
   \   000023                ; Setup parameters for call to function osal_nv_write
   \   000023   A8..         MOV     R0,?XSP + 0
   \   000025   A9..         MOV     R1,?XSP + 1
   \   000027   88..         MOV     ?V0,R0
   \   000029   89..         MOV     ?V1,R1
   \   00002B   78..         MOV     R0,#?V0
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   75..15       MOV     ?V0,#0x15
   \   000033   75..00       MOV     ?V1,#0x0
   \   000036   78..         MOV     R0,#?V0
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   7C00         MOV     R4,#0x0
   \   00003D   7D00         MOV     R5,#0x0
   \   00003F   7A82         MOV     R2,#-0x7e
   \   000041   7B00         MOV     R3,#0x0
   \   000043   12....       LCALL   ??osal_nv_write?relay; Banked call to: osal_nv_write
   \   000046   7404         MOV     A,#0x4
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004B   E9           MOV     A,R1
   1536          
   1537            nwkFrameCounterChanges = 0;
   \   00004C   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00004F   7400         MOV     A,#0x0
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   7400         MOV     A,#0x0
   \   000055   F0           MOVX    @DPTR,A
   1538            
   1539            // Clear copy in RAM before return. 
   1540            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000056                ; Setup parameters for call to function osal_memset
   \   000056   7C15         MOV     R4,#0x15
   \   000058   7D00         MOV     R5,#0x0
   \   00005A   7900         MOV     R1,#0x0
   \   00005C   AA..         MOV     R2,?XSP + 0
   \   00005E   AB..         MOV     R3,?XSP + 1
   \   000060   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   1541          
   1542          }
   \   000063   7415         MOV     A,#0x15
   \   000065   12....       LCALL   ?DEALLOC_XSTACK8
   \   000068   7F04         MOV     R7,#0x4
   \   00006A   02....       LJMP    ?BANKED_LEAVE_XDATA
   1543          
   1544          /*********************************************************************
   1545           * @fn      ZDApp_ResetNwkKey()
   1546           *
   1547           * @brief   Reset the Network key information in NV.
   1548           *
   1549           * @param   none
   1550           *
   1551           * @return  none
   1552           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1553          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1554          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1555            nwkActiveKeyItems keyItems;
   1556          
   1557            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   1558            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1559                          (void *)&keyItems );
   \   000017                ; Setup parameters for call to function osal_nv_write
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..15       MOV     ?V0,#0x15
   \   000027   75..00       MOV     ?V1,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A82         MOV     R2,#-0x7e
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   ??osal_nv_write?relay; Banked call to: osal_nv_write
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003F   E9           MOV     A,R1
   1560          }
   \   000040   7415         MOV     A,#0x15
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045   7F02         MOV     R7,#0x2
   \   000047   02....       LJMP    ?BANKED_LEAVE_XDATA
   1561          
   1562          /*********************************************************************
   1563           * @fn      ZDApp_RestoreNwkKey()
   1564           *
   1565           * @brief
   1566           *
   1567           *   Save off the Network key information.
   1568           *
   1569           * @param   none
   1570           *
   1571           * @return  true if restored from NV, false if not
   1572           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1573          uint8 ZDApp_RestoreNwkKey( void )
   \                     ZDApp_RestoreNwkKey:
   1574          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1575            nwkActiveKeyItems keyItems;
   1576            uint8 ret = false;
   \   00000A   7E00         MOV     R6,#0x0
   1577          
   1578            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1579                == ZSUCCESS )
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   A8..         MOV     R0,?XSP + 0
   \   00000E   A9..         MOV     R1,?XSP + 1
   \   000010   88..         MOV     ?V0,R0
   \   000012   89..         MOV     ?V1,R1
   \   000014   78..         MOV     R0,#?V0
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000019   75..15       MOV     ?V0,#0x15
   \   00001C   75..00       MOV     ?V1,#0x0
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7C00         MOV     R4,#0x0
   \   000026   7D00         MOV     R5,#0x0
   \   000028   7A82         MOV     R2,#-0x7e
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   00002F   7404         MOV     A,#0x4
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   E9           MOV     A,R1
   \   000035   703A         JNZ     ??ZDApp_RestoreNwkKey_0
   1580            {
   1581              if ( keyItems.frameCounter > 0 )
   \   000037   7411         MOV     A,#0x11
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   12....       LCALL   ?XLOAD_R0123
   \   00003F   E8           MOV     A,R0
   \   000040   49           ORL     A,R1
   \   000041   4A           ORL     A,R2
   \   000042   4B           ORL     A,R3
   \   000043   6022         JZ      ??ZDApp_RestoreNwkKey_1
   1582              {
   1583                // Restore the key information
   1584                keyItems.frameCounter += MAX_NWK_FRAMECOUNTER_CHANGES;
   \   000045   90....       MOV     DPTR,#__Constant_3e8
   \   000048   78..         MOV     R0,#?V0
   \   00004A   12....       LCALL   ?L_MOV_X
   \   00004D   7411         MOV     A,#0x11
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   78..         MOV     R0,#?V0
   \   000054   12....       LCALL   ?L_ADD_TO_X
   1585                nwkFrameCounter = keyItems.frameCounter;
   \   000057   7411         MOV     A,#0x11
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   12....       LCALL   ?XLOAD_R0123
   \   00005F   90....       MOV     DPTR,#nwkFrameCounter
   \   000062   12....       LCALL   ?XSTORE_R0123
   1586                ret = true;
   \   000065   7E01         MOV     R6,#0x1
   1587              }
   1588          
   1589              // Force a save for the first frame counter increment
   1590              nwkFrameCounterChanges = MAX_NWK_FRAMECOUNTER_CHANGES + 1;
   \                     ??ZDApp_RestoreNwkKey_1:
   \   000067   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00006A   74E9         MOV     A,#-0x17
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   7403         MOV     A,#0x3
   \   000070   F0           MOVX    @DPTR,A
   1591            }
   1592            // Clear copy in RAM before return. 
   1593            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   000071                ; Setup parameters for call to function osal_memset
   \   000071   7C15         MOV     R4,#0x15
   \   000073   7D00         MOV     R5,#0x0
   \   000075   7900         MOV     R1,#0x0
   \   000077   AA..         MOV     R2,?XSP + 0
   \   000079   AB..         MOV     R3,?XSP + 1
   \   00007B   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   1594            
   1595            return ( ret );
   \   00007E   EE           MOV     A,R6
   \   00007F   F9           MOV     R1,A
   \   000080   7415         MOV     A,#0x15
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
   \   000085   7F04         MOV     R7,#0x4
   \   000087   02....       LJMP    ?BANKED_LEAVE_XDATA
   1596          }
   1597          
   1598          /*********************************************************************
   1599           * @fn      ZDApp_ResetTimerStart
   1600           *
   1601           * @brief   Start the reset timer.
   1602           *
   1603           * @param   delay - delay time(ms) before reset
   1604           *
   1605           * @return  none
   1606           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1607          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1608          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1609            // Start the rest timer
   1610            osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   EE           MOV     A,R6
   \   00000A   FC           MOV     R4,A
   \   00000B   EF           MOV     A,R7
   \   00000C   FD           MOV     R5,A
   \   00000D   7A04         MOV     R2,#0x4
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   90....       MOV     DPTR,#ZDAppTaskID
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   000019   E9           MOV     A,R1
   1611          }
   \   00001A   7F01         MOV     R7,#0x1
   \   00001C   02....       LJMP    ?BANKED_LEAVE_XDATA
   1612          
   1613          /*********************************************************************
   1614           * @fn      ZDApp_ResetTimerCancel
   1615           *
   1616           * @brief   Cancel the reset timer.
   1617           *
   1618           * @param   none
   1619           *
   1620           * @return  none
   1621           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1622          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1623          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1624            // Cancel the reset timer
   1625            osal_stop_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET );
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV     R2,#0x4
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_stop_timerEx?relay; Banked call to: osal_stop_timerEx
   \   000010   E9           MOV     A,R1
   1626          }
   \   000011   D083         POP     DPH
   \   000013   D082         POP     DPL
   \   000015   02....       LJMP    ?BRET
   1627          
   1628          /*********************************************************************
   1629           * @fn      ZDApp_LeaveCtrlInit
   1630           *
   1631           * @brief   Initialize the leave control logic.
   1632           *
   1633           * @param   none
   1634           *
   1635           * @return  none
   1636           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1637          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1638          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1639            uint8 status;
   1640          
   1641          
   1642            // Initialize control state
   1643            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   7400         MOV     A,#0x0
   \   00000A   F0           MOVX    @DPTR,A
   1644          
   1645            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1646                                        sizeof(ZDApp_LeaveCtrl),
   1647                                        &ZDApp_LeaveCtrl );
   \   00000B                ; Setup parameters for call to function osal_nv_item_init
   \   00000B   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00000E   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7C01         MOV     R4,#0x1
   \   000018   7D00         MOV     R5,#0x0
   \   00001A   7A85         MOV     R2,#-0x7b
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   ??osal_nv_item_init?relay; Banked call to: osal_nv_item_init
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?DEALLOC_XSTACK8
   \   000026   E9           MOV     A,R1
   \   000027   FE           MOV     R6,A
   1648          
   1649            if ( status == ZSUCCESS )
   \   000028   EE           MOV     A,R6
   \   000029   7027         JNZ     ??ZDApp_LeaveCtrlInit_0
   1650            {
   1651              // Read saved control
   1652              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1653                            0,
   1654                            sizeof( uint8 ),
   1655                            &ZDApp_LeaveCtrl);
   \   00002B                ; Setup parameters for call to function osal_nv_read
   \   00002B   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00002E   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..01       MOV     ?V0,#0x1
   \   000039   75..00       MOV     ?V1,#0x0
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV     R4,#0x0
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7A85         MOV     R2,#-0x7b
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000051   E9           MOV     A,R1
   1656            }
   1657          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000052   7F02         MOV     R7,#0x2
   \   000054   02....       LJMP    ?BANKED_LEAVE_XDATA
   1658          
   1659          /*********************************************************************
   1660           * @fn      ZDApp_LeaveCtrlSet
   1661           *
   1662           * @brief   Set the leave control logic.
   1663           *
   1664           * @param   ra - reassociate flag
   1665           *
   1666           * @return  none
   1667           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1668          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1669          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1670            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
   1671          
   1672            if ( ra == TRUE )
   \   00000D   7401         MOV     A,#0x1
   \   00000F   6E           XRL     A,R6
   \   000010   7007         JNZ     ??ZDApp_LeaveCtrlSet_0
   1673            {
   1674              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000012   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000015   E0           MOVX    A,@DPTR
   \   000016   D2E1         SETB    0xE0 /* A   */.1
   \   000018   F0           MOVX    @DPTR,A
   1675            }
   1676          
   1677            // Write the leave control
   1678            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1679                           0,
   1680                           sizeof( uint8 ),
   1681                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000019                ; Setup parameters for call to function osal_nv_write
   \   000019   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00001C   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..01       MOV     ?V0,#0x1
   \   000027   75..00       MOV     ?V1,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A85         MOV     R2,#-0x7b
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   ??osal_nv_write?relay; Banked call to: osal_nv_write
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003F   E9           MOV     A,R1
   1682          }
   \   000040   7F02         MOV     R7,#0x2
   \   000042   02....       LJMP    ?BANKED_LEAVE_XDATA
   1683          
   1684          /*********************************************************************
   1685           * @fn      ZDApp_LeaveCtrlBypass
   1686           *
   1687           * @brief   Check if NV restore should be skipped during a leave reset.
   1688           *
   1689           * @param   none
   1690           *
   1691           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1692           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1693          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1694          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1695            uint8 bypass;
   1696          
   1697            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   000004   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   5004         JNC     ??ZDApp_LeaveCtrlBypass_0
   1698            {
   1699              bypass = TRUE;
   \   00000C   7901         MOV     R1,#0x1
   \   00000E   8002         SJMP    ??ZDApp_LeaveCtrlBypass_1
   1700            }
   1701            else
   1702            {
   1703              bypass = FALSE;
   \                     ??ZDApp_LeaveCtrlBypass_0:
   \   000010   7900         MOV     R1,#0x0
   1704            }
   1705          
   1706            return bypass;
   \                     ??ZDApp_LeaveCtrlBypass_1:
   \   000012   D083         POP     DPH
   \   000014   D082         POP     DPL
   \   000016   02....       LJMP    ?BRET
   1707          }
   1708          
   1709          /*********************************************************************
   1710           * @fn      ZDApp_LeaveCtrlStartup
   1711           *
   1712           * @brief   Check for startup conditions during a leave reset.
   1713           *
   1714           * @param   state      - devState_t determined by leave control logic
   1715           * @param   startDelay - startup delay
   1716           *
   1717           * @return  none
   1718           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1719          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   1720          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1721            *startDelay = 0;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   7400         MOV     A,#0x0
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   7400         MOV     A,#0x0
   \   000017   F0           MOVX    @DPTR,A
   1722          
   1723            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   000018   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001E   504B         JNC     ??ZDApp_LeaveCtrlStartup_0
   1724            {
   1725              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000020   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000023   E0           MOVX    A,@DPTR
   \   000024   A2E1         MOV     C,0xE0 /* A   */.1
   \   000026   500D         JNC     ??ZDApp_LeaveCtrlStartup_1
   1726              {
   1727                *startDelay = 5000;
   \   000028   8E82         MOV     DPL,R6
   \   00002A   8F83         MOV     DPH,R7
   \   00002C   7488         MOV     A,#-0x78
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   7413         MOV     A,#0x13
   \   000032   F0           MOVX    @DPTR,A
   \   000033   8009         SJMP    ??ZDApp_LeaveCtrlStartup_2
   1728              }
   1729              else
   1730              {
   1731                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000035   85..82       MOV     DPL,?V0
   \   000038   85..83       MOV     DPH,?V1
   \   00003B   7400         MOV     A,#0x0
   \   00003D   F0           MOVX    @DPTR,A
   1732              }
   1733          
   1734              // Set leave control to initialized state
   1735              ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   00003E   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000041   7400         MOV     A,#0x0
   \   000043   F0           MOVX    @DPTR,A
   1736          
   1737              // Write initialized control
   1738              osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1739                            0,
   1740                            sizeof( uint8 ),
   1741                            &ZDApp_LeaveCtrl);
   \   000044                ; Setup parameters for call to function osal_nv_write
   \   000044   75....       MOV     ?V2,#ZDApp_LeaveCtrl & 0xff
   \   000047   75....       MOV     ?V3,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   00004A   78..         MOV     R0,#?V2
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   75..01       MOV     ?V2,#0x1
   \   000052   75..00       MOV     ?V3,#0x0
   \   000055   78..         MOV     R0,#?V2
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   7C00         MOV     R4,#0x0
   \   00005C   7D00         MOV     R5,#0x0
   \   00005E   7A85         MOV     R2,#-0x7b
   \   000060   7B00         MOV     R3,#0x0
   \   000062   12....       LCALL   ??osal_nv_write?relay; Banked call to: osal_nv_write
   \   000065   7404         MOV     A,#0x4
   \   000067   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006A   E9           MOV     A,R1
   1742            }
   1743          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   00006B   7F04         MOV     R7,#0x4
   \   00006D   02....       LJMP    ?BANKED_LEAVE_XDATA
   1744          
   1745          /*********************************************************************
   1746           * @fn      ZDApp_LeaveReset
   1747           *
   1748           * @brief   Setup a device reset due to a leave indication/confirm.
   1749           *
   1750           * @param   ra - reassociate flag
   1751           *
   1752           * @return  none
   1753           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1754          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   1755          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1756            ZDApp_LeaveCtrlSet( ra );
   \   000007                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   ??ZDApp_LeaveCtrlSet?relay; Banked call to: ZDApp_LeaveCtrlSet
   1757          
   1758            ZDApp_ResetTimerStart( 5000 );
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   00000C   7A88         MOV     R2,#-0x78
   \   00000E   7B13         MOV     R3,#0x13
   \   000010   12....       LCALL   ??ZDApp_ResetTimerStart?relay; Banked call to: ZDApp_ResetTimerStart
   1759          }
   \   000013   7F01         MOV     R7,#0x1
   \   000015   02....       LJMP    ?BANKED_LEAVE_XDATA
   1760          
   1761          /*********************************************************************
   1762           * @fn      ZDApp_LeaveUpdate
   1763           *
   1764           * @brief   Update local device data related to leaving device.
   1765           *
   1766           * @param   nwkAddr        - NWK address of leaving device
   1767           * @param   extAddr        - EXT address of leaving device
   1768           * @param   removeChildren - remove children of leaving device
   1769           *
   1770           * @return  none
   1771           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1772          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   1773                                  uint8 removeChildren )
   1774          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   89..         MOV     ?V2,R1
   1775            /*
   1776            AddrMgrEntry_t entry;
   1777            */
   1778            (void)nwkAddr;  // Intentionally unreferenced parameter
   1779          
   1780            // Remove if child
   1781            if ( ZSTACK_ROUTER_BUILD )
   \   00000F   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6008         JZ      ??ZDApp_LeaveUpdate_0
   \   000015   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000018   E0           MOVX    A,@DPTR
   \   000019   6401         XRL     A,#0x1
   \   00001B   7009         JNZ     ??ZDApp_LeaveUpdate_1
   1782            {
   1783              NLME_RemoveChild( extAddr, removeChildren );
   \                     ??ZDApp_LeaveUpdate_0:
   \   00001D                ; Setup parameters for call to function NLME_RemoveChild
   \   00001D   A9..         MOV     R1,?V2
   \   00001F   EE           MOV     A,R6
   \   000020   FA           MOV     R2,A
   \   000021   EF           MOV     A,R7
   \   000022   FB           MOV     R3,A
   \   000023   12....       LCALL   ??NLME_RemoveChild?relay; Banked call to: NLME_RemoveChild
   1784            }
   1785          
   1786            /*
   1787            // Set NWK address to invalid
   1788            entry.user    = ADDRMGR_USER_DEFAULT;
   1789            entry.nwkAddr = INVALID_NODE_ADDR;
   1790            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   1791            AddrMgrEntryUpdate( &entry );
   1792          
   1793            // Check
   1794            if ( removeChildren == TRUE )
   1795            {
   1796              // Set index to INVALID_NODE_ADDR to start search
   1797              entry.index = INVALID_NODE_ADDR;
   1798          
   1799              // Get first entry
   1800              AddrMgrEntryGetNext( &entry );
   1801          
   1802              // Remove all descendents
   1803              while ( entry.index != INVALID_NODE_ADDR )
   1804              {
   1805                // Check NWK address allocation algorithm
   1806                if ( RTG_ANCESTOR( entry.nwkAddr, thisAddr ) != 0 )
   1807                {
   1808                  // Set NWK address to invalid
   1809                  entry.nwkAddr = INVALID_NODE_ADDR;
   1810                  AddrMgrEntryUpdate( &entry );
   1811                }
   1812          
   1813                // Get next entry
   1814                AddrMgrEntryGetNext( &entry );
   1815              }
   1816            }
   1817            */
   1818          }
   \                     ??ZDApp_LeaveUpdate_1:
   \   000026   7F03         MOV     R7,#0x3
   \   000028   02....       LJMP    ?BANKED_LEAVE_XDATA
   1819          
   1820          /*********************************************************************
   1821           * @fn      ZDApp_NetworkDiscoveryReq
   1822           *
   1823           * @brief   Request a network discovery.
   1824           *
   1825           * @param  scanChannels - 
   1826           * @param  scanDuration - 
   1827           *
   1828           * @return  ZStatus_t
   1829           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1830          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   1831          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   \   00000D   E9           MOV     A,R1
   \   00000E   FE           MOV     R6,A
   1832            // Setup optional filters - tbd
   1833            
   1834            // Request NLME network discovery
   1835            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   00000F                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   00000F   EE           MOV     A,R6
   \   000010   F9           MOV     R1,A
   \   000011   AA..         MOV     R2,?V0
   \   000013   AB..         MOV     R3,?V1
   \   000015   AC..         MOV     R4,?V2
   \   000017   AD..         MOV     R5,?V3
   \   000019   12....       LCALL   ??NLME_NetworkDiscoveryRequest?relay; Banked call to: NLME_NetworkDiscoveryRequest
   \   00001C   7F04         MOV     R7,#0x4
   \   00001E   02....       LJMP    ?BANKED_LEAVE_XDATA
   1836          }
   1837          
   1838          
   1839          
   1840          /*********************************************************************
   1841           * @fn      ZDApp_JoinReq
   1842           *
   1843           * @brief   Request the device to join a parent in a network.
   1844           *
   1845           * @param   channel - 
   1846           * @param   panID - 
   1847           *
   1848           * @return  ZStatus_t
   1849           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1850          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID, 
   \                     ZDApp_JoinReq:
   1851                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   1852          {  
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EC           MOV     A,R4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   ED           MOV     A,R5
   \   000014   F0           MOVX    @DPTR,A
   \   000015   89..         MOV     ?V0,R1
   \   000017   8A..         MOV     ?V4,R2
   \   000019   8B..         MOV     ?V5,R3
   \   00001B   7410         MOV     A,#0x10
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V2,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V3,A
   \   000027   7412         MOV     A,#0x12
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FF           MOV     R7,A
   \   00002E   7413         MOV     A,#0x13
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FE           MOV     R6,A
   1853            // Sync up the node with the stack profile (In the case where a pro device 
   1854            // joins a non-pro network, or verse versa)
   1855            ZDApp_NodeProfileSync( stackProfile);
   \   000035                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   000035   EE           MOV     A,R6
   \   000036   F9           MOV     R1,A
   \   000037   12....       LCALL   ??ZDApp_NodeProfileSync?relay; Banked call to: ZDApp_NodeProfileSync
   1856                          
   1857            // Request NLME Join Request
   1858            return NLME_JoinRequest(extendedPanID, panID,channel, 
   1859                                    ZDO_Config_Node_Descriptor.CapabilityFlags, 
   1860                                    chosenParent, parentDepth);
   \   00003A                ; Setup parameters for call to function NLME_JoinRequest
   \   00003A   EF           MOV     A,R7
   \   00003B   F5..         MOV     ?V1,A
   \   00003D   78..         MOV     R0,#?V1
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000042   78..         MOV     R0,#?V2
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F5..         MOV     ?V1,A
   \   00004D   78..         MOV     R0,#?V1
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000052   A9..         MOV     R1,?V0
   \   000054   AC..         MOV     R4,?V4
   \   000056   AD..         MOV     R5,?V5
   \   000058   7404         MOV     A,#0x4
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   FA           MOV     R2,A
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   FB           MOV     R3,A
   \   000062   12....       LCALL   ??NLME_JoinRequest?relay; Banked call to: NLME_JoinRequest
   \   000065   7404         MOV     A,#0x4
   \   000067   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006A   7402         MOV     A,#0x2
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006F   7F06         MOV     R7,#0x6
   \   000071   02....       LJMP    ?BANKED_LEAVE_XDATA
   1861          
   1862          }
   1863          /*********************************************************************
   1864           * CALLBACK FUNCTIONS
   1865           */
   1866          
   1867          
   1868          /*********************************************************************
   1869           * @fn      ZDApp_SendEventMsg()
   1870           *
   1871           * @brief
   1872           *
   1873           *   Sends a Network Join message
   1874           *
   1875           * @param  cmd - command ID
   1876           * @param  len - length (in bytes) of the buf field
   1877           * @param  buf - buffer for the rest of the message.
   1878           *
   1879           * @return  none
   1880           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1881          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   1882          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V1,R2
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1883            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   00000D                ; Setup parameters for call to function ZDApp_SendMsg
   \   00000D   EE           MOV     A,R6
   \   00000E   FC           MOV     R4,A
   \   00000F   EF           MOV     A,R7
   \   000010   FD           MOV     R5,A
   \   000011   AB..         MOV     R3,?V1
   \   000013   AA..         MOV     R2,?V0
   \   000015   90....       MOV     DPTR,#ZDAppTaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   ??ZDApp_SendMsg?relay; Banked call to: ZDApp_SendMsg
   1884          }
   \   00001D   7F02         MOV     R7,#0x2
   \   00001F   02....       LJMP    ?BANKED_LEAVE_XDATA
   1885          
   1886          /*********************************************************************
   1887           * @fn      ZDApp_SendMsg()
   1888           *
   1889           * @brief   Sends a OSAL message
   1890           *
   1891           * @param  taskID - Where to send the message
   1892           * @param  cmd - command ID
   1893           * @param  len - length (in bytes) of the buf field
   1894           * @param  buf - buffer for the rest of the message.
   1895           *
   1896           * @return  none
   1897           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1898          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   1899          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V5,R1
   \   000007   8A..         MOV     ?V4,R2
   \   000009   8B..         MOV     ?V3,R3
   \   00000B   8C..         MOV     ?V6,R4
   \   00000D   8D..         MOV     ?V7,R5
   1900            osal_event_hdr_t *msgPtr;
   1901          
   1902            // Send the address to the task
   1903            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F                ; Setup parameters for call to function osal_msg_allocate
   \   00000F   AA..         MOV     R2,?V3
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
   \   000016   8A..         MOV     ?V0,R2
   \   000018   8B..         MOV     ?V1,R3
   \   00001A   AE..         MOV     R6,?V0
   \   00001C   AF..         MOV     R7,?V1
   1904            if ( msgPtr )
   \   00001E   EE           MOV     A,R6
   \   00001F   4F           ORL     A,R7
   \   000020   603D         JZ      ??ZDApp_SendMsg_0
   1905            {
   1906              if ( (len > 0) && (buf != NULL) )
   \   000022   E5..         MOV     A,?V3
   \   000024   6024         JZ      ??ZDApp_SendMsg_1
   \   000026   E5..         MOV     A,?V6
   \   000028   45..         ORL     A,?V7
   \   00002A   601E         JZ      ??ZDApp_SendMsg_1
   1907                osal_memcpy( msgPtr, buf, len );
   \   00002C                ; Setup parameters for call to function osal_memcpy
   \   00002C   85....       MOV     ?V0,?V6
   \   00002F   85....       MOV     ?V1,?V7
   \   000032   75..00       MOV     ?V2,#0x0
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003A   AC..         MOV     R4,?V3
   \   00003C   7D00         MOV     R5,#0x0
   \   00003E   EE           MOV     A,R6
   \   00003F   FA           MOV     R2,A
   \   000040   EF           MOV     A,R7
   \   000041   FB           MOV     R3,A
   \   000042   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000045   7403         MOV     A,#0x3
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   1908          
   1909              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   00004A   E5..         MOV     A,?V4
   \   00004C   C0E0         PUSH    A
   \   00004E   8E82         MOV     DPL,R6
   \   000050   8F83         MOV     DPH,R7
   \   000052   D0E0         POP     A
   \   000054   F0           MOVX    @DPTR,A
   1910              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   000055                ; Setup parameters for call to function osal_msg_send
   \   000055   EE           MOV     A,R6
   \   000056   FA           MOV     R2,A
   \   000057   EF           MOV     A,R7
   \   000058   FB           MOV     R3,A
   \   000059   A9..         MOV     R1,?V5
   \   00005B   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
   \   00005E   E9           MOV     A,R1
   1911            }
   1912          }
   \                     ??ZDApp_SendMsg_0:
   \   00005F   7F08         MOV     R7,#0x8
   \   000061   02....       LJMP    ?BANKED_LEAVE_XDATA
   1913          
   1914          /*********************************************************************
   1915           * Call Back Functions from NWK  - API
   1916           */
   1917          
   1918          /*********************************************************************
   1919           * @fn          ZDO_NetworkDiscoveryConfirmCB
   1920           *
   1921           * @brief       This function returns a choice of PAN to join.
   1922           *
   1923           * @param       status - return status of the nwk discovery confirm
   1924           *
   1925           * @return      ZStatus_t
   1926           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1927          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   1928          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   C0E0         PUSH    A
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   D0E0         POP     A
   \   000014   F0           MOVX    @DPTR,A
   1929            osal_event_hdr_t msg;
   1930          
   1931            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   1932            // Send ZDO_MGMT_NWK_DISC_RSP back
   1933          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1934            if ( zdappMgmtNwkDiscReqInProgress )
   1935            {
   1936              zdappMgmtNwkDiscReqInProgress = false;
   1937              ZDO_FinishProcessingMgmtNwkDiscReq();
   1938            }
   1939            else
   1940          #endif
   1941            {
   1942              // Pass the confirm to another task if it registers the callback
   1943              // Otherwise, pass the confirm to ZDApp.
   1944              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \   000015   90....       MOV     DPTR,#zdoCBFunc + 4
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   E8           MOV     A,R0
   \   00001E   49           ORL     A,R1
   \   00001F   6014         JZ      ??ZDO_NetworkDiscoveryConfirmCB_0
   1945              {      
   1946                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000021                ; Setup parameters for indirect call
   \   000021   AA..         MOV     R2,?XSP + 0
   \   000023   AB..         MOV     R3,?XSP + 1
   \   000025   90....       MOV     DPTR,#zdoCBFunc + 4
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F583         MOV     DPH,A
   \   00002E   8882         MOV     DPL,R0
   \   000030   12....       LCALL   ?CALL_IND
   \   000033   8019         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
   1947              }
   1948              else
   1949              {
   1950                // Otherwise, send scan confirm to ZDApp task to proceed
   1951                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   000035   7402         MOV     A,#0x2
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   7400         MOV     A,#0x0
   \   00003C   F0           MOVX    @DPTR,A
   1952                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   00003D                ; Setup parameters for call to function ZDApp_SendMsg
   \   00003D   7401         MOV     A,#0x1
   \   00003F   12....       LCALL   ?XSTACK_DISP102_8
   \   000042   7B02         MOV     R3,#0x2
   \   000044   7A01         MOV     R2,#0x1
   \   000046   90....       MOV     DPTR,#ZDAppTaskID
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
   \   00004B   12....       LCALL   ??ZDApp_SendMsg?relay; Banked call to: ZDApp_SendMsg
   1953              }
   1954            }
   1955            return (ZSuccess);
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   00004E   7900         MOV     R1,#0x0
   \   000050   7403         MOV     A,#0x3
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   \   000055   D083         POP     DPH
   \   000057   D082         POP     DPL
   \   000059   02....       LJMP    ?BRET
   1956          }  // ZDO_NetworkDiscoveryConfirmCB
   1957          
   1958          /*********************************************************************
   1959           * @fn          ZDApp_NwkDescListProcessing
   1960           *
   1961           * @brief       This function process the network discovery result and select 
   1962           *              a parent device to join itself.
   1963           *
   1964           * @param       none
   1965           *
   1966           * @return      ZStatus_t
   1967           */
   1968          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1969          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   1970          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   1971            networkDesc_t *pNwkDesc;
   1972            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV     ?V1,#0x0
   1973            uint8 stackProfile;
   1974            uint8 stackProfilePro;
   1975            uint8 selected;
   1976          
   1977            // Count the number of nwk descriptors in the list
   1978            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL   ??nwk_getNwkDescList?relay; Banked call to: nwk_getNwkDescList
   \   00000B   8A..         MOV     ?V2,R2
   \   00000D   8B..         MOV     ?V3,R3
   \   00000F   AE..         MOV     R6,?V2
   \   000011   AF..         MOV     R7,?V3
   1979            while (pNwkDesc)
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000013   EE           MOV     A,R6
   \   000014   4F           ORL     A,R7
   \   000015   6012         JZ      ??ZDApp_NwkDescListProcessing_1
   1980            {
   1981              ResultCount++;
   \   000017   05..         INC     ?V1
   1982              pNwkDesc = pNwkDesc->nextDesc;
   \   000019   EE           MOV     A,R6
   \   00001A   2414         ADD     A,#0x14
   \   00001C   F582         MOV     DPL,A
   \   00001E   E4           CLR     A
   \   00001F   3F           ADDC    A,R7
   \   000020   F583         MOV     DPH,A
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FE           MOV     R6,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FF           MOV     R7,A
   \   000027   80EA         SJMP    ??ZDApp_NwkDescListProcessing_0
   1983            }
   1984          
   1985            // process discovery results
   1986            stackProfilePro = FALSE;
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000029   75..00       MOV     ?V0,#0x0
   1987            selected = FALSE; 
   \   00002C   75..00       MOV     ?V5,#0x0
   1988            
   1989          
   1990            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   00002F   75..00       MOV     ?V6,#0x0
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000032   E5..         MOV     A,?V6
   \   000034   C3           CLR     C
   \   000035   9402         SUBB    A,#0x2
   \   000037   4003         JC      $+5
   \   000039   02....       LJMP    ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   1991            {
   1992              pNwkDesc = nwk_getNwkDescList();
   \   00003C                ; Setup parameters for call to function nwk_getNwkDescList
   \   00003C   12....       LCALL   ??nwk_getNwkDescList?relay; Banked call to: nwk_getNwkDescList
   \   00003F   8A..         MOV     ?V2,R2
   \   000041   8B..         MOV     ?V3,R3
   \   000043   AE..         MOV     R6,?V2
   \   000045   AF..         MOV     R7,?V3
   1993              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   000047   75..00       MOV     ?V4,#0x0
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   00004A   E5..         MOV     A,?V4
   \   00004C   C3           CLR     C
   \   00004D   95..         SUBB    A,?V1
   \   00004F   4003         JC      $+5
   \   000051   02....       LJMP    ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   1994              {
   1995                if ( zgConfigPANID != 0xFFFF )
   \   000054   90....       MOV     DPTR,#zgConfigPANID
   \   000057   E0           MOVX    A,@DPTR
   \   000058   64FF         XRL     A,#0xff
   \   00005A   7004         JNZ     ??ZDApp_NwkDescListProcessing_6
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   64FF         XRL     A,#0xff
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000060   6018         JZ      ??ZDApp_NwkDescListProcessing_7
   1996                {
   1997                  // PAN Id is preconfigured. check if it matches
   1998                  if ( pNwkDesc->panId != zgConfigPANID )
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F8           MOV     R0,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   90....       MOV     DPTR,#zgConfigPANID
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   68           XRL     A,R0
   \   000070   7003         JNZ     ??ZDApp_NwkDescListProcessing_8
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   000075   6003         JZ      $+5
   \   000077   02....       LJMP    ??ZDApp_NwkDescListProcessing_9 & 0xFFFF
   1999                    continue;
   2000                }
   2001                
   2002                if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID) == true ) 
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   00007A                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   00007A   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   00007C   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00007E   12....       LCALL   ??nwk_ExtPANIDValid?relay; Banked call to: nwk_ExtPANIDValid
   \   000081   E9           MOV     A,R1
   \   000082   6401         XRL     A,#0x1
   \   000084   7014         JNZ     ??ZDApp_NwkDescListProcessing_10
   2003                {
   2004                  // If the extended Pan ID is commissioned to a non zero value
   2005                  // Only join the Pan that has match EPID
   2006                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   \   000086                ; Setup parameters for call to function sAddrExtCmp
   \   000086   EE           MOV     A,R6
   \   000087   240B         ADD     A,#0xb
   \   000089   FC           MOV     R4,A
   \   00008A   E4           CLR     A
   \   00008B   3F           ADDC    A,R7
   \   00008C   FD           MOV     R5,A
   \   00008D   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   00008F   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000091   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   000094   E9           MOV     A,R1
   \   000095   7003         JNZ     $+5
   \   000097   02....       LJMP    ??ZDApp_NwkDescListProcessing_9 & 0xFFFF
   2007                    continue;
   2008                  
   2009                }
   2010                
   2011                // check that network is allowing joining
   2012                if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   00009A   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   6008         JZ      ??ZDApp_NwkDescListProcessing_11
   \   0000A0   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   6401         XRL     A,#0x1
   \   0000A6   701D         JNZ     ??ZDApp_NwkDescListProcessing_12
   2013                {
   2014                  if ( stackProfilePro == FALSE )
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   0000A8   E5..         MOV     A,?V0
   \   0000AA   700C         JNZ     ??ZDApp_NwkDescListProcessing_13
   2015                  {
   2016                    if ( !pNwkDesc->routerCapacity )
   \   0000AC   8E82         MOV     DPL,R6
   \   0000AE   8F83         MOV     DPH,R7
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   7022         JNZ     ??ZDApp_NwkDescListProcessing_14
   2017                    {
   2018                      continue;
   \   0000B6   807A         SJMP    ??ZDApp_NwkDescListProcessing_9
   2019                    }
   2020                  }
   2021                  else
   2022                  {
   2023                    if ( !pNwkDesc->deviceCapacity )
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   0000B8   8E82         MOV     DPL,R6
   \   0000BA   8F83         MOV     DPH,R7
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   7015         JNZ     ??ZDApp_NwkDescListProcessing_14
   2024                    {
   2025                      continue;
   \   0000C3   806D         SJMP    ??ZDApp_NwkDescListProcessing_9
   2026                    }
   2027                  }
   2028                }
   2029                else if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   0000C5   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   6402         XRL     A,#0x2
   \   0000CB   700B         JNZ     ??ZDApp_NwkDescListProcessing_14
   2030                {
   2031                  if ( !pNwkDesc->deviceCapacity )
   \   0000CD   8E82         MOV     DPL,R6
   \   0000CF   8F83         MOV     DPH,R7
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   605A         JZ      ??ZDApp_NwkDescListProcessing_9
   2032                  {
   2033                    continue;
   2034                  }
   2035                }
   2036                
   2037                // check version of zigbee protocol
   2038                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   \                     ??ZDApp_NwkDescListProcessing_14:
   \   0000D8   8E82         MOV     DPL,R6
   \   0000DA   8F83         MOV     DPH,R7
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F8           MOV     R0,A
   \   0000E3   90....       MOV     DPTR,#_NIB + 17
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   68           XRL     A,R0
   \   0000E8   7048         JNZ     ??ZDApp_NwkDescListProcessing_9
   2039                  continue;
   2040                
   2041                // check version of stack profile
   2042                if ( pNwkDesc->stackProfile != zgStackProfile  )
   \   0000EA   8E82         MOV     DPL,R6
   \   0000EC   8F83         MOV     DPH,R7
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   F8           MOV     R0,A
   \   0000F6   90....       MOV     DPTR,#zgStackProfile
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   68           XRL     A,R0
   \   0000FB   6048         JZ      ??ZDApp_NwkDescListProcessing_5
   2043                {
   2044                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE)) 
   2045                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \   0000FD   90....       MOV     DPTR,#zgStackProfile
   \   000100   E0           MOVX    A,@DPTR
   \   000101   6401         XRL     A,#0x1
   \   000103   700F         JNZ     ??ZDApp_NwkDescListProcessing_15
   \   000105   8E82         MOV     DPL,R6
   \   000107   8F83         MOV     DPH,R7
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   6402         XRL     A,#0x2
   \   000112   6017         JZ      ??ZDApp_NwkDescListProcessing_16
   \                     ??ZDApp_NwkDescListProcessing_15:
   \   000114   90....       MOV     DPTR,#zgStackProfile
   \   000117   E0           MOVX    A,@DPTR
   \   000118   6402         XRL     A,#0x2
   \   00011A   7012         JNZ     ??ZDApp_NwkDescListProcessing_17
   \   00011C   8E82         MOV     DPL,R6
   \   00011E   8F83         MOV     DPH,R7
   \   000120   A3           INC     DPTR
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   A3           INC     DPTR
   \   000125   A3           INC     DPTR
   \   000126   E0           MOVX    A,@DPTR
   \   000127   6401         XRL     A,#0x1
   \   000129   7003         JNZ     ??ZDApp_NwkDescListProcessing_17
   2046                  {
   2047                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_16:
   \   00012B   75..01       MOV     ?V0,#0x1
   2048                  }
   2049                  
   2050                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_17:
   \   00012E   E5..         MOV     A,?V6
   \   000130   7013         JNZ     ??ZDApp_NwkDescListProcessing_5
   2051                  {
   2052                    continue;
   2053                  }
   2054                }
   2055                
   2056                break;
   2057              } 
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   000132   05..         INC     ?V4
   \   000134   EE           MOV     A,R6
   \   000135   2414         ADD     A,#0x14
   \   000137   F582         MOV     DPL,A
   \   000139   E4           CLR     A
   \   00013A   3F           ADDC    A,R7
   \   00013B   F583         MOV     DPH,A
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   FE           MOV     R6,A
   \   00013F   A3           INC     DPTR
   \   000140   E0           MOVX    A,@DPTR
   \   000141   FF           MOV     R7,A
   \   000142   02....       LJMP    ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2058              
   2059              if (i < ResultCount)
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   000145   E5..         MOV     A,?V4
   \   000147   C3           CLR     C
   \   000148   95..         SUBB    A,?V1
   \   00014A   5005         JNC     ??ZDApp_NwkDescListProcessing_18
   2060              {
   2061               selected = TRUE;
   \   00014C   75..01       MOV     ?V5,#0x1
   2062                break;
   \   00014F   800F         SJMP    ??ZDApp_NwkDescListProcessing_3
   2063              }
   2064             
   2065              // break if selected or stack profile pro wasn't found
   2066              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_18:
   \   000151   7401         MOV     A,#0x1
   \   000153   65..         XRL     A,?V5
   \   000155   6009         JZ      ??ZDApp_NwkDescListProcessing_3
   \   000157   E5..         MOV     A,?V0
   \   000159   6005         JZ      ??ZDApp_NwkDescListProcessing_3
   2067              {
   2068                break;
   2069              }
   2070            }
   \   00015B   05..         INC     ?V6
   \   00015D   02....       LJMP    ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   2071          
   2072            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   000160   E5..         MOV     A,?V1
   \   000162   65..         XRL     A,?V4
   \   000164   7006         JNZ     ??ZDApp_NwkDescListProcessing_19
   2073            {
   2074              return (NULL);   // couldn't find appropriate PAN to join !
   \   000166   7A00         MOV     R2,#0x0
   \   000168   7B00         MOV     R3,#0x0
   \   00016A   8004         SJMP    ??ZDApp_NwkDescListProcessing_20
   2075            }
   2076            else
   2077            {
   2078              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_19:
   \   00016C   EE           MOV     A,R6
   \   00016D   FA           MOV     R2,A
   \   00016E   EF           MOV     A,R7
   \   00016F   FB           MOV     R3,A
   \                     ??ZDApp_NwkDescListProcessing_20:
   \   000170   7F07         MOV     R7,#0x7
   \   000172   02....       LJMP    ?BANKED_LEAVE_XDATA
   2079            }
   2080          }// ZDApp_NwkDescListProcessing()
   2081          
   2082          /*********************************************************************
   2083           * @fn          ZDO_NetworkFormationConfirmCB
   2084           *
   2085           * @brief       This function reports the results of the request to
   2086           *              initialize a coordinator in a network.
   2087           *
   2088           * @param       Status - Result of NLME_NetworkFormationRequest()
   2089           *
   2090           * @return      none
   2091           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2092          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2093          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2094            nwkStatus = (byte)Status;
   \   000007   EE           MOV     A,R6
   \   000008   90....       MOV     DPTR,#nwkStatus
   \   00000B   F0           MOVX    @DPTR,A
   2095          
   2096            if ( Status == ZSUCCESS )
   \   00000C   EE           MOV     A,R6
   \   00000D   701E         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   2097            {
   2098          #ifndef GreenHouse
   2099              // LED on shows Coordinator started
   2100              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000F                ; Setup parameters for call to function HalLedSet
   \   00000F   7A01         MOV     R2,#0x1
   \   000011   7904         MOV     R1,#0x4
   \   000013   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   \   000016   E9           MOV     A,R1
   2101          
   2102              // LED off forgets HOLD_AUTO_START
   2103              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   \   000017                ; Setup parameters for call to function HalLedSet
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7908         MOV     R1,#0x8
   \   00001B   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   \   00001E   E9           MOV     A,R1
   2104          #endif
   2105          
   2106          #if defined ( ZBIT )
   2107              SIM_SetColor(0xd0ffd0);
   2108          #endif
   2109          
   2110              if ( devState == DEV_HOLD )
   \   00001F   90....       MOV     DPTR,#devState
   \   000022   E0           MOVX    A,@DPTR
   \   000023   7010         JNZ     ??ZDO_NetworkFormationConfirmCB_1
   2111              {
   2112                // Began with HOLD_AUTO_START
   2113                devState = DEV_COORD_STARTING;
   \   000025   90....       MOV     DPTR,#devState
   \   000028   7408         MOV     A,#0x8
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   8008         SJMP    ??ZDO_NetworkFormationConfirmCB_1
   2114              }
   2115            }
   2116          #if defined(BLINK_LEDS)
   2117            else
   2118            {
   2119          #ifndef GreenHouse
   2120              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   00002D                ; Setup parameters for call to function HalLedSet
   \   00002D   7A04         MOV     R2,#0x4
   \   00002F   7904         MOV     R1,#0x4
   \   000031   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   \   000034   E9           MOV     A,R1
   2121          #endif
   2122            }
   2123          #endif
   2124          
   2125            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   000035                ; Setup parameters for call to function osal_set_event
   \   000035   7A02         MOV     R2,#0x2
   \   000037   7B00         MOV     R3,#0x0
   \   000039   90....       MOV     DPTR,#ZDAppTaskID
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F9           MOV     R1,A
   \   00003E   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   000041   E9           MOV     A,R1
   2126          }
   \   000042   7F01         MOV     R7,#0x1
   \   000044   02....       LJMP    ?BANKED_LEAVE_XDATA
   2127          
   2128          /****************************************************************************
   2129           * @fn          ZDApp_beaconIndProcessing
   2130           *
   2131           * @brief       This function processes the incoming beacon indication.
   2132           *
   2133           *              When another task (MT or App) is registered to process
   2134           *              beacon indication themselves, this function will parse the 
   2135           *              beacon payload and pass the beacon descriptor to that task
   2136           *              If no other tasks registered, this function will process
   2137           *              the beacon payload and generate the network descriptor link
   2138           *              list.
   2139           *
   2140           * @param
   2141           *
   2142           * @return      none
   2143           *
   2144           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2145          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2146          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2147            // Pass the beacon Indication to another task if it registers the callback
   2148            // Otherwise, process the beacon notification here.
   2149            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV     DPTR,#zdoCBFunc + 6
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F9           MOV     R1,A
   \   000011   E8           MOV     A,R0
   \   000012   49           ORL     A,R1
   \   000013   6015         JZ      ??ZDO_beaconNotifyIndCB_0
   2150            {  
   2151              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000015                ; Setup parameters for indirect call
   \   000015   AA..         MOV     R2,?V0
   \   000017   AB..         MOV     R3,?V1
   \   000019   90....       MOV     DPTR,#zdoCBFunc + 6
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F8           MOV     R0,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F583         MOV     DPH,A
   \   000022   8882         MOV     DPL,R0
   \   000024   12....       LCALL   ?CALL_IND
   \   000027   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2152            }
   2153            else
   2154            {
   2155              networkDesc_t *pNwkDesc;
   2156              networkDesc_t *pLastNwkDesc;
   2157              uint8 found = false;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   00002A   75..00       MOV     ?V2,#0x0
   2158              
   2159              // Add the network to the Network Descriptor List
   2160              pNwkDesc = NwkDescList;
   \   00002D   90....       MOV     DPTR,#NwkDescList
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \   000035   E8           MOV     A,R0
   \   000036   FE           MOV     R6,A
   \   000037   E9           MOV     A,R1
   \   000038   FF           MOV     R7,A
   2161              pLastNwkDesc = NwkDescList;
   \   000039   90....       MOV     DPTR,#NwkDescList
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F8           MOV     R0,A
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   88..         MOV     ?V6,R0
   \   000043   89..         MOV     ?V7,R1
   2162              while (pNwkDesc)
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   000045   EE           MOV     A,R6
   \   000046   4F           ORL     A,R7
   \   000047   6049         JZ      ??ZDO_beaconNotifyIndCB_3
   2163              {
   2164                if ((pNwkDesc->panId == pBeacon->panID) &&
   2165                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F8           MOV     R0,A
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F9           MOV     R1,A
   \   000052   85..82       MOV     DPL,?V0
   \   000055   85..83       MOV     DPH,?V1
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   68           XRL     A,R0
   \   00005C   7003         JNZ     ??ZDO_beaconNotifyIndCB_4
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   69           XRL     A,R1
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   000061   701B         JNZ     ??ZDO_beaconNotifyIndCB_5
   \   000063   8E82         MOV     DPL,R6
   \   000065   8F83         MOV     DPH,R7
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F8           MOV     R0,A
   \   00006B   85..82       MOV     DPL,?V0
   \   00006E   85..83       MOV     DPH,?V1
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   68           XRL     A,R0
   \   000077   7005         JNZ     ??ZDO_beaconNotifyIndCB_5
   2166                {
   2167                  found = true;
   \   000079   75..01       MOV     ?V2,#0x1
   2168                  break;
   \   00007C   8014         SJMP    ??ZDO_beaconNotifyIndCB_3
   2169                }
   2170                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   00007E   8E..         MOV     ?V6,R6
   \   000080   8F..         MOV     ?V7,R7
   2171                pNwkDesc = pNwkDesc->nextDesc;
   \   000082   EE           MOV     A,R6
   \   000083   2414         ADD     A,#0x14
   \   000085   F582         MOV     DPL,A
   \   000087   E4           CLR     A
   \   000088   3F           ADDC    A,R7
   \   000089   F583         MOV     DPH,A
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   FE           MOV     R6,A
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   FF           MOV     R7,A
   \   000090   80B3         SJMP    ??ZDO_beaconNotifyIndCB_2
   2172              }
   2173              
   2174              // If no existing descriptor found, make a new one and add to the list
   2175              if (found == false)
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   000092   E5..         MOV     A,?V2
   \   000094   706C         JNZ     ??ZDO_beaconNotifyIndCB_6
   2176              {
   2177                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   000096                ; Setup parameters for call to function osal_mem_alloc
   \   000096   7A16         MOV     R2,#0x16
   \   000098   7B00         MOV     R3,#0x0
   \   00009A   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00009D   8A..         MOV     ?V4,R2
   \   00009F   8B..         MOV     ?V5,R3
   \   0000A1   AE..         MOV     R6,?V4
   \   0000A3   AF..         MOV     R7,?V5
   2178                if ( !pNwkDesc )
   \   0000A5   EE           MOV     A,R6
   \   0000A6   4F           ORL     A,R7
   \   0000A7   7003         JNZ     $+5
   \   0000A9   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2179                {
   2180                  // Memory alloc failed, discard this beacon
   2181                  return;
   2182                }
   2183                
   2184                // Clear the network descriptor
   2185                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   0000AC                ; Setup parameters for call to function osal_memset
   \   0000AC   7C16         MOV     R4,#0x16
   \   0000AE   7D00         MOV     R5,#0x0
   \   0000B0   7900         MOV     R1,#0x0
   \   0000B2   EE           MOV     A,R6
   \   0000B3   FA           MOV     R2,A
   \   0000B4   EF           MOV     A,R7
   \   0000B5   FB           MOV     R3,A
   \   0000B6   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   2186                
   2187                // Initialize the descriptor
   2188                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   0000B9   8E82         MOV     DPL,R6
   \   0000BB   8F83         MOV     DPH,R7
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   74FE         MOV     A,#-0x2
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   74FF         MOV     A,#-0x1
   \   0000CA   F0           MOVX    @DPTR,A
   2189                pNwkDesc->chosenRouterDepth = 0xFF;
   \   0000CB   8E82         MOV     DPL,R6
   \   0000CD   8F83         MOV     DPH,R7
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   74FF         MOV     A,#-0x1
   \   0000DB   F0           MOVX    @DPTR,A
   2190                
   2191                // Save new entry into the descriptor list
   2192                if ( !NwkDescList )
   \   0000DC   90....       MOV     DPTR,#NwkDescList
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   F8           MOV     R0,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   F9           MOV     R1,A
   \   0000E4   E8           MOV     A,R0
   \   0000E5   49           ORL     A,R1
   \   0000E6   700A         JNZ     ??ZDO_beaconNotifyIndCB_7
   2193                {
   2194                  NwkDescList = pNwkDesc;
   \   0000E8   90....       MOV     DPTR,#NwkDescList
   \   0000EB   EE           MOV     A,R6
   \   0000EC   F0           MOVX    @DPTR,A
   \   0000ED   A3           INC     DPTR
   \   0000EE   EF           MOV     A,R7
   \   0000EF   F0           MOVX    @DPTR,A
   \   0000F0   8010         SJMP    ??ZDO_beaconNotifyIndCB_6
   2195                }
   2196                else
   2197                {
   2198                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   0000F2   E5..         MOV     A,?V6
   \   0000F4   2414         ADD     A,#0x14
   \   0000F6   F582         MOV     DPL,A
   \   0000F8   E4           CLR     A
   \   0000F9   35..         ADDC    A,?V7
   \   0000FB   F583         MOV     DPH,A
   \   0000FD   EE           MOV     A,R6
   \   0000FE   F0           MOVX    @DPTR,A
   \   0000FF   A3           INC     DPTR
   \   000100   EF           MOV     A,R7
   \   000101   F0           MOVX    @DPTR,A
   2199                }
   2200              }
   2201              
   2202              // Update the descriptor with the incoming beacon
   2203              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   000102   85..82       MOV     DPL,?V0
   \   000105   85..83       MOV     DPH,?V1
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   E0           MOVX    A,@DPTR
   \   000112   C0E0         PUSH    A
   \   000114   8E82         MOV     DPL,R6
   \   000116   8F83         MOV     DPH,R7
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   D0E0         POP     A
   \   000120   F0           MOVX    @DPTR,A
   2204              pNwkDesc->version        = pBeacon->protocolVersion;
   \   000121   85..82       MOV     DPL,?V0
   \   000124   85..83       MOV     DPH,?V1
   \   000127   A3           INC     DPTR
   \   000128   A3           INC     DPTR
   \   000129   A3           INC     DPTR
   \   00012A   A3           INC     DPTR
   \   00012B   A3           INC     DPTR
   \   00012C   A3           INC     DPTR
   \   00012D   A3           INC     DPTR
   \   00012E   A3           INC     DPTR
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   C0E0         PUSH    A
   \   000132   8E82         MOV     DPL,R6
   \   000134   8F83         MOV     DPH,R7
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   D0E0         POP     A
   \   00013D   F0           MOVX    @DPTR,A
   2205              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \   00013E   85..82       MOV     DPL,?V0
   \   000141   85..83       MOV     DPH,?V1
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   C0E0         PUSH    A
   \   00014B   8E82         MOV     DPL,R6
   \   00014D   8F83         MOV     DPH,R7
   \   00014F   A3           INC     DPTR
   \   000150   A3           INC     DPTR
   \   000151   D0E0         POP     A
   \   000153   F0           MOVX    @DPTR,A
   2206              pNwkDesc->panId          = pBeacon->panID;
   \   000154   85..82       MOV     DPL,?V0
   \   000157   85..83       MOV     DPH,?V1
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   F8           MOV     R0,A
   \   00015E   A3           INC     DPTR
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   F9           MOV     R1,A
   \   000161   8E82         MOV     DPL,R6
   \   000163   8F83         MOV     DPH,R7
   \   000165   E8           MOV     A,R0
   \   000166   F0           MOVX    @DPTR,A
   \   000167   A3           INC     DPTR
   \   000168   E9           MOV     A,R1
   \   000169   F0           MOVX    @DPTR,A
   2207              pNwkDesc->updateId       = pBeacon->updateID;
   \   00016A   E5..         MOV     A,?V0
   \   00016C   240C         ADD     A,#0xc
   \   00016E   F582         MOV     DPL,A
   \   000170   E4           CLR     A
   \   000171   35..         ADDC    A,?V1
   \   000173   F583         MOV     DPH,A
   \   000175   E0           MOVX    A,@DPTR
   \   000176   C0E0         PUSH    A
   \   000178   EE           MOV     A,R6
   \   000179   2413         ADD     A,#0x13
   \   00017B   F582         MOV     DPL,A
   \   00017D   E4           CLR     A
   \   00017E   3F           ADDC    A,R7
   \   00017F   F583         MOV     DPH,A
   \   000181   D0E0         POP     A
   \   000183   F0           MOVX    @DPTR,A
   2208              
   2209              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2210              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   000184   85..82       MOV     DPL,?V0
   \   000187   85..83       MOV     DPH,?V1
   \   00018A   A3           INC     DPTR
   \   00018B   A3           INC     DPTR
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   A3           INC     DPTR
   \   00018F   A3           INC     DPTR
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   E0           MOVX    A,@DPTR
   \   000193   6401         XRL     A,#0x1
   \   000195   6015         JZ      ??ZDO_beaconNotifyIndCB_8
   2211              {
   2212                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   000197                ; Setup parameters for call to function sAddrExtCpy
   \   000197   E5..         MOV     A,?V0
   \   000199   240D         ADD     A,#0xd
   \   00019B   FC           MOV     R4,A
   \   00019C   E4           CLR     A
   \   00019D   35..         ADDC    A,?V1
   \   00019F   FD           MOV     R5,A
   \   0001A0   EE           MOV     A,R6
   \   0001A1   240B         ADD     A,#0xb
   \   0001A3   FA           MOV     R2,A
   \   0001A4   E4           CLR     A
   \   0001A5   3F           ADDC    A,R7
   \   0001A6   FB           MOV     R3,A
   \   0001A7   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   0001AA   8010         SJMP    ??ZDO_beaconNotifyIndCB_9
   2213              }
   2214              else
   2215              {
   2216                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   0001AC                ; Setup parameters for call to function osal_memset
   \   0001AC   7C08         MOV     R4,#0x8
   \   0001AE   7D00         MOV     R5,#0x0
   \   0001B0   79FF         MOV     R1,#-0x1
   \   0001B2   EE           MOV     A,R6
   \   0001B3   240B         ADD     A,#0xb
   \   0001B5   FA           MOV     R2,A
   \   0001B6   E4           CLR     A
   \   0001B7   3F           ADDC    A,R7
   \   0001B8   FB           MOV     R3,A
   \   0001B9   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   2217              }
   2218              
   2219              // check if this device is a better choice to join...
   2220              // ...dont bother checking assocPermit flag is doing a rejoin
   2221              if ( ( pBeacon->LQI > gMIN_TREE_LINK_COST ) &&
   2222                  ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   0001BC   85..82       MOV     DPL,?V0
   \   0001BF   85..83       MOV     DPH,?V1
   \   0001C2   A3           INC     DPTR
   \   0001C3   A3           INC     DPTR
   \   0001C4   A3           INC     DPTR
   \   0001C5   A3           INC     DPTR
   \   0001C6   A3           INC     DPTR
   \   0001C7   A3           INC     DPTR
   \   0001C8   A3           INC     DPTR
   \   0001C9   A3           INC     DPTR
   \   0001CA   A3           INC     DPTR
   \   0001CB   A3           INC     DPTR
   \   0001CC   E0           MOVX    A,@DPTR
   \   0001CD   F8           MOV     R0,A
   \   0001CE   90....       MOV     DPTR,#gMIN_TREE_LINK_COST
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   C3           CLR     C
   \   0001D3   98           SUBB    A,R0
   \   0001D4   4003         JC      $+5
   \   0001D6   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   0001D9   85..82       MOV     DPL,?V0
   \   0001DC   85..83       MOV     DPH,?V1
   \   0001DF   A3           INC     DPTR
   \   0001E0   A3           INC     DPTR
   \   0001E1   A3           INC     DPTR
   \   0001E2   A3           INC     DPTR
   \   0001E3   A3           INC     DPTR
   \   0001E4   E0           MOVX    A,@DPTR
   \   0001E5   6401         XRL     A,#0x1
   \   0001E7   6009         JZ      ??ZDO_beaconNotifyIndCB_10
   \   0001E9   90....       MOV     DPTR,#_tmpRejoinState
   \   0001EC   E0           MOVX    A,@DPTR
   \   0001ED   7003         JNZ     $+5
   \   0001EF   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2223              {
   2224                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   0001F2   7800         MOV     R0,#0x0
   2225                uint8 capacity = FALSE;
   \   0001F4   7900         MOV     R1,#0x0
   2226                
   2227                if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \   0001F6   90....       MOV     DPTR,#_NIB + 96
   \   0001F9   E0           MOVX    A,@DPTR
   \   0001FA   6402         XRL     A,#0x2
   \   0001FC   707C         JNZ     ??ZDO_beaconNotifyIndCB_11
   2228                {
   2229                  if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2230                        (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2231                      ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2232                       (pBeacon->depth < pNwkDesc->chosenRouterDepth)) ) 
   \   0001FE   85..82       MOV     DPL,?V0
   \   000201   85..83       MOV     DPH,?V1
   \   000204   A3           INC     DPTR
   \   000205   A3           INC     DPTR
   \   000206   A3           INC     DPTR
   \   000207   A3           INC     DPTR
   \   000208   A3           INC     DPTR
   \   000209   A3           INC     DPTR
   \   00020A   A3           INC     DPTR
   \   00020B   A3           INC     DPTR
   \   00020C   A3           INC     DPTR
   \   00020D   A3           INC     DPTR
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   FA           MOV     R2,A
   \   000210   8E82         MOV     DPL,R6
   \   000212   8F83         MOV     DPH,R7
   \   000214   A3           INC     DPTR
   \   000215   A3           INC     DPTR
   \   000216   A3           INC     DPTR
   \   000217   A3           INC     DPTR
   \   000218   A3           INC     DPTR
   \   000219   A3           INC     DPTR
   \   00021A   A3           INC     DPTR
   \   00021B   A3           INC     DPTR
   \   00021C   A3           INC     DPTR
   \   00021D   E0           MOVX    A,@DPTR
   \   00021E   C3           CLR     C
   \   00021F   9A           SUBB    A,R2
   \   000220   5011         JNC     ??ZDO_beaconNotifyIndCB_12
   \   000222   E5..         MOV     A,?V0
   \   000224   240B         ADD     A,#0xb
   \   000226   F582         MOV     DPL,A
   \   000228   E4           CLR     A
   \   000229   35..         ADDC    A,?V1
   \   00022B   F583         MOV     DPH,A
   \   00022D   E0           MOVX    A,@DPTR
   \   00022E   C3           CLR     C
   \   00022F   9414         SUBB    A,#0x14
   \   000231   4043         JC      ??ZDO_beaconNotifyIndCB_13
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   000233   85..82       MOV     DPL,?V0
   \   000236   85..83       MOV     DPH,?V1
   \   000239   A3           INC     DPTR
   \   00023A   A3           INC     DPTR
   \   00023B   A3           INC     DPTR
   \   00023C   A3           INC     DPTR
   \   00023D   A3           INC     DPTR
   \   00023E   A3           INC     DPTR
   \   00023F   A3           INC     DPTR
   \   000240   A3           INC     DPTR
   \   000241   A3           INC     DPTR
   \   000242   A3           INC     DPTR
   \   000243   E0           MOVX    A,@DPTR
   \   000244   FA           MOV     R2,A
   \   000245   8E82         MOV     DPL,R6
   \   000247   8F83         MOV     DPH,R7
   \   000249   A3           INC     DPTR
   \   00024A   A3           INC     DPTR
   \   00024B   A3           INC     DPTR
   \   00024C   A3           INC     DPTR
   \   00024D   A3           INC     DPTR
   \   00024E   A3           INC     DPTR
   \   00024F   A3           INC     DPTR
   \   000250   A3           INC     DPTR
   \   000251   A3           INC     DPTR
   \   000252   E0           MOVX    A,@DPTR
   \   000253   6A           XRL     A,R2
   \   000254   7046         JNZ     ??ZDO_beaconNotifyIndCB_14
   \   000256   8E82         MOV     DPL,R6
   \   000258   8F83         MOV     DPH,R7
   \   00025A   A3           INC     DPTR
   \   00025B   A3           INC     DPTR
   \   00025C   A3           INC     DPTR
   \   00025D   A3           INC     DPTR
   \   00025E   A3           INC     DPTR
   \   00025F   A3           INC     DPTR
   \   000260   A3           INC     DPTR
   \   000261   A3           INC     DPTR
   \   000262   A3           INC     DPTR
   \   000263   A3           INC     DPTR
   \   000264   E0           MOVX    A,@DPTR
   \   000265   FA           MOV     R2,A
   \   000266   E5..         MOV     A,?V0
   \   000268   240B         ADD     A,#0xb
   \   00026A   F582         MOV     DPL,A
   \   00026C   E4           CLR     A
   \   00026D   35..         ADDC    A,?V1
   \   00026F   F583         MOV     DPH,A
   \   000271   E0           MOVX    A,@DPTR
   \   000272   C3           CLR     C
   \   000273   9A           SUBB    A,R2
   \   000274   5026         JNC     ??ZDO_beaconNotifyIndCB_14
   2233                  {
   2234                    selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   000276   7801         MOV     R0,#0x1
   \   000278   8022         SJMP    ??ZDO_beaconNotifyIndCB_14
   2235                  }
   2236                }
   2237                else
   2238                {
   2239                  if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   00027A   8E82         MOV     DPL,R6
   \   00027C   8F83         MOV     DPH,R7
   \   00027E   A3           INC     DPTR
   \   00027F   A3           INC     DPTR
   \   000280   A3           INC     DPTR
   \   000281   A3           INC     DPTR
   \   000282   A3           INC     DPTR
   \   000283   A3           INC     DPTR
   \   000284   A3           INC     DPTR
   \   000285   A3           INC     DPTR
   \   000286   A3           INC     DPTR
   \   000287   A3           INC     DPTR
   \   000288   E0           MOVX    A,@DPTR
   \   000289   FA           MOV     R2,A
   \   00028A   E5..         MOV     A,?V0
   \   00028C   240B         ADD     A,#0xb
   \   00028E   F582         MOV     DPL,A
   \   000290   E4           CLR     A
   \   000291   35..         ADDC    A,?V1
   \   000293   F583         MOV     DPH,A
   \   000295   E0           MOVX    A,@DPTR
   \   000296   C3           CLR     C
   \   000297   9A           SUBB    A,R2
   \   000298   5002         JNC     ??ZDO_beaconNotifyIndCB_14
   2240                  {
   2241                    selected = TRUE;
   \   00029A   7801         MOV     R0,#0x1
   2242                  }
   2243                }
   2244                
   2245                if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   00029C   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00029F   E0           MOVX    A,@DPTR
   \   0002A0   6008         JZ      ??ZDO_beaconNotifyIndCB_15
   \   0002A2   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0002A5   E0           MOVX    A,@DPTR
   \   0002A6   6401         XRL     A,#0x1
   \   0002A8   7010         JNZ     ??ZDO_beaconNotifyIndCB_16
   2246                {
   2247                  capacity = pBeacon->routerCapacity;
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   0002AA   85..82       MOV     DPL,?V0
   \   0002AD   85..83       MOV     DPH,?V1
   \   0002B0   A3           INC     DPTR
   \   0002B1   A3           INC     DPTR
   \   0002B2   A3           INC     DPTR
   \   0002B3   A3           INC     DPTR
   \   0002B4   A3           INC     DPTR
   \   0002B5   A3           INC     DPTR
   \   0002B6   E0           MOVX    A,@DPTR
   \   0002B7   F9           MOV     R1,A
   \   0002B8   8017         SJMP    ??ZDO_beaconNotifyIndCB_17
   2248                }
   2249                else if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDO_beaconNotifyIndCB_16:
   \   0002BA   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0002BD   E0           MOVX    A,@DPTR
   \   0002BE   6402         XRL     A,#0x2
   \   0002C0   700F         JNZ     ??ZDO_beaconNotifyIndCB_17
   2250                {
   2251                  capacity = pBeacon->deviceCapacity;
   \   0002C2   85..82       MOV     DPL,?V0
   \   0002C5   85..83       MOV     DPH,?V1
   \   0002C8   A3           INC     DPTR
   \   0002C9   A3           INC     DPTR
   \   0002CA   A3           INC     DPTR
   \   0002CB   A3           INC     DPTR
   \   0002CC   A3           INC     DPTR
   \   0002CD   A3           INC     DPTR
   \   0002CE   A3           INC     DPTR
   \   0002CF   E0           MOVX    A,@DPTR
   \   0002D0   F9           MOV     R1,A
   2252                }
   2253                
   2254                if ( (capacity) && (selected) )
   \                     ??ZDO_beaconNotifyIndCB_17:
   \   0002D1   E9           MOV     A,R1
   \   0002D2   6060         JZ      ??ZDO_beaconNotifyIndCB_18
   \   0002D4   E8           MOV     A,R0
   \   0002D5   605D         JZ      ??ZDO_beaconNotifyIndCB_18
   2255                {
   2256                  // this is the new chosen router for joining...
   2257                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   0002D7   85..82       MOV     DPL,?V0
   \   0002DA   85..83       MOV     DPH,?V1
   \   0002DD   E0           MOVX    A,@DPTR
   \   0002DE   FA           MOV     R2,A
   \   0002DF   A3           INC     DPTR
   \   0002E0   E0           MOVX    A,@DPTR
   \   0002E1   FB           MOV     R3,A
   \   0002E2   8E82         MOV     DPL,R6
   \   0002E4   8F83         MOV     DPH,R7
   \   0002E6   A3           INC     DPTR
   \   0002E7   A3           INC     DPTR
   \   0002E8   A3           INC     DPTR
   \   0002E9   A3           INC     DPTR
   \   0002EA   A3           INC     DPTR
   \   0002EB   A3           INC     DPTR
   \   0002EC   A3           INC     DPTR
   \   0002ED   EA           MOV     A,R2
   \   0002EE   F0           MOVX    @DPTR,A
   \   0002EF   A3           INC     DPTR
   \   0002F0   EB           MOV     A,R3
   \   0002F1   F0           MOVX    @DPTR,A
   2258                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \   0002F2   85..82       MOV     DPL,?V0
   \   0002F5   85..83       MOV     DPH,?V1
   \   0002F8   A3           INC     DPTR
   \   0002F9   A3           INC     DPTR
   \   0002FA   A3           INC     DPTR
   \   0002FB   A3           INC     DPTR
   \   0002FC   A3           INC     DPTR
   \   0002FD   A3           INC     DPTR
   \   0002FE   A3           INC     DPTR
   \   0002FF   A3           INC     DPTR
   \   000300   A3           INC     DPTR
   \   000301   A3           INC     DPTR
   \   000302   E0           MOVX    A,@DPTR
   \   000303   C0E0         PUSH    A
   \   000305   8E82         MOV     DPL,R6
   \   000307   8F83         MOV     DPH,R7
   \   000309   A3           INC     DPTR
   \   00030A   A3           INC     DPTR
   \   00030B   A3           INC     DPTR
   \   00030C   A3           INC     DPTR
   \   00030D   A3           INC     DPTR
   \   00030E   A3           INC     DPTR
   \   00030F   A3           INC     DPTR
   \   000310   A3           INC     DPTR
   \   000311   A3           INC     DPTR
   \   000312   D0E0         POP     A
   \   000314   F0           MOVX    @DPTR,A
   2259                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   \   000315   E5..         MOV     A,?V0
   \   000317   240B         ADD     A,#0xb
   \   000319   F582         MOV     DPL,A
   \   00031B   E4           CLR     A
   \   00031C   35..         ADDC    A,?V1
   \   00031E   F583         MOV     DPH,A
   \   000320   E0           MOVX    A,@DPTR
   \   000321   C0E0         PUSH    A
   \   000323   8E82         MOV     DPL,R6
   \   000325   8F83         MOV     DPH,R7
   \   000327   A3           INC     DPTR
   \   000328   A3           INC     DPTR
   \   000329   A3           INC     DPTR
   \   00032A   A3           INC     DPTR
   \   00032B   A3           INC     DPTR
   \   00032C   A3           INC     DPTR
   \   00032D   A3           INC     DPTR
   \   00032E   A3           INC     DPTR
   \   00032F   A3           INC     DPTR
   \   000330   A3           INC     DPTR
   \   000331   D0E0         POP     A
   \   000333   F0           MOVX    @DPTR,A
   2260                }
   2261                
   2262                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_18:
   \   000334   85..82       MOV     DPL,?V0
   \   000337   85..83       MOV     DPH,?V1
   \   00033A   A3           INC     DPTR
   \   00033B   A3           INC     DPTR
   \   00033C   A3           INC     DPTR
   \   00033D   A3           INC     DPTR
   \   00033E   A3           INC     DPTR
   \   00033F   A3           INC     DPTR
   \   000340   A3           INC     DPTR
   \   000341   E0           MOVX    A,@DPTR
   \   000342   600B         JZ      ??ZDO_beaconNotifyIndCB_19
   2263                  pNwkDesc->deviceCapacity = 1;
   \   000344   8E82         MOV     DPL,R6
   \   000346   8F83         MOV     DPH,R7
   \   000348   A3           INC     DPTR
   \   000349   A3           INC     DPTR
   \   00034A   A3           INC     DPTR
   \   00034B   A3           INC     DPTR
   \   00034C   7401         MOV     A,#0x1
   \   00034E   F0           MOVX    @DPTR,A
   2264                
   2265                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_19:
   \   00034F   85..82       MOV     DPL,?V0
   \   000352   85..83       MOV     DPH,?V1
   \   000355   A3           INC     DPTR
   \   000356   A3           INC     DPTR
   \   000357   A3           INC     DPTR
   \   000358   A3           INC     DPTR
   \   000359   A3           INC     DPTR
   \   00035A   A3           INC     DPTR
   \   00035B   E0           MOVX    A,@DPTR
   \   00035C   600A         JZ      ??ZDO_beaconNotifyIndCB_1
   2266                  pNwkDesc->routerCapacity = 1;
   \   00035E   8E82         MOV     DPL,R6
   \   000360   8F83         MOV     DPH,R7
   \   000362   A3           INC     DPTR
   \   000363   A3           INC     DPTR
   \   000364   A3           INC     DPTR
   \   000365   7401         MOV     A,#0x1
   \   000367   F0           MOVX    @DPTR,A
   2267              }
   2268            }
   2269          }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   000368   7F08         MOV     R7,#0x8
   \   00036A   02....       LJMP    ?BANKED_LEAVE_XDATA
   2270          
   2271          /*********************************************************************
   2272           * @fn          ZDO_StartRouterConfirmCB
   2273           *
   2274           * @brief       This function reports the results of the request to
   2275           *              start functioning as a router in a network.
   2276           *
   2277           * @param       Status - Result of NLME_StartRouterRequest()
   2278           *
   2279           * @return      none
   2280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2281          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2282          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2283            nwkStatus = (byte)Status;
   \   000007   EE           MOV     A,R6
   \   000008   90....       MOV     DPTR,#nwkStatus
   \   00000B   F0           MOVX    @DPTR,A
   2284          
   2285            if ( Status == ZSUCCESS )
   \   00000C   EE           MOV     A,R6
   \   00000D   701E         JNZ     ??ZDO_StartRouterConfirmCB_0
   2286            {
   2287          #ifndef GreenHouse
   2288              // LED on shows Router started
   2289              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000F                ; Setup parameters for call to function HalLedSet
   \   00000F   7A01         MOV     R2,#0x1
   \   000011   7904         MOV     R1,#0x4
   \   000013   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   \   000016   E9           MOV     A,R1
   2290              // LED off forgets HOLD_AUTO_START
   2291              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000017                ; Setup parameters for call to function HalLedSet
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7908         MOV     R1,#0x8
   \   00001B   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   \   00001E   E9           MOV     A,R1
   2292          #endif
   2293              if ( devState == DEV_HOLD )
   \   00001F   90....       MOV     DPTR,#devState
   \   000022   E0           MOVX    A,@DPTR
   \   000023   7010         JNZ     ??ZDO_StartRouterConfirmCB_1
   2294              {
   2295                // Began with HOLD_AUTO_START
   2296                devState = DEV_END_DEVICE;
   \   000025   90....       MOV     DPTR,#devState
   \   000028   7406         MOV     A,#0x6
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   8008         SJMP    ??ZDO_StartRouterConfirmCB_1
   2297              }
   2298            }
   2299          #if defined(BLINK_LEDS)
   2300            else
   2301            {
   2302          #ifndef GreenHouse
   2303              HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   00002D                ; Setup parameters for call to function HalLedSet
   \   00002D   7A04         MOV     R2,#0x4
   \   00002F   7904         MOV     R1,#0x4
   \   000031   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   \   000034   E9           MOV     A,R1
   2304          #endif
   2305            }
   2306          #endif
   2307          
   2308            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_1:
   \   000035                ; Setup parameters for call to function osal_set_event
   \   000035   7A20         MOV     R2,#0x20
   \   000037   7B00         MOV     R3,#0x0
   \   000039   90....       MOV     DPTR,#ZDAppTaskID
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F9           MOV     R1,A
   \   00003E   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   000041   E9           MOV     A,R1
   2309          }
   \   000042   7F01         MOV     R7,#0x1
   \   000044   02....       LJMP    ?BANKED_LEAVE_XDATA
   2310          
   2311          /*********************************************************************
   2312           * @fn          ZDO_JoinConfirmCB
   2313           *
   2314           * @brief       This function allows the next hight layer to be notified
   2315           *              of the results of its request to join itself or another
   2316           *              device to a network.
   2317           *
   2318           * @param       Status - Result of NLME_JoinRequest()
   2319           *
   2320           * @return      none
   2321           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2322          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2323          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0,R1
   2324            (void)PanId;  // remove if this parameter is used.
   2325            
   2326            nwkStatus = (byte)Status;
   \   000010   E5..         MOV     A,?V0
   \   000012   90....       MOV     DPTR,#nwkStatus
   \   000015   F0           MOVX    @DPTR,A
   2327          
   2328            if ( Status == ZSUCCESS )
   \   000016   E5..         MOV     A,?V0
   \   000018   7021         JNZ     ??ZDO_JoinConfirmCB_0
   2329            {
   2330          #ifndef GreenHouse
   2331              // LED on shows device joined
   2332              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00001A                ; Setup parameters for call to function HalLedSet
   \   00001A   7A01         MOV     R2,#0x1
   \   00001C   7904         MOV     R1,#0x4
   \   00001E   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   \   000021   E9           MOV     A,R1
   2333              // LED off forgets HOLD_AUTO_START
   2334              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000022                ; Setup parameters for call to function HalLedSet
   \   000022   7A00         MOV     R2,#0x0
   \   000024   7908         MOV     R1,#0x8
   \   000026   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   \   000029   E9           MOV     A,R1
   2335          #endif
   2336              if ( (devState == DEV_HOLD) )
   \   00002A   90....       MOV     DPTR,#devState
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   7006         JNZ     ??ZDO_JoinConfirmCB_1
   2337              {
   2338                // Began with HOLD_AUTO_START
   2339                devState = DEV_NWK_JOINING;
   \   000030   90....       MOV     DPTR,#devState
   \   000033   7403         MOV     A,#0x3
   \   000035   F0           MOVX    @DPTR,A
   2340              }
   2341          
   2342              if ( !ZG_SECURE_ENABLED )
   2343              {
   2344                // Notify to save info into NV
   2345                ZDApp_NVUpdate();
   \                     ??ZDO_JoinConfirmCB_1:
   \   000036                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000036   12....       LCALL   ??ZDApp_NVUpdate?relay; Banked call to: ZDApp_NVUpdate
   \   000039   8008         SJMP    ??ZDO_JoinConfirmCB_2
   2346              }
   2347            }
   2348            else
   2349            {
   2350          #if defined(BLINK_LEDS)
   2351          #ifndef GreenHouse
   2352              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_JoinConfirmCB_0:
   \   00003B                ; Setup parameters for call to function HalLedSet
   \   00003B   7A04         MOV     R2,#0x4
   \   00003D   7904         MOV     R1,#0x4
   \   00003F   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   \   000042   E9           MOV     A,R1
   2353          #endif
   2354          #endif
   2355            }
   2356              
   2357            // Pass the join confirm to higher layer if callback registered
   2358            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_2:
   \   000043   90....       MOV     DPTR,#zdoCBFunc + 8
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F8           MOV     R0,A
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
   \   00004B   E8           MOV     A,R0
   \   00004C   49           ORL     A,R1
   \   00004D   6043         JZ      ??ZDO_JoinConfirmCB_3
   2359            {  
   2360              zdoJoinCnf_t joinCnf;
   2361              
   2362              joinCnf.status = Status;
   \   00004F   E5..         MOV     A,?V0
   \   000051   C0E0         PUSH    A
   \   000053   85..82       MOV     DPL,?XSP + 0
   \   000056   85..83       MOV     DPH,?XSP + 1
   \   000059   D0E0         POP     A
   \   00005B   F0           MOVX    @DPTR,A
   2363              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   00005C   90....       MOV     DPTR,#_NIB + 20
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F8           MOV     R0,A
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
   \   000064   7401         MOV     A,#0x1
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   E8           MOV     A,R0
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   E9           MOV     A,R1
   \   00006D   F0           MOVX    @DPTR,A
   2364              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \   00006E   90....       MOV     DPTR,#_NIB + 23
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F8           MOV     R0,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F9           MOV     R1,A
   \   000076   7403         MOV     A,#0x3
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   E8           MOV     A,R0
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   A3           INC     DPTR
   \   00007E   E9           MOV     A,R1
   \   00007F   F0           MOVX    @DPTR,A
   2365                     
   2366              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   \   000080                ; Setup parameters for indirect call
   \   000080   AA..         MOV     R2,?XSP + 0
   \   000082   AB..         MOV     R3,?XSP + 1
   \   000084   90....       MOV     DPTR,#zdoCBFunc + 8
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F8           MOV     R0,A
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F583         MOV     DPH,A
   \   00008D   8882         MOV     DPL,R0
   \   00008F   12....       LCALL   ?CALL_IND
   2367            }
   2368            
   2369            // Notify ZDApp
   2370            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_3:
   \   000092                ; Setup parameters for call to function ZDApp_SendMsg
   \   000092   7C00         MOV     R4,#0x0
   \   000094   7D00         MOV     R5,#0x0
   \   000096   7B02         MOV     R3,#0x2
   \   000098   7A02         MOV     R2,#0x2
   \   00009A   90....       MOV     DPTR,#ZDAppTaskID
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   F9           MOV     R1,A
   \   00009F   12....       LCALL   ??ZDApp_SendMsg?relay; Banked call to: ZDApp_SendMsg
   2371            
   2372          }
   \   0000A2   7405         MOV     A,#0x5
   \   0000A4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A7   7F01         MOV     R7,#0x1
   \   0000A9   02....       LJMP    ?BANKED_LEAVE_XDATA
   2373          
   2374          /*********************************************************************
   2375           * @fn          ZDO_AddrChangeIndicationCB
   2376           *
   2377           * @brief       This function notifies the application that this
   2378           *              device's address has changed.  Could happen in 
   2379           *              a network with stochastic addressing (PRO).
   2380           *
   2381           * @param       newAddr - the new address
   2382           *
   2383           * @return      none
   2384           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2385          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2386          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2387            (void)newAddr;  // remove if this parameter is used
   2388            
   2389            // Notify to save info into NV
   2390            ZDApp_NVUpdate();
   \   000009                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000009   12....       LCALL   ??ZDApp_NVUpdate?relay; Banked call to: ZDApp_NVUpdate
   2391          
   2392            // Notify the applications   
   2393            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00000C                ; Setup parameters for call to function osal_set_event
   \   00000C   7A10         MOV     R2,#0x10
   \   00000E   7B00         MOV     R3,#0x0
   \   000010   90....       MOV     DPTR,#ZDAppTaskID
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   000018   E9           MOV     A,R1
   2394          
   2395            // Send out a device announce
   2396            ZDApp_AnnounceNewAddress();
   \   000019                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000019   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay; Banked call to: ZDApp_AnnounceNewAddress
   2397          }
   \   00001C   7F01         MOV     R7,#0x1
   \   00001E   02....       LJMP    ?BANKED_LEAVE_XDATA
   2398          
   2399          /*********************************************************************
   2400           * @fn          ZDO_JoinIndicationCB
   2401           *
   2402           * @brief       This function allows the next higher layer of a
   2403           *              coordinator to be notified of a remote join request.
   2404           *
   2405           * @param       ShortAddress - 16-bit address
   2406           * @param       ExtendedAddress - IEEE (64-bit) address
   2407           * @param       CapabilityFlags - Association Capability Flags
   2408           * @param       type - of joining - 
   2409           *                          NWK_ASSOC_JOIN
   2410           *                          NWK_ASSOC_REJOIN_UNSECURE
   2411           *                          NWK_ASSOC_REJOIN_SECURE
   2412           *
   2413           * @return      ZStatus_t
   2414           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2415          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2416                                          uint8 CapabilityFlags, uint8 type)
   2417          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   89..         MOV     ?V2,R1
   2418            (void)ShortAddress;
   2419            (void)ExtendedAddress;
   2420          #if ZDO_NV_SAVE_RFDs
   2421            (void)CapabilityFlags;
   2422            
   2423          #else  // if !ZDO_NV_SAVE_RFDs
   2424            if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   2425          #endif
   2426            {
   2427              ZDApp_NVUpdate();  // Notify to save info into NV.
   \   00000F                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000F   12....       LCALL   ??ZDApp_NVUpdate?relay; Banked call to: ZDApp_NVUpdate
   2428            }
   2429          
   2430            if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   2431            {
   2432              if (type == NWK_ASSOC_JOIN || type == NWK_ASSOC_REJOIN_UNSECURE)
   2433              {
   2434                osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 600 );
   2435              }
   2436            }
   2437          
   2438            return ZSuccess;
   \   000012   7900         MOV     R1,#0x0
   \   000014   7F03         MOV     R7,#0x3
   \   000016   02....       LJMP    ?BANKED_LEAVE_XDATA
   2439          }
   2440          
   2441          /*********************************************************************
   2442           * @fn          ZDO_ConcentratorIndicationCB
   2443           *
   2444           * @brief       This function allows the next higher layer of a
   2445           *              device to be notified of existence of the concentrator.
   2446           *
   2447           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2448           * @param       extAddr - pointer to extended Address
   2449           *                        NULL if not available
   2450           * @param       pktCost - PktCost from RREQ
   2451           *
   2452           * @return      void 
   2453           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2454          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   2455          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V2,R1
   2456            zdoConcentratorInd_t conInd;
   2457            
   2458            conInd.nwkAddr = nwkAddr;
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   E5..         MOV     A,?V0
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   E5..         MOV     A,?V1
   \   000020   F0           MOVX    @DPTR,A
   2459            conInd.extAddr = extAddr;
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   EE           MOV     A,R6
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   EF           MOV     A,R7
   \   00002A   F0           MOVX    @DPTR,A
   2460            conInd.pktCost = pktCost;
   \   00002B   E5..         MOV     A,?V2
   \   00002D   C0E0         PUSH    A
   \   00002F   7404         MOV     A,#0x4
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   D0E0         POP     A
   \   000036   F0           MOVX    @DPTR,A
   2461            
   2462            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   000037   90....       MOV     DPTR,#zdoCBFunc + 2
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F8           MOV     R0,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F9           MOV     R1,A
   \   00003F   E8           MOV     A,R0
   \   000040   49           ORL     A,R1
   \   000041   6012         JZ      ??ZDO_ConcentratorIndicationCB_0
   2463            {
   2464              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000043                ; Setup parameters for indirect call
   \   000043   AA..         MOV     R2,?XSP + 0
   \   000045   AB..         MOV     R3,?XSP + 1
   \   000047   90....       MOV     DPTR,#zdoCBFunc + 2
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F583         MOV     DPH,A
   \   000050   8882         MOV     DPL,R0
   \   000052   12....       LCALL   ?CALL_IND
   2465            }
   2466          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   000055   7405         MOV     A,#0x5
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   7F03         MOV     R7,#0x3
   \   00005C   02....       LJMP    ?BANKED_LEAVE_XDATA
   2467          
   2468          /*********************************************************************
   2469           * @fn          ZDO_LeaveCnf
   2470           *
   2471           * @brief       This function allows the next higher layer to be
   2472           *              notified of the results of its request for this or
   2473           *              a child device to leave the network.
   2474           *
   2475           * @param       cnf - NLME_LeaveCnf_t
   2476           *
   2477           * @return      none
   2478           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2479          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2480          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2481            // Check for this device
   2482            if ( osal_ExtAddrEqual( cnf->extAddr,
   2483                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   AC..         MOV     R4,?V0
   \   000012   AD..         MOV     R5,?V1
   \   000014                ; Setup parameters for call to function sAddrExtCmp
   \   000014   EE           MOV     A,R6
   \   000015   2402         ADD     A,#0x2
   \   000017   FA           MOV     R2,A
   \   000018   E4           CLR     A
   \   000019   3F           ADDC    A,R7
   \   00001A   FB           MOV     R3,A
   \   00001B   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   00001E   E9           MOV     A,R1
   \   00001F   6401         XRL     A,#0x1
   \   000021   7010         JNZ     ??ZDO_LeaveCnf_0
   2484            {
   2485              // Prepare to leave with reset
   2486              ZDApp_LeaveReset( cnf->rejoin );
   \   000023                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000023   EE           MOV     A,R6
   \   000024   240B         ADD     A,#0xb
   \   000026   F582         MOV     DPL,A
   \   000028   E4           CLR     A
   \   000029   3F           ADDC    A,R7
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   ??ZDApp_LeaveReset?relay; Banked call to: ZDApp_LeaveReset
   \   000031   8031         SJMP    ??ZDO_LeaveCnf_1
   2487            }
   2488            else if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDO_LeaveCnf_0:
   \   000033   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000036   E0           MOVX    A,@DPTR
   \   000037   6008         JZ      ??ZDO_LeaveCnf_2
   \   000039   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   6401         XRL     A,#0x1
   \   00003F   7023         JNZ     ??ZDO_LeaveCnf_1
   2489            {
   2490              // Remove device address(optionally descendents) from data
   2491              ZDApp_LeaveUpdate( cnf->dstAddr,
   2492                                 cnf->extAddr,
   2493                                 cnf->removeChildren );
   \                     ??ZDO_LeaveCnf_2:
   \   000041                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F9           MOV     R1,A
   \   000051   EE           MOV     A,R6
   \   000052   2402         ADD     A,#0x2
   \   000054   FC           MOV     R4,A
   \   000055   E4           CLR     A
   \   000056   3F           ADDC    A,R7
   \   000057   FD           MOV     R5,A
   \   000058   8E82         MOV     DPL,R6
   \   00005A   8F83         MOV     DPH,R7
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   FA           MOV     R2,A
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FB           MOV     R3,A
   \   000061   12....       LCALL   ??ZDApp_LeaveUpdate?relay; Banked call to: ZDApp_LeaveUpdate
   2494            }
   2495          }
   \                     ??ZDO_LeaveCnf_1:
   \   000064   7F02         MOV     R7,#0x2
   \   000066   02....       LJMP    ?BANKED_LEAVE_XDATA
   2496          
   2497          /*********************************************************************
   2498           * @fn          ZDO_LeaveInd
   2499           *
   2500           * @brief       This function allows the next higher layer of a
   2501           *              device to be notified of a remote leave request or
   2502           *              indication.
   2503           *
   2504           * @param       ind - NLME_LeaveInd_t
   2505           *
   2506           * @return      none
   2507           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2508          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2509          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2510            uint8 leave;
   2511          
   2512          
   2513            // Parent is requesting the leave - NWK layer filters out illegal
   2514            // requests
   2515            if ( ind->request == TRUE )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   704F         JNZ     ??ZDO_LeaveInd_0
   2516            {
   2517              // Notify network of leave
   2518              if ( ZSTACK_ROUTER_BUILD )
   \   000021   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000024   E0           MOVX    A,@DPTR
   \   000025   6008         JZ      ??ZDO_LeaveInd_1
   \   000027   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6401         XRL     A,#0x1
   \   00002D   7031         JNZ     ??ZDO_LeaveInd_2
   2519              {
   2520                NLME_LeaveRsp_t rsp;
   2521                rsp.rejoin         = ind->rejoin;
   \                     ??ZDO_LeaveInd_1:
   \   00002F   EE           MOV     A,R6
   \   000030   240C         ADD     A,#0xc
   \   000032   F582         MOV     DPL,A
   \   000034   E4           CLR     A
   \   000035   3F           ADDC    A,R7
   \   000036   F583         MOV     DPH,A
   \   000038   E0           MOVX    A,@DPTR
   \   000039   C0E0         PUSH    A
   \   00003B   7401         MOV     A,#0x1
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   D0E0         POP     A
   \   000042   F0           MOVX    @DPTR,A
   2522                rsp.removeChildren = ind->removeChildren;
   \   000043   EE           MOV     A,R6
   \   000044   240B         ADD     A,#0xb
   \   000046   F582         MOV     DPL,A
   \   000048   E4           CLR     A
   \   000049   3F           ADDC    A,R7
   \   00004A   F583         MOV     DPH,A
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   C0E0         PUSH    A
   \   00004F   85..82       MOV     DPL,?XSP + 0
   \   000052   85..83       MOV     DPH,?XSP + 1
   \   000055   D0E0         POP     A
   \   000057   F0           MOVX    @DPTR,A
   2523                NLME_LeaveRsp( &rsp );
   \   000058                ; Setup parameters for call to function NLME_LeaveRsp
   \   000058   AA..         MOV     R2,?XSP + 0
   \   00005A   AB..         MOV     R3,?XSP + 1
   \   00005C   12....       LCALL   ??NLME_LeaveRsp?relay; Banked call to: NLME_LeaveRsp
   \   00005F   E9           MOV     A,R1
   2524              }
   2525          
   2526              // Prepare to leave with reset
   2527              ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_2:
   \   000060                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000060   EE           MOV     A,R6
   \   000061   240C         ADD     A,#0xc
   \   000063   F582         MOV     DPL,A
   \   000065   E4           CLR     A
   \   000066   3F           ADDC    A,R7
   \   000067   F583         MOV     DPH,A
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??ZDApp_LeaveReset?relay; Banked call to: ZDApp_LeaveReset
   \   00006E   806A         SJMP    ??ZDO_LeaveInd_3
   2528            }
   2529            else
   2530            {
   2531              leave = FALSE;
   \                     ??ZDO_LeaveInd_0:
   \   000070   75..00       MOV     ?V0,#0x0
   2532          
   2533              // Check if this device needs to leave as a child or descendent
   2534              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \   000073                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000073   12....       LCALL   ??NLME_GetCoordShortAddr?relay; Banked call to: NLME_GetCoordShortAddr
   \   000076   8A..         MOV     ?V2,R2
   \   000078   8B..         MOV     ?V3,R3
   \   00007A   A8..         MOV     R0,?V2
   \   00007C   A9..         MOV     R1,?V3
   \   00007E   8E82         MOV     DPL,R6
   \   000080   8F83         MOV     DPH,R7
   \   000082   E0           MOVX    A,@DPTR
   \   000083   68           XRL     A,R0
   \   000084   7003         JNZ     ??ZDO_LeaveInd_4
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   69           XRL     A,R1
   \                     ??ZDO_LeaveInd_4:
   \   000089   701B         JNZ     ??ZDO_LeaveInd_5
   2535              {
   2536                if ( ( ind->removeChildren == TRUE               ) ||
   2537                     ( ZDO_Config_Node_Descriptor.LogicalType ==
   2538                       NODETYPE_DEVICE                           )    )
   \   00008B   EE           MOV     A,R6
   \   00008C   240B         ADD     A,#0xb
   \   00008E   F582         MOV     DPL,A
   \   000090   E4           CLR     A
   \   000091   3F           ADDC    A,R7
   \   000092   F583         MOV     DPH,A
   \   000094   E0           MOVX    A,@DPTR
   \   000095   6401         XRL     A,#0x1
   \   000097   600A         JZ      ??ZDO_LeaveInd_6
   \   000099   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   5407         ANL     A,#0x7
   \   00009F   6402         XRL     A,#0x2
   \   0000A1   7003         JNZ     ??ZDO_LeaveInd_5
   2539                {
   2540                  leave = TRUE;
   \                     ??ZDO_LeaveInd_6:
   \   0000A3   75..01       MOV     ?V0,#0x1
   2541                }
   2542              }
   2543              else if ( ind->removeChildren == TRUE )
   2544              {
   2545                // Check NWK address allocation algorithm
   2546                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   2547              }
   2548          
   2549              if ( leave == TRUE )
   \                     ??ZDO_LeaveInd_5:
   \   0000A6   7401         MOV     A,#0x1
   \   0000A8   65..         XRL     A,?V0
   \   0000AA   7010         JNZ     ??ZDO_LeaveInd_7
   2550              {
   2551                // Prepare to leave with reset
   2552                ZDApp_LeaveReset( ind->rejoin );
   \   0000AC                ; Setup parameters for call to function ZDApp_LeaveReset
   \   0000AC   EE           MOV     A,R6
   \   0000AD   240C         ADD     A,#0xc
   \   0000AF   F582         MOV     DPL,A
   \   0000B1   E4           CLR     A
   \   0000B2   3F           ADDC    A,R7
   \   0000B3   F583         MOV     DPH,A
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   F9           MOV     R1,A
   \   0000B7   12....       LCALL   ??ZDApp_LeaveReset?relay; Banked call to: ZDApp_LeaveReset
   \   0000BA   801E         SJMP    ??ZDO_LeaveInd_3
   2553              }
   2554              else
   2555              {
   2556                // Remove device address(optionally descendents) from data
   2557                ZDApp_LeaveUpdate( ind->srcAddr,
   2558                                   ind->extAddr,
   2559                                   ind->removeChildren );
   \                     ??ZDO_LeaveInd_7:
   \   0000BC                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   0000BC   EE           MOV     A,R6
   \   0000BD   240B         ADD     A,#0xb
   \   0000BF   F582         MOV     DPL,A
   \   0000C1   E4           CLR     A
   \   0000C2   3F           ADDC    A,R7
   \   0000C3   F583         MOV     DPH,A
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   F9           MOV     R1,A
   \   0000C7   EE           MOV     A,R6
   \   0000C8   2402         ADD     A,#0x2
   \   0000CA   FC           MOV     R4,A
   \   0000CB   E4           CLR     A
   \   0000CC   3F           ADDC    A,R7
   \   0000CD   FD           MOV     R5,A
   \   0000CE   8E82         MOV     DPL,R6
   \   0000D0   8F83         MOV     DPH,R7
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   FA           MOV     R2,A
   \   0000D4   A3           INC     DPTR
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   FB           MOV     R3,A
   \   0000D7   12....       LCALL   ??ZDApp_LeaveUpdate?relay; Banked call to: ZDApp_LeaveUpdate
   2560              }
   2561            }
   2562          }
   \                     ??ZDO_LeaveInd_3:
   \   0000DA   7402         MOV     A,#0x2
   \   0000DC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DF   7F04         MOV     R7,#0x4
   \   0000E1   02....       LJMP    ?BANKED_LEAVE_XDATA
   2563          
   2564          /*********************************************************************
   2565           * @fn          ZDO_SyncIndicationCB
   2566           *
   2567           * @brief       This function allows the next higher layer of a
   2568           *              coordinator to be notified of a loss of synchronization
   2569           *                          with the parent/child device.
   2570           *
   2571           * @param       type: 0 - child; 1 - parent
   2572           *
   2573           *
   2574           * @return      none
   2575           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2576          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   2577          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   2578            (void)shortAddr;  // Remove this line if this parameter is used.
   2579            
   2580            if ( ZSTACK_END_DEVICE_BUILD
   2581              || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   \   00000B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   6402         XRL     A,#0x2
   \   000011   6016         JZ      ??ZDO_SyncIndicationCB_0
   \   000013   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6008         JZ      ??ZDO_SyncIndicationCB_1
   \   000019   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   7021         JNZ     ??ZDO_SyncIndicationCB_2
   \                     ??ZDO_SyncIndicationCB_1:
   \   000021   90....       MOV     DPTR,#_NIB + 14
   \   000024   E0           MOVX    A,@DPTR
   \   000025   A2E1         MOV     C,0xE0 /* A   */.1
   \   000027   4019         JC      ??ZDO_SyncIndicationCB_2
   2582            {
   2583              if ( type == 1 )
   \                     ??ZDO_SyncIndicationCB_0:
   \   000029   7401         MOV     A,#0x1
   \   00002B   65..         XRL     A,?V0
   \   00002D   7013         JNZ     ??ZDO_SyncIndicationCB_2
   2584              {
   2585                // We lost contact with our parent.  Clear the neighbor Table.
   2586                nwkNeighborInitTable();
   \   00002F                ; Setup parameters for call to function nwkNeighborInitTable
   \   00002F   12....       LCALL   ??nwkNeighborInitTable?relay; Banked call to: nwkNeighborInitTable
   2587                
   2588                // Start the rejoin process.
   2589                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   000032                ; Setup parameters for call to function ZDApp_SendMsg
   \   000032   7C00         MOV     R4,#0x0
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7B02         MOV     R3,#0x2
   \   000038   7A03         MOV     R2,#0x3
   \   00003A   90....       MOV     DPTR,#ZDAppTaskID
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F9           MOV     R1,A
   \   00003F   12....       LCALL   ??ZDApp_SendMsg?relay; Banked call to: ZDApp_SendMsg
   2590              }
   2591            }
   2592          }
   \                     ??ZDO_SyncIndicationCB_2:
   \   000042   7F01         MOV     R7,#0x1
   \   000044   02....       LJMP    ?BANKED_LEAVE_XDATA
   2593          
   2594          /*********************************************************************
   2595           * @fn          ZDO_ManytoOneFailureIndicationCB
   2596           *
   2597           * @brief       This function allows the next higher layer of a
   2598           *              concentrator to be notified of a many-to-one route 
   2599           *              failure. 
   2600           *
   2601           * @param       none
   2602           *
   2603           *
   2604           * @return      none
   2605           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2606          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   2607          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2608            // By default, the concentrator automatically redo many-to-one route 
   2609            // discovery to update all many-to-one routes in the network
   2610            // If you want anything processing other than the default,
   2611            // please replace the following code.
   2612            
   2613            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL   ??RTG_MTORouteReq?relay; Banked call to: RTG_MTORouteReq
   2614          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
   2615          
   2616          /*********************************************************************
   2617           * @fn          ZDO_PollConfirmCB
   2618           *
   2619           * @brief       This function allows the next higher layer to be
   2620           *              notified of a Poll Confirm.
   2621           *
   2622           * @param       none
   2623           *
   2624           * @return      none
   2625           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2626          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   2627          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2628            (void)status;  // Remove this line if this parameter is used.
   2629            return;
   \   000000   02....       LJMP    ?BRET
   2630          }
   2631          
   2632          /******************************************************************************
   2633           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   2634           *
   2635           * @brief       Stub routine implemented by NHLE. NHLE should call
   2636           *              <AddrMgrWriteNV> when appropriate.
   2637           *
   2638           * @param       none
   2639           *
   2640           * @return      none
   2641           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2642          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   2643          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2644          #if defined ( NV_RESTORE )  
   2645            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   2646            {
   2647              // Trigger to save info into NV
   2648              ZDApp_NVUpdate();
   2649            }
   2650          #endif
   2651          }
   \   000000   02....       LJMP    ?BRET
   2652          
   2653          /*********************************************************************
   2654           * Call Back Functions from Security  - API
   2655           */
   2656          
   2657           /*********************************************************************
   2658           * @fn          ZDO_UpdateDeviceIndication
   2659           *
   2660           * @brief       This function notifies the "Trust Center" of a
   2661           *              network when a device joins or leaves the network.
   2662           *
   2663           * @param       extAddr - pointer to 64 bit address of new device
   2664           * @param       status  - 0 if a new device joined securely
   2665           *                      - 1 if a new device joined un-securely
   2666           *                      - 2 if a device left the network
   2667           *
   2668           * @return      true if newly joined device should be allowed to
   2669           *                                              remain on network
   2670           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2671          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   2672          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV     A,R1
   \   000001   F8           MOV     R0,A
   2673            // can implement a network access policy based on the
   2674            // IEEE address of newly joining devices...
   2675            (void)extAddr;
   2676            (void)status;
   2677            
   2678            return ZSuccess;
   \   000002   7900         MOV     R1,#0x0
   \   000004   02....       LJMP    ?BRET
   2679          }
   2680          
   2681          /*********************************************************************
   2682           * @fn          ZDApp_InMsgCB
   2683           *
   2684           * @brief       This function is called to pass up any message that is
   2685           *              not yet supported.  This allows for the developer to
   2686           *              support features themselves..
   2687           *
   2688           * @return      none
   2689           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2690          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   2691          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2692            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   EE           MOV     A,R6
   \   00000A   240C         ADD     A,#0xc
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   5400         ANL     A,#0x0
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   5480         ANL     A,#0x80
   \   00001A   F9           MOV     R1,A
   \   00001B   E8           MOV     A,R0
   \   00001C   49           ORL     A,R1
   \   00001D   706B         JNZ     ??ZDApp_InMsgCB_0
   2693            {
   2694              // Handle the response message
   2695            }
   2696            else
   2697            {
   2698              // Handle the request message by sending a generic "not supported".
   2699              // Device Announce doesn't have a response.
   2700              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   00001F   EE           MOV     A,R6
   \   000020   240B         ADD     A,#0xb
   \   000022   F582         MOV     DPL,A
   \   000024   E4           CLR     A
   \   000025   3F           ADDC    A,R7
   \   000026   F583         MOV     DPH,A
   \   000028   E0           MOVX    A,@DPTR
   \   000029   705F         JNZ     ??ZDApp_InMsgCB_0
   \   00002B   EE           MOV     A,R6
   \   00002C   240C         ADD     A,#0xc
   \   00002E   F582         MOV     DPL,A
   \   000030   E4           CLR     A
   \   000031   3F           ADDC    A,R7
   \   000032   F583         MOV     DPH,A
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6413         XRL     A,#0x13
   \   000037   7004         JNZ     ??ZDApp_InMsgCB_1
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   6400         XRL     A,#0x0
   \                     ??ZDApp_InMsgCB_1:
   \   00003D   604B         JZ      ??ZDApp_InMsgCB_0
   2701              {
   2702                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   2703                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   00003F                ; Setup parameters for call to function ZDP_GenericRsp
   \   00003F   EE           MOV     A,R6
   \   000040   240C         ADD     A,#0xc
   \   000042   F582         MOV     DPL,A
   \   000044   E4           CLR     A
   \   000045   3F           ADDC    A,R7
   \   000046   F583         MOV     DPH,A
   \   000048   E0           MOVX    A,@DPTR
   \   000049   4400         ORL     A,#0x0
   \   00004B   F5..         MOV     ?V0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   4480         ORL     A,#0x80
   \   000051   F5..         MOV     ?V1,A
   \   000053   78..         MOV     R0,#?V0
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   E4           CLR     A
   \   000059   F5..         MOV     ?V0,A
   \   00005B   F5..         MOV     ?V1,A
   \   00005D   78..         MOV     R0,#?V0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   EE           MOV     A,R6
   \   000063   240E         ADD     A,#0xe
   \   000065   F582         MOV     DPL,A
   \   000067   E4           CLR     A
   \   000068   3F           ADDC    A,R7
   \   000069   F583         MOV     DPH,A
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   FD           MOV     R5,A
   \   00006D   7C84         MOV     R4,#-0x7c
   \   00006F   EE           MOV     A,R6
   \   000070   2402         ADD     A,#0x2
   \   000072   FA           MOV     R2,A
   \   000073   E4           CLR     A
   \   000074   3F           ADDC    A,R7
   \   000075   FB           MOV     R3,A
   \   000076   EE           MOV     A,R6
   \   000077   240F         ADD     A,#0xf
   \   000079   F582         MOV     DPL,A
   \   00007B   E4           CLR     A
   \   00007C   3F           ADDC    A,R7
   \   00007D   F583         MOV     DPH,A
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F9           MOV     R1,A
   \   000081   12....       LCALL   ??ZDP_GenericRsp?relay; Banked call to: ZDP_GenericRsp
   \   000084   7404         MOV     A,#0x4
   \   000086   12....       LCALL   ?DEALLOC_XSTACK8
   \   000089   E9           MOV     A,R1
   2704              }
   2705            }
   2706          }
   \                     ??ZDApp_InMsgCB_0:
   \   00008A   7F02         MOV     R7,#0x2
   \   00008C   02....       LJMP    ?BANKED_LEAVE_XDATA
   2707          
   2708          
   2709          /*********************************************************************
   2710           * @fn      ZDApp_ChangeMatchDescRespPermission()
   2711           *
   2712           * @brief   Changes the Match Descriptor Response permission.
   2713           *
   2714           * @param   endpoint - endpoint to allow responses
   2715           * @param   action - true to allow responses, false to not
   2716           *
   2717           * @return  none
   2718           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2719          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   2720          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   2721            // Store the action
   2722            afSetMatch( endpoint, action );
   \   000009                ; Setup parameters for call to function afSetMatch
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??afSetMatch?relay   ; Banked call to: afSetMatch
   \   000010   E9           MOV     A,R1
   2723          }
   \   000011   7F01         MOV     R7,#0x1
   \   000013   02....       LJMP    ?BANKED_LEAVE_XDATA
   2724          
   2725          /*********************************************************************
   2726           * @fn      ZDApp_NetworkInit()
   2727           *
   2728           * @brief   Used to start the network joining process
   2729           *
   2730           * @param   delay - mSec delay to wait before starting
   2731           *
   2732           * @return  none
   2733           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2734          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   2735          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2736            if ( delay )
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   6013         JZ      ??ZDApp_NetworkInit_0
   2737            {
   2738              // Wait awhile before starting the device
   2739              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   00000D                ; Setup parameters for call to function osal_start_timerEx
   \   00000D   EE           MOV     A,R6
   \   00000E   FC           MOV     R4,A
   \   00000F   EF           MOV     A,R7
   \   000010   FD           MOV     R5,A
   \   000011   7A01         MOV     R2,#0x1
   \   000013   7B00         MOV     R3,#0x0
   \   000015   90....       MOV     DPTR,#ZDAppTaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   00001D   E9           MOV     A,R1
   \   00001E   800D         SJMP    ??ZDApp_NetworkInit_1
   2740            }
   2741            else
   2742            {
   2743              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   000020                ; Setup parameters for call to function osal_set_event
   \   000020   7A01         MOV     R2,#0x1
   \   000022   7B00         MOV     R3,#0x0
   \   000024   90....       MOV     DPTR,#ZDAppTaskID
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   00002C   E9           MOV     A,R1
   2744            }
   2745          }
   \                     ??ZDApp_NetworkInit_1:
   \   00002D   7F01         MOV     R7,#0x1
   \   00002F   02....       LJMP    ?BANKED_LEAVE_XDATA
   2746          
   2747          /*********************************************************************
   2748           * @fn      ZDApp_NwkStateUpdateCB()
   2749           *
   2750           * @brief   This function notifies that this device's network 
   2751           *          state info has been changed.
   2752           *
   2753           * @param   none
   2754           *
   2755           * @return  none
   2756           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2757          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   2758          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2759            // Notify to save info into NV
   2760            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000005                ; Setup parameters for call to function osal_get_timeoutEx
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B02         MOV     R3,#0x2
   \   000009   90....       MOV     DPTR,#ZDAppTaskID
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   12....       LCALL   ??osal_get_timeoutEx?relay; Banked call to: osal_get_timeoutEx
   \   000011   8A..         MOV     ?V0,R2
   \   000013   8B..         MOV     ?V1,R3
   \   000015   E5..         MOV     A,?V0
   \   000017   45..         ORL     A,?V1
   \   000019   7003         JNZ     ??ZDApp_NwkStateUpdateCB_0
   2761            {
   2762              // Trigger to save info into NV
   2763              ZDApp_NVUpdate();
   \   00001B                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00001B   12....       LCALL   ??ZDApp_NVUpdate?relay; Banked call to: ZDApp_NVUpdate
   2764            }
   2765          }
   \                     ??ZDApp_NwkStateUpdateCB_0:
   \   00001E   7F02         MOV     R7,#0x2
   \   000020   02....       LJMP    ?BANKED_LEAVE_XDATA
   2766          
   2767          /*********************************************************************
   2768           * @fn      ZDApp_NodeProfileSync()
   2769           *
   2770           * @brief   Sync node with stack profile.
   2771           *
   2772           * @param   stackProfile - stack profile of the network to join
   2773           *
   2774           * @return  none
   2775           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2776          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   2777          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2778            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   5021         JNC     ??ZDApp_NodeProfileSync_0
   2779            {
   2780              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV     DPTR,#zgStackProfile
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6E           XRL     A,R6
   \   000014   601A         JZ      ??ZDApp_NodeProfileSync_0
   2781              {
   2782                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   54F8         ANL     A,#0xf8
   \   00001C   4402         ORL     A,#0x2
   \   00001E   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000021   F0           MOVX    @DPTR,A
   2783                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   000022   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000025   740C         MOV     A,#0xc
   \   000027   F0           MOVX    @DPTR,A
   2784                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000028                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000028   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   ??NLME_SetBroadcastFilter?relay; Banked call to: NLME_SetBroadcastFilter
   2785              }
   2786            }
   2787          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000030   7F01         MOV     R7,#0x1
   \   000032   02....       LJMP    ?BANKED_LEAVE_XDATA
   2788          
   2789          /*********************************************************************
   2790           * @fn      ZDApp_StartJoiningCycle()
   2791           *
   2792           * @brief   Starts the joining cycle of a device.  This will only 
   2793           *          continue an already started (or stopped) joining cycle.
   2794           *
   2795           * @param   none
   2796           *
   2797           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2798           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2799          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   2800          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2801            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6008         JZ      ??ZDApp_StartJoiningCycle_0
   \   00000C   90....       MOV     DPTR,#devState
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6402         XRL     A,#0x2
   \   000012   7011         JNZ     ??ZDApp_StartJoiningCycle_1
   2802            {
   2803              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000014   90....       MOV     DPTR,#continueJoining
   \   000017   7401         MOV     A,#0x1
   \   000019   F0           MOVX    @DPTR,A
   2804              ZDApp_NetworkInit( 0 );
   \   00001A                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00001A   7A00         MOV     R2,#0x0
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   ??ZDApp_NetworkInit?relay; Banked call to: ZDApp_NetworkInit
   2805          
   2806              return ( TRUE );
   \   000021   7901         MOV     R1,#0x1
   \   000023   8002         SJMP    ??ZDApp_StartJoiningCycle_2
   2807            }
   2808            else
   2809              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000025   7900         MOV     R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000027   D083         POP     DPH
   \   000029   D082         POP     DPL
   \   00002B   02....       LJMP    ?BRET
   2810          }
   2811          
   2812          /*********************************************************************
   2813           * @fn      ZDApp_StopJoiningCycle()
   2814           *
   2815           * @brief   Stops the joining or rejoining process of a device.
   2816           *
   2817           * @param   none
   2818           *
   2819           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2820           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2821          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   2822          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2823            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6008         JZ      ??ZDApp_StopJoiningCycle_0
   \   00000C   90....       MOV     DPTR,#devState
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6402         XRL     A,#0x2
   \   000012   700A         JNZ     ??ZDApp_StopJoiningCycle_1
   2824            {
   2825              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000014   90....       MOV     DPTR,#continueJoining
   \   000017   7400         MOV     A,#0x0
   \   000019   F0           MOVX    @DPTR,A
   2826              return ( TRUE );
   \   00001A   7901         MOV     R1,#0x1
   \   00001C   8002         SJMP    ??ZDApp_StopJoiningCycle_2
   2827            }
   2828            else
   2829              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001E   7900         MOV     R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   000020   D083         POP     DPH
   \   000022   D082         POP     DPL
   \   000024   02....       LJMP    ?BRET
   2830          }
   2831          
   2832          /*********************************************************************
   2833           * @fn      ZDApp_AnnounceNewAddress()
   2834           *
   2835           * @brief   Send Device Announce and hold all transmissions for 
   2836           *          new address timeout.
   2837           *
   2838           * @param   none
   2839           *
   2840           * @return  none
   2841           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2842          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   2843          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2844          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2845            // Turn off data request hold
   2846            APSME_HoldDataRequests( 0 );
   \   000005                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   12....       LCALL   ??APSME_HoldDataRequests?relay; Banked call to: APSME_HoldDataRequests
   2847          #endif
   2848            
   2849            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   2850                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   00000C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00000C   12....       LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
   \   00000F   8A..         MOV     ?V0,R2
   \   000011   8B..         MOV     ?V1,R3
   \   000013   AE..         MOV     R6,?V0
   \   000015   AF..         MOV     R7,?V1
   \   000017                ; Setup parameters for call to function NLME_GetShortAddr
   \   000017   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   00001A   8A..         MOV     ?V0,R2
   \   00001C   8B..         MOV     ?V1,R3
   \   00001E   AA..         MOV     R2,?V0
   \   000020   AB..         MOV     R3,?V1
   \   000022                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000022   75..00       MOV     ?V0,#0x0
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F9           MOV     R1,A
   \   00002F   EE           MOV     A,R6
   \   000030   FC           MOV     R4,A
   \   000031   EF           MOV     A,R7
   \   000032   FD           MOV     R5,A
   \   000033   12....       LCALL   ??ZDP_DeviceAnnce?relay; Banked call to: ZDP_DeviceAnnce
   \   000036   7401         MOV     A,#0x1
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003B   E9           MOV     A,R1
   2851            
   2852          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2853            // Setup the timeout
   2854            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   00003C                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   ??APSME_HoldDataRequests?relay; Banked call to: APSME_HoldDataRequests
   2855          #endif  
   2856          }
   \   000043   7F02         MOV     R7,#0x2
   \   000045   02....       LJMP    ?BANKED_LEAVE_XDATA
   2857          
   2858          /*********************************************************************
   2859           * @fn          ZDApp_NVUpdate
   2860           *
   2861           * @brief       Set the NV Update Timer.
   2862           *
   2863           * @param       none
   2864           *
   2865           * @return      none
   2866           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2867          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   2868          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2869          #if defined ( NV_RESTORE )
   2870            osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   2871          #endif
   2872          }
   \   000000   02....       LJMP    ?BRET
   2873          
   2874          /*********************************************************************
   2875           * @fn      ZDApp_CoordStartPANIDConflictCB()
   2876           *
   2877           * @brief   Returns a PAN ID for the network layer to use during
   2878           *          a coordinator start and there is another network with 
   2879           *          the intended PANID.
   2880           *
   2881           * @param   panid - the intended PAN ID
   2882           *
   2883           * @return  PANID to try
   2884           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2885          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   2886          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2887            return ( panid + 1 );
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   FA           MOV     R2,A
   \   000004   5001         JNC     ??ZDApp_CoordStartPANIDConflictCB_0
   \   000006   0B           INC     R3
   \                     ??ZDApp_CoordStartPANIDConflictCB_0:
   \   000007   02....       LJMP    ?BRET
   2888          }
   2889          
   2890          /*********************************************************************
   2891           * @fn          ZDO_SrcRtgIndCB
   2892           *
   2893           * @brief       This function notifies the ZDO available src route record received.
   2894           *
   2895           * @param       srcAddr - source address of the source route
   2896           * @param       relayCnt - number of devices in the relay list
   2897           * @param       relayList - relay list of the source route
   2898           *
   2899           * @return      none
   2900           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2901          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   2902          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   89..         MOV     ?V2,R1
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
   2903            zdoSrcRtg_t srcRtg;
   2904            
   2905            srcRtg.srcAddr = srcAddr;
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   E5..         MOV     A,?V0
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   E5..         MOV     A,?V1
   \   000020   F0           MOVX    @DPTR,A
   2906            srcRtg.relayCnt = relayCnt;
   \   000021   E5..         MOV     A,?V2
   \   000023   C0E0         PUSH    A
   \   000025   7402         MOV     A,#0x2
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   D0E0         POP     A
   \   00002C   F0           MOVX    @DPTR,A
   2907            srcRtg.pRelayList = pRelayList;
   \   00002D   7403         MOV     A,#0x3
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   EE           MOV     A,R6
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   EF           MOV     A,R7
   \   000036   F0           MOVX    @DPTR,A
   2908            
   2909            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   000037   90....       MOV     DPTR,#zdoCBFunc
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F8           MOV     R0,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F9           MOV     R1,A
   \   00003F   E8           MOV     A,R0
   \   000040   49           ORL     A,R1
   \   000041   6012         JZ      ??ZDO_SrcRtgIndCB_0
   2910            {
   2911              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000043                ; Setup parameters for indirect call
   \   000043   AA..         MOV     R2,?XSP + 0
   \   000045   AB..         MOV     R3,?XSP + 1
   \   000047   90....       MOV     DPTR,#zdoCBFunc
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F583         MOV     DPH,A
   \   000050   8882         MOV     DPL,R0
   \   000052   12....       LCALL   ?CALL_IND
   2912            }
   2913          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000055   7405         MOV     A,#0x5
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   7F03         MOV     R7,#0x3
   \   00005C   02....       LJMP    ?BANKED_LEAVE_XDATA
   2914          
   2915          /*********************************************************************
   2916           * @fn          ZDApp_InitZdoCBFunc
   2917           *
   2918           * @brief       Call this function to initialize zdoCBFunc[]
   2919           *
   2920           * @param       none
   2921           *
   2922           * @return      none
   2923           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2924          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   2925          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2926            uint8 i;
   2927            
   2928            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV     R2,#0x0
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   EA           MOV     A,R2
   \   000007   C3           CLR     C
   \   000008   9405         SUBB    A,#0x5
   \   00000A   502D         JNC     ??ZDApp_InitZdoCBFunc_1
   2929            {
   2930              zdoCBFunc[i] = NULL;
   \   00000C   EA           MOV     A,R2
   \   00000D   F8           MOV     R0,A
   \   00000E   7900         MOV     R1,#0x0
   \   000010   E8           MOV     A,R0
   \   000011   75F002       MOV     B,#0x2
   \   000014   A4           MUL     AB
   \   000015   C8           XCH     A,R0
   \   000016   ABF0         MOV     R3,B
   \   000018   75F000       MOV     B,#0x0
   \   00001B   A4           MUL     AB
   \   00001C   2B           ADD     A,R3
   \   00001D   FB           MOV     R3,A
   \   00001E   75F002       MOV     B,#0x2
   \   000021   E9           MOV     A,R1
   \   000022   A4           MUL     AB
   \   000023   2B           ADD     A,R3
   \   000024   F9           MOV     R1,A
   \   000025   74..         MOV     A,#zdoCBFunc & 0xff
   \   000027   28           ADD     A,R0
   \   000028   F582         MOV     DPL,A
   \   00002A   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00002C   39           ADDC    A,R1
   \   00002D   F583         MOV     DPH,A
   \   00002F   7400         MOV     A,#0x0
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   7400         MOV     A,#0x0
   \   000035   F0           MOVX    @DPTR,A
   2931            }
   \   000036   0A           INC     R2
   \   000037   80CD         SJMP    ??ZDApp_InitZdoCBFunc_0
   2932          }
   \                     ??ZDApp_InitZdoCBFunc_1:
   \   000039   D083         POP     DPH
   \   00003B   D082         POP     DPL
   \   00003D   02....       LJMP    ?BRET
   2933          
   2934          /*********************************************************************
   2935           * @fn          ZDO_RegisterForZdoCB
   2936           *
   2937           * @brief       Call this function to register the higher layer (for 
   2938           *              example, the Application layer or MT layer) with ZDO 
   2939           *              callbacks to get notified of some ZDO indication like
   2940           *              existence of a concentrator or receipt of a source 
   2941           *              route record.
   2942           *
   2943           * @param       indID - ZDO Indication ID
   2944           * @param       pFn   - Callback function pointer
   2945           *
   2946           * @return      ZSuccess - successful, ZInvalidParameter if not
   2947           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2948          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   2949          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FD           MOV     R5,A
   2950            // Check the range of the indication ID
   2951            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   ED           MOV     A,R5
   \   000007   C3           CLR     C
   \   000008   9405         SUBB    A,#0x5
   \   00000A   502C         JNC     ??ZDO_RegisterForZdoCB_0
   2952            {
   2953              zdoCBFunc[indID] = pFn;
   \   00000C   ED           MOV     A,R5
   \   00000D   F8           MOV     R0,A
   \   00000E   7900         MOV     R1,#0x0
   \   000010   E8           MOV     A,R0
   \   000011   75F002       MOV     B,#0x2
   \   000014   A4           MUL     AB
   \   000015   C8           XCH     A,R0
   \   000016   ACF0         MOV     R4,B
   \   000018   75F000       MOV     B,#0x0
   \   00001B   A4           MUL     AB
   \   00001C   2C           ADD     A,R4
   \   00001D   FC           MOV     R4,A
   \   00001E   75F002       MOV     B,#0x2
   \   000021   E9           MOV     A,R1
   \   000022   A4           MUL     AB
   \   000023   2C           ADD     A,R4
   \   000024   F9           MOV     R1,A
   \   000025   74..         MOV     A,#zdoCBFunc & 0xff
   \   000027   28           ADD     A,R0
   \   000028   F582         MOV     DPL,A
   \   00002A   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00002C   39           ADDC    A,R1
   \   00002D   F583         MOV     DPH,A
   \   00002F   EA           MOV     A,R2
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   EB           MOV     A,R3
   \   000033   F0           MOVX    @DPTR,A
   2954              return ZSuccess;
   \   000034   7900         MOV     R1,#0x0
   \   000036   8002         SJMP    ??ZDO_RegisterForZdoCB_1
   2955            }
   2956            
   2957            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000038   7902         MOV     R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   00003A   D083         POP     DPH
   \   00003C   D082         POP     DPL
   \   00003E   02....       LJMP    ?BRET
   2958          }
   2959          
   2960          /*********************************************************************
   2961           * @fn          ZDO_DeregisterForZdoCB
   2962           *
   2963           * @brief       Call this function to de-register the higher layer (for 
   2964           *              example, the Application layer or MT layer) with ZDO 
   2965           *              callbacks to get notified of some ZDO indication like
   2966           *              existence of a concentrator or receipt of a source 
   2967           *              route record.
   2968           *
   2969           * @param       indID - ZDO Indication ID
   2970           *
   2971           * @return      ZSuccess - successful, ZInvalidParameter if not
   2972           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2973          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   2974          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FB           MOV     R3,A
   2975            // Check the range of the indication ID
   2976            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   EB           MOV     A,R3
   \   000007   C3           CLR     C
   \   000008   9405         SUBB    A,#0x5
   \   00000A   502E         JNC     ??ZDO_DeregisterForZdoCB_0
   2977            {
   2978              zdoCBFunc[indID] = NULL;
   \   00000C   EB           MOV     A,R3
   \   00000D   F8           MOV     R0,A
   \   00000E   7900         MOV     R1,#0x0
   \   000010   E8           MOV     A,R0
   \   000011   75F002       MOV     B,#0x2
   \   000014   A4           MUL     AB
   \   000015   C8           XCH     A,R0
   \   000016   AAF0         MOV     R2,B
   \   000018   75F000       MOV     B,#0x0
   \   00001B   A4           MUL     AB
   \   00001C   2A           ADD     A,R2
   \   00001D   FA           MOV     R2,A
   \   00001E   75F002       MOV     B,#0x2
   \   000021   E9           MOV     A,R1
   \   000022   A4           MUL     AB
   \   000023   2A           ADD     A,R2
   \   000024   F9           MOV     R1,A
   \   000025   74..         MOV     A,#zdoCBFunc & 0xff
   \   000027   28           ADD     A,R0
   \   000028   F582         MOV     DPL,A
   \   00002A   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00002C   39           ADDC    A,R1
   \   00002D   F583         MOV     DPH,A
   \   00002F   7400         MOV     A,#0x0
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   7400         MOV     A,#0x0
   \   000035   F0           MOVX    @DPTR,A
   2979              return ZSuccess;
   \   000036   7900         MOV     R1,#0x0
   \   000038   8002         SJMP    ??ZDO_DeregisterForZdoCB_1
   2980            }
   2981            
   2982            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   00003A   7902         MOV     R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   00003C   D083         POP     DPH
   \   00003E   D082         POP     DPL
   \   000040   02....       LJMP    ?BRET
   2983          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....         DW ZDAppTaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SecInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDOInitDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ReadNetworkRestoreState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppDetermineDeviceType?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkStartEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_DeviceAuthEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNetworkStateEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNetworkState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNetworkState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitUserDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppCheckForHoldKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessOSALMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RegisterCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessNetworkJoin?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerStart?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerCancel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlBypass?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlStartup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkDiscoveryReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_JoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_JoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendEventMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkDiscoveryConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NwkDescListProcessing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkDescListProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkFormationConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_beaconNotifyIndCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_beaconNotifyIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_StartRouterConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_AddrChangeIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ConcentratorIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveCnf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SyncIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ManytoOneFailureIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_PollConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AddrMgrWriteNVRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateDeviceIndication?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InMsgCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ChangeMatchDescRespPermission?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NwkStateUpdateCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NodeProfileSync?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StartJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StopJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_AnnounceNewAddress?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NVUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_CoordStartPANIDConflictCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SrcRtgIndCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitZdoCBFunc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitZdoCBFunc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RegisterForZdoCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_DeregisterForZdoCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_DeregisterForZdoCB
   2984          
   2985          /*********************************************************************
   2986          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   AddrMgrWriteNVRequest
      2     12   ZDAppCheckForHoldKey
        2      0   -> HalKeyRead
      2     14   ZDAppDetermineDeviceType
        2      0   -> nwk_ExtPANIDValid
      0     23   ZDApp_AnnounceNewAddress
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_GetExtAddr
        0     10   -> NLME_GetShortAddr
        0     11   -> ZDP_DeviceAnnce
      0      9   ZDApp_ChangeMatchDescRespPermission
        0      9   -> afSetMatch
      0      0   ZDApp_CoordStartPANIDConflictCB
      2      9   ZDApp_DeviceAuthEvt
        2      0   -> NLME_SetPollRate
        2      0   -> NLME_StartRouterRequest
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> ZDApp_NVUpdate
        2      0   -> ZDApp_ResetTimerCancel
        2      0   -> ZDApp_SaveNwkKey
        2      0   -> osal_set_event
      0     14   ZDApp_InMsgCB
        0     14   -> ZDP_GenericRsp
      0     12   ZDApp_Init
        0     12   -> HalLedBlink
        0     12   -> NLME_GetExtAddr
        0     12   -> ZDAppCheckForHoldKey
        0     12   -> ZDApp_InitZdoCBFunc
        0     12   -> ZDApp_RegisterCBs
        0     12   -> ZDOInitDevice
        0     12   -> ZDO_Init
        0     12   -> afRegister
      0     31   ZDApp_InitUserDesc
        0     27   -> osal_memset
        0     29   -> osal_nv_item_init
        0     31   -> osal_nv_read
      2     12   ZDApp_InitZdoCBFunc
      0     24   ZDApp_JoinReq
        0     20   -> NLME_JoinRequest
        0     16   -> ZDApp_NodeProfileSync
      2      0   ZDApp_LeaveCtrlBypass
      0     28   ZDApp_LeaveCtrlInit
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
      0     23   ZDApp_LeaveCtrlSet
        0     14   -> osal_nv_write
      0     30   ZDApp_LeaveCtrlStartup
        0     16   -> osal_nv_write
      0     23   ZDApp_LeaveReset
        0      9   -> ZDApp_LeaveCtrlSet
        0      9   -> ZDApp_ResetTimerStart
      0     25   ZDApp_LeaveUpdate
        0     11   -> NLME_RemoveChild
      0     14   ZDApp_NVUpdate
      0     12   ZDApp_NetworkDiscoveryReq
        0     12   -> NLME_NetworkDiscoveryRequest
      0     26   ZDApp_NetworkInit
        0      9   -> osal_set_event
        0      9   -> osal_start_timerEx
      2     14   ZDApp_NetworkStartEvt
        2      0   -> NLME_GetEnergyThreshold
        2      0   -> NLME_SetEnergyThreshold
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     26   ZDApp_NodeProfileSync
        0      9   -> NLME_SetBroadcastFilter
      0     32   ZDApp_NwkDescListProcessing
        0     15   -> nwk_ExtPANIDValid
        0     15   -> nwk_getNwkDescList
        0     15   -> sAddrExtCmp
      0     10   ZDApp_NwkStateUpdateCB
        0     10   -> ZDApp_NVUpdate
        0     10   -> osal_get_timeoutEx
      0     73   ZDApp_ProcessMsgCBs
        0     56   -> ZDMatchSendState
        0     56   -> ZDO_MatchEndDeviceBind
        0     56   -> ZDO_ParseAddrRsp
        0     56   -> ZDO_ParseBindUnbindReq
        0     56   -> ZDO_ParseEndDeviceBindReq
        0     56   -> ZDO_ProcessBindUnbindReq
        0     56   -> ZDO_UpdateAddrManager
        0     56   -> osal_mem_free
      0     29   ZDApp_ProcessNetworkJoin
        0     12   -> NLME_GetShortAddr
        0     12   -> NLME_NwkDiscTerm
        0     12   -> NLME_SetPollRate
        0     12   -> NLME_SetQueuedPollRate
        0     12   -> NLME_SetResponseRate
        0     12   -> NLME_StartRouterRequest
        0     12   -> ZDApp_AnnounceNewAddress
        0     12   -> ZDApp_NetworkInit
        0     12   -> ZMacSetReq
        0     12   -> nwkNeighborInitTable
        0     12   -> osal_rand
        0     12   -> osal_set_event
      0     35   ZDApp_ProcessOSALMsg
        0     21   -> NLME_JoinRequest
        0     17   -> NLME_ReJoinRequest
        0     17   -> NLME_SetPollRate
        0     17   -> NLME_SetQueuedPollRate
        0     17   -> NLME_SetResponseRate
        0     17   -> ZDApp_NetworkInit
        0     17   -> ZDApp_NodeProfileSync
        0     17   -> ZDApp_NwkDescListProcessing
        0     17   -> ZDApp_ProcessMsgCBs
        0     17   -> ZDApp_ProcessNetworkJoin
        0     17   -> ZDP_IncomingData
        0     17   -> ZMacSetReq
        0     17   -> osal_rand
        0     17   -> sAddrExtCpy
      0      9   ZDApp_ProcessSecEvent
        0      9   -> ZDApp_DeviceAuthEvt
        0      9   -> ZDApp_SaveNwkKey
        0      9   -> ZDSecMgrNewDeviceEvent
        0      9   -> ZDSecMgrSaveTCLinkKey
        0      9   -> osal_start_timerEx
      0      9   ZDApp_ProcessSecMsg
        0      9   -> ZDSecMgrSwitchKeyInd
        0      9   -> ZDSecMgrTransportKeyInd
        0      9   -> ZDSecMgrUpdateDeviceInd
      0      9   ZDApp_ReadNetworkRestoreState
        0      9   -> zgReadStartupOptions
      2     12   ZDApp_RegisterCBs
        2      0   -> ZDO_RegisterForZDOMsg
      0     35   ZDApp_ResetNwkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      2      0   ZDApp_ResetTimerCancel
        2      0   -> osal_stop_timerEx
      0     18   ZDApp_ResetTimerStart
        0      9   -> osal_start_timerEx
      0      9   ZDApp_RestoreNetworkState
        0      9   -> NLME_GetShortAddr
        0      9   -> NLME_InitNV
        0      9   -> NLME_RestoreFromNV
        0      9   -> sAddrExtCpy
      0     37   ZDApp_RestoreNwkKey
        0     33   -> osal_memset
        0     37   -> osal_nv_read
      0     14   ZDApp_SaveNetworkStateEvt
      0     46   ZDApp_SaveNwkKey
        0     33   -> SSP_ReadNwkActiveKey
        0     33   -> osal_memset
        0     37   -> osal_nv_write
      0     23   ZDApp_SecInit
        0      9   -> ZDSecMgrInit
      0     10   ZDApp_SendEventMsg
        0     10   -> ZDApp_SendMsg
      1     33   ZDApp_SendMsg
        0     19   -> osal_memcpy
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      2      0   ZDApp_StartJoiningCycle
        2      0   -> ZDApp_NetworkInit
      2      0   ZDApp_StopJoiningCycle
      0     14   ZDApp_event_loop
        0     14   -> Onboard_soft_reset
        0     14   -> ZDApp_NetworkStartEvt
        0     14   -> ZDApp_ProcessOSALMsg
        0     14   -> ZDApp_SaveNetworkStateEvt
        0     14   -> ZDO_StartDevice
        0     14   -> ZDO_UpdateNwkStatus
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     14   -> osal_pwrmgr_device
        0     14   -> osal_set_event
        0     14   -> osal_start_timerEx
      0     26   ZDOInitDevice
        0     14   -> NLME_SetBroadcastFilter
        0     14   -> ZDAppDetermineDeviceType
        0     14   -> ZDApp_LeaveCtrlInit
        0     14   -> ZDApp_LeaveCtrlStartup
        0     14   -> ZDApp_NetworkInit
        0     14   -> ZDApp_SecInit
        0     14   -> ZDConfig_InitDescriptors
        0     14   -> osal_rand
        0     14   -> osal_set_event
        0     14   -> zgInitItems
        0     14   -> zgWriteStartupOptions
      0      9   ZDO_AddrChangeIndicationCB
        0      9   -> ZDApp_AnnounceNewAddress
        0      9   -> ZDApp_NVUpdate
        0      9   -> osal_set_event
      1     16   ZDO_ConcentratorIndicationCB
      2      0   ZDO_DeregisterForZdoCB
      1     14   ZDO_JoinConfirmCB
        0     14   -> HalLedSet
        0     14   -> ZDApp_NVUpdate
        0     14   -> ZDApp_SendMsg
      0     12   ZDO_JoinIndicationCB
        0     11   -> ZDApp_NVUpdate
      0     10   ZDO_LeaveCnf
        0     10   -> NLME_GetExtAddr
        0     10   -> ZDApp_LeaveReset
        0     10   -> ZDApp_LeaveUpdate
        0     10   -> sAddrExtCmp
      1     14   ZDO_LeaveInd
        0     14   -> NLME_GetCoordShortAddr
        0     14   -> NLME_LeaveRsp
        0     14   -> ZDApp_LeaveReset
        0     14   -> ZDApp_LeaveUpdate
      2      0   ZDO_ManytoOneFailureIndicationCB
        2      0   -> RTG_MTORouteReq
      3      3   ZDO_NetworkDiscoveryConfirmCB
        2      3   -> ZDApp_SendMsg
      0      9   ZDO_NetworkFormationConfirmCB
        0      9   -> HalLedSet
        0      9   -> osal_set_event
      0      0   ZDO_PollConfirmCB
      2      0   ZDO_RegisterForZdoCB
      1     16   ZDO_SrcRtgIndCB
      0      9   ZDO_StartRouterConfirmCB
        0      9   -> HalLedSet
        0      9   -> osal_set_event
      0      9   ZDO_SyncIndicationCB
        0      9   -> ZDApp_SendMsg
        0      9   -> nwkNeighborInitTable
      0      0   ZDO_UpdateDeviceIndication
      1     16   ZDO_beaconNotifyIndCB
        0     16   -> osal_mem_alloc
        0     16   -> osal_memset
        0     16   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDApp_SavedPollRate>
       6  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for zdoDiscCounter>
       6  ??AddrMgrWriteNVRequest?relay
       6  ??ZDAppCheckForHoldKey?relay
       6  ??ZDAppDetermineDeviceType?relay
       6  ??ZDApp_AnnounceNewAddress?relay
       6  ??ZDApp_ChangeMatchDescRespPermission?relay
       6  ??ZDApp_CoordStartPANIDConflictCB?relay
       6  ??ZDApp_DeviceAuthEvt?relay
       6  ??ZDApp_InMsgCB?relay
       6  ??ZDApp_Init?relay
       6  ??ZDApp_InitUserDesc?relay
       6  ??ZDApp_InitZdoCBFunc?relay
       6  ??ZDApp_JoinReq?relay
       6  ??ZDApp_LeaveCtrlBypass?relay
       6  ??ZDApp_LeaveCtrlInit?relay
       6  ??ZDApp_LeaveCtrlSet?relay
       6  ??ZDApp_LeaveCtrlStartup?relay
       6  ??ZDApp_LeaveReset?relay
       6  ??ZDApp_LeaveUpdate?relay
       6  ??ZDApp_NVUpdate?relay
       6  ??ZDApp_NetworkDiscoveryReq?relay
       6  ??ZDApp_NetworkInit?relay
       6  ??ZDApp_NetworkStartEvt?relay
       6  ??ZDApp_NodeProfileSync?relay
       6  ??ZDApp_NwkDescListProcessing?relay
       6  ??ZDApp_NwkStateUpdateCB?relay
       6  ??ZDApp_ProcessMsgCBs?relay
       6  ??ZDApp_ProcessNetworkJoin?relay
       6  ??ZDApp_ProcessOSALMsg?relay
       6  ??ZDApp_ProcessSecEvent?relay
       6  ??ZDApp_ProcessSecMsg?relay
       6  ??ZDApp_ReadNetworkRestoreState?relay
       6  ??ZDApp_RegisterCBs?relay
       6  ??ZDApp_ResetNwkKey?relay
       6  ??ZDApp_ResetTimerCancel?relay
       6  ??ZDApp_ResetTimerStart?relay
       6  ??ZDApp_RestoreNetworkState?relay
       6  ??ZDApp_RestoreNwkKey?relay
       6  ??ZDApp_SaveNetworkStateEvt?relay
       6  ??ZDApp_SaveNwkKey?relay
       6  ??ZDApp_SecInit?relay
       6  ??ZDApp_SendEventMsg?relay
       6  ??ZDApp_SendMsg?relay
       6  ??ZDApp_StartJoiningCycle?relay
       6  ??ZDApp_StopJoiningCycle?relay
       6  ??ZDApp_event_loop?relay
       6  ??ZDOInitDevice?relay
       6  ??ZDO_AddrChangeIndicationCB?relay
       6  ??ZDO_ConcentratorIndicationCB?relay
       6  ??ZDO_DeregisterForZdoCB?relay
       6  ??ZDO_JoinConfirmCB?relay
       6  ??ZDO_JoinIndicationCB?relay
       6  ??ZDO_LeaveCnf?relay
       6  ??ZDO_LeaveInd?relay
       6  ??ZDO_ManytoOneFailureIndicationCB?relay
       6  ??ZDO_NetworkDiscoveryConfirmCB?relay
       6  ??ZDO_NetworkFormationConfirmCB?relay
       6  ??ZDO_PollConfirmCB?relay
       6  ??ZDO_RegisterForZdoCB?relay
       6  ??ZDO_SrcRtgIndCB?relay
       6  ??ZDO_StartRouterConfirmCB?relay
       6  ??ZDO_SyncIndicationCB?relay
       6  ??ZDO_UpdateDeviceIndication?relay
       6  ??ZDO_beaconNotifyIndCB?relay
       3  AddrMgrWriteNVRequest
      25  ZDAppCheckForHoldKey
      98  ZDAppDetermineDeviceType
       9  ZDAppNwkAddr
       1  ZDAppTaskID
      72  ZDApp_AnnounceNewAddress
       2  ZDApp_AutoFindMode_epDesc
      22  ZDApp_ChangeMatchDescRespPermission
      10  ZDApp_CoordStartPANIDConflictCB
     108  ZDApp_DeviceAuthEvt
     143  ZDApp_InMsgCB
     102  ZDApp_Init
     124  ZDApp_InitUserDesc
      64  ZDApp_InitZdoCBFunc
     116  ZDApp_JoinReq
       1  ZDApp_LeaveCtrl
      25  ZDApp_LeaveCtrlBypass
      87  ZDApp_LeaveCtrlInit
      69  ZDApp_LeaveCtrlSet
     112  ZDApp_LeaveCtrlStartup
      24  ZDApp_LeaveReset
      43  ZDApp_LeaveUpdate
       3  ZDApp_NVUpdate
      33  ZDApp_NetworkDiscoveryReq
      50  ZDApp_NetworkInit
     125  ZDApp_NetworkStartEvt
      53  ZDApp_NodeProfileSync
     373  ZDApp_NwkDescListProcessing
      35  ZDApp_NwkStateUpdateCB
     312  ZDApp_ProcessMsgCBs
     611  ZDApp_ProcessNetworkJoin
     665  ZDApp_ProcessOSALMsg
     196  ZDApp_ProcessSecEvent
     112  ZDApp_ProcessSecMsg
      26  ZDApp_ReadNetworkRestoreState
     102  ZDApp_RegisterCBs
      74  ZDApp_ResetNwkKey
      24  ZDApp_ResetTimerCancel
      31  ZDApp_ResetTimerStart
      86  ZDApp_RestoreNetworkState
     138  ZDApp_RestoreNwkKey
       3  ZDApp_SaveNetworkStateEvt
     109  ZDApp_SaveNwkKey
       2  ZDApp_SavedPollRate
      17  ZDApp_SecInit
      34  ZDApp_SendEventMsg
     100  ZDApp_SendMsg
      46  ZDApp_StartJoiningCycle
      39  ZDApp_StopJoiningCycle
       6  ZDApp_epDesc
     307  ZDApp_event_loop
     202  ZDOInitDevice
      33  ZDO_AddrChangeIndicationCB
      95  ZDO_ConcentratorIndicationCB
      67  ZDO_DeregisterForZdoCB
     172  ZDO_JoinConfirmCB
      25  ZDO_JoinIndicationCB
     105  ZDO_LeaveCnf
     228  ZDO_LeaveInd
      14  ZDO_ManytoOneFailureIndicationCB
      92  ZDO_NetworkDiscoveryConfirmCB
      71  ZDO_NetworkFormationConfirmCB
       3  ZDO_PollConfirmCB
      65  ZDO_RegisterForZdoCB
      95  ZDO_SrcRtgIndCB
      71  ZDO_StartRouterConfirmCB
      71  ZDO_SyncIndicationCB
       7  ZDO_UpdateDeviceIndication
       8  ZDO_UseExtendedPANID
     877  ZDO_beaconNotifyIndCB
       4  __Constant_1
       4  __Constant_3e8
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       2  nwkFrameCounterChanges
       1  nwkStatus
       1  retryCnt
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      10  zdoCBFunc
       1  zdoDiscCounter

 
 7 244 bytes in segment BANKED_CODE
   378 bytes in segment BANK_RELAYS
    10 bytes in segment XDATA_I
    10 bytes in segment XDATA_ID
     8 bytes in segment XDATA_ROM_C
    51 bytes in segment XDATA_Z
 
 7 632 bytes of CODE  memory
     0 bytes of CONST memory (+ 8 bytes shared)
    61 bytes of XDATA memory

Errors: none
Warnings: none
