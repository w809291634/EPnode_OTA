###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:47
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\stack\sys\ZGlobals.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\stack\sys\ZGlobals.c"
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        XLAB -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\ZGlobals.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\ZGlobals.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\stack\sys\ZGlobals.c
      1          /**************************************************************************************************
      2            Filename:       ZGlobals.c
      3            Revised:        $Date: 2010-08-20 16:29:19 -0700 (Fri, 20 Aug 2010) $
      4            Revision:       $Revision: 23466 $
      5          
      6            Description:    User definable Z-Stack parameters.
      7          
      8          
      9            Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL_Nv.h"
     46          #include "ZDObject.h"
     47          #include "ZGlobals.h"
     48          #include "ZDNwkMgr.h"
     49          #include "OnBoard.h"
     50          #include "ZDSecMgr.h"
     51          
     52          /*********************************************************************
     53           * MACROS
     54           */
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          /*********************************************************************
     61           * TYPEDEFS
     62           */
     63          
     64          typedef struct zgItem
     65          {
     66            uint16 id;
     67            uint16 len;
     68            void *buf;
     69          } zgItem_t;
     70          
     71          /*********************************************************************
     72           * NWK GLOBAL VARIABLES
     73           */
     74          
     75          // Polling values

   \                                 In  segment XDATA_I, align 1, keep-with-next
     76          uint16 zgPollRate = POLL_RATE;
   \                     zgPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     77          uint16 zgQueuedPollRate = QUEUED_POLL_RATE;
   \                     zgQueuedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgQueuedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     78          uint16 zgResponsePollRate = RESPONSE_POLL_RATE;
   \                     zgResponsePollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgResponsePollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     79          uint16 zgRejoinPollRate = REJOIN_POLL_RATE;
   \                     zgRejoinPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgRejoinPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
     80          
     81          // Transmission retries numbers

   \                                 In  segment XDATA_I, align 1, keep-with-next
     82          uint8 zgMaxDataRetries = NWK_MAX_DATA_RETRIES;
   \                     zgMaxDataRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxDataRetries>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     83          uint8 zgMaxPollFailureRetries = MAX_POLL_FAILURE_RETRIES;
   \                     zgMaxPollFailureRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxPollFailureRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
     84          
     85          // Default channel list

   \                                 In  segment XDATA_I, align 1, keep-with-next
     86          uint32 zgDefaultChannelList = DEFAULT_CHANLIST;
   \                     zgDefaultChannelList:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zgDefaultChannelList>`
   \   000004                REQUIRE __INIT_XDATA_I
     87          
     88          // Default starting scan duration

   \                                 In  segment XDATA_I, align 1, keep-with-next
     89          uint8 zgDefaultStartingScanDuration = STARTING_SCAN_DURATION;
   \                     zgDefaultStartingScanDuration:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgDefaultStartingScanDuratio`
   \   000001                REQUIRE __INIT_XDATA_I
     90          
     91          // Stack profile Id

   \                                 In  segment XDATA_I, align 1, keep-with-next
     92          uint8 zgStackProfile = STACK_PROFILE_ID;
   \                     zgStackProfile:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStackProfile>`
   \   000001                REQUIRE __INIT_XDATA_I
     93          
     94          // Default indirect message holding timeout

   \                                 In  segment XDATA_I, align 1, keep-with-next
     95          uint8 zgIndirectMsgTimeout = NWK_INDIRECT_MSG_TIMEOUT;
   \                     zgIndirectMsgTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgIndirectMsgTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I
     96          
     97          // Security mode

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          uint8 zgSecurityMode = ZG_SECURITY_MODE;
   \                     zgSecurityMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     99          
    100          // Secure permit join

   \                                 In  segment XDATA_I, align 1, keep-with-next
    101          uint8 zgSecurePermitJoin = true;
   \                     zgSecurePermitJoin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSecurePermitJoin>`
   \   000001                REQUIRE __INIT_XDATA_I
    102          
    103          // Trust center address

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          uint16 zgTrustCenterAddr = ZG_TRUSTCENTER_ADDR;
   \                     zgTrustCenterAddr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    105          
    106          // Route Discovery Time - amount of time that a route request lasts

   \                                 In  segment XDATA_I, align 1, keep-with-next
    107          uint8 zgRouteDiscoveryTime = ROUTE_DISCOVERY_TIME;
   \                     zgRouteDiscoveryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgRouteDiscoveryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    108          
    109          // Route expiry

   \                                 In  segment XDATA_I, align 1, keep-with-next
    110          uint8 zgRouteExpiryTime = ROUTE_EXPIRY_TIME;
   \                     zgRouteExpiryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgRouteExpiryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    111          
    112          // Extended PAN Id

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    113          uint8 zgExtendedPANID[Z_EXTADDR_LEN];
   \                     zgExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    114          
    115          // Broadcast parameters

   \                                 In  segment XDATA_I, align 1, keep-with-next
    116          uint8 zgMaxBcastRetires   = MAX_BCAST_RETRIES;
   \                     zgMaxBcastRetires:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxBcastRetires>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    117          uint8 zgPassiveAckTimeout = PASSIVE_ACK_TIMEOUT;
   \                     zgPassiveAckTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgPassiveAckTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    118          uint8 zgBcastDeliveryTime = BCAST_DELIVERY_TIME;
   \                     zgBcastDeliveryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgBcastDeliveryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    119          
    120          // Network mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    121          uint8 zgNwkMode = NWK_MODE;
   \                     zgNwkMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    122          
    123          // Many-to-one values

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    124          uint8 zgConcentratorEnable = CONCENTRATOR_ENABLE;
   \                     zgConcentratorEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          uint8 zgConcentratorDiscoveryTime = CONCENTRATOR_DISCOVERY_TIME;
   \                     zgConcentratorDiscoveryTime:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    126          uint8 zgConcentratorRadius = CONCENTRATOR_RADIUS;
   \                     zgConcentratorRadius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgConcentratorRadius>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          uint8 zgConcentratorRC = CONCENTRATOR_ROUTE_CACHE;   // concentrator with route cache (no memory constraints)
   \                     zgConcentratorRC:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    128          uint8 zgNwkSrcRtgExpiryTime = SRC_RTG_EXPIRY_TIME;
   \                     zgNwkSrcRtgExpiryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkSrcRtgExpiryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    129          
    130          /*********************************************************************
    131           * APS GLOBAL VARIABLES
    132           */
    133          
    134          // The maximum number of retries allowed after a transmission failure

   \                                 In  segment XDATA_I, align 1, keep-with-next
    135          uint8 zgApscMaxFrameRetries = APSC_MAX_FRAME_RETRIES;
   \                     zgApscMaxFrameRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApscMaxFrameRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
    136          
    137          // The maximum number of seconds (milliseconds) to wait for an
    138          // acknowledgement to a transmitted frame.
    139          
    140          // This number is used by polled devices.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    141          uint16 zgApscAckWaitDurationPolled = APSC_ACK_WAIT_DURATION_POLLED;
   \                     zgApscAckWaitDurationPolled:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApscAckWaitDurationPolled>`
   \   000002                REQUIRE __INIT_XDATA_I
    142          
    143          // This number is used by non-polled devices in the following formula:
    144          //   (100 mSec) * (_NIB.MaxDepth * zgApsAckWaitMultiplier)

   \                                 In  segment XDATA_I, align 1, keep-with-next
    145          uint8 zgApsAckWaitMultiplier = 2;
   \                     zgApsAckWaitMultiplier:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsAckWaitMultiplier>`
   \   000001                REQUIRE __INIT_XDATA_I
    146          
    147          // The maximum number of milliseconds for the end device binding

   \                                 In  segment XDATA_I, align 1, keep-with-next
    148          uint16 zgApsDefaultMaxBindingTime = APS_DEFAULT_MAXBINDING_TIME;
   \                     zgApsDefaultMaxBindingTime:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApsDefaultMaxBindingTime>`
   \   000002                REQUIRE __INIT_XDATA_I
    149          
    150          // The 64-big identifier of the network to join or form.
    151          // Default set to all zeros

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 zgApsUseExtendedPANID[Z_EXTADDR_LEN] = {00,00,00,00,00,00,00,00};
   \                     zgApsUseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    153          
    154          // A boolean flag that indicates whether it is OK to use insecure join
    155          // on startup. Default set to true

   \                                 In  segment XDATA_I, align 1, keep-with-next
    156          uint8 zgApsUseInsecureJoin = TRUE;
   \                     zgApsUseInsecureJoin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsUseInsecureJoin>`
   \   000001                REQUIRE __INIT_XDATA_I
    157          
    158          // The radius of broadcast multicast transmissions

   \                                 In  segment XDATA_I, align 1, keep-with-next
    159          uint8 zgApsNonMemberRadius = APS_DEFAULT_NONMEMBER_RADIUS;
   \                     zgApsNonMemberRadius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsNonMemberRadius>`
   \   000001                REQUIRE __INIT_XDATA_I
    160          
    161          // The size of a tx window when using fragmentation

   \                                 In  segment XDATA_I, align 1, keep-with-next
    162          uint8 zgApsfMaxWindowSize = APSF_DEFAULT_WINDOW_SIZE;
   \                     zgApsfMaxWindowSize:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsfMaxWindowSize>`
   \   000001                REQUIRE __INIT_XDATA_I
    163          
    164          // The delay between tx packets when using fragmentaition

   \                                 In  segment XDATA_I, align 1, keep-with-next
    165          uint16 zgApsfInterframeDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \                     zgApsfInterframeDelay:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApsfInterframeDelay>`
   \   000002                REQUIRE __INIT_XDATA_I
    166          
    167          /*********************************************************************
    168           * SECURITY GLOBAL VARIABLES
    169           */
    170          
    171          // If true, preConfigKey should be configured on all devices on the network
    172          // If false, it is configured only on the coordinator and sent to other
    173          // devices upon joining.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          uint8 zgPreConfigKeys = FALSE;// TRUE;
   \                     zgPreConfigKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    175          
    176          // If true, defaultTCLinkKey should be configured on all devices on the
    177          // network. If false, individual trust center link key between each device and
    178          // the trust center should be manually configured via MT_WRITE_NV

   \                                 In  segment XDATA_I, align 1, keep-with-next
    179          uint8 zgUseDefaultTCLK = TRUE; // FALSE
   \                     zgUseDefaultTCLK:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgUseDefaultTCLK>`
   \   000001                REQUIRE __INIT_XDATA_I
    180          
    181          /*********************************************************************
    182           * ZDO GLOBAL VARIABLES
    183           */
    184          
    185          // Configured PAN ID

   \                                 In  segment XDATA_I, align 1, keep-with-next
    186          uint16 zgConfigPANID = ZDAPP_CONFIG_PAN_ID;
   \                     zgConfigPANID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgConfigPANID>`
   \   000002                REQUIRE __INIT_XDATA_I
    187          
    188          // Device Logical Type

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          uint8 zgDeviceLogicalType = DEVICE_LOGICAL_TYPE;
   \                     zgDeviceLogicalType:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    190          
    191          // Startup Delay

   \                                 In  segment XDATA_I, align 1, keep-with-next
    192          uint8 zgStartDelay = START_DELAY;
   \                     zgStartDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStartDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
    193          
    194          #if !defined MT_TASK
    195          // Flag to use verbose (i.e. "cc2480-style") direct MT callbacks in ZDProfile.c, ZDP_IncomingData().

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          uint8 zgZdoDirectCB = FALSE;
   \                     zgZdoDirectCB:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    197          #endif
    198          
    199          // Min number of attempted transmissions for Channel Interference detection

   \                                 In  segment XDATA_I, align 1, keep-with-next
    200          uint8 zgNwkMgrMinTransmissions = ZDNWKMGR_MIN_TRANSMISSIONS;
   \                     zgNwkMgrMinTransmissions:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMgrMinTransmissions>`
   \   000001                REQUIRE __INIT_XDATA_I
    201          
    202          /*********************************************************************
    203           * APPLICATION GLOBAL VARIABLES
    204           */
    205          
    206          // Network Manager Mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    207          uint8 zgNwkMgrMode = ZDNWKMGR_ENABLE;
   \                     zgNwkMgrMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMgrMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    208          
    209          /*********************************************************************
    210           * NON-STANDARD GLOBAL VARIABLES
    211           */
    212          
    213          // Simple API Endpoint

   \                                 In  segment XDATA_I, align 1, keep-with-next
    214          uint8 zgSapiEndpoint = SAPI_ENDPOINT;
   \                     zgSapiEndpoint:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSapiEndpoint>`
   \   000001                REQUIRE __INIT_XDATA_I
    215          
    216          /*********************************************************************
    217           * LOCAL VARIABLES
    218           */
    219          
    220          /*********************************************************************
    221           * ZGlobal Item Table
    222           */

   \                                 In  segment CODE_C, align 1
    223          static CONST zgItem_t zgItemTable[] =
   \                     zgItemTable:
   \   000000   8F00         DW 143
   \   000002   0100         DW 1
   \   000004   ....         DW zgZdoDirectCB
   \   000006   8700         DW 135
   \   000008   0100         DW 1
   \   00000A   ....         DW zgDeviceLogicalType
   \   00000C   2400         DW 36
   \   00000E   0200         DW 2
   \   000010   ....         DW zgPollRate
   \   000012   2500         DW 37
   \   000014   0200         DW 2
   \   000016   ....         DW zgQueuedPollRate
   \   000018   2600         DW 38
   \   00001A   0200         DW 2
   \   00001C   ....         DW zgResponsePollRate
   \   00001E   2700         DW 39
   \   000020   0200         DW 2
   \   000022   ....         DW zgRejoinPollRate
   \   000024   2800         DW 40
   \   000026   0100         DW 1
   \   000028   ....         DW zgMaxDataRetries
   \   00002A   2900         DW 41
   \   00002C   0100         DW 1
   \   00002E   ....         DW zgMaxPollFailureRetries
   \   000030   8400         DW 132
   \   000032   0400         DW 4
   \   000034   ....         DW zgDefaultChannelList
   \   000036   8600         DW 134
   \   000038   0100         DW 1
   \   00003A   ....         DW zgDefaultStartingScanDuration
   \   00003C   2A00         DW 42
   \   00003E   0100         DW 1
   \   000040   ....         DW zgStackProfile
   \   000042   2B00         DW 43
   \   000044   0100         DW 1
   \   000046   ....         DW zgIndirectMsgTimeout
   \   000048   2C00         DW 44
   \   00004A   0100         DW 1
   \   00004C   ....         DW zgRouteExpiryTime
   \   00004E   2D00         DW 45
   \   000050   0800         DW 8
   \   000052   ....         DW zgExtendedPANID
   \   000054   2E00         DW 46
   \   000056   0100         DW 1
   \   000058   ....         DW zgMaxBcastRetires
   \   00005A   2F00         DW 47
   \   00005C   0100         DW 1
   \   00005E   ....         DW zgPassiveAckTimeout
   \   000060   3000         DW 48
   \   000062   0100         DW 1
   \   000064   ....         DW zgBcastDeliveryTime
   \   000066   3100         DW 49
   \   000068   0100         DW 1
   \   00006A   ....         DW zgNwkMode
   \   00006C   3200         DW 50
   \   00006E   0100         DW 1
   \   000070   ....         DW zgConcentratorEnable
   \   000072   3300         DW 51
   \   000074   0100         DW 1
   \   000076   ....         DW zgConcentratorDiscoveryTime
   \   000078   3400         DW 52
   \   00007A   0100         DW 1
   \   00007C   ....         DW zgConcentratorRadius
   \   00007E   3600         DW 54
   \   000080   0100         DW 1
   \   000082   ....         DW zgConcentratorRC
   \   000084   3800         DW 56
   \   000086   0100         DW 1
   \   000088   ....         DW zgNwkSrcRtgExpiryTime
   \   00008A   3900         DW 57
   \   00008C   0100         DW 1
   \   00008E   ....         DW zgRouteDiscoveryTime
   \   000090   8300         DW 131
   \   000092   0200         DW 2
   \   000094   ....         DW zgConfigPANID
   \   000096   6300         DW 99
   \   000098   0100         DW 1
   \   00009A   ....         DW zgPreConfigKeys
   \   00009C   6400         DW 100
   \   00009E   0100         DW 1
   \   0000A0   ....         DW zgSecurityMode
   \   0000A2   6500         DW 101
   \   0000A4   0100         DW 1
   \   0000A6   ....         DW zgSecurePermitJoin
   \   0000A8   6D00         DW 109
   \   0000AA   0100         DW 1
   \   0000AC   ....         DW zgUseDefaultTCLK
   \   0000AE   6E00         DW 110
   \   0000B0   0200         DW 2
   \   0000B2   ....         DW zgTrustCenterAddr
   \   0000B4   4300         DW 67
   \   0000B6   0100         DW 1
   \   0000B8   ....         DW zgApscMaxFrameRetries
   \   0000BA   4400         DW 68
   \   0000BC   0200         DW 2
   \   0000BE   ....         DW zgApscAckWaitDurationPolled
   \   0000C0   4500         DW 69
   \   0000C2   0100         DW 1
   \   0000C4   ....         DW zgApsAckWaitMultiplier
   \   0000C6   4600         DW 70
   \   0000C8   0200         DW 2
   \   0000CA   ....         DW zgApsDefaultMaxBindingTime
   \   0000CC   4700         DW 71
   \   0000CE   0800         DW 8
   \   0000D0   ....         DW zgApsUseExtendedPANID
   \   0000D2   4800         DW 72
   \   0000D4   0100         DW 1
   \   0000D6   ....         DW zgApsUseInsecureJoin
   \   0000D8   4900         DW 73
   \   0000DA   0100         DW 1
   \   0000DC   ....         DW zgApsfMaxWindowSize
   \   0000DE   4A00         DW 74
   \   0000E0   0200         DW 2
   \   0000E2   ....         DW zgApsfInterframeDelay
   \   0000E4   4B00         DW 75
   \   0000E6   0100         DW 1
   \   0000E8   ....         DW zgApsNonMemberRadius
   \   0000EA   0400         DW 4
   \   0000EC   0100         DW 1
   \   0000EE   ....         DW zgStartDelay
   \   0000F0   A100         DW 161
   \   0000F2   0100         DW 1
   \   0000F4   ....         DW zgSapiEndpoint
   \   0000F6   3700         DW 55
   \   0000F8   0100         DW 1
   \   0000FA   ....         DW zgNwkMgrMode
   \   0000FC   8800         DW 136
   \   0000FE   0100         DW 1
   \   000100   ....         DW zgNwkMgrMinTransmissions
   \   000102   0000         DW 0
   \   000104   0000         DW 0
   \   000106   0000         DW 0H
    224          {
    225          #if defined ( NV_INIT )
    226          #if !defined MT_TASK
    227            {
    228              ZCD_NV_ZDO_DIRECT_CB, sizeof(zgZdoDirectCB), &zgZdoDirectCB
    229            },
    230          #endif
    231            {
    232              ZCD_NV_LOGICAL_TYPE, sizeof(zgDeviceLogicalType), &zgDeviceLogicalType
    233            },
    234            {
    235              ZCD_NV_POLL_RATE, sizeof(zgPollRate), &zgPollRate
    236            },
    237            {
    238              ZCD_NV_QUEUED_POLL_RATE, sizeof(zgQueuedPollRate), &zgQueuedPollRate
    239            },
    240            {
    241              ZCD_NV_RESPONSE_POLL_RATE, sizeof(zgResponsePollRate), &zgResponsePollRate
    242            },
    243            {
    244              ZCD_NV_REJOIN_POLL_RATE, sizeof(zgRejoinPollRate), &zgRejoinPollRate
    245            },
    246            {
    247              ZCD_NV_DATA_RETRIES, sizeof(zgMaxDataRetries), &zgMaxDataRetries
    248            },
    249            {
    250              ZCD_NV_POLL_FAILURE_RETRIES, sizeof(zgMaxPollFailureRetries), &zgMaxPollFailureRetries
    251            },
    252            {
    253              ZCD_NV_CHANLIST, sizeof(zgDefaultChannelList), &zgDefaultChannelList
    254            },
    255            {
    256              ZCD_NV_SCAN_DURATION, sizeof(zgDefaultStartingScanDuration), &zgDefaultStartingScanDuration
    257            },
    258            {
    259              ZCD_NV_STACK_PROFILE, sizeof(zgStackProfile), &zgStackProfile
    260            },
    261            {
    262              ZCD_NV_INDIRECT_MSG_TIMEOUT, sizeof(zgIndirectMsgTimeout), &zgIndirectMsgTimeout
    263            },
    264            {
    265              ZCD_NV_ROUTE_EXPIRY_TIME, sizeof(zgRouteExpiryTime), &zgRouteExpiryTime
    266            },
    267            {
    268              ZCD_NV_EXTENDED_PAN_ID, Z_EXTADDR_LEN, zgExtendedPANID
    269            },
    270            {
    271              ZCD_NV_BCAST_RETRIES, sizeof(zgMaxBcastRetires), &zgMaxBcastRetires
    272            },
    273            {
    274              ZCD_NV_PASSIVE_ACK_TIMEOUT, sizeof(zgPassiveAckTimeout), &zgPassiveAckTimeout
    275            },
    276            {
    277              ZCD_NV_BCAST_DELIVERY_TIME, sizeof(zgBcastDeliveryTime), &zgBcastDeliveryTime
    278            },
    279            {
    280              ZCD_NV_NWK_MODE, sizeof(zgNwkMode), &zgNwkMode
    281            },
    282            {
    283              ZCD_NV_CONCENTRATOR_ENABLE, sizeof(zgConcentratorEnable), &zgConcentratorEnable
    284            },
    285            {
    286              ZCD_NV_CONCENTRATOR_DISCOVERY, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime
    287            },
    288            {
    289              ZCD_NV_CONCENTRATOR_RADIUS, sizeof(zgConcentratorRadius), &zgConcentratorRadius
    290            },
    291            {
    292              ZCD_NV_CONCENTRATOR_RC, sizeof(zgConcentratorRC), &zgConcentratorRC
    293            },
    294            {
    295              ZCD_NV_SRC_RTG_EXPIRY_TIME, sizeof(zgNwkSrcRtgExpiryTime), &zgNwkSrcRtgExpiryTime
    296            },
    297            {
    298              ZCD_NV_ROUTE_DISCOVERY_TIME, sizeof(zgRouteDiscoveryTime), &zgRouteDiscoveryTime
    299            },
    300          #ifndef NONWK
    301            {
    302              ZCD_NV_PANID, sizeof(zgConfigPANID), &zgConfigPANID
    303            },
    304            {
    305              ZCD_NV_PRECFGKEYS_ENABLE, sizeof(zgPreConfigKeys), &zgPreConfigKeys
    306            },
    307            {
    308              ZCD_NV_SECURITY_MODE, sizeof(zgSecurityMode), &zgSecurityMode
    309            },
    310            {
    311              ZCD_NV_SECURE_PERMIT_JOIN, sizeof(zgSecurePermitJoin), &zgSecurePermitJoin
    312            },
    313            {
    314              ZCD_NV_USE_DEFAULT_TCLK, sizeof(zgUseDefaultTCLK), &zgUseDefaultTCLK
    315            },
    316            {
    317              ZCD_NV_TRUSTCENTER_ADDR, sizeof(zgTrustCenterAddr), &zgTrustCenterAddr
    318            },
    319          #endif // NONWK
    320            {
    321              ZCD_NV_APS_FRAME_RETRIES, sizeof(zgApscMaxFrameRetries), &zgApscMaxFrameRetries
    322            },
    323            {
    324              ZCD_NV_APS_ACK_WAIT_DURATION, sizeof(zgApscAckWaitDurationPolled), &zgApscAckWaitDurationPolled
    325            },
    326            {
    327              ZCD_NV_APS_ACK_WAIT_MULTIPLIER, sizeof(zgApsAckWaitMultiplier), &zgApsAckWaitMultiplier
    328            },
    329            {
    330              ZCD_NV_BINDING_TIME, sizeof(zgApsDefaultMaxBindingTime), &zgApsDefaultMaxBindingTime
    331            },
    332            {
    333              ZCD_NV_APS_USE_EXT_PANID, Z_EXTADDR_LEN, zgApsUseExtendedPANID
    334            },
    335            {
    336              ZCD_NV_APS_USE_INSECURE_JOIN, sizeof(zgApsUseInsecureJoin), &zgApsUseInsecureJoin
    337            },
    338            {
    339              ZCD_NV_APSF_WINDOW_SIZE, sizeof(zgApsfMaxWindowSize), &zgApsfMaxWindowSize
    340            },
    341            {
    342              ZCD_NV_APSF_INTERFRAME_DELAY, sizeof(zgApsfInterframeDelay), &zgApsfInterframeDelay
    343            },
    344            {
    345              ZCD_NV_APS_NONMEMBER_RADIUS, sizeof(zgApsNonMemberRadius), &zgApsNonMemberRadius
    346            },
    347            {
    348              ZCD_NV_START_DELAY, sizeof(zgStartDelay), &zgStartDelay
    349            },
    350            {
    351              ZCD_NV_SAPI_ENDPOINT, sizeof(zgSapiEndpoint), &zgSapiEndpoint
    352            },
    353            {
    354              ZCD_NV_NWK_MGR_MODE, sizeof(zgNwkMgrMode), &zgNwkMgrMode
    355            },
    356            {
    357              ZCD_NV_NWKMGR_MIN_TX, sizeof(zgNwkMgrMinTransmissions), &zgNwkMgrMinTransmissions
    358            },
    359          #endif // NV_INIT
    360          
    361            // Last item -- DO NOT MOVE IT!
    362            {
    363              0x00, 0, NULL
    364            }
    365          };
    366          
    367          /*********************************************************************
    368           * LOCAL FUNCTIONS
    369           */
    370          
    371          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault );
    372          static uint8 zgPreconfigKeyInit( uint8 setDefault );
    373          
    374          /*********************************************************************
    375           * @fn       zgItemInit()
    376           *
    377           * @brief
    378           *
    379           *   Initialize a global item. If the item doesn't exist in NV memory,
    380           *   write the system default (value passed in) into NV memory. But if
    381           *   it exists, set the item to the value stored in NV memory.
    382           *
    383           *   Also, if setDefault is TRUE and the item exists, we will write
    384           *   the default value to NV space.
    385           *
    386           * @param   id - item id
    387           * @param   len - item len
    388           * @param   buf - pointer to the item
    389           * @param   setDefault - TRUE to set default, not read
    390           *
    391           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    392           *          exist in NV, NV_OPER_FAILED if failure.
    393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    394          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault )
   \                     zgItemInit:
    395          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   89..         MOV     ?V3,R1
   \   00000F   7410         MOV     A,#0x10
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V4,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V5,A
    396            uint8 status;
    397          
    398            // If the item doesn't exist in NV memory, create and initialize
    399            // it with the value passed in.
    400            status = osal_nv_item_init( id, len, buf );
   \   00001B                ; Setup parameters for call to function osal_nv_item_init
   \   00001B   78..         MOV     R0,#?V4
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   EE           MOV     A,R6
   \   000021   FC           MOV     R4,A
   \   000022   EF           MOV     A,R7
   \   000023   FD           MOV     R5,A
   \   000024   AA..         MOV     R2,?V0
   \   000026   AB..         MOV     R3,?V1
   \   000028   12....       LCALL   ??osal_nv_item_init?relay; Banked call to: osal_nv_item_init
   \   00002B   7402         MOV     A,#0x2
   \   00002D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000030   E9           MOV     A,R1
   \   000031   F5..         MOV     ?V2,A
    401            if ( status == ZSUCCESS )
   \   000033   E5..         MOV     A,?V2
   \   000035   7048         JNZ     ??zgItemInit_0
    402            {
    403              if ( setDefault )
   \   000037   E5..         MOV     A,?V3
   \   000039   6023         JZ      ??zgItemInit_1
    404              {
    405                // Write the default value back to NV
    406                status = osal_nv_write( id, 0, len, buf );
   \   00003B                ; Setup parameters for call to function osal_nv_write
   \   00003B   78..         MOV     R0,#?V4
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   8E..         MOV     ?V6,R6
   \   000042   8F..         MOV     ?V7,R7
   \   000044   78..         MOV     R0,#?V6
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   7C00         MOV     R4,#0x0
   \   00004B   7D00         MOV     R5,#0x0
   \   00004D   AA..         MOV     R2,?V0
   \   00004F   AB..         MOV     R3,?V1
   \   000051   12....       LCALL   ??osal_nv_write?relay; Banked call to: osal_nv_write
   \   000054   7404         MOV     A,#0x4
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
   \   000059   E9           MOV     A,R1
   \   00005A   F5..         MOV     ?V2,A
   \   00005C   8021         SJMP    ??zgItemInit_0
    407              }
    408              else
    409              {
    410                // The item exists in NV memory, read it from NV memory
    411                status = osal_nv_read( id, 0, len, buf );
   \                     ??zgItemInit_1:
   \   00005E                ; Setup parameters for call to function osal_nv_read
   \   00005E   78..         MOV     R0,#?V4
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000063   8E..         MOV     ?V6,R6
   \   000065   8F..         MOV     ?V7,R7
   \   000067   78..         MOV     R0,#?V6
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006C   7C00         MOV     R4,#0x0
   \   00006E   7D00         MOV     R5,#0x0
   \   000070   AA..         MOV     R2,?V0
   \   000072   AB..         MOV     R3,?V1
   \   000074   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   000077   7404         MOV     A,#0x4
   \   000079   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007C   E9           MOV     A,R1
   \   00007D   F5..         MOV     ?V2,A
    412              }
    413            }
    414          
    415            return (status);
   \                     ??zgItemInit_0:
   \   00007F   A9..         MOV     R1,?V2
   \   000081   7F08         MOV     R7,#0x8
   \   000083   02....       LJMP    ?BANKED_LEAVE_XDATA
    416          }
    417          
    418          /*********************************************************************
    419           * API FUNCTIONS
    420           */
    421          
    422          /*********************************************************************
    423           * @fn          zgInit
    424           *
    425           * @brief
    426           *
    427           *   Initialize the Z-Stack Globals. If an item doesn't exist in
    428           *   NV memory, write the system default into NV memory. But if
    429           *   it exists, set the item to the value stored in NV memory.
    430           *
    431           * NOTE: The Startup Options (ZCD_NV_STARTUP_OPTION) indicate
    432           *       that the Config state items (zgItemTable) need to be
    433           *       set to defaults (ZCD_STARTOPT_DEFAULT_CONFIG_STATE). The
    434           *
    435           * @param       none
    436           *
    437           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    438           *              exist in NV, NV_OPER_FAILED if failure.
    439           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    440          uint8 zgInit( void )
   \                     zgInit:
    441          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    442            uint8  setDefault = FALSE;
   \   000005   7E00         MOV     R6,#0x0
    443          
    444            // Do we want to default the Config state values
    445            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_CONFIG_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   ??zgReadStartupOptions?relay; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV     A,R1
   \   00000B   F8           MOV     R0,A
   \   00000C   E8           MOV     A,R0
   \   00000D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000F   5002         JNC     ??zgInit_0
    446            {
    447              setDefault = TRUE;
   \   000011   7E01         MOV     R6,#0x1
    448            }
    449          
    450          #if 0
    451            // Enable this section if you need to track the number of resets
    452            // This section is normally disabled to minimize "wear" on NV memory
    453            uint16 bootCnt = 0;
    454          
    455            // Update the Boot Counter
    456            if ( osal_nv_item_init( ZCD_NV_BOOTCOUNTER, sizeof(bootCnt), &bootCnt ) == ZSUCCESS )
    457            {
    458              // Get the old value from NV memory
    459              osal_nv_read( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    460            }
    461          
    462            // Increment the Boot Counter and store it into NV memory
    463            if ( setDefault )
    464              bootCnt = 0;
    465            else
    466              bootCnt++;
    467            osal_nv_write( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    468          #endif
    469          
    470            // Initialize the Extended PAN ID as my own extended address
    471            ZMacGetReq( ZMacExtAddr, zgExtendedPANID );
   \                     ??zgInit_0:
   \   000013                ; Setup parameters for call to function ZMacGetReq
   \   000013   7A..         MOV     R2,#zgExtendedPANID & 0xff
   \   000015   7B..         MOV     R3,#(zgExtendedPANID >> 8) & 0xff
   \   000017   79E2         MOV     R1,#-0x1e
   \   000019   12....       LCALL   ??ZMacGetReq?relay   ; Banked call to: ZMacGetReq
   \   00001C   E9           MOV     A,R1
    472          
    473            // Initialize the items table
    474            zgInitItems( setDefault );
   \   00001D                ; Setup parameters for call to function zgInitItems
   \   00001D   EE           MOV     A,R6
   \   00001E   F9           MOV     R1,A
   \   00001F   12....       LCALL   ??zgInitItems?relay  ; Banked call to: zgInitItems
    475          
    476          #ifndef NONWK
    477            if ( ZG_SECURE_ENABLED )
    478            {
    479              // Initialize the Pre-Configured Key to the default key
    480              zgPreconfigKeyInit( setDefault );
    481          
    482              // Initialize NV items for all Keys: NWK, APS, TCLK and Master
    483              ZDSecMgrInitNVKeyTables( setDefault );
    484            }
    485          #endif // NONWK
    486          
    487            // Clear the Config State default
    488            if ( setDefault )
   \   000022   EE           MOV     A,R6
   \   000023   6008         JZ      ??zgInit_1
    489            {
    490              zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE );
   \   000025                ; Setup parameters for call to function zgWriteStartupOptions
   \   000025   7A01         MOV     R2,#0x1
   \   000027   7900         MOV     R1,#0x0
   \   000029   12....       LCALL   ??zgWriteStartupOptions?relay; Banked call to: zgWriteStartupOptions
   \   00002C   E9           MOV     A,R1
    491            }
    492          
    493            return ( ZSUCCESS );
   \                     ??zgInit_1:
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   7F01         MOV     R7,#0x1
   \   000031   02....       LJMP    ?BANKED_LEAVE_XDATA
    494          }
    495          
    496          /*********************************************************************
    497           * @fn          zgInitItems
    498           *
    499           * @brief       Initializes RAM variables from NV.  If NV items don't
    500           *              exist, then the NV is initialize with what is in RAM
    501           *              variables.
    502           *
    503           * @param       none
    504           *
    505           * @return      none
    506           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    507          void zgInitItems( uint8 setDefault )
   \                     zgInitItems:
    508          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    509            uint8  i = 0;
   \   000007   7E00         MOV     R6,#0x0
    510          
    511            while ( zgItemTable[i].id != 0x00 )
   \                     ??zgInitItems_0:
   \   000009   EE           MOV     A,R6
   \   00000A   F8           MOV     R0,A
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   E8           MOV     A,R0
   \   00000E   75F006       MOV     B,#0x6
   \   000011   A4           MUL     AB
   \   000012   C8           XCH     A,R0
   \   000013   AAF0         MOV     R2,B
   \   000015   75F000       MOV     B,#0x0
   \   000018   A4           MUL     AB
   \   000019   2A           ADD     A,R2
   \   00001A   FA           MOV     R2,A
   \   00001B   75F006       MOV     B,#0x6
   \   00001E   E9           MOV     A,R1
   \   00001F   A4           MUL     AB
   \   000020   2A           ADD     A,R2
   \   000021   F9           MOV     R1,A
   \   000022   74..         MOV     A,#zgItemTable & 0xff
   \   000024   28           ADD     A,R0
   \   000025   F582         MOV     DPL,A
   \   000027   74..         MOV     A,#(zgItemTable >> 8) & 0xff
   \   000029   39           ADDC    A,R1
   \   00002A   F583         MOV     DPH,A
   \   00002C   E4           CLR     A
   \   00002D   93           MOVC    A,@A+DPTR
   \   00002E   F8           MOV     R0,A
   \   00002F   7401         MOV     A,#0x1
   \   000031   93           MOVC    A,@A+DPTR
   \   000032   F9           MOV     R1,A
   \   000033   E8           MOV     A,R0
   \   000034   49           ORL     A,R1
   \   000035   7003         JNZ     $+5
   \   000037   02....       LJMP    ??zgInitItems_1 & 0xFFFF
    512            {
    513              // Initialize the item
    514              zgItemInit( zgItemTable[i].id, zgItemTable[i].len, zgItemTable[i].buf, setDefault  );
   \   00003A                ; Setup parameters for call to function zgItemInit
   \   00003A   EE           MOV     A,R6
   \   00003B   F8           MOV     R0,A
   \   00003C   7900         MOV     R1,#0x0
   \   00003E   E8           MOV     A,R0
   \   00003F   75F006       MOV     B,#0x6
   \   000042   A4           MUL     AB
   \   000043   C8           XCH     A,R0
   \   000044   AAF0         MOV     R2,B
   \   000046   75F000       MOV     B,#0x0
   \   000049   A4           MUL     AB
   \   00004A   2A           ADD     A,R2
   \   00004B   FA           MOV     R2,A
   \   00004C   75F006       MOV     B,#0x6
   \   00004F   E9           MOV     A,R1
   \   000050   A4           MUL     AB
   \   000051   2A           ADD     A,R2
   \   000052   F9           MOV     R1,A
   \   000053   74..         MOV     A,#(zgItemTable + 4) & 0xff
   \   000055   28           ADD     A,R0
   \   000056   F582         MOV     DPL,A
   \   000058   74..         MOV     A,#((zgItemTable + 4) >> 8) & 0xff
   \   00005A   39           ADDC    A,R1
   \   00005B   F583         MOV     DPH,A
   \   00005D   12....       LCALL   ?PUSH_XSTACK8_C_TWO
   \   000060   EF           MOV     A,R7
   \   000061   F9           MOV     R1,A
   \   000062   EE           MOV     A,R6
   \   000063   FA           MOV     R2,A
   \   000064   7B00         MOV     R3,#0x0
   \   000066   EA           MOV     A,R2
   \   000067   75F006       MOV     B,#0x6
   \   00006A   A4           MUL     AB
   \   00006B   CA           XCH     A,R2
   \   00006C   A8F0         MOV     R0,B
   \   00006E   75F000       MOV     B,#0x0
   \   000071   A4           MUL     AB
   \   000072   28           ADD     A,R0
   \   000073   F8           MOV     R0,A
   \   000074   75F006       MOV     B,#0x6
   \   000077   EB           MOV     A,R3
   \   000078   A4           MUL     AB
   \   000079   28           ADD     A,R0
   \   00007A   FB           MOV     R3,A
   \   00007B   74..         MOV     A,#(zgItemTable + 2) & 0xff
   \   00007D   2A           ADD     A,R2
   \   00007E   F582         MOV     DPL,A
   \   000080   74..         MOV     A,#((zgItemTable + 2) >> 8) & 0xff
   \   000082   3B           ADDC    A,R3
   \   000083   F583         MOV     DPH,A
   \   000085   E4           CLR     A
   \   000086   93           MOVC    A,@A+DPTR
   \   000087   FC           MOV     R4,A
   \   000088   7401         MOV     A,#0x1
   \   00008A   93           MOVC    A,@A+DPTR
   \   00008B   FD           MOV     R5,A
   \   00008C   C9           XCH     A,R1
   \   00008D   FF           MOV     R7,A
   \   00008E   C9           XCH     A,R1
   \   00008F   EE           MOV     A,R6
   \   000090   F8           MOV     R0,A
   \   000091   7900         MOV     R1,#0x0
   \   000093   E8           MOV     A,R0
   \   000094   75F006       MOV     B,#0x6
   \   000097   A4           MUL     AB
   \   000098   C8           XCH     A,R0
   \   000099   AAF0         MOV     R2,B
   \   00009B   75F000       MOV     B,#0x0
   \   00009E   A4           MUL     AB
   \   00009F   2A           ADD     A,R2
   \   0000A0   FA           MOV     R2,A
   \   0000A1   75F006       MOV     B,#0x6
   \   0000A4   E9           MOV     A,R1
   \   0000A5   A4           MUL     AB
   \   0000A6   2A           ADD     A,R2
   \   0000A7   F9           MOV     R1,A
   \   0000A8   74..         MOV     A,#zgItemTable & 0xff
   \   0000AA   28           ADD     A,R0
   \   0000AB   F582         MOV     DPL,A
   \   0000AD   74..         MOV     A,#(zgItemTable >> 8) & 0xff
   \   0000AF   39           ADDC    A,R1
   \   0000B0   F583         MOV     DPH,A
   \   0000B2   E4           CLR     A
   \   0000B3   93           MOVC    A,@A+DPTR
   \   0000B4   FA           MOV     R2,A
   \   0000B5   7401         MOV     A,#0x1
   \   0000B7   93           MOVC    A,@A+DPTR
   \   0000B8   FB           MOV     R3,A
   \   0000B9   CF           XCH     A,R7
   \   0000BA   F9           MOV     R1,A
   \   0000BB   CF           XCH     A,R7
   \   0000BC   12....       LCALL   ??zgItemInit?relay   ; Banked call to: zgItemInit
   \   0000BF   7402         MOV     A,#0x2
   \   0000C1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C4   E9           MOV     A,R1
    515          
    516              // Move on to the next item
    517              i++;
   \   0000C5   0E           INC     R6
   \   0000C6   02....       LJMP    ??zgInitItems_0 & 0xFFFF
    518            }
    519          }
   \                     ??zgInitItems_1:
   \   0000C9   7F01         MOV     R7,#0x1
   \   0000CB   02....       LJMP    ?BANKED_LEAVE_XDATA
    520          
    521          /*********************************************************************
    522           * @fn          zgReadStartupOptions
    523           *
    524           * @brief       Reads the ZCD_NV_STARTUP_OPTION NV Item.
    525           *
    526           * @param       none
    527           *
    528           * @return      the ZCD_NV_STARTUP_OPTION NV item
    529           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    530          uint8 zgReadStartupOptions( void )
   \                     zgReadStartupOptions:
    531          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    532            // Default to Use Config State and Use Network State
    533            uint8 startupOption = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7400         MOV     A,#0x0
   \   000012   F0           MOVX    @DPTR,A
    534          
    535            // This should have been done in ZMain.c, but just in case.
    536            if ( osal_nv_item_init( ZCD_NV_STARTUP_OPTION,
    537                                        sizeof(startupOption),
    538                                        &startupOption ) == ZSUCCESS )
   \   000013                ; Setup parameters for call to function osal_nv_item_init
   \   000013   A8..         MOV     R0,?XSP + 0
   \   000015   A9..         MOV     R1,?XSP + 1
   \   000017   88..         MOV     ?V0,R0
   \   000019   89..         MOV     ?V1,R1
   \   00001B   78..         MOV     R0,#?V0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   7C01         MOV     R4,#0x1
   \   000022   7D00         MOV     R5,#0x0
   \   000024   7A03         MOV     R2,#0x3
   \   000026   7B00         MOV     R3,#0x0
   \   000028   12....       LCALL   ??osal_nv_item_init?relay; Banked call to: osal_nv_item_init
   \   00002B   7402         MOV     A,#0x2
   \   00002D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000030   E9           MOV     A,R1
   \   000031   7029         JNZ     ??zgReadStartupOptions_0
    539            {
    540              // Read saved startup control
    541              osal_nv_read( ZCD_NV_STARTUP_OPTION,
    542                            0,
    543                            sizeof( startupOption ),
    544                            &startupOption);
   \   000033                ; Setup parameters for call to function osal_nv_read
   \   000033   A8..         MOV     R0,?XSP + 0
   \   000035   A9..         MOV     R1,?XSP + 1
   \   000037   88..         MOV     ?V0,R0
   \   000039   89..         MOV     ?V1,R1
   \   00003B   78..         MOV     R0,#?V0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   75..01       MOV     ?V0,#0x1
   \   000043   75..00       MOV     ?V1,#0x0
   \   000046   78..         MOV     R0,#?V0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   7C00         MOV     R4,#0x0
   \   00004D   7D00         MOV     R5,#0x0
   \   00004F   7A03         MOV     R2,#0x3
   \   000051   7B00         MOV     R3,#0x0
   \   000053   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   000056   7404         MOV     A,#0x4
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005B   E9           MOV     A,R1
    545            }
    546            return ( startupOption );
   \                     ??zgReadStartupOptions_0:
   \   00005C   85..82       MOV     DPL,?XSP + 0
   \   00005F   85..83       MOV     DPH,?XSP + 1
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
   \   000064   7401         MOV     A,#0x1
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
   \   000069   7F02         MOV     R7,#0x2
   \   00006B   02....       LJMP    ?BANKED_LEAVE_XDATA
    547          }
    548          
    549          /*********************************************************************
    550           * @fn          zgWriteStartupOptions
    551           *
    552           * @brief       Writes bits into the ZCD_NV_STARTUP_OPTION NV Item.
    553           *
    554           * @param       action - ZG_STARTUP_SET set bit, ZG_STARTUP_CLEAR to
    555           *               clear bit. The set bit is an OR operation, and the
    556           *               clear bit is an AND ~(bitOptions) operation.
    557           *
    558           * @param       bitOptions - which bits to perform action on:
    559           *                      ZCD_STARTOPT_DEFAULT_CONFIG_STATE
    560           *                      ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    561           *
    562           * @return      ZSUCCESS if successful
    563           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    564          uint8 zgWriteStartupOptions( uint8 action, uint8 bitOptions )
   \                     zgWriteStartupOptions:
    565          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    566            uint8 status;
    567            uint8 startupOptions = 0;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
    568          
    569            status = osal_nv_read( ZCD_NV_STARTUP_OPTION,
    570                          0,
    571                          sizeof( startupOptions ),
    572                          &startupOptions );
   \   000017                ; Setup parameters for call to function osal_nv_read
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V2,R0
   \   00001D   89..         MOV     ?V3,R1
   \   00001F   78..         MOV     R0,#?V2
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..01       MOV     ?V2,#0x1
   \   000027   75..00       MOV     ?V3,#0x0
   \   00002A   78..         MOV     R0,#?V2
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A03         MOV     R2,#0x3
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003F   E9           MOV     A,R1
   \   000040   FE           MOV     R6,A
    573          
    574            if ( status == ZSUCCESS )
   \   000041   EE           MOV     A,R6
   \   000042   7048         JNZ     ??zgWriteStartupOptions_0
    575            {
    576              if ( action == ZG_STARTUP_SET )
   \   000044   74FF         MOV     A,#-0x1
   \   000046   65..         XRL     A,?V0
   \   000048   700B         JNZ     ??zgWriteStartupOptions_1
    577              {
    578                // Set bits
    579                startupOptions |= bitOptions;
   \   00004A   85..82       MOV     DPL,?XSP + 0
   \   00004D   85..83       MOV     DPH,?XSP + 1
   \   000050   E0           MOVX    A,@DPTR
   \   000051   4F           ORL     A,R7
   \   000052   F0           MOVX    @DPTR,A
   \   000053   800D         SJMP    ??zgWriteStartupOptions_2
    580              }
    581              else
    582              {
    583                // Clear bits
    584                startupOptions &= (bitOptions ^ 0xFF);
   \                     ??zgWriteStartupOptions_1:
   \   000055   74FF         MOV     A,#-0x1
   \   000057   6F           XRL     A,R7
   \   000058   F8           MOV     R0,A
   \   000059   85..82       MOV     DPL,?XSP + 0
   \   00005C   85..83       MOV     DPH,?XSP + 1
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   58           ANL     A,R0
   \   000061   F0           MOVX    @DPTR,A
    585              }
    586          
    587              // Changed?
    588              status = osal_nv_write( ZCD_NV_STARTUP_OPTION,
    589                           0,
    590                           sizeof( startupOptions ),
    591                           &startupOptions );
   \                     ??zgWriteStartupOptions_2:
   \   000062                ; Setup parameters for call to function osal_nv_write
   \   000062   A8..         MOV     R0,?XSP + 0
   \   000064   A9..         MOV     R1,?XSP + 1
   \   000066   88..         MOV     ?V2,R0
   \   000068   89..         MOV     ?V3,R1
   \   00006A   78..         MOV     R0,#?V2
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   75..01       MOV     ?V2,#0x1
   \   000072   75..00       MOV     ?V3,#0x0
   \   000075   78..         MOV     R0,#?V2
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   7C00         MOV     R4,#0x0
   \   00007C   7D00         MOV     R5,#0x0
   \   00007E   7A03         MOV     R2,#0x3
   \   000080   7B00         MOV     R3,#0x0
   \   000082   12....       LCALL   ??osal_nv_write?relay; Banked call to: osal_nv_write
   \   000085   7404         MOV     A,#0x4
   \   000087   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008A   E9           MOV     A,R1
   \   00008B   FE           MOV     R6,A
    592            }
    593          
    594            return ( status );
   \                     ??zgWriteStartupOptions_0:
   \   00008C   EE           MOV     A,R6
   \   00008D   F9           MOV     R1,A
   \   00008E   7401         MOV     A,#0x1
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
   \   000093   7F04         MOV     R7,#0x4
   \   000095   02....       LJMP    ?BANKED_LEAVE_XDATA
    595          }
    596          
    597          /*********************************************************************
    598           * @fn          zgSetItem
    599           *
    600           * @brief       Set RAM variables from set-NV, if it exist in the zgItemTable
    601           *
    602           * @param       id - NV ID
    603           *              len - NV item length
    604           *              buf - pointer to the input buffer
    605           *
    606           * @return      none
    607           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    608          void zgSetItem( uint16 id, uint16 len, void *buf )
   \                     zgSetItem:
    609          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V6,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V7,A
    610          
    611            uint8  i = 0;
   \   000019   75..00       MOV     ?V3,#0x0
    612          
    613            // Look up the NV item table
    614            while ( zgItemTable[i].id != 0x00 )
   \                     ??zgSetItem_0:
   \   00001C   A8..         MOV     R0,?V3
   \   00001E   7900         MOV     R1,#0x0
   \   000020   E8           MOV     A,R0
   \   000021   75F006       MOV     B,#0x6
   \   000024   A4           MUL     AB
   \   000025   C8           XCH     A,R0
   \   000026   AAF0         MOV     R2,B
   \   000028   75F000       MOV     B,#0x0
   \   00002B   A4           MUL     AB
   \   00002C   2A           ADD     A,R2
   \   00002D   FA           MOV     R2,A
   \   00002E   75F006       MOV     B,#0x6
   \   000031   E9           MOV     A,R1
   \   000032   A4           MUL     AB
   \   000033   2A           ADD     A,R2
   \   000034   F9           MOV     R1,A
   \   000035   74..         MOV     A,#zgItemTable & 0xff
   \   000037   28           ADD     A,R0
   \   000038   F582         MOV     DPL,A
   \   00003A   74..         MOV     A,#(zgItemTable >> 8) & 0xff
   \   00003C   39           ADDC    A,R1
   \   00003D   F583         MOV     DPH,A
   \   00003F   E4           CLR     A
   \   000040   93           MOVC    A,@A+DPTR
   \   000041   F8           MOV     R0,A
   \   000042   7401         MOV     A,#0x1
   \   000044   93           MOVC    A,@A+DPTR
   \   000045   F9           MOV     R1,A
   \   000046   E8           MOV     A,R0
   \   000047   49           ORL     A,R1
   \   000048   7003         JNZ     $+5
   \   00004A   02....       LJMP    ??zgSetItem_1 & 0xFFFF
    615            {
    616              if( zgItemTable[i].id == id )
   \   00004D   A8..         MOV     R0,?V3
   \   00004F   7900         MOV     R1,#0x0
   \   000051   E8           MOV     A,R0
   \   000052   75F006       MOV     B,#0x6
   \   000055   A4           MUL     AB
   \   000056   C8           XCH     A,R0
   \   000057   AAF0         MOV     R2,B
   \   000059   75F000       MOV     B,#0x0
   \   00005C   A4           MUL     AB
   \   00005D   2A           ADD     A,R2
   \   00005E   FA           MOV     R2,A
   \   00005F   75F006       MOV     B,#0x6
   \   000062   E9           MOV     A,R1
   \   000063   A4           MUL     AB
   \   000064   2A           ADD     A,R2
   \   000065   F9           MOV     R1,A
   \   000066   74..         MOV     A,#zgItemTable & 0xff
   \   000068   28           ADD     A,R0
   \   000069   F582         MOV     DPL,A
   \   00006B   74..         MOV     A,#(zgItemTable >> 8) & 0xff
   \   00006D   39           ADDC    A,R1
   \   00006E   F583         MOV     DPH,A
   \   000070   E4           CLR     A
   \   000071   93           MOVC    A,@A+DPTR
   \   000072   F8           MOV     R0,A
   \   000073   7401         MOV     A,#0x1
   \   000075   93           MOVC    A,@A+DPTR
   \   000076   F9           MOV     R1,A
   \   000077   E5..         MOV     A,?V4
   \   000079   68           XRL     A,R0
   \   00007A   7003         JNZ     ??zgSetItem_2
   \   00007C   E5..         MOV     A,?V5
   \   00007E   69           XRL     A,R1
   \                     ??zgSetItem_2:
   \   00007F   7078         JNZ     ??zgSetItem_3
    617              {
    618                if ( zgItemTable[i].len == len )
   \   000081   A8..         MOV     R0,?V3
   \   000083   7900         MOV     R1,#0x0
   \   000085   E8           MOV     A,R0
   \   000086   75F006       MOV     B,#0x6
   \   000089   A4           MUL     AB
   \   00008A   C8           XCH     A,R0
   \   00008B   AAF0         MOV     R2,B
   \   00008D   75F000       MOV     B,#0x0
   \   000090   A4           MUL     AB
   \   000091   2A           ADD     A,R2
   \   000092   FA           MOV     R2,A
   \   000093   75F006       MOV     B,#0x6
   \   000096   E9           MOV     A,R1
   \   000097   A4           MUL     AB
   \   000098   2A           ADD     A,R2
   \   000099   F9           MOV     R1,A
   \   00009A   74..         MOV     A,#(zgItemTable + 2) & 0xff
   \   00009C   28           ADD     A,R0
   \   00009D   F582         MOV     DPL,A
   \   00009F   74..         MOV     A,#((zgItemTable + 2) >> 8) & 0xff
   \   0000A1   39           ADDC    A,R1
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   E4           CLR     A
   \   0000A5   93           MOVC    A,@A+DPTR
   \   0000A6   F8           MOV     R0,A
   \   0000A7   7401         MOV     A,#0x1
   \   0000A9   93           MOVC    A,@A+DPTR
   \   0000AA   F9           MOV     R1,A
   \   0000AB   EE           MOV     A,R6
   \   0000AC   68           XRL     A,R0
   \   0000AD   7002         JNZ     ??zgSetItem_4
   \   0000AF   EF           MOV     A,R7
   \   0000B0   69           XRL     A,R1
   \                     ??zgSetItem_4:
   \   0000B1   704B         JNZ     ??zgSetItem_1
    619                {
    620                  osal_memcpy( zgItemTable[i].buf, buf, len );
   \   0000B3                ; Setup parameters for call to function osal_memcpy
   \   0000B3   85....       MOV     ?V0,?V6
   \   0000B6   85....       MOV     ?V1,?V7
   \   0000B9   75..00       MOV     ?V2,#0x0
   \   0000BC   78..         MOV     R0,#?V0
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C1   EE           MOV     A,R6
   \   0000C2   FC           MOV     R4,A
   \   0000C3   EF           MOV     A,R7
   \   0000C4   FD           MOV     R5,A
   \   0000C5   A8..         MOV     R0,?V3
   \   0000C7   7900         MOV     R1,#0x0
   \   0000C9   E8           MOV     A,R0
   \   0000CA   75F006       MOV     B,#0x6
   \   0000CD   A4           MUL     AB
   \   0000CE   C8           XCH     A,R0
   \   0000CF   AAF0         MOV     R2,B
   \   0000D1   75F000       MOV     B,#0x0
   \   0000D4   A4           MUL     AB
   \   0000D5   2A           ADD     A,R2
   \   0000D6   FA           MOV     R2,A
   \   0000D7   75F006       MOV     B,#0x6
   \   0000DA   E9           MOV     A,R1
   \   0000DB   A4           MUL     AB
   \   0000DC   2A           ADD     A,R2
   \   0000DD   F9           MOV     R1,A
   \   0000DE   74..         MOV     A,#(zgItemTable + 4) & 0xff
   \   0000E0   28           ADD     A,R0
   \   0000E1   F582         MOV     DPL,A
   \   0000E3   74..         MOV     A,#((zgItemTable + 4) >> 8) & 0xff
   \   0000E5   39           ADDC    A,R1
   \   0000E6   F583         MOV     DPH,A
   \   0000E8   E4           CLR     A
   \   0000E9   93           MOVC    A,@A+DPTR
   \   0000EA   FA           MOV     R2,A
   \   0000EB   7401         MOV     A,#0x1
   \   0000ED   93           MOVC    A,@A+DPTR
   \   0000EE   FB           MOV     R3,A
   \   0000EF   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000F2   7403         MOV     A,#0x3
   \   0000F4   12....       LCALL   ?DEALLOC_XSTACK8
    621                }
    622                break;
   \   0000F7   8005         SJMP    ??zgSetItem_1
    623              }
    624              // Move on to the next item
    625              i++;
   \                     ??zgSetItem_3:
   \   0000F9   05..         INC     ?V3
   \   0000FB   02....       LJMP    ??zgSetItem_0 & 0xFFFF
    626            }
    627          }
   \                     ??zgSetItem_1:
   \   0000FE   7F08         MOV     R7,#0x8
   \   000100   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgQueuedPollRate>`:
   \   000000   6400         DW 100

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgResponsePollRate>`:
   \   000000   6400         DW 100

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRejoinPollRate>`:
   \   000000   B801         DW 440

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxDataRetries>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxPollFailureRetries>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultChannelList>`:
   \   000000   00080000     DD 2048

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultStartingScanDuratio`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStackProfile>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgIndirectMsgTimeout>`:
   \   000000   07           DB 7

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSecurePermitJoin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRouteDiscoveryTime>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRouteExpiryTime>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxBcastRetires>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPassiveAckTimeout>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgBcastDeliveryTime>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMode>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConcentratorRadius>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkSrcRtgExpiryTime>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscMaxFrameRetries>`:
   \   000000   03           DB 3

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscAckWaitDurationPolled>`:
   \   000000   B80B         DW 3000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsAckWaitMultiplier>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsDefaultMaxBindingTime>`:
   \   000000   803E         DW 16000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsUseInsecureJoin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsNonMemberRadius>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsfMaxWindowSize>`:
   \   000000   03           DB 3

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsfInterframeDelay>`:
   \   000000   3200         DW 50

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgUseDefaultTCLK>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConfigPANID>`:
   \   000000   0021         DW 8448

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStartDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMgrMinTransmissions>`:
   \   000000   14           DB 20

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMgrMode>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSapiEndpoint>`:
   \   000000   E0           DB 224

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zgItemInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgItemInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zgInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zgInitItems?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgInitItems

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zgReadStartupOptions?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgReadStartupOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zgWriteStartupOptions?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgWriteStartupOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zgSetItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgSetItem
    628          
    629          /*********************************************************************
    630           * @fn       zgPreconfigKeyInit()
    631           *
    632           * @brief
    633           *
    634           *   Initialize ZCD_NV_PRECFGKEY NV item. If the item doesn't exist in NV memory,
    635           *   write the system default (value passed in) into NV memory. But if
    636           *   it exists do not overwrite it.
    637           *
    638           *   Also, if setDefault is TRUE and the item exists, we will write
    639           *   the default value to NV space.
    640           *
    641           * @param   setDefault - TRUE to set default
    642           *
    643           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    644           *          exist in NV, NV_OPER_FAILED if failure.
    645           */
    646          static uint8 zgPreconfigKeyInit( uint8 setDefault )
    647          {
    648            uint8 zgPreConfigKey[SEC_KEY_LEN];
    649            uint8 status;
    650          
    651            // Initialize the Pre-Configured Key to the default key
    652            osal_memcpy( zgPreConfigKey, defaultKey, SEC_KEY_LEN );
    653          
    654            // If the item doesn't exist in NV memory, create and initialize it
    655            status = osal_nv_item_init( ZCD_NV_PRECFGKEY, SEC_KEY_LEN, zgPreConfigKey );
    656            if ( status == ZSUCCESS )
    657            {
    658              if ( setDefault )
    659              {
    660                // Write the default value back to NV
    661                status =  osal_nv_write( ZCD_NV_PRECFGKEY, 0, SEC_KEY_LEN, zgPreConfigKey );
    662              }
    663            }
    664          
    665            // clear local copy of default key
    666            osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
    667          
    668            return (status);
    669          }
    670          
    671          /*********************************************************************
    672          *********************************************************************/

   Maximum stack usage in bytes:

   XSTACK Function
   ------ --------
      9   zgInit
        9   -> ZMacGetReq
        9   -> zgInitItems
        9   -> zgReadStartupOptions
        9   -> zgWriteStartupOptions
     20   zgInitItems
       11   -> zgItemInit
     31   zgItemInit
       18   -> osal_nv_item_init
       20   -> osal_nv_read
       20   -> osal_nv_write
     24   zgReadStartupOptions
       13   -> osal_nv_item_init
       15   -> osal_nv_read
     21   zgSetItem
       19   -> osal_memcpy
     26   zgWriteStartupOptions
       17   -> osal_nv_read
       17   -> osal_nv_write


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for zgApsAckWaitMultiplier>
       2  ?<Initializer for zgApsDefaultMaxBindingTime>
       1  ?<Initializer for zgApsNonMemberRadius>
       1  ?<Initializer for zgApsUseInsecureJoin>
       2  ?<Initializer for zgApscAckWaitDurationPolled>
       1  ?<Initializer for zgApscMaxFrameRetries>
       2  ?<Initializer for zgApsfInterframeDelay>
       1  ?<Initializer for zgApsfMaxWindowSize>
       1  ?<Initializer for zgBcastDeliveryTime>
       1  ?<Initializer for zgConcentratorRadius>
       2  ?<Initializer for zgConfigPANID>
       4  ?<Initializer for zgDefaultChannelList>
       1  ?<Initializer for zgDefaultStartingScanDuratio
       1  ?<Initializer for zgIndirectMsgTimeout>
       1  ?<Initializer for zgMaxBcastRetires>
       1  ?<Initializer for zgMaxDataRetries>
       1  ?<Initializer for zgMaxPollFailureRetries>
       1  ?<Initializer for zgNwkMgrMinTransmissions>
       1  ?<Initializer for zgNwkMgrMode>
       1  ?<Initializer for zgNwkMode>
       1  ?<Initializer for zgNwkSrcRtgExpiryTime>
       1  ?<Initializer for zgPassiveAckTimeout>
       2  ?<Initializer for zgPollRate>
       2  ?<Initializer for zgQueuedPollRate>
       2  ?<Initializer for zgRejoinPollRate>
       2  ?<Initializer for zgResponsePollRate>
       1  ?<Initializer for zgRouteDiscoveryTime>
       1  ?<Initializer for zgRouteExpiryTime>
       1  ?<Initializer for zgSapiEndpoint>
       1  ?<Initializer for zgSecurePermitJoin>
       1  ?<Initializer for zgStackProfile>
       1  ?<Initializer for zgStartDelay>
       1  ?<Initializer for zgUseDefaultTCLK>
       6  ??zgInit?relay
       6  ??zgInitItems?relay
       6  ??zgItemInit?relay
       6  ??zgReadStartupOptions?relay
       6  ??zgSetItem?relay
       6  ??zgWriteStartupOptions?relay
       1  zgApsAckWaitMultiplier
       2  zgApsDefaultMaxBindingTime
       1  zgApsNonMemberRadius
       8  zgApsUseExtendedPANID
       1  zgApsUseInsecureJoin
       2  zgApscAckWaitDurationPolled
       1  zgApscMaxFrameRetries
       2  zgApsfInterframeDelay
       1  zgApsfMaxWindowSize
       1  zgBcastDeliveryTime
       1  zgConcentratorDiscoveryTime
       1  zgConcentratorEnable
       1  zgConcentratorRC
       1  zgConcentratorRadius
       2  zgConfigPANID
       4  zgDefaultChannelList
       1  zgDefaultStartingScanDuration
       1  zgDeviceLogicalType
       8  zgExtendedPANID
       1  zgIndirectMsgTimeout
      52  zgInit
     206  zgInitItems
     134  zgItemInit
     264  zgItemTable
       1  zgMaxBcastRetires
       1  zgMaxDataRetries
       1  zgMaxPollFailureRetries
       1  zgNwkMgrMinTransmissions
       1  zgNwkMgrMode
       1  zgNwkMode
       1  zgNwkSrcRtgExpiryTime
       1  zgPassiveAckTimeout
       2  zgPollRate
       1  zgPreConfigKeys
       2  zgQueuedPollRate
     110  zgReadStartupOptions
       2  zgRejoinPollRate
       2  zgResponsePollRate
       1  zgRouteDiscoveryTime
       1  zgRouteExpiryTime
       1  zgSapiEndpoint
       1  zgSecurePermitJoin
       1  zgSecurityMode
     259  zgSetItem
       1  zgStackProfile
       1  zgStartDelay
       2  zgTrustCenterAddr
       1  zgUseDefaultTCLK
     152  zgWriteStartupOptions
       1  zgZdoDirectCB

 
 913 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
 264 bytes in segment CODE_C
  44 bytes in segment XDATA_I
  44 bytes in segment XDATA_ID
  25 bytes in segment XDATA_Z
 
 1 257 bytes of CODE  memory
    69 bytes of XDATA memory

Errors: none
Warnings: none
