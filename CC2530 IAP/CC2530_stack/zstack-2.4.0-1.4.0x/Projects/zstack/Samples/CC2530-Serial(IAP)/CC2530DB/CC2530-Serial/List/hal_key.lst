###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:37
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\hal\target\CC2530EB\hal_key.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\hal\target\CC2530EB\hal_key.c"
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        XLAB -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\hal_key.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\hal_key.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\hal\target\CC2530EB\hal_key.c
      1          /**************************************************************************************************
      2            Filename:       hal_key.c
      3            Revised:        $Date: 2010-09-15 19:02:45 -0700 (Wed, 15 Sep 2010) $
      4            Revision:       $Revision: 23815 $
      5          
      6            Description:    This file contains the interface to the HAL KEY Service.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          /*********************************************************************
     40           NOTE: If polling is used, the hal_driver task schedules the KeyRead()
     41                 to occur every 100ms.  This should be long enough to naturally
     42                 debounce the keys.  The KeyRead() function remembers the key
     43                 state of the previous poll and will only return a non-zero
     44                 value if the key state changes.
     45          
     46           NOTE: If interrupts are used, the KeyRead() function is scheduled
     47                 25ms after the interrupt occurs by the ISR.  This delay is used
     48                 for key debouncing.  The ISR disables any further Key interrupt
     49                 until KeyRead() is executed.  KeyRead() will re-enable Key
     50                 interrupts after executing.  Unlike polling, when interrupts
     51                 are enabled, the previous key state is not remembered.  This
     52                 means that KeyRead() will return the current state of the keys
     53                 (not a change in state of the keys).
     54          
     55           NOTE: If interrupts are used, the KeyRead() fucntion is scheduled by
     56                 the ISR.  Therefore, the joystick movements will only be detected
     57                 during a pushbutton interrupt caused by S1 or the center joystick
     58                 pushbutton.
     59          
     60           NOTE: When a switch like S1 is pushed, the S1 signal goes from a normally
     61                 high state to a low state.  This transition is typically clean.  The
     62                 duration of the low state is around 200ms.  When the signal returns
     63                 to the high state, there is a high likelihood of signal bounce, which
     64                 causes a unwanted interrupts.  Normally, we would set the interrupt
     65                 edge to falling edge to generate an interrupt when S1 is pushed, but
     66                 because of the signal bounce, it is better to set the edge to rising
     67                 edge to generate an interrupt when S1 is released.  The debounce logic
     68                 can then filter out the signal bounce.  The result is that we typically
     69                 get only 1 interrupt per button push.  This mechanism is not totally
     70                 foolproof because occasionally, signal bound occurs during the falling
     71                 edge as well.  A similar mechanism is used to handle the joystick
     72                 pushbutton on the DB.  For the EB, we do not have independent control
     73                 of the interrupt edge for the S1 and center joystick pushbutton.  As
     74                 a result, only one or the other pushbuttons work reasonably well with
     75                 interrupts.  The default is the make the S1 switch on the EB work more
     76                 reliably.
     77          
     78          *********************************************************************/
     79          
     80          /**************************************************************************************************
     81           *                                            INCLUDES
     82           **************************************************************************************************/
     83          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x89
   \   unsigned char volatile __sfr P0IFG
   \                     P0IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8b
   \   unsigned char volatile __sfr P2IFG
   \                     P2IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8c
   \   unsigned char volatile __sfr PICTL
   \                     PICTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xac
   \   unsigned char volatile __sfr P2IEN
   \                     P2IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     84          #include "hal_defs.h"
     85          #include "hal_types.h"
     86          #include "hal_board.h"
     87          #include "hal_drivers.h"
     88          #include "hal_adc.h"
     89          #include "hal_key.h"
     90          #include "osal.h"
     91          
     92          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
     93          
     94          /**************************************************************************************************
     95           *                                              MACROS
     96           **************************************************************************************************/
     97          
     98          /**************************************************************************************************
     99           *                                            CONSTANTS
    100           **************************************************************************************************/
    101          #define HAL_KEY_RISING_EDGE   0
    102          #define HAL_KEY_FALLING_EDGE  1
    103          
    104          #define HAL_KEY_DEBOUNCE_VALUE  25
    105          
    106          /* CPU port interrupt */
    107          #define HAL_KEY_CPU_PORT_0_IF P0IF
    108          #define HAL_KEY_CPU_PORT_2_IF P2IF
    109          
    110          /* SW_6 is at P0.1 */
    111          #define HAL_KEY_SW_6_PORT   P0
    112          #define HAL_KEY_SW_6_BIT    BV(1)
    113          #define HAL_KEY_SW_6_SEL    P0SEL
    114          #define HAL_KEY_SW_6_DIR    P0DIR
    115          
    116          /* edge interrupt */
    117          #define HAL_KEY_SW_6_EDGEBIT  BV(0)
    118          #define HAL_KEY_SW_6_EDGE     HAL_KEY_FALLING_EDGE
    119          
    120          
    121          /* SW_6 interrupts */
    122          #define HAL_KEY_SW_6_IEN      IEN1  /* CPU interrupt mask register */
    123          #define HAL_KEY_SW_6_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    124          #define HAL_KEY_SW_6_ICTL     P0IEN /* Port Interrupt Control register */
    125          #define HAL_KEY_SW_6_ICTLBIT  BV(1) /* P0IEN - P0.1 enable/disable bit */
    126          #define HAL_KEY_SW_6_PXIFG    P0IFG /* Interrupt flag at source */
    127          
    128          
    129          
    130          /* Joy stick move at P2.0 */
    131          #define HAL_KEY_JOY_MOVE_PORT   P2
    132          #define HAL_KEY_JOY_MOVE_BIT    BV(0)
    133          #define HAL_KEY_JOY_MOVE_SEL    P2SEL
    134          #define HAL_KEY_JOY_MOVE_DIR    P2DIR
    135          
    136          /* edge interrupt */
    137          #define HAL_KEY_JOY_MOVE_EDGEBIT  BV(3)
    138          #define HAL_KEY_JOY_MOVE_EDGE     HAL_KEY_FALLING_EDGE
    139          
    140          /* Joy move interrupts */
    141          #define HAL_KEY_JOY_MOVE_IEN      IEN2  /* CPU interrupt mask register */
    142          #define HAL_KEY_JOY_MOVE_IENBIT   BV(1) /* Mask bit for all of Port_2 */
    143          #define HAL_KEY_JOY_MOVE_ICTL     P2IEN /* Port Interrupt Control register */
    144          #define HAL_KEY_JOY_MOVE_ICTLBIT  BV(0) /* P2IENL - P2.0<->P2.3 enable/disable bit */
    145          #define HAL_KEY_JOY_MOVE_PXIFG    P2IFG /* Interrupt flag at source */
    146          
    147          #define HAL_KEY_JOY_CHN   HAL_ADC_CHANNEL_6
    148          
    149          
    150          /**************************************************************************************************
    151           *                                            TYPEDEFS
    152           **************************************************************************************************/
    153          
    154          
    155          /**************************************************************************************************
    156           *                                        GLOBAL VARIABLES
    157           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          static uint8 halKeySavedKeys;     /* used to store previous key state in polling mode */
   \                     halKeySavedKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          static halKeyCBack_t pHalKeyProcessFunction;
   \                     pHalKeyProcessFunction:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          static uint8 HalKeyConfigured;
   \                     HalKeyConfigured:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          bool Hal_KeyIntEnable;            /* interrupt enable/disable flag */
   \                     Hal_KeyIntEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    162          
    163          /**************************************************************************************************
    164           *                                        FUNCTIONS - Local
    165           **************************************************************************************************/
    166          void halProcessKeyInterrupt(void);
    167          uint8 halGetJoyKeyInput(void);
    168          
    169          
    170          
    171          /**************************************************************************************************
    172           *                                        FUNCTIONS - API
    173           **************************************************************************************************/
    174          
    175          
    176          /**************************************************************************************************
    177           * @fn      HalKeyInit
    178           *
    179           * @brief   Initilize Key Service
    180           *
    181           * @param   none
    182           *
    183           * @return  None
    184           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    185          void HalKeyInit( void )
   \                     HalKeyInit:
    186          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    187            /* Initialize previous key to 0 */
    188            halKeySavedKeys = 0;
   \   000004   90....       MOV     DPTR,#halKeySavedKeys
   \   000007   7400         MOV     A,#0x0
   \   000009   F0           MOVX    @DPTR,A
    189          
    190          #if 0
    191            HAL_KEY_SW_6_SEL &= ~(HAL_KEY_SW_6_BIT);    /* Set pin function to GPIO */
    192            HAL_KEY_SW_6_DIR &= ~(HAL_KEY_SW_6_BIT);    /* Set pin direction to Input */
    193          
    194            HAL_KEY_JOY_MOVE_SEL &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin function to GPIO */
    195            HAL_KEY_JOY_MOVE_DIR &=~ (HAL_KEY_JOY_MOVE_BIT); /* Set pin direction to Input */
    196          #else
    197            HAL_PUSH1_SEL &= ~(PUSH1_BV);
   \   00000A   53F4FB       ANL     0xf4,#0xfb
    198            HAL_PUSH1_DIR &= ~(PUSH1_BV);
   \   00000D   53FEFB       ANL     0xfe,#0xfb
    199            
    200            HAL_PUSH2_SEL &= ~(PUSH2_BV);
   \   000010   53F4F7       ANL     0xf4,#0xf7
    201            HAL_PUSH2_DIR &= ~(PUSH2_BV);
   \   000013   53FEF7       ANL     0xfe,#0xf7
    202          #endif
    203          
    204            /* Initialize callback function */
    205            pHalKeyProcessFunction  = NULL;
   \   000016   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   000019   7400         MOV     A,#0x0
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   7400         MOV     A,#0x0
   \   00001F   F0           MOVX    @DPTR,A
    206          
    207            /* Start with key is not configured */
    208            HalKeyConfigured = FALSE;
   \   000020   90....       MOV     DPTR,#HalKeyConfigured
   \   000023   7400         MOV     A,#0x0
   \   000025   F0           MOVX    @DPTR,A
    209          }
   \   000026   D083         POP     DPH
   \   000028   D082         POP     DPL
   \   00002A   02....       LJMP    ?BRET
   \   00002D                REQUIRE P1SEL
   \   00002D                REQUIRE P1DIR
    210          
    211          
    212          /**************************************************************************************************
    213           * @fn      HalKeyConfig
    214           *
    215           * @brief   Configure the Key serivce
    216           *
    217           * @param   interruptEnable - TRUE/FALSE, enable/disable interrupt
    218           *          cback - pointer to the CallBack function
    219           *
    220           * @return  None
    221           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    222          void HalKeyConfig (bool interruptEnable, halKeyCBack_t cback)
   \                     HalKeyConfig:
    223          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    224            /* Enable/Disable Interrupt or */
    225            Hal_KeyIntEnable = interruptEnable;
   \   00000B   E5..         MOV     A,?V0
   \   00000D   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000010   F0           MOVX    @DPTR,A
    226          
    227            /* Register the callback fucntion */
    228            pHalKeyProcessFunction = cback;
   \   000011   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   000014   EE           MOV     A,R6
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   EF           MOV     A,R7
   \   000018   F0           MOVX    @DPTR,A
    229          
    230            /* Determine if interrupt is enable or not */
    231            if (Hal_KeyIntEnable)
   \   000019   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6034         JZ      ??HalKeyConfig_0
    232            {
    233              /* Rising/Falling edge configuratinn */
    234          
    235              PICTL &= ~(HAL_KEY_SW_6_EDGEBIT);    /* Clear the edge bit */
   \   00001F   538CFE       ANL     0x8c,#0xfe
    236              /* For falling edge, the bit must be set. */
    237            #if (HAL_KEY_SW_6_EDGE == HAL_KEY_FALLING_EDGE)
    238              PICTL |= HAL_KEY_SW_6_EDGEBIT;
   \   000022   438C01       ORL     0x8c,#0x1
    239            #endif
    240          
    241          
    242              /* Interrupt configuration:
    243               * - Enable interrupt generation at the port
    244               * - Enable CPU interrupt
    245               * - Clear any pending interrupt
    246               */
    247              HAL_KEY_SW_6_ICTL |= HAL_KEY_SW_6_ICTLBIT;
   \   000025   43AB02       ORL     0xab,#0x2
    248              HAL_KEY_SW_6_IEN |= HAL_KEY_SW_6_IENBIT;
   \   000028   D2BD         SETB    0xb8.5
    249              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT);
   \   00002A   7589FD       MOV     0x89,#-0x3
    250          
    251          
    252          
    253              /* Rising/Falling edge configuratinn */
    254          
    255              HAL_KEY_JOY_MOVE_ICTL &= ~(HAL_KEY_JOY_MOVE_EDGEBIT);    /* Clear the edge bit */
   \   00002D   53ACF7       ANL     0xac,#0xf7
    256              /* For falling edge, the bit must be set. */
    257            #if (HAL_KEY_JOY_MOVE_EDGE == HAL_KEY_FALLING_EDGE)
    258              HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_EDGEBIT;
   \   000030   43AC08       ORL     0xac,#0x8
    259            #endif
    260          
    261          
    262              /* Interrupt configuration:
    263               * - Enable interrupt generation at the port
    264               * - Enable CPU interrupt
    265               * - Clear any pending interrupt
    266               */
    267              HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_ICTLBIT;
   \   000033   43AC01       ORL     0xac,#0x1
    268              HAL_KEY_JOY_MOVE_IEN |= HAL_KEY_JOY_MOVE_IENBIT;
   \   000036   439A02       ORL     0x9a,#0x2
    269              HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT);
   \   000039   758BFE       MOV     0x8b,#-0x2
    270          
    271          
    272              /* Do this only after the hal_key is configured - to work with sleep stuff */
    273              if (HalKeyConfigured == TRUE)
   \   00003C   90....       MOV     DPTR,#HalKeyConfigured
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   6401         XRL     A,#0x1
   \   000042   7021         JNZ     ??HalKeyConfig_1
    274              {
    275                osal_stop_timerEx(Hal_TaskID, HAL_KEY_EVENT);  /* Cancel polling if active */
   \   000044                ; Setup parameters for call to function osal_stop_timerEx
   \   000044   7A01         MOV     R2,#0x1
   \   000046   7B00         MOV     R3,#0x0
   \   000048   90....       MOV     DPTR,#Hal_TaskID
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   12....       LCALL   ??osal_stop_timerEx?relay; Banked call to: osal_stop_timerEx
   \   000050   E9           MOV     A,R1
   \   000051   8012         SJMP    ??HalKeyConfig_1
    276              }
    277            }
    278            else    /* Interrupts NOT enabled */
    279            {
    280              HAL_KEY_SW_6_ICTL &= ~(HAL_KEY_SW_6_ICTLBIT); /* don't generate interrupt */
   \                     ??HalKeyConfig_0:
   \   000053   53ABFD       ANL     0xab,#0xfd
    281              HAL_KEY_SW_6_IEN &= ~(HAL_KEY_SW_6_IENBIT);   /* Clear interrupt enable bit */
   \   000056   C2BD         CLR     0xb8.5
    282          
    283              osal_set_event(Hal_TaskID, HAL_KEY_EVENT);
   \   000058                ; Setup parameters for call to function osal_set_event
   \   000058   7A01         MOV     R2,#0x1
   \   00005A   7B00         MOV     R3,#0x0
   \   00005C   90....       MOV     DPTR,#Hal_TaskID
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F9           MOV     R1,A
   \   000061   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   000064   E9           MOV     A,R1
    284            }
    285          
    286            /* Key now is configured */
    287            HalKeyConfigured = TRUE;
   \                     ??HalKeyConfig_1:
   \   000065   90....       MOV     DPTR,#HalKeyConfigured
   \   000068   7401         MOV     A,#0x1
   \   00006A   F0           MOVX    @DPTR,A
    288          }
   \   00006B   7F01         MOV     R7,#0x1
   \   00006D   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000070                REQUIRE PICTL
   \   000070                REQUIRE P0IEN
   \   000070                REQUIRE _A_IEN1
   \   000070                REQUIRE P0IFG
   \   000070                REQUIRE P2IEN
   \   000070                REQUIRE IEN2
   \   000070                REQUIRE P2IFG
    289          
    290          
    291          /**************************************************************************************************
    292           * @fn      HalKeyRead
    293           *
    294           * @brief   Read the current value of a key
    295           *
    296           * @param   None
    297           *
    298           * @return  keys - current keys status
    299           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    300          uint8 HalKeyRead ( void )
   \                     HalKeyRead:
    301          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    302            uint8 keys = 0;
   \   000000   7900         MOV     R1,#0x0
    303          
    304          #if 0
    305            if (HAL_PUSH_BUTTON1())
    306            {
    307              keys |= HAL_KEY_SW_6;
    308            }
    309          
    310            if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active low */
    311            {
    312              keys |= halGetJoyKeyInput();
    313            }
    314          #else
    315            if (HAL_PUSH_BUTTON1()) {
   \   000002   A292         MOV     C,0x90.2
   \   000004   4005         JC      ??HalKeyRead_0
    316               keys |= HAL_KEY_SW_1;
   \   000006   D3           SETB    C
   \   000007   E9           MOV     A,R1
   \   000008   92E0         MOV     0xE0 /* A   */.0,C
   \   00000A   F9           MOV     R1,A
    317            }
    318            if (HAL_PUSH_BUTTON2()) {
   \                     ??HalKeyRead_0:
   \   00000B   A293         MOV     C,0x90.3
   \   00000D   4005         JC      ??HalKeyRead_1
    319              keys |= HAL_KEY_SW_2;
   \   00000F   D3           SETB    C
   \   000010   E9           MOV     A,R1
   \   000011   92E1         MOV     0xE0 /* A   */.1,C
   \   000013   F9           MOV     R1,A
    320            }
    321          #endif
    322          
    323            return keys;
   \                     ??HalKeyRead_1:
   \   000014   02....       LJMP    ?BRET
   \   000017                REQUIRE _A_P1
    324          }
    325          
    326          
    327          /**************************************************************************************************
    328           * @fn      HalKeyPoll
    329           *
    330           * @brief   Called by hal_driver to poll the keys
    331           *
    332           * @param   None
    333           *
    334           * @return  None
    335           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    336          void HalKeyPoll (void)
   \                     HalKeyPoll:
    337          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    338            uint8 keys = 0;
   \   000005   7E00         MOV     R6,#0x0
    339          
    340          #if 0
    341            if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active HIGH */
    342            {
    343              keys = halGetJoyKeyInput();
    344            }
    345          
    346            /* If interrupts are not enabled, previous key status and current key status
    347             * are compared to find out if a key has changed status.
    348             */
    349            if (!Hal_KeyIntEnable)
    350            {
    351              if (keys == halKeySavedKeys)
    352              {
    353                /* Exit - since no keys have changed */
    354                return;
    355              }
    356              /* Store the current keys for comparation next time */
    357              halKeySavedKeys = keys;
    358            }
    359            else
    360            {
    361              /* Key interrupt handled here */
    362            }
    363          
    364            if (HAL_PUSH_BUTTON1())
    365            {
    366              keys |= HAL_KEY_SW_6;
    367            }
    368          #else
    369            if (HAL_PUSH_BUTTON1()) {
   \   000007   A292         MOV     C,0x90.2
   \   000009   4005         JC      ??HalKeyPoll_0
    370               keys |= HAL_KEY_SW_1;
   \   00000B   D3           SETB    C
   \   00000C   EE           MOV     A,R6
   \   00000D   92E0         MOV     0xE0 /* A   */.0,C
   \   00000F   FE           MOV     R6,A
    371            }
    372            if (HAL_PUSH_BUTTON2()) {
   \                     ??HalKeyPoll_0:
   \   000010   A293         MOV     C,0x90.3
   \   000012   4005         JC      ??HalKeyPoll_1
    373              keys |= HAL_KEY_SW_2;
   \   000014   D3           SETB    C
   \   000015   EE           MOV     A,R6
   \   000016   92E1         MOV     0xE0 /* A   */.1,C
   \   000018   FE           MOV     R6,A
    374            }  
    375            if (halKeySavedKeys == keys) return;
   \                     ??HalKeyPoll_1:
   \   000019   90....       MOV     DPTR,#halKeySavedKeys
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6E           XRL     A,R6
   \   00001E   6026         JZ      ??HalKeyPoll_2
    376            halKeySavedKeys = keys;
   \   000020   EE           MOV     A,R6
   \   000021   90....       MOV     DPTR,#halKeySavedKeys
   \   000024   F0           MOVX    @DPTR,A
    377          #endif
    378            /* Invoke Callback if new keys were depressed */
    379            if (keys && (pHalKeyProcessFunction))
   \   000025   EE           MOV     A,R6
   \   000026   601E         JZ      ??HalKeyPoll_2
   \   000028   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   E8           MOV     A,R0
   \   000031   49           ORL     A,R1
   \   000032   6012         JZ      ??HalKeyPoll_2
    380            {
    381              (pHalKeyProcessFunction) (keys, HAL_KEY_STATE_NORMAL);
   \   000034                ; Setup parameters for indirect call
   \   000034   7A00         MOV     R2,#0x0
   \   000036   EE           MOV     A,R6
   \   000037   F9           MOV     R1,A
   \   000038   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F8           MOV     R0,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F583         MOV     DPH,A
   \   000041   8882         MOV     DPL,R0
   \   000043   12....       LCALL   ?CALL_IND
    382            }
    383          }
   \                     ??HalKeyPoll_2:
   \   000046   7F01         MOV     R7,#0x1
   \   000048   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00004B                REQUIRE _A_P1
    384          
    385          /**************************************************************************************************
    386           * @fn      halGetJoyKeyInput
    387           *
    388           * @brief   Map the ADC value to its corresponding key.
    389           *
    390           * @param   None
    391           *
    392           * @return  keys - current joy key status
    393           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    394          uint8 halGetJoyKeyInput(void)
   \                     halGetJoyKeyInput:
    395          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    396            
    397            /* The joystick control is encoded as an analog voltage.
    398             * Read the JOY_LEVEL analog value and map it to joy movement.
    399             */
    400            //uint8 adc;
    401            uint8 ksave0 = 0;
   \   000000   7900         MOV     R1,#0x0
    402            //uint8 ksave1;
    403          #if 0
    404            /* Keep on reading the ADC until two consecutive key decisions are the same. */
    405            do
    406            {
    407              ksave1 = ksave0;    /* save previouse key reading */
    408          
    409              adc = HalAdcRead (HAL_KEY_JOY_CHN, HAL_ADC_RESOLUTION_8);
    410          
    411              if ((adc >= 2) && (adc <= 38))
    412              {
    413                 ksave0 |= HAL_KEY_UP;
    414              }
    415              else if ((adc >= 74) && (adc <= 88))
    416              {
    417                ksave0 |= HAL_KEY_RIGHT;
    418              }
    419              else if ((adc >= 60) && (adc <= 73))
    420              {
    421                ksave0 |= HAL_KEY_LEFT;
    422              }
    423              else if ((adc >= 39) && (adc <= 59))
    424              {
    425                ksave0 |= HAL_KEY_DOWN;
    426              }
    427              else if ((adc >= 89) && (adc <= 100))
    428              {
    429                ksave0 |= HAL_KEY_CENTER;
    430              }
    431            } while (ksave0 != ksave1);
    432          #endif
    433            return ksave0;
   \   000002   02....       LJMP    ?BRET
    434          }
    435          
    436          
    437          
    438          
    439          
    440          /**************************************************************************************************
    441           * @fn      halProcessKeyInterrupt
    442           *
    443           * @brief   Checks to see if it's a valid key interrupt, saves interrupt driven key states for
    444           *          processing by HalKeyRead(), and debounces keys by scheduling HalKeyRead() 25ms later.
    445           *
    446           * @param
    447           *
    448           * @return
    449           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    450          void halProcessKeyInterrupt (void)
   \                     halProcessKeyInterrupt:
    451          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    452            bool valid=FALSE;
   \   000005   7E00         MOV     R6,#0x0
    453          
    454            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)  /* Interrupt Flag has been set */
   \   000007   E589         MOV     A,0x89
   \   000009   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000B   5005         JNC     ??halProcessKeyInterrupt_0
    455            {
    456              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT); /* Clear Interrupt Flag */
   \   00000D   7589FD       MOV     0x89,#-0x3
    457              valid = TRUE;
   \   000010   7E01         MOV     R6,#0x1
    458            }
    459          
    460            if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)  /* Interrupt Flag has been set */
   \                     ??halProcessKeyInterrupt_0:
   \   000012   E58B         MOV     A,0x8b
   \   000014   A2E0         MOV     C,0xE0 /* A   */.0
   \   000016   5005         JNC     ??halProcessKeyInterrupt_1
    461            {
    462              HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT); /* Clear Interrupt Flag */
   \   000018   758BFE       MOV     0x8b,#-0x2
    463              valid = TRUE;
   \   00001B   7E01         MOV     R6,#0x1
    464            }
    465          
    466            if (valid)
   \                     ??halProcessKeyInterrupt_1:
   \   00001D   EE           MOV     A,R6
   \   00001E   6011         JZ      ??halProcessKeyInterrupt_2
    467            {
    468              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
   \   000020                ; Setup parameters for call to function osal_start_timerEx
   \   000020   7C19         MOV     R4,#0x19
   \   000022   7D00         MOV     R5,#0x0
   \   000024   7A01         MOV     R2,#0x1
   \   000026   7B00         MOV     R3,#0x0
   \   000028   90....       MOV     DPTR,#Hal_TaskID
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   000030   E9           MOV     A,R1
    469            }
    470          }
   \                     ??halProcessKeyInterrupt_2:
   \   000031   7F01         MOV     R7,#0x1
   \   000033   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000036                REQUIRE P0IFG
   \   000036                REQUIRE P2IFG
    471          
    472          /**************************************************************************************************
    473           * @fn      HalKeyEnterSleep
    474           *
    475           * @brief  - Get called to enter sleep mode
    476           *
    477           * @param
    478           *
    479           * @return
    480           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    481          void HalKeyEnterSleep ( void )
   \                     HalKeyEnterSleep:
    482          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    483          }
   \   000000   02....       LJMP    ?BRET
    484          
    485          /**************************************************************************************************
    486           * @fn      HalKeyExitSleep
    487           *
    488           * @brief   - Get called when sleep is over
    489           *
    490           * @param
    491           *
    492           * @return  - return saved keys
    493           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    494          uint8 HalKeyExitSleep ( void )
   \                     HalKeyExitSleep:
    495          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    496            /* Wake up and read keys */
    497            return ( HalKeyRead () );
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   ??HalKeyRead?relay   ; Banked call to: HalKeyRead
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    498          }
    499          
    500          /***************************************************************************************************
    501           *                                    INTERRUPT SERVICE ROUTINE
    502           ***************************************************************************************************/
    503          
    504          /**************************************************************************************************
    505           * @fn      halKeyPort0Isr
    506           *
    507           * @brief   Port0 ISR
    508           *
    509           * @param
    510           *
    511           * @return
    512           **************************************************************************************************/
    513          #if 0
    514          HAL_ISR_FUNCTION( halKeyPort0Isr, P0INT_VECTOR )
    515          {
    516            HAL_ENTER_ISR();
    517          
    518            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT 
    519                || HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)
    520            {
    521              halProcessKeyInterrupt();
    522            }
    523          
    524            /*
    525              Clear the CPU interrupt flag for Port_0
    526              PxIFG has to be cleared before PxIF
    527            */
    528            HAL_KEY_SW_6_PXIFG = 0;
    529            HAL_KEY_CPU_PORT_0_IF = 0;
    530            
    531            CLEAR_SLEEP_MODE();
    532            HAL_EXIT_ISR();
    533          }
    534          #endif // modify by wx
    535          
    536          /**************************************************************************************************
    537           * @fn      halKeyPort2Isr
    538           *
    539           * @brief   Port2 ISR
    540           *
    541           * @param
    542           *
    543           * @return
    544           **************************************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    545          HAL_ISR_FUNCTION( halKeyPort2Isr, P2INT_VECTOR )
   \                     halKeyPort2Isr:
    546          {
   \   000000   C0E0         PUSH    A
   \   000002   74F2         MOV     A,#-0xe
   \   000004   12....       LCALL   ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 14
   \   000007                ; Auto size: 0
    547            HAL_ENTER_ISR();
   \   000007   A2AF         MOV     C,0xa8.7
   \   000009   E4           CLR     A
   \   00000A   33           RLC     A
   \   00000B   FE           MOV     R6,A
   \   00000C   D2AF         SETB    0xa8.7
    548            
    549            if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)
   \   00000E   E58B         MOV     A,0x8b
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5003         JNC     ??halKeyPort2Isr_0
    550            {
    551              halProcessKeyInterrupt();
   \   000014                ; Setup parameters for call to function halProcessKeyInterrupt
   \   000014   12....       LCALL   ??halProcessKeyInterrupt?relay; Banked call to: halProcessKeyInterrupt
    552            }
    553          
    554            /*
    555              Clear the CPU interrupt flag for Port_2
    556              PxIFG has to be cleared before PxIF
    557              Notes: P2_1 and P2_2 are debug lines.
    558            */
    559            HAL_KEY_JOY_MOVE_PXIFG = 0;
   \                     ??halKeyPort2Isr_0:
   \   000017   758B00       MOV     0x8b,#0x0
    560            HAL_KEY_CPU_PORT_2_IF = 0;
   \   00001A   C2E8         CLR     0xe8.0
    561          
    562            CLEAR_SLEEP_MODE();
    563            HAL_EXIT_ISR();
   \   00001C   EE           MOV     A,R6
   \   00001D   F8           MOV     R0,A
   \   00001E   EE           MOV     A,R6
   \   00001F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000021   92AF         MOV     0xa8.7,C
    564          }
   \   000023   7F01         MOV     R7,#0x1
   \   000025   02....       LJMP    ?INTERRUPT_LEAVE_XSP
   \   000028                REQUIRE _A_IEN0
   \   000028                REQUIRE P2IFG
   \   000028                REQUIRE _A_IRCON2

   \                                 In  segment INTVEC, offset 0x33, root
   \                     `??halKeyPort2Isr??INTVEC 51`:
   \   000033   02....       LJMP       (halKeyPort2Isr)

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyConfig?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyConfig

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyPoll?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halGetJoyKeyInput?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halGetJoyKeyInput

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halProcessKeyInterrupt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halProcessKeyInterrupt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyEnterSleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyEnterSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyExitSleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyExitSleep
    565          #else
    566          
    567          
    568          void HalKeyInit(void){}
    569          void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback){}
    570          uint8 HalKeyRead(void){ return 0;}
    571          void HalKeyPoll(void){}
    572          
    573          #endif /* HAL_KEY */
    574          
    575          
    576          
    577          
    578          
    579          /**************************************************************************************************
    580          **************************************************************************************************/
    581          
    582          
    583          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   HalKeyConfig
        0      9   -> osal_set_event
        0      9   -> osal_stop_timerEx
      0      0   HalKeyEnterSleep
      2      0   HalKeyExitSleep
        2      0   -> HalKeyRead
      2      0   HalKeyInit
      0      9   HalKeyPoll
      0      0   HalKeyRead
      0      0   halGetJoyKeyInput
      0     14   halKeyPort2Isr
        0     14   -> halProcessKeyInterrupt
      0     23   halProcessKeyInterrupt
        0      9   -> osal_start_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??HalKeyConfig?relay
       6  ??HalKeyEnterSleep?relay
       6  ??HalKeyExitSleep?relay
       6  ??HalKeyInit?relay
       6  ??HalKeyPoll?relay
       6  ??HalKeyRead?relay
       6  ??halGetJoyKeyInput?relay
       3  ??halKeyPort2Isr??INTVEC 51
       6  ??halProcessKeyInterrupt?relay
     112  HalKeyConfig
       1  HalKeyConfigured
       3  HalKeyEnterSleep
      14  HalKeyExitSleep
      45  HalKeyInit
      75  HalKeyPoll
      23  HalKeyRead
       1  Hal_KeyIntEnable
       1  IEN2
       1  P0IEN
       1  P0IFG
       1  P1DIR
       1  P1SEL
       1  P2IEN
       1  P2IFG
       1  PICTL
       1  _A_IEN0
       1  _A_IEN1
       1  _A_IRCON2
       1  _A_P1
       5  halGetJoyKeyInput
      40  halKeyPort2Isr
       1  halKeySavedKeys
      54  halProcessKeyInterrupt
       2  pHalKeyProcessFunction

 
 331 bytes in segment BANKED_CODE
  48 bytes in segment BANK_RELAYS
   3 bytes in segment INTVEC
  40 bytes in segment NEAR_CODE
  12 bytes in segment SFR_AN
   5 bytes in segment XDATA_Z
 
 419 bytes of CODE  memory (+  3 bytes shared)
   0 bytes of DATA  memory (+ 12 bytes shared)
   5 bytes of XDATA memory

Errors: none
Warnings: none
