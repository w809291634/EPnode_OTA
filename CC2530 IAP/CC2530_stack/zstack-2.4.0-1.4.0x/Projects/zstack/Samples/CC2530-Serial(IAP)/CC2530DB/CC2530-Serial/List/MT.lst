###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:40
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mt\MT.c
#    Command line       =  
#        -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=8448
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mt\MT.c" -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D XLAB
#        -D CC2530_Serial -D MAKE_CRC_SHDW -D CC2530_USE_IAP -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\"
#        --diag_suppress Pe001,Pa010 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\List\MT.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-Serial(IAP)\CC2530DB\CC2530-Serial\Obj\MT.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Components\mt\MT.c
      1          /***************************************************************************************************
      2            Filename:       MTEL.c
      3            Revised:        $Date: 2010-10-07 03:59:08 -0700 (Thu, 07 Oct 2010) $
      4            Revision:       $Revision: 24053 $
      5          
      6            Description:    MonitorTest Event Loop functions.  Everything in the
      7                            MonitorTest Task (except the serial driver).
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          
     39           ***************************************************************************************************/
     40          
     41          
     42          /***************************************************************************************************
     43           * INCLUDES
     44           ***************************************************************************************************/
     45          #include "ZComDef.h"
     46          #include "MT.h"
     47          #include "MT_APP.h"
     48          #include "MT_DEBUG.h"
     49          #include "MT_UTIL.h"
     50          #include "MT_SYS.h"
     51          
     52          #include "OnBoard.h"
     53          #include "OSAL.h"
     54          #include "OSAL_Memory.h"
     55          #include "OSAL_Nv.h"
     56          
     57          #include "DebugTrace.h"
     58          #include "ZMAC.h"
     59          
     60          #if !defined ( NONWK )
     61            #include "NLMEDE.h"
     62            #include "nwk_bufs.h"
     63            #include "ZDObject.h"
     64            #include "ssp.h"
     65            #include "nwk_util.h"
     66            #include "AF.h"
     67            #include "MT_SAPI.h"
     68          #endif
     69          
     70          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     71            #include "MT_MAC.h"
     72          #endif
     73          #if defined( MT_NWK_FUNC ) || defined( MT_NWK_CB_FUNC )
     74            #include "MT_NWK.h"
     75            #include "nwk.h"
     76            #include "nwk_bufs.h"
     77          #endif
     78          #if defined( MT_AF_FUNC ) || defined( MT_AF_CB_FUNC )
     79            #include "MT_AF.h"
     80          #endif
     81          #if defined( MT_USER_TEST_FUNC )
     82            #include "AF.h"
     83          #endif
     84          #if defined( MT_ZDO_FUNC )
     85            #include "MT_ZDO.h"
     86          #endif
     87          #if defined (MT_SAPI_FUNC)
     88          	#include "MT_SAPI.h"
     89          #endif
     90          #if defined (MT_OTA_FUNC)
     91            #include "MT_OTA.h"
     92          #endif
     93          
     94          #if defined( APP_TP )
     95           #include "TestProfile.h"
     96          #endif
     97          #if defined( APP_TP2 )
     98           #include "TestProfile2.h"
     99          #endif
    100          
    101          #if defined(APP_TGEN)
    102            #include "TrafficGenApp.h"
    103          #endif
    104          #if defined(APP_DEBUG)
    105          	#include "DebugApp.h"
    106          #endif
    107          #if defined (NWK_TEST)
    108          	#include "HWTTApp.h"
    109          #endif
    110          
    111          /* HAL */
    112          #include "hal_uart.h"
    113          #include "hal_led.h"
    114          #include "hal_key.h"
    115          #include "MT_UART.h"
    116          
    117          /***************************************************************************************************
    118           * MACROS
    119           ***************************************************************************************************/
    120          #define MTEL_DEBUG_INFO( nParams, p1, p2, p3 ) DEBUG_INFO( COMPID_MTEL, nParams, p1, p2, p3 )
    121          
    122          #define MT_ERROR_SRSP_LEN   3
    123          
    124          /***************************************************************************************************
    125           * CONSTANTS
    126           ***************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          mtProcessMsg_t mtProcessIncoming[] =
   \                     mtProcessIncoming:
   \   000000                DS 22
   \   000016                REQUIRE __INIT_XDATA_Z
    128          {
    129            NULL,
    130          
    131          #if defined (MT_SYS_FUNC)
    132            MT_SysCommandProcessing,
    133          #else
    134            NULL,
    135          #endif
    136          
    137          #if defined (MT_MAC_FUNC)
    138            MT_MacCommandProcessing,
    139          #else
    140            NULL,
    141          #endif
    142          
    143          #if defined (MT_NWK_FUNC)
    144            MT_NwkCommandProcessing,
    145          #else
    146            NULL,
    147          #endif
    148          
    149          #if defined (MT_AF_FUNC)
    150            MT_AfCommandProcessing,
    151          #else
    152            NULL,
    153          #endif
    154          
    155          #if defined (MT_ZDO_FUNC)
    156            MT_ZdoCommandProcessing,
    157          #else
    158            NULL,
    159          #endif
    160          
    161          #if defined (MT_SAPI_FUNC)
    162            MT_SapiCommandProcessing,
    163          #else
    164            NULL,
    165          #endif
    166          
    167          #if defined (MT_UTIL_FUNC)
    168            MT_UtilCommandProcessing,
    169          #else
    170            NULL,
    171          #endif
    172          
    173          #if defined (MT_DEBUG_FUNC)
    174            MT_DebugCommandProcessing,
    175          #else
    176            NULL,
    177          #endif
    178          
    179          #if defined (MT_APP_FUNC)
    180            MT_AppCommandProcessing,
    181          #else
    182            NULL,
    183          #endif
    184          
    185          #if defined (MT_OTA_FUNC)
    186            MT_OtaCommandProcessing,
    187          #else
    188            NULL,
    189          #endif
    190          };
    191          
    192          /***************************************************************************************************
    193           * TYPEDEFS
    194           ***************************************************************************************************/
    195          
    196          /***************************************************************************************************
    197           * GLOBAL VARIABLES
    198           ***************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    199          UINT16 save_cmd;
   \                     save_cmd:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    200          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    201          byte MT_TaskID;
   \                     MT_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    202          byte debugThreshold;
   \                     debugThreshold:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    203          byte debugCompId;
   \                     debugCompId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    204          
    205          /***************************************************************************************************
    206           * EXTERNAL FUNCTIONS
    207           ***************************************************************************************************/
    208          extern unsigned int mac_sim_eventLoop( void );
    209          
    210          #ifdef MACSIM
    211          extern void MACSIM_TranslateMsg( byte *buf, byte bLen );  /*  Used to pass Zignet message */
    212          #endif
    213          
    214          
    215          /***************************************************************************************************
    216           * LOCAL VARIABLES
    217           ***************************************************************************************************/
    218          
    219          /***************************************************************************************************
    220           * LOCAL FUNCTIONS
    221           ***************************************************************************************************/
    222          void MT_MsgQueueInit( void );
    223          void MT_ResetMsgQueue( void );
    224          byte MT_QueueMsg( byte *msg , byte len );
    225          void MT_ProcessQueue( void );
    226          
    227          #if defined ( MT_USER_TEST_FUNC )
    228          void MT_ProcessAppUserCmd( byte *pData );
    229          #endif
    230          
    231          /***************************************************************************************************
    232           * @fn      MT_Init()
    233           *
    234           * @brief   Initialize MT.
    235           *
    236           * @param   uint8 taskId - taskId
    237           *
    238           * @return  void
    239           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    240          void MT_Init(uint8 taskID)
   \                     MT_Init:
    241          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    242            MT_TaskID = taskID;
   \   000007   EE           MOV     A,R6
   \   000008   90....       MOV     DPTR,#MT_TaskID
   \   00000B   F0           MOVX    @DPTR,A
    243            debugThreshold = 0;
   \   00000C   90....       MOV     DPTR,#debugThreshold
   \   00000F   7400         MOV     A,#0x0
   \   000011   F0           MOVX    @DPTR,A
    244            debugCompId = 0;
   \   000012   90....       MOV     DPTR,#debugCompId
   \   000015   7400         MOV     A,#0x0
   \   000017   F0           MOVX    @DPTR,A
    245            
    246          #if defined (MT_ZDO_FUNC)
    247            MT_ZdoInit();
    248          #endif
    249            MT_SysResetInd();
   \   000018                ; Setup parameters for call to function MT_SysResetInd
   \   000018   12....       LCALL   ??MT_SysResetInd?relay; Banked call to: MT_SysResetInd
    250          }
   \   00001B   7F01         MOV     R7,#0x1
   \   00001D   02....       LJMP    ?BANKED_LEAVE_XDATA
    251          
    252          /***************************************************************************************************
    253           * @fn      MT_BuildSPIMsg
    254           *
    255           * @brief
    256           *
    257           *   Format an SPI message.
    258           *
    259           * @param   UINT16 cmd - command id
    260           * @param   byte *msg - pointer to message buffer
    261           * @param   byte dataLen - length of data field
    262           * @param   byte *pData - pointer to data field
    263           *
    264           * @return  void
    265           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    266          void MT_BuildSPIMsg( uint8 cmdType, uint8 cmdId, byte *msg, byte dataLen, byte *pData )
   \                     MT_BuildSPIMsg:
    267          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V5,R1
   \   000007   8A..         MOV     ?V4,R2
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   8B..         MOV     ?V3,R3
   \   00000F   7410         MOV     A,#0x10
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V6,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V7,A
    268            /* Fill in the CMD and Data Length */
    269            *msg++ = dataLen;
   \   00001B   E5..         MOV     A,?V3
   \   00001D   C0E0         PUSH    A
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   D0E0         POP     A
   \   000025   F0           MOVX    @DPTR,A
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   A3           INC     DPTR
   \   00002B   AE82         MOV     R6,DPL
   \   00002D   AF83         MOV     R7,DPH
    270            *msg++ = cmdType;
   \   00002F   E5..         MOV     A,?V5
   \   000031   C0E0         PUSH    A
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   D0E0         POP     A
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   A3           INC     DPTR
   \   00003F   AE82         MOV     R6,DPL
   \   000041   AF83         MOV     R7,DPH
    271            *msg++ = cmdId;
   \   000043   E5..         MOV     A,?V4
   \   000045   C0E0         PUSH    A
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   D0E0         POP     A
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   8E82         MOV     DPL,R6
   \   000050   8F83         MOV     DPH,R7
   \   000052   A3           INC     DPTR
   \   000053   AE82         MOV     R6,DPL
   \   000055   AF83         MOV     R7,DPH
    272          
    273            /* Fill in the data */
    274            if ( pData )
   \   000057   E5..         MOV     A,?V6
   \   000059   45..         ORL     A,?V7
   \   00005B   601E         JZ      ??MT_BuildSPIMsg_0
    275            {
    276              osal_memcpy( msg, pData, dataLen );
   \   00005D                ; Setup parameters for call to function osal_memcpy
   \   00005D   85....       MOV     ?V0,?V6
   \   000060   85....       MOV     ?V1,?V7
   \   000063   75..00       MOV     ?V2,#0x0
   \   000066   78..         MOV     R0,#?V0
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006B   AC..         MOV     R4,?V3
   \   00006D   7D00         MOV     R5,#0x0
   \   00006F   EE           MOV     A,R6
   \   000070   FA           MOV     R2,A
   \   000071   EF           MOV     A,R7
   \   000072   FB           MOV     R3,A
   \   000073   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000076   7403         MOV     A,#0x3
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
    277            }
    278          }
   \                     ??MT_BuildSPIMsg_0:
   \   00007B   7F08         MOV     R7,#0x8
   \   00007D   02....       LJMP    ?BANKED_LEAVE_XDATA
    279          
    280          /***************************************************************************************************
    281           * @fn      MT_BuildAndSendZToolResponse
    282           *
    283           * @brief   Build and send a ZTOOL msg
    284           * @param   uint8 cmdType - include type and subsystem
    285           *          uint8 cmdId - command ID
    286           *          byte dataLen
    287           *          byte *pData
    288           *
    289           * @return  void
    290           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    291          void MT_BuildAndSendZToolResponse(uint8 cmdType, uint8 cmdId, uint8 dataLen, uint8 *pData)
   \                     MT_BuildAndSendZToolResponse:
    292          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   8A..         MOV     ?V0,R2
   \   000009   EB           MOV     A,R3
   \   00000A   FE           MOV     R6,A
   \   00000B   8C..         MOV     ?V6,R4
   \   00000D   8D..         MOV     ?V7,R5
    293            uint8 *msg_ptr;
    294          
    295            /* Allocate memory including SOP and FCS */
    296            msg_ptr = MT_TransportAlloc((mtRpcCmdType_t)(cmdType & 0xE0), dataLen);
   \   00000F                ; Setup parameters for call to function MT_TransportAlloc
   \   00000F   EE           MOV     A,R6
   \   000010   FA           MOV     R2,A
   \   000011   74E0         MOV     A,#-0x20
   \   000013   5F           ANL     A,R7
   \   000014   F9           MOV     R1,A
   \   000015   12....       LCALL   ??MT_TransportAlloc?relay; Banked call to: MT_TransportAlloc
   \   000018   8A..         MOV     ?V2,R2
   \   00001A   8B..         MOV     ?V3,R3
   \   00001C   85....       MOV     ?V4,?V2
   \   00001F   85....       MOV     ?V5,?V3
    297          
    298            if (msg_ptr)
   \   000022   E5..         MOV     A,?V4
   \   000024   45..         ORL     A,?V5
   \   000026   6024         JZ      ??MT_BuildAndSendZToolResponse_0
    299            {
    300              /* Build the message */
    301              MT_BuildSPIMsg(cmdType, cmdId, msg_ptr, dataLen, pData);
   \   000028                ; Setup parameters for call to function MT_BuildSPIMsg
   \   000028   85....       MOV     ?V2,?V6
   \   00002B   85....       MOV     ?V3,?V7
   \   00002E   78..         MOV     R0,#?V2
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   EE           MOV     A,R6
   \   000034   FB           MOV     R3,A
   \   000035   AC..         MOV     R4,?V4
   \   000037   AD..         MOV     R5,?V5
   \   000039   AA..         MOV     R2,?V0
   \   00003B   EF           MOV     A,R7
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   ??MT_BuildSPIMsg?relay; Banked call to: MT_BuildSPIMsg
   \   000040   7402         MOV     A,#0x2
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    302              /* Send out the msg */
    303              MT_TransportSend(msg_ptr);
   \   000045                ; Setup parameters for call to function MT_TransportSend
   \   000045   AA..         MOV     R2,?V4
   \   000047   AB..         MOV     R3,?V5
   \   000049   12....       LCALL   ??MT_TransportSend?relay; Banked call to: MT_TransportSend
    304            }
    305          }
   \                     ??MT_BuildAndSendZToolResponse_0:
   \   00004C   7F08         MOV     R7,#0x8
   \   00004E   02....       LJMP    ?BANKED_LEAVE_XDATA
    306          
    307          /***************************************************************************************************
    308           * @fn      MT_ProcessIncoming
    309           *
    310           * @brief  Process Incoming Message.
    311           *
    312           * @param   byte *pBuf - pointer to event message
    313           *
    314           * @return  void
    315           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    316          void MT_ProcessIncoming(uint8 *pBuf)
   \                     MT_ProcessIncoming:
    317          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    318            mtProcessMsg_t  func;
    319            uint8           rsp[MT_ERROR_SRSP_LEN];
    320          
    321            /* pre-build response message:  | status | cmd0 | cmd1 | */
    322            rsp[1] = pBuf[MT_RPC_POS_CMD0];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   C0E0         PUSH    A
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   D0E0         POP     A
   \   00001D   F0           MOVX    @DPTR,A
    323            rsp[2] = pBuf[MT_RPC_POS_CMD1];
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   C0E0         PUSH    A
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   D0E0         POP     A
   \   00002E   F0           MOVX    @DPTR,A
    324          
    325            /* check length */
    326            if (pBuf[MT_RPC_POS_LEN] > MT_RPC_DATA_MAX)
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   E0           MOVX    A,@DPTR
   \   000034   C3           CLR     C
   \   000035   94FB         SUBB    A,#-0x5
   \   000037   400B         JC      ??MT_ProcessIncoming_0
    327            {
    328              rsp[0] = MT_RPC_ERR_LENGTH;
   \   000039   85..82       MOV     DPL,?XSP + 0
   \   00003C   85..83       MOV     DPH,?XSP + 1
   \   00003F   7404         MOV     A,#0x4
   \   000041   F0           MOVX    @DPTR,A
   \   000042   807B         SJMP    ??MT_ProcessIncoming_1
    329            }
    330            /* check subsystem range */
    331            else if ((rsp[1] & MT_RPC_SUBSYSTEM_MASK) < MT_RPC_SYS_MAX)
   \                     ??MT_ProcessIncoming_0:
   \   000044   7401         MOV     A,#0x1
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   541F         ANL     A,#0x1f
   \   00004C   C3           CLR     C
   \   00004D   940B         SUBB    A,#0xb
   \   00004F   5065         JNC     ??MT_ProcessIncoming_2
    332            {
    333              /* look up processing function */
    334              func = mtProcessIncoming[rsp[1] & MT_RPC_SUBSYSTEM_MASK];
   \   000051   7401         MOV     A,#0x1
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F8           MOV     R0,A
   \   000058   7900         MOV     R1,#0x0
   \   00005A   E8           MOV     A,R0
   \   00005B   541F         ANL     A,#0x1f
   \   00005D   F8           MOV     R0,A
   \   00005E   E9           MOV     A,R1
   \   00005F   5400         ANL     A,#0x0
   \   000061   F9           MOV     R1,A
   \   000062   E8           MOV     A,R0
   \   000063   75F002       MOV     B,#0x2
   \   000066   A4           MUL     AB
   \   000067   C8           XCH     A,R0
   \   000068   AAF0         MOV     R2,B
   \   00006A   75F000       MOV     B,#0x0
   \   00006D   A4           MUL     AB
   \   00006E   2A           ADD     A,R2
   \   00006F   FA           MOV     R2,A
   \   000070   75F002       MOV     B,#0x2
   \   000073   E9           MOV     A,R1
   \   000074   A4           MUL     AB
   \   000075   2A           ADD     A,R2
   \   000076   F9           MOV     R1,A
   \   000077   74..         MOV     A,#mtProcessIncoming & 0xff
   \   000079   28           ADD     A,R0
   \   00007A   F582         MOV     DPL,A
   \   00007C   74..         MOV     A,#(mtProcessIncoming >> 8) & 0xff
   \   00007E   39           ADDC    A,R1
   \   00007F   F583         MOV     DPH,A
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F8           MOV     R0,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F9           MOV     R1,A
   \   000086   88..         MOV     ?V0,R0
   \   000088   89..         MOV     ?V1,R1
    335              if (func)
   \   00008A   E5..         MOV     A,?V0
   \   00008C   45..         ORL     A,?V1
   \   00008E   601B         JZ      ??MT_ProcessIncoming_3
    336              {
    337                /* execute processing function */
    338                rsp[0] = (*func)(pBuf);
   \   000090                ; Setup parameters for indirect call
   \   000090   EE           MOV     A,R6
   \   000091   FA           MOV     R2,A
   \   000092   EF           MOV     A,R7
   \   000093   FB           MOV     R3,A
   \   000094   85..82       MOV     DPL,?V0
   \   000097   85..83       MOV     DPH,?V1
   \   00009A   12....       LCALL   ?CALL_IND
   \   00009D   E9           MOV     A,R1
   \   00009E   C0E0         PUSH    A
   \   0000A0   85..82       MOV     DPL,?XSP + 0
   \   0000A3   85..83       MOV     DPH,?XSP + 1
   \   0000A6   D0E0         POP     A
   \   0000A8   F0           MOVX    @DPTR,A
   \   0000A9   8014         SJMP    ??MT_ProcessIncoming_1
    339              }
    340              else
    341              {
    342                rsp[0] = MT_RPC_ERR_SUBSYSTEM;
   \                     ??MT_ProcessIncoming_3:
   \   0000AB   85..82       MOV     DPL,?XSP + 0
   \   0000AE   85..83       MOV     DPH,?XSP + 1
   \   0000B1   7401         MOV     A,#0x1
   \   0000B3   F0           MOVX    @DPTR,A
   \   0000B4   8009         SJMP    ??MT_ProcessIncoming_1
    343              }
    344            }
    345            else
    346            {
    347              rsp[0] = MT_RPC_ERR_SUBSYSTEM;
   \                     ??MT_ProcessIncoming_2:
   \   0000B6   85..82       MOV     DPL,?XSP + 0
   \   0000B9   85..83       MOV     DPH,?XSP + 1
   \   0000BC   7401         MOV     A,#0x1
   \   0000BE   F0           MOVX    @DPTR,A
    348            }
    349          
    350            /* if error and this was an SREQ, send error message */
    351            if ((rsp[0] != MT_RPC_SUCCESS) && ((rsp[1] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SREQ))
   \                     ??MT_ProcessIncoming_1:
   \   0000BF   85..82       MOV     DPL,?XSP + 0
   \   0000C2   85..83       MOV     DPH,?XSP + 1
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   6019         JZ      ??MT_ProcessIncoming_4
   \   0000C8   7401         MOV     A,#0x1
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   54E0         ANL     A,#0xe0
   \   0000D0   6420         XRL     A,#0x20
   \   0000D2   700D         JNZ     ??MT_ProcessIncoming_4
    352            {
    353              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_RES0), 0, MT_ERROR_SRSP_LEN, rsp);
   \   0000D4                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000D4   AC..         MOV     R4,?XSP + 0
   \   0000D6   AD..         MOV     R5,?XSP + 1
   \   0000D8   7B03         MOV     R3,#0x3
   \   0000DA   7A00         MOV     R2,#0x0
   \   0000DC   7960         MOV     R1,#0x60
   \   0000DE   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    354            }
    355          }
   \                     ??MT_ProcessIncoming_4:
   \   0000E1   7403         MOV     A,#0x3
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E6   7F02         MOV     R7,#0x2
   \   0000E8   02....       LJMP    ?BANKED_LEAVE_XDATA
    356          
    357          
    358          /***************************************************************************************************
    359           * @fn      MTProcessAppRspMsg
    360           *
    361           * @brief   Process the User App Response Message
    362           *
    363           * @param   data - output serial buffer.  The first byte must be the
    364           *          endpoint that send this message.
    365           * @param   len - data length
    366           *
    367           * @return  none
    368           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    369          void MTProcessAppRspMsg( byte *pData, byte len )
   \                     MTProcessAppRspMsg:
    370          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
    371            /* Send out Reset Response message */
    372            MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP), MT_APP_RSP, len, pData );
   \   00000B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00000B   EE           MOV     A,R6
   \   00000C   FC           MOV     R4,A
   \   00000D   EF           MOV     A,R7
   \   00000E   FD           MOV     R5,A
   \   00000F   AB..         MOV     R3,?V0
   \   000011   7A80         MOV     R2,#-0x80
   \   000013   7969         MOV     R1,#0x69
   \   000015   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    373          }
   \   000018   7F01         MOV     R7,#0x1
   \   00001A   02....       LJMP    ?BANKED_LEAVE_XDATA
    374          
    375          
    376          /***************************************************************************************************
    377           * @fn      MT_ReverseBytes
    378           *
    379           * @brief
    380           *
    381           *   Reverses bytes within an array
    382           *
    383           * @param   data - ptr to data buffer to reverse
    384           * @param    len - number of bytes in buffer
    385           *
    386           * @return  void
    387           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    388          void MT_ReverseBytes( byte *pData, byte len )
   \                     MT_ReverseBytes:
    389          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FC           MOV     R4,A
    390            byte i,j;
    391            byte temp;
    392          
    393            for ( i = 0, j = len-1; len > 1; len-=2 )
   \   000007   7E00         MOV     R6,#0x0
   \   000009   74FF         MOV     A,#-0x1
   \   00000B   2C           ADD     A,R4
   \   00000C   FD           MOV     R5,A
   \                     ??MT_ReverseBytes_0:
   \   00000D   EC           MOV     A,R4
   \   00000E   C3           CLR     C
   \   00000F   9402         SUBB    A,#0x2
   \   000011   4046         JC      ??MT_ReverseBytes_1
    394            {
    395              temp = pData[i];
   \   000013   EE           MOV     A,R6
   \   000014   F8           MOV     R0,A
   \   000015   7900         MOV     R1,#0x0
   \   000017   EA           MOV     A,R2
   \   000018   28           ADD     A,R0
   \   000019   F582         MOV     DPL,A
   \   00001B   EB           MOV     A,R3
   \   00001C   39           ADDC    A,R1
   \   00001D   F583         MOV     DPH,A
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FF           MOV     R7,A
    396              pData[i++] = pData[j];
   \   000021   ED           MOV     A,R5
   \   000022   F8           MOV     R0,A
   \   000023   7900         MOV     R1,#0x0
   \   000025   EA           MOV     A,R2
   \   000026   28           ADD     A,R0
   \   000027   F582         MOV     DPL,A
   \   000029   EB           MOV     A,R3
   \   00002A   39           ADDC    A,R1
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   C0E0         PUSH    A
   \   000030   EE           MOV     A,R6
   \   000031   F8           MOV     R0,A
   \   000032   7900         MOV     R1,#0x0
   \   000034   EA           MOV     A,R2
   \   000035   28           ADD     A,R0
   \   000036   F582         MOV     DPL,A
   \   000038   EB           MOV     A,R3
   \   000039   39           ADDC    A,R1
   \   00003A   F583         MOV     DPH,A
   \   00003C   D0E0         POP     A
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   0E           INC     R6
    397              pData[j--] = temp;
   \   000040   EF           MOV     A,R7
   \   000041   C0E0         PUSH    A
   \   000043   ED           MOV     A,R5
   \   000044   F8           MOV     R0,A
   \   000045   7900         MOV     R1,#0x0
   \   000047   EA           MOV     A,R2
   \   000048   28           ADD     A,R0
   \   000049   F582         MOV     DPL,A
   \   00004B   EB           MOV     A,R3
   \   00004C   39           ADDC    A,R1
   \   00004D   F583         MOV     DPH,A
   \   00004F   D0E0         POP     A
   \   000051   F0           MOVX    @DPTR,A
   \   000052   1D           DEC     R5
    398            }
   \   000053   74FE         MOV     A,#-0x2
   \   000055   2C           ADD     A,R4
   \   000056   FC           MOV     R4,A
   \   000057   80B4         SJMP    ??MT_ReverseBytes_0
    399          }
   \                     ??MT_ReverseBytes_1:
   \   000059   7F01         MOV     R7,#0x1
   \   00005B   02....       LJMP    ?BANKED_LEAVE_XDATA
    400          
    401          
    402          /***************************************************************************************************
    403           * @fn      MT_Word2Buf
    404           *
    405           * @brief   Copy a uint16 array to a byte array, little endian.
    406           *
    407           * @param   pBuf - byte array
    408           * @param   pWord - uint16 array
    409           * @param   len - length of uint16 array
    410           *
    411           * @return  pointer to end of byte array
    412           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    413          uint8 *MT_Word2Buf( uint8 *pBuf, uint16 *pWord, uint8 len )
   \                     MT_Word2Buf:
    414          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    415            while ( len-- > 0 )
   \                     ??MT_Word2Buf_0:
   \   000005   E9           MOV     A,R1
   \   000006   F8           MOV     R0,A
   \   000007   74FF         MOV     A,#-0x1
   \   000009   28           ADD     A,R0
   \   00000A   F9           MOV     R1,A
   \   00000B   E8           MOV     A,R0
   \   00000C   6044         JZ      ??MT_Word2Buf_1
    416            {
    417              *pBuf++ = LO_UINT16( *pWord );
   \   00000E   8C82         MOV     DPL,R4
   \   000010   8D83         MOV     DPH,R5
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FE           MOV     R6,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FF           MOV     R7,A
   \   000017   EE           MOV     A,R6
   \   000018   C0E0         PUSH    A
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   D0E0         POP     A
   \   000020   F0           MOVX    @DPTR,A
   \   000021   8A82         MOV     DPL,R2
   \   000023   8B83         MOV     DPH,R3
   \   000025   A3           INC     DPTR
   \   000026   AA82         MOV     R2,DPL
   \   000028   AB83         MOV     R3,DPH
    418              *pBuf++ = HI_UINT16( *pWord );
   \   00002A   8C82         MOV     DPL,R4
   \   00002C   8D83         MOV     DPH,R5
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FE           MOV     R6,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FF           MOV     R7,A
   \   000033   E4           CLR     A
   \   000034   CF           XCH     A,R7
   \   000035   FE           MOV     R6,A
   \   000036   EE           MOV     A,R6
   \   000037   C0E0         PUSH    A
   \   000039   8A82         MOV     DPL,R2
   \   00003B   8B83         MOV     DPH,R3
   \   00003D   D0E0         POP     A
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   8A82         MOV     DPL,R2
   \   000042   8B83         MOV     DPH,R3
   \   000044   A3           INC     DPTR
   \   000045   AA82         MOV     R2,DPL
   \   000047   AB83         MOV     R3,DPH
    419              pWord++;
   \   000049   EC           MOV     A,R4
   \   00004A   2402         ADD     A,#0x2
   \   00004C   FC           MOV     R4,A
   \   00004D   50B6         JNC     ??MT_Word2Buf_0
   \   00004F   0D           INC     R5
   \   000050   80B3         SJMP    ??MT_Word2Buf_0
    420            }
    421          
    422            return pBuf;
   \                     ??MT_Word2Buf_1:
   \   000052   7F01         MOV     R7,#0x1
   \   000054   02....       LJMP    ?BANKED_LEAVE_XDATA
    423          }
    424          #if !defined(NONWK)
    425          /***************************************************************************************************
    426           * @fn      MT_BuildEndpointDesc
    427           *
    428           * @brief   Build endpoint descriptor and simple descriptor structure from incoming buffer
    429           *
    430           * @param   pBuf - byte array
    431           *
    432           * @return  epDesc - pointer to the endpoint descriptor
    433           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    434          uint8 MT_BuildEndpointDesc( uint8 *pBuf, void *param )
   \                     MT_BuildEndpointDesc:
    435          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V6,R4
   \   00000B   8D..         MOV     ?V7,R5
    436            uint8 i;
    437            uint8 ret = ZSuccess;
   \   00000D   75..00       MOV     ?V2,#0x0
    438            endPointDesc_t *epDesc;
    439          
    440            epDesc = (endPointDesc_t *)param;
   \   000010   85....       MOV     ?V0,?V6
   \   000013   85....       MOV     ?V1,?V7
    441            /* check if this endpoint is already registered */
    442            if ( afFindEndPointDesc( *pBuf ) != NULL )
   \   000016                ; Setup parameters for call to function afFindEndPointDesc
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   ??afFindEndPointDesc?relay; Banked call to: afFindEndPointDesc
   \   00001F   8A..         MOV     ?V4,R2
   \   000021   8B..         MOV     ?V5,R3
   \   000023   E5..         MOV     A,?V4
   \   000025   45..         ORL     A,?V5
   \   000027   6006         JZ      ??MT_BuildEndpointDesc_0
    443            {
    444              ret = ZApsDuplicateEntry;
   \   000029   75..B8       MOV     ?V2,#-0x48
   \   00002C   02....       LJMP    ??MT_BuildEndpointDesc_1 & 0xFFFF
    445            }
    446            else if ( epDesc )
   \                     ??MT_BuildEndpointDesc_0:
   \   00002F   E5..         MOV     A,?V0
   \   000031   45..         ORL     A,?V1
   \   000033   7003         JNZ     $+5
   \   000035   02....       LJMP    ??MT_BuildEndpointDesc_1 & 0xFFFF
    447            {
    448              epDesc->endPoint = *pBuf;
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   C0E0         PUSH    A
   \   00003F   85..82       MOV     DPL,?V0
   \   000042   85..83       MOV     DPH,?V1
   \   000045   D0E0         POP     A
   \   000047   F0           MOVX    @DPTR,A
    449          
    450              /* Ignore the latency reqs */
    451              epDesc->latencyReq = noLatencyReqs;
   \   000048   85..82       MOV     DPL,?V0
   \   00004B   85..83       MOV     DPH,?V1
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   7400         MOV     A,#0x0
   \   000055   F0           MOVX    @DPTR,A
    452          
    453              /* allocate memory for the simple descriptor */
    454              epDesc->simpleDesc = (SimpleDescriptionFormat_t *) osal_mem_alloc(sizeof(SimpleDescriptionFormat_t));
   \   000056                ; Setup parameters for call to function osal_mem_alloc
   \   000056   7A0C         MOV     R2,#0xc
   \   000058   7B00         MOV     R3,#0x0
   \   00005A   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00005D   85..82       MOV     DPL,?V0
   \   000060   85..83       MOV     DPH,?V1
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   EA           MOV     A,R2
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   EB           MOV     A,R3
   \   00006A   F0           MOVX    @DPTR,A
    455              if (epDesc->simpleDesc)
   \   00006B   85..82       MOV     DPL,?V0
   \   00006E   85..83       MOV     DPH,?V1
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F8           MOV     R0,A
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F9           MOV     R1,A
   \   000079   E8           MOV     A,R0
   \   00007A   49           ORL     A,R1
   \   00007B   7003         JNZ     $+5
   \   00007D   02....       LJMP    ??MT_BuildEndpointDesc_2 & 0xFFFF
    456              {
    457                /* Endpoint */
    458                epDesc->simpleDesc->EndPoint = *pBuf++;
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   E0           MOVX    A,@DPTR
   \   000085   C0E0         PUSH    A
   \   000087   85..82       MOV     DPL,?V0
   \   00008A   85..83       MOV     DPH,?V1
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F8           MOV     R0,A
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F583         MOV     DPH,A
   \   000096   8882         MOV     DPL,R0
   \   000098   D0E0         POP     A
   \   00009A   F0           MOVX    @DPTR,A
   \   00009B   8E82         MOV     DPL,R6
   \   00009D   8F83         MOV     DPH,R7
   \   00009F   A3           INC     DPTR
   \   0000A0   AE82         MOV     R6,DPL
   \   0000A2   AF83         MOV     R7,DPH
    459          
    460                /* AppProfId */
    461                epDesc->simpleDesc->AppProfId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000A4   8E82         MOV     DPL,R6
   \   0000A6   8F83         MOV     DPH,R7
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   FA           MOV     R2,A
   \   0000AA   7B00         MOV     R3,#0x0
   \   0000AC   8E82         MOV     DPL,R6
   \   0000AE   8F83         MOV     DPH,R7
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F8           MOV     R0,A
   \   0000B3   7900         MOV     R1,#0x0
   \   0000B5   E4           CLR     A
   \   0000B6   C8           XCH     A,R0
   \   0000B7   F9           MOV     R1,A
   \   0000B8   EA           MOV     A,R2
   \   0000B9   28           ADD     A,R0
   \   0000BA   FA           MOV     R2,A
   \   0000BB   EB           MOV     A,R3
   \   0000BC   39           ADDC    A,R1
   \   0000BD   FB           MOV     R3,A
   \   0000BE   85..82       MOV     DPL,?V0
   \   0000C1   85..83       MOV     DPH,?V1
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   F8           MOV     R0,A
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   F583         MOV     DPH,A
   \   0000CD   8882         MOV     DPL,R0
   \   0000CF   A3           INC     DPTR
   \   0000D0   EA           MOV     A,R2
   \   0000D1   F0           MOVX    @DPTR,A
   \   0000D2   A3           INC     DPTR
   \   0000D3   EB           MOV     A,R3
   \   0000D4   F0           MOVX    @DPTR,A
    462                pBuf += sizeof(uint16);
   \   0000D5   EE           MOV     A,R6
   \   0000D6   2402         ADD     A,#0x2
   \   0000D8   FE           MOV     R6,A
   \   0000D9   5001         JNC     ??MT_BuildEndpointDesc_3
   \   0000DB   0F           INC     R7
    463          
    464                /* AppDeviceId */
    465                epDesc->simpleDesc->AppDeviceId = BUILD_UINT16(pBuf[0],pBuf[1]);
   \                     ??MT_BuildEndpointDesc_3:
   \   0000DC   8E82         MOV     DPL,R6
   \   0000DE   8F83         MOV     DPH,R7
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   FA           MOV     R2,A
   \   0000E2   7B00         MOV     R3,#0x0
   \   0000E4   8E82         MOV     DPL,R6
   \   0000E6   8F83         MOV     DPH,R7
   \   0000E8   A3           INC     DPTR
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   F8           MOV     R0,A
   \   0000EB   7900         MOV     R1,#0x0
   \   0000ED   E4           CLR     A
   \   0000EE   C8           XCH     A,R0
   \   0000EF   F9           MOV     R1,A
   \   0000F0   EA           MOV     A,R2
   \   0000F1   28           ADD     A,R0
   \   0000F2   FA           MOV     R2,A
   \   0000F3   EB           MOV     A,R3
   \   0000F4   39           ADDC    A,R1
   \   0000F5   FB           MOV     R3,A
   \   0000F6   85..82       MOV     DPL,?V0
   \   0000F9   85..83       MOV     DPH,?V1
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   F8           MOV     R0,A
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   F583         MOV     DPH,A
   \   000105   8882         MOV     DPL,R0
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   EA           MOV     A,R2
   \   00010B   F0           MOVX    @DPTR,A
   \   00010C   A3           INC     DPTR
   \   00010D   EB           MOV     A,R3
   \   00010E   F0           MOVX    @DPTR,A
    466                pBuf += sizeof(uint16);
   \   00010F   EE           MOV     A,R6
   \   000110   2402         ADD     A,#0x2
   \   000112   FE           MOV     R6,A
   \   000113   5001         JNC     ??MT_BuildEndpointDesc_4
   \   000115   0F           INC     R7
    467          
    468                /* AppDevVer */
    469                epDesc->simpleDesc->AppDevVer = (*pBuf++) & AF_APP_DEV_VER_MASK ;
   \                     ??MT_BuildEndpointDesc_4:
   \   000116   8E82         MOV     DPL,R6
   \   000118   8F83         MOV     DPH,R7
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   540F         ANL     A,#0xf
   \   00011D   F8           MOV     R0,A
   \   00011E   8E82         MOV     DPL,R6
   \   000120   8F83         MOV     DPH,R7
   \   000122   A3           INC     DPTR
   \   000123   AE82         MOV     R6,DPL
   \   000125   AF83         MOV     R7,DPH
   \   000127   740F         MOV     A,#0xf
   \   000129   58           ANL     A,R0
   \   00012A   F9           MOV     R1,A
   \   00012B   85..82       MOV     DPL,?V0
   \   00012E   85..83       MOV     DPH,?V1
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   E0           MOVX    A,@DPTR
   \   000135   F8           MOV     R0,A
   \   000136   A3           INC     DPTR
   \   000137   E0           MOVX    A,@DPTR
   \   000138   F583         MOV     DPH,A
   \   00013A   8882         MOV     DPL,R0
   \   00013C   A3           INC     DPTR
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   E0           MOVX    A,@DPTR
   \   000142   54F0         ANL     A,#0xf0
   \   000144   49           ORL     A,R1
   \   000145   C0E0         PUSH    A
   \   000147   85..82       MOV     DPL,?V0
   \   00014A   85..83       MOV     DPH,?V1
   \   00014D   A3           INC     DPTR
   \   00014E   A3           INC     DPTR
   \   00014F   A3           INC     DPTR
   \   000150   E0           MOVX    A,@DPTR
   \   000151   F8           MOV     R0,A
   \   000152   A3           INC     DPTR
   \   000153   E0           MOVX    A,@DPTR
   \   000154   F583         MOV     DPH,A
   \   000156   8882         MOV     DPL,R0
   \   000158   A3           INC     DPTR
   \   000159   A3           INC     DPTR
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   A3           INC     DPTR
   \   00015D   D0E0         POP     A
   \   00015F   F0           MOVX    @DPTR,A
    470          
    471                /* LatencyReq */
    472                pBuf++;
   \   000160   8E82         MOV     DPL,R6
   \   000162   8F83         MOV     DPH,R7
   \   000164   A3           INC     DPTR
   \   000165   AE82         MOV     R6,DPL
   \   000167   AF83         MOV     R7,DPH
    473          
    474                /* AppNumInClusters */
    475                epDesc->simpleDesc->AppNumInClusters = *pBuf++;
   \   000169   8E82         MOV     DPL,R6
   \   00016B   8F83         MOV     DPH,R7
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   C0E0         PUSH    A
   \   000170   85..82       MOV     DPL,?V0
   \   000173   85..83       MOV     DPH,?V1
   \   000176   A3           INC     DPTR
   \   000177   A3           INC     DPTR
   \   000178   A3           INC     DPTR
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   F8           MOV     R0,A
   \   00017B   A3           INC     DPTR
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   C8           XCH     A,R0
   \   00017E   2406         ADD     A,#0x6
   \   000180   F582         MOV     DPL,A
   \   000182   C8           XCH     A,R0
   \   000183   3400         ADDC    A,#0x0
   \   000185   F583         MOV     DPH,A
   \   000187   D0E0         POP     A
   \   000189   F0           MOVX    @DPTR,A
   \   00018A   8E82         MOV     DPL,R6
   \   00018C   8F83         MOV     DPH,R7
   \   00018E   A3           INC     DPTR
   \   00018F   AE82         MOV     R6,DPL
   \   000191   AF83         MOV     R7,DPH
    476                if (epDesc->simpleDesc->AppNumInClusters)
   \   000193   85..82       MOV     DPL,?V0
   \   000196   85..83       MOV     DPH,?V1
   \   000199   A3           INC     DPTR
   \   00019A   A3           INC     DPTR
   \   00019B   A3           INC     DPTR
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   F8           MOV     R0,A
   \   00019E   A3           INC     DPTR
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   C8           XCH     A,R0
   \   0001A1   2406         ADD     A,#0x6
   \   0001A3   F582         MOV     DPL,A
   \   0001A5   C8           XCH     A,R0
   \   0001A6   3400         ADDC    A,#0x0
   \   0001A8   F583         MOV     DPH,A
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   7003         JNZ     $+5
   \   0001AD   02....       LJMP    ??MT_BuildEndpointDesc_5 & 0xFFFF
    477                {
    478                  epDesc->simpleDesc->pAppInClusterList = (uint16 *)
    479                            osal_mem_alloc((epDesc->simpleDesc->AppNumInClusters)*sizeof(uint16));
   \   0001B0                ; Setup parameters for call to function osal_mem_alloc
   \   0001B0   85..82       MOV     DPL,?V0
   \   0001B3   85..83       MOV     DPH,?V1
   \   0001B6   A3           INC     DPTR
   \   0001B7   A3           INC     DPTR
   \   0001B8   A3           INC     DPTR
   \   0001B9   E0           MOVX    A,@DPTR
   \   0001BA   F8           MOV     R0,A
   \   0001BB   A3           INC     DPTR
   \   0001BC   E0           MOVX    A,@DPTR
   \   0001BD   C8           XCH     A,R0
   \   0001BE   2406         ADD     A,#0x6
   \   0001C0   F582         MOV     DPL,A
   \   0001C2   C8           XCH     A,R0
   \   0001C3   3400         ADDC    A,#0x0
   \   0001C5   F583         MOV     DPH,A
   \   0001C7   E0           MOVX    A,@DPTR
   \   0001C8   FA           MOV     R2,A
   \   0001C9   7B00         MOV     R3,#0x0
   \   0001CB   EA           MOV     A,R2
   \   0001CC   75F002       MOV     B,#0x2
   \   0001CF   A4           MUL     AB
   \   0001D0   CA           XCH     A,R2
   \   0001D1   A8F0         MOV     R0,B
   \   0001D3   75F000       MOV     B,#0x0
   \   0001D6   A4           MUL     AB
   \   0001D7   28           ADD     A,R0
   \   0001D8   F8           MOV     R0,A
   \   0001D9   75F002       MOV     B,#0x2
   \   0001DC   EB           MOV     A,R3
   \   0001DD   A4           MUL     AB
   \   0001DE   28           ADD     A,R0
   \   0001DF   FB           MOV     R3,A
   \   0001E0   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0001E3   85..82       MOV     DPL,?V0
   \   0001E6   85..83       MOV     DPH,?V1
   \   0001E9   A3           INC     DPTR
   \   0001EA   A3           INC     DPTR
   \   0001EB   A3           INC     DPTR
   \   0001EC   E0           MOVX    A,@DPTR
   \   0001ED   F8           MOV     R0,A
   \   0001EE   A3           INC     DPTR
   \   0001EF   E0           MOVX    A,@DPTR
   \   0001F0   C8           XCH     A,R0
   \   0001F1   2407         ADD     A,#0x7
   \   0001F3   F582         MOV     DPL,A
   \   0001F5   C8           XCH     A,R0
   \   0001F6   3400         ADDC    A,#0x0
   \   0001F8   F583         MOV     DPH,A
   \   0001FA   EA           MOV     A,R2
   \   0001FB   F0           MOVX    @DPTR,A
   \   0001FC   A3           INC     DPTR
   \   0001FD   EB           MOV     A,R3
   \   0001FE   F0           MOVX    @DPTR,A
    480                  if ( epDesc->simpleDesc->pAppInClusterList )
   \   0001FF   85..82       MOV     DPL,?V0
   \   000202   85..83       MOV     DPH,?V1
   \   000205   A3           INC     DPTR
   \   000206   A3           INC     DPTR
   \   000207   A3           INC     DPTR
   \   000208   E0           MOVX    A,@DPTR
   \   000209   F8           MOV     R0,A
   \   00020A   A3           INC     DPTR
   \   00020B   E0           MOVX    A,@DPTR
   \   00020C   C8           XCH     A,R0
   \   00020D   2407         ADD     A,#0x7
   \   00020F   F582         MOV     DPL,A
   \   000211   C8           XCH     A,R0
   \   000212   3400         ADDC    A,#0x0
   \   000214   F583         MOV     DPH,A
   \   000216   E0           MOVX    A,@DPTR
   \   000217   F8           MOV     R0,A
   \   000218   A3           INC     DPTR
   \   000219   E0           MOVX    A,@DPTR
   \   00021A   F9           MOV     R1,A
   \   00021B   E8           MOV     A,R0
   \   00021C   49           ORL     A,R1
   \   00021D   7003         JNZ     $+5
   \   00021F   02....       LJMP    ??MT_BuildEndpointDesc_6 & 0xFFFF
    481                  {
    482                    for (i=0; i<(epDesc->simpleDesc->AppNumInClusters); i++)
   \   000222   75..00       MOV     ?V3,#0x0
   \                     ??MT_BuildEndpointDesc_7:
   \   000225   85..82       MOV     DPL,?V0
   \   000228   85..83       MOV     DPH,?V1
   \   00022B   A3           INC     DPTR
   \   00022C   A3           INC     DPTR
   \   00022D   A3           INC     DPTR
   \   00022E   E0           MOVX    A,@DPTR
   \   00022F   F8           MOV     R0,A
   \   000230   A3           INC     DPTR
   \   000231   E0           MOVX    A,@DPTR
   \   000232   C8           XCH     A,R0
   \   000233   2406         ADD     A,#0x6
   \   000235   F582         MOV     DPL,A
   \   000237   C8           XCH     A,R0
   \   000238   3400         ADDC    A,#0x0
   \   00023A   F583         MOV     DPH,A
   \   00023C   E0           MOVX    A,@DPTR
   \   00023D   F8           MOV     R0,A
   \   00023E   E5..         MOV     A,?V3
   \   000240   C3           CLR     C
   \   000241   98           SUBB    A,R0
   \   000242   5068         JNC     ??MT_BuildEndpointDesc_5
    483                    {
    484                      epDesc->simpleDesc->pAppInClusterList[i] = BUILD_UINT16(*pBuf, *(pBuf+1));
   \   000244   8E82         MOV     DPL,R6
   \   000246   8F83         MOV     DPH,R7
   \   000248   E0           MOVX    A,@DPTR
   \   000249   FA           MOV     R2,A
   \   00024A   7B00         MOV     R3,#0x0
   \   00024C   8E82         MOV     DPL,R6
   \   00024E   8F83         MOV     DPH,R7
   \   000250   A3           INC     DPTR
   \   000251   E0           MOVX    A,@DPTR
   \   000252   F8           MOV     R0,A
   \   000253   7900         MOV     R1,#0x0
   \   000255   E4           CLR     A
   \   000256   C8           XCH     A,R0
   \   000257   F9           MOV     R1,A
   \   000258   EA           MOV     A,R2
   \   000259   28           ADD     A,R0
   \   00025A   FC           MOV     R4,A
   \   00025B   EB           MOV     A,R3
   \   00025C   39           ADDC    A,R1
   \   00025D   FD           MOV     R5,A
   \   00025E   AA..         MOV     R2,?V3
   \   000260   7B00         MOV     R3,#0x0
   \   000262   EA           MOV     A,R2
   \   000263   75F002       MOV     B,#0x2
   \   000266   A4           MUL     AB
   \   000267   CA           XCH     A,R2
   \   000268   A8F0         MOV     R0,B
   \   00026A   75F000       MOV     B,#0x0
   \   00026D   A4           MUL     AB
   \   00026E   28           ADD     A,R0
   \   00026F   F8           MOV     R0,A
   \   000270   75F002       MOV     B,#0x2
   \   000273   EB           MOV     A,R3
   \   000274   A4           MUL     AB
   \   000275   28           ADD     A,R0
   \   000276   FB           MOV     R3,A
   \   000277   85..82       MOV     DPL,?V0
   \   00027A   85..83       MOV     DPH,?V1
   \   00027D   A3           INC     DPTR
   \   00027E   A3           INC     DPTR
   \   00027F   A3           INC     DPTR
   \   000280   E0           MOVX    A,@DPTR
   \   000281   F8           MOV     R0,A
   \   000282   A3           INC     DPTR
   \   000283   E0           MOVX    A,@DPTR
   \   000284   C8           XCH     A,R0
   \   000285   2407         ADD     A,#0x7
   \   000287   F582         MOV     DPL,A
   \   000289   C8           XCH     A,R0
   \   00028A   3400         ADDC    A,#0x0
   \   00028C   F583         MOV     DPH,A
   \   00028E   E0           MOVX    A,@DPTR
   \   00028F   2A           ADD     A,R2
   \   000290   F8           MOV     R0,A
   \   000291   A3           INC     DPTR
   \   000292   E0           MOVX    A,@DPTR
   \   000293   3B           ADDC    A,R3
   \   000294   8882         MOV     DPL,R0
   \   000296   F583         MOV     DPH,A
   \   000298   EC           MOV     A,R4
   \   000299   F0           MOVX    @DPTR,A
   \   00029A   A3           INC     DPTR
   \   00029B   ED           MOV     A,R5
   \   00029C   F0           MOVX    @DPTR,A
    485                      pBuf += 2;
   \   00029D   EE           MOV     A,R6
   \   00029E   2402         ADD     A,#0x2
   \   0002A0   FE           MOV     R6,A
   \   0002A1   5001         JNC     ??MT_BuildEndpointDesc_8
   \   0002A3   0F           INC     R7
    486                    }
   \                     ??MT_BuildEndpointDesc_8:
   \   0002A4   05..         INC     ?V3
   \   0002A6   02....       LJMP    ??MT_BuildEndpointDesc_7 & 0xFFFF
    487                  }
    488                  else
    489                  {
    490                    ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_6:
   \   0002A9   75..10       MOV     ?V2,#0x10
    491                  }
    492                }
    493          
    494                /* AppNumOutClusters */
    495                epDesc->simpleDesc->AppNumOutClusters = *pBuf++;
   \                     ??MT_BuildEndpointDesc_5:
   \   0002AC   8E82         MOV     DPL,R6
   \   0002AE   8F83         MOV     DPH,R7
   \   0002B0   E0           MOVX    A,@DPTR
   \   0002B1   C0E0         PUSH    A
   \   0002B3   85..82       MOV     DPL,?V0
   \   0002B6   85..83       MOV     DPH,?V1
   \   0002B9   A3           INC     DPTR
   \   0002BA   A3           INC     DPTR
   \   0002BB   A3           INC     DPTR
   \   0002BC   E0           MOVX    A,@DPTR
   \   0002BD   F8           MOV     R0,A
   \   0002BE   A3           INC     DPTR
   \   0002BF   E0           MOVX    A,@DPTR
   \   0002C0   C8           XCH     A,R0
   \   0002C1   2409         ADD     A,#0x9
   \   0002C3   F582         MOV     DPL,A
   \   0002C5   C8           XCH     A,R0
   \   0002C6   3400         ADDC    A,#0x0
   \   0002C8   F583         MOV     DPH,A
   \   0002CA   D0E0         POP     A
   \   0002CC   F0           MOVX    @DPTR,A
   \   0002CD   8E82         MOV     DPL,R6
   \   0002CF   8F83         MOV     DPH,R7
   \   0002D1   A3           INC     DPTR
   \   0002D2   AE82         MOV     R6,DPL
   \   0002D4   AF83         MOV     R7,DPH
    496                if (epDesc->simpleDesc->AppNumOutClusters)
   \   0002D6   85..82       MOV     DPL,?V0
   \   0002D9   85..83       MOV     DPH,?V1
   \   0002DC   A3           INC     DPTR
   \   0002DD   A3           INC     DPTR
   \   0002DE   A3           INC     DPTR
   \   0002DF   E0           MOVX    A,@DPTR
   \   0002E0   F8           MOV     R0,A
   \   0002E1   A3           INC     DPTR
   \   0002E2   E0           MOVX    A,@DPTR
   \   0002E3   C8           XCH     A,R0
   \   0002E4   2409         ADD     A,#0x9
   \   0002E6   F582         MOV     DPL,A
   \   0002E8   C8           XCH     A,R0
   \   0002E9   3400         ADDC    A,#0x0
   \   0002EB   F583         MOV     DPH,A
   \   0002ED   E0           MOVX    A,@DPTR
   \   0002EE   7003         JNZ     $+5
   \   0002F0   02....       LJMP    ??MT_BuildEndpointDesc_9 & 0xFFFF
    497                {
    498                  epDesc->simpleDesc->pAppOutClusterList = (uint16 *)
    499                                    osal_mem_alloc((epDesc->simpleDesc->AppNumOutClusters)*sizeof(uint16));
   \   0002F3                ; Setup parameters for call to function osal_mem_alloc
   \   0002F3   85..82       MOV     DPL,?V0
   \   0002F6   85..83       MOV     DPH,?V1
   \   0002F9   A3           INC     DPTR
   \   0002FA   A3           INC     DPTR
   \   0002FB   A3           INC     DPTR
   \   0002FC   E0           MOVX    A,@DPTR
   \   0002FD   F8           MOV     R0,A
   \   0002FE   A3           INC     DPTR
   \   0002FF   E0           MOVX    A,@DPTR
   \   000300   C8           XCH     A,R0
   \   000301   2409         ADD     A,#0x9
   \   000303   F582         MOV     DPL,A
   \   000305   C8           XCH     A,R0
   \   000306   3400         ADDC    A,#0x0
   \   000308   F583         MOV     DPH,A
   \   00030A   E0           MOVX    A,@DPTR
   \   00030B   FA           MOV     R2,A
   \   00030C   7B00         MOV     R3,#0x0
   \   00030E   EA           MOV     A,R2
   \   00030F   75F002       MOV     B,#0x2
   \   000312   A4           MUL     AB
   \   000313   CA           XCH     A,R2
   \   000314   A8F0         MOV     R0,B
   \   000316   75F000       MOV     B,#0x0
   \   000319   A4           MUL     AB
   \   00031A   28           ADD     A,R0
   \   00031B   F8           MOV     R0,A
   \   00031C   75F002       MOV     B,#0x2
   \   00031F   EB           MOV     A,R3
   \   000320   A4           MUL     AB
   \   000321   28           ADD     A,R0
   \   000322   FB           MOV     R3,A
   \   000323   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000326   85..82       MOV     DPL,?V0
   \   000329   85..83       MOV     DPH,?V1
   \   00032C   A3           INC     DPTR
   \   00032D   A3           INC     DPTR
   \   00032E   A3           INC     DPTR
   \   00032F   E0           MOVX    A,@DPTR
   \   000330   F8           MOV     R0,A
   \   000331   A3           INC     DPTR
   \   000332   E0           MOVX    A,@DPTR
   \   000333   C8           XCH     A,R0
   \   000334   240A         ADD     A,#0xa
   \   000336   F582         MOV     DPL,A
   \   000338   C8           XCH     A,R0
   \   000339   3400         ADDC    A,#0x0
   \   00033B   F583         MOV     DPH,A
   \   00033D   EA           MOV     A,R2
   \   00033E   F0           MOVX    @DPTR,A
   \   00033F   A3           INC     DPTR
   \   000340   EB           MOV     A,R3
   \   000341   F0           MOVX    @DPTR,A
    500                  if (epDesc->simpleDesc->pAppOutClusterList)
   \   000342   85..82       MOV     DPL,?V0
   \   000345   85..83       MOV     DPH,?V1
   \   000348   A3           INC     DPTR
   \   000349   A3           INC     DPTR
   \   00034A   A3           INC     DPTR
   \   00034B   E0           MOVX    A,@DPTR
   \   00034C   F8           MOV     R0,A
   \   00034D   A3           INC     DPTR
   \   00034E   E0           MOVX    A,@DPTR
   \   00034F   C8           XCH     A,R0
   \   000350   240A         ADD     A,#0xa
   \   000352   F582         MOV     DPL,A
   \   000354   C8           XCH     A,R0
   \   000355   3400         ADDC    A,#0x0
   \   000357   F583         MOV     DPH,A
   \   000359   E0           MOVX    A,@DPTR
   \   00035A   F8           MOV     R0,A
   \   00035B   A3           INC     DPTR
   \   00035C   E0           MOVX    A,@DPTR
   \   00035D   F9           MOV     R1,A
   \   00035E   E8           MOV     A,R0
   \   00035F   49           ORL     A,R1
   \   000360   7003         JNZ     $+5
   \   000362   02....       LJMP    ??MT_BuildEndpointDesc_10 & 0xFFFF
    501                  {
    502                    for (i=0; i<(epDesc->simpleDesc->AppNumOutClusters); i++)
   \   000365   75..00       MOV     ?V3,#0x0
   \                     ??MT_BuildEndpointDesc_11:
   \   000368   85..82       MOV     DPL,?V0
   \   00036B   85..83       MOV     DPH,?V1
   \   00036E   A3           INC     DPTR
   \   00036F   A3           INC     DPTR
   \   000370   A3           INC     DPTR
   \   000371   E0           MOVX    A,@DPTR
   \   000372   F8           MOV     R0,A
   \   000373   A3           INC     DPTR
   \   000374   E0           MOVX    A,@DPTR
   \   000375   C8           XCH     A,R0
   \   000376   2409         ADD     A,#0x9
   \   000378   F582         MOV     DPL,A
   \   00037A   C8           XCH     A,R0
   \   00037B   3400         ADDC    A,#0x0
   \   00037D   F583         MOV     DPH,A
   \   00037F   E0           MOVX    A,@DPTR
   \   000380   F8           MOV     R0,A
   \   000381   E5..         MOV     A,?V3
   \   000383   C3           CLR     C
   \   000384   98           SUBB    A,R0
   \   000385   5068         JNC     ??MT_BuildEndpointDesc_9
    503                    {
    504                      epDesc->simpleDesc->pAppOutClusterList[i] = BUILD_UINT16(*pBuf, *(pBuf+1));
   \   000387   8E82         MOV     DPL,R6
   \   000389   8F83         MOV     DPH,R7
   \   00038B   E0           MOVX    A,@DPTR
   \   00038C   FA           MOV     R2,A
   \   00038D   7B00         MOV     R3,#0x0
   \   00038F   8E82         MOV     DPL,R6
   \   000391   8F83         MOV     DPH,R7
   \   000393   A3           INC     DPTR
   \   000394   E0           MOVX    A,@DPTR
   \   000395   F8           MOV     R0,A
   \   000396   7900         MOV     R1,#0x0
   \   000398   E4           CLR     A
   \   000399   C8           XCH     A,R0
   \   00039A   F9           MOV     R1,A
   \   00039B   EA           MOV     A,R2
   \   00039C   28           ADD     A,R0
   \   00039D   FC           MOV     R4,A
   \   00039E   EB           MOV     A,R3
   \   00039F   39           ADDC    A,R1
   \   0003A0   FD           MOV     R5,A
   \   0003A1   AA..         MOV     R2,?V3
   \   0003A3   7B00         MOV     R3,#0x0
   \   0003A5   EA           MOV     A,R2
   \   0003A6   75F002       MOV     B,#0x2
   \   0003A9   A4           MUL     AB
   \   0003AA   CA           XCH     A,R2
   \   0003AB   A8F0         MOV     R0,B
   \   0003AD   75F000       MOV     B,#0x0
   \   0003B0   A4           MUL     AB
   \   0003B1   28           ADD     A,R0
   \   0003B2   F8           MOV     R0,A
   \   0003B3   75F002       MOV     B,#0x2
   \   0003B6   EB           MOV     A,R3
   \   0003B7   A4           MUL     AB
   \   0003B8   28           ADD     A,R0
   \   0003B9   FB           MOV     R3,A
   \   0003BA   85..82       MOV     DPL,?V0
   \   0003BD   85..83       MOV     DPH,?V1
   \   0003C0   A3           INC     DPTR
   \   0003C1   A3           INC     DPTR
   \   0003C2   A3           INC     DPTR
   \   0003C3   E0           MOVX    A,@DPTR
   \   0003C4   F8           MOV     R0,A
   \   0003C5   A3           INC     DPTR
   \   0003C6   E0           MOVX    A,@DPTR
   \   0003C7   C8           XCH     A,R0
   \   0003C8   240A         ADD     A,#0xa
   \   0003CA   F582         MOV     DPL,A
   \   0003CC   C8           XCH     A,R0
   \   0003CD   3400         ADDC    A,#0x0
   \   0003CF   F583         MOV     DPH,A
   \   0003D1   E0           MOVX    A,@DPTR
   \   0003D2   2A           ADD     A,R2
   \   0003D3   F8           MOV     R0,A
   \   0003D4   A3           INC     DPTR
   \   0003D5   E0           MOVX    A,@DPTR
   \   0003D6   3B           ADDC    A,R3
   \   0003D7   8882         MOV     DPL,R0
   \   0003D9   F583         MOV     DPH,A
   \   0003DB   EC           MOV     A,R4
   \   0003DC   F0           MOVX    @DPTR,A
   \   0003DD   A3           INC     DPTR
   \   0003DE   ED           MOV     A,R5
   \   0003DF   F0           MOVX    @DPTR,A
    505                      pBuf += 2;
   \   0003E0   EE           MOV     A,R6
   \   0003E1   2402         ADD     A,#0x2
   \   0003E3   FE           MOV     R6,A
   \   0003E4   5001         JNC     ??MT_BuildEndpointDesc_12
   \   0003E6   0F           INC     R7
    506                    }
   \                     ??MT_BuildEndpointDesc_12:
   \   0003E7   05..         INC     ?V3
   \   0003E9   02....       LJMP    ??MT_BuildEndpointDesc_11 & 0xFFFF
    507                  }
    508                  else
    509                  {
    510                    ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_10:
   \   0003EC   75..10       MOV     ?V2,#0x10
    511                  }
    512                }
    513          
    514                /* if any list cannot be allocated...free all */
    515                if ( ret == ZMemError )
   \                     ??MT_BuildEndpointDesc_9:
   \   0003EF   7410         MOV     A,#0x10
   \   0003F1   65..         XRL     A,?V2
   \   0003F3   6003         JZ      $+5
   \   0003F5   02....       LJMP    ??MT_BuildEndpointDesc_1 & 0xFFFF
    516                {
    517                  if (epDesc->simpleDesc->pAppInClusterList)
   \   0003F8   85..82       MOV     DPL,?V0
   \   0003FB   85..83       MOV     DPH,?V1
   \   0003FE   A3           INC     DPTR
   \   0003FF   A3           INC     DPTR
   \   000400   A3           INC     DPTR
   \   000401   E0           MOVX    A,@DPTR
   \   000402   F8           MOV     R0,A
   \   000403   A3           INC     DPTR
   \   000404   E0           MOVX    A,@DPTR
   \   000405   C8           XCH     A,R0
   \   000406   2407         ADD     A,#0x7
   \   000408   F582         MOV     DPL,A
   \   00040A   C8           XCH     A,R0
   \   00040B   3400         ADDC    A,#0x0
   \   00040D   F583         MOV     DPH,A
   \   00040F   E0           MOVX    A,@DPTR
   \   000410   F8           MOV     R0,A
   \   000411   A3           INC     DPTR
   \   000412   E0           MOVX    A,@DPTR
   \   000413   F9           MOV     R1,A
   \   000414   E8           MOV     A,R0
   \   000415   49           ORL     A,R1
   \   000416   601F         JZ      ??MT_BuildEndpointDesc_13
    518                  {
    519                    osal_mem_free(epDesc->simpleDesc->pAppInClusterList);
   \   000418                ; Setup parameters for call to function osal_mem_free
   \   000418   85..82       MOV     DPL,?V0
   \   00041B   85..83       MOV     DPH,?V1
   \   00041E   A3           INC     DPTR
   \   00041F   A3           INC     DPTR
   \   000420   A3           INC     DPTR
   \   000421   E0           MOVX    A,@DPTR
   \   000422   F8           MOV     R0,A
   \   000423   A3           INC     DPTR
   \   000424   E0           MOVX    A,@DPTR
   \   000425   C8           XCH     A,R0
   \   000426   2407         ADD     A,#0x7
   \   000428   F582         MOV     DPL,A
   \   00042A   C8           XCH     A,R0
   \   00042B   3400         ADDC    A,#0x0
   \   00042D   F583         MOV     DPH,A
   \   00042F   E0           MOVX    A,@DPTR
   \   000430   FA           MOV     R2,A
   \   000431   A3           INC     DPTR
   \   000432   E0           MOVX    A,@DPTR
   \   000433   FB           MOV     R3,A
   \   000434   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    520                  }
    521          
    522                  if (epDesc->simpleDesc->AppNumOutClusters)
   \                     ??MT_BuildEndpointDesc_13:
   \   000437   85..82       MOV     DPL,?V0
   \   00043A   85..83       MOV     DPH,?V1
   \   00043D   A3           INC     DPTR
   \   00043E   A3           INC     DPTR
   \   00043F   A3           INC     DPTR
   \   000440   E0           MOVX    A,@DPTR
   \   000441   F8           MOV     R0,A
   \   000442   A3           INC     DPTR
   \   000443   E0           MOVX    A,@DPTR
   \   000444   C8           XCH     A,R0
   \   000445   2409         ADD     A,#0x9
   \   000447   F582         MOV     DPL,A
   \   000449   C8           XCH     A,R0
   \   00044A   3400         ADDC    A,#0x0
   \   00044C   F583         MOV     DPH,A
   \   00044E   E0           MOVX    A,@DPTR
   \   00044F   601F         JZ      ??MT_BuildEndpointDesc_14
    523                  {
    524                    osal_mem_free(epDesc->simpleDesc->pAppOutClusterList);
   \   000451                ; Setup parameters for call to function osal_mem_free
   \   000451   85..82       MOV     DPL,?V0
   \   000454   85..83       MOV     DPH,?V1
   \   000457   A3           INC     DPTR
   \   000458   A3           INC     DPTR
   \   000459   A3           INC     DPTR
   \   00045A   E0           MOVX    A,@DPTR
   \   00045B   F8           MOV     R0,A
   \   00045C   A3           INC     DPTR
   \   00045D   E0           MOVX    A,@DPTR
   \   00045E   C8           XCH     A,R0
   \   00045F   240A         ADD     A,#0xa
   \   000461   F582         MOV     DPL,A
   \   000463   C8           XCH     A,R0
   \   000464   3400         ADDC    A,#0x0
   \   000466   F583         MOV     DPH,A
   \   000468   E0           MOVX    A,@DPTR
   \   000469   FA           MOV     R2,A
   \   00046A   A3           INC     DPTR
   \   00046B   E0           MOVX    A,@DPTR
   \   00046C   FB           MOV     R3,A
   \   00046D   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    525                  }
    526          
    527                  osal_mem_free(epDesc->simpleDesc);
   \                     ??MT_BuildEndpointDesc_14:
   \   000470                ; Setup parameters for call to function osal_mem_free
   \   000470   85..82       MOV     DPL,?V0
   \   000473   85..83       MOV     DPH,?V1
   \   000476   A3           INC     DPTR
   \   000477   A3           INC     DPTR
   \   000478   A3           INC     DPTR
   \   000479   E0           MOVX    A,@DPTR
   \   00047A   FA           MOV     R2,A
   \   00047B   A3           INC     DPTR
   \   00047C   E0           MOVX    A,@DPTR
   \   00047D   FB           MOV     R3,A
   \   00047E   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   000481   8003         SJMP    ??MT_BuildEndpointDesc_1
    528                }
    529              }
    530              else
    531              {
    532                ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_2:
   \   000483   75..10       MOV     ?V2,#0x10
    533              }
    534            }
    535          
    536            return ret;
   \                     ??MT_BuildEndpointDesc_1:
   \   000486   A9..         MOV     R1,?V2
   \   000488   7F08         MOV     R7,#0x8
   \   00048A   02....       LJMP    ?BANKED_LEAVE_XDATA
    537          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_BuildSPIMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_BuildSPIMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_BuildAndSendZToolResponse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_BuildAndSendZToolResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ProcessIncoming?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MTProcessAppRspMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MTProcessAppRspMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ReverseBytes?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ReverseBytes

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_Word2Buf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_Word2Buf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_BuildEndpointDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_BuildEndpointDesc
    538          #endif
    539          /***************************************************************************************************
    540          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   MTProcessAppRspMsg
        0      9   -> MT_BuildAndSendZToolResponse
      0     31   MT_BuildAndSendZToolResponse
        0     18   -> MT_BuildSPIMsg
        0     16   -> MT_TransportAlloc
        0     16   -> MT_TransportSend
      1     16   MT_BuildEndpointDesc
        0     16   -> afFindEndPointDesc
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
      1     37   MT_BuildSPIMsg
        0     19   -> osal_memcpy
      0      9   MT_Init
        0      9   -> MT_SysResetInd
      1     13   MT_ProcessIncoming
        0     13   -> MT_BuildAndSendZToolResponse
      1      9   MT_ReverseBytes
      1      9   MT_Word2Buf


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??MTProcessAppRspMsg?relay
       6  ??MT_BuildAndSendZToolResponse?relay
       6  ??MT_BuildEndpointDesc?relay
       6  ??MT_BuildSPIMsg?relay
       6  ??MT_Init?relay
       6  ??MT_ProcessIncoming?relay
       6  ??MT_ReverseBytes?relay
       6  ??MT_Word2Buf?relay
      29  MTProcessAppRspMsg
      81  MT_BuildAndSendZToolResponse
    1165  MT_BuildEndpointDesc
     128  MT_BuildSPIMsg
      32  MT_Init
     235  MT_ProcessIncoming
      94  MT_ReverseBytes
       1  MT_TaskID
      87  MT_Word2Buf
       1  debugCompId
       1  debugThreshold
      22  mtProcessIncoming
       2  save_cmd

 
 1 851 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
    27 bytes in segment XDATA_Z
 
 1 899 bytes of CODE  memory
    27 bytes of XDATA memory

Errors: none
Warnings: none
