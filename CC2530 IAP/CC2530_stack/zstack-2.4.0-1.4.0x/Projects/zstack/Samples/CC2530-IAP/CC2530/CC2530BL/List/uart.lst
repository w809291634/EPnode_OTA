###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:19
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  near
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\Source\drive\uart.c
#    Command line       =  
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\Source\drive\uart.c"
#        -D HAL_SB_BOOT_CODE -D HAL_UART=TRUE -D HAL_UART_DMA=0 -D
#        HAL_UART_ISR=1 -D HAL_UART_ISR_RX_MAX=254 -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\CC2530BL\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\CC2530BL\List\"
#        --diag_suppress Pe001,Pa010,Pa050 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\CC2530BL\Obj\"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=near --calling_convention=xdata_reentrant
#        --place_constants=data --nr_virtual_regs 8 -I
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\Source\drive\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\Source\iap\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\Source\shell\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\Source\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\..\..\..\..\Components\hal\target\_COMMON\CC2530\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\..\..\..\..\Components\services\saddr\"
#        -Ohz
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\CC2530BL\List\uart.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\CC2530BL\Obj\uart.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\Source\drive\uart.c
      1          #include "uart.h"

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc1
   \   unsigned char volatile __sfr U0DBUF
   \                     U0DBUF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
      2          #include "math.h"
      3          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      4          shellinput_t shell_1;
   \                     shell_1:
   \   000000                DS 310
   \   000136                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      5          unsigned char usart0_mode;
   \                     usart0_mode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
      6            
      7          //功能：uart0初始化，复用到位置1
      8          //参数：baud:波特率
      9          // 返回：无

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     10          void shell_hw_init(double baud)
   \                     shell_hw_init:
     11          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     12          	P0SEL |=  0x0C;                 							//初始化UART0端口
   \   000000   43F30C       ORL     0xf3,#0xc
     13          	PERCFG&= ~0x01;                 							//选择UART0为可选位置一
   \   000003   53F1FE       ANL     0xf1,#0xfe
     14          	P0DIR &= ~(1<<2);                 					  //P02,IN
   \   000006   53FDFB       ANL     0xfd,#0xfb
     15          	P0DIR |= (1<<3);                 							//PO3,OUT
   \   000009   43FD08       ORL     0xfd,#0x8
     16          	P2DIR &= ~0xC0;                 							//P0优先作为串口0
   \   00000C   53FF3F       ANL     0xff,#0x3f
     17          	
     18          	U0CSR = 0xC0;                   							//设置为UART模式,而且使能接受器
   \   00000F   7586C0       MOV     0x86,#-0x40
     19            
     20            // 38400 U0GCR = 10; U0BAUD= 58;
     21          	U0GCR = 10;                  
   \   000012   75C50A       MOV     0xc5,#0xa
     22          	U0BAUD = 58;                  						    //设置波特率
   \   000015   75C23A       MOV     0xc2,#0x3a
     23          }
   \   000018   22           RET
   \   000019                REQUIRE P0SEL
   \   000019                REQUIRE PERCFG
   \   000019                REQUIRE P0DIR
   \   000019                REQUIRE P2DIR
   \   000019                REQUIRE U0CSR
   \   000019                REQUIRE U0GCR
   \   000019                REQUIRE U0BAUD
     24          
     25          // 复位状态

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     26          void shell_hw_uninit(void)
   \                     shell_hw_uninit:
     27          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     28            P0SEL = 0x00;
   \   000000   75F300       MOV     0xf3,#0x0
     29            P0DIR = 0x00;
   \   000003   75FD00       MOV     0xfd,#0x0
     30            P2DIR = 0x00;
   \   000006   75FF00       MOV     0xff,#0x0
     31            PERCFG = 0x00; 
   \   000009   75F100       MOV     0xf1,#0x0
     32          	U0CSR = 0x00;                  						
   \   00000C   758600       MOV     0x86,#0x0
     33          	U0GCR = 0x02;                  
   \   00000F   75C502       MOV     0xc5,#0x2
     34          	U0BAUD = 0x00; 
   \   000012   75C200       MOV     0xc2,#0x0
     35          }
   \   000015   22           RET
   \   000016                REQUIRE P0SEL
   \   000016                REQUIRE P0DIR
   \   000016                REQUIRE P2DIR
   \   000016                REQUIRE PERCFG
   \   000016                REQUIRE U0CSR
   \   000016                REQUIRE U0GCR
   \   000016                REQUIRE U0BAUD
     36          
     37          // 发送字符

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     38          void Uart0_Send_char(unsigned char ch)
   \                     Uart0_Send_char:
     39          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     40          	U0DBUF = ch;
   \   000000   89C1         MOV     0xc1,R1
     41          	while(UTX0IF == 0);
   \                     ??Uart0_Send_char_0:
   \   000002   A2E9         MOV     C,0xe8.1
   \   000004   50FC         JNC     ??Uart0_Send_char_0
     42          	UTX0IF = 0;
   \   000006   C2E9         CLR     0xe8.1
     43          }
   \   000008   22           RET
   \   000009                REQUIRE U0DBUF
   \   000009                REQUIRE _A_IRCON2
     44          
     45          // 发送字符串

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     46          void Uart0_Send_LenString(const char *Data,unsigned short len)
   \                     Uart0_Send_LenString:
     47          {  
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   8006         SJMP    ??Uart0_Send_LenString_0
     48          	while (len--)
     49          	{
     50          		Uart0_Send_char(*Data++);
   \                     ??Uart0_Send_LenString_1:
   \   00000F                ; Setup parameters for call to function Uart0_Send_char
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   Uart0_Send_char
   \   000014   A3           INC     DPTR
     51          	}
   \                     ??Uart0_Send_LenString_0:
   \   000015   EE           MOV     A,R6
   \   000016   F8           MOV     R0,A
   \   000017   EF           MOV     A,R7
   \   000018   F9           MOV     R1,A
   \   000019   E8           MOV     A,R0
   \   00001A   24FF         ADD     A,#-0x1
   \   00001C   1E           DEC     R6
   \   00001D   E9           MOV     A,R1
   \   00001E   34FF         ADDC    A,#-0x1
   \   000020   FF           MOV     R7,A
   \   000021   E8           MOV     A,R0
   \   000022   49           ORL     A,R1
   \   000023   70EA         JNZ     ??Uart0_Send_LenString_1
     52          }
   \   000025                REQUIRE ?Subroutine0
   \   000025                ; // Fall through to label ?Subroutine0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?FUNC_LEAVE_XDATA
     53          
     54          // 使用查询法读取串口数据
     55          // boot程序建议不要使用中断法，可能APP无法使用串口中断 

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     56          int usart0_getchar(uint8_t* data)
   \                     usart0_getchar:
     57          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     58            if(U0CSR & 0x04)
   \   000004   E586         MOV     A,0x86
   \   000006   A2E2         MOV     C,0xE0 /* A   */.2
   \   000008   500B         JNC     ??usart0_getchar_0
     59            {
     60              *data = U0DBUF;     // 读取接收寄存器的值
   \   00000A   E5C1         MOV     A,0xc1
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   F0           MOVX    @DPTR,A
     61              return 1;
   \   000011   7A01         MOV     R2,#0x1
   \   000013   8002         SJMP    ??usart0_getchar_1
     62            }
     63            return 0;
   \                     ??usart0_getchar_0:
   \   000015   7A00         MOV     R2,#0x0
   \                     ??usart0_getchar_1:
   \   000017   7B00         MOV     R3,#0x0
   \   000019   D083         POP     DPH
   \   00001B   D082         POP     DPL
   \   00001D   22           RET
   \   00001E                REQUIRE U0CSR
   \   00001E                REQUIRE U0DBUF
     64          }
     65          
     66          // shell控制台获取输入数据

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     67          void shell_app_cycle(void)
   \                     shell_app_cycle:
     68          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
     69            char data;
     70            char flag=0x1B;             // 方向键的特殊字符
     71            static char buf[3]={0};
     72            
     73            if(!usart0_getchar((uint8*)&data))return;
   \   00000A                ; Setup parameters for call to function usart0_getchar
   \   00000A   AA..         MOV     R2,?XSP + 0
   \   00000C   AB..         MOV     R3,?XSP + 1
   \   00000E   12....       LCALL   usart0_getchar
   \   000011   8B..         MOV     ?V1,R3
   \   000013   EA           MOV     A,R2
   \   000014   45..         ORL     A,?V1
   \   000016   7003         JNZ     $+5
   \   000018   02....       LJMP    ??CrossCallReturnLabel_5
     74              
     75            /* 数据处理 */
     76            if(data==flag){
   \   00001B   85..82       MOV     DPL,?XSP + 0
   \   00001E   85..83       MOV     DPH,?XSP + 1
   \   000021   E0           MOVX    A,@DPTR
   \   000022   641B         XRL     A,#0x1b
   \   000024   702F         JNZ     ??shell_app_cycle_0
     77              memset(buf,0,3);
   \   000026                ; Setup parameters for call to function memset
   \   000026   75..03       MOV     ?V0,#0x3
   \   000029   75..00       MOV     ?V1,#0x0
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   7C00         MOV     R4,#0x0
   \   000033   7D00         MOV     R5,#0x0
   \   000035   7A..         MOV     R2,#??buf & 0xff
   \   000037   7B..         MOV     R3,#(??buf >> 8) & 0xff
   \   000039   12....       LCALL   memset
   \   00003C   7402         MOV     A,#0x2
   \   00003E   12....       LCALL   ?DEALLOC_XSTACK8
     78              buf[0]=flag;
   \   000041   90....       MOV     DPTR,#??buf
   \   000044   741B         MOV     A,#0x1b
   \   000046   F0           MOVX    @DPTR,A
     79            }
     80            // 处理 上下左右方向键
     81            if(buf[0]==flag){
     82              if(data==flag)return;     // 已经接收，可以丢弃
   \   000047   85..82       MOV     DPL,?XSP + 0
   \   00004A   85..83       MOV     DPH,?XSP + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   641B         XRL     A,#0x1b
   \   000050   700B         JNZ     ??shell_app_cycle_1
   \   000052   02....       LJMP    ??CrossCallReturnLabel_5
   \                     ??shell_app_cycle_0:
   \   000055   90....       MOV     DPTR,#??buf
   \   000058   E0           MOVX    A,@DPTR
   \   000059   641B         XRL     A,#0x1b
   \   00005B   706C         JNZ     ??shell_app_cycle_2
     83              strncat(buf,&data,1);
   \                     ??shell_app_cycle_1:
   \   00005D                ; Setup parameters for call to function strncat
   \   00005D   75..01       MOV     ?V0,#0x1
   \   000060   75..00       MOV     ?V1,#0x0
   \   000063   78..         MOV     R0,#?V0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   7402         MOV     A,#0x2
   \   00006A   12....       LCALL   ?XSTACK_DISP102_8
   \   00006D   7A..         MOV     R2,#??buf & 0xff
   \   00006F   7B..         MOV     R3,#(??buf >> 8) & 0xff
   \   000071   12....       LCALL   strncat
   \   000074   7402         MOV     A,#0x2
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
     84              if(strlen(buf)>2){
   \   000079                ; Setup parameters for call to function strlen
   \   000079   12....       LCALL   strlen
   \   00007C   C3           CLR     C
   \   00007D   EA           MOV     A,R2
   \   00007E   9403         SUBB    A,#0x3
   \   000080   EB           MOV     A,R3
   \   000081   9400         SUBB    A,#0x0
   \   000083   4072         JC      ??CrossCallReturnLabel_5
     85                shell_input(&shell_1, buf, 3);
   \   000085   90....       MOV     DPTR,#shell_1
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F8           MOV     R0,A
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F9           MOV     R1,A
   \   00008D   E8           MOV     A,R0
   \   00008E   49           ORL     A,R1
   \   00008F   601E         JZ      ??CrossCallReturnLabel_4
   \   000091   A3           INC     DPTR
   \   000092   12....       LCALL   ??Subroutine3_0
   \                     ??CrossCallReturnLabel_2:
   \   000095                ; Setup parameters for indirect call
   \   000095   75..03       MOV     ?V0,#0x3
   \   000098   78..         MOV     R0,#?V0
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009D   7C..         MOV     R4,#??buf & 0xff
   \   00009F   7D..         MOV     R5,#(??buf >> 8) & 0xff
   \   0000A1   12....       LCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_0:
   \   0000A4   12....       LCALL   ?CALL_IND
   \   0000A7   7402         MOV     A,#0x2
   \   0000A9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AC   12....       LCALL   ?Subroutine1
     86                memset(buf,0,3);
   \                     ??CrossCallReturnLabel_4:
   \   0000AF                ; Setup parameters for call to function memset
   \   0000AF   75..03       MOV     ?V0,#0x3
   \   0000B2   78..         MOV     R0,#?V0
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B7   7C00         MOV     R4,#0x0
   \   0000B9   7D00         MOV     R5,#0x0
   \   0000BB   7A..         MOV     R2,#??buf & 0xff
   \   0000BD   7B..         MOV     R3,#(??buf >> 8) & 0xff
   \   0000BF   12....       LCALL   memset
   \   0000C2   7402         MOV     A,#0x2
   \   0000C4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C7   802E         SJMP    ??CrossCallReturnLabel_5
     87              } 
     88            }
     89            // 处理字符
     90            else shell_input(&shell_1, &data, 1);
   \                     ??shell_app_cycle_2:
   \   0000C9   90....       MOV     DPTR,#shell_1
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   F8           MOV     R0,A
   \   0000CE   A3           INC     DPTR
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   F9           MOV     R1,A
   \   0000D1   E8           MOV     A,R0
   \   0000D2   49           ORL     A,R1
   \   0000D3   6022         JZ      ??CrossCallReturnLabel_5
   \   0000D5   A3           INC     DPTR
   \   0000D6   12....       LCALL   ??Subroutine3_0
   \                     ??CrossCallReturnLabel_3:
   \   0000D9                ; Setup parameters for indirect call
   \   0000D9   75..01       MOV     ?V0,#0x1
   \   0000DC   75..00       MOV     ?V1,#0x0
   \   0000DF   78..         MOV     R0,#?V0
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E4   7402         MOV     A,#0x2
   \   0000E6   12....       LCALL   ?XSTACK_DISP102_8
   \   0000E9   12....       LCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_1:
   \   0000EC   12....       LCALL   ?CALL_IND
   \   0000EF   7402         MOV     A,#0x2
   \   0000F1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F4   12....       LCALL   ?Subroutine1
     91          }
   \                     ??CrossCallReturnLabel_5:
   \   0000F7   7401         MOV     A,#0x1
   \   0000F9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FC   7F02         MOV     R7,#0x2
   \   0000FE   02....       LJMP    ?FUNC_LEAVE_XDATA

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7A..         MOV     R2,#shell_1 & 0xff
   \   000002   7B..         MOV     R3,#(shell_1 >> 8) & 0xff
   \   000004   90....       MOV     DPTR,#shell_1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F583         MOV     DPH,A
   \   00000D   8882         MOV     DPL,R0
   \   00000F   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   90....       MOV     DPTR,#default_puts
   \   000003                REQUIRE ??Subroutine3_0
   \   000003                ; // Fall through to label ??Subroutine3_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   90....       MOV     DPTR,#current_puts
   \   000008   E8           MOV     A,R0
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   E9           MOV     A,R1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??buf:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z
     92          
     93          // 适配printf函数

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     94          __near_func int putchar(int c)
   \                     putchar:
     95          {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     96              Uart0_Send_char(c);
   \   000009                ; Setup parameters for call to function Uart0_Send_char
   \   000009   EE           MOV     A,R6
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   Uart0_Send_char
     97              return(c);
   \   00000E   EE           MOV     A,R6
   \   00000F   FA           MOV     R2,A
   \   000010   EF           MOV     A,R7
   \   000011   FB           MOV     R3,A
   \   000012   02....       LJMP    ?Subroutine0
     98          }

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      8   Uart0_Send_LenString
        0      8   -> Uart0_Send_char
      0      8   Uart0_Send_char
      0      8   putchar
        0      8   -> Uart0_Send_char
      0     12   shell_app_cycle
        0     12   -> memset
        0     10   -> strlen
        0     12   -> strncat
        0     10   -> usart0_getchar
      0      0   shell_hw_init
      0      0   shell_hw_uninit
      3     10   usart0_getchar


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  ??Subroutine3_0
       5  ?Subroutine0
       3  ?Subroutine1
      16  ?Subroutine2
       1  P0DIR
       1  P0SEL
       1  P2DIR
       1  PERCFG
       1  U0BAUD
       1  U0CSR
       1  U0DBUF
       1  U0GCR
      37  Uart0_Send_LenString
       9  Uart0_Send_char
       1  _A_IRCON2
       3  buf
      21  putchar
     310  shell_1
     257  shell_app_cycle
      25  shell_hw_init
      22  shell_hw_uninit
      30  usart0_getchar
       1  usart0_mode

 
 439 bytes in segment NEAR_CODE
   9 bytes in segment SFR_AN
 314 bytes in segment XDATA_Z
 
 439 bytes of CODE  memory
   0 bytes of DATA  memory (+ 9 bytes shared)
 314 bytes of XDATA memory

Errors: none
Warnings: none
