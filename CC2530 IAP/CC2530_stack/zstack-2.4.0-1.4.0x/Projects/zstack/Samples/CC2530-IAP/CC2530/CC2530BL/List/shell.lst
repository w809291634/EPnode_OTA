###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                07/Jul/2023  16:40:19
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  near
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\Source\shell\shell.c
#    Command line       =  
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\Source\shell\shell.c"
#        -D HAL_SB_BOOT_CODE -D HAL_UART=TRUE -D HAL_UART_DMA=0 -D
#        HAL_UART_ISR=1 -D HAL_UART_ISR_RX_MAX=254 -lC
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\CC2530BL\List\"
#        -lA "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\CC2530BL\List\"
#        --diag_suppress Pe001,Pa010,Pa050 -o "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\CC2530BL\Obj\"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=near --calling_convention=xdata_reentrant
#        --place_constants=data --nr_virtual_regs 8 -I
#        "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\Source\drive\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\Source\iap\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\Source\shell\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\Source\sys\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\Source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\source\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\..\common\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\..\..\ZMain\TI2530DB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\..\..\..\..\Components\hal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\..\..\..\..\Components\hal\target\_COMMON\CC2530\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\..\..\..\..\Components\osal\include\"
#        -I "I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\..\..\..\..\..\Components\services\saddr\"
#        -Ohz
#    List file          =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\CC2530BL\List\shell.lst
#    Object file        =  
#        I:\1_git_code\EPnode_OTA\CC2530
#        IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\CC2530\CC2530BL\Obj\shell.r51
#
###############################################################################

I:\1_git_code\EPnode_OTA\CC2530 IAP\CC2530_stack\zstack-2.4.0-1.4.0x\Projects\zstack\Samples\CC2530-IAP\Source\shell\shell.c
      1          /**
      2            ******************************************************************************
      3            * @file           shell.c
      4            * @author         古么宁
      5            * @brief          shell 命令解释器，支持  TAB 键命令补全，上下左右箭头 ，BACKSPACE回删
      6            * @note
      7            * <pre>
      8            * 使用步骤:
      9            *    0.初始化硬件部分。
     10            *    1.编写硬件对应的void puts(char * buf , uint16_t len) 发送函数。
     11            *    2.shell_init(sign,puts) 初始化输入标志和默认输出。
     12            *    3.新建一个  shellinput_t shellx , 初始化输出 shell_input_init(&shellx,puts,...);
     13            *    4.接收到一包数据后，调用 shell_input(shellx,buf,len)
     14            *    *.  需要注册命令则调用宏 shell_register_command 进行注册。
     15            *    *.. shell_register_confirm() 可注册带选项命令([Y/N]选项)
     16            * </pre>
     17            ******************************************************************************
     18            *
     19            * COPYRIGHT(c) 2019 GoodMorning
     20            *
     21            ******************************************************************************
     22            */
     23          /* Includes ---------------------------------------------------*/
     24          #include <string.h>
     25          #include <stdarg.h>
     26          #include <stdio.h>
     27          #include "shell.h"
     28          #include "containerof.h"
     29          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     30          fmt_puts_t current_puts = NULL;
   \                     current_puts:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     31          fmt_puts_t default_puts = NULL;
   \                     default_puts:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     32          
     33          /* Private types ------------------------------------------------------------*/
     34          
     35          union uncmd {
     36          	struct {// 命令号分为以下五个部分  
     37          		uint32_t CRC2      : 8;
     38          		uint32_t CRC1      : 8;///< 低十六位为两个 crc 校验码
     39          		uint32_t Sum       : 5;///< 命令字符的总和
     40          		uint32_t Len       : 5;///< 命令字符的长度，5 bit ，即命令长度不能超过31个字符
     41          		uint32_t FirstChar : 6;///< 命令字符的第一个字符
     42          	}part;
     43          	uint32_t ID;               ///< 由此合并为 32 位的命令码
     44          };
     45          
     46          /* Private macro ------------------------------------------------------------*/
     47          
     48          #define VERSION      "V2.0.4"
     49          
     50          #if USE_AVL_TREE 
     51          	#define NEXT(x)          avl_next(x)
     52          	#define FIRST(root)      avl_first(root)
     53          	#define ROOT(root)       ((root)->avl_node)
     54          #else 
     55          	#define NEXT(x)          ((x)->next)
     56          	#define FIRST(root)      ((root)->next)
     57          	#define ROOT(root)       ((root)->next)
     58          #endif
     59          
     60          /* Private variables --------------------------------------------------------*/
     61          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     62          static const  unsigned char F_CRC8_Table[256] = {//正序,高位先行 x^8+x^5+x^4+1
   \                     F_CRC8_Table:
   \   000000                DS 256
   \   000100                REQUIRE `?<Initializer for F_CRC8_Table>`
   \   000100                REQUIRE __INIT_XDATA_I
     63          	0x00, 0x31, 0x62, 0x53, 0xc4, 0xf5, 0xa6, 0x97, 0xb9, 0x88, 0xdb, 0xea, 0x7d, 0x4c, 0x1f, 0x2e,
     64          	0x43, 0x72, 0x21, 0x10, 0x87, 0xb6, 0xe5, 0xd4, 0xfa, 0xcb, 0x98, 0xa9, 0x3e, 0x0f, 0x5c, 0x6d,
     65          	0x86, 0xb7, 0xe4, 0xd5, 0x42, 0x73, 0x20, 0x11, 0x3f, 0x0e, 0x5d, 0x6c, 0xfb, 0xca, 0x99, 0xa8,
     66          	0xc5, 0xf4, 0xa7, 0x96, 0x01, 0x30, 0x63, 0x52, 0x7c, 0x4d, 0x1e, 0x2f, 0xb8, 0x89, 0xda, 0xeb,
     67          	0x3d, 0x0c, 0x5f, 0x6e, 0xf9, 0xc8, 0x9b, 0xaa, 0x84, 0xb5, 0xe6, 0xd7, 0x40, 0x71, 0x22, 0x13,
     68          	0x7e, 0x4f, 0x1c, 0x2d, 0xba, 0x8b, 0xd8, 0xe9, 0xc7, 0xf6, 0xa5, 0x94, 0x03, 0x32, 0x61, 0x50,
     69          	0xbb, 0x8a, 0xd9, 0xe8, 0x7f, 0x4e, 0x1d, 0x2c, 0x02, 0x33, 0x60, 0x51, 0xc6, 0xf7, 0xa4, 0x95,
     70          	0xf8, 0xc9, 0x9a, 0xab, 0x3c, 0x0d, 0x5e, 0x6f, 0x41, 0x70, 0x23, 0x12, 0x85, 0xb4, 0xe7, 0xd6,
     71          	0x7a, 0x4b, 0x18, 0x29, 0xbe, 0x8f, 0xdc, 0xed, 0xc3, 0xf2, 0xa1, 0x90, 0x07, 0x36, 0x65, 0x54,
     72          	0x39, 0x08, 0x5b, 0x6a, 0xfd, 0xcc, 0x9f, 0xae, 0x80, 0xb1, 0xe2, 0xd3, 0x44, 0x75, 0x26, 0x17,
     73          	0xfc, 0xcd, 0x9e, 0xaf, 0x38, 0x09, 0x5a, 0x6b, 0x45, 0x74, 0x27, 0x16, 0x81, 0xb0, 0xe3, 0xd2,
     74          	0xbf, 0x8e, 0xdd, 0xec, 0x7b, 0x4a, 0x19, 0x28, 0x06, 0x37, 0x64, 0x55, 0xc2, 0xf3, 0xa0, 0x91,
     75          	0x47, 0x76, 0x25, 0x14, 0x83, 0xb2, 0xe1, 0xd0, 0xfe, 0xcf, 0x9c, 0xad, 0x3a, 0x0b, 0x58, 0x69,
     76          	0x04, 0x35, 0x66, 0x57, 0xc0, 0xf1, 0xa2, 0x93, 0xbd, 0x8c, 0xdf, 0xee, 0x79, 0x48, 0x1b, 0x2a,
     77          	0xc1, 0xf0, 0xa3, 0x92, 0x05, 0x34, 0x67, 0x56, 0x78, 0x49, 0x1a, 0x2b, 0xbc, 0x8d, 0xde, 0xef,
     78          	0x82, 0xb3, 0xe0, 0xd1, 0x46, 0x77, 0x24, 0x15, 0x3b, 0x0a, 0x59, 0x68, 0xff, 0xce, 0x9d, 0xac
     79          };
     80          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     81          static const  unsigned char B_CRC8_Table[256] = {//反序,低位先行 x^8+x^5+x^4+1
   \                     B_CRC8_Table:
   \   000000                DS 256
   \   000100                REQUIRE `?<Initializer for B_CRC8_Table>`
   \   000100                REQUIRE __INIT_XDATA_I
     82          	0x00, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83, 0xc2, 0x9c, 0x7e, 0x20, 0xa3, 0xfd, 0x1f, 0x41,
     83          	0x9d, 0xc3, 0x21, 0x7f, 0xfc, 0xa2, 0x40, 0x1e, 0x5f, 0x01, 0xe3, 0xbd, 0x3e, 0x60, 0x82, 0xdc,
     84          	0x23, 0x7d, 0x9f, 0xc1, 0x42, 0x1c, 0xfe, 0xa0, 0xe1, 0xbf, 0x5d, 0x03, 0x80, 0xde, 0x3c, 0x62,
     85          	0xbe, 0xe0, 0x02, 0x5c, 0xdf, 0x81, 0x63, 0x3d, 0x7c, 0x22, 0xc0, 0x9e, 0x1d, 0x43, 0xa1, 0xff,
     86          	0x46, 0x18, 0xfa, 0xa4, 0x27, 0x79, 0x9b, 0xc5, 0x84, 0xda, 0x38, 0x66, 0xe5, 0xbb, 0x59, 0x07,
     87          	0xdb, 0x85, 0x67, 0x39, 0xba, 0xe4, 0x06, 0x58, 0x19, 0x47, 0xa5, 0xfb, 0x78, 0x26, 0xc4, 0x9a,
     88          	0x65, 0x3b, 0xd9, 0x87, 0x04, 0x5a, 0xb8, 0xe6, 0xa7, 0xf9, 0x1b, 0x45, 0xc6, 0x98, 0x7a, 0x24,
     89          	0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b, 0x3a, 0x64, 0x86, 0xd8, 0x5b, 0x05, 0xe7, 0xb9,
     90          	0x8c, 0xd2, 0x30, 0x6e, 0xed, 0xb3, 0x51, 0x0f, 0x4e, 0x10, 0xf2, 0xac, 0x2f, 0x71, 0x93, 0xcd,
     91          	0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92, 0xd3, 0x8d, 0x6f, 0x31, 0xb2, 0xec, 0x0e, 0x50,
     92          	0xaf, 0xf1, 0x13, 0x4d, 0xce, 0x90, 0x72, 0x2c, 0x6d, 0x33, 0xd1, 0x8f, 0x0c, 0x52, 0xb0, 0xee,
     93          	0x32, 0x6c, 0x8e, 0xd0, 0x53, 0x0d, 0xef, 0xb1, 0xf0, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73,
     94          	0xca, 0x94, 0x76, 0x28, 0xab, 0xf5, 0x17, 0x49, 0x08, 0x56, 0xb4, 0xea, 0x69, 0x37, 0xd5, 0x8b,
     95          	0x57, 0x09, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4, 0x95, 0xcb, 0x29, 0x77, 0xf4, 0xaa, 0x48, 0x16,
     96          	0xe9, 0xb7, 0x55, 0x0b, 0x88, 0xd6, 0x34, 0x6a, 0x2b, 0x75, 0x97, 0xc9, 0x4a, 0x14, 0xf6, 0xa8,
     97          	0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7, 0xb6, 0xe8, 0x0a, 0x54, 0xd7, 0x89, 0x6b, 0x35
     98          };
     99          
    100          /// 索引起始点，目录根

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    101          static cmd_root_t shellcmdroot = {0};
   \                     shellcmdroot:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    102          
    103          /* Global variables ---------------------------------------------------------*/
    104          
    105          /// 默认输出标志，可修改

   \                                 In  segment XDATA_I, align 1, keep-with-next
    106          char DEFAULT_INPUTSIGN[COMMANDLINE_MAX_LEN] = "~ # ";
   \                     DEFAULT_INPUTSIGN:
   \   000000                DS 50
   \   000032                REQUIRE `?<Initializer for DEFAULT_INPUTSIGN>`
   \   000032                REQUIRE __INIT_XDATA_I
    107          
    108          /* Private function prototypes -----------------------------------------------*/
    109          static void   shell_getchar     (struct shell_input * shellin , char ch);
    110          static void   shell_backspace   (struct shell_input * shellin) ;
    111          static void   shell_tab         (struct shell_input * shellin) ;
    112                 void   shell_confirm     (struct shell_input * shellin ,char * info ,cmd_fn_t yestodo);
    113          
    114          #if (COMMANDLINE_MAX_RECORD)//如果定义了历史纪录
    115          	static char * shell_record(struct shell_input * shellin);
    116          	static void   shell_show_history(struct shell_input * shellin,int32_t LastOrNext);
    117          #else
    118          #	define shell_record(x)
    119          #	define shell_show_history(x,y)
    120          #endif //#if (COMMANDLINE_MAX_RECORD)//如果定义了历史纪录
    121          
    122          /* Gorgeous Split-line ------------------------------------------------------*/
    123          
    124          /**
    125            * @brief    命令匹配，根据 cmd 找到对应的控制块
    126            * @param    cmdindex : 命令号
    127            * @param    root     : 检索根，起始检索点
    128            * @return   返回 cmd 命令字符串对应的控制块
    129          */
    130          static struct shellcommand *shell_search_cmd(cmd_root_t * root , uint32_t cmdindex)
    131          {
    132          	struct shellcommand * command ;
    133          	cmd_entry_t *node = ROOT(root);
    134          
    135          	#if USE_AVL_TREE 
    136          		while (node) {
    137          			command = container_of(node, struct shellcommand, node);
    138          			if (cmdindex < command->ID)
    139          				node = node->avl_left;
    140          			else 
    141          			if (cmdindex > command->ID)
    142          				node = node->avl_right;
    143          			else 
    144          				return command;
    145          		}
    146          	#else 
    147          		for ( ; node ; node = node->next ) {
    148          			command = container_of(node, struct shellcommand, node);
    149          			if (command->ID > cmdindex)
    150          				return NULL;
    151          			else
    152          			if (command->ID == cmdindex)
    153          				return command;
    154          		}
    155          	#endif 
    156            
    157          	return NULL;
    158          }
    159          
    160          /**
    161            * @brief    新命令插入记录
    162            * @param    root     : 检索根，起始检索点
    163            * @param    newcmd   : 新命令控制块
    164            * @return   成功返回 0
    165          */
    166          static int32_t shell_insert_cmd(cmd_root_t * root , struct shellcommand * newcmd)
    167          {
    168          	struct shellcommand * command ;
    169          	cmd_entry_t **node = &ROOT(root) ;
    170          
    171          	#if USE_AVL_TREE 
    172          		/* 用平衡二叉树构建查询系统 */
    173          		cmd_entry_t *parent = NULL;
    174          
    175          		/* Figure out where to put new node */
    176          		while (*node) {
    177          			command = container_of(*node, struct shellcommand, node);
    178          			parent = *node;
    179          			if (newcmd->ID < command->ID)
    180          				node = &((*node)->avl_left);
    181          			else 
    182          			if (newcmd->ID > command->ID)
    183          				node = &((*node)->avl_right);
    184          			else
    185          				return 1;
    186          		}
    187          
    188          		/* Add new node and rebalance tree. */
    189          		avl_insert(root,&newcmd->node,parent,node);
    190          	#else 
    191          		/* 用单链表构建查询系统 */
    192          		for ( ; *node ; node = &((*node)->next) ) {
    193          			command = container_of(*node, struct shellcommand, node);
    194          			if (newcmd->ID == command->ID) 
    195          				return -1;
    196          			else
    197          			if (command->ID > newcmd->ID)
    198          				break ;
    199          		}
    200          		newcmd->node.next = *node; 
    201          		*node = &newcmd->node;
    202          	#endif 
    203          	return 0;
    204          }
    205          
    206          
    207          /** 
    208            * @brief  检出命令起始字符串为 str 的所有命令 
    209            * @param  str      : 起始字符串
    210            * @param  len      : 起始字符串长度
    211            * @param  checkout : 检出内存
    212            * @param  checkmax : 最大检出数，如果超出此数则返回 0 
    213            * @return 返回检出命令的条目数
    214          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    215          static int32_t checkout(char * str,int32_t len,struct shellcommand ** checkout , int32_t checkmax)
   \                     checkout:
    216          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_91:
   \   00000D   7406         MOV     A,#0x6
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   EC           MOV     A,R4
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   ED           MOV     A,R5
   \   000016   F0           MOVX    @DPTR,A
    217          	uint32_t index , end;
    218          	int32_t      matchnums = 0;
   \   000017   7402         MOV     A,#0x2
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine10
    219          	struct shellcommand * shellcmd = NULL;
    220          	cmd_entry_t  * node = ROOT(&shellcmdroot);
   \                     ??CrossCallReturnLabel_11:
   \   00001F   90....       MOV     DPTR,#shellcmdroot
   \   000022   12....       LCALL   ??Subroutine54_0
    221          
    222          	/* 首字母相同并且长度不小于 len 的点作为起始点，下一个字母开头的点作为结束点 */
    223          	index = ((uint32_t)(*str)<<26) | (len << 21) ;
   \                     ??CrossCallReturnLabel_100:
   \   000025   12....       LCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_87:
   \   000028   8A..         MOV     ?V4,R2
   \   00002A   E4           CLR     A
   \   00002B   F5..         MOV     ?V5,A
   \   00002D   F5..         MOV     ?V6,A
   \   00002F   F5..         MOV     ?V7,A
   \   000031   741A         MOV     A,#0x1a
   \   000033   78..         MOV     R0,#?V4
   \   000035   12....       LCALL   ?L_SHL
   \   000038   741B         MOV     A,#0x1b
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   78..         MOV     R0,#?V0
   \   00003F   12....       LCALL   ?L_MOV_X
   \   000042   7415         MOV     A,#0x15
   \   000044   78..         MOV     R0,#?V0
   \   000046   12....       LCALL   ?L_SHL
   \   000049   78..         MOV     R0,#?V4
   \   00004B   79..         MOV     R1,#?V0
   \   00004D   12....       LCALL   ?L_IOR
    224          	end = (uint32_t)(*str + 1)<<26 ; 
   \   000050   EA           MOV     A,R2
   \   000051   2401         ADD     A,#0x1
   \   000053   F5..         MOV     ?V0,A
   \   000055   E4           CLR     A
   \   000056   3400         ADDC    A,#0x0
   \   000058   F5..         MOV     ?V1,A
   \   00005A   95E0         SUBB    A,0xE0 /* A   */
   \   00005C   F5..         MOV     ?V2,A
   \   00005E   F5..         MOV     ?V3,A
   \   000060   741A         MOV     A,#0x1a
   \   000062   78..         MOV     R0,#?V0
   \   000064   12....       LCALL   ?L_SHL
   \   000067   7408         MOV     A,#0x8
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   78..         MOV     R0,#?V0
   \   00006E   12....       LCALL   ?L_MOV_TO_X
   \   000071   8003         SJMP    ??CrossCallReturnLabel_103
    225          
    226          	/* 先找到起始匹配点 */
    227          	#if USE_AVL_TREE 
    228          		/* index 不存在，查找结束后的 shell_cmd 最靠近 index 用此作为起始匹配点 */
    229          		while ( node ){
    230          			shellcmd = container_of(node,struct shellcommand, node);	
    231          			node = (index < shellcmd->ID) ? node->avl_left : node->avl_right;
    232          		}
    233          
    234          		if (shellcmd)
    235          		   node = &shellcmd->node ;
    236          	#else 
    237          		/* 查找到首字母相同的点作为起始点 */
    238          		for ( ; node ; node = NEXT(node)) { 
   \                     ??checkout_0:
   \   000073   12....       LCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_103:
   \   000076   EE           MOV     A,R6
   \   000077   4F           ORL     A,R7
   \   000078   7003         JNZ     $+5
   \   00007A   02....       LJMP    ??checkout_1
    239          			shellcmd = container_of(node, struct shellcommand, node);
    240          			if (shellcmd->ID > index)
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   78..         MOV     R0,#?V4
   \   000089   12....       LCALL   ?UL_GE_X
   \   00008C   40E5         JC      ??checkout_0
   \   00008E   741F         MOV     A,#0x1f
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   78..         MOV     R0,#?V0
   \   000095   12....       LCALL   ?L_MOV_X
    241          				break;
    242          		}
    243          	#endif
    244          
    245          	for( ; node ; node = NEXT(node) ) {
    246          		/* 对比输入的字符串，如果前 len 个字符与 str 相同,把命令块记下来 */
    247          		shellcmd = container_of(node,struct shellcommand, node);
    248          		if (shellcmd->ID > end) {
   \                     ??checkout_2:
   \   000098   8E82         MOV     DPL,R6
   \   00009A   8F83         MOV     DPH,R7
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   78..         MOV     R0,#?V4
   \   0000A4   12....       LCALL   ?L_MOV_X
   \   0000A7   7408         MOV     A,#0x8
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   78..         MOV     R0,#?V4
   \   0000AE   12....       LCALL   ?UL_GT_X
   \   0000B1   5003         JNC     $+5
   \   0000B3   02....       LJMP    ??checkout_1
    249          			break ;
    250          		}
    251          
    252          		if (0 == memcmp(shellcmd->name, str, len)){ 
   \   0000B6                ; Setup parameters for call to function memcmp
   \   0000B6   741B         MOV     A,#0x1b
   \   0000B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BB   78..         MOV     R0,#?V4
   \   0000BD   12....       LCALL   ?L_MOV_X
   \   0000C0   78..         MOV     R0,#?V4
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C5   7402         MOV     A,#0x2
   \   0000C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CA   12....       LCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_41:
   \   0000CD   8E82         MOV     DPL,R6
   \   0000CF   8F83         MOV     DPH,R7
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   12....       LCALL   ??Subroutine55_0
   \                     ??CrossCallReturnLabel_105:
   \   0000D6   12....       LCALL   memcmp
   \   0000D9   7402         MOV     A,#0x2
   \   0000DB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DE   8B..         MOV     ?V5,R3
   \   0000E0   EA           MOV     A,R2
   \   0000E1   45..         ORL     A,?V5
   \   0000E3   704A         JNZ     ??checkout_3
    253          			checkout[matchnums] = shellcmd;
   \   0000E5   7402         MOV     A,#0x2
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   78..         MOV     R0,#?V4
   \   0000EC   12....       LCALL   ?L_MOV_X
   \   0000EF   E5..         MOV     A,?V4
   \   0000F1   25E0         ADD     A,0xE0 /* A   */
   \   0000F3   F5..         MOV     ?V4,A
   \   0000F5   E5..         MOV     A,?V5
   \   0000F7   33           RLC     A
   \   0000F8   F5..         MOV     ?V5,A
   \   0000FA   7406         MOV     A,#0x6
   \   0000FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FF   12....       LCALL   ?Subroutine45
   \                     ??CrossCallReturnLabel_79:
   \   000102   EE           MOV     A,R6
   \   000103   F0           MOVX    @DPTR,A
   \   000104   A3           INC     DPTR
   \   000105   EF           MOV     A,R7
   \   000106   F0           MOVX    @DPTR,A
    254          			if (++matchnums > checkmax) {
   \   000107   90....       MOV     DPTR,#__Constant_1
   \   00010A   78..         MOV     R0,#?V4
   \   00010C   12....       LCALL   ?L_MOV_X
   \   00010F   7402         MOV     A,#0x2
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   78..         MOV     R0,#?V4
   \   000116   12....       LCALL   ?L_ADD_TO_X
   \   000119   7402         MOV     A,#0x2
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   78..         MOV     R0,#?V0
   \   000120   12....       LCALL   ?SL_GE_X
   \   000123   400A         JC      ??checkout_3
    255          				return 0;    
   \   000125   7A00         MOV     R2,#0x0
   \   000127   7B00         MOV     R3,#0x0
   \   000129   7C00         MOV     R4,#0x0
   \   00012B   7D00         MOV     R5,#0x0
   \   00012D   8012         SJMP    ??checkout_4
    256          			}
    257          		}
    258          	}
   \                     ??checkout_3:
   \   00012F   12....       LCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_104:
   \   000132   EE           MOV     A,R6
   \   000133   4F           ORL     A,R7
   \   000134   6003         JZ      $+5
   \   000136   02....       LJMP    ??checkout_2
    259          
    260          	return matchnums;
   \                     ??checkout_1:
   \   000139   7402         MOV     A,#0x2
   \   00013B   12....       LCALL   ?XSTACK_DISP0_8
   \   00013E   12....       LCALL   ?XLOAD_R2345
   \                     ??checkout_4:
   \   000141   740C         MOV     A,#0xc
   \   000143   02....       LJMP    ??Subroutine53_0
    261          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine50_0
   \   000006                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   12....       LCALL   ?Subroutine44
   \                     ??CrossCallReturnLabel_166:
   \   000003   FA           MOV     R2,A
   \   000004   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25..         ADD     A,?V4
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   35..         ADDC    A,?V5
   \   000008   8882         MOV     DPL,R0
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine51_0
   \   000006                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?FUNC_LEAVE_XDATA

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine54_0
   \   000004                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine42
   \                     ??CrossCallReturnLabel_78:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E4           CLR     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_169:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    262          
    263          
    264          #if (COMMANDLINE_MAX_RECORD) //如果定义了历史纪录
    265          
    266          /**
    267            * @author   古么宁
    268            * @brief    记录此次运行的命令及参数
    269            * @param    
    270            * @return   返回记录地址
    271          */
    272          static char * shell_record(struct shell_input * shellin)
    273          {	
    274          	char *  history = &shellin->history[shellin->htywrt][0];
    275          	
    276          	shellin->htywrt  = (shellin->htywrt + 1) % COMMANDLINE_MAX_RECORD;
    277          	shellin->htyread = shellin->htywrt;
    278          
    279          	memcpy(history,shellin->cmdline,shellin->tail);
    280          	history[shellin->tail] = 0;
    281          	
    282          	return history;
    283          }
    284          
    285          
    286          /**
    287            * @author   古么宁
    288            * @brief    按上下箭头键显示以往输入过的命令，此处只记录最近几次的命令
    289            * @param    void
    290            * @return   don't care
    291          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    292          static void shell_show_history(struct shell_input * shellin,int32_t LastOrNext)
   \                     shell_show_history:
    293          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    294          	int32_t len = 0;
   \   000009   75..00       MOV     ?V0,#0x0
   \   00000C   75..00       MOV     ?V1,#0x0
   \   00000F   75..00       MOV     ?V2,#0x0
   \   000012   75..00       MOV     ?V3,#0x0
    295          	
    296          	printf("\33[2K\r%s",shellin->sign);//"\33[2K\r" 表示清除当前行
   \   000015                ; Setup parameters for call to function printf
   \   000015   EE           MOV     A,R6
   \   000016   2406         ADD     A,#0x6
   \   000018   F5..         MOV     ?V4,A
   \   00001A   E4           CLR     A
   \   00001B   3F           ADDC    A,R7
   \   00001C   F5..         MOV     ?V5,A
   \   00001E   78..         MOV     R0,#?V4
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   7A..         MOV     R2,#`?<Constant "\\033[2K\\r%s">` & 0xff
   \   000025   7B..         MOV     R3,#(`?<Constant "\\033[2K\\r%s">` >> 8) & 0xff
   \   000027   12....       LCALL   printf
   \   00002A   7402         MOV     A,#0x2
   \   00002C   12....       LCALL   ?DEALLOC_XSTACK8
    297          
    298          	if (!LastOrNext) //上箭头，上一条命令
   \   00002F   EE           MOV     A,R6
   \   000030   246D         ADD     A,#0x6d
   \   000032   FC           MOV     R4,A
   \   000033   E4           CLR     A
   \   000034   3F           ADDC    A,R7
   \   000035   FD           MOV     R5,A
   \   000036   8C82         MOV     DPL,R4
   \   000038   8D83         MOV     DPH,R5
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V6,A
   \   00003D   EE           MOV     A,R6
   \   00003E   246C         ADD     A,#0x6c
   \   000040   F5..         MOV     ?V4,A
   \   000042   E4           CLR     A
   \   000043   3F           ADDC    A,R7
   \   000044   F5..         MOV     ?V5,A
   \   000046   740E         MOV     A,#0xe
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   12....       LCALL   ?XLOAD_R0123
   \   00004E   E8           MOV     A,R0
   \   00004F   49           ORL     A,R1
   \   000050   4A           ORL     A,R2
   \   000051   4B           ORL     A,R3
   \   000052   7010         JNZ     ??shell_show_history_0
    299          		shellin->htyread = (!shellin->htyread) ? (COMMANDLINE_MAX_RECORD - 1) : (shellin->htyread - 1);
   \   000054   E5..         MOV     A,?V6
   \   000056   7004         JNZ     ??shell_show_history_1
   \   000058   7803         MOV     R0,#0x3
   \   00005A   8005         SJMP    ??shell_show_history_2
   \                     ??shell_show_history_1:
   \   00005C   74FF         MOV     A,#-0x1
   \   00005E   25..         ADD     A,?V6
   \   000060   F8           MOV     R0,A
   \                     ??shell_show_history_2:
   \   000061   E8           MOV     A,R0
   \   000062   801D         SJMP    ??shell_show_history_3
    300          	else       //下箭头
    301          	if (shellin->htyread != shellin->htywrt)
   \                     ??shell_show_history_0:
   \   000064   85..82       MOV     DPL,?V4
   \   000067   85..83       MOV     DPH,?V5
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   65..         XRL     A,?V6
   \   00006D   6017         JZ      ??shell_show_history_4
    302          		shellin->htyread = (shellin->htyread + 1) % COMMANDLINE_MAX_RECORD;
   \   00006F   7900         MOV     R1,#0x0
   \   000071   E5..         MOV     A,?V6
   \   000073   2401         ADD     A,#0x1
   \   000075   F8           MOV     R0,A
   \   000076   5001         JNC     ??shell_show_history_5
   \   000078   09           INC     R1
   \                     ??shell_show_history_5:
   \   000079   7A04         MOV     R2,#0x4
   \   00007B   7B00         MOV     R3,#0x0
   \   00007D   12....       LCALL   ?S_DIV_MOD
   \   000080   EA           MOV     A,R2
   \                     ??shell_show_history_3:
   \   000081   8C82         MOV     DPL,R4
   \   000083   8D83         MOV     DPH,R5
   \   000085   F0           MOVX    @DPTR,A
    303          
    304          	if (shellin->htyread != shellin->htywrt){ //把历史记录考到命令行内存 
   \                     ??shell_show_history_4:
   \   000086   8C82         MOV     DPL,R4
   \   000088   8D83         MOV     DPH,R5
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F8           MOV     R0,A
   \   00008C   85..82       MOV     DPL,?V4
   \   00008F   85..83       MOV     DPH,?V5
   \   000092   E0           MOVX    A,@DPTR
   \   000093   68           XRL     A,R0
   \   000094   6030         JZ      ??shell_show_history_6
    305          		for (char * history = &shellin->history[shellin->htyread][0]; *history ; ++len)
   \   000096   E8           MOV     A,R0
   \   000097   75F032       MOV     B,#0x32
   \   00009A   A4           MUL     AB
   \   00009B   F8           MOV     R0,A
   \   00009C   A9F0         MOV     R1,B
   \   00009E   EE           MOV     A,R6
   \   00009F   28           ADD     A,R0
   \   0000A0   F8           MOV     R0,A
   \   0000A1   EF           MOV     A,R7
   \   0000A2   39           ADDC    A,R1
   \   0000A3   F9           MOV     R1,A
   \   0000A4   E8           MOV     A,R0
   \   0000A5   246E         ADD     A,#0x6e
   \   0000A7   FA           MOV     R2,A
   \   0000A8   E4           CLR     A
   \   0000A9   39           ADDC    A,R1
   \   0000AA   FB           MOV     R3,A
   \   0000AB   8012         SJMP    ??shell_show_history_7
    306          			shellin->cmdline[len] = *history++;
   \                     ??shell_show_history_8:
   \   0000AD   C0E0         PUSH    A
   \   0000AF   12....       LCALL   ?Subroutine31
   \                     ??CrossCallReturnLabel_51:
   \   0000B2   D0E0         POP     A
   \   0000B4   12....       LCALL   ??Subroutine61_0
   \                     ??CrossCallReturnLabel_135:
   \   0000B7   90....       MOV     DPTR,#__Constant_1
   \   0000BA   78..         MOV     R0,#?V0
   \   0000BC   12....       LCALL   ?L_ADD_X
   \                     ??shell_show_history_7:
   \   0000BF   8A82         MOV     DPL,R2
   \   0000C1   8B83         MOV     DPH,R3
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   70E7         JNZ     ??shell_show_history_8
    307          	}
    308          	
    309          	shellin->cmdline[len] = 0; //添加结束符
   \                     ??shell_show_history_6:
   \   0000C6   12....       LCALL   ?Subroutine31
   \                     ??CrossCallReturnLabel_52:
   \   0000C9   E4           CLR     A
   \   0000CA   F0           MOVX    @DPTR,A
    310          	shellin->tail = len ;
   \   0000CB   EE           MOV     A,R6
   \   0000CC   246B         ADD     A,#0x6b
   \   0000CE   F582         MOV     DPL,A
   \   0000D0   E4           CLR     A
   \   0000D1   3F           ADDC    A,R7
   \   0000D2   F583         MOV     DPH,A
   \   0000D4   E5..         MOV     A,?V0
   \   0000D6   F0           MOVX    @DPTR,A
    311          	shellin->edit = len ;
   \   0000D7   EE           MOV     A,R6
   \   0000D8   246A         ADD     A,#0x6a
   \   0000DA   F582         MOV     DPL,A
   \   0000DC   E4           CLR     A
   \   0000DD   3F           ADDC    A,R7
   \   0000DE   F583         MOV     DPH,A
   \   0000E0   E5..         MOV     A,?V0
   \   0000E2   F0           MOVX    @DPTR,A
    312          
    313          	if (len)
   \   0000E3   45..         ORL     A,?V1
   \   0000E5   45..         ORL     A,?V2
   \   0000E7   45..         ORL     A,?V3
   \   0000E9   6016         JZ      ??shell_show_history_9
    314          		printl(shellin->cmdline,len); //打印命令行内容
   \   0000EB   12....       LCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_32:
   \   0000EE   6011         JZ      ??shell_show_history_9
   \   0000F0                ; Setup parameters for indirect call
   \   0000F0   AC..         MOV     R4,?V0
   \   0000F2   AD..         MOV     R5,?V1
   \   0000F4   EE           MOV     A,R6
   \   0000F5   2438         ADD     A,#0x38
   \   0000F7   FA           MOV     R2,A
   \   0000F8   E4           CLR     A
   \   0000F9   3F           ADDC    A,R7
   \   0000FA   FB           MOV     R3,A
   \   0000FB   12....       LCALL   ??Subroutine65_0
   \                     ??CrossCallReturnLabel_142:
   \   0000FE   12....       LCALL   ?CALL_IND
    315          }
   \                     ??shell_show_history_9:
   \   000101                REQUIRE ?Subroutine1
   \   000101                ; // Fall through to label ?Subroutine1

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F07         MOV     R7,#0x7
   \   000002   02....       LJMP    ?FUNC_LEAVE_XDATA

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   85....       MOV     ?V4,?V0
   \   000003   85....       MOV     ?V5,?V1
   \   000006   EE           MOV     A,R6
   \   000007   25..         ADD     A,?V4
   \   000009   F8           MOV     R0,A
   \   00000A   EF           MOV     A,R7
   \   00000B   35..         ADDC    A,?V5
   \   00000D   12....       LCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_84:
   \   000010   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   F9           MOV     R1,A
   \   000001   E8           MOV     A,R0
   \   000002   2438         ADD     A,#0x38
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   AA82         MOV     R2,DPL
   \   000008   AB83         MOV     R3,DPH
   \   00000A   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine46
   \                     ??CrossCallReturnLabel_158:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   90....       MOV     DPTR,#current_puts
   \   000003                REQUIRE ??Subroutine66_0
   \   000003                ; // Fall through to label ??Subroutine66_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    316          
    317          #endif //#if (COMMANDLINE_MAX_RECORD) //如果定义了历史纪录
    318          
    319          
    320          
    321          /** 
    322            * @brief    输入 table 键处理
    323            * @param    input
    324            * @return   don't care
    325          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    326          static void shell_tab(struct shell_input * shellin)
   \                     shell_tab:
    327          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine12
    328          	struct shellcommand * match[10];  
    329          	char  *  str = shellin->cmdline;
   \                     ??CrossCallReturnLabel_92:
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   12....       LCALL   ?Subroutine29
   \                     ??CrossCallReturnLabel_47:
   \   000016   7408         MOV     A,#0x8
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ??Subroutine57_0
   \                     ??CrossCallReturnLabel_119:
   \   00001E   7408         MOV     A,#0x8
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   12....       LCALL   ??Subroutine55_0
    330          	int32_t  len = shellin->tail;
   \                     ??CrossCallReturnLabel_106:
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   246B         ADD     A,#0x6b
   \   00002F   F8           MOV     R0,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   3400         ADDC    A,#0x0
   \   000034   F9           MOV     R1,A
   \   000035   7406         MOV     A,#0x6
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   12....       LCALL   ??Subroutine57_0
   \                     ??CrossCallReturnLabel_120:
   \   00003D   7406         MOV     A,#0x6
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   12....       LCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_29:
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   12....       LCALL   ?Subroutine4
    331          	int32_t matchnums = 0 ; 
   \                     ??CrossCallReturnLabel_0:
   \   00004D   801B         SJMP    ??shell_tab_0
    332          	
    333          	/* Shave off any leading spaces */
    334          	for ( ; *str == ' ' ; ++str) {
    335          		--len; 
   \                     ??shell_tab_1:
   \   00004F   90....       MOV     DPTR,#__Constant_ffffffff
   \   000052   78..         MOV     R0,#?V0
   \   000054   12....       LCALL   ?L_MOV_X
   \   000057   7402         MOV     A,#0x2
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   78..         MOV     R0,#?V0
   \   00005E   12....       LCALL   ?L_ADD_TO_X
    336          	}
   \   000061   8A82         MOV     DPL,R2
   \   000063   8B83         MOV     DPH,R3
   \   000065   A3           INC     DPTR
   \   000066   AA82         MOV     R2,DPL
   \   000068   AB83         MOV     R3,DPH
   \                     ??shell_tab_0:
   \   00006A   8A82         MOV     DPL,R2
   \   00006C   8B83         MOV     DPH,R3
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F8           MOV     R0,A
   \   000070   7420         MOV     A,#0x20
   \   000072   68           XRL     A,R0
   \   000073   60DA         JZ      ??shell_tab_1
    337          
    338          	if (*str == 0 || len == 0 ){
   \   000075   E8           MOV     A,R0
   \   000076   600E         JZ      ??shell_tab_2
   \   000078   7402         MOV     A,#0x2
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   12....       LCALL   ?XLOAD_R4567
   \   000080   EC           MOV     A,R4
   \   000081   4D           ORL     A,R5
   \   000082   4E           ORL     A,R6
   \   000083   4F           ORL     A,R7
   \   000084   7003         JNZ     ??shell_tab_3
    339          		return ;
   \                     ??shell_tab_2:
   \   000086   02....       LJMP    ??shell_tab_4
    340          	}
    341          
    342          	/* 如果没有命令包含输入的字符串，返回 */
    343          	matchnums = checkout(str,len,match,10);
   \                     ??shell_tab_3:
   \   000089                ; Setup parameters for call to function checkout
   \   000089   90....       MOV     DPTR,#__Constant_a
   \   00008C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00008F   7406         MOV     A,#0x6
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000097   7412         MOV     A,#0x12
   \   000099   12....       LCALL   ?XSTACK_DISP102_8
   \   00009C   12....       LCALL   checkout
   \   00009F   7408         MOV     A,#0x8
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A4   8A..         MOV     ?V0,R2
   \   0000A6   8B..         MOV     ?V1,R3
   \   0000A8   8C..         MOV     ?V2,R4
   \   0000AA   8D..         MOV     ?V3,R5
    344          	if (!matchnums){ 
   \   0000AC   EA           MOV     A,R2
   \   0000AD   45..         ORL     A,?V1
   \   0000AF   45..         ORL     A,?V2
   \   0000B1   45..         ORL     A,?V3
   \   0000B3   7003         JNZ     $+5
   \   0000B5   02....       LJMP    ??shell_tab_4
    345          		return ; 
    346          	}
    347          
    348          	/* 如果编辑位置不是末端，先把光标移到末端 */
    349          	if (shellin->edit != shellin->tail) { 
   \   0000B8   7406         MOV     A,#0x6
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   12....       LCALL   ??Subroutine50_0
   \                     ??CrossCallReturnLabel_85:
   \   0000C0   85..82       MOV     DPL,?XSP + 0
   \   0000C3   85..83       MOV     DPH,?XSP + 1
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   246A         ADD     A,#0x6a
   \   0000C9   FE           MOV     R6,A
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   3400         ADDC    A,#0x0
   \   0000CE   FF           MOV     R7,A
   \   0000CF   8E82         MOV     DPL,R6
   \   0000D1   8F83         MOV     DPH,R7
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   F8           MOV     R0,A
   \   0000D5   EA           MOV     A,R2
   \   0000D6   68           XRL     A,R0
   \   0000D7   6039         JZ      ??shell_tab_5
    350          		printl(&shellin->cmdline[shellin->edit],shellin->tail - shellin->edit);
   \   0000D9   90....       MOV     DPTR,#current_puts
   \   0000DC   12....       LCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_42:
   \   0000DF   EC           MOV     A,R4
   \   0000E0   4D           ORL     A,R5
   \   0000E1   6022         JZ      ??shell_tab_6
   \   0000E3                ; Setup parameters for indirect call
   \   0000E3   EA           MOV     A,R2
   \   0000E4   C3           CLR     C
   \   0000E5   98           SUBB    A,R0
   \   0000E6   FC           MOV     R4,A
   \   0000E7   95E0         SUBB    A,0xE0 /* A   */
   \   0000E9   FD           MOV     R5,A
   \   0000EA   85..82       MOV     DPL,?XSP + 0
   \   0000ED   85..83       MOV     DPH,?XSP + 1
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   28           ADD     A,R0
   \   0000F2   F8           MOV     R0,A
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   3400         ADDC    A,#0x0
   \   0000F7   F9           MOV     R1,A
   \   0000F8   E8           MOV     A,R0
   \   0000F9   2438         ADD     A,#0x38
   \   0000FB   FA           MOV     R2,A
   \   0000FC   E4           CLR     A
   \   0000FD   39           ADDC    A,R1
   \   0000FE   FB           MOV     R3,A
   \   0000FF   12....       LCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_154:
   \   000102   12....       LCALL   ?CALL_IND
    351          		shellin->edit = shellin->tail;
   \                     ??shell_tab_6:
   \   000105   7406         MOV     A,#0x6
   \   000107   12....       LCALL   ?XSTACK_DISP0_8
   \   00010A   12....       LCALL   ??Subroutine67_0
    352          	}
   \                     ??CrossCallReturnLabel_161:
   \   00010D   8E82         MOV     DPL,R6
   \   00010F   8F83         MOV     DPH,R7
   \   000111   F0           MOVX    @DPTR,A
    353          
    354          	if (1 == matchnums){
   \                     ??shell_tab_5:
   \   000112   90....       MOV     DPTR,#__Constant_1
   \   000115   78..         MOV     R0,#?V0
   \   000117   12....       LCALL   ?L_EQ_X
   \   00011A   7041         JNZ     ??shell_tab_7
    355          		/* 如果只找到了一条命令包含当前输入的字符串，直接补全命令并打印 */
    356          		for(char * fmt = match[0]->name + len ; *fmt ;++fmt){
   \   00011C   7402         MOV     A,#0x2
   \   00011E   12....       LCALL   ?XSTACK_DISP0_8
   \   000121   78..         MOV     R0,#?V0
   \   000123   12....       LCALL   ?L_MOV_X
   \   000126   740A         MOV     A,#0xa
   \   000128   12....       LCALL   ?XSTACK_DISP0_8
   \   00012B   12....       LCALL   ??Subroutine63_0
   \                     ??CrossCallReturnLabel_150:
   \   00012E   A3           INC     DPTR
   \   00012F   A3           INC     DPTR
   \   000130   E0           MOVX    A,@DPTR
   \   000131   25..         ADD     A,?V0
   \   000133   FE           MOV     R6,A
   \   000134   A3           INC     DPTR
   \   000135   E0           MOVX    A,@DPTR
   \   000136   35..         ADDC    A,?V1
   \   000138   FF           MOV     R7,A
   \   000139   800F         SJMP    ??shell_tab_8
    357          			shell_getchar(shellin,*fmt);
   \                     ??shell_tab_9:
   \   00013B                ; Setup parameters for call to function shell_getchar
   \   00013B   12....       LCALL   ?Subroutine17
    358          		}
   \                     ??CrossCallReturnLabel_112:
   \   00013E   12....       LCALL   shell_getchar
   \   000141   8E82         MOV     DPL,R6
   \   000143   8F83         MOV     DPH,R7
   \   000145   A3           INC     DPTR
   \   000146   AE82         MOV     R6,DPL
   \   000148   AF83         MOV     R7,DPH
   \                     ??shell_tab_8:
   \   00014A   8E82         MOV     DPL,R6
   \   00014C   8F83         MOV     DPH,R7
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   F9           MOV     R1,A
   \   000150   70E9         JNZ     ??shell_tab_9
    359          		shell_getchar(shellin,' ');
   \   000152                ; Setup parameters for call to function shell_getchar
   \   000152   7920         MOV     R1,#0x20
   \   000154   12....       LCALL   ?Subroutine17
    360          	}
   \                     ??CrossCallReturnLabel_113:
   \   000157   12....       LCALL   shell_getchar
    361          	else {  
    362          		/* 如果不止一条命令包含当前输入的字符串，打印含有相同
    363          		  字符的命令列表，并补全字符串输出直到命令区分点 */
    364          		for(int i = 0;i < matchnums; ++i) {
    365          			printf("\r\n\t%s",match[i]->name); 
    366          		}
    367          
    368          		printf("\r\n%s%s",shellin->sign,shellin->cmdline); 
    369          		for ( ; ; ) {
    370          			/* 把 match[] 中含有相同的字符补全到输入缓冲中 */
    371          			for (int i = 1 ; i < matchnums ; ++i ) {
    372          				if (match[0]->name[len] != match[i]->name[len]){
    373          					return  ;
    374          				}
    375          			}
    376          			shell_getchar(shellin,match[0]->name[len++]);
    377          		}
    378          	}
    379          }
   \   00015A   02....       LJMP    ??shell_tab_4
   \                     ??shell_tab_7:
   \   00015D   7E00         MOV     R6,#0x0
   \   00015F   7F00         MOV     R7,#0x0
   \   000161   802B         SJMP    ??shell_tab_10
   \                     ??shell_tab_11:
   \   000163                ; Setup parameters for call to function printf
   \   000163   EE           MOV     A,R6
   \   000164   F8           MOV     R0,A
   \   000165   EF           MOV     A,R7
   \   000166   F9           MOV     R1,A
   \   000167   E8           MOV     A,R0
   \   000168   28           ADD     A,R0
   \   000169   F8           MOV     R0,A
   \   00016A   E9           MOV     A,R1
   \   00016B   33           RLC     A
   \   00016C   F9           MOV     R1,A
   \   00016D   740A         MOV     A,#0xa
   \   00016F   12....       LCALL   ?XSTACK_DISP0_8
   \   000172   12....       LCALL   ?Subroutine37
   \                     ??CrossCallReturnLabel_64:
   \   000175   12....       LCALL   ??Subroutine63_0
   \                     ??CrossCallReturnLabel_151:
   \   000178   A3           INC     DPTR
   \   000179   A3           INC     DPTR
   \   00017A   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00017D   7A..         MOV     R2,#`?<Constant "\\r\\n\\t%s">` & 0xff
   \   00017F   7B..         MOV     R3,#(`?<Constant "\\r\\n\\t%s">` >> 8) & 0xff
   \   000181   12....       LCALL   printf
   \   000184   7402         MOV     A,#0x2
   \   000186   12....       LCALL   ?DEALLOC_XSTACK8
   \   000189   0E           INC     R6
   \   00018A   EE           MOV     A,R6
   \   00018B   7001         JNZ     ??shell_tab_10
   \   00018D   0F           INC     R7
   \                     ??shell_tab_10:
   \   00018E   8E..         MOV     ?V4,R6
   \   000190   EF           MOV     A,R7
   \   000191   12....       LCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_55:
   \   000194   12....       LCALL   ?SL_GT
   \   000197   40CA         JC      ??shell_tab_11
   \   000199                ; Setup parameters for call to function printf
   \   000199   7408         MOV     A,#0x8
   \   00019B   12....       LCALL   ?XSTACK_DISP0_8
   \   00019E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001A1   7402         MOV     A,#0x2
   \   0001A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   2406         ADD     A,#0x6
   \   0001A9   F5..         MOV     ?V4,A
   \   0001AB   A3           INC     DPTR
   \   0001AC   E0           MOVX    A,@DPTR
   \   0001AD   3400         ADDC    A,#0x0
   \   0001AF   F5..         MOV     ?V5,A
   \   0001B1   78..         MOV     R0,#?V4
   \   0001B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B6   7A..         MOV     R2,#`?<Constant "\\r\\n%s%s">` & 0xff
   \   0001B8   7B..         MOV     R3,#(`?<Constant "\\r\\n%s%s">` >> 8) & 0xff
   \   0001BA   12....       LCALL   printf
   \   0001BD   7404         MOV     A,#0x4
   \   0001BF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C2   801A         SJMP    ??shell_tab_12
   \                     ??shell_tab_13:
   \   0001C4                ; Setup parameters for call to function shell_getchar
   \   0001C4   EC           MOV     A,R4
   \   0001C5   F9           MOV     R1,A
   \   0001C6   12....       LCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_114:
   \   0001C9   12....       LCALL   shell_getchar
   \   0001CC   90....       MOV     DPTR,#__Constant_1
   \   0001CF   78..         MOV     R0,#?V4
   \   0001D1   12....       LCALL   ?L_MOV_X
   \   0001D4   7402         MOV     A,#0x2
   \   0001D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D9   78..         MOV     R0,#?V4
   \   0001DB   12....       LCALL   ?L_ADD_TO_X
   \                     ??shell_tab_12:
   \   0001DE   7A01         MOV     R2,#0x1
   \   0001E0   7B00         MOV     R3,#0x0
   \   0001E2   8005         SJMP    ??shell_tab_14
   \                     ??shell_tab_15:
   \   0001E4   0A           INC     R2
   \   0001E5   EA           MOV     A,R2
   \   0001E6   7001         JNZ     ??shell_tab_14
   \   0001E8   0B           INC     R3
   \                     ??shell_tab_14:
   \   0001E9   7402         MOV     A,#0x2
   \   0001EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EE   78..         MOV     R0,#?V4
   \   0001F0   12....       LCALL   ?L_MOV_X
   \   0001F3   740A         MOV     A,#0xa
   \   0001F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F8   12....       LCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_25:
   \   0001FB   FC           MOV     R4,A
   \   0001FC   8A..         MOV     ?V4,R2
   \   0001FE   EB           MOV     A,R3
   \   0001FF   12....       LCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_56:
   \   000202   12....       LCALL   ?SL_GT
   \   000205   50BD         JNC     ??shell_tab_13
   \   000207   7402         MOV     A,#0x2
   \   000209   12....       LCALL   ?XSTACK_DISP0_8
   \   00020C   78..         MOV     R0,#?V4
   \   00020E   12....       LCALL   ?L_MOV_X
   \   000211   EA           MOV     A,R2
   \   000212   F8           MOV     R0,A
   \   000213   EB           MOV     A,R3
   \   000214   F9           MOV     R1,A
   \   000215   E8           MOV     A,R0
   \   000216   28           ADD     A,R0
   \   000217   F8           MOV     R0,A
   \   000218   E9           MOV     A,R1
   \   000219   33           RLC     A
   \   00021A   F9           MOV     R1,A
   \   00021B   740A         MOV     A,#0xa
   \   00021D   12....       LCALL   ?XSTACK_DISP0_8
   \   000220   12....       LCALL   ?Subroutine37
   \                     ??CrossCallReturnLabel_65:
   \   000223   12....       LCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_26:
   \   000226   6C           XRL     A,R4
   \   000227   60BB         JZ      ??shell_tab_15
   \                     ??shell_tab_4:
   \   000229   741E         MOV     A,#0x1e
   \   00022B   02....       LJMP    ??Subroutine53_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F5..         MOV     ?V5,A
   \   000002   33           RLC     A
   \   000003   95E0         SUBB    A,0xE0 /* A   */
   \   000005   F5..         MOV     ?V6,A
   \   000007   F5..         MOV     ?V7,A
   \   000009   78..         MOV     R0,#?V0
   \   00000B   79..         MOV     R1,#?V4
   \   00000D   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_168:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   12....       LCALL   ?Subroutine45
   \                     ??CrossCallReturnLabel_80:
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine55_0
   \   000006                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2438         ADD     A,#0x38
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine58_0
   \   000001                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   EC           MOV     A,R4
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine44
   \                     ??CrossCallReturnLabel_165:
   \   000003   FC           MOV     R4,A
   \   000004   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   90....       MOV     DPTR,#current_puts
   \   000003                REQUIRE ??Subroutine63_0
   \   000003                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002                REQUIRE ??Subroutine64_0
   \   000002                ; // Fall through to label ??Subroutine64_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine65_0
   \   000001                ; // Fall through to label ??Subroutine65_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   12....       LCALL   ?Subroutine44
   \                     ??CrossCallReturnLabel_167:
   \   000003   22           RET
    380          
    381          
    382          /**
    383            * @author   古么宁
    384            * @brief    如果当前打印行有输入内容，回退一个键位
    385            * @param    shellin : 输入交互
    386            * @return   don't care
    387          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    388          static void shell_backspace(struct shell_input * shellin)
   \                     shell_backspace:
    389          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 102
   \   000005   749A         MOV     A,#-0x66
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    390          	char   printbuf[COMMANDLINE_MAX_LEN*2]={0};//中转内存
   \   00000E   90....       MOV     DPTR,#`?<Constant {0}>`
   \   000011   7402         MOV     A,#0x2
   \   000013   12....       LCALL   ?XSTACK_DISP102_8
   \   000016   7464         MOV     A,#0x64
   \   000018   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    391          	char * print = &printbuf[1];
   \   00001B   7403         MOV     A,#0x3
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   AC82         MOV     R4,DPL
   \   000022   AD83         MOV     R5,DPH
    392          	char * printend = print + (shellin->tail - shellin->edit) + 1;
   \   000024   EE           MOV     A,R6
   \   000025   246A         ADD     A,#0x6a
   \   000027   F8           MOV     R0,A
   \   000028   E4           CLR     A
   \   000029   3F           ADDC    A,R7
   \   00002A   F9           MOV     R1,A
   \   00002B   8882         MOV     DPL,R0
   \   00002D   8983         MOV     DPH,R1
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V0,A
   \   000032   EE           MOV     A,R6
   \   000033   246B         ADD     A,#0x6b
   \   000035   F5..         MOV     ?V2,A
   \   000037   E4           CLR     A
   \   000038   3F           ADDC    A,R7
   \   000039   F5..         MOV     ?V3,A
   \   00003B   85..82       MOV     DPL,?V2
   \   00003E   F583         MOV     DPH,A
   \   000040   E0           MOVX    A,@DPTR
   \   000041   C3           CLR     C
   \   000042   95..         SUBB    A,?V0
   \   000044   FA           MOV     R2,A
   \   000045   95E0         SUBB    A,0xE0 /* A   */
   \   000047   FB           MOV     R3,A
   \   000048   7402         MOV     A,#0x2
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   E582         MOV     A,DPL
   \   00004F   2A           ADD     A,R2
   \   000050   FA           MOV     R2,A
   \   000051   E583         MOV     A,DPH
   \   000053   3B           ADDC    A,R3
   \   000054   FB           MOV     R3,A
   \   000055   EA           MOV     A,R2
   \   000056   2402         ADD     A,#0x2
   \   000058   FA           MOV     R2,A
   \   000059   5001         JNC     ??shell_backspace_0
   \   00005B   0B           INC     R3
    393          	char * edit = &shellin->cmdline[shellin->edit--] ;
   \                     ??shell_backspace_0:
   \   00005C   EE           MOV     A,R6
   \   00005D   25..         ADD     A,?V0
   \   00005F   F5..         MOV     ?V0,A
   \   000061   E4           CLR     A
   \   000062   3F           ADDC    A,R7
   \   000063   F5..         MOV     ?V1,A
   \   000065   E5..         MOV     A,?V0
   \   000067   2438         ADD     A,#0x38
   \   000069   F5..         MOV     ?V0,A
   \   00006B   5002         JNC     ??shell_backspace_1
   \   00006D   05..         INC     ?V1
   \                     ??shell_backspace_1:
   \   00006F   8882         MOV     DPL,R0
   \   000071   8983         MOV     DPH,R1
   \   000073   E0           MOVX    A,@DPTR
   \   000074   14           DEC     A
   \   000075   F0           MOVX    @DPTR,A
    394          	char * tail = &shellin->cmdline[shellin->tail--];
   \   000076   85..82       MOV     DPL,?V2
   \   000079   85..83       MOV     DPH,?V3
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F8           MOV     R0,A
   \   00007E   EE           MOV     A,R6
   \   00007F   28           ADD     A,R0
   \   000080   F8           MOV     R0,A
   \   000081   E4           CLR     A
   \   000082   3F           ADDC    A,R7
   \   000083   F9           MOV     R1,A
   \   000084   E8           MOV     A,R0
   \   000085   2438         ADD     A,#0x38
   \   000087   5001         JNC     ??shell_backspace_2
   \   000089   09           INC     R1
   \                     ??shell_backspace_2:
   \   00008A   85..82       MOV     DPL,?XSP + 0
   \   00008D   85..83       MOV     DPH,?XSP + 1
   \   000090   12....       LCALL   ??Subroutine58_0
   \                     ??CrossCallReturnLabel_117:
   \   000093   85..82       MOV     DPL,?V2
   \   000096   85..83       MOV     DPH,?V3
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   14           DEC     A
   \   00009B   F0           MOVX    @DPTR,A
    395          
    396          	/* 当输入过左右箭头时，需要作字符串插入左移处理，并作反馈回显
    397          	   如 abUcd 中删除U，需要左移cd，并打印两个 '\b' 使光标回到 ab 处 */
    398          	for (char * cp = edit - 1 ; edit < tail ; *cp++ = *edit++) {
   \   00009C   E5..         MOV     A,?V0
   \   00009E   24FF         ADD     A,#-0x1
   \   0000A0   F5..         MOV     ?V4,A
   \   0000A2   E5..         MOV     A,?V1
   \   0000A4   34FF         ADDC    A,#-0x1
   \   0000A6   F5..         MOV     ?V5,A
   \   0000A8   803F         SJMP    ??shell_backspace_3
    399          		*print++ = *edit;
   \                     ??shell_backspace_4:
   \   0000AA   85..82       MOV     DPL,?V0
   \   0000AD   85..83       MOV     DPH,?V1
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   8C82         MOV     DPL,R4
   \   0000B3   8D83         MOV     DPH,R5
   \   0000B5   F0           MOVX    @DPTR,A
   \   0000B6   A3           INC     DPTR
   \   0000B7   AC82         MOV     R4,DPL
   \   0000B9   AD83         MOV     R5,DPH
    400          		*printend++ = '\b';
   \   0000BB   8A82         MOV     DPL,R2
   \   0000BD   8B83         MOV     DPH,R3
   \   0000BF   7408         MOV     A,#0x8
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   E8           MOV     A,R0
   \   0000C3   FA           MOV     R2,A
   \   0000C4   E9           MOV     A,R1
   \   0000C5   FB           MOV     R3,A
    401          	}
   \   0000C6   85..82       MOV     DPL,?V0
   \   0000C9   85..83       MOV     DPH,?V1
   \   0000CC   12....       LCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_36:
   \   0000CF   85..82       MOV     DPL,?V0
   \   0000D2   85..83       MOV     DPH,?V1
   \   0000D5   A3           INC     DPTR
   \   0000D6   8582..       MOV     ?V0,DPL
   \   0000D9   8583..       MOV     ?V1,DPH
   \   0000DC   85..82       MOV     DPL,?V4
   \   0000DF   85..83       MOV     DPH,?V5
   \   0000E2   A3           INC     DPTR
   \   0000E3   8582..       MOV     ?V4,DPL
   \   0000E6   8583..       MOV     ?V5,DPH
   \                     ??shell_backspace_3:
   \   0000E9   8A82         MOV     DPL,R2
   \   0000EB   8B83         MOV     DPH,R3
   \   0000ED   A3           INC     DPTR
   \   0000EE   A882         MOV     R0,DPL
   \   0000F0   A983         MOV     R1,DPH
   \   0000F2   85..82       MOV     DPL,?XSP + 0
   \   0000F5   85..83       MOV     DPH,?XSP + 1
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   F5..         MOV     ?V6,A
   \   0000FB   A3           INC     DPTR
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   F5..         MOV     ?V7,A
   \   0000FF   C3           CLR     C
   \   000100   E5..         MOV     A,?V0
   \   000102   95..         SUBB    A,?V6
   \   000104   E5..         MOV     A,?V1
   \   000106   95..         SUBB    A,?V7
   \   000108   40A0         JC      ??shell_backspace_4
    402          
    403          	printbuf[0] = '\b';
   \   00010A   7402         MOV     A,#0x2
   \   00010C   12....       LCALL   ?XSTACK_DISP0_8
   \   00010F   7408         MOV     A,#0x8
   \   000111   F0           MOVX    @DPTR,A
    404          	*print = ' ';       //覆盖最后一个字符显示
   \   000112   8C82         MOV     DPL,R4
   \   000114   8D83         MOV     DPH,R5
   \   000116   7420         MOV     A,#0x20
   \   000118   12....       LCALL   ?Subroutine11
    405          	*printend++ = '\b'; //光标回显
   \                     ??CrossCallReturnLabel_16:
   \   00011B   7408         MOV     A,#0x8
   \   00011D   F0           MOVX    @DPTR,A
   \   00011E   E8           MOV     A,R0
   \   00011F   FA           MOV     R2,A
   \   000120   E9           MOV     A,R1
   \   000121   FB           MOV     R3,A
    406          
    407          	shellin->cmdline[shellin->tail] = 0;  //末端添加字符串结束符
   \   000122   85..82       MOV     DPL,?V2
   \   000125   85..83       MOV     DPH,?V3
   \   000128   E0           MOVX    A,@DPTR
   \   000129   F8           MOV     R0,A
   \   00012A   EE           MOV     A,R6
   \   00012B   28           ADD     A,R0
   \   00012C   F8           MOV     R0,A
   \   00012D   E4           CLR     A
   \   00012E   3F           ADDC    A,R7
   \   00012F   12....       LCALL   ?Subroutine3
    408          	printl(printbuf,printend-printbuf);
   \                     ??CrossCallReturnLabel_95:
   \   000132   601D         JZ      ??shell_backspace_5
   \   000134                ; Setup parameters for indirect call
   \   000134   7402         MOV     A,#0x2
   \   000136   12....       LCALL   ?XSTACK_DISP100_8
   \   000139   88..         MOV     ?V0,R0
   \   00013B   89..         MOV     ?V1,R1
   \   00013D   EA           MOV     A,R2
   \   00013E   C3           CLR     C
   \   00013F   95..         SUBB    A,?V0
   \   000141   FC           MOV     R4,A
   \   000142   EB           MOV     A,R3
   \   000143   95..         SUBB    A,?V1
   \   000145   FD           MOV     R5,A
   \   000146   7402         MOV     A,#0x2
   \   000148   12....       LCALL   ?XSTACK_DISP101_8
   \   00014B   12....       LCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_155:
   \   00014E   12....       LCALL   ?CALL_IND
    409          }
   \                     ??shell_backspace_5:
   \   000151   7466         MOV     A,#0x66
   \   000153   80..         SJMP    ??Subroutine53_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_83:
   \   000003   E4           CLR     A
   \   000004                REQUIRE ??Subroutine52_0
   \   000004                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine46
   \                     ??CrossCallReturnLabel_159:
   \   000004   E8           MOV     A,R0
   \   000005   49           ORL     A,R1
   \   000006   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V4
   \   000004   85..83       MOV     DPH,?V5
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET
    410          
    411          /**
    412            * @author   古么宁
    413            * @brief    命令行记录输入一个字符
    414            * @param    shellin : 输入交互
    415            * @param    ascii   : 键盘输入字符
    416            * @return   don't care
    417          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    418          static void shell_getchar(struct shell_input * shellin , char ascii)
   \                     shell_getchar:
    419          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 103
   \   000005   7499         MOV     A,#-0x67
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
    420          	if (shellin->tail + 1 >= COMMANDLINE_MAX_LEN){
   \   000012   EA           MOV     A,R2
   \   000013   246B         ADD     A,#0x6b
   \   000015   F5..         MOV     ?V0,A
   \   000017   E4           CLR     A
   \   000018   3B           ADDC    A,R3
   \   000019   F5..         MOV     ?V1,A
   \   00001B   85..82       MOV     DPL,?V0
   \   00001E   F583         MOV     DPH,A
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FD           MOV     R5,A
   \   000022   7900         MOV     R1,#0x0
   \   000024   2401         ADD     A,#0x1
   \   000026   5001         JNC     ??shell_getchar_0
   \   000028   09           INC     R1
   \                     ??shell_getchar_0:
   \   000029   C3           CLR     C
   \   00002A   9432         SUBB    A,#0x32
   \   00002C   E9           MOV     A,R1
   \   00002D   9400         SUBB    A,#0x0
   \   00002F   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000031   65D0         XRL     A,PSW
   \   000033   33           RLC     A
   \   000034   4003         JC      $+5
   \   000036   02....       LJMP    ??shell_getchar_1
    421          		return ;
    422          	}
    423          
    424          	if (shellin->tail == shellin->edit) {
   \   000039   EA           MOV     A,R2
   \   00003A   246A         ADD     A,#0x6a
   \   00003C   F8           MOV     R0,A
   \   00003D   E4           CLR     A
   \   00003E   3B           ADDC    A,R3
   \   00003F   F9           MOV     R1,A
   \   000040   8882         MOV     DPL,R0
   \   000042   8983         MOV     DPH,R1
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FC           MOV     R4,A
   \   000046   6D           XRL     A,R5
   \   000047   7036         JNZ     ??shell_getchar_2
    425          		shellin->cmdline[shellin->edit++] = ascii;
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   C0E0         PUSH    A
   \   000052   12....       LCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_74:
   \   000055   F582         MOV     DPL,A
   \   000057   E4           CLR     A
   \   000058   3D           ADDC    A,R5
   \   000059   F583         MOV     DPH,A
   \   00005B   D0E0         POP     A
   \   00005D   12....       LCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_23:
   \   000060   04           INC     A
   \   000061   12....       LCALL   ?Subroutine13
    426          		shellin->cmdline[++shellin->tail] = 0;
   \                     ??CrossCallReturnLabel_20:
   \   000064   04           INC     A
   \   000065   F0           MOVX    @DPTR,A
   \   000066   F8           MOV     R0,A
   \   000067   EA           MOV     A,R2
   \   000068   28           ADD     A,R0
   \   000069   F8           MOV     R0,A
   \   00006A   E4           CLR     A
   \   00006B   3B           ADDC    A,R3
   \   00006C   12....       LCALL   ?Subroutine3
    427          		printl(&ascii,1);
   \                     ??CrossCallReturnLabel_96:
   \   00006F   7003         JNZ     $+5
   \   000071   02....       LJMP    ??shell_getchar_1
   \   000074                ; Setup parameters for indirect call
   \   000074   7C01         MOV     R4,#0x1
   \   000076   7D00         MOV     R5,#0x0
   \   000078   AA..         MOV     R2,?XSP + 0
   \   00007A   AB..         MOV     R3,?XSP + 1
   \   00007C   02....       LJMP    ??shell_getchar_3
    428          	}
    429          	else {
    430          		/* 其实 else 分支完全可以处理 tail == edit 的情况 */
    431          		char  printbuf[COMMANDLINE_MAX_LEN*2]={0};
   \                     ??shell_getchar_2:
   \   00007F   90....       MOV     DPTR,#`?<Constant {0}>_1`
   \   000082   7403         MOV     A,#0x3
   \   000084   12....       LCALL   ?XSTACK_DISP102_8
   \   000087   7464         MOV     A,#0x64
   \   000089   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    432          		char *tail = &shellin->cmdline[shellin->tail++];
   \   00008C   85..82       MOV     DPL,?V0
   \   00008F   85..83       MOV     DPH,?V1
   \   000092   E0           MOVX    A,@DPTR
   \   000093   FC           MOV     R4,A
   \   000094   12....       LCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_75:
   \   000097   FC           MOV     R4,A
   \   000098   5001         JNC     ??shell_getchar_4
   \   00009A   0D           INC     R5
   \                     ??shell_getchar_4:
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   04           INC     A
   \   00009D   12....       LCALL   ?Subroutine14
    433          		char *edit = &shellin->cmdline[shellin->edit++];
   \                     ??CrossCallReturnLabel_22:
   \   0000A0   FE           MOV     R6,A
   \   0000A1   EA           MOV     A,R2
   \   0000A2   2E           ADD     A,R6
   \   0000A3   FE           MOV     R6,A
   \   0000A4   E4           CLR     A
   \   0000A5   3B           ADDC    A,R3
   \   0000A6   FF           MOV     R7,A
   \   0000A7   EE           MOV     A,R6
   \   0000A8   2438         ADD     A,#0x38
   \   0000AA   FE           MOV     R6,A
   \   0000AB   5001         JNC     ??shell_getchar_5
   \   0000AD   0F           INC     R7
   \                     ??shell_getchar_5:
   \   0000AE   7401         MOV     A,#0x1
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   EE           MOV     A,R6
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   A3           INC     DPTR
   \   0000B6   EF           MOV     A,R7
   \   0000B7   12....       LCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_24:
   \   0000BA   04           INC     A
   \   0000BB   F0           MOVX    @DPTR,A
    434          		char *print = printbuf + (tail - edit);
   \   0000BC   7401         MOV     A,#0x1
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   12....       LCALL   ??Subroutine54_0
   \                     ??CrossCallReturnLabel_101:
   \   0000C4   EC           MOV     A,R4
   \   0000C5   C3           CLR     C
   \   0000C6   9E           SUBB    A,R6
   \   0000C7   F8           MOV     R0,A
   \   0000C8   ED           MOV     A,R5
   \   0000C9   9F           SUBB    A,R7
   \   0000CA   F9           MOV     R1,A
   \   0000CB   7403         MOV     A,#0x3
   \   0000CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D0   E582         MOV     A,DPL
   \   0000D2   28           ADD     A,R0
   \   0000D3   F5..         MOV     ?V4,A
   \   0000D5   E583         MOV     A,DPH
   \   0000D7   39           ADDC    A,R1
   \   0000D8   F5..         MOV     ?V5,A
    435          		char *printend = print + 1;
   \   0000DA   85..82       MOV     DPL,?V4
   \   0000DD   F583         MOV     DPH,A
   \   0000DF   A3           INC     DPTR
   \   0000E0   A882         MOV     R0,DPL
   \   0000E2   A983         MOV     R1,DPH
    436          
    437          		/* 当输入过左右箭头时，需要作字符串插入右移处理，并作反馈回显
    438          		   如 abcd 中在bc插入U，需要右移cd，并打印两个 '\b' 使光标回到 abU 处 */
    439          		for (char *cp = tail - 1; cp >= edit ; *tail-- = *cp--) {
   \   0000E4   EC           MOV     A,R4
   \   0000E5   24FF         ADD     A,#-0x1
   \   0000E7   F5..         MOV     ?V2,A
   \   0000E9   ED           MOV     A,R5
   \   0000EA   34FF         ADDC    A,#-0x1
   \   0000EC   F5..         MOV     ?V3,A
   \   0000EE   8041         SJMP    ??shell_getchar_6
    440          			*print-- = *cp;
   \                     ??shell_getchar_7:
   \   0000F0   85..82       MOV     DPL,?V2
   \   0000F3   85..83       MOV     DPH,?V3
   \   0000F6   12....       LCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_37:
   \   0000F9   E5..         MOV     A,?V4
   \   0000FB   24FF         ADD     A,#-0x1
   \   0000FD   F5..         MOV     ?V4,A
   \   0000FF   E5..         MOV     A,?V5
   \   000101   34FF         ADDC    A,#-0x1
   \   000103   F5..         MOV     ?V5,A
    441          			*printend++ = '\b';
   \   000105   8882         MOV     DPL,R0
   \   000107   8983         MOV     DPH,R1
   \   000109   7408         MOV     A,#0x8
   \   00010B   F0           MOVX    @DPTR,A
   \   00010C   A3           INC     DPTR
   \   00010D   A882         MOV     R0,DPL
   \   00010F   A983         MOV     R1,DPH
    442          		}
   \   000111   85..82       MOV     DPL,?V2
   \   000114   85..83       MOV     DPH,?V3
   \   000117   E0           MOVX    A,@DPTR
   \   000118   8C82         MOV     DPL,R4
   \   00011A   8D83         MOV     DPH,R5
   \   00011C   F0           MOVX    @DPTR,A
   \   00011D   E5..         MOV     A,?V2
   \   00011F   24FF         ADD     A,#-0x1
   \   000121   F5..         MOV     ?V2,A
   \   000123   E5..         MOV     A,?V3
   \   000125   34FF         ADDC    A,#-0x1
   \   000127   F5..         MOV     ?V3,A
   \   000129   EC           MOV     A,R4
   \   00012A   24FF         ADD     A,#-0x1
   \   00012C   1C           DEC     R4
   \   00012D   ED           MOV     A,R5
   \   00012E   34FF         ADDC    A,#-0x1
   \   000130   FD           MOV     R5,A
   \                     ??shell_getchar_6:
   \   000131   C3           CLR     C
   \   000132   E5..         MOV     A,?V2
   \   000134   9E           SUBB    A,R6
   \   000135   E5..         MOV     A,?V3
   \   000137   9F           SUBB    A,R7
   \   000138   50B6         JNC     ??shell_getchar_7
    443          
    444          		/* 插入字符 */
    445          		*print = ascii; 
   \   00013A   85..82       MOV     DPL,?XSP + 0
   \   00013D   85..83       MOV     DPH,?XSP + 1
   \   000140   12....       LCALL   ?Subroutine23
    446          		*edit  = ascii;
   \                     ??CrossCallReturnLabel_38:
   \   000143   85..82       MOV     DPL,?XSP + 0
   \   000146   85..83       MOV     DPH,?XSP + 1
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   C0E0         PUSH    A
   \   00014C   7401         MOV     A,#0x1
   \   00014E   12....       LCALL   ?XSTACK_DISP0_8
   \   000151   12....       LCALL   ?Subroutine30
   \                     ??CrossCallReturnLabel_49:
   \   000154   D0E0         POP     A
   \   000156   12....       LCALL   ?Subroutine13
    447          		shellin->cmdline[shellin->tail] = 0 ;
   \                     ??CrossCallReturnLabel_21:
   \   000159   FC           MOV     R4,A
   \   00015A   EA           MOV     A,R2
   \   00015B   2C           ADD     A,R4
   \   00015C   FA           MOV     R2,A
   \   00015D   E4           CLR     A
   \   00015E   3B           ADDC    A,R3
   \   00015F   FB           MOV     R3,A
   \   000160   EA           MOV     A,R2
   \   000161   2438         ADD     A,#0x38
   \   000163   12....       LCALL   ?Subroutine40
    448          		printl(printbuf,printend - printbuf);
   \                     ??CrossCallReturnLabel_70:
   \   000166   90....       MOV     DPTR,#current_puts
   \   000169   12....       LCALL   ??Subroutine55_0
   \                     ??CrossCallReturnLabel_107:
   \   00016C   EA           MOV     A,R2
   \   00016D   4B           ORL     A,R3
   \   00016E   601E         JZ      ??shell_getchar_1
   \   000170                ; Setup parameters for indirect call
   \   000170   7403         MOV     A,#0x3
   \   000172   12....       LCALL   ?XSTACK_DISP101_8
   \   000175   8A..         MOV     ?V0,R2
   \   000177   8B..         MOV     ?V1,R3
   \   000179   E8           MOV     A,R0
   \   00017A   C3           CLR     C
   \   00017B   95..         SUBB    A,?V0
   \   00017D   FC           MOV     R4,A
   \   00017E   E9           MOV     A,R1
   \   00017F   95..         SUBB    A,?V1
   \   000181   FD           MOV     R5,A
   \   000182   90....       MOV     DPTR,#current_puts
   \   000185   E0           MOVX    A,@DPTR
   \   000186   F8           MOV     R0,A
   \   000187   A3           INC     DPTR
    449          	}
   \                     ??shell_getchar_3:
   \   000188   12....       LCALL   ??Subroutine65_0
   \                     ??CrossCallReturnLabel_143:
   \   00018B   12....       LCALL   ?CALL_IND
    450          }
   \                     ??shell_getchar_1:
   \   00018E   7467         MOV     A,#0x67
   \   000190   12....       LCALL   ?DEALLOC_XSTACK8
   \   000193   02....       LJMP    ?Subroutine1

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   EA           MOV     A,R2
   \   000001   2C           ADD     A,R4
   \   000002   FC           MOV     R4,A
   \   000003   E4           CLR     A
   \   000004   3B           ADDC    A,R3
   \   000005   FD           MOV     R5,A
   \   000006   EC           MOV     A,R4
   \   000007   2438         ADD     A,#0x38
   \   000009   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8C82         MOV     DPL,R4
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3B           ADDC    A,R3
   \   000004   F583         MOV     DPH,A
   \   000006   E4           CLR     A
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    451          
    452          /**
    453            * @author   古么宁
    454            * @brief    命令行解析输入
    455            * @param    cmdroot : 检索根，起始检索点
    456            * @param    shellin : 输入交互
    457            * @return   don't care
    458          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    459          static void shell_parse(cmd_root_t * cmdroot , struct shell_input * shellin)
   \                     shell_parse:
    460          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 28
   \   000005   74E4         MOV     A,#-0x1c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7412         MOV     A,#0x12
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ??Subroutine51_0
   \                     ??CrossCallReturnLabel_89:
   \   000012   7402         MOV     A,#0x2
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   EC           MOV     A,R4
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   ED           MOV     A,R5
   \   00001B   F0           MOVX    @DPTR,A
    461          	union uncmd unCmd ;
    462          	uint32_t len = 0;
   \   00001C   7418         MOV     A,#0x18
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   12....       LCALL   ?Subroutine10
    463          	uint32_t sum = 0;
   \                     ??CrossCallReturnLabel_12:
   \   000024   7414         MOV     A,#0x14
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   12....       LCALL   ?Subroutine9
    464          	uint32_t fcrc8 = 0;
   \                     ??CrossCallReturnLabel_9:
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ?Subroutine10
    465          	uint32_t bcrc8 = 0;
   \                     ??CrossCallReturnLabel_13:
   \   000032   7406         MOV     A,#0x6
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   12....       LCALL   ?Subroutine10
    466          	char  *  str = shellin->cmdline;
   \                     ??CrossCallReturnLabel_14:
   \   00003A   7402         MOV     A,#0x2
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   12....       LCALL   ?Subroutine29
   \                     ??CrossCallReturnLabel_48:
   \   000042   7404         MOV     A,#0x4
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   12....       LCALL   ??Subroutine57_0
   \                     ??CrossCallReturnLabel_121:
   \   00004A   7404         MOV     A,#0x4
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   8008         SJMP    ??shell_parse_0
    467          	struct shellcommand * cmdmatch;
    468          
    469          	/* Shave off any leading spaces */
    470          	for ( ; ' ' == *str ; ++str) ;	
   \                     ??shell_parse_1:
   \   000058   E0           MOVX    A,@DPTR
   \   000059   2401         ADD     A,#0x1
   \   00005B   08           INC     R0
   \   00005C   12....       LCALL   ?Subroutine43
   \                     ??CrossCallReturnLabel_115:
   \   00005F   E8           MOV     A,R0
   \                     ??shell_parse_0:
   \   000060   12....       LCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_5:
   \   000063   6420         XRL     A,#0x20
   \   000065   85..82       MOV     DPL,?XSP + 0
   \   000068   85..83       MOV     DPH,?XSP + 1
   \   00006B   60EB         JZ      ??shell_parse_1
    471          
    472          	if (0 == *str)
   \   00006D   12....       LCALL   ??Subroutine64_0
   \                     ??CrossCallReturnLabel_149:
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F9           MOV     R1,A
   \   000072   7003         JNZ     $+5
   \   000074   02....       LJMP    ??shell_parse_2
    473          		goto PARSE_END;
    474          
    475          	unCmd.part.FirstChar = *str ;
   \   000077   740E         MOV     A,#0xe
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   78..         MOV     R0,#?V0
   \   00007E   12....       LCALL   ?L_MOV_X
   \   000081   90....       MOV     DPTR,#__Constant_3ffffff
   \   000084   78..         MOV     R0,#?V0
   \   000086   12....       LCALL   ?L_AND_X
   \   000089   89..         MOV     ?V4,R1
   \   00008B   E4           CLR     A
   \   00008C   F5..         MOV     ?V5,A
   \   00008E   F5..         MOV     ?V6,A
   \   000090   F5..         MOV     ?V7,A
   \   000092   741A         MOV     A,#0x1a
   \   000094   78..         MOV     R0,#?V4
   \   000096   12....       LCALL   ?L_SHL
   \   000099   78..         MOV     R0,#?V0
   \   00009B   79..         MOV     R1,#?V4
   \   00009D   12....       LCALL   ?L_IOR
   \   0000A0   740E         MOV     A,#0xe
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   78..         MOV     R0,#?V0
   \   0000A7   12....       LCALL   ?L_MOV_TO_X
   \   0000AA   8068         SJMP    ??shell_parse_3
    476          	for (; (*str) && (*str != ' ') ; ++str ,++len) {
    477          		sum += *str;
   \                     ??shell_parse_4:
   \   0000AC   8A..         MOV     ?V0,R2
   \   0000AE   E4           CLR     A
   \   0000AF   F5..         MOV     ?V1,A
   \   0000B1   F5..         MOV     ?V2,A
   \   0000B3   F5..         MOV     ?V3,A
   \   0000B5   7414         MOV     A,#0x14
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   78..         MOV     R0,#?V0
   \   0000BC   12....       LCALL   ?L_ADD_TO_X
    478          		fcrc8 = F_CRC8_Table[fcrc8^*str];
   \   0000BF   740A         MOV     A,#0xa
   \   0000C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C4   78..         MOV     R0,#?V0
   \   0000C6   12....       LCALL   ?L_MOV_X
   \   0000C9   E5..         MOV     A,?V0
   \   0000CB   6A           XRL     A,R2
   \   0000CC   F8           MOV     R0,A
   \   0000CD   A9..         MOV     R1,?V1
   \   0000CF   74..         MOV     A,#F_CRC8_Table & 0xff
   \   0000D1   28           ADD     A,R0
   \   0000D2   F582         MOV     DPL,A
   \   0000D4   74..         MOV     A,#(F_CRC8_Table >> 8) & 0xff
   \   0000D6   39           ADDC    A,R1
   \   0000D7   F583         MOV     DPH,A
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   FC           MOV     R4,A
   \   0000DB   740A         MOV     A,#0xa
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   12....       LCALL   ?Subroutine4
    479          		bcrc8 = B_CRC8_Table[bcrc8^*str];
   \                     ??CrossCallReturnLabel_1:
   \   0000E3   7406         MOV     A,#0x6
   \   0000E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E8   78..         MOV     R0,#?V0
   \   0000EA   12....       LCALL   ?L_MOV_X
   \   0000ED   12....       LCALL   ?Subroutine36
    480          	}
   \                     ??CrossCallReturnLabel_62:
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   12....       LCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_2:
   \   0000F6   85..82       MOV     DPL,?XSP + 0
   \   0000F9   85..83       MOV     DPH,?XSP + 1
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   2401         ADD     A,#0x1
   \   0000FF   12....       LCALL   ??Subroutine56_0
   \                     ??CrossCallReturnLabel_130:
   \   000102   90....       MOV     DPTR,#__Constant_1
   \   000105   78..         MOV     R0,#?V0
   \   000107   12....       LCALL   ?L_MOV_X
   \   00010A   7418         MOV     A,#0x18
   \   00010C   12....       LCALL   ?XSTACK_DISP0_8
   \   00010F   78..         MOV     R0,#?V0
   \   000111   12....       LCALL   ?L_ADD_TO_X
   \                     ??shell_parse_3:
   \   000114   12....       LCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_88:
   \   000117   6005         JZ      ??shell_parse_5
   \   000119   7420         MOV     A,#0x20
   \   00011B   6A           XRL     A,R2
   \   00011C   708E         JNZ     ??shell_parse_4
    481          
    482          	unCmd.part.Len = len;
    483          	unCmd.part.Sum = sum;
    484          	unCmd.part.CRC1 = fcrc8;
    485          	unCmd.part.CRC2 = bcrc8;
    486          
    487          	cmdmatch = shell_search_cmd(cmdroot,unCmd.ID);
   \                     ??shell_parse_5:
   \   00011E   740E         MOV     A,#0xe
   \   000120   12....       LCALL   ?XSTACK_DISP0_8
   \   000123   78..         MOV     R0,#?V4
   \   000125   12....       LCALL   ?L_MOV_X
   \   000128   90....       MOV     DPTR,#__Constant_fc000000
   \   00012B   78..         MOV     R0,#?V4
   \   00012D   12....       LCALL   ?L_AND_X
   \   000130   7418         MOV     A,#0x18
   \   000132   12....       LCALL   ?XSTACK_DISP0_8
   \   000135   78..         MOV     R0,#?V0
   \   000137   12....       LCALL   ?L_MOV_X
   \   00013A   7415         MOV     A,#0x15
   \   00013C   78..         MOV     R0,#?V0
   \   00013E   12....       LCALL   ?L_SHL
   \   000141   90....       MOV     DPTR,#__Constant_3e00000
   \   000144   78..         MOV     R0,#?V0
   \   000146   12....       LCALL   ?L_AND_X
   \   000149   78..         MOV     R0,#?V4
   \   00014B   79..         MOV     R1,#?V0
   \   00014D   12....       LCALL   ?L_IOR
   \   000150   7414         MOV     A,#0x14
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   78..         MOV     R0,#?V0
   \   000157   12....       LCALL   ?L_MOV_X
   \   00015A   7410         MOV     A,#0x10
   \   00015C   78..         MOV     R0,#?V0
   \   00015E   12....       LCALL   ?L_SHL
   \   000161   90....       MOV     DPTR,#__Constant_1f0000
   \   000164   78..         MOV     R0,#?V0
   \   000166   12....       LCALL   ?L_AND_X
   \   000169   78..         MOV     R0,#?V4
   \   00016B   79..         MOV     R1,#?V0
   \   00016D   12....       LCALL   ?L_IOR
   \   000170   740A         MOV     A,#0xa
   \   000172   12....       LCALL   ?XSTACK_DISP0_8
   \   000175   78..         MOV     R0,#?V0
   \   000177   12....       LCALL   ?L_MOV_X
   \   00017A   7408         MOV     A,#0x8
   \   00017C   78..         MOV     R0,#?V0
   \   00017E   12....       LCALL   ?L_SHL
   \   000181   90....       MOV     DPTR,#__Constant_ff00
   \   000184   78..         MOV     R0,#?V0
   \   000186   12....       LCALL   ?L_AND_X
   \   000189   78..         MOV     R0,#?V4
   \   00018B   79..         MOV     R1,#?V0
   \   00018D   12....       LCALL   ?L_IOR
   \   000190   7406         MOV     A,#0x6
   \   000192   12....       LCALL   ?XSTACK_DISP0_8
   \   000195   78..         MOV     R0,#?V0
   \   000197   12....       LCALL   ?L_MOV_X
   \   00019A   90....       MOV     DPTR,#__Constant_ff
   \   00019D   78..         MOV     R0,#?V0
   \   00019F   12....       LCALL   ?L_AND_X
   \   0001A2   78..         MOV     R0,#?V4
   \   0001A4   79..         MOV     R1,#?V0
   \   0001A6   12....       LCALL   ?L_IOR
   \   0001A9   7412         MOV     A,#0x12
   \   0001AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AE   12....       LCALL   ??Subroutine63_0
   \                     ??CrossCallReturnLabel_152:
   \   0001B1   8004         SJMP    ??shell_parse_6
   \                     ??shell_parse_7:
   \   0001B3   8A82         MOV     DPL,R2
   \   0001B5   8B83         MOV     DPH,R3
   \                     ??shell_parse_6:
   \   0001B7   12....       LCALL   ??Subroutine55_0
   \                     ??CrossCallReturnLabel_108:
   \   0001BA   EA           MOV     A,R2
   \   0001BB   4B           ORL     A,R3
   \   0001BC   7003         JNZ     $+5
   \   0001BE   02....       LJMP    ??shell_parse_8
   \   0001C1   8A82         MOV     DPL,R2
   \   0001C3   8B83         MOV     DPH,R3
   \   0001C5   A3           INC     DPTR
   \   0001C6   A3           INC     DPTR
   \   0001C7   A3           INC     DPTR
   \   0001C8   A3           INC     DPTR
   \   0001C9   A3           INC     DPTR
   \   0001CA   A3           INC     DPTR
   \   0001CB   78..         MOV     R0,#?V0
   \   0001CD   12....       LCALL   ?L_MOV_X
   \   0001D0   78..         MOV     R0,#?V0
   \   0001D2   79..         MOV     R1,#?V4
   \   0001D4   12....       LCALL   ?UL_GT
   \   0001D7   406A         JC      ??shell_parse_8
   \   0001D9   78..         MOV     R0,#?V0
   \   0001DB   79..         MOV     R1,#?V4
   \   0001DD   12....       LCALL   ?L_EQ
   \   0001E0   70D1         JNZ     ??shell_parse_7
   \   0001E2   EA           MOV     A,R2
   \   0001E3   FC           MOV     R4,A
   \   0001E4   EB           MOV     A,R3
   \   0001E5   FD           MOV     R5,A
    488          	if (cmdmatch != NULL) {
   \   0001E6   EC           MOV     A,R4
   \   0001E7   4D           ORL     A,R5
   \   0001E8   6059         JZ      ??shell_parse_8
    489          		/* 判断是否为有选项的命令 */
    490          		shellcfm_t * confirm ;
    491          		confirm = container_of(cmdmatch, struct shellconfirm, cmd);
    492          		if (confirm->flag == CONFIRM_FLAG) {
   \   0001EA   90....       MOV     DPTR,#__Constant_87654321
   \   0001ED   78..         MOV     R0,#?V0
   \   0001EF   12....       LCALL   ?L_MOV_X
   \   0001F2   EC           MOV     A,R4
   \   0001F3   240C         ADD     A,#0xc
   \   0001F5   F582         MOV     DPL,A
   \   0001F7   E4           CLR     A
   \   0001F8   3D           ADDC    A,R5
   \   0001F9   F583         MOV     DPH,A
   \   0001FB   78..         MOV     R0,#?V0
   \   0001FD   12....       LCALL   ?L_EQ_X
   \   000200   7029         JNZ     ??shell_parse_9
    493          			shell_confirm(shellin,confirm->prompt,cmdmatch->func);
   \   000202                ; Setup parameters for call to function shell_confirm
   \   000202   8C82         MOV     DPL,R4
   \   000204   8D83         MOV     DPH,R5
   \   000206   A3           INC     DPTR
   \   000207   A3           INC     DPTR
   \   000208   A3           INC     DPTR
   \   000209   A3           INC     DPTR
   \   00020A   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00020D   8C82         MOV     DPL,R4
   \   00020F   8D83         MOV     DPH,R5
   \   000211   A3           INC     DPTR
   \   000212   A3           INC     DPTR
   \   000213   A3           INC     DPTR
   \   000214   A3           INC     DPTR
   \   000215   A3           INC     DPTR
   \   000216   A3           INC     DPTR
   \   000217   A3           INC     DPTR
   \   000218   A3           INC     DPTR
   \   000219   A3           INC     DPTR
   \   00021A   A3           INC     DPTR
   \   00021B   12....       LCALL   ?Subroutine26
    494          		}
   \                     ??CrossCallReturnLabel_43:
   \   00021E   7404         MOV     A,#0x4
   \   000220   12....       LCALL   ?XSTACK_DISP0_8
   \   000223   12....       LCALL   ??Subroutine55_0
   \                     ??CrossCallReturnLabel_109:
   \   000226   12....       LCALL   shell_confirm
   \   000229   8027         SJMP    ??shell_parse_10
    495          		else {
    496          			cmdmatch->func(shellin->cmdline);
   \                     ??shell_parse_9:
   \   00022B                ; Setup parameters for indirect call
   \   00022B   7404         MOV     A,#0x4
   \   00022D   12....       LCALL   ?XSTACK_DISP0_8
   \   000230   12....       LCALL   ??Subroutine55_0
    497          		}
    498          	}
   \                     ??CrossCallReturnLabel_110:
   \   000233   8C82         MOV     DPL,R4
   \   000235   8D83         MOV     DPH,R5
   \   000237   A3           INC     DPTR
   \   000238   A3           INC     DPTR
   \   000239   A3           INC     DPTR
   \   00023A   A3           INC     DPTR
   \   00023B   12....       LCALL   ??Subroutine63_0
   \                     ??CrossCallReturnLabel_153:
   \   00023E   12....       LCALL   ?CALL_IND
   \   000241   8014         SJMP    ??shell_parse_2
    499          	else {
    500          		printf("\r\n\tno reply:%s\r\n",shellin->cmdline);
   \                     ??shell_parse_8:
   \   000243                ; Setup parameters for call to function printf
   \   000243   7404         MOV     A,#0x4
   \   000245   12....       LCALL   ?XSTACK_DISP0_8
   \   000248   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00024B   7A..         MOV     R2,#`?<Constant "\\r\\n\\tno reply:%s\\r\\n">` & 0xff
   \   00024D   7B..         MOV     R3,#(`?<Constant "\\r\\n\\tno reply:%s\\r\\n">` >> 8) & 0xff
   \   00024F   12....       LCALL   printf
   \                     ??shell_parse_10:
   \   000252   7402         MOV     A,#0x2
   \   000254   12....       LCALL   ?DEALLOC_XSTACK8
    501          	}
    502          	
    503          PARSE_END:
    504          	shellin->tail = 0;//清空当前命令行输入
   \                     ??shell_parse_2:
   \   000257   7402         MOV     A,#0x2
   \   000259   12....       LCALL   ?XSTACK_DISP0_8
   \   00025C   E0           MOVX    A,@DPTR
   \   00025D   F8           MOV     R0,A
   \   00025E   A3           INC     DPTR
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   C8           XCH     A,R0
   \   000261   246B         ADD     A,#0x6b
   \   000263   F582         MOV     DPL,A
   \   000265   E4           CLR     A
   \   000266   38           ADDC    A,R0
   \   000267   F583         MOV     DPH,A
   \   000269   E4           CLR     A
   \   00026A   F0           MOVX    @DPTR,A
    505          	shellin->edit = 0;
   \   00026B   7402         MOV     A,#0x2
   \   00026D   12....       LCALL   ?XSTACK_DISP0_8
   \   000270   E0           MOVX    A,@DPTR
   \   000271   F8           MOV     R0,A
   \   000272   A3           INC     DPTR
   \   000273   E0           MOVX    A,@DPTR
   \   000274   C8           XCH     A,R0
   \   000275   246A         ADD     A,#0x6a
   \   000277   F582         MOV     DPL,A
   \   000279   E4           CLR     A
   \   00027A   38           ADDC    A,R0
   \   00027B   F583         MOV     DPH,A
   \   00027D   E4           CLR     A
   \   00027E   F0           MOVX    @DPTR,A
    506          	return ;
   \   00027F   741C         MOV     A,#0x1c
   \   000281   02....       LJMP    ??Subroutine53_0
    507          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   F8           MOV     R0,A
   \   000001   12....       LCALL   ?Subroutine43
   \                     ??CrossCallReturnLabel_116:
   \   000004                REQUIRE ??Subroutine57_0
   \   000004                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   3400         ADDC    A,#0x0
   \   000004   F9           MOV     R1,A
   \   000005   85..82       MOV     DPL,?XSP + 0
   \   000008   85..83       MOV     DPH,?XSP + 1
   \   00000B   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E5..         MOV     A,?V0
   \   000002   6A           XRL     A,R2
   \   000003   F8           MOV     R0,A
   \   000004   A9..         MOV     R1,?V1
   \   000006   74..         MOV     A,#B_CRC8_Table & 0xff
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   74..         MOV     A,#(B_CRC8_Table >> 8) & 0xff
   \   00000D   39           ADDC    A,R1
   \   00000E   F583         MOV     DPH,A
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FC           MOV     R4,A
   \   000012   7406         MOV     A,#0x6
   \   000014   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine42
   \                     ??CrossCallReturnLabel_77:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   740A         MOV     A,#0xa
   \   000006   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   85..82       MOV     DPL,?XSP + 0
   \   000007   85..83       MOV     DPH,?XSP + 1
   \   00000A   12....       LCALL   ?Subroutine44
   \                     ??CrossCallReturnLabel_164:
   \   00000D   22           RET
    508          
    509          /**
    510            * @brief    控制台清屏
    511            * @param    arg  : 命令行内存
    512            * @return   don't care
    513          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    514          static void shell_clean_screen(void * arg)
   \                     shell_clean_screen:
    515          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    516          	struct shell_input * shellin ; 
    517          	shellin = container_of(arg, struct shell_input, cmdline);
    518          	printf("\033[2J\033[%ld;%ldH%s",(int32_t)0,(int32_t)0,shellin->sign);
   \   000005                ; Setup parameters for call to function printf
   \   000005   EA           MOV     A,R2
   \   000006   24CE         ADD     A,#-0x32
   \   000008   F5..         MOV     ?V0,A
   \   00000A   EB           MOV     A,R3
   \   00000B   34FF         ADDC    A,#-0x1
   \   00000D   F5..         MOV     ?V1,A
   \   00000F   78..         MOV     R0,#?V0
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   90....       MOV     DPTR,#__Constant_0
   \   000017   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00001A   90....       MOV     DPTR,#__Constant_0
   \   00001D   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000020   7A..         MOV     R2,#`?<Constant "\\033[2J\\033[%ld;%ldH%s">` & 0xff
   \   000022   7B..         MOV     R3,#(`?<Constant "\\033[2J\\033[%ld;%ldH%s">` >> 8) & 0xff
   \   000024   12....       LCALL   printf
   \   000027   740A         MOV     A,#0xa
   \   000029   80..         SJMP    ??Subroutine59_0
    519          	return ;
    520          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine60_0
   \   000003                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?FUNC_LEAVE_XDATA
    521          
    522          /**
    523            * @author   古么宁
    524            * @brief    显示所有注册了的命令
    525            * @param    arg  : 命令行内存
    526            * @return   don't care
    527          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    528          static void shell_list_cmd(void * arg)
   \                     shell_list_cmd:
    529          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine12
    530          	struct shell_input * shellin ;
    531          	struct shellcommand * cmd;
    532          	uint32_t firstchar = 0;
   \                     ??CrossCallReturnLabel_93:
   \   00000D   75..00       MOV     ?V4,#0x0
   \   000010   75..00       MOV     ?V5,#0x0
   \   000013   75..00       MOV     ?V6,#0x0
   \   000016   75..00       MOV     ?V7,#0x0
    533          	cmd_entry_t  * node ;
    534          	
    535          	for (node = FIRST(&shellcmdroot) ; node; node = NEXT(node)){
   \   000019   90....       MOV     DPTR,#shellcmdroot
   \   00001C   8063         SJMP    ??shell_list_cmd_0
    536          		cmd = container_of(node,struct shellcommand, node);
    537          		if (firstchar != (cmd->ID & 0xfc000000)) {
   \                     ??shell_list_cmd_1:
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   78..         MOV     R0,#?V0
   \   00002A   12....       LCALL   ?L_MOV_X
   \   00002D   90....       MOV     DPTR,#__Constant_fc000000
   \   000030   78..         MOV     R0,#?V0
   \   000032   12....       LCALL   ?L_AND_X
   \   000035   78..         MOV     R0,#?V4
   \   000037   79..         MOV     R1,#?V0
   \   000039   12....       LCALL   ?L_EQ
   \   00003C   602A         JZ      ??shell_list_cmd_2
    538          			firstchar = cmd->ID & 0xfc000000;
   \   00003E   85....       MOV     ?V4,?V0
   \   000041   85....       MOV     ?V5,?V1
   \   000044   85....       MOV     ?V6,?V2
   \   000047   85....       MOV     ?V7,?V3
    539          			printf("\r\n(%c)------",(char)((firstchar>>26)|0x40));
   \   00004A                ; Setup parameters for call to function printf
   \   00004A   741A         MOV     A,#0x1a
   \   00004C   78..         MOV     R0,#?V0
   \   00004E   12....       LCALL   ?UL_SHR
   \   000051   E5..         MOV     A,?V0
   \   000053   4440         ORL     A,#0x40
   \   000055   F5..         MOV     ?V0,A
   \   000057   78..         MOV     R0,#?V0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   7A..         MOV     R2,#`?<Constant "\\r\\n(%c)------">` & 0xff
   \   00005E   7B..         MOV     R3,#(`?<Constant "\\r\\n(%c)------">` >> 8) & 0xff
   \   000060   12....       LCALL   printf
   \   000063   7402         MOV     A,#0x2
   \   000065   12....       LCALL   ?DEALLOC_XSTACK8
    540          		}
    541          		printf("\r\n\t%s", cmd->name);
   \                     ??shell_list_cmd_2:
   \   000068                ; Setup parameters for call to function printf
   \   000068   8E82         MOV     DPL,R6
   \   00006A   8F83         MOV     DPH,R7
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000071   7A..         MOV     R2,#`?<Constant "\\r\\n\\t%s">` & 0xff
   \   000073   7B..         MOV     R3,#(`?<Constant "\\r\\n\\t%s">` >> 8) & 0xff
   \   000075   12....       LCALL   printf
   \   000078   7402         MOV     A,#0x2
   \   00007A   12....       LCALL   ?DEALLOC_XSTACK8
    542          	}
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \                     ??shell_list_cmd_0:
   \   000081   12....       LCALL   ??Subroutine54_0
   \                     ??CrossCallReturnLabel_102:
   \   000084   EE           MOV     A,R6
   \   000085   4F           ORL     A,R7
   \   000086   7096         JNZ     ??shell_list_cmd_1
    543          
    544          	shellin = container_of(arg, struct shell_input, cmdline);
    545          	printf("\r\n\r\n%s",shellin->sign);
   \   000088                ; Setup parameters for call to function printf
   \   000088   85..82       MOV     DPL,?XSP + 0
   \   00008B   85..83       MOV     DPH,?XSP + 1
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   24CE         ADD     A,#-0x32
   \   000091   F5..         MOV     ?V0,A
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   34FF         ADDC    A,#-0x1
   \   000097   F5..         MOV     ?V1,A
   \   000099   78..         MOV     R0,#?V0
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009E   7A..         MOV     R2,#`?<Constant "\\r\\n\\r\\n%s">` & 0xff
   \   0000A0   7B..         MOV     R3,#(`?<Constant "\\r\\n\\r\\n%s">` >> 8) & 0xff
   \   0000A2   12....       LCALL   printf
   \   0000A5   7402         MOV     A,#0x2
   \   0000A7   12....       LCALL   ?DEALLOC_XSTACK8
    546          }
   \   0000AA   7402         MOV     A,#0x2
   \   0000AC   02....       LJMP    ??Subroutine53_0
    547          
    548          /**
    549            * @author   古么宁
    550            * @brief    注册一个命令号和对应的命令函数 
    551            * @note     前缀为 '_' 表示不建议直接调用此函数
    552            * @param    cmd_name : 命令名
    553            * @param    cmd_func : 命令名对应的执行函数
    554            * @param    newcmd   : 命令控制块对应的指针
    555            * @param    confirm  : 命令是否需要确认信息
    556            * @return   don't care
    557          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    558          void _shell_register(struct shellcommand * newcmd,char * cmd_name, cmd_fn_t cmd_func)
   \                     _shell_register:
    559          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV     A,#-0x16
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_94:
   \   00000D   7404         MOV     A,#0x4
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   EC           MOV     A,R4
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   ED           MOV     A,R5
   \   000016   F0           MOVX    @DPTR,A
    560          	char * str = cmd_name;
   \   000017   7404         MOV     A,#0x4
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ??Subroutine62_0
   \                     ??CrossCallReturnLabel_136:
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   12....       LCALL   ??Subroutine57_0
    561          	union uncmd unCmd ;
    562          	uint32_t clen;
    563          	uint32_t fcrc8 = 0;
   \                     ??CrossCallReturnLabel_122:
   \   000027   75..00       MOV     ?V4,#0x0
   \   00002A   75..00       MOV     ?V5,#0x0
   \   00002D   75..00       MOV     ?V6,#0x0
   \   000030   75..00       MOV     ?V7,#0x0
    564          	uint32_t bcrc8 = 0;
   \   000033   7406         MOV     A,#0x6
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   12....       LCALL   ?Subroutine10
    565          	uint32_t sum = 0;
   \                     ??CrossCallReturnLabel_15:
   \   00003B   740E         MOV     A,#0xe
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   12....       LCALL   ?Subroutine9
    566          
    567          	for (clen = 0; *str ; ++clen,++str) {
   \                     ??CrossCallReturnLabel_10:
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   12....       LCALL   ?Subroutine42
   \                     ??CrossCallReturnLabel_76:
   \   000049   8060         SJMP    ??_shell_register_0
    568          		sum += *str;
   \                     ??_shell_register_1:
   \   00004B   8A..         MOV     ?V0,R2
   \   00004D   E4           CLR     A
   \   00004E   F5..         MOV     ?V1,A
   \   000050   F5..         MOV     ?V2,A
   \   000052   F5..         MOV     ?V3,A
   \   000054   740E         MOV     A,#0xe
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   78..         MOV     R0,#?V0
   \   00005B   12....       LCALL   ?L_ADD_TO_X
    569          		fcrc8 = F_CRC8_Table[fcrc8^*str];
   \   00005E   E5..         MOV     A,?V4
   \   000060   6A           XRL     A,R2
   \   000061   F8           MOV     R0,A
   \   000062   74..         MOV     A,#F_CRC8_Table & 0xff
   \   000064   28           ADD     A,R0
   \   000065   F582         MOV     DPL,A
   \   000067   E4           CLR     A
   \   000068   34..         ADDC    A,#(F_CRC8_Table >> 8) & 0xff
   \   00006A   F583         MOV     DPH,A
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F5..         MOV     ?V4,A
    570          		bcrc8 = B_CRC8_Table[bcrc8^*str];
   \   00006F   7406         MOV     A,#0x6
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   78..         MOV     R0,#?V0
   \   000076   12....       LCALL   ?L_MOV_X
   \   000079   12....       LCALL   ?Subroutine36
    571          	}
   \                     ??CrossCallReturnLabel_63:
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   12....       LCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_3:
   \   000082   90....       MOV     DPTR,#__Constant_1
   \   000085   78..         MOV     R0,#?V0
   \   000087   12....       LCALL   ?L_MOV_X
   \   00008A   740A         MOV     A,#0xa
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   78..         MOV     R0,#?V0
   \   000091   12....       LCALL   ?L_ADD_TO_X
   \   000094   7402         MOV     A,#0x2
   \   000096   12....       LCALL   ?XSTACK_DISP0_8
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   2401         ADD     A,#0x1
   \   00009C   F8           MOV     R0,A
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   3400         ADDC    A,#0x0
   \   0000A1   F9           MOV     R1,A
   \   0000A2   7402         MOV     A,#0x2
   \   0000A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A7   E8           MOV     A,R0
   \   0000A8   F0           MOVX    @DPTR,A
   \   0000A9   A3           INC     DPTR
   \   0000AA   E9           MOV     A,R1
   \                     ??_shell_register_0:
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   7402         MOV     A,#0x2
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   12....       LCALL   ??Subroutine50_0
   \                     ??CrossCallReturnLabel_86:
   \   0000B4   7095         JNZ     ??_shell_register_1
    572          
    573          	unCmd.part.CRC1 = fcrc8;
    574          	unCmd.part.CRC2 = bcrc8;
    575          	unCmd.part.Len = clen;
    576          	unCmd.part.Sum = sum;
    577          	unCmd.part.FirstChar = *cmd_name;
   \   0000B6   7404         MOV     A,#0x4
   \   0000B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BB   12....       LCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_30:
   \   0000BE   7412         MOV     A,#0x12
   \   0000C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C3   12....       LCALL   ?Subroutine4
    578          	
    579          	newcmd->ID = unCmd.ID;   //生成命令码
   \                     ??CrossCallReturnLabel_4:
   \   0000C6   7408         MOV     A,#0x8
   \   0000C8   78..         MOV     R0,#?V4
   \   0000CA   12....       LCALL   ?L_SHL
   \   0000CD   7406         MOV     A,#0x6
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   78..         MOV     R0,#?V4
   \   0000D4   12....       LCALL   ?L_IOR_X
   \   0000D7   740A         MOV     A,#0xa
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   78..         MOV     R0,#?V0
   \   0000DE   12....       LCALL   ?L_MOV_X
   \   0000E1   7415         MOV     A,#0x15
   \   0000E3   78..         MOV     R0,#?V0
   \   0000E5   12....       LCALL   ?L_SHL
   \   0000E8   78..         MOV     R0,#?V4
   \   0000EA   79..         MOV     R1,#?V0
   \   0000EC   12....       LCALL   ?L_IOR
   \   0000EF   90....       MOV     DPTR,#__Constant_3e0ffff
   \   0000F2   78..         MOV     R0,#?V4
   \   0000F4   12....       LCALL   ?L_AND_X
   \   0000F7   740E         MOV     A,#0xe
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   78..         MOV     R0,#?V0
   \   0000FE   12....       LCALL   ?L_MOV_X
   \   000101   7410         MOV     A,#0x10
   \   000103   78..         MOV     R0,#?V0
   \   000105   12....       LCALL   ?L_SHL
   \   000108   90....       MOV     DPTR,#__Constant_1f0000
   \   00010B   78..         MOV     R0,#?V0
   \   00010D   12....       LCALL   ?L_AND_X
   \   000110   78..         MOV     R0,#?V4
   \   000112   79..         MOV     R1,#?V0
   \   000114   12....       LCALL   ?L_IOR
   \   000117   7412         MOV     A,#0x12
   \   000119   12....       LCALL   ?XSTACK_DISP0_8
   \   00011C   78..         MOV     R0,#?V0
   \   00011E   12....       LCALL   ?L_MOV_X
   \   000121   741A         MOV     A,#0x1a
   \   000123   78..         MOV     R0,#?V0
   \   000125   12....       LCALL   ?L_SHL
   \   000128   78..         MOV     R0,#?V4
   \   00012A   79..         MOV     R1,#?V0
   \   00012C   12....       LCALL   ?L_IOR
   \   00012F   85..82       MOV     DPL,?XSP + 0
   \   000132   85..83       MOV     DPH,?XSP + 1
   \   000135   E0           MOVX    A,@DPTR
   \   000136   F8           MOV     R0,A
   \   000137   A3           INC     DPTR
   \   000138   E0           MOVX    A,@DPTR
   \   000139   C8           XCH     A,R0
   \   00013A   2406         ADD     A,#0x6
   \   00013C   F582         MOV     DPL,A
   \   00013E   E4           CLR     A
   \   00013F   38           ADDC    A,R0
   \   000140   F583         MOV     DPH,A
   \   000142   78..         MOV     R0,#?V4
   \   000144   12....       LCALL   ?L_MOV_TO_X
    580          	newcmd->name = cmd_name;
   \   000147   7404         MOV     A,#0x4
   \   000149   12....       LCALL   ?XSTACK_DISP0_8
   \   00014C   12....       LCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_27:
   \   00014F   12....       LCALL   ??Subroutine57_0
    581          	newcmd->func = cmd_func;
   \                     ??CrossCallReturnLabel_123:
   \   000152   7425         MOV     A,#0x25
   \   000154   12....       LCALL   ?XSTACK_DISP0_8
   \   000157   12....       LCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_28:
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   12....       LCALL   ??Subroutine57_0
    582          	shell_insert_cmd(&shellcmdroot,newcmd);
   \                     ??CrossCallReturnLabel_124:
   \   00015F   7A..         MOV     R2,#shellcmdroot & 0xff
   \   000161   7B..         MOV     R3,#(shellcmdroot >> 8) & 0xff
   \   000163   8004         SJMP    ??_shell_register_2
   \                     ??_shell_register_3:
   \   000165   EC           MOV     A,R4
   \   000166   FA           MOV     R2,A
   \   000167   ED           MOV     A,R5
   \   000168   FB           MOV     R3,A
   \                     ??_shell_register_2:
   \   000169   8A82         MOV     DPL,R2
   \   00016B   8B83         MOV     DPH,R3
   \   00016D   12....       LCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_44:
   \   000170   EC           MOV     A,R4
   \   000171   4D           ORL     A,R5
   \   000172   6021         JZ      ??_shell_register_4
   \   000174   8C82         MOV     DPL,R4
   \   000176   8D83         MOV     DPH,R5
   \   000178   A3           INC     DPTR
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   78..         MOV     R0,#?V0
   \   000180   12....       LCALL   ?L_MOV_X
   \   000183   78..         MOV     R0,#?V4
   \   000185   79..         MOV     R1,#?V0
   \   000187   12....       LCALL   ?L_EQ
   \   00018A   6028         JZ      ??CrossCallReturnLabel_126
   \   00018C   78..         MOV     R0,#?V0
   \   00018E   79..         MOV     R1,#?V4
   \   000190   12....       LCALL   ?UL_GT
   \   000193   50D0         JNC     ??_shell_register_3
   \                     ??_shell_register_4:
   \   000195   8A82         MOV     DPL,R2
   \   000197   8B83         MOV     DPH,R3
   \   000199   12....       LCALL   ??Subroutine62_0
   \                     ??CrossCallReturnLabel_137:
   \   00019C   85..82       MOV     DPL,?XSP + 0
   \   00019F   85..83       MOV     DPH,?XSP + 1
   \   0001A2   12....       LCALL   ?Subroutine30
   \                     ??CrossCallReturnLabel_50:
   \   0001A5   12....       LCALL   ??Subroutine57_0
   \                     ??CrossCallReturnLabel_125:
   \   0001A8   85..82       MOV     DPL,?XSP + 0
   \   0001AB   85..83       MOV     DPH,?XSP + 1
   \   0001AE   12....       LCALL   ?Subroutine27
   \                     ??CrossCallReturnLabel_45:
   \   0001B1   12....       LCALL   ??Subroutine57_0
    583          }
   \                     ??CrossCallReturnLabel_126:
   \   0001B4   7416         MOV     A,#0x16
   \   0001B6   02....       LJMP    ??Subroutine53_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ??Subroutine66_0
   \                     ??CrossCallReturnLabel_156:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FA           MOV     R2,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F583         MOV     DPH,A
   \   00000F   8A82         MOV     DPL,R2
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   12....       LCALL   ??Subroutine66_0
   \                     ??CrossCallReturnLabel_160:
   \   000003   22           RET
    584          
    585          /**
    586            * @author   古么宁
    587            * @brief    把 "a b c d" 格式化提取为 char*argv[] = {"a","b","c","d"};
    588            * @note     一般供 getopt() 解析，运行过后命令行内容将被整改
    589            * @param    str    : 命令字符串后面所跟参数缓冲区指针
    590            * @param    argv   : 数据转换后缓存地址
    591            * @param    maxread: 最大读取数
    592            * @return   最终读取参数个数输出
    593          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    594          int cmdline_strtok(char * str ,char ** argv ,int maxread)
   \                     cmdline_strtok:
    595          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    596          	int argc = 0;
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
   \   000009   8005         SJMP    ??cmdline_strtok_0
    597          
    598          	for ( ; ' ' == *str ; ++str) ; //跳过空格
   \                     ??cmdline_strtok_1:
   \   00000B   A3           INC     DPTR
   \   00000C   AA82         MOV     R2,DPL
   \   00000E   AB83         MOV     R3,DPH
   \                     ??cmdline_strtok_0:
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6420         XRL     A,#0x20
   \   000017   60F2         JZ      ??cmdline_strtok_1
   \   000019   7409         MOV     A,#0x9
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V1,A
   \   000025   801C         SJMP    ??cmdline_strtok_2
    599          	
    600          	for ( ; *str && argc < maxread; ++argc,++argv ) { //字符不为 ‘\0' 的时候
    601          	
    602          		for (*argv = str ; ' ' != *str && *str ; ++str);//记录这个参数，然后跳过非空字符
    603          		
    604          		for ( ; ' ' == *str; *str++ = '\0');//每个参数加字符串结束符，跳过空格		
   \                     ??cmdline_strtok_3:
   \   000027   E4           CLR     A
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   AA82         MOV     R2,DPL
   \   00002C   AB83         MOV     R3,DPH
   \                     ??cmdline_strtok_4:
   \   00002E   8A82         MOV     DPL,R2
   \   000030   8B83         MOV     DPH,R3
   \   000032   E0           MOVX    A,@DPTR
   \   000033   6420         XRL     A,#0x20
   \   000035   60F0         JZ      ??cmdline_strtok_3
   \   000037   08           INC     R0
   \   000038   E8           MOV     A,R0
   \   000039   7001         JNZ     ??cmdline_strtok_5
   \   00003B   09           INC     R1
   \                     ??cmdline_strtok_5:
   \   00003C   EC           MOV     A,R4
   \   00003D   2402         ADD     A,#0x2
   \   00003F   FC           MOV     R4,A
   \   000040   5001         JNC     ??cmdline_strtok_2
   \   000042   0D           INC     R5
   \                     ??cmdline_strtok_2:
   \   000043   8A82         MOV     DPL,R2
   \   000045   8B83         MOV     DPH,R3
   \   000047   E0           MOVX    A,@DPTR
   \   000048   602A         JZ      ??cmdline_strtok_6
   \   00004A   C3           CLR     C
   \   00004B   E8           MOV     A,R0
   \   00004C   95..         SUBB    A,?V0
   \   00004E   E9           MOV     A,R1
   \   00004F   95..         SUBB    A,?V1
   \   000051   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000053   65D0         XRL     A,PSW
   \   000055   33           RLC     A
   \   000056   501C         JNC     ??cmdline_strtok_6
   \   000058   8C82         MOV     DPL,R4
   \   00005A   8D83         MOV     DPH,R5
   \   00005C   12....       LCALL   ??Subroutine51_0
   \                     ??CrossCallReturnLabel_90:
   \   00005F   8A82         MOV     DPL,R2
   \   000061   8B83         MOV     DPH,R3
   \   000063   E0           MOVX    A,@DPTR
   \   000064   FE           MOV     R6,A
   \   000065   7420         MOV     A,#0x20
   \   000067   6E           XRL     A,R6
   \   000068   60C4         JZ      ??cmdline_strtok_4
   \   00006A   EE           MOV     A,R6
   \   00006B   60C1         JZ      ??cmdline_strtok_4
   \   00006D   A3           INC     DPTR
   \   00006E   AA82         MOV     R2,DPL
   \   000070   AB83         MOV     R3,DPH
   \   000072   80EB         SJMP    ??CrossCallReturnLabel_90
    605          	}
    606          	
    607          	return argc;
   \                     ??cmdline_strtok_6:
   \   000074   E8           MOV     A,R0
   \   000075   FA           MOV     R2,A
   \   000076   E9           MOV     A,R1
   \   000077   FB           MOV     R3,A
   \   000078   02....       LJMP    ??Subroutine60_0
    608          }
    609          
    610          
    611          /**
    612            * @brief    转换获取命令号后面的输入参数，字符串转为整数
    613            * @param    str     命令字符串后面所跟参数缓冲区指针
    614            * @param    argv    数据转换后缓存地址
    615            * @param    maxread 最大读取数
    616            * @return   数据个数
    617          	  * @retval   >= 0         读取命令后面所跟参数个数
    618          	  * @retval   PARAMETER_ERROR(-2)  命令后面所跟参数有误
    619          	  * @retval   PARAMETER_HELP(-1)   命令后面跟了 ? 号
    620          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    621          int cmdline_param(char * str,int * argv,int maxread)
   \                     cmdline_param:
    622          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V2,R4
   \   000007   8D..         MOV     ?V3,R5
   \   000009   8005         SJMP    ??cmdline_param_0
    623          	int argc ;
    624          	unsigned int  value;
    625          
    626          	for ( ; ' ' == *str        ; ++str);//跳过空格
   \                     ??cmdline_param_1:
   \   00000B   A3           INC     DPTR
   \   00000C   AA82         MOV     R2,DPL
   \   00000E   AB83         MOV     R3,DPH
   \                     ??cmdline_param_0:
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6420         XRL     A,#0x20
   \   000017   60F2         JZ      ??cmdline_param_1
    627          	for ( ; ' ' != *str && *str; ++str);//跳过第一个参数
   \                     ??cmdline_param_2:
   \   000019   8A82         MOV     DPL,R2
   \   00001B   8B83         MOV     DPH,R3
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F8           MOV     R0,A
   \   00001F   7420         MOV     A,#0x20
   \   000021   68           XRL     A,R0
   \   000022   600F         JZ      ??cmdline_param_3
   \   000024   E8           MOV     A,R0
   \   000025   600C         JZ      ??cmdline_param_3
   \   000027   A3           INC     DPTR
   \   000028   AA82         MOV     R2,DPL
   \   00002A   AB83         MOV     R3,DPH
   \   00002C   80EB         SJMP    ??cmdline_param_2
    628          	for ( ; ' ' == *str        ; ++str);//跳过空格
   \                     ??cmdline_param_4:
   \   00002E   A3           INC     DPTR
   \   00002F   AA82         MOV     R2,DPL
   \   000031   AB83         MOV     R3,DPH
   \                     ??cmdline_param_3:
   \   000033   8A82         MOV     DPL,R2
   \   000035   8B83         MOV     DPH,R3
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F8           MOV     R0,A
   \   000039   7420         MOV     A,#0x20
   \   00003B   68           XRL     A,R0
   \   00003C   60F0         JZ      ??cmdline_param_4
    629          
    630          	if (*str == '?')
   \   00003E   743F         MOV     A,#0x3f
   \   000040   68           XRL     A,R0
   \   000041   7005         JNZ     ??cmdline_param_5
    631          		return PARAMETER_HELP;//如果命令后面的是问号，返回help
   \   000043   7AFF         MOV     R2,#-0x1
   \   000045   02....       LJMP    ??cmdline_param_6
    632          
    633          	for (argc = 0; *str && argc < maxread; ++argc , ++argv) { //字符不为 ‘\0' 的时候
   \                     ??cmdline_param_5:
   \   000048   7E00         MOV     R6,#0x0
   \   00004A   7F00         MOV     R7,#0x0
   \   00004C   740E         MOV     A,#0xe
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F5..         MOV     ?V4,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F5..         MOV     ?V5,A
   \   000058   801D         SJMP    ??cmdline_param_7
    634          	
    635          		*argv = 0;
    636          		
    637          		if ('0' == str[0] && 'x' == str[1]) { //"0x" 开头，十六进制转换
    638          			for ( str += 2 ;  ; ++str )  {
    639          				if ( (value = *str - '0') < 10 ) // value 先赋值，后判断 
    640          					*argv = (*argv << 4)|value;
    641          				else
    642          				if ( (value = *str - 'A') < 6 || (value = *str - 'a') < 6)
    643          					*argv = (*argv << 4) + value + 10;
    644          				else
    645          					break;
    646          			}
    647          		}
    648          		else { //循环把字符串转为数字，直到字符不为 0 - 9
    649          			unsigned int minus = ('-' == *str);//正负数转换
    650          			if (minus)
    651          				++str;
    652          
    653          			for (value = *str - '0'; value < 10 ; value = *(++str) - '0')
    654          				*argv = (*argv * 10 + value);
    655          			
    656          			if (minus)
    657          				*argv = -(*argv);
    658          		}
    659          
    660          		if ('\0' != *str && ' ' != *str)//如果不是 0 - 9 而且不是空格，则是错误字符
    661          			return PARAMETER_ERROR;
    662          
    663          		for ( ; ' ' == *str ; ++str);//跳过空格,继续判断下一个参数
   \                     ??cmdline_param_8:
   \   00005A   A3           INC     DPTR
   \   00005B   AA82         MOV     R2,DPL
   \   00005D   AB83         MOV     R3,DPH
   \                     ??cmdline_param_9:
   \   00005F   8A82         MOV     DPL,R2
   \   000061   8B83         MOV     DPH,R3
   \   000063   E0           MOVX    A,@DPTR
   \   000064   6420         XRL     A,#0x20
   \   000066   60F2         JZ      ??cmdline_param_8
   \   000068   0E           INC     R6
   \   000069   EE           MOV     A,R6
   \   00006A   7001         JNZ     ??cmdline_param_10
   \   00006C   0F           INC     R7
   \                     ??cmdline_param_10:
   \   00006D   E5..         MOV     A,?V2
   \   00006F   2402         ADD     A,#0x2
   \   000071   F5..         MOV     ?V2,A
   \   000073   5002         JNC     ??cmdline_param_7
   \   000075   05..         INC     ?V3
   \                     ??cmdline_param_7:
   \   000077   8A82         MOV     DPL,R2
   \   000079   8B83         MOV     DPH,R3
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   7003         JNZ     $+5
   \   00007E   02....       LJMP    ??cmdline_param_11
   \   000081   C3           CLR     C
   \   000082   EE           MOV     A,R6
   \   000083   95..         SUBB    A,?V4
   \   000085   EF           MOV     A,R7
   \   000086   95..         SUBB    A,?V5
   \   000088   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00008A   65D0         XRL     A,PSW
   \   00008C   33           RLC     A
   \   00008D   4003         JC      $+5
   \   00008F   02....       LJMP    ??cmdline_param_11
   \   000092   85..82       MOV     DPL,?V2
   \   000095   85..83       MOV     DPH,?V3
   \   000098   E4           CLR     A
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   A3           INC     DPTR
   \   00009B   12....       LCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_17:
   \   00009E   A3           INC     DPTR
   \   00009F   A882         MOV     R0,DPL
   \   0000A1   A983         MOV     R1,DPH
   \   0000A3   8A82         MOV     DPL,R2
   \   0000A5   8B83         MOV     DPH,R3
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   FC           MOV     R4,A
   \   0000A9   7430         MOV     A,#0x30
   \   0000AB   6C           XRL     A,R4
   \   0000AC   7064         JNZ     ??cmdline_param_12
   \   0000AE   8882         MOV     DPL,R0
   \   0000B0   8983         MOV     DPH,R1
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   6478         XRL     A,#0x78
   \   0000B5   7069         JNZ     ??cmdline_param_13
   \   0000B7   EA           MOV     A,R2
   \   0000B8   2402         ADD     A,#0x2
   \   0000BA   FA           MOV     R2,A
   \   0000BB   5033         JNC     ??CrossCallReturnLabel_133
   \   0000BD   0B           INC     R3
   \   0000BE   8030         SJMP    ??CrossCallReturnLabel_133
   \                     ??cmdline_param_14:
   \   0000C0   E8           MOV     A,R0
   \   0000C1   24BF         ADD     A,#-0x41
   \   0000C3   12....       LCALL   ?Subroutine38
   \                     ??CrossCallReturnLabel_66:
   \   0000C6   400B         JC      ??cmdline_param_15
   \   0000C8   E8           MOV     A,R0
   \   0000C9   249F         ADD     A,#-0x61
   \   0000CB   12....       LCALL   ?Subroutine38
   \                     ??CrossCallReturnLabel_67:
   \   0000CE   4003         JC      $+5
   \   0000D0   02....       LJMP    ??CrossCallReturnLabel_127
   \                     ??cmdline_param_15:
   \   0000D3   12....       LCALL   ?Subroutine25
   \                     ??CrossCallReturnLabel_39:
   \   0000D6   12....       LCALL   ?S_SHL
   \   0000D9   E5..         MOV     A,?V0
   \   0000DB   2C           ADD     A,R4
   \   0000DC   F8           MOV     R0,A
   \   0000DD   E5..         MOV     A,?V1
   \   0000DF   3D           ADDC    A,R5
   \   0000E0   F9           MOV     R1,A
   \   0000E1   E8           MOV     A,R0
   \   0000E2   240A         ADD     A,#0xa
   \   0000E4   5001         JNC     ??cmdline_param_16
   \   0000E6   09           INC     R1
   \                     ??cmdline_param_16:
   \   0000E7   85..82       MOV     DPL,?V2
   \   0000EA   85..83       MOV     DPH,?V3
   \                     ??cmdline_param_17:
   \   0000ED   12....       LCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_133:
   \   0000F0   8A82         MOV     DPL,R2
   \   0000F2   8B83         MOV     DPH,R3
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   F8           MOV     R0,A
   \   0000F6   12....       LCALL   ?Subroutine39
   \                     ??CrossCallReturnLabel_69:
   \   0000F9   50C5         JNC     ??cmdline_param_14
   \   0000FB   12....       LCALL   ?Subroutine25
   \                     ??CrossCallReturnLabel_40:
   \   0000FE   12....       LCALL   ?S_SHL
   \   000101   E5..         MOV     A,?V0
   \   000103   4C           ORL     A,R4
   \   000104   F8           MOV     R0,A
   \   000105   E5..         MOV     A,?V1
   \   000107   4D           ORL     A,R5
   \   000108   F9           MOV     R1,A
   \   000109   85..82       MOV     DPL,?V2
   \   00010C   85..83       MOV     DPH,?V3
   \   00010F   E8           MOV     A,R0
   \   000110   80DB         SJMP    ??cmdline_param_17
   \                     ??cmdline_param_12:
   \   000112   742D         MOV     A,#0x2d
   \   000114   6C           XRL     A,R4
   \   000115   7009         JNZ     ??cmdline_param_13
   \   000117   75..01       MOV     ?V0,#0x1
   \   00011A   E8           MOV     A,R0
   \   00011B   FA           MOV     R2,A
   \   00011C   E9           MOV     A,R1
   \   00011D   FB           MOV     R3,A
   \   00011E   8003         SJMP    ??cmdline_param_18
   \                     ??cmdline_param_13:
   \   000120   75..00       MOV     ?V0,#0x0
   \                     ??cmdline_param_18:
   \   000123   8A82         MOV     DPL,R2
   \   000125   8B83         MOV     DPH,R3
   \   000127   8024         SJMP    ??CrossCallReturnLabel_134
   \                     ??cmdline_param_19:
   \   000129   12....       LCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_140:
   \   00012C   E8           MOV     A,R0
   \   00012D   75F00A       MOV     B,#0xa
   \   000130   A4           MUL     AB
   \   000131   F8           MOV     R0,A
   \   000132   85F0..       MOV     ?V6,B
   \   000135   75F00A       MOV     B,#0xa
   \   000138   E9           MOV     A,R1
   \   000139   A4           MUL     AB
   \   00013A   25..         ADD     A,?V6
   \   00013C   F9           MOV     R1,A
   \   00013D   E8           MOV     A,R0
   \   00013E   2C           ADD     A,R4
   \   00013F   F8           MOV     R0,A
   \   000140   E9           MOV     A,R1
   \   000141   3D           ADDC    A,R5
   \   000142   F9           MOV     R1,A
   \   000143   85..82       MOV     DPL,?V2
   \   000146   85..83       MOV     DPH,?V3
   \   000149   E8           MOV     A,R0
   \   00014A   12....       LCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_134:
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   12....       LCALL   ?Subroutine39
   \                     ??CrossCallReturnLabel_68:
   \   000151   40D6         JC      ??cmdline_param_19
   \   000153   E5..         MOV     A,?V0
   \   000155   A2E0         MOV     C,0xE0 /* A   */.0
   \   000157   5013         JNC     ??CrossCallReturnLabel_127
   \   000159   12....       LCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_141:
   \   00015C   C3           CLR     C
   \   00015D   E4           CLR     A
   \   00015E   98           SUBB    A,R0
   \   00015F   F8           MOV     R0,A
   \   000160   E4           CLR     A
   \   000161   99           SUBB    A,R1
   \   000162   F9           MOV     R1,A
   \   000163   85..82       MOV     DPL,?V2
   \   000166   85..83       MOV     DPH,?V3
   \   000169   12....       LCALL   ??Subroutine57_0
   \                     ??CrossCallReturnLabel_127:
   \   00016C   8A82         MOV     DPL,R2
   \   00016E   8B83         MOV     DPH,R3
   \   000170   E0           MOVX    A,@DPTR
   \   000171   F8           MOV     R0,A
   \   000172   7003         JNZ     $+5
   \   000174   02....       LJMP    ??cmdline_param_9
   \   000177   7420         MOV     A,#0x20
   \   000179   68           XRL     A,R0
   \   00017A   7003         JNZ     $+5
   \   00017C   02....       LJMP    ??cmdline_param_9
   \   00017F   7AFE         MOV     R2,#-0x2
   \                     ??cmdline_param_6:
   \   000181   7BFF         MOV     R3,#-0x1
   \   000183   8004         SJMP    ??cmdline_param_20
    664          	}
    665          
    666          	return argc;
   \                     ??cmdline_param_11:
   \   000185   EE           MOV     A,R6
   \   000186   FA           MOV     R2,A
   \   000187   EF           MOV     A,R7
   \   000188   FB           MOV     R3,A
   \                     ??cmdline_param_20:
   \   000189   02....       LJMP    ?Subroutine1
    667          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   24D0         ADD     A,#-0x30
   \   000002   FC           MOV     R4,A
   \   000003   E4           CLR     A
   \   000004   34FF         ADDC    A,#-0x1
   \   000006   FD           MOV     R5,A
   \   000007   C3           CLR     C
   \   000008   EC           MOV     A,R4
   \   000009   940A         SUBB    A,#0xa
   \   00000B   ED           MOV     A,R5
   \   00000C   9400         SUBB    A,#0x0
   \   00000E   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   FC           MOV     R4,A
   \   000001   E4           CLR     A
   \   000002   34FF         ADDC    A,#-0x1
   \   000004   FD           MOV     R5,A
   \   000005   C3           CLR     C
   \   000006   EC           MOV     A,R4
   \   000007   9406         SUBB    A,#0x6
   \   000009   ED           MOV     A,R5
   \   00000A   9400         SUBB    A,#0x0
   \   00000C   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V1,A
   \   00000D   7404         MOV     A,#0x4
   \   00000F   78..         MOV     R0,#?V0
   \   000011   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003                REQUIRE ??Subroutine61_0
   \   000003                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006                REQUIRE ??Subroutine62_0
   \   000006                ; // Fall through to label ??Subroutine62_0
    668          
    669          /**
    670            * @author   古么宁
    671            * @brief    欢迎页
    672            * @param    shellin : 交互
    673            * @param    recv    : 硬件层所接收到的数据缓冲区地址
    674            * @param    len     : 硬件层所接收到的数据长度
    675            * @return   don't care
    676          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine59_0
   \   000002                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    677          void welcome_gets(struct shell_input * shellin,char * recv,int len)
   \                     welcome_gets:
    678          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
    679          	//打印一个欢迎页logo
    680          	static const char consolologo[] = "\r\n\
    681            _____                        __\r\n\
    682           / ____\\                      /\\ \\\r\n\
    683          /\\ \\___/   ____  ____  ____  _\\_\\ \\     ____\r\n\
    684          \\ \\ \\     / __ \\/ __ \\/ ___\\/ __ \\ \\   / __ \\\r\n\
    685           \\ \\ \\___L\\ \\L\\ \\ \\/\\ \\____ \\ \\L\\ \\ \\_L\\  ___L\r\n\
    686            \\ \\______\\____/\\_\\ \\_\\____/\\____/\\____\\____/\r\n\
    687             \\/______/___/\\/_/\\/_/___/\\/___/\\/____/___/\r\n\
    688              COPYRIGHT(c):GoodMorning		2019/06\r\n\r\n" ;
    689          
    690          	printl((char*)consolologo,sizeof(consolologo)-1);
   \   00000D   12....       LCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_33:
   \   000010   600E         JZ      ??welcome_gets_0
   \   000012                ; Setup parameters for indirect call
   \   000012   7C5E         MOV     R4,#0x5e
   \   000014   7D01         MOV     R5,#0x1
   \   000016   7A..         MOV     R2,#??consolologo & 0xff
   \   000018   7B..         MOV     R3,#(??consolologo >> 8) & 0xff
   \   00001A   12....       LCALL   ??Subroutine65_0
   \                     ??CrossCallReturnLabel_144:
   \   00001D   12....       LCALL   ?CALL_IND
    691          	shellin->gets = cmdline_gets;
   \                     ??welcome_gets_0:
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   74..         MOV     A,#cmdline_gets & 0xff
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   74..         MOV     A,#(cmdline_gets >> 8) & 0xff
   \   00002A   F0           MOVX    @DPTR,A
    692          	cmdline_gets(shellin,recv,len);
   \   00002B                ; Setup parameters for call to function cmdline_gets
   \   00002B   7409         MOV     A,#0x9
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000033   AC..         MOV     R4,?V0
   \   000035   AD..         MOV     R5,?V1
   \   000037   EE           MOV     A,R6
   \   000038   FA           MOV     R2,A
   \   000039   EF           MOV     A,R7
   \   00003A   FB           MOV     R3,A
   \   00003B   12....       LCALL   cmdline_gets
   \   00003E   02....       LJMP    ?Subroutine2
    693          	return ;
    694          }

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??consolologo:
   \   000000                DS 351
   \   00015F                REQUIRE `?<Initializer for consolologo>`
   \   00015F                REQUIRE __INIT_XDATA_I
    695          
    696          /**
    697            * @author   古么宁
    698            * @brief    硬件上接收到的数据到命令行的传输
    699            * @param    shellin : 交互
    700            * @param    recv    : 硬件层所接收到的数据缓冲区地址
    701            * @param    len     : 硬件层所接收到的数据长度
    702            * @return   don't care
    703          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7404         MOV     A,#0x4
   \   000002                REQUIRE ??Subroutine53_0
   \   000002                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    704          void cmdline_gets(struct shell_input * shellin,char * recv,int len)
   \                     cmdline_gets:
    705          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
    706          	int state = 0 ;
   \   000012   7E00         MOV     R6,#0x0
    707          
    708          	for (char * end = recv + len ; recv < end ; ++recv) {
   \   000014   7413         MOV     A,#0x13
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ??Subroutine62_0
   \                     ??CrossCallReturnLabel_138:
   \   00001C   EC           MOV     A,R4
   \   00001D   28           ADD     A,R0
   \   00001E   F8           MOV     R0,A
   \   00001F   ED           MOV     A,R5
   \   000020   39           ADDC    A,R1
   \   000021   F9           MOV     R1,A
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   12....       LCALL   ??Subroutine57_0
   \                     ??CrossCallReturnLabel_128:
   \   00002A   EA           MOV     A,R2
   \   00002B   246A         ADD     A,#0x6a
   \   00002D   F5..         MOV     ?V6,A
   \   00002F   E4           CLR     A
   \   000030   35..         ADDC    A,?V1
   \   000032   F5..         MOV     ?V7,A
   \   000034   802A         SJMP    ??cmdline_gets_0
    709          		if (0 == state) {
    710          			/* 普通字符计入内存;否则判断特殊功能字符 */
    711          			if (*recv > 0x1F && *recv < 0x7f)
    712          				shell_getchar(shellin,*recv);
    713          			else
    714          			switch (*recv) {
    715                  case KEYCODE_ENTER:
    716                    if (shellin->tail){
    717                      printf("\r\n");
    718                      shell_record(shellin);
    719                      shell_parse(&shellcmdroot ,shellin);
    720                    }
    721                    else{
    722                      printf("\r\n%s",shellin->sign);
    723                    }
    724                    break;
    725                  case KEYCODE_ESC :
    726                    state = 1;
    727                    break;
    728                  case KEYCODE_CTRL_C:
    729                    shellin->edit = 0;
    730                    shellin->tail = 0;
    731                    printf("^C\r\n%s",shellin->sign);
    732                    break;
    733                  case KEYCODE_BACKSPACE :
    734                  case 0x7f: /* for putty */
    735                    if (shellin->edit)
    736                      shell_backspace(shellin);
    737                    break;
    738                  case KEYCODE_TAB:
    739                    shell_tab(shellin);
    740                    break;
    741                  default: ;
    742          			}
    743          		}
    744          		else 
    745          		if (1 == state){ 
    746          			/* 判断是否是箭头内容 */
    747          			state = (*recv == '[') ? 2 : 0 ;
    748          		}
    749          		else{
    750          			/* if (2 == state) 响应箭头内容 */
    751          			switch(*recv){  
    752                  case 'A'://上箭头
    753                    shell_show_history(shellin,0);
    754                    break;
    755                  case 'B'://下箭头
    756                    shell_show_history(shellin,1);
    757                    break;
    758                  case 'C'://右箭头
    759                    if ( shellin->tail != shellin->edit)
    760                      printl(&shellin->cmdline[shellin->edit++],1);
    761                    break;
    762                  case 'D'://左箭头
    763                    if (shellin->edit){
   \                     ??cmdline_gets_1:
   \   000036   85..82       MOV     DPL,?V6
   \   000039   85..83       MOV     DPH,?V7
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   6014         JZ      ??cmdline_gets_2
    764                      --shellin->edit;
   \   00003F   14           DEC     A
   \   000040   12....       LCALL   ??Subroutine52_0
    765                      printl("\b",1);
   \                     ??CrossCallReturnLabel_97:
   \   000043   600E         JZ      ??cmdline_gets_2
   \   000045                ; Setup parameters for indirect call
   \   000045   7C01         MOV     R4,#0x1
   \   000047   7D00         MOV     R5,#0x0
   \   000049   7A..         MOV     R2,#`?<Constant "\\b">` & 0xff
   \   00004B   7B..         MOV     R3,#(`?<Constant "\\b">` >> 8) & 0xff
    766                    }
   \                     ??cmdline_gets_3:
   \   00004D   12....       LCALL   ??Subroutine65_0
   \                     ??CrossCallReturnLabel_145:
   \   000050   12....       LCALL   ?CALL_IND
   \                     ??cmdline_gets_2:
   \   000053   85..82       MOV     DPL,?V2
   \   000056   85..83       MOV     DPH,?V3
   \   000059   A3           INC     DPTR
   \   00005A   8582..       MOV     ?V2,DPL
   \   00005D   8583..       MOV     ?V3,DPH
   \                     ??cmdline_gets_0:
   \   000060   7402         MOV     A,#0x2
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   12....       LCALL   ??Subroutine62_0
   \                     ??CrossCallReturnLabel_139:
   \   000068   C3           CLR     C
   \   000069   E5..         MOV     A,?V2
   \   00006B   98           SUBB    A,R0
   \   00006C   E5..         MOV     A,?V3
   \   00006E   99           SUBB    A,R1
   \   00006F   4003         JC      $+5
   \   000071   02....       LJMP    ??cmdline_gets_4
   \   000074   EE           MOV     A,R6
   \   000075   6003         JZ      $+5
   \   000077   02....       LJMP    ??cmdline_gets_5
   \   00007A   85..82       MOV     DPL,?V2
   \   00007D   85..83       MOV     DPH,?V3
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F9           MOV     R1,A
   \   000082   74E0         MOV     A,#-0x20
   \   000084   29           ADD     A,R1
   \   000085   C3           CLR     C
   \   000086   945F         SUBB    A,#0x5f
   \   000088   5009         JNC     ??cmdline_gets_6
   \   00008A                ; Setup parameters for call to function shell_getchar
   \   00008A   AA..         MOV     R2,?V0
   \   00008C   AB..         MOV     R3,?V1
   \   00008E   12....       LCALL   shell_getchar
   \   000091   80C0         SJMP    ??cmdline_gets_2
   \                     ??cmdline_gets_6:
   \   000093   E9           MOV     A,R1
   \   000094   24FD         ADD     A,#-0x3
   \   000096   7003         JNZ     $+5
   \   000098   02....       LJMP    ??cmdline_gets_7
   \   00009B   24FB         ADD     A,#-0x5
   \   00009D   7003         JNZ     $+5
   \   00009F   02....       LJMP    ??cmdline_gets_8
   \   0000A2   14           DEC     A
   \   0000A3   7003         JNZ     $+5
   \   0000A5   02....       LJMP    ??cmdline_gets_9
   \   0000A8   24FC         ADD     A,#-0x4
   \   0000AA   6010         JZ      ??cmdline_gets_10
   \   0000AC   24F2         ADD     A,#-0xe
   \   0000AE   7003         JNZ     $+5
   \   0000B0   02....       LJMP    ??cmdline_gets_11
   \   0000B3   249C         ADD     A,#-0x64
   \   0000B5   7003         JNZ     $+5
   \   0000B7   02....       LJMP    ??cmdline_gets_8
   \   0000BA   8097         SJMP    ??cmdline_gets_2
   \                     ??cmdline_gets_10:
   \   0000BC   12....       LCALL   ?Subroutine35
   \                     ??CrossCallReturnLabel_59:
   \   0000BF   7003         JNZ     $+5
   \   0000C1   02....       LJMP    ??cmdline_gets_12
   \   0000C4                ; Setup parameters for call to function printf
   \   0000C4   7A..         MOV     R2,#`?<Constant "\\r\\n">` & 0xff
   \   0000C6   7B..         MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   0000C8   12....       LCALL   printf
   \   0000CB   12....       LCALL   ?Subroutine34
   \                     ??CrossCallReturnLabel_57:
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   FA           MOV     R2,A
   \   0000D0   75F032       MOV     B,#0x32
   \   0000D3   A4           MUL     AB
   \   0000D4   F8           MOV     R0,A
   \   0000D5   A9F0         MOV     R1,B
   \   0000D7   E5..         MOV     A,?V0
   \   0000D9   28           ADD     A,R0
   \   0000DA   F8           MOV     R0,A
   \   0000DB   E5..         MOV     A,?V1
   \   0000DD   39           ADDC    A,R1
   \   0000DE   F9           MOV     R1,A
   \   0000DF   E8           MOV     A,R0
   \   0000E0   246E         ADD     A,#0x6e
   \   0000E2   5001         JNC     ??cmdline_gets_13
   \   0000E4   09           INC     R1
   \                     ??cmdline_gets_13:
   \   0000E5   85..82       MOV     DPL,?XSP + 0
   \   0000E8   85..83       MOV     DPH,?XSP + 1
   \   0000EB   12....       LCALL   ??Subroutine58_0
   \                     ??CrossCallReturnLabel_118:
   \   0000EE   EA           MOV     A,R2
   \   0000EF   2401         ADD     A,#0x1
   \   0000F1   F8           MOV     R0,A
   \   0000F2   E4           CLR     A
   \   0000F3   3400         ADDC    A,#0x0
   \   0000F5   F9           MOV     R1,A
   \   0000F6   7A04         MOV     R2,#0x4
   \   0000F8   7B00         MOV     R3,#0x0
   \   0000FA   12....       LCALL   ?S_DIV_MOD
   \   0000FD   12....       LCALL   ?Subroutine34
   \                     ??CrossCallReturnLabel_58:
   \   000100   EA           MOV     A,R2
   \   000101   F0           MOVX    @DPTR,A
   \   000102   E5..         MOV     A,?V0
   \   000104   246D         ADD     A,#0x6d
   \   000106   F582         MOV     DPL,A
   \   000108   E4           CLR     A
   \   000109   35..         ADDC    A,?V1
   \   00010B   F583         MOV     DPH,A
   \   00010D   EA           MOV     A,R2
   \   00010E   12....       LCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_7:
   \   000111   E0           MOVX    A,@DPTR
   \   000112   F5..         MOV     ?V4,A
   \   000114   75..00       MOV     ?V5,#0x0
   \   000117   78..         MOV     R0,#?V4
   \   000119   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011C   E5..         MOV     A,?V0
   \   00011E   2438         ADD     A,#0x38
   \   000120   FC           MOV     R4,A
   \   000121   E4           CLR     A
   \   000122   35..         ADDC    A,?V1
   \   000124   FD           MOV     R5,A
   \   000125   7402         MOV     A,#0x2
   \   000127   12....       LCALL   ?XSTACK_DISP0_8
   \   00012A   12....       LCALL   ??Subroutine55_0
   \                     ??CrossCallReturnLabel_111:
   \   00012D   12....       LCALL   memcpy
   \   000130   7402         MOV     A,#0x2
   \   000132   12....       LCALL   ?DEALLOC_XSTACK8
   \   000135   12....       LCALL   ?Subroutine35
   \                     ??CrossCallReturnLabel_60:
   \   000138   F8           MOV     R0,A
   \   000139   85..82       MOV     DPL,?XSP + 0
   \   00013C   85..83       MOV     DPH,?XSP + 1
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   28           ADD     A,R0
   \   000141   FA           MOV     R2,A
   \   000142   A3           INC     DPTR
   \   000143   E0           MOVX    A,@DPTR
   \   000144   3400         ADDC    A,#0x0
   \   000146   8A82         MOV     DPL,R2
   \   000148   F583         MOV     DPH,A
   \   00014A   E4           CLR     A
   \   00014B   F0           MOVX    @DPTR,A
   \   00014C                ; Setup parameters for call to function shell_parse
   \   00014C   AC..         MOV     R4,?V0
   \   00014E   AD..         MOV     R5,?V1
   \   000150   7A..         MOV     R2,#shellcmdroot & 0xff
   \   000152   7B..         MOV     R3,#(shellcmdroot >> 8) & 0xff
   \   000154   12....       LCALL   shell_parse
   \   000157   02....       LJMP    ??cmdline_gets_2
   \                     ??cmdline_gets_12:
   \   00015A                ; Setup parameters for call to function printf
   \   00015A   12....       LCALL   ?Subroutine32
   \                     ??CrossCallReturnLabel_53:
   \   00015D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000160   7A..         MOV     R2,#`?<Constant "\\r\\n%s">` & 0xff
   \   000162   7B..         MOV     R3,#(`?<Constant "\\r\\n%s">` >> 8) & 0xff
   \                     ??cmdline_gets_14:
   \   000164   12....       LCALL   printf
   \   000167   7402         MOV     A,#0x2
   \   000169   12....       LCALL   ?DEALLOC_XSTACK8
   \   00016C   02....       LJMP    ??cmdline_gets_2
   \                     ??cmdline_gets_11:
   \   00016F   7E01         MOV     R6,#0x1
   \   000171   02....       LJMP    ??cmdline_gets_2
   \                     ??cmdline_gets_7:
   \   000174   85..82       MOV     DPL,?V6
   \   000177   85..83       MOV     DPH,?V7
   \   00017A   E4           CLR     A
   \   00017B   12....       LCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_8:
   \   00017E   E4           CLR     A
   \   00017F   F0           MOVX    @DPTR,A
   \   000180                ; Setup parameters for call to function printf
   \   000180   12....       LCALL   ?Subroutine32
   \                     ??CrossCallReturnLabel_54:
   \   000183   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000186   7A..         MOV     R2,#`?<Constant "^C\\r\\n%s">` & 0xff
   \   000188   7B..         MOV     R3,#(`?<Constant "^C\\r\\n%s">` >> 8) & 0xff
   \   00018A   80D8         SJMP    ??cmdline_gets_14
   \                     ??cmdline_gets_8:
   \   00018C   85..82       MOV     DPL,?V6
   \   00018F   85..83       MOV     DPH,?V7
   \   000192   E0           MOVX    A,@DPTR
   \   000193   7003         JNZ     $+5
   \   000195   02....       LJMP    ??cmdline_gets_2
   \   000198                ; Setup parameters for call to function shell_backspace
   \   000198   AA..         MOV     R2,?V0
   \   00019A   AB..         MOV     R3,?V1
   \   00019C   12....       LCALL   shell_backspace
   \   00019F   02....       LJMP    ??cmdline_gets_2
   \                     ??cmdline_gets_9:
   \   0001A2                ; Setup parameters for call to function shell_tab
   \   0001A2   AA..         MOV     R2,?V0
   \   0001A4   AB..         MOV     R3,?V1
   \   0001A6   12....       LCALL   shell_tab
   \   0001A9   02....       LJMP    ??cmdline_gets_2
   \                     ??cmdline_gets_5:
   \   0001AC   6401         XRL     A,#0x1
   \   0001AE   85..82       MOV     DPL,?V2
   \   0001B1   85..83       MOV     DPH,?V3
   \   0001B4   700F         JNZ     ??cmdline_gets_15
   \   0001B6   E0           MOVX    A,@DPTR
   \   0001B7   645B         XRL     A,#0x5b
   \   0001B9   7005         JNZ     ??cmdline_gets_16
   \   0001BB   7E02         MOV     R6,#0x2
   \   0001BD   02....       LJMP    ??cmdline_gets_2
   \                     ??cmdline_gets_16:
   \   0001C0   7E00         MOV     R6,#0x0
   \   0001C2   02....       LJMP    ??cmdline_gets_2
   \                     ??cmdline_gets_15:
   \   0001C5   E0           MOVX    A,@DPTR
   \   0001C6   24BF         ADD     A,#-0x41
   \   0001C8   600F         JZ      ??cmdline_gets_17
   \   0001CA   14           DEC     A
   \   0001CB   6021         JZ      ??cmdline_gets_18
   \   0001CD   14           DEC     A
   \   0001CE   6023         JZ      ??cmdline_gets_19
   \   0001D0   14           DEC     A
   \   0001D1   7003         JNZ     $+5
   \   0001D3   02....       LJMP    ??cmdline_gets_1
   \   0001D6   02....       LJMP    ??cmdline_gets_2
   \                     ??cmdline_gets_17:
   \   0001D9                ; Setup parameters for call to function shell_show_history
   \   0001D9   90....       MOV     DPTR,#__Constant_0
   \                     ??cmdline_gets_20:
   \   0001DC   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0001DF   AA..         MOV     R2,?V0
   \   0001E1   AB..         MOV     R3,?V1
   \   0001E3   12....       LCALL   shell_show_history
   \   0001E6   7404         MOV     A,#0x4
   \   0001E8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001EB   02....       LJMP    ??cmdline_gets_2
   \                     ??cmdline_gets_18:
   \   0001EE                ; Setup parameters for call to function shell_show_history
   \   0001EE   90....       MOV     DPTR,#__Constant_1
   \   0001F1   80E9         SJMP    ??cmdline_gets_20
   \                     ??cmdline_gets_19:
   \   0001F3   85..82       MOV     DPL,?V6
   \   0001F6   85..83       MOV     DPH,?V7
   \   0001F9   E0           MOVX    A,@DPTR
   \   0001FA   FA           MOV     R2,A
   \   0001FB   12....       LCALL   ?Subroutine35
   \                     ??CrossCallReturnLabel_61:
   \   0001FE   6A           XRL     A,R2
   \   0001FF   7003         JNZ     $+5
   \   000201   02....       LJMP    ??cmdline_gets_2
   \   000204   12....       LCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_34:
   \   000207   7003         JNZ     $+5
   \   000209   02....       LJMP    ??cmdline_gets_2
   \   00020C   7401         MOV     A,#0x1
   \   00020E   2A           ADD     A,R2
   \   00020F   85..82       MOV     DPL,?V6
   \   000212   85..83       MOV     DPH,?V7
   \   000215   F0           MOVX    @DPTR,A
   \   000216                ; Setup parameters for indirect call
   \   000216   7C01         MOV     R4,#0x1
   \   000218   7D00         MOV     R5,#0x0
   \   00021A   E5..         MOV     A,?V0
   \   00021C   2A           ADD     A,R2
   \   00021D   F8           MOV     R0,A
   \   00021E   E4           CLR     A
   \   00021F   35..         ADDC    A,?V1
   \   000221   F9           MOV     R1,A
   \   000222   E8           MOV     A,R0
   \   000223   2438         ADD     A,#0x38
   \   000225   FA           MOV     R2,A
   \   000226   E4           CLR     A
   \   000227   39           ADDC    A,R1
   \   000228   FB           MOV     R3,A
   \   000229   90....       MOV     DPTR,#current_puts
   \   00022C   E0           MOVX    A,@DPTR
   \   00022D   F8           MOV     R0,A
   \   00022E   A3           INC     DPTR
   \   00022F   02....       LJMP    ??cmdline_gets_3
    767                    break;
    768                  default:;
    769          			} //switch 箭头内容
    770          		} // if (2 == state) //响应箭头内容
    771          	} //for ( ; len && *recv; --len,++recv)
    772          	return ;
   \                     ??cmdline_gets_4:
   \   000232   02....       LJMP    ?Subroutine0
    773          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_82:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E5..         MOV     A,?V0
   \   000002   246C         ADD     A,#0x6c
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V1
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E5..         MOV     A,?V0
   \   000002   2406         ADD     A,#0x6
   \   000004   F5..         MOV     ?V4,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V1
   \   000009   F5..         MOV     ?V5,A
   \   00000B   78..         MOV     R0,#?V4
   \   00000D   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function memcpy
   \   000001   12....       LCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_81:
   \   000004   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   E5..         MOV     A,?V0
   \   000002   246B         ADD     A,#0x6b
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V1
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET
    774          
    775          /**
    776            * @brief    命令行信息确认，如果输入 y/Y 则执行命令
    777            * @param    shellin : 交互
    778            * @param    buf     : 硬件层所接收到的数据缓冲区地址
    779            * @param    len     : 硬件层所接收到的数据长度
    780            * @return   don't care
    781          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    782          static void confirm_gets(struct shell_input * shellin ,char * buf , int len)
   \                     confirm_gets:
    783          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FA           MOV     R2,A
   \   000010   ED           MOV     A,R5
   \   000011   FB           MOV     R3,A
    784          	char * option = &shellin->cmdline[COMMANDLINE_MAX_LEN-1];
   \   000012   E5..         MOV     A,?V0
   \   000014   2469         ADD     A,#0x69
   \   000016   FE           MOV     R6,A
   \   000017   E4           CLR     A
   \   000018   35..         ADDC    A,?V1
   \   00001A   FF           MOV     R7,A
    785          
    786          	if (0 == *option) { //先输入 [Y/y/N/n] ，其他按键无效
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   E0           MOVX    A,@DPTR
   \   000026   7027         JNZ     ??confirm_gets_0
    787          		if ('Y' == *buf || 'y' == *buf || 'N' == *buf || 'n' == *buf) {
   \   000028   7459         MOV     A,#0x59
   \   00002A   68           XRL     A,R0
   \   00002B   6012         JZ      ??confirm_gets_1
   \   00002D   7479         MOV     A,#0x79
   \   00002F   68           XRL     A,R0
   \   000030   600D         JZ      ??confirm_gets_1
   \   000032   744E         MOV     A,#0x4e
   \   000034   68           XRL     A,R0
   \   000035   6008         JZ      ??confirm_gets_1
   \   000037   746E         MOV     A,#0x6e
   \   000039   68           XRL     A,R0
   \   00003A   6003         JZ      $+5
   \   00003C   02....       LJMP    ??confirm_gets_2
    788          			*option = *buf;
   \                     ??confirm_gets_1:
   \   00003F   E8           MOV     A,R0
   \   000040   12....       LCALL   ??Subroutine52_0
    789          			printl(buf,1);
   \                     ??CrossCallReturnLabel_98:
   \   000043   7003         JNZ     $+5
   \   000045   02....       LJMP    ??confirm_gets_2
   \   000048                ; Setup parameters for indirect call
   \   000048   7C01         MOV     R4,#0x1
   \   00004A   7D00         MOV     R5,#0x0
   \   00004C   02....       LJMP    ??confirm_gets_3
    790          		}
    791          	}
    792          	else
    793          	if (KEYCODE_BACKSPACE == *buf) { //回退键
   \                     ??confirm_gets_0:
   \   00004F   7408         MOV     A,#0x8
   \   000051   68           XRL     A,R0
   \   000052   701C         JNZ     ??confirm_gets_4
    794          		printl("\b \b",3);
   \   000054   12....       LCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_35:
   \   000057   600E         JZ      ??confirm_gets_5
   \   000059                ; Setup parameters for indirect call
   \   000059   7C03         MOV     R4,#0x3
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   7A..         MOV     R2,#`?<Constant "\\b \\b">` & 0xff
   \   00005F   7B..         MOV     R3,#(`?<Constant "\\b \\b">` >> 8) & 0xff
   \   000061   12....       LCALL   ??Subroutine65_0
   \                     ??CrossCallReturnLabel_146:
   \   000064   12....       LCALL   ?CALL_IND
    795          		*option = 0;
   \                     ??confirm_gets_5:
   \   000067   8E82         MOV     DPL,R6
   \   000069   8F83         MOV     DPH,R7
   \   00006B   E4           CLR     A
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   02....       LJMP    ??confirm_gets_2
    796          	}
    797          	else
    798          	if ('\r' == *buf || '\n' == *buf) {//按回车确定
   \                     ??confirm_gets_4:
   \   000070   740D         MOV     A,#0xd
   \   000072   68           XRL     A,R0
   \   000073   6008         JZ      ??confirm_gets_6
   \   000075   740A         MOV     A,#0xa
   \   000077   68           XRL     A,R0
   \   000078   6003         JZ      $+5
   \   00007A   02....       LJMP    ??confirm_gets_2
    799          //		cmd_fn_t yestodo = (cmd_fn_t)shellin->apparg;
    800              cmd_fn_t yestodo;
    801              memcpy(&yestodo, &shellin->apparg, sizeof(cmd_fn_t));
   \                     ??confirm_gets_6:
   \   00007D   E5..         MOV     A,?V0
   \   00007F   2404         ADD     A,#0x4
   \   000081   F5..         MOV     ?V4,A
   \   000083   E4           CLR     A
   \   000084   35..         ADDC    A,?V1
   \   000086   F5..         MOV     ?V5,A
   \   000088                ; Setup parameters for call to function memcpy
   \   000088   75..02       MOV     ?V2,#0x2
   \   00008B   75..00       MOV     ?V3,#0x0
   \   00008E   78..         MOV     R0,#?V2
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000093   AC..         MOV     R4,?V4
   \   000095   AD..         MOV     R5,?V5
   \   000097   7402         MOV     A,#0x2
   \   000099   12....       LCALL   ?XSTACK_DISP101_8
   \   00009C   12....       LCALL   memcpy
   \   00009F   7402         MOV     A,#0x2
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
    802           		char opt = *option ; 
   \   0000A4   8E82         MOV     DPL,R6
   \   0000A6   8F83         MOV     DPH,R7
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   F5..         MOV     ?V2,A
    803          		
    804          		*option = 0 ;  //shellin->cmdline[COMMANDLINE_MAX_LEN-1] = 0;
   \   0000AB   E4           CLR     A
   \   0000AC   F0           MOVX    @DPTR,A
    805          		shellin->gets   = cmdline_gets;//数据回归为命令行模式
   \   0000AD   85..82       MOV     DPL,?V0
   \   0000B0   85..83       MOV     DPH,?V1
   \   0000B3   74..         MOV     A,#cmdline_gets & 0xff
   \   0000B5   F0           MOVX    @DPTR,A
   \   0000B6   A3           INC     DPTR
   \   0000B7   74..         MOV     A,#(cmdline_gets >> 8) & 0xff
   \   0000B9   F0           MOVX    @DPTR,A
    806          		shellin->apparg = NULL;
   \   0000BA   85..82       MOV     DPL,?V4
   \   0000BD   85..83       MOV     DPH,?V5
   \   0000C0   E4           CLR     A
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   12....       LCALL   ??Subroutine52_0
    807          
    808          		printl("\r\n",2);
   \                     ??CrossCallReturnLabel_99:
   \   0000C6   600E         JZ      ??confirm_gets_7
   \   0000C8                ; Setup parameters for indirect call
   \   0000C8   7C02         MOV     R4,#0x2
   \   0000CA   7D00         MOV     R5,#0x0
   \   0000CC   7A..         MOV     R2,#`?<Constant "\\r\\n">` & 0xff
   \   0000CE   7B..         MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   0000D0   12....       LCALL   ??Subroutine65_0
   \                     ??CrossCallReturnLabel_147:
   \   0000D3   12....       LCALL   ?CALL_IND
    809          
    810          		if ( 'Y' == opt || 'y' == opt) 
   \                     ??confirm_gets_7:
   \   0000D6   7459         MOV     A,#0x59
   \   0000D8   65..         XRL     A,?V2
   \   0000DA   6006         JZ      ??confirm_gets_8
   \   0000DC   7479         MOV     A,#0x79
   \   0000DE   65..         XRL     A,?V2
   \   0000E0   701A         JNZ     ??confirm_gets_9
    811          			yestodo(shellin->cmdline);
   \                     ??confirm_gets_8:
   \   0000E2                ; Setup parameters for indirect call
   \   0000E2   E5..         MOV     A,?V0
   \   0000E4   2438         ADD     A,#0x38
   \   0000E6   FA           MOV     R2,A
   \   0000E7   E4           CLR     A
   \   0000E8   35..         ADDC    A,?V1
   \   0000EA   FB           MOV     R3,A
   \   0000EB   85..82       MOV     DPL,?XSP + 0
   \   0000EE   85..83       MOV     DPH,?XSP + 1
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   F8           MOV     R0,A
   \   0000F3   A3           INC     DPTR
   \                     ??confirm_gets_3:
   \   0000F4   12....       LCALL   ??Subroutine65_0
   \                     ??CrossCallReturnLabel_148:
   \   0000F7   12....       LCALL   ?CALL_IND
   \   0000FA   8007         SJMP    ??confirm_gets_2
    812          		else
    813          			printf("cancel this operation\r\n");
   \                     ??confirm_gets_9:
   \   0000FC                ; Setup parameters for call to function printf
   \   0000FC   7A..         MOV     R2,#`?<Constant "cancel this operation\\r\\n">` & 0xff
   \   0000FE   7B..         MOV     R3,#(`?<Constant "cancel this operation\\r\\n">` >> 8) & 0xff
   \   000100   12....       LCALL   printf
    814          	}
    815          }
   \                     ??confirm_gets_2:
   \   000103   7402         MOV     A,#0x2
   \   000105   12....       LCALL   ?DEALLOC_XSTACK8
   \   000108   7F06         MOV     R7,#0x6
   \   00010A   02....       LJMP    ?FUNC_LEAVE_XDATA
    816          
    817          /**
    818            * @brief    命令行信息确认，如果输入 y/Y 则执行命令
    819            * @param    shell  : 输入交互
    820            * @param    info   : 选项信息
    821            * @param    yestodo: 输入 y/Y 后所需执行的命令
    822            * @return   don't care
    823          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    824          void shell_confirm(struct shell_input * shellin ,char * info ,cmd_fn_t yestodo)
   \                     shell_confirm:
    825          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    826          	printf("%s [Y/N] ",info);
   \   000009                ; Setup parameters for call to function printf
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   78..         MOV     R0,#?V0
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   7A..         MOV     R2,#`?<Constant "%s [Y/N] ">` & 0xff
   \   000014   7B..         MOV     R3,#(`?<Constant "%s [Y/N] ">` >> 8) & 0xff
   \   000016   12....       LCALL   printf
   \   000019   7402         MOV     A,#0x2
   \   00001B   12....       LCALL   ?DEALLOC_XSTACK8
    827          	shellin->gets = confirm_gets;// 数据流获取至 confirm_gets
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   74..         MOV     A,#confirm_gets & 0xff
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   74..         MOV     A,#(confirm_gets >> 8) & 0xff
   \   000028   F0           MOVX    @DPTR,A
    828          //	shellin->apparg = (void*)yestodo;
    829            memcpy(&shellin->apparg, &yestodo, sizeof(cmd_fn_t));
   \   000029                ; Setup parameters for call to function memcpy
   \   000029   75..02       MOV     ?V0,#0x2
   \   00002C   75..00       MOV     ?V1,#0x0
   \   00002F   78..         MOV     R0,#?V0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034   740B         MOV     A,#0xb
   \   000036   12....       LCALL   ?XSTACK_DISP102_8
   \   000039   EE           MOV     A,R6
   \   00003A   2404         ADD     A,#0x4
   \   00003C   FA           MOV     R2,A
   \   00003D   E4           CLR     A
   \   00003E   3F           ADDC    A,R7
   \   00003F   FB           MOV     R3,A
   \   000040   12....       LCALL   memcpy
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
    830          	shellin->cmdline[COMMANDLINE_MAX_LEN-1] = 0;
   \   000048   EE           MOV     A,R6
   \   000049   2469         ADD     A,#0x69
   \   00004B   F582         MOV     DPL,A
   \   00004D   E4           CLR     A
   \   00004E   3F           ADDC    A,R7
   \   00004F   F583         MOV     DPH,A
   \   000051   E4           CLR     A
   \   000052   F0           MOVX    @DPTR,A
    831          }
   \   000053   02....       LJMP    ??Subroutine60_0
    832          
    833          /**
    834            * @author   古么宁
    835            * @brief    初始化一个 shell 交互，默认输入为 cmdline_gets
    836            * @param    shellin   : 需要初始化的 shell 交互 
    837            * @param    shellputs : shell 对应输出，如从串口输出。
    838            * @param    ...       : 对 gets 和 sign 重定义，如追加 MODIFY_SIGN,"shell>>"
    839            * @return   don't care
    840          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   2402         ADD     A,#0x2
   \   000009                REQUIRE ??Subroutine56_0
   \   000009                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    841          void shell_input_init(struct shell_input * shellin , fmt_puts_t shellputs,...)
   \                     shell_input_init:
    842          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
    843          	uint32_t arg  ;
    844          	char * shellsign = DEFAULT_INPUTSIGN;
   \   000014   7E..         MOV     R6,#DEFAULT_INPUTSIGN & 0xff
   \   000016   7F..         MOV     R7,#(DEFAULT_INPUTSIGN >> 8) & 0xff
    845          	shellgets_t shellgets = welcome_gets;
   \   000018   7C..         MOV     R4,#welcome_gets & 0xff
   \   00001A   7D..         MOV     R5,#(welcome_gets >> 8) & 0xff
    846          	
    847          	va_list ap;
    848          	va_start(ap, shellputs); //检测有无新定义 
   \   00001C   7413         MOV     A,#0x13
   \   00001E   12....       LCALL   ?XSTACK_DISP100_8
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   E8           MOV     A,R0
   \   000028   12....       LCALL   ?Subroutine5
    849          
    850          	arg = va_arg(ap, unsigned int) ;
   \                     ??CrossCallReturnLabel_6:
   \   00002B   F5..         MOV     ?V4,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F5..         MOV     ?V5,A
   \   000031   E4           CLR     A
   \   000032   F5..         MOV     ?V6,A
   \   000034   F5..         MOV     ?V7,A
   \   000036   8022         SJMP    ??shell_input_init_0
    851          	for (; MODIFY_MASK == (arg & (~0x0f)) ; arg = va_arg(ap, unsigned int) ) {
    852          		if (MODIFY_SIGN == arg) //如果重定义当前交互的输入标志
    853          			shellsign = va_arg(ap, char*);
    854          		else
    855          		if (MODIFY_GETS == arg) //如果重定义当前交互的输入流向
   \                     ??shell_input_init_1:
   \   000038   90....       MOV     DPTR,#__Constant_abcd4322
   \   00003B   78..         MOV     R0,#?V4
   \   00003D   12....       LCALL   ?L_EQ_X
   \   000040   700F         JNZ     ??CrossCallReturnLabel_131
    856              {
    857          //      shellgets = (shellgets_t)va_arg(ap, void*);
    858                void* shellgets_ptr = va_arg(ap, void*);
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   12....       LCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_31:
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   FD           MOV     R5,A
   \                     ??shell_input_init_2:
   \   00004E   12....       LCALL   ?Subroutine7
    859                memcpy(&shellgets, &shellgets_ptr, sizeof(shellgets_t));
    860              }	
   \                     ??CrossCallReturnLabel_131:
   \   000051   12....       LCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_162:
   \   000054   F5..         MOV     ?V4,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F5..         MOV     ?V5,A
   \                     ??shell_input_init_0:
   \   00005A   12....       LCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_132:
   \   00005D   85....       MOV     ?V0,?V4
   \   000060   85....       MOV     ?V1,?V5
   \   000063   85....       MOV     ?V2,?V6
   \   000066   85....       MOV     ?V3,?V7
   \   000069   90....       MOV     DPTR,#__Constant_fffffff0
   \   00006C   78..         MOV     R0,#?V0
   \   00006E   12....       LCALL   ?L_AND_X
   \   000071   7583..       MOV     DPH,#(__Constant_abcd4320 >> 8) & 0xff
   \   000074   7582..       MOV     DPL,#__Constant_abcd4320 & 0xff
   \   000077   78..         MOV     R0,#?V0
   \   000079   12....       LCALL   ?L_EQ_X
   \   00007C   7013         JNZ     ??shell_input_init_3
   \   00007E   90....       MOV     DPTR,#__Constant_abcd4321
   \   000081   78..         MOV     R0,#?V4
   \   000083   12....       LCALL   ?L_EQ_X
   \   000086   70B0         JNZ     ??shell_input_init_1
   \   000088   12....       LCALL   ?Subroutine21
    861          	}
   \                     ??CrossCallReturnLabel_163:
   \   00008B   FE           MOV     R6,A
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   FF           MOV     R7,A
   \   00008F   80BD         SJMP    ??shell_input_init_2
    862          
    863          	va_end(ap);
    864          
    865          	shellin->tail = 0;
   \                     ??shell_input_init_3:
   \   000091   EA           MOV     A,R2
   \   000092   246B         ADD     A,#0x6b
   \   000094   12....       LCALL   ?Subroutine40
    866          	shellin->edit = 0;
   \                     ??CrossCallReturnLabel_71:
   \   000097   EA           MOV     A,R2
   \   000098   246A         ADD     A,#0x6a
   \   00009A   12....       LCALL   ?Subroutine40
    867          	shellin->puts = shellputs;
   \                     ??CrossCallReturnLabel_72:
   \   00009D   7402         MOV     A,#0x2
   \   00009F   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A2   12....       LCALL   ?Subroutine27
   \                     ??CrossCallReturnLabel_46:
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   12....       LCALL   ??Subroutine57_0
    868          	shellin->gets = shellgets;
   \                     ??CrossCallReturnLabel_129:
   \   0000AA   8A82         MOV     DPL,R2
   \   0000AC   8B83         MOV     DPH,R3
   \   0000AE   EC           MOV     A,R4
   \   0000AF   F0           MOVX    @DPTR,A
   \   0000B0   A3           INC     DPTR
   \   0000B1   ED           MOV     A,R5
   \   0000B2   12....       LCALL   ?Subroutine11
    869            shellin->gets = cmdline_gets;
   \                     ??CrossCallReturnLabel_18:
   \   0000B5   74..         MOV     A,#cmdline_gets & 0xff
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   74..         MOV     A,#(cmdline_gets >> 8) & 0xff
   \   0000BB   F0           MOVX    @DPTR,A
    870          	shellin->htywrt  = 0;
   \   0000BC   EA           MOV     A,R2
   \   0000BD   246C         ADD     A,#0x6c
   \   0000BF   12....       LCALL   ?Subroutine40
    871          	shellin->htyread = 0;
   \                     ??CrossCallReturnLabel_73:
   \   0000C2   EA           MOV     A,R2
   \   0000C3   246D         ADD     A,#0x6d
   \   0000C5   F582         MOV     DPL,A
   \   0000C7   E4           CLR     A
   \   0000C8   3B           ADDC    A,R3
   \   0000C9   F583         MOV     DPH,A
   \   0000CB   E4           CLR     A
   \   0000CC   12....       LCALL   ?Subroutine11
    872          	shellin->apparg  = NULL;
   \                     ??CrossCallReturnLabel_19:
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   F0           MOVX    @DPTR,A
   \   0000D4   A3           INC     DPTR
   \   0000D5   F0           MOVX    @DPTR,A
    873          	strcpy(shellin->sign, shellsign);
   \   0000D6                ; Setup parameters for call to function strcpy
   \   0000D6   EE           MOV     A,R6
   \   0000D7   FC           MOV     R4,A
   \   0000D8   EF           MOV     A,R7
   \   0000D9   FD           MOV     R5,A
   \   0000DA   EA           MOV     A,R2
   \   0000DB   2406         ADD     A,#0x6
   \   0000DD   FA           MOV     R2,A
   \   0000DE   5001         JNC     ??shell_input_init_4
   \   0000E0   0B           INC     R3
   \                     ??shell_input_init_4:
   \   0000E1   12....       LCALL   strcpy
    874          }
   \   0000E4   02....       LJMP    ?Subroutine0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ??Subroutine66_0
   \                     ??CrossCallReturnLabel_157:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine67_0
   \   000006                ; // Fall through to label ??Subroutine67_0
    875          
    876          
    877          /**
    878            * @author   古么宁
    879            * @brief    shell 初始化,注册几条基本的命令。允许不初始化。
    880            * @param    defaultsign : 重定义默认输出标志，为 NULL 则不修改默认标志
    881            * @param    puts        : printf,printf,printl 的默认输出，如从串口输出，为 NULL 则不打印信息。
    882            * @return   don't care
    883          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    884          void shell_init(char * defaultsign ,fmt_puts_t puts)
   \                     shell_init:
    885          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
    886          	if (defaultsign)
   \   000009   EA           MOV     A,R2
   \   00000A   4B           ORL     A,R3
   \   00000B   601B         JZ      ??shell_init_0
    887          		strncpy(DEFAULT_INPUTSIGN,defaultsign,COMMANDLINE_MAX_LEN);
   \   00000D                ; Setup parameters for call to function strncpy
   \   00000D   75..32       MOV     ?V0,#0x32
   \   000010   75..00       MOV     ?V1,#0x0
   \   000013   78..         MOV     R0,#?V0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   EA           MOV     A,R2
   \   000019   FC           MOV     R4,A
   \   00001A   EB           MOV     A,R3
   \   00001B   FD           MOV     R5,A
   \   00001C   7A..         MOV     R2,#DEFAULT_INPUTSIGN & 0xff
   \   00001E   7B..         MOV     R3,#(DEFAULT_INPUTSIGN >> 8) & 0xff
   \   000020   12....       LCALL   strncpy
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
    888          	//strcpy(DEFAULT_INPUTSIGN,defaultsign);
    889          
    890          	current_puts = puts ;
   \                     ??shell_init_0:
   \   000028   90....       MOV     DPTR,#current_puts
   \   00002B   EE           MOV     A,R6
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   EF           MOV     A,R7
   \   00002F   F0           MOVX    @DPTR,A
    891          	default_puts = puts ;
   \   000030   90....       MOV     DPTR,#default_puts
   \   000033   EE           MOV     A,R6
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   EF           MOV     A,R7
   \   000037   F0           MOVX    @DPTR,A
    892          	
    893          	/* 注册一些基本命令 */
    894          	shell_register_command("help"     ,shell_list_cmd);
   \   000038                ; Setup parameters for call to function _shell_register
   \   000038   75....       MOV     ?V0,#shell_list_cmd & 0xff
   \   00003B   75....       MOV     ?V1,#(shell_list_cmd >> 8) & 0xff
   \   00003E   78..         MOV     R0,#?V0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   7C..         MOV     R4,#`?<Constant "help">` & 0xff
   \   000045   7D..         MOV     R5,#(`?<Constant "help">` >> 8) & 0xff
   \   000047   7A..         MOV     R2,#??newcmd & 0xff
   \   000049   7B..         MOV     R3,#(??newcmd >> 8) & 0xff
   \   00004B   12....       LCALL   _shell_register
   \   00004E   7402         MOV     A,#0x2
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
    895          	shell_register_command("clear"        ,shell_clean_screen);
   \   000053                ; Setup parameters for call to function _shell_register
   \   000053   75....       MOV     ?V0,#shell_clean_screen & 0xff
   \   000056   75....       MOV     ?V1,#(shell_clean_screen >> 8) & 0xff
   \   000059   78..         MOV     R0,#?V0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   7C..         MOV     R4,#`?<Constant "clear">` & 0xff
   \   000060   7D..         MOV     R5,#(`?<Constant "clear">` >> 8) & 0xff
   \   000062   7A..         MOV     R2,#??newcmd_1 & 0xff
   \   000064   7B..         MOV     R3,#(??newcmd_1 >> 8) & 0xff
   \   000066   12....       LCALL   _shell_register
   \   000069   02....       LJMP    ?Subroutine2
    896          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??newcmd:
   \   000000                DS 10
   \   00000A                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??newcmd_1:
   \   000000                DS 10
   \   00000A                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\033[2K\\r%s">>`:
   \   000000   1B5B324B     DB "\033[2K\015%s"
   \            0D257300

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\r\\n\\t%s">>`:
   \   000000   0D0A0925     DB "\015\012\t%s"
   \            7300    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\r\\n%s%s">>`:
   \   000000   0D0A2573     DB "\015\012%s%s"
   \            257300  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant {0}>>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000021   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000029   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000031   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000039   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000041   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000049   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000051   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000059   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000061   000000       DB 0, 0, 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant {0}>>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000021   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000029   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000031   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000039   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000041   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000049   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000051   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000059   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000061   000000       DB 0, 0, 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\r\\n\\tno reply:%s`:
   \   000000   0D0A096E     DB "\015\012\tno reply:%s\015\012"
   \            6F207265
   \            706C793A
   \            25730D0A
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\033[2J\\033[%ld;%`:
   \   000000   1B5B324A     DB "\033[2J\033[%ld;%ldH%s"
   \            1B5B256C
   \            643B256C
   \            64482573
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\r\\n(%c)------">>`:
   \   000000   0D0A2825     DB "\015\012(%c)------"
   \            63292D2D
   \            2D2D2D2D
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\r\\n\\r\\n%s">>`:
   \   000000   0D0A0D0A     DB "\015\012\015\012%s"
   \            257300  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\r\\n">>`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\r\\n%s">>`:
   \   000000   0D0A2573     DB "\015\012%s"
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "^C\\r\\n%s">>`:
   \   000000   5E430D0A     DB "^C\015\012%s"
   \            257300  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\b">>`:
   \   000000   0800         DB "\010"

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\b \\b">>`:
   \   000000   08200800     DB "\010 \010"

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "cancel this opera`:
   \   000000   63616E63     DB "cancel this operation\015\012"
   \            656C2074
   \            68697320
   \            6F706572
   \            6174696F
   \            6E0D0A00

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "%s [Y/N] ">>`:
   \   000000   2573205B     DB "%s [Y/N] "
   \            592F4E5D
   \            2000    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "help">>`:
   \   000000   68656C70     DB "help"
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "clear">>`:
   \   000000   636C6561     DB "clear"
   \            7200    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for F_CRC8_Table>`:
   \   000000   00           DB 0
   \   000001   31           DB 49
   \   000002   62           DB 98
   \   000003   53           DB 83
   \   000004   C4           DB 196
   \   000005   F5           DB 245
   \   000006   A6           DB 166
   \   000007   97           DB 151
   \   000008   B9           DB 185
   \   000009   88           DB 136
   \   00000A   DB           DB 219
   \   00000B   EA           DB 234
   \   00000C   7D           DB 125
   \   00000D   4C           DB 76
   \   00000E   1F           DB 31
   \   00000F   2E           DB 46
   \   000010   43           DB 67
   \   000011   72           DB 114
   \   000012   21           DB 33
   \   000013   10           DB 16
   \   000014   87           DB 135
   \   000015   B6           DB 182
   \   000016   E5           DB 229
   \   000017   D4           DB 212
   \   000018   FA           DB 250
   \   000019   CB           DB 203
   \   00001A   98           DB 152
   \   00001B   A9           DB 169
   \   00001C   3E           DB 62
   \   00001D   0F           DB 15
   \   00001E   5C           DB 92
   \   00001F   6D           DB 109
   \   000020   86           DB 134
   \   000021   B7           DB 183
   \   000022   E4           DB 228
   \   000023   D5           DB 213
   \   000024   42           DB 66
   \   000025   73           DB 115
   \   000026   20           DB 32
   \   000027   11           DB 17
   \   000028   3F           DB 63
   \   000029   0E           DB 14
   \   00002A   5D           DB 93
   \   00002B   6C           DB 108
   \   00002C   FB           DB 251
   \   00002D   CA           DB 202
   \   00002E   99           DB 153
   \   00002F   A8           DB 168
   \   000030   C5           DB 197
   \   000031   F4           DB 244
   \   000032   A7           DB 167
   \   000033   96           DB 150
   \   000034   01           DB 1
   \   000035   30           DB 48
   \   000036   63           DB 99
   \   000037   52           DB 82
   \   000038   7C           DB 124
   \   000039   4D           DB 77
   \   00003A   1E           DB 30
   \   00003B   2F           DB 47
   \   00003C   B8           DB 184
   \   00003D   89           DB 137
   \   00003E   DA           DB 218
   \   00003F   EB           DB 235
   \   000040   3D           DB 61
   \   000041   0C           DB 12
   \   000042   5F           DB 95
   \   000043   6E           DB 110
   \   000044   F9           DB 249
   \   000045   C8           DB 200
   \   000046   9B           DB 155
   \   000047   AA           DB 170
   \   000048   84           DB 132
   \   000049   B5           DB 181
   \   00004A   E6           DB 230
   \   00004B   D7           DB 215
   \   00004C   40           DB 64
   \   00004D   71           DB 113
   \   00004E   22           DB 34
   \   00004F   13           DB 19
   \   000050   7E           DB 126
   \   000051   4F           DB 79
   \   000052   1C           DB 28
   \   000053   2D           DB 45
   \   000054   BA           DB 186
   \   000055   8B           DB 139
   \   000056   D8           DB 216
   \   000057   E9           DB 233
   \   000058   C7           DB 199
   \   000059   F6           DB 246
   \   00005A   A5           DB 165
   \   00005B   94           DB 148
   \   00005C   03           DB 3
   \   00005D   32           DB 50
   \   00005E   61           DB 97
   \   00005F   50           DB 80
   \   000060   BB           DB 187
   \   000061   8A           DB 138
   \   000062   D9           DB 217
   \   000063   E8           DB 232
   \   000064   7F           DB 127
   \   000065   4E           DB 78
   \   000066   1D           DB 29
   \   000067   2C           DB 44
   \   000068   02           DB 2
   \   000069   33           DB 51
   \   00006A   60           DB 96
   \   00006B   51           DB 81
   \   00006C   C6           DB 198
   \   00006D   F7           DB 247
   \   00006E   A4           DB 164
   \   00006F   95           DB 149
   \   000070   F8           DB 248
   \   000071   C9           DB 201
   \   000072   9A           DB 154
   \   000073   AB           DB 171
   \   000074   3C           DB 60
   \   000075   0D           DB 13
   \   000076   5E           DB 94
   \   000077   6F           DB 111
   \   000078   41           DB 65
   \   000079   70           DB 112
   \   00007A   23           DB 35
   \   00007B   12           DB 18
   \   00007C   85           DB 133
   \   00007D   B4           DB 180
   \   00007E   E7           DB 231
   \   00007F   D6           DB 214
   \   000080   7A           DB 122
   \   000081   4B           DB 75
   \   000082   18           DB 24
   \   000083   29           DB 41
   \   000084   BE           DB 190
   \   000085   8F           DB 143
   \   000086   DC           DB 220
   \   000087   ED           DB 237
   \   000088   C3           DB 195
   \   000089   F2           DB 242
   \   00008A   A1           DB 161
   \   00008B   90           DB 144
   \   00008C   07           DB 7
   \   00008D   36           DB 54
   \   00008E   65           DB 101
   \   00008F   54           DB 84
   \   000090   39           DB 57
   \   000091   08           DB 8
   \   000092   5B           DB 91
   \   000093   6A           DB 106
   \   000094   FD           DB 253
   \   000095   CC           DB 204
   \   000096   9F           DB 159
   \   000097   AE           DB 174
   \   000098   80           DB 128
   \   000099   B1           DB 177
   \   00009A   E2           DB 226
   \   00009B   D3           DB 211
   \   00009C   44           DB 68
   \   00009D   75           DB 117
   \   00009E   26           DB 38
   \   00009F   17           DB 23
   \   0000A0   FC           DB 252
   \   0000A1   CD           DB 205
   \   0000A2   9E           DB 158
   \   0000A3   AF           DB 175
   \   0000A4   38           DB 56
   \   0000A5   09           DB 9
   \   0000A6   5A           DB 90
   \   0000A7   6B           DB 107
   \   0000A8   45           DB 69
   \   0000A9   74           DB 116
   \   0000AA   27           DB 39
   \   0000AB   16           DB 22
   \   0000AC   81           DB 129
   \   0000AD   B0           DB 176
   \   0000AE   E3           DB 227
   \   0000AF   D2           DB 210
   \   0000B0   BF           DB 191
   \   0000B1   8E           DB 142
   \   0000B2   DD           DB 221
   \   0000B3   EC           DB 236
   \   0000B4   7B           DB 123
   \   0000B5   4A           DB 74
   \   0000B6   19           DB 25
   \   0000B7   28           DB 40
   \   0000B8   06           DB 6
   \   0000B9   37           DB 55
   \   0000BA   64           DB 100
   \   0000BB   55           DB 85
   \   0000BC   C2           DB 194
   \   0000BD   F3           DB 243
   \   0000BE   A0           DB 160
   \   0000BF   91           DB 145
   \   0000C0   47           DB 71
   \   0000C1   76           DB 118
   \   0000C2   25           DB 37
   \   0000C3   14           DB 20
   \   0000C4   83           DB 131
   \   0000C5   B2           DB 178
   \   0000C6   E1           DB 225
   \   0000C7   D0           DB 208
   \   0000C8   FE           DB 254
   \   0000C9   CF           DB 207
   \   0000CA   9C           DB 156
   \   0000CB   AD           DB 173
   \   0000CC   3A           DB 58
   \   0000CD   0B           DB 11
   \   0000CE   58           DB 88
   \   0000CF   69           DB 105
   \   0000D0   04           DB 4
   \   0000D1   35           DB 53
   \   0000D2   66           DB 102
   \   0000D3   57           DB 87
   \   0000D4   C0           DB 192
   \   0000D5   F1           DB 241
   \   0000D6   A2           DB 162
   \   0000D7   93           DB 147
   \   0000D8   BD           DB 189
   \   0000D9   8C           DB 140
   \   0000DA   DF           DB 223
   \   0000DB   EE           DB 238
   \   0000DC   79           DB 121
   \   0000DD   48           DB 72
   \   0000DE   1B           DB 27
   \   0000DF   2A           DB 42
   \   0000E0   C1           DB 193
   \   0000E1   F0           DB 240
   \   0000E2   A3           DB 163
   \   0000E3   92           DB 146
   \   0000E4   05           DB 5
   \   0000E5   34           DB 52
   \   0000E6   67           DB 103
   \   0000E7   56           DB 86
   \   0000E8   78           DB 120
   \   0000E9   49           DB 73
   \   0000EA   1A           DB 26
   \   0000EB   2B           DB 43
   \   0000EC   BC           DB 188
   \   0000ED   8D           DB 141
   \   0000EE   DE           DB 222
   \   0000EF   EF           DB 239
   \   0000F0   82           DB 130
   \   0000F1   B3           DB 179
   \   0000F2   E0           DB 224
   \   0000F3   D1           DB 209
   \   0000F4   46           DB 70
   \   0000F5   77           DB 119
   \   0000F6   24           DB 36
   \   0000F7   15           DB 21
   \   0000F8   3B           DB 59
   \   0000F9   0A           DB 10
   \   0000FA   59           DB 89
   \   0000FB   68           DB 104
   \   0000FC   FF           DB 255
   \   0000FD   CE           DB 206
   \   0000FE   9D           DB 157
   \   0000FF   AC           DB 172

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for B_CRC8_Table>`:
   \   000000   00           DB 0
   \   000001   5E           DB 94
   \   000002   BC           DB 188
   \   000003   E2           DB 226
   \   000004   61           DB 97
   \   000005   3F           DB 63
   \   000006   DD           DB 221
   \   000007   83           DB 131
   \   000008   C2           DB 194
   \   000009   9C           DB 156
   \   00000A   7E           DB 126
   \   00000B   20           DB 32
   \   00000C   A3           DB 163
   \   00000D   FD           DB 253
   \   00000E   1F           DB 31
   \   00000F   41           DB 65
   \   000010   9D           DB 157
   \   000011   C3           DB 195
   \   000012   21           DB 33
   \   000013   7F           DB 127
   \   000014   FC           DB 252
   \   000015   A2           DB 162
   \   000016   40           DB 64
   \   000017   1E           DB 30
   \   000018   5F           DB 95
   \   000019   01           DB 1
   \   00001A   E3           DB 227
   \   00001B   BD           DB 189
   \   00001C   3E           DB 62
   \   00001D   60           DB 96
   \   00001E   82           DB 130
   \   00001F   DC           DB 220
   \   000020   23           DB 35
   \   000021   7D           DB 125
   \   000022   9F           DB 159
   \   000023   C1           DB 193
   \   000024   42           DB 66
   \   000025   1C           DB 28
   \   000026   FE           DB 254
   \   000027   A0           DB 160
   \   000028   E1           DB 225
   \   000029   BF           DB 191
   \   00002A   5D           DB 93
   \   00002B   03           DB 3
   \   00002C   80           DB 128
   \   00002D   DE           DB 222
   \   00002E   3C           DB 60
   \   00002F   62           DB 98
   \   000030   BE           DB 190
   \   000031   E0           DB 224
   \   000032   02           DB 2
   \   000033   5C           DB 92
   \   000034   DF           DB 223
   \   000035   81           DB 129
   \   000036   63           DB 99
   \   000037   3D           DB 61
   \   000038   7C           DB 124
   \   000039   22           DB 34
   \   00003A   C0           DB 192
   \   00003B   9E           DB 158
   \   00003C   1D           DB 29
   \   00003D   43           DB 67
   \   00003E   A1           DB 161
   \   00003F   FF           DB 255
   \   000040   46           DB 70
   \   000041   18           DB 24
   \   000042   FA           DB 250
   \   000043   A4           DB 164
   \   000044   27           DB 39
   \   000045   79           DB 121
   \   000046   9B           DB 155
   \   000047   C5           DB 197
   \   000048   84           DB 132
   \   000049   DA           DB 218
   \   00004A   38           DB 56
   \   00004B   66           DB 102
   \   00004C   E5           DB 229
   \   00004D   BB           DB 187
   \   00004E   59           DB 89
   \   00004F   07           DB 7
   \   000050   DB           DB 219
   \   000051   85           DB 133
   \   000052   67           DB 103
   \   000053   39           DB 57
   \   000054   BA           DB 186
   \   000055   E4           DB 228
   \   000056   06           DB 6
   \   000057   58           DB 88
   \   000058   19           DB 25
   \   000059   47           DB 71
   \   00005A   A5           DB 165
   \   00005B   FB           DB 251
   \   00005C   78           DB 120
   \   00005D   26           DB 38
   \   00005E   C4           DB 196
   \   00005F   9A           DB 154
   \   000060   65           DB 101
   \   000061   3B           DB 59
   \   000062   D9           DB 217
   \   000063   87           DB 135
   \   000064   04           DB 4
   \   000065   5A           DB 90
   \   000066   B8           DB 184
   \   000067   E6           DB 230
   \   000068   A7           DB 167
   \   000069   F9           DB 249
   \   00006A   1B           DB 27
   \   00006B   45           DB 69
   \   00006C   C6           DB 198
   \   00006D   98           DB 152
   \   00006E   7A           DB 122
   \   00006F   24           DB 36
   \   000070   F8           DB 248
   \   000071   A6           DB 166
   \   000072   44           DB 68
   \   000073   1A           DB 26
   \   000074   99           DB 153
   \   000075   C7           DB 199
   \   000076   25           DB 37
   \   000077   7B           DB 123
   \   000078   3A           DB 58
   \   000079   64           DB 100
   \   00007A   86           DB 134
   \   00007B   D8           DB 216
   \   00007C   5B           DB 91
   \   00007D   05           DB 5
   \   00007E   E7           DB 231
   \   00007F   B9           DB 185
   \   000080   8C           DB 140
   \   000081   D2           DB 210
   \   000082   30           DB 48
   \   000083   6E           DB 110
   \   000084   ED           DB 237
   \   000085   B3           DB 179
   \   000086   51           DB 81
   \   000087   0F           DB 15
   \   000088   4E           DB 78
   \   000089   10           DB 16
   \   00008A   F2           DB 242
   \   00008B   AC           DB 172
   \   00008C   2F           DB 47
   \   00008D   71           DB 113
   \   00008E   93           DB 147
   \   00008F   CD           DB 205
   \   000090   11           DB 17
   \   000091   4F           DB 79
   \   000092   AD           DB 173
   \   000093   F3           DB 243
   \   000094   70           DB 112
   \   000095   2E           DB 46
   \   000096   CC           DB 204
   \   000097   92           DB 146
   \   000098   D3           DB 211
   \   000099   8D           DB 141
   \   00009A   6F           DB 111
   \   00009B   31           DB 49
   \   00009C   B2           DB 178
   \   00009D   EC           DB 236
   \   00009E   0E           DB 14
   \   00009F   50           DB 80
   \   0000A0   AF           DB 175
   \   0000A1   F1           DB 241
   \   0000A2   13           DB 19
   \   0000A3   4D           DB 77
   \   0000A4   CE           DB 206
   \   0000A5   90           DB 144
   \   0000A6   72           DB 114
   \   0000A7   2C           DB 44
   \   0000A8   6D           DB 109
   \   0000A9   33           DB 51
   \   0000AA   D1           DB 209
   \   0000AB   8F           DB 143
   \   0000AC   0C           DB 12
   \   0000AD   52           DB 82
   \   0000AE   B0           DB 176
   \   0000AF   EE           DB 238
   \   0000B0   32           DB 50
   \   0000B1   6C           DB 108
   \   0000B2   8E           DB 142
   \   0000B3   D0           DB 208
   \   0000B4   53           DB 83
   \   0000B5   0D           DB 13
   \   0000B6   EF           DB 239
   \   0000B7   B1           DB 177
   \   0000B8   F0           DB 240
   \   0000B9   AE           DB 174
   \   0000BA   4C           DB 76
   \   0000BB   12           DB 18
   \   0000BC   91           DB 145
   \   0000BD   CF           DB 207
   \   0000BE   2D           DB 45
   \   0000BF   73           DB 115
   \   0000C0   CA           DB 202
   \   0000C1   94           DB 148
   \   0000C2   76           DB 118
   \   0000C3   28           DB 40
   \   0000C4   AB           DB 171
   \   0000C5   F5           DB 245
   \   0000C6   17           DB 23
   \   0000C7   49           DB 73
   \   0000C8   08           DB 8
   \   0000C9   56           DB 86
   \   0000CA   B4           DB 180
   \   0000CB   EA           DB 234
   \   0000CC   69           DB 105
   \   0000CD   37           DB 55
   \   0000CE   D5           DB 213
   \   0000CF   8B           DB 139
   \   0000D0   57           DB 87
   \   0000D1   09           DB 9
   \   0000D2   EB           DB 235
   \   0000D3   B5           DB 181
   \   0000D4   36           DB 54
   \   0000D5   68           DB 104
   \   0000D6   8A           DB 138
   \   0000D7   D4           DB 212
   \   0000D8   95           DB 149
   \   0000D9   CB           DB 203
   \   0000DA   29           DB 41
   \   0000DB   77           DB 119
   \   0000DC   F4           DB 244
   \   0000DD   AA           DB 170
   \   0000DE   48           DB 72
   \   0000DF   16           DB 22
   \   0000E0   E9           DB 233
   \   0000E1   B7           DB 183
   \   0000E2   55           DB 85
   \   0000E3   0B           DB 11
   \   0000E4   88           DB 136
   \   0000E5   D6           DB 214
   \   0000E6   34           DB 52
   \   0000E7   6A           DB 106
   \   0000E8   2B           DB 43
   \   0000E9   75           DB 117
   \   0000EA   97           DB 151
   \   0000EB   C9           DB 201
   \   0000EC   4A           DB 74
   \   0000ED   14           DB 20
   \   0000EE   F6           DB 246
   \   0000EF   A8           DB 168
   \   0000F0   74           DB 116
   \   0000F1   2A           DB 42
   \   0000F2   C8           DB 200
   \   0000F3   96           DB 150
   \   0000F4   15           DB 21
   \   0000F5   4B           DB 75
   \   0000F6   A9           DB 169
   \   0000F7   F7           DB 247
   \   0000F8   B6           DB 182
   \   0000F9   E8           DB 232
   \   0000FA   0A           DB 10
   \   0000FB   54           DB 84
   \   0000FC   D7           DB 215
   \   0000FD   89           DB 137
   \   0000FE   6B           DB 107
   \   0000FF   35           DB 53

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for DEFAULT_INPUTSIGN>`:
   \   000000   7E202320     DB "~ # "
   \            00      
   \   000005   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00000D   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000015   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00001D   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000025   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00002D   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for consolologo>`:
   \   000000   0D0A2020     DB 0DH, 0AH, 20H, 20H, 5FH, 5FH, 5FH, 5FH
   \            5F5F5F5F
   \   000008   5F202020     DB 5FH, 20H, 20H, 20H, 20H, 20H, 20H, 20H
   \            20202020
   \   000010   20202020     DB 20H, 20H, 20H, 20H, 20H, 20H, 20H, 20H
   \            20202020
   \   000018   20202020     DB 20H, 20H, 20H, 20H, 20H, 20H, 20H, 20H
   \            20202020
   \   000020   205F5F0D     DB 20H, 5FH, 5FH, 0DH, 0AH, 20H, 2FH, 20H
   \            0A202F20
   \   000028   5F5F5F5F     DB 5FH, 5FH, 5FH, 5FH, 5CH, 20H, 20H, 20H
   \            5C202020
   \   000030   20202020     DB 20H, 20H, 20H, 20H, 20H, 20H, 20H, 20H
   \            20202020
   \   000038   20202020     DB 20H, 20H, 20H, 20H, 20H, 20H, 20H, 20H
   \            20202020
   \   000040   2020202F     DB 20H, 20H, 20H, 2FH, 5CH, 20H, 5CH, 0DH
   \            5C205C0D
   \   000048   0A2F5C20     DB 0AH, 2FH, 5CH, 20H, 5CH, 5FH, 5FH, 5FH
   \            5C5F5F5F
   \   000050   2F202020     DB 2FH, 20H, 20H, 20H, 5FH, 5FH, 5FH, 5FH
   \            5F5F5F5F
   \   000058   20205F5F     DB 20H, 20H, 5FH, 5FH, 5FH, 5FH, 20H, 20H
   \            5F5F2020
   \   000060   5F5F5F5F     DB 5FH, 5FH, 5FH, 5FH, 20H, 20H, 5FH, 5CH
   \            20205F5C
   \   000068   5F5C205C     DB 5FH, 5CH, 20H, 5CH, 20H, 20H, 20H, 20H
   \            20202020
   \   000070   205F5F5F     DB 20H, 5FH, 5FH, 5FH, 5FH, 0DH, 0AH, 5CH
   \            5F0D0A5C
   \   000078   205C205C     DB 20H, 5CH, 20H, 5CH, 20H, 20H, 20H, 20H
   \            20202020
   \   000080   202F205F     DB 20H, 2FH, 20H, 5FH, 5FH, 20H, 5CH, 2FH
   \            5F205C2F
   \   000088   205F5F20     DB 20H, 5FH, 5FH, 20H, 5CH, 2FH, 20H, 5FH
   \            5C2F205F
   \   000090   5F5F5C2F     DB 5FH, 5FH, 5CH, 2FH, 20H, 5FH, 5FH, 20H
   \            205F5F20
   \   000098   5C205C20     DB 5CH, 20H, 5CH, 20H, 20H, 20H, 2FH, 20H
   \            20202F20
   \   0000A0   5F5F205C     DB 5FH, 5FH, 20H, 5CH, 0DH, 0AH, 20H, 5CH
   \            0D0A205C
   \   0000A8   205C205C     DB 20H, 5CH, 20H, 5CH, 5FH, 5FH, 5FH, 4CH
   \            5F5F5F4C
   \   0000B0   5C205C4C     DB 5CH, 20H, 5CH, 4CH, 5CH, 20H, 5CH, 20H
   \            5C205C20
   \   0000B8   5C2F5C20     DB 5CH, 2FH, 5CH, 20H, 5CH, 5FH, 5FH, 5FH
   \            5C5F5F5F
   \   0000C0   5F205C20     DB 5FH, 20H, 5CH, 20H, 5CH, 4CH, 5CH, 20H
   \            5C4C5C20
   \   0000C8   5C205C5F     DB 5CH, 20H, 5CH, 5FH, 4CH, 5CH, 20H, 20H
   \            4C5C2020
   \   0000D0   5F5F5F4C     DB 5FH, 5FH, 5FH, 4CH, 0DH, 0AH, 20H, 20H
   \            0D0A2020
   \   0000D8   5C205C5F     DB 5CH, 20H, 5CH, 5FH, 5FH, 5FH, 5FH, 5FH
   \            5F5F5F5F
   \   0000E0   5F5C5F5F     DB 5FH, 5CH, 5FH, 5FH, 5FH, 5FH, 2FH, 5CH
   \            5F5F2F5C
   \   0000E8   5F5C205C     DB 5FH, 5CH, 20H, 5CH, 5FH, 5CH, 5FH, 5FH
   \            5F5C5F5F
   \   0000F0   5F5F2F5C     DB 5FH, 5FH, 2FH, 5CH, 5FH, 5FH, 5FH, 5FH
   \            5F5F5F5F
   \   0000F8   2F5C5F5F     DB 2FH, 5CH, 5FH, 5FH, 5FH, 5FH, 5CH, 5FH
   \            5F5F5C5F
   \   000100   5F5F5F2F     DB 5FH, 5FH, 5FH, 2FH, 0DH, 0AH, 20H, 20H
   \            0D0A2020
   \   000108   205C2F5F     DB 20H, 5CH, 2FH, 5FH, 5FH, 5FH, 5FH, 5FH
   \            5F5F5F5F
   \   000110   5F2F5F5F     DB 5FH, 2FH, 5FH, 5FH, 5FH, 2FH, 5CH, 2FH
   \            5F2F5C2F
   \   000118   5F2F5C2F     DB 5FH, 2FH, 5CH, 2FH, 5FH, 2FH, 5FH, 5FH
   \            5F2F5F5F
   \   000120   5F2F5C2F     DB 5FH, 2FH, 5CH, 2FH, 5FH, 5FH, 5FH, 2FH
   \            5F5F5F2F
   \   000128   5C2F5F5F     DB 5CH, 2FH, 5FH, 5FH, 5FH, 5FH, 2FH, 5FH
   \            5F5F2F5F
   \   000130   5F5F2F0D     DB 5FH, 5FH, 2FH, 0DH, 0AH, 20H, 20H, 20H
   \            0A202020
   \   000138   20434F50     DB 20H, 43H, 4FH, 50H, 59H, 52H, 49H, 47H
   \            59524947
   \   000140   48542863     DB 48H, 54H, 28H, 63H, 29H, 3AH, 47H, 6FH
   \            293A476F
   \   000148   6F644D6F     DB 6FH, 64H, 4DH, 6FH, 72H, 6EH, 69H, 6EH
   \            726E696E
   \   000150   67090932     DB 67H, 9, 9, 32H, 30H, 31H, 39H, 2FH
   \            3031392F
   \   000158   30360D0A     DB 30H, 36H, 0DH, 0AH, 0DH, 0AH, 0
   \            0D0A00  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_1>`:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_ffffffff>`:
   \   000000   FFFFFFFF     DD -1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_a>`:
   \   000000   0A000000     DD 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_3ffffff>`:
   \   000000   FFFFFF03     DD 67108863

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_fc000000>`:
   \   000000   000000FC     DD 4227858432

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_3e00000>`:
   \   000000   0000E003     DD 65011712

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_1f0000>`:
   \   000000   00001F00     DD 2031616

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_ff00>`:
   \   000000   00FF0000     DD 65280

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_ff>`:
   \   000000   FF000000     DD 255

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_87654321>`:
   \   000000   21436587     DD 2271560481

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_0>`:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_3e0ffff>`:
   \   000000   FFFFE003     DD 65077247

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_abcd4322>`:
   \   000000   2243CDAB     DD 2882356002

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_fffffff0>`:
   \   000000   F0FFFFFF     DD 4294967280

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_abcd4320>`:
   \   000000   2043CDAB     DD 2882356000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_abcd4321>`:
   \   000000   2143CDAB     DD 2882356001

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\033[2K\\r%s">`:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for <Constant "\\033[2K\\r%s">>`
   \   000008                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\r\\n\\t%s">`:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for <Constant "\\r\\n\\t%s">>`
   \   000006                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\r\\n%s%s">`:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for <Constant "\\r\\n%s%s">>`
   \   000007                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant {0}>`:
   \   000000                DS 100
   \   000064                REQUIRE `?<Initializer for <Constant {0}>>`
   \   000064                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant {0}>_1`:
   \   000000                DS 100
   \   000064                REQUIRE `?<Initializer for <Constant {0}>>_1`
   \   000064                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\r\\n\\tno reply:%s\\r\\n">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "\\r\\n\\tno reply:%s`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\033[2J\\033[%ld;%ldH%s">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "\\033[2J\\033[%ld;%`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\r\\n(%c)------">`:
   \   000000                DS 13
   \   00000D                REQUIRE `?<Initializer for <Constant "\\r\\n(%c)------">>`
   \   00000D                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\r\\n\\r\\n%s">`:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for <Constant "\\r\\n\\r\\n%s">>`
   \   000007                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\r\\n">`:
   \   000000                DS 3
   \   000003                REQUIRE `?<Initializer for <Constant "\\r\\n">>`
   \   000003                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\r\\n%s">`:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for <Constant "\\r\\n%s">>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "^C\\r\\n%s">`:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for <Constant "^C\\r\\n%s">>`
   \   000007                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\b">`:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for <Constant "\\b">>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\b \\b">`:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for <Constant "\\b \\b">>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "cancel this operation\\r\\n">`:
   \   000000                DS 24
   \   000018                REQUIRE `?<Initializer for <Constant "cancel this opera`
   \   000018                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "%s [Y/N] ">`:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for <Constant "%s [Y/N] ">>`
   \   00000A                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "help">`:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for <Constant "help">>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "clear">`:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for <Constant "clear">>`
   \   000006                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_1:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_1>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_ffffffff:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_ffffffff>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_a:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_a>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_3ffffff:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_3ffffff>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_fc000000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_fc000000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_3e00000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_3e00000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_1f0000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_1f0000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_ff00:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_ff00>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_ff:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_ff>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_87654321:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_87654321>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_0:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_0>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_3e0ffff:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_3e0ffff>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_abcd4322:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_abcd4322>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_fffffff0:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_fffffff0>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_abcd4320:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_abcd4320>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_abcd4321:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_abcd4321>`
   \   000004                REQUIRE __INIT_XDATA_I

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     48   _shell_register
      0     82   checkout
        0     29   -> memcmp
      1     34   cmdline_gets
        0     21   -> memcpy
        0     19   -> printf
        0     21   -> printf
        0     19   -> shell_backspace
        0     19   -> shell_getchar
        0     19   -> shell_parse
        0     23   -> shell_show_history
        0     19   -> shell_tab
      0     16   cmdline_param
      0     11   cmdline_strtok
      1     19   confirm_gets
        0     17   -> memcpy
        0     15   -> printf
      1    136   shell_backspace
      0     19   shell_clean_screen
        0     19   -> printf
      0     56   shell_confirm
        0     11   -> memcpy
        0     11   -> printf
      1    162   shell_getchar
      0     11   shell_init
        0     11   -> _shell_register
        0     11   -> strncpy
      2     19   shell_input_init
        0     19   -> strcpy
      0     19   shell_list_cmd
        0     19   -> printf
      0     64   shell_parse
        0     45   -> printf
        0     45   -> shell_confirm
      1     39   shell_show_history
        0     16   -> printf
      1     72   shell_tab
        0     53   -> checkout
        0     47   -> printf
        0     49   -> printf
        0     45   -> shell_getchar
      0     13   welcome_gets
        0     11   -> cmdline_gets


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant "%s [Y/N] ">
      17  ?<Constant "\033[2J\033[%ld;%ldH%s">
       8  ?<Constant "\033[2K\r%s">
       4  ?<Constant "\b \b">
       2  ?<Constant "\b">
       3  ?<Constant "\r\n">
       5  ?<Constant "\r\n%s">
       7  ?<Constant "\r\n%s%s">
      13  ?<Constant "\r\n(%c)------">
       7  ?<Constant "\r\n\r\n%s">
       6  ?<Constant "\r\n\t%s">
      17  ?<Constant "\r\n\tno reply:%s\r\n">
       7  ?<Constant "^C\r\n%s">
      24  ?<Constant "cancel this operation\r\n">
       6  ?<Constant "clear">
       5  ?<Constant "help">
     100  ?<Constant {0}>
     100  ?<Constant {0}>_1
      10  ?<Initializer for <Constant "%s [Y/N] ">>
      17  ?<Initializer for <Constant "\033[2J\033[%ld;%
       8  ?<Initializer for <Constant "\033[2K\r%s">>
       4  ?<Initializer for <Constant "\b \b">>
       2  ?<Initializer for <Constant "\b">>
       3  ?<Initializer for <Constant "\r\n">>
       5  ?<Initializer for <Constant "\r\n%s">>
       7  ?<Initializer for <Constant "\r\n%s%s">>
      13  ?<Initializer for <Constant "\r\n(%c)------">>
       7  ?<Initializer for <Constant "\r\n\r\n%s">>
       6  ?<Initializer for <Constant "\r\n\t%s">>
      17  ?<Initializer for <Constant "\r\n\tno reply:%s
       7  ?<Initializer for <Constant "^C\r\n%s">>
      24  ?<Initializer for <Constant "cancel this opera
       6  ?<Initializer for <Constant "clear">>
       5  ?<Initializer for <Constant "help">>
     100  ?<Initializer for <Constant {0}>>
     100  ?<Initializer for <Constant {0}>>_1
     256  ?<Initializer for B_CRC8_Table>
      50  ?<Initializer for DEFAULT_INPUTSIGN>
     256  ?<Initializer for F_CRC8_Table>
       4  ?<Initializer for __Constant_0>
       4  ?<Initializer for __Constant_1>
       4  ?<Initializer for __Constant_1f0000>
       4  ?<Initializer for __Constant_3e00000>
       4  ?<Initializer for __Constant_3e0ffff>
       4  ?<Initializer for __Constant_3ffffff>
       4  ?<Initializer for __Constant_87654321>
       4  ?<Initializer for __Constant_a>
       4  ?<Initializer for __Constant_abcd4320>
       4  ?<Initializer for __Constant_abcd4321>
       4  ?<Initializer for __Constant_abcd4322>
       4  ?<Initializer for __Constant_fc000000>
       4  ?<Initializer for __Constant_ff00>
       4  ?<Initializer for __Constant_ff>
       4  ?<Initializer for __Constant_fffffff0>
       4  ?<Initializer for __Constant_ffffffff>
     351  ?<Initializer for consolologo>
       5  ??Subroutine50_0
       6  ??Subroutine51_0
       7  ??Subroutine52_0
       8  ??Subroutine53_0
       6  ??Subroutine54_0
       6  ??Subroutine55_0
       4  ??Subroutine56_0
       1  ??Subroutine57_0
       5  ??Subroutine58_0
       3  ??Subroutine59_0
       5  ??Subroutine60_0
      11  ??Subroutine61_0
       4  ??Subroutine62_0
       2  ??Subroutine63_0
       1  ??Subroutine64_0
       6  ??Subroutine65_0
       6  ??Subroutine66_0
       4  ??Subroutine67_0
       2  ?Subroutine0
       5  ?Subroutine1
       5  ?Subroutine10
       6  ?Subroutine11
       6  ?Subroutine12
       9  ?Subroutine13
       7  ?Subroutine14
       6  ?Subroutine15
      10  ?Subroutine16
       6  ?Subroutine17
      20  ?Subroutine18
       5  ?Subroutine19
       2  ?Subroutine2
       6  ?Subroutine20
       6  ?Subroutine21
       3  ?Subroutine22
       9  ?Subroutine23
       4  ?Subroutine24
      18  ?Subroutine25
       6  ?Subroutine26
       8  ?Subroutine27
       6  ?Subroutine28
      10  ?Subroutine29
       4  ?Subroutine3
       9  ?Subroutine30
      17  ?Subroutine31
      14  ?Subroutine32
      14  ?Subroutine33
      12  ?Subroutine34
       5  ?Subroutine35
      21  ?Subroutine36
      11  ?Subroutine37
      13  ?Subroutine38
      15  ?Subroutine39
      10  ?Subroutine4
       9  ?Subroutine40
      10  ?Subroutine41
       8  ?Subroutine42
      12  ?Subroutine43
       5  ?Subroutine44
      13  ?Subroutine45
       3  ?Subroutine46
      12  ?Subroutine47
      11  ?Subroutine48
       9  ?Subroutine49
      14  ?Subroutine5
       3  ?Subroutine6
       9  ?Subroutine7
       5  ?Subroutine8
       7  ?Subroutine9
     256  B_CRC8_Table
      50  DEFAULT_INPUTSIGN
     256  F_CRC8_Table
       4  __Constant_0
       4  __Constant_1
       4  __Constant_1f0000
       4  __Constant_3e00000
       4  __Constant_3e0ffff
       4  __Constant_3ffffff
       4  __Constant_87654321
       4  __Constant_a
       4  __Constant_abcd4320
       4  __Constant_abcd4321
       4  __Constant_abcd4322
       4  __Constant_fc000000
       4  __Constant_ff
       4  __Constant_ff00
       4  __Constant_fffffff0
       4  __Constant_ffffffff
     441  _shell_register
     326  checkout
     565  cmdline_gets
     396  cmdline_param
     123  cmdline_strtok
     269  confirm_gets
     351  consolologo
       2  current_puts
       2  default_puts
      10  newcmd
      10  newcmd
     341  shell_backspace
      43  shell_clean_screen
      86  shell_confirm
     406  shell_getchar
     108  shell_init
     231  shell_input_init
     175  shell_list_cmd
     644  shell_parse
     257  shell_show_history
     558  shell_tab
       2  shellcmdroot
      65  welcome_gets

 
 5 564 bytes in segment NEAR_CODE
 1 318 bytes in segment XDATA_I
 1 318 bytes in segment XDATA_ID
    26 bytes in segment XDATA_Z
 
 6 818 bytes of CODE  memory (+ 64 bytes shared)
 1 280 bytes of XDATA memory (+ 64 bytes shared)

Errors: none
Warnings: none
